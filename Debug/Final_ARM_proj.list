
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e1b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003810  0801e384  0801e384  0001f384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021b94  08021b94  000231cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021b94  08021b94  00022b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021b9c  08021b9c  000231cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021b9c  08021b9c  00022b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021ba0  08021ba0  00022ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08021ba4  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08021c30  0002308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08021cd0  0002312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002760c  200001cc  08021d70  000231cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200277d8  08021d70  000237d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000231cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004238f  00000000  00000000  000231fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009c2f  00000000  00000000  0006558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003100  00000000  00000000  0006f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000269e  00000000  00000000  000722c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016985  00000000  00000000  0007495e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d153  00000000  00000000  0008b2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127602  00000000  00000000  000d8436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ffa38  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d58c  00000000  00000000  001ffa7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  0020d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e36c 	.word	0x0801e36c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801e36c 	.word	0x0801e36c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 febb 	bl	800235a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8b8 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fb98 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fb70 	bl	8000cd0 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9b8 	bl	8000964 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb0e 	bl	8000c14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb3c 	bl	8000c74 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fada 	bl	8000bb4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f964 	bl	80008cc <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 f9ee 	bl	80009e4 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa2c 	bl	8000a64 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fa68 	bl	8000ae0 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000610:	f000 f90a 	bl	8000828 <MX_ADC1_Init>
  MX_DAC_Init();
 8000614:	f000 f97c 	bl	8000910 <MX_DAC_Init>
  MX_UART5_Init();
 8000618:	f000 fa9c 	bl	8000b54 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061c:	f00d f8ec 	bl	800d7f8 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000620:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <main+0x10c>)
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f00d fb95 	bl	800dd54 <osSemaphoreNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <main+0x110>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000630:	4a2f      	ldr	r2, [pc, #188]	@ (80006f0 <main+0x114>)
 8000632:	2100      	movs	r1, #0
 8000634:	2001      	movs	r0, #1
 8000636:	f00d fb8d 	bl	800dd54 <osSemaphoreNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a2d      	ldr	r2, [pc, #180]	@ (80006f4 <main+0x118>)
 800063e:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000640:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <main+0x11c>)
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f00d fb85 	bl	800dd54 <osSemaphoreNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a2b      	ldr	r2, [pc, #172]	@ (80006fc <main+0x120>)
 800064e:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <main+0x124>)
 8000652:	2100      	movs	r1, #0
 8000654:	2001      	movs	r0, #1
 8000656:	f00d fb7d 	bl	800dd54 <osSemaphoreNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <main+0x128>)
 800065e:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <main+0x12c>)
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	f00d fb75 	bl	800dd54 <osSemaphoreNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <main+0x130>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <main+0x134>)
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f00d fb6d 	bl	800dd54 <osSemaphoreNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <main+0x138>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000680:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <main+0x13c>)
 8000682:	2100      	movs	r1, #0
 8000684:	2001      	movs	r0, #1
 8000686:	f00d fb65 	bl	800dd54 <osSemaphoreNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a23      	ldr	r2, [pc, #140]	@ (800071c <main+0x140>)
 800068e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000690:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <main+0x144>)
 8000692:	2104      	movs	r1, #4
 8000694:	2010      	movs	r0, #16
 8000696:	f00d fcb7 	bl	800e008 <osMessageQueueNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <main+0x148>)
 800069e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <main+0x14c>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4821      	ldr	r0, [pc, #132]	@ (800072c <main+0x150>)
 80006a6:	f00d f939 	bl	800d91c <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <main+0x154>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006b0:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <main+0x158>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4820      	ldr	r0, [pc, #128]	@ (8000738 <main+0x15c>)
 80006b6:	f00d f931 	bl	800d91c <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <main+0x160>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <main+0x164>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	481f      	ldr	r0, [pc, #124]	@ (8000744 <main+0x168>)
 80006c6:	f00d f929 	bl	800d91c <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <main+0x16c>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006d0:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <main+0x170>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	481e      	ldr	r0, [pc, #120]	@ (8000750 <main+0x174>)
 80006d6:	f00d f921 	bl	800d91c <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000754 <main+0x178>)
 80006de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e0:	f00d f8be 	bl	800d860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x108>
 80006e8:	080218f8 	.word	0x080218f8
 80006ec:	20000b2c 	.word	0x20000b2c
 80006f0:	08021908 	.word	0x08021908
 80006f4:	20000b30 	.word	0x20000b30
 80006f8:	08021918 	.word	0x08021918
 80006fc:	20000b34 	.word	0x20000b34
 8000700:	08021928 	.word	0x08021928
 8000704:	20000b38 	.word	0x20000b38
 8000708:	08021938 	.word	0x08021938
 800070c:	20000b3c 	.word	0x20000b3c
 8000710:	08021948 	.word	0x08021948
 8000714:	20000b40 	.word	0x20000b40
 8000718:	08021958 	.word	0x08021958
 800071c:	20000b44 	.word	0x20000b44
 8000720:	080218e0 	.word	0x080218e0
 8000724:	20000b28 	.word	0x20000b28
 8000728:	08021850 	.word	0x08021850
 800072c:	08001129 	.word	0x08001129
 8000730:	20000b18 	.word	0x20000b18
 8000734:	08021874 	.word	0x08021874
 8000738:	0800113d 	.word	0x0800113d
 800073c:	20000b1c 	.word	0x20000b1c
 8000740:	08021898 	.word	0x08021898
 8000744:	08001181 	.word	0x08001181
 8000748:	20000b20 	.word	0x20000b20
 800074c:	080218bc 	.word	0x080218bc
 8000750:	08001195 	.word	0x08001195
 8000754:	20000b24 	.word	0x20000b24

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	@ 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f01c feff 	bl	801d56a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800077c:	f007 faf4 	bl	8007d68 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <SystemClock_Config+0xc8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a26      	ldr	r2, [pc, #152]	@ (8000820 <SystemClock_Config+0xc8>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <SystemClock_Config+0xc8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000798:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <SystemClock_Config+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a0:	4a20      	ldr	r2, [pc, #128]	@ (8000824 <SystemClock_Config+0xcc>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <SystemClock_Config+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007cc:	2348      	movs	r3, #72	@ 0x48
 80007ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007d4:	2303      	movs	r3, #3
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fad3 	bl	8007d88 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 fd74 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2102      	movs	r1, #2
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fd61 	bl	80082d0 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000814:	f000 fd5e 	bl	80012d4 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	@ 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <MX_ADC1_Init+0x98>)
 800083c:	4a21      	ldr	r2, [pc, #132]	@ (80008c4 <MX_ADC1_Init+0x9c>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800084c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000850:	2201      	movs	r2, #1
 8000852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_ADC1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_ADC1_Init+0x98>)
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <MX_ADC1_Init+0xa0>)
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_ADC1_Init+0x98>)
 800088a:	f001 fdb7 	bl	80023fc <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000894:	f000 fd1e 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_ADC1_Init+0x98>)
 80008aa:	f002 f829 	bl	8002900 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 fd0e 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001f0 	.word	0x200001f0
 80008c4:	40012000 	.word	0x40012000
 80008c8:	0f000001 	.word	0x0f000001

080008cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <MX_CRC_Init+0x40>)
 80008d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_CRC_Init+0x3c>)
 80008f6:	f002 fb75 	bl	8002fe4 <HAL_CRC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000900:	f000 fce8 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000238 	.word	0x20000238
 800090c:	40023000 	.word	0x40023000

08000910 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_DAC_Init+0x4c>)
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <MX_DAC_Init+0x50>)
 8000922:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_DAC_Init+0x4c>)
 8000926:	f002 fd67 	bl	80033f8 <HAL_DAC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000930:	f000 fcd0 	bl	80012d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	@ (800095c <MX_DAC_Init+0x4c>)
 8000944:	f002 fe5b 	bl	80035fe <HAL_DAC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800094e:	f000 fcc1 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000025c 	.word	0x2000025c
 8000960:	40007400 	.word	0x40007400

08000964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_I2C1_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <MX_I2C1_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_I2C1_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <MX_I2C1_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_I2C1_Init+0x74>)
 8000976:	22f0      	movs	r2, #240	@ 0xf0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_I2C1_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_I2C1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <MX_I2C1_Init+0x74>)
 80009a0:	f005 f874 	bl	8005a8c <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 fc93 	bl	80012d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <MX_I2C1_Init+0x74>)
 80009b2:	f007 f807 	bl	80079c4 <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 fc8a 	bl	80012d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_I2C1_Init+0x74>)
 80009c4:	f007 f849 	bl	8007a5a <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fc81 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000270 	.word	0x20000270
 80009dc:	40005400 	.word	0x40005400
 80009e0:	00808cd2 	.word	0x00808cd2

080009e4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C4_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_I2C4_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_I2C4_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_I2C4_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C4_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_I2C4_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a20:	f005 f834 	bl	8005a8c <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fc53 	bl	80012d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a32:	f006 ffc7 	bl	80079c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fc4a 	bl	80012d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_I2C4_Init+0x74>)
 8000a44:	f007 f809 	bl	8007a5a <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fc41 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200002c4 	.word	0x200002c4
 8000a5c:	40006000 	.word	0x40006000
 8000a60:	00808cd2 	.word	0x00808cd2

08000a64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_SPI1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000abe:	2208      	movs	r2, #8
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_SPI1_Init+0x74>)
 8000ac4:	f008 fa4c 	bl	8008f60 <HAL_SPI_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fc01 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200003d8 	.word	0x200003d8
 8000adc:	40013000 	.word	0x40013000

08000ae0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <MX_SPI2_Init+0x70>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000af8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000afc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b10:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_SPI2_Init+0x6c>)
 8000b38:	f008 fa12 	bl	8008f60 <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000b42:	f000 fbc7 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000043c 	.word	0x2000043c
 8000b50:	40003800 	.word	0x40003800

08000b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <MX_UART5_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_UART5_Init+0x58>)
 8000b98:	f00a f804 	bl	800aba4 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 fb97 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200004a0 	.word	0x200004a0
 8000bb0:	40005000 	.word	0x40005000

08000bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART2_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bf8:	f009 ffd4 	bl	800aba4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 fb67 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000528 	.word	0x20000528
 8000c10:	40004400 	.word	0x40004400

08000c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <MX_USART3_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART3_UART_Init+0x58>)
 8000c58:	f009 ffa4 	bl	800aba4 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 fb37 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200005b0 	.word	0x200005b0
 8000c70:	40004800 	.word	0x40004800

08000c74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	2206      	movs	r2, #6
 8000c84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	f006 ff1b 	bl	8007af2 <HAL_PCD_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f000 fb07 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000638 	.word	0x20000638

08000cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_DMA_Init+0x48>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <MX_DMA_Init+0x48>)
 8000cdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_DMA_Init+0x48>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2106      	movs	r1, #6
 8000cf2:	200b      	movs	r0, #11
 8000cf4:	f002 f93e 	bl	8002f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cf8:	200b      	movs	r0, #11
 8000cfa:	f002 f957 	bl	8002fac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2106      	movs	r1, #6
 8000d02:	2010      	movs	r0, #16
 8000d04:	f002 f936 	bl	8002f74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d08:	2010      	movs	r0, #16
 8000d0a:	f002 f94f 	bl	8002fac <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b4d      	ldr	r3, [pc, #308]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a4c      	ldr	r2, [pc, #304]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a46      	ldr	r2, [pc, #280]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b44      	ldr	r3, [pc, #272]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a40      	ldr	r2, [pc, #256]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a34      	ldr	r2, [pc, #208]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a2e      	ldr	r2, [pc, #184]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc2:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a28      	ldr	r2, [pc, #160]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <MX_GPIO_Init+0x14c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000de0:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <MX_GPIO_Init+0x150>)
 8000de2:	f004 fe1f 	bl	8005a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2140      	movs	r1, #64	@ 0x40
 8000dea:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <MX_GPIO_Init+0x154>)
 8000dec:	f004 fe1a 	bl	8005a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	481b      	ldr	r0, [pc, #108]	@ (8000e74 <MX_GPIO_Init+0x158>)
 8000e08:	f004 fb54 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <MX_GPIO_Init+0x150>)
 8000e26:	f004 fb45 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <MX_GPIO_Init+0x154>)
 8000e42:	f004 fb37 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_GPIO_Init+0x154>)
 8000e5a:	f004 fb2b 	bl	80054b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	@ 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40020800 	.word	0x40020800

08000e78 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <vApplicationStackOverflowHook+0x50>)
 8000e84:	f01c fb0c 	bl	801d4a0 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	4810      	ldr	r0, [pc, #64]	@ (8000ecc <vApplicationStackOverflowHook+0x54>)
 8000e8c:	f01c fb08 	bl	801d4a0 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <vApplicationStackOverflowHook+0x58>)
 8000e96:	f01c fb03 	bl	801d4a0 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e9e:	b672      	cpsid	i
 8000ea0:	f383 8811 	msr	BASEPRI, r3
 8000ea4:	f3bf 8f6f 	isb	sy
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	b662      	cpsie	i
 8000eae:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000eb0:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000eb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <vApplicationStackOverflowHook+0x5c>)
 8000eb8:	f004 fdcd 	bl	8005a56 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ec0:	f00c fdd2 	bl	800da68 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ec4:	bf00      	nop
 8000ec6:	e7f4      	b.n	8000eb2 <vApplicationStackOverflowHook+0x3a>
 8000ec8:	0801e3f8 	.word	0x0801e3f8
 8000ecc:	0801e41c 	.word	0x0801e41c
 8000ed0:	0801e428 	.word	0x0801e428
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n\r");

    udp_pcb_handle = udp_new();
 8000edc:	f018 fc92 	bl	8019804 <udp_new>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <udp_receive_init+0x58>)
 8000ee4:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <udp_receive_init+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <udp_receive_init+0x5c>)
 8000ef0:	f01c fad6 	bl	801d4a0 <iprintf>
        return;
 8000ef4:	e01a      	b.n	8000f2c <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <udp_receive_init+0x58>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000efe:	490e      	ldr	r1, [pc, #56]	@ (8000f38 <udp_receive_init+0x60>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f018 fbd7 	bl	80196b4 <udp_bind>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 8000f0c:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <udp_receive_init+0x64>)
 8000f0e:	f01c fac7 	bl	801d4a0 <iprintf>
        return;
 8000f12:	e00b      	b.n	8000f2c <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <udp_receive_init+0x58>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4909      	ldr	r1, [pc, #36]	@ (8000f40 <udp_receive_init+0x68>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f018 fc51 	bl	80197c4 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 8000f22:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <udp_receive_init+0x6c>)
 8000f28:	f01c faba 	bl	801d4a0 <iprintf>
}
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000b48 	.word	0x20000b48
 8000f34:	0801e438 	.word	0x0801e438
 8000f38:	08021aa4 	.word	0x08021aa4
 8000f3c:	0801e454 	.word	0x0801e454
 8000f40:	08000f49 	.word	0x08000f49
 8000f44:	0801e468 	.word	0x0801e468

08000f48 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d074      	beq.n	8001046 <udp_receive_callback+0xfe>
        // Copy the sender's IP address
        ip_addr_copy(server_addr, *addr);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a3b      	ldr	r2, [pc, #236]	@ (8001050 <udp_receive_callback+0x108>)
 8000f62:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        server_port = port;
 8000f64:	4a3b      	ldr	r2, [pc, #236]	@ (8001054 <udp_receive_callback+0x10c>)
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	8013      	strh	r3, [r2, #0]

        printf("Received from %s:%d -> %.*s\n\r",
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f01a f844 	bl	801aff8 <ip4addr_ntoa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n\r",
 8000f78:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n\r",
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4603      	mov	r3, r0
 8000f82:	4835      	ldr	r0, [pc, #212]	@ (8001058 <udp_receive_callback+0x110>)
 8000f84:	f01c fa8c 	bl	801d4a0 <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	895b      	ldrh	r3, [r3, #10]
 8000f8c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000f90:	d950      	bls.n	8001034 <udp_receive_callback+0xec>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000f92:	f240 1007 	movw	r0, #263	@ 0x107
 8000f96:	f010 fb1f 	bl	80115d8 <pvPortMalloc>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d029      	beq.n	8000ff8 <udp_receive_callback+0xb0>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f240 1207 	movw	r2, #263	@ 0x107
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f01c fbaf 	bl	801d712 <memcpy>
				// Debug print received data
				printf("Received Test Command:\n\r");
 8000fb4:	4829      	ldr	r0, [pc, #164]	@ (800105c <udp_receive_callback+0x114>)
 8000fb6:	f01c fa73 	bl	801d4a0 <iprintf>
				printf("test_id: %lu\n\r", cmd->test_id);
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4827      	ldr	r0, [pc, #156]	@ (8001060 <udp_receive_callback+0x118>)
 8000fc2:	f01c fa6d 	bl	801d4a0 <iprintf>
				printf("peripheral bitfield: 0x%02X\n\r", cmd->peripheral);
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4825      	ldr	r0, [pc, #148]	@ (8001064 <udp_receive_callback+0x11c>)
 8000fce:	f01c fa67 	bl	801d4a0 <iprintf>
				printf("iterations: %u\n\r", cmd->iterations);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	795b      	ldrb	r3, [r3, #5]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4823      	ldr	r0, [pc, #140]	@ (8001068 <udp_receive_callback+0x120>)
 8000fda:	f01c fa61 	bl	801d4a0 <iprintf>
				printf("bit pattern length: %u\n\r", cmd->bit_pattern_length);
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	799b      	ldrb	r3, [r3, #6]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4821      	ldr	r0, [pc, #132]	@ (800106c <udp_receive_callback+0x124>)
 8000fe6:	f01c fa5b 	bl	801d4a0 <iprintf>
				printf("bit pattern: %s\n\r",cmd->bit_pattern);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3307      	adds	r3, #7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481f      	ldr	r0, [pc, #124]	@ (8001070 <udp_receive_callback+0x128>)
 8000ff2:	f01c fa55 	bl	801d4a0 <iprintf>
 8000ff6:	e002      	b.n	8000ffe <udp_receive_callback+0xb6>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n\r");
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <udp_receive_callback+0x12c>)
 8000ffa:	f01c fa51 	bl	801d4a0 <iprintf>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <udp_receive_callback+0x130>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	f107 0114 	add.w	r1, r7, #20
 8001006:	2300      	movs	r3, #0
 8001008:	2201      	movs	r2, #1
 800100a:	f00d fcdd 	bl	800e9c8 <xQueueGenericSend>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d007      	beq.n	8001024 <udp_receive_callback+0xdc>
                printf("Failed to send data to tests queue.\n\r");
 8001014:	4819      	ldr	r0, [pc, #100]	@ (800107c <udp_receive_callback+0x134>)
 8001016:	f01c fa43 	bl	801d4a0 <iprintf>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4618      	mov	r0, r3
 800101e:	f010 fba9 	bl	8011774 <vPortFree>
 8001022:	e00d      	b.n	8001040 <udp_receive_callback+0xf8>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n\r");
                xTaskNotifyGive(performing_taskHandle);
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <udp_receive_callback+0x138>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	2202      	movs	r2, #2
 800102c:	2100      	movs	r1, #0
 800102e:	f00f fc0f 	bl	8010850 <xTaskGenericNotify>
 8001032:	e005      	b.n	8001040 <udp_receive_callback+0xf8>
            }
        } else {
            printf("Packet too short: %d bytes\n\r", p->len);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	895b      	ldrh	r3, [r3, #10]
 8001038:	4619      	mov	r1, r3
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <udp_receive_callback+0x13c>)
 800103c:	f01c fa30 	bl	801d4a0 <iprintf>
        }
        pbuf_free(p);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f012 fa43 	bl	80134cc <pbuf_free>
    }
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001e8 	.word	0x200001e8
 8001054:	200001ec 	.word	0x200001ec
 8001058:	0801e48c 	.word	0x0801e48c
 800105c:	0801e4ac 	.word	0x0801e4ac
 8001060:	0801e4c8 	.word	0x0801e4c8
 8001064:	0801e4d8 	.word	0x0801e4d8
 8001068:	0801e4f8 	.word	0x0801e4f8
 800106c:	0801e50c 	.word	0x0801e50c
 8001070:	0801e528 	.word	0x0801e528
 8001074:	0801e53c 	.word	0x0801e53c
 8001078:	20000b28 	.word	0x20000b28
 800107c:	0801e56c 	.word	0x0801e56c
 8001080:	20000b24 	.word	0x20000b24
 8001084:	0801e594 	.word	0x0801e594

08001088 <send_response>:

void send_response(result_pro_t result) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	463b      	mov	r3, r7
 8001090:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&server_addr) == 0) {
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <send_response+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d022      	beq.n	80010e2 <send_response+0x5a>
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 800109c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80010a0:	2106      	movs	r1, #6
 80010a2:	2036      	movs	r0, #54	@ 0x36
 80010a4:	f011 ff2e 	bl	8012f04 <pbuf_alloc>
 80010a8:	60f8      	str	r0, [r7, #12]
        if (p != NULL) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d018      	beq.n	80010e2 <send_response+0x5a>
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	463b      	mov	r3, r7
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	6010      	str	r0, [r2, #0]
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &server_addr, server_port) != ERR_OK){
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <send_response+0x68>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <send_response+0x6c>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <send_response+0x64>)
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	f018 f93c 	bl	8019348 <udp_sendto>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <send_response+0x54>
            	printf("sendto server failed");
 80010d6:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <send_response+0x70>)
 80010d8:	f01c f9e2 	bl	801d4a0 <iprintf>
            }

            // Free the pbuf
            pbuf_free(p);
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f012 f9f5 	bl	80134cc <pbuf_free>
        }
    }
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001e8 	.word	0x200001e8
 80010f0:	20000b48 	.word	0x20000b48
 80010f4:	200001ec 	.word	0x200001ec
 80010f8:	0801e5b4 	.word	0x0801e5b4

080010fc <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3303      	adds	r3, #3
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <calculate_crc+0x28>)
 8001114:	f001 ffca 	bl	80030ac <HAL_CRC_Calculate>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000238 	.word	0x20000238

08001128 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001130:	f00b fcf6 	bl	800cb20 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f00c fc97 	bl	800da68 <osDelay>
 800113a:	e7fb      	b.n	8001134 <lwip_initiation+0xc>

0800113c <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <blinking_blue+0x1c>)
 8001148:	f004 fc85 	bl	8005a56 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001150:	f00c fc8a 	bl	800da68 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001154:	bf00      	nop
 8001156:	e7f5      	b.n	8001144 <blinking_blue+0x8>
 8001158:	40020400 	.word	0x40020400

0800115c <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	2201      	movs	r2, #1
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <__io_putchar+0x20>)
 800116e:	f009 fd67 	bl	800ac40 <HAL_UART_Transmit>
    return ch;
 8001172:	687b      	ldr	r3, [r7, #4]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200005b0 	.word	0x200005b0

08001180 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001188:	f7ff fea6 	bl	8000ed8 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f00c fc6b 	bl	800da68 <osDelay>
 8001192:	e7fb      	b.n	800118c <udp_function+0xc>

08001194 <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	@ 0x40
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	2001      	movs	r0, #1
 80011a2:	f00f fb09 	bl	80107b8 <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n\r");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 80011a6:	4b40      	ldr	r3, [pc, #256]	@ (80012a8 <perform_tests+0x114>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f107 011c 	add.w	r1, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00d fe4f 	bl	800ee54 <xQueueReceive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d003      	beq.n	80011c4 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 80011bc:	483b      	ldr	r0, [pc, #236]	@ (80012ac <perform_tests+0x118>)
 80011be:	f01c f96f 	bl	801d4a0 <iprintf>
 80011c2:	e7eb      	b.n	800119c <perform_tests+0x8>
		continue;
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <perform_tests+0x40>
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	795b      	ldrb	r3, [r3, #5]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <perform_tests+0x4c>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011de:	823b      	strh	r3, [r7, #16]
//		response.test_result = TEST_ERR;
		// send response
	}
	result_pro_t response_result;
	switch (cmd->peripheral){
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d85a      	bhi.n	80012a0 <perform_tests+0x10c>
 80011ea:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <perform_tests+0x5c>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	080012a1 	.word	0x080012a1
 80011f4:	08001231 	.word	0x08001231
 80011f8:	080012a1 	.word	0x080012a1
 80011fc:	0800124d 	.word	0x0800124d
 8001200:	080012a1 	.word	0x080012a1
 8001204:	080012a1 	.word	0x080012a1
 8001208:	080012a1 	.word	0x080012a1
 800120c:	08001269 	.word	0x08001269
 8001210:	080012a1 	.word	0x080012a1
 8001214:	080012a1 	.word	0x080012a1
 8001218:	080012a1 	.word	0x080012a1
 800121c:	080012a1 	.word	0x080012a1
 8001220:	080012a1 	.word	0x080012a1
 8001224:	080012a1 	.word	0x080012a1
 8001228:	080012a1 	.word	0x080012a1
 800122c:	08001285 	.word	0x08001285
	case TIMER:
		break;
	case UART:
		send_response(uart_testing(cmd));
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f01b fd87 	bl	801cd4c <uart_testing>
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001246:	f7ff ff1f 	bl	8001088 <send_response>
		break;
 800124a:	e029      	b.n	80012a0 <perform_tests+0x10c>
	case SPI:
		send_response(spi_testing(cmd));
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f01b fb51 	bl	801c8fc <spi_testing>
 800125a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001262:	f7ff ff11 	bl	8001088 <send_response>
		break;
 8001266:	e01b      	b.n	80012a0 <perform_tests+0x10c>
	case I2C:
		send_response(i2c_testing(cmd));
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f01b f8ad 	bl	801c3d0 <i2c_testing>
 8001276:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800127a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127e:	f7ff ff03 	bl	8001088 <send_response>
		break;
 8001282:	e00d      	b.n	80012a0 <perform_tests+0x10c>
	case ADC_P:
		send_response(adc_testing(cmd));
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f01a ff49 	bl	801c124 <adc_testing>
 8001292:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001296:	e893 0003 	ldmia.w	r3, {r0, r1}
 800129a:	f7ff fef5 	bl	8001088 <send_response>
		break;
 800129e:	bf00      	nop
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f00c fbe1 	bl	800da68 <osDelay>
  {
 80012a6:	e779      	b.n	800119c <perform_tests+0x8>
 80012a8:	20000b28 	.word	0x20000b28
 80012ac:	0801e5cc 	.word	0x0801e5cc

080012b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012c2:	f001 f857 	bl	8002374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40001000 	.word	0x40001000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <Error_Handler+0x8>

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	f06f 0001 	mvn.w	r0, #1
 800131e:	f001 fe29 	bl	8002f74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_ADC_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a18      	ldr	r2, [pc, #96]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_ADC_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <HAL_ADC_MspInit+0x8c>)
 8001396:	f004 f88d 	bl	80054b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2105      	movs	r1, #5
 800139e:	2012      	movs	r0, #18
 80013a0:	f001 fde8 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013a4:	2012      	movs	r0, #18
 80013a6:	f001 fe01 	bl	8002fac <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_CRC_MspInit+0x38>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10b      	bne.n	80013ea <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_CRC_MspInit+0x3c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <HAL_CRC_MspInit+0x3c>)
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_CRC_MspInit+0x3c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023000 	.word	0x40023000
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_DAC_MspInit+0x84>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d12b      	bne.n	800147a <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a18      	ldr	r2, [pc, #96]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 8001428:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_DAC_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001452:	2310      	movs	r3, #16
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <HAL_DAC_MspInit+0x8c>)
 8001466:	f004 f825 	bl	80054b4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	2036      	movs	r0, #54	@ 0x36
 8001470:	f001 fd80 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001474:	2036      	movs	r0, #54	@ 0x36
 8001476:	f001 fd99 	bl	8002fac <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	@ 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40007400 	.word	0x40007400
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0ac      	sub	sp, #176	@ 0xb0
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	2284      	movs	r2, #132	@ 0x84
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f01c f85a 	bl	801d56a <memset>
  if(hi2c->Instance==I2C1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a82      	ldr	r2, [pc, #520]	@ (80016c4 <HAL_I2C_MspInit+0x234>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d17b      	bne.n	80015b8 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	4618      	mov	r0, r3
 80014d0:	f007 f956 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014da:	f7ff fefb 	bl	80012d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b7a      	ldr	r3, [pc, #488]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a79      	ldr	r2, [pc, #484]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b77      	ldr	r3, [pc, #476]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800151a:	4619      	mov	r1, r3
 800151c:	486b      	ldr	r0, [pc, #428]	@ (80016cc <HAL_I2C_MspInit+0x23c>)
 800151e:	f003 ffc9 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	4b69      	ldr	r3, [pc, #420]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a68      	ldr	r2, [pc, #416]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b66      	ldr	r3, [pc, #408]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800153a:	4b65      	ldr	r3, [pc, #404]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800153c:	4a65      	ldr	r2, [pc, #404]	@ (80016d4 <HAL_I2C_MspInit+0x244>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001540:	4b63      	ldr	r3, [pc, #396]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001542:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001546:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b60      	ldr	r3, [pc, #384]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b5e      	ldr	r3, [pc, #376]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155c:	4b5c      	ldr	r3, [pc, #368]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001562:	4b5b      	ldr	r3, [pc, #364]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001568:	4b59      	ldr	r3, [pc, #356]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b58      	ldr	r3, [pc, #352]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001574:	4b56      	ldr	r3, [pc, #344]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800157a:	4855      	ldr	r0, [pc, #340]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800157c:	f002 f8a2 	bl	80036c4 <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001586:	f7ff fea5 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a50      	ldr	r2, [pc, #320]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 800158e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001590:	4a4f      	ldr	r2, [pc, #316]	@ (80016d0 <HAL_I2C_MspInit+0x240>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	201f      	movs	r0, #31
 800159c:	f001 fcea 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a0:	201f      	movs	r0, #31
 80015a2:	f001 fd03 	bl	8002fac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2020      	movs	r0, #32
 80015ac:	f001 fce2 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015b0:	2020      	movs	r0, #32
 80015b2:	f001 fcfb 	bl	8002fac <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015b6:	e080      	b.n	80016ba <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a46      	ldr	r2, [pc, #280]	@ (80016d8 <HAL_I2C_MspInit+0x248>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d17b      	bne.n	80016ba <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 f8d4 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_MspInit+0x152>
      Error_Handler();
 80015de:	f7ff fe79 	bl	80012d4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e2:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a38      	ldr	r2, [pc, #224]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015fa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001614:	2304      	movs	r3, #4
 8001616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800161a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161e:	4619      	mov	r1, r3
 8001620:	482e      	ldr	r0, [pc, #184]	@ (80016dc <HAL_I2C_MspInit+0x24c>)
 8001622:	f003 ff47 	bl	80054b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 800162c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <HAL_I2C_MspInit+0x238>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001640:	4a28      	ldr	r2, [pc, #160]	@ (80016e4 <HAL_I2C_MspInit+0x254>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001646:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800164a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 800164e:	2240      	movs	r2, #64	@ 0x40
 8001650:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 800165a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800165e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001680:	f002 f820 	bl	80036c4 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 800168a:	f7ff fe23 	bl	80012d4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001692:	639a      	str	r2, [r3, #56]	@ 0x38
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <HAL_I2C_MspInit+0x250>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	205f      	movs	r0, #95	@ 0x5f
 80016a0:	f001 fc68 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80016a4:	205f      	movs	r0, #95	@ 0x5f
 80016a6:	f001 fc81 	bl	8002fac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2060      	movs	r0, #96	@ 0x60
 80016b0:	f001 fc60 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80016b4:	2060      	movs	r0, #96	@ 0x60
 80016b6:	f001 fc79 	bl	8002fac <HAL_NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	37b0      	adds	r7, #176	@ 0xb0
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	20000318 	.word	0x20000318
 80016d4:	40026010 	.word	0x40026010
 80016d8:	40006000 	.word	0x40006000
 80016dc:	40021400 	.word	0x40021400
 80016e0:	20000378 	.word	0x20000378
 80016e4:	40026088 	.word	0x40026088

080016e8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a21      	ldr	r2, [pc, #132]	@ (800177c <HAL_I2C_MspDeInit+0x94>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11b      	bne.n	8001732 <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_I2C_MspDeInit+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <HAL_I2C_MspDeInit+0x98>)
 8001700:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170a:	481e      	ldr	r0, [pc, #120]	@ (8001784 <HAL_I2C_MspDeInit+0x9c>)
 800170c:	f004 f87e 	bl	800580c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001710:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001714:	481b      	ldr	r0, [pc, #108]	@ (8001784 <HAL_I2C_MspDeInit+0x9c>)
 8001716:	f004 f879 	bl	800580c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f87e 	bl	8003820 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001724:	201f      	movs	r0, #31
 8001726:	f001 fc4f 	bl	8002fc8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800172a:	2020      	movs	r0, #32
 800172c:	f001 fc4c 	bl	8002fc8 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001730:	e01f      	b.n	8001772 <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <HAL_I2C_MspDeInit+0xa0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d11a      	bne.n	8001772 <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HAL_I2C_MspDeInit+0x98>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <HAL_I2C_MspDeInit+0x98>)
 8001742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800174c:	480f      	ldr	r0, [pc, #60]	@ (800178c <HAL_I2C_MspDeInit+0xa4>)
 800174e:	f004 f85d 	bl	800580c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8001752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <HAL_I2C_MspDeInit+0xa4>)
 8001758:	f004 f858 	bl	800580c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f85d 	bl	8003820 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001766:	205f      	movs	r0, #95	@ 0x5f
 8001768:	f001 fc2e 	bl	8002fc8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800176c:	2060      	movs	r0, #96	@ 0x60
 800176e:	f001 fc2b 	bl	8002fc8 <HAL_NVIC_DisableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40005400 	.word	0x40005400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400
 8001788:	40006000 	.word	0x40006000
 800178c:	40021400 	.word	0x40021400

08001790 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_SPI_MspInit+0x168>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d14c      	bne.n	800184c <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b2:	4b52      	ldr	r3, [pc, #328]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a51      	ldr	r2, [pc, #324]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b4f      	ldr	r3, [pc, #316]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b4c      	ldr	r3, [pc, #304]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a4b      	ldr	r2, [pc, #300]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b49      	ldr	r3, [pc, #292]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a45      	ldr	r2, [pc, #276]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017fa:	2360      	movs	r3, #96	@ 0x60
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180a:	2305      	movs	r3, #5
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	483a      	ldr	r0, [pc, #232]	@ (8001900 <HAL_SPI_MspInit+0x170>)
 8001816:	f003 fe4d 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800181a:	2320      	movs	r3, #32
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4833      	ldr	r0, [pc, #204]	@ (8001904 <HAL_SPI_MspInit+0x174>)
 8001836:	f003 fe3d 	bl	80054b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2023      	movs	r0, #35	@ 0x23
 8001840:	f001 fb98 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001844:	2023      	movs	r0, #35	@ 0x23
 8001846:	f001 fbb1 	bl	8002fac <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800184a:	e051      	b.n	80018f0 <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <HAL_SPI_MspInit+0x178>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d14c      	bne.n	80018f0 <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001856:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a22      	ldr	r2, [pc, #136]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_SPI_MspInit+0x16c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189e:	230c      	movs	r3, #12
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ae:	2305      	movs	r3, #5
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4814      	ldr	r0, [pc, #80]	@ (800190c <HAL_SPI_MspInit+0x17c>)
 80018ba:	f003 fdfb 	bl	80054b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d0:	2305      	movs	r3, #5
 80018d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	480a      	ldr	r0, [pc, #40]	@ (8001904 <HAL_SPI_MspInit+0x174>)
 80018dc:	f003 fdea 	bl	80054b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2105      	movs	r1, #5
 80018e4:	2024      	movs	r0, #36	@ 0x24
 80018e6:	f001 fb45 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018ea:	2024      	movs	r0, #36	@ 0x24
 80018ec:	f001 fb5e 	bl	8002fac <HAL_NVIC_EnableIRQ>
}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	@ 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40003800 	.word	0x40003800
 800190c:	40020800 	.word	0x40020800

08001910 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0b0      	sub	sp, #192	@ 0xc0
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192c:	2284      	movs	r2, #132	@ 0x84
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f01b fe1a 	bl	801d56a <memset>
  if(huart->Instance==UART5)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a91      	ldr	r2, [pc, #580]	@ (8001b80 <HAL_UART_MspInit+0x270>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d166      	bne.n	8001a0e <HAL_UART_MspInit+0xfe>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001946:	2300      	movs	r3, #0
 8001948:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800194e:	4618      	mov	r0, r3
 8001950:	f006 ff16 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800195a:	f7ff fcbb 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800195e:	4b89      	ldr	r3, [pc, #548]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a88      	ldr	r2, [pc, #544]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b86      	ldr	r3, [pc, #536]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b83      	ldr	r3, [pc, #524]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a82      	ldr	r2, [pc, #520]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b80      	ldr	r3, [pc, #512]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a7c      	ldr	r2, [pc, #496]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019c0:	2308      	movs	r3, #8
 80019c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019ca:	4619      	mov	r1, r3
 80019cc:	486e      	ldr	r0, [pc, #440]	@ (8001b88 <HAL_UART_MspInit+0x278>)
 80019ce:	f003 fd71 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019d2:	2304      	movs	r3, #4
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019ea:	2308      	movs	r3, #8
 80019ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019f4:	4619      	mov	r1, r3
 80019f6:	4865      	ldr	r0, [pc, #404]	@ (8001b8c <HAL_UART_MspInit+0x27c>)
 80019f8:	f003 fd5c 	bl	80054b4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2105      	movs	r1, #5
 8001a00:	2035      	movs	r0, #53	@ 0x35
 8001a02:	f001 fab7 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a06:	2035      	movs	r0, #53	@ 0x35
 8001a08:	f001 fad0 	bl	8002fac <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a0c:	e0b3      	b.n	8001b76 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5f      	ldr	r2, [pc, #380]	@ (8001b90 <HAL_UART_MspInit+0x280>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d164      	bne.n	8001ae2 <HAL_UART_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a24:	4618      	mov	r0, r3
 8001a26:	f006 feab 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8001a30:	f7ff fc50 	bl	80012d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	4a4c      	ldr	r2, [pc, #304]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4a46      	ldr	r2, [pc, #280]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a70:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a94:	2307      	movs	r3, #7
 8001a96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	483c      	ldr	r0, [pc, #240]	@ (8001b94 <HAL_UART_MspInit+0x284>)
 8001aa2:	f003 fd07 	bl	80054b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4830      	ldr	r0, [pc, #192]	@ (8001b8c <HAL_UART_MspInit+0x27c>)
 8001acc:	f003 fcf2 	bl	80054b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2105      	movs	r1, #5
 8001ad4:	2026      	movs	r0, #38	@ 0x26
 8001ad6:	f001 fa4d 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ada:	2026      	movs	r0, #38	@ 0x26
 8001adc:	f001 fa66 	bl	8002fac <HAL_NVIC_EnableIRQ>
}
 8001ae0:	e049      	b.n	8001b76 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART3)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8001b98 <HAL_UART_MspInit+0x288>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d144      	bne.n	8001b76 <HAL_UART_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 fe40 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8001b06:	f7ff fbe5 	bl	80012d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_UART_MspInit+0x274>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480a      	ldr	r0, [pc, #40]	@ (8001b8c <HAL_UART_MspInit+0x27c>)
 8001b62:	f003 fca7 	bl	80054b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	2027      	movs	r0, #39	@ 0x27
 8001b6c:	f001 fa02 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b70:	2027      	movs	r0, #39	@ 0x27
 8001b72:	f001 fa1b 	bl	8002fac <HAL_NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	37c0      	adds	r7, #192	@ 0xc0
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005000 	.word	0x40005000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40004800 	.word	0x40004800

08001b9c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	2284      	movs	r2, #132	@ 0x84
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f01b fcd4 	bl	801d56a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bca:	d159      	bne.n	8001c80 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f006 fdcf 	bl	8008780 <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001be8:	f7ff fb74 	bl	80012d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b26      	ldr	r3, [pc, #152]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf0:	4a25      	ldr	r2, [pc, #148]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf8:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c04:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <HAL_PCD_MspInit+0xf0>)
 8001c2c:	f003 fc42 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4810      	ldr	r0, [pc, #64]	@ (8001c8c <HAL_PCD_MspInit+0xf0>)
 8001c4c:	f003 fc32 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c54:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_PCD_MspInit+0xec>)
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	37b0      	adds	r7, #176	@ 0xb0
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020000 	.word	0x40020000

08001c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	@ 0x38
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ca0:	4b33      	ldr	r3, [pc, #204]	@ (8001d70 <HAL_InitTick+0xe0>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	4a32      	ldr	r2, [pc, #200]	@ (8001d70 <HAL_InitTick+0xe0>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cac:	4b30      	ldr	r3, [pc, #192]	@ (8001d70 <HAL_InitTick+0xe0>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb8:	f107 0210 	add.w	r2, r7, #16
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f006 fd2a 	bl	800871c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cd2:	f006 fcfb 	bl	80086cc <HAL_RCC_GetPCLK1Freq>
 8001cd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cda:	f006 fcf7 	bl	80086cc <HAL_RCC_GetPCLK1Freq>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <HAL_InitTick+0xe4>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001cf4:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <HAL_InitTick+0xec>)
 8001cf6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001cfa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cfe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d18:	4817      	ldr	r0, [pc, #92]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d1a:	f008 fc75 	bl	800a608 <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11b      	bne.n	8001d64 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d2c:	4812      	ldr	r0, [pc, #72]	@ (8001d78 <HAL_InitTick+0xe8>)
 8001d2e:	f008 fccd 	bl	800a6cc <HAL_TIM_Base_Start_IT>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d40:	2036      	movs	r0, #54	@ 0x36
 8001d42:	f001 f933 	bl	8002fac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d808      	bhi.n	8001d5e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	2036      	movs	r0, #54	@ 0x36
 8001d52:	f001 f90f 	bl	8002f74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_InitTick+0xf0>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e002      	b.n	8001d64 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3738      	adds	r7, #56	@ 0x38
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	20000b4c 	.word	0x20000b4c
 8001d7c:	40001000 	.word	0x40001000
 8001d80:	20000004 	.word	0x20000004

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <NMI_Handler+0x4>

08001d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001d92:	4809      	ldr	r0, [pc, #36]	@ (8001db8 <HardFault_Handler+0x2c>)
 8001d94:	f01b fb84 	bl	801d4a0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d9c:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <HardFault_Handler+0x30>)
 8001d9e:	f003 fe5a 	bl	8005a56 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	e002      	b.n	8001dae <HardFault_Handler+0x22>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a03      	ldr	r2, [pc, #12]	@ (8001dc0 <HardFault_Handler+0x34>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	ddf8      	ble.n	8001da8 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001db6:	e7ef      	b.n	8001d98 <HardFault_Handler+0xc>
 8001db8:	0801e5f8 	.word	0x0801e5f8
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	000f423f 	.word	0x000f423f

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <MemManage_Handler+0x10>)
 8001dca:	f01b fb69 	bl	801d4a0 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dce:	bf00      	nop
 8001dd0:	e7fd      	b.n	8001dce <MemManage_Handler+0xa>
 8001dd2:	bf00      	nop
 8001dd4:	0801e5f8 	.word	0x0801e5f8

08001dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <BusFault_Handler+0x10>)
 8001dde:	f01b fb5f 	bl	801d4a0 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	bf00      	nop
 8001de4:	e7fd      	b.n	8001de2 <BusFault_Handler+0xa>
 8001de6:	bf00      	nop
 8001de8:	0801e5f8 	.word	0x0801e5f8

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA1_Stream0_IRQHandler+0x10>)
 8001e0a:	f001 fe59 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000318 	.word	0x20000318

08001e18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Stream5_IRQHandler+0x10>)
 8001e1e:	f001 fe4f 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000378 	.word	0x20000378

08001e2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <ADC_IRQHandler+0x10>)
 8001e32:	f000 fc33 	bl	800269c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001f0 	.word	0x200001f0

08001e40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <I2C1_EV_IRQHandler+0x10>)
 8001e46:	f004 f8b7 	bl	8005fb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000270 	.word	0x20000270

08001e54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <I2C1_ER_IRQHandler+0x10>)
 8001e5a:	f004 f8c7 	bl	8005fec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000270 	.word	0x20000270

08001e68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <SPI1_IRQHandler+0x10>)
 8001e6e:	f007 fce7 	bl	8009840 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003d8 	.word	0x200003d8

08001e7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <SPI2_IRQHandler+0x10>)
 8001e82:	f007 fcdd 	bl	8009840 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000043c 	.word	0x2000043c

08001e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <USART2_IRQHandler+0x10>)
 8001e96:	f009 f891 	bl	800afbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000528 	.word	0x20000528

08001ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <USART3_IRQHandler+0x10>)
 8001eaa:	f009 f887 	bl	800afbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200005b0 	.word	0x200005b0

08001eb8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <UART5_IRQHandler+0x10>)
 8001ebe:	f009 f87d 	bl	800afbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200004a0 	.word	0x200004a0

08001ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <TIM6_DAC_IRQHandler+0x20>)
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001eda:	4804      	ldr	r0, [pc, #16]	@ (8001eec <TIM6_DAC_IRQHandler+0x20>)
 8001edc:	f001 fb05 	bl	80034ea <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001ee0:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <TIM6_DAC_IRQHandler+0x24>)
 8001ee2:	f008 fc6b 	bl	800a7bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000025c 	.word	0x2000025c
 8001ef0:	20000b4c 	.word	0x20000b4c

08001ef4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <ETH_IRQHandler+0x10>)
 8001efa:	f002 fbf3 	bl	80046e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20009f24 	.word	0x20009f24

08001f08 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <ETH_WKUP_IRQHandler+0x10>)
 8001f0e:	f002 fbe9 	bl	80046e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20009f24 	.word	0x20009f24

08001f1c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <I2C4_EV_IRQHandler+0x10>)
 8001f22:	f004 f849 	bl	8005fb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002c4 	.word	0x200002c4

08001f30 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <I2C4_ER_IRQHandler+0x10>)
 8001f36:	f004 f859 	bl	8005fec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002c4 	.word	0x200002c4

08001f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_kill>:

int _kill(int pid, int sig)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <_kill+0x20>)
 8001f60:	2216      	movs	r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
  return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	200277c8 	.word	0x200277c8

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe5 	bl	8001f54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <_exit+0x12>

08001f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e00a      	b.n	8001fb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa0:	f3af 8000 	nop.w
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf0      	blt.n	8001fa0 <_read+0x12>
  }

  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e009      	b.n	8001fee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8ba 	bl	800115c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf1      	blt.n	8001fda <_write+0x12>
  }
  return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_close>:

int _close(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002028:	605a      	str	r2, [r3, #4]
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_isatty>:

int _isatty(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d205      	bcs.n	80020a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <_sbrk+0x6c>)
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a06      	ldr	r2, [pc, #24]	@ (80020cc <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20050000 	.word	0x20050000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	20000b98 	.word	0x20000b98
 80020d0:	200277d8 	.word	0x200277d8
 80020d4:	200277c8 	.word	0x200277c8

080020d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002134 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002100:	f7ff ffea 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800212a:	f01b facb 	bl	801d6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe fa55 	bl	80005dc <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002140:	08021ba4 	.word	0x08021ba4
  ldr r2, =_sbss
 8002144:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002148:	200277d8 	.word	0x200277d8

0800214c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <CAN1_RX0_IRQHandler>

0800214e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <LAN8742_RegisterBusIO+0x28>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <LAN8742_RegisterBusIO+0x28>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <LAN8742_RegisterBusIO+0x28>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e014      	b.n	80021a6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d139      	bne.n	8002242 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e01c      	b.n	8002222 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f107 020c 	add.w	r2, r7, #12
 80021f0:	2112      	movs	r1, #18
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	4798      	blx	r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da03      	bge.n	8002204 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021fc:	f06f 0304 	mvn.w	r3, #4
 8002200:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002202:	e00b      	b.n	800221c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	d105      	bne.n	800221c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
         break;
 800221a:	e005      	b.n	8002228 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b1f      	cmp	r3, #31
 8002226:	d9df      	bls.n	80021e8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b1f      	cmp	r3, #31
 800222e:	d902      	bls.n	8002236 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002230:	f06f 0302 	mvn.w	r3, #2
 8002234:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002242:	693b      	ldr	r3, [r7, #16]
 }
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6810      	ldr	r0, [r2, #0]
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	2101      	movs	r1, #1
 8002266:	4798      	blx	r3
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	da02      	bge.n	8002274 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800226e:	f06f 0304 	mvn.w	r3, #4
 8002272:	e06e      	b.n	8002352 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6810      	ldr	r0, [r2, #0]
 800227c:	f107 020c 	add.w	r2, r7, #12
 8002280:	2101      	movs	r1, #1
 8002282:	4798      	blx	r3
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	da02      	bge.n	8002290 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800228a:	f06f 0304 	mvn.w	r3, #4
 800228e:	e060      	b.n	8002352 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800229a:	2301      	movs	r3, #1
 800229c:	e059      	b.n	8002352 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6810      	ldr	r0, [r2, #0]
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	2100      	movs	r1, #0
 80022ac:	4798      	blx	r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da02      	bge.n	80022ba <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022b4:	f06f 0304 	mvn.w	r3, #4
 80022b8:	e04b      	b.n	8002352 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11b      	bne.n	80022fc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <LAN8742_GetLinkState+0x90>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022d8:	2302      	movs	r3, #2
 80022da:	e03a      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e033      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022f4:	2304      	movs	r3, #4
 80022f6:	e02c      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022f8:	2305      	movs	r3, #5
 80022fa:	e02a      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6810      	ldr	r0, [r2, #0]
 8002304:	f107 020c 	add.w	r2, r7, #12
 8002308:	211f      	movs	r1, #31
 800230a:	4798      	blx	r3
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	da02      	bge.n	8002318 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002312:	f06f 0304 	mvn.w	r3, #4
 8002316:	e01c      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002322:	2306      	movs	r3, #6
 8002324:	e015      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 031c 	and.w	r3, r3, #28
 800232c:	2b18      	cmp	r3, #24
 800232e:	d101      	bne.n	8002334 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002330:	2302      	movs	r3, #2
 8002332:	e00e      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 031c 	and.w	r3, r3, #28
 800233a:	2b08      	cmp	r3, #8
 800233c:	d101      	bne.n	8002342 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800233e:	2303      	movs	r3, #3
 8002340:	e007      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 031c 	and.w	r3, r3, #28
 8002348:	2b14      	cmp	r3, #20
 800234a:	d101      	bne.n	8002350 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800234c:	2304      	movs	r3, #4
 800234e:	e000      	b.n	8002352 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002350:	2305      	movs	r3, #5
    }
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235e:	2003      	movs	r0, #3
 8002360:	f000 fdfd 	bl	8002f5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002364:	2005      	movs	r0, #5
 8002366:	f7ff fc93 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236a:	f7fe ffb9 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008
 8002398:	20000b9c 	.word	0x20000b9c

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000b9c 	.word	0x20000b9c

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008

080023fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e031      	b.n	8002476 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe ff88 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_ADC_Init+0x84>)
 8002440:	4013      	ands	r3, r2
 8002442:	f043 0202 	orr.w	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fbb2 	bl	8002bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40
 8002466:	e001      	b.n	800246c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	ffffeefd 	.word	0xffffeefd

08002484 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADC_Stop+0x16>
 8002496:	2302      	movs	r3, #2
 8002498:	e01f      	b.n	80024da <HAL_ADC_Stop+0x56>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <HAL_ADC_Stop+0x64>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	ffffeefe 	.word	0xffffeefe

080024ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Start_IT+0x1a>
 8002502:	2302      	movs	r3, #2
 8002504:	e0b5      	b.n	8002672 <HAL_ADC_Start_IT+0x186>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d018      	beq.n	800254e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800252c:	4b54      	ldr	r3, [pc, #336]	@ (8002680 <HAL_ADC_Start_IT+0x194>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <HAL_ADC_Start_IT+0x198>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0c9a      	lsrs	r2, r3, #18
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002540:	e002      	b.n	8002548 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d17d      	bne.n	8002658 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002560:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <HAL_ADC_Start_IT+0x19c>)
 8002562:	4013      	ands	r3, r2
 8002564:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002582:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	f023 0206 	bic.w	r2, r3, #6
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025bc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b30      	ldr	r3, [pc, #192]	@ (800268c <HAL_ADC_Start_IT+0x1a0>)
 80025ca:	430b      	orrs	r3, r1
 80025cc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025ce:	4b30      	ldr	r3, [pc, #192]	@ (8002690 <HAL_ADC_Start_IT+0x1a4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d143      	bne.n	8002670 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e03a      	b.n	8002670 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a25      	ldr	r2, [pc, #148]	@ (8002694 <HAL_ADC_Start_IT+0x1a8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d10e      	bne.n	8002622 <HAL_ADC_Start_IT+0x136>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002620:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_ADC_Start_IT+0x1a4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d120      	bne.n	8002670 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <HAL_ADC_Start_IT+0x1ac>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d11b      	bne.n	8002670 <HAL_ADC_Start_IT+0x184>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d114      	bne.n	8002670 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	e00b      	b.n	8002670 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000
 8002684:	431bde83 	.word	0x431bde83
 8002688:	fffff8fe 	.word	0xfffff8fe
 800268c:	04000020 	.word	0x04000020
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000
 8002698:	40012200 	.word	0x40012200

0800269c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d049      	beq.n	8002766 <HAL_ADC_IRQHandler+0xca>
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d046      	beq.n	8002766 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12b      	bne.n	8002756 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d127      	bne.n	8002756 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0220 	bic.w	r2, r2, #32
 8002730:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f019 fe14 	bl	801c384 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0212 	mvn.w	r2, #18
 8002764:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002774:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d057      	beq.n	800282c <HAL_ADC_IRQHandler+0x190>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d054      	beq.n	800282c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d139      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d12b      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d124      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d119      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fac3 	bl	8002da8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 020c 	mvn.w	r2, #12
 800282a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d017      	beq.n	8002872 <HAL_ADC_IRQHandler+0x1d6>
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d014      	beq.n	8002872 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10d      	bne.n	8002872 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f837 	bl	80028d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0201 	mvn.w	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002880:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x218>
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f043 0202 	orr.w	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0220 	mvn.w	r2, #32
 80028a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f820 	bl	80028ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0220 	mvn.w	r2, #32
 80028b2:	601a      	str	r2, [r3, #0]
  }
}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e13a      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x292>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d93a      	bls.n	80029a2 <HAL_ADC_ConfigChannel+0xa2>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002934:	d035      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	3b1e      	subs	r3, #30
 800294c:	2207      	movs	r2, #7
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	400a      	ands	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8f      	ldr	r2, [pc, #572]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10a      	bne.n	800297c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68d9      	ldr	r1, [r3, #12]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	061a      	lsls	r2, r3, #24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	e039      	b.n	80029f0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68d9      	ldr	r1, [r3, #12]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	4603      	mov	r3, r0
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4403      	add	r3, r0
 8002994:	3b1e      	subs	r3, #30
 8002996:	409a      	lsls	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a0:	e026      	b.n	80029f0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2207      	movs	r2, #7
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43da      	mvns	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	400a      	ands	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	4603      	mov	r3, r0
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4403      	add	r3, r0
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	409a      	lsls	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d824      	bhi.n	8002a42 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b05      	subs	r3, #5
 8002a0a:	221f      	movs	r2, #31
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b05      	subs	r3, #5
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a40:	e04c      	b.n	8002adc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d824      	bhi.n	8002a94 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b23      	subs	r3, #35	@ 0x23
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b23      	subs	r3, #35	@ 0x23
 8002a86:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a92:	e023      	b.n	8002adc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b41      	subs	r3, #65	@ 0x41
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b41      	subs	r3, #65	@ 0x41
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10a      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1fc>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002af0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002af6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002afa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a28      	ldr	r2, [pc, #160]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10f      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x226>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d10b      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b18:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b24:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d12b      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x288>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d003      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x242>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b11      	cmp	r3, #17
 8002b40:	d122      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b42:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b48:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002b4c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_ADC_ConfigChannel+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x2b0>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9a      	lsrs	r2, r3, #18
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b7a:	e002      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	10000012 	.word	0x10000012
 8002ba4:	40012000 	.word	0x40012000
 8002ba8:	40012300 	.word	0x40012300
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bbc:	4b78      	ldr	r3, [pc, #480]	@ (8002da0 <ADC_Init+0x1ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a77      	ldr	r2, [pc, #476]	@ (8002da0 <ADC_Init+0x1ec>)
 8002bc2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002bc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bc8:	4b75      	ldr	r3, [pc, #468]	@ (8002da0 <ADC_Init+0x1ec>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4973      	ldr	r1, [pc, #460]	@ (8002da0 <ADC_Init+0x1ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	4a58      	ldr	r2, [pc, #352]	@ (8002da4 <ADC_Init+0x1f0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	e00f      	b.n	8002cae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0202 	bic.w	r2, r2, #2
 8002cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	3b01      	subs	r3, #1
 8002d08:	035a      	lsls	r2, r3, #13
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e007      	b.n	8002d24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	051a      	lsls	r2, r3, #20
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d66:	025a      	lsls	r2, r3, #9
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	029a      	lsls	r2, r3, #10
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40012300 	.word	0x40012300
 8002da4:	0f000001 	.word	0x0f000001

08002da8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <__NVIC_SetPriorityGrouping+0x40>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dea:	4a04      	ldr	r2, [pc, #16]	@ (8002dfc <__NVIC_SetPriorityGrouping+0x40>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	60d3      	str	r3, [r2, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00
 8002e00:	05fa0000 	.word	0x05fa0000

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db0b      	blt.n	8002e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4907      	ldr	r1, [pc, #28]	@ (8002e58 <__NVIC_EnableIRQ+0x38>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2001      	movs	r0, #1
 8002e42:	fa00 f202 	lsl.w	r2, r0, r2
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db12      	blt.n	8002e94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	490a      	ldr	r1, [pc, #40]	@ (8002ea0 <__NVIC_DisableIRQ+0x44>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e82:	3320      	adds	r3, #32
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e88:	f3bf 8f4f 	dsb	sy
}
 8002e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e8e:	f3bf 8f6f 	isb	sy
}
 8002e92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	@ (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	@ 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff28 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f86:	f7ff ff3d 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f7ff ffb1 	bl	8002ef8 <NVIC_EncodePriority>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff80 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff30 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff40 	bl	8002e5c <__NVIC_DisableIRQ>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e054      	b.n	80030a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7f5b      	ldrb	r3, [r3, #29]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe f9da 	bl	80013c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	791b      	ldrb	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_CRC_Init+0xc4>)
 8003020:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0218 	bic.w	r2, r2, #24
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e00c      	b.n	800304e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	461a      	mov	r2, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f94c 	bl	80032dc <HAL_CRCEx_Polynomial_Set>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e028      	b.n	80030a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	795b      	ldrb	r3, [r3, #5]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	e004      	b.n	800306c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6912      	ldr	r2, [r2, #16]
 800306a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	04c11db7 	.word	0x04c11db7

080030ac <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d006      	beq.n	80030e8 <HAL_CRC_Calculate+0x3c>
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d829      	bhi.n	8003132 <HAL_CRC_Calculate+0x86>
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d019      	beq.n	8003116 <HAL_CRC_Calculate+0x6a>
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d01e      	beq.n	8003124 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80030e6:	e024      	b.n	8003132 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00a      	b.n	8003104 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	441a      	add	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3301      	adds	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3f0      	bcc.n	80030ee <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
      break;
 8003114:	e00e      	b.n	8003134 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f812 	bl	8003144 <CRC_Handle_8>
 8003120:	6138      	str	r0, [r7, #16]
      break;
 8003122:	e007      	b.n	8003134 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f89d 	bl	8003268 <CRC_Handle_16>
 800312e:	6138      	str	r0, [r7, #16]
      break;
 8003130:	e000      	b.n	8003134 <HAL_CRC_Calculate+0x88>
      break;
 8003132:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800313a:	693b      	ldr	r3, [r7, #16]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e023      	b.n	800319e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3301      	adds	r3, #1
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	440b      	add	r3, r1
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003170:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	440b      	add	r3, r1
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003180:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3303      	adds	r3, #3
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	440b      	add	r3, r1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003194:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003196:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3d6      	bcc.n	8003156 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d051      	beq.n	8003256 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4413      	add	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	7013      	strb	r3, [r2, #0]
 80031cc:	e043      	b.n	8003256 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d118      	bne.n	800320a <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3301      	adds	r3, #1
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	440b      	add	r3, r1
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	8b7a      	ldrh	r2, [r7, #26]
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e025      	b.n	8003256 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d120      	bne.n	8003256 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b21b      	sxth	r3, r3
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b21a      	sxth	r2, r3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	3301      	adds	r3, #1
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	440b      	add	r3, r1
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b21b      	sxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b21b      	sxth	r3, r3
 8003236:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	8b7a      	ldrh	r2, [r7, #26]
 8003242:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3724      	adds	r7, #36	@ 0x24
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e013      	b.n	80032a2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	440b      	add	r3, r1
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3e6      	bcc.n	800327a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4413      	add	r3, r2
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032ec:	231f      	movs	r3, #31
 80032ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
 80032fe:	e063      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003300:	bf00      	nop
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	613a      	str	r2, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_CRCEx_Polynomial_Set+0x44>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b18      	cmp	r3, #24
 8003324:	d846      	bhi.n	80033b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	080033bb 	.word	0x080033bb
 8003330:	080033b5 	.word	0x080033b5
 8003334:	080033b5 	.word	0x080033b5
 8003338:	080033b5 	.word	0x080033b5
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033a9 	.word	0x080033a9
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033b5 	.word	0x080033b5
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033b5 	.word	0x080033b5
 8003388:	080033b5 	.word	0x080033b5
 800338c:	08003391 	.word	0x08003391
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d913      	bls.n	80033be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800339a:	e010      	b.n	80033be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d90f      	bls.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033a6:	e00c      	b.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d90b      	bls.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033b2:	e008      	b.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
        break;
 80033b8:	e006      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 0118 	bic.w	r1, r3, #24
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e014      	b.n	8003434 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fff0 	bl	8001400 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e046      	b.n	80034de <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	795b      	ldrb	r3, [r3, #5]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_DAC_Start+0x20>
 8003458:	2302      	movs	r3, #2
 800345a:	e040      	b.n	80034de <HAL_DAC_Start+0xa2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003490:	2b3c      	cmp	r3, #60	@ 0x3c
 8003492:	d11d      	bne.n	80034d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	e014      	b.n	80034d0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	213c      	movs	r1, #60	@ 0x3c
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0202 	orr.w	r2, r2, #2
 80034ce:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003500:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01d      	beq.n	8003548 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d018      	beq.n	8003548 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003540:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f851 	bl	80035ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01d      	beq.n	800358e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d018      	beq.n	800358e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f043 0202 	orr.w	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003576:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003586:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f891 	bl	80036b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e015      	b.n	80035de <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	3308      	adds	r3, #8
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e004      	b.n	80035d4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	3314      	adds	r3, #20
 80035d2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	461a      	mov	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035fe:	b480      	push	{r7}
 8003600:	b089      	sub	sp, #36	@ 0x24
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_DAC_ConfigChannel+0x1c>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e042      	b.n	80036a4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	795b      	ldrb	r3, [r3, #5]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_DAC_ConfigChannel+0x2c>
 8003626:	2302      	movs	r3, #2
 8003628:	e03c      	b.n	80036a4 <HAL_DAC_ConfigChannel+0xa6>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2202      	movs	r2, #2
 8003634:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	22c0      	movs	r2, #192	@ 0xc0
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43da      	mvns	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3724      	adds	r7, #36	@ 0x24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7fe fe64 	bl	800239c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e099      	b.n	8003814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003700:	e00f      	b.n	8003722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003702:	f7fe fe4b 	bl	800239c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b05      	cmp	r3, #5
 800370e:	d908      	bls.n	8003722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e078      	b.n	8003814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e8      	bne.n	8003702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4b38      	ldr	r3, [pc, #224]	@ (800381c <HAL_DMA_Init+0x158>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	4313      	orrs	r3, r2
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d117      	bne.n	80037e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fb81 	bl	8003ed0 <DMA_CheckFifoParam>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2240      	movs	r2, #64	@ 0x40
 80037d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037e2:	2301      	movs	r3, #1
 80037e4:	e016      	b.n	8003814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb38 	bl	8003e64 <DMA_CalcBaseAndBitshift>
 80037f4:	4603      	mov	r3, r0
 80037f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	223f      	movs	r2, #63	@ 0x3f
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	f010803f 	.word	0xf010803f

08003820 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e050      	b.n	80038d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d101      	bne.n	8003842 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	e048      	b.n	80038d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2221      	movs	r2, #33	@ 0x21
 8003880:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 faee 	bl	8003e64 <DMA_CalcBaseAndBitshift>
 8003888:	4603      	mov	r3, r0
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	223f      	movs	r2, #63	@ 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_Start_IT+0x26>
 80038fe:	2302      	movs	r3, #2
 8003900:	e048      	b.n	8003994 <HAL_DMA_Start_IT+0xb8>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d137      	bne.n	8003986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa6c 	bl	8003e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003934:	223f      	movs	r2, #63	@ 0x3f
 8003936:	409a      	lsls	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0216 	orr.w	r2, r2, #22
 800394a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800395a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e005      	b.n	8003992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039aa:	f7fe fcf7 	bl	800239c <HAL_GetTick>
 80039ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d008      	beq.n	80039ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e052      	b.n	8003a74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0216 	bic.w	r2, r2, #22
 80039dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_DMA_Abort+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0208 	bic.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1e:	e013      	b.n	8003a48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a20:	f7fe fcbc 	bl	800239c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d90c      	bls.n	8003a48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2203      	movs	r2, #3
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e015      	b.n	8003a74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e4      	bne.n	8003a20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	223f      	movs	r2, #63	@ 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00c      	b.n	8003ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003acc:	4b8e      	ldr	r3, [pc, #568]	@ (8003d08 <HAL_DMA_IRQHandler+0x248>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8003d0c <HAL_DMA_IRQHandler+0x24c>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aea:	2208      	movs	r2, #8
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01a      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	2208      	movs	r2, #8
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	f043 0202 	orr.w	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	2204      	movs	r2, #4
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	2204      	movs	r2, #4
 8003b86:	409a      	lsls	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d043      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03c      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	2210      	movs	r2, #16
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d024      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
 8003bee:	e01f      	b.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e016      	b.n	8003c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0208 	bic.w	r2, r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	2220      	movs	r2, #32
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 808f 	beq.w	8003d60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8087 	beq.w	8003d60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	2220      	movs	r2, #32
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d136      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0216 	bic.w	r2, r2, #22
 8003c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x1da>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0208 	bic.w	r2, r2, #8
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	223f      	movs	r2, #63	@ 0x3f
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d07e      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
        }
        return;
 8003cd6:	e079      	b.n	8003dcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01d      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d031      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e02c      	b.n	8003d60 <HAL_DMA_IRQHandler+0x2a0>
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e01e      	b.n	8003d60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10f      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0210 	bic.w	r2, r2, #16
 8003d3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d032      	beq.n	8003dce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2205      	movs	r2, #5
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d307      	bcc.n	8003da8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f2      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x2cc>
 8003da6:	e000      	b.n	8003daa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003da8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
 8003dca:	e000      	b.n	8003dce <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dcc:	bf00      	nop
    }
  }
}
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de2:	b2db      	uxtb	r3, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b40      	cmp	r3, #64	@ 0x40
 8003e34:	d108      	bne.n	8003e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e46:	e007      	b.n	8003e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3b10      	subs	r3, #16
 8003e74:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <DMA_CalcBaseAndBitshift+0x60>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d908      	bls.n	8003ea4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <DMA_CalcBaseAndBitshift+0x68>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ea2:	e006      	b.n	8003eb2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <DMA_CalcBaseAndBitshift+0x68>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	aaaaaaab 	.word	0xaaaaaaab
 8003ec8:	08021980 	.word	0x08021980
 8003ecc:	fffffc00 	.word	0xfffffc00

08003ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11f      	bne.n	8003f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d856      	bhi.n	8003f9e <DMA_CheckFifoParam+0xce>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <DMA_CheckFifoParam+0x28>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f1b 	.word	0x08003f1b
 8003f00:	08003f09 	.word	0x08003f09
 8003f04:	08003f9f 	.word	0x08003f9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d046      	beq.n	8003fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e043      	b.n	8003fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f22:	d140      	bne.n	8003fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e03d      	b.n	8003fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f32:	d121      	bne.n	8003f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d837      	bhi.n	8003faa <DMA_CheckFifoParam+0xda>
 8003f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <DMA_CheckFifoParam+0x70>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f57 	.word	0x08003f57
 8003f48:	08003f51 	.word	0x08003f51
 8003f4c:	08003f69 	.word	0x08003f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e030      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d025      	beq.n	8003fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f66:	e022      	b.n	8003fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f70:	d11f      	bne.n	8003fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f76:	e01c      	b.n	8003fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d903      	bls.n	8003f86 <DMA_CheckFifoParam+0xb6>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f84:	e018      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e015      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e00b      	b.n	8003fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e00a      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e008      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e006      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop

08003fc8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e086      	b.n	80040e8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f009 f9db 	bl	800d3a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80040f0 <HAL_ETH_Init+0x128>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80040f0 <HAL_ETH_Init+0x128>)
 8003ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80040f0 <HAL_ETH_Init+0x128>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800400a:	4b3a      	ldr	r3, [pc, #232]	@ (80040f4 <HAL_ETH_Init+0x12c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <HAL_ETH_Init+0x12c>)
 8004010:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004014:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004016:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <HAL_ETH_Init+0x12c>)
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	4935      	ldr	r1, [pc, #212]	@ (80040f4 <HAL_ETH_Init+0x12c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004024:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <HAL_ETH_Init+0x12c>)
 8004026:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800403e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004040:	f7fe f9ac 	bl	800239c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004046:	e011      	b.n	800406c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004048:	f7fe f9a8 	bl	800239c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004056:	d909      	bls.n	800406c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	22e0      	movs	r2, #224	@ 0xe0
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e03d      	b.n	80040e8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e4      	bne.n	8004048 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 ff5c 	bl	8004f3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f001 f807 	bl	8005098 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 f85d 	bl	800514a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	461a      	mov	r2, r3
 8004096:	2100      	movs	r1, #0
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 ffc5 	bl	8005028 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80040ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_ETH_Init+0x130>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80040d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2210      	movs	r2, #16
 80040e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40013800 	.word	0x40013800
 80040f8:	00020060 	.word	0x00020060

080040fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410a:	2b10      	cmp	r3, #16
 800410c:	d15f      	bne.n	80041ce <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2204      	movs	r2, #4
 8004120:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f9f6 	bl	8004514 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004130:	2001      	movs	r0, #1
 8004132:	f7fe f93f 	bl	80023b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004150:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004154:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800416c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fd80 	bl	8004c74 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800418c:	2001      	movs	r0, #1
 800418e:	f7fe f911 	bl	80023b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0204 	orr.w	r2, r2, #4
 80041a8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041b2:	69d9      	ldr	r1, [r3, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <HAL_ETH_Start_IT+0xdc>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041c0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2240      	movs	r2, #64	@ 0x40
 80041c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	0001a0c1 	.word	0x0001a0c1

080041dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d16e      	bne.n	80042cc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fe:	69d9      	ldr	r1, [r3, #28]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b34      	ldr	r3, [pc, #208]	@ (80042d8 <HAL_ETH_Stop_IT+0xfc>)
 8004206:	400b      	ands	r3, r1
 8004208:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800420c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004220:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004224:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f023 0302 	bic.w	r3, r3, #2
 8004238:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800423c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004256:	2001      	movs	r0, #1
 8004258:	f7fe f8ac 	bl	80023b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fd05 	bl	8004c74 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0208 	bic.w	r2, r2, #8
 8004278:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004282:	2001      	movs	r0, #1
 8004284:	f7fe f896 	bl	80023b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e00e      	b.n	80042b4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	3212      	adds	r2, #18
 800429c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d9ed      	bls.n	8004296 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2210      	movs	r2, #16
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	fffe5f3e 	.word	0xfffe5f3e

080042dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e045      	b.n	800438c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d13f      	bne.n	800438a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004312:	2201      	movs	r2, #1
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 ff86 	bl	8005228 <ETH_Prepare_Tx_Descriptors>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f043 0202 	orr.w	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e02a      	b.n	800438c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004336:	f3bf 8f4f 	dsb	sy
}
 800433a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	629a      	str	r2, [r3, #40]	@ 0x28
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b03      	cmp	r3, #3
 800434c:	d904      	bls.n	8004358 <HAL_ETH_Transmit_IT+0x7c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	1f1a      	subs	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004372:	461a      	mov	r2, r3
 8004374:	2304      	movs	r3, #4
 8004376:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004380:	461a      	mov	r2, r3
 8004382:	2300      	movs	r3, #0
 8004384:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0a4      	b.n	800450a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d001      	beq.n	80043ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e09d      	b.n	800450a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	3212      	adds	r2, #18
 80043da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e4:	f1c3 0304 	rsb	r3, r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043ea:	e066      	b.n	80044ba <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_ETH_ReadData+0x88>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d03c      	beq.n	8004496 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800443e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004454:	2301      	movs	r3, #1
 8004456:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004470:	461a      	mov	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f009 f96b 	bl	800d750 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2200      	movs	r2, #0
 8004494:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3301      	adds	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d902      	bls.n	80044a8 <HAL_ETH_ReadData+0x114>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	3212      	adds	r2, #18
 80044ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db06      	blt.n	80044d0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d202      	bcs.n	80044d0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d08d      	beq.n	80043ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	441a      	add	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f815 	bl	8004514 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d108      	bne.n	8004508 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004520:	2301      	movs	r3, #1
 8004522:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004528:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	3212      	adds	r2, #18
 8004530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004534:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800453c:	e042      	b.n	80045c4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d112      	bne.n	800456c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f009 f8d0 	bl	800d6f0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	74fb      	strb	r3, [r7, #19]
 800455a:	e007      	b.n	800456c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	461a      	mov	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	461a      	mov	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d028      	beq.n	80045c4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	4b26      	ldr	r3, [pc, #152]	@ (8004618 <ETH_UpdateDescriptor+0x104>)
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	e005      	b.n	8004594 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d902      	bls.n	80045b2 <ETH_UpdateDescriptor+0x9e>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3b04      	subs	r3, #4
 80045b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	3212      	adds	r2, #18
 80045b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <ETH_UpdateDescriptor+0xbc>
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1b6      	bne.n	800453e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d01a      	beq.n	8004610 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3303      	adds	r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80045e4:	f3bf 8f5f 	dmb	sy
}
 80045e8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6919      	ldr	r1, [r3, #16]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	18ca      	adds	r2, r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004602:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	80004000 	.word	0x80004000

0800461c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3318      	adds	r3, #24
 8004628:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800463a:	e047      	b.n	80046cc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3b01      	subs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3304      	adds	r3, #4
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b03      	cmp	r3, #3
 8004660:	d902      	bls.n	8004668 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3b04      	subs	r3, #4
 8004666:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02c      	beq.n	80046cc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68d9      	ldr	r1, [r3, #12]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	db1f      	blt.n	80046c8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3304      	adds	r3, #4
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	f009 f89d 	bl	800d7d4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3304      	adds	r3, #4
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	2200      	movs	r2, #0
 80046a6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3301      	adds	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d902      	bls.n	80046ba <HAL_ETH_ReleaseTxPacket+0x9e>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3b04      	subs	r3, #4
 80046b8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046c6:	e001      	b.n	80046cc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1b1      	bne.n	800463c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800470c:	4b4b      	ldr	r3, [pc, #300]	@ (800483c <HAL_ETH_IRQHandler+0x158>)
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <HAL_ETH_IRQHandler+0x56>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800472e:	461a      	mov	r2, r3
 8004730:	4b43      	ldr	r3, [pc, #268]	@ (8004840 <HAL_ETH_IRQHandler+0x15c>)
 8004732:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f008 fb77 	bl	800ce28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00f      	beq.n	8004764 <HAL_ETH_IRQHandler+0x80>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004756:	461a      	mov	r2, r3
 8004758:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800475c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f008 fb72 	bl	800ce48 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d042      	beq.n	80047f4 <HAL_ETH_IRQHandler+0x110>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03d      	beq.n	80047f4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	f043 0208 	orr.w	r2, r3, #8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	4b29      	ldr	r3, [pc, #164]	@ (8004844 <HAL_ETH_IRQHandler+0x160>)
 800479e:	4013      	ands	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80047b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047bc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	22e0      	movs	r2, #224	@ 0xe0
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80047c6:	e012      	b.n	80047ee <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80047d6:	4013      	ands	r3, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e6:	461a      	mov	r2, r3
 80047e8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80047ec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f008 fb3a 	bl	800ce68 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f81a 	bl	8004848 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004826:	4b05      	ldr	r3, [pc, #20]	@ (800483c <HAL_ETH_IRQHandler+0x158>)
 8004828:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800482c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f814 	bl	800485c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40013c00 	.word	0x40013c00
 8004840:	00010040 	.word	0x00010040
 8004844:	007e2000 	.word	0x007e2000

08004848 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 031c 	and.w	r3, r3, #28
 800488c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	02db      	lsls	r3, r3, #11
 8004892:	b29b      	uxth	r3, r3
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	019b      	lsls	r3, r3, #6
 800489e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0302 	bic.w	r3, r3, #2
 80048ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80048c0:	f7fd fd6c 	bl	800239c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048c6:	e00d      	b.n	80048e4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80048c8:	f7fd fd68 	bl	800239c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d6:	d301      	bcc.n	80048dc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e010      	b.n	80048fe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ec      	bne.n	80048c8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 031c 	and.w	r3, r3, #28
 8004922:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	02db      	lsls	r3, r3, #11
 8004928:	b29b      	uxth	r3, r3
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004960:	f7fd fd1c 	bl	800239c <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004966:	e00d      	b.n	8004984 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004968:	f7fd fd18 	bl	800239c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004976:	d301      	bcc.n	800497c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e009      	b.n	8004990 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ec      	bne.n	8004968 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0e6      	b.n	8004b7a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf0c      	ite	eq
 8004b16:	2301      	moveq	r3, #1
 8004b18:	2300      	movne	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e00b      	b.n	8004bb2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d105      	bne.n	8004bb0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f88a 	bl	8004cc0 <ETH_SetMACConfig>

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 031c 	bic.w	r3, r3, #28
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004bd4:	f003 fd6e 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 8004bd8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	@ (8004c30 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d804      	bhi.n	8004bec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 0308 	orr.w	r3, r3, #8
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e019      	b.n	8004c20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d204      	bcs.n	8004bfe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 030c 	orr.w	r3, r3, #12
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e010      	b.n	8004c20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a0d      	ldr	r2, [pc, #52]	@ (8004c38 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d90c      	bls.n	8004c20 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a0c      	ldr	r2, [pc, #48]	@ (8004c3c <HAL_ETH_SetMDIOClockRange+0x80>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d804      	bhi.n	8004c18 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e003      	b.n	8004c20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f043 0310 	orr.w	r3, r3, #16
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	611a      	str	r2, [r3, #16]
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	02160ebf 	.word	0x02160ebf
 8004c34:	03938700 	.word	0x03938700
 8004c38:	05f5e0ff 	.word	0x05f5e0ff
 8004c3c:	08f0d17f 	.word	0x08f0d17f

08004c40 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c96:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fd fb85 	bl	80023b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cb4:	6193      	str	r3, [r2, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <ETH_SetMACConfig+0x164>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	7b9b      	ldrb	r3, [r3, #14]
 8004cde:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	7c12      	ldrb	r2, [r2, #16]
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d102      	bne.n	8004cee <ETH_SetMACConfig+0x2e>
 8004ce8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cec:	e000      	b.n	8004cf0 <ETH_SetMACConfig+0x30>
 8004cee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004cf0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	7c52      	ldrb	r2, [r2, #17]
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d102      	bne.n	8004d00 <ETH_SetMACConfig+0x40>
 8004cfa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004cfe:	e000      	b.n	8004d02 <ETH_SetMACConfig+0x42>
 8004d00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004d08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	7fdb      	ldrb	r3, [r3, #31]
 8004d0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004d10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004d16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	7f92      	ldrb	r2, [r2, #30]
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d102      	bne.n	8004d26 <ETH_SetMACConfig+0x66>
 8004d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d24:	e000      	b.n	8004d28 <ETH_SetMACConfig+0x68>
 8004d26:	2200      	movs	r2, #0
                        macconf->Speed |
 8004d28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	7f1b      	ldrb	r3, [r3, #28]
 8004d2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004d30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004d36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004d3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004d46:	2a00      	cmp	r2, #0
 8004d48:	d102      	bne.n	8004d50 <ETH_SetMACConfig+0x90>
 8004d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d4e:	e000      	b.n	8004d52 <ETH_SetMACConfig+0x92>
 8004d50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004d52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	7bdb      	ldrb	r3, [r3, #15]
 8004d58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004d5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7fd fb16 	bl	80023b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d101      	bne.n	8004db6 <ETH_SetMACConfig+0xf6>
 8004db2:	2280      	movs	r2, #128	@ 0x80
 8004db4:	e000      	b.n	8004db8 <ETH_SetMACConfig+0xf8>
 8004db6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004db8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004dc6:	2a01      	cmp	r2, #1
 8004dc8:	d101      	bne.n	8004dce <ETH_SetMACConfig+0x10e>
 8004dca:	2208      	movs	r2, #8
 8004dcc:	e000      	b.n	8004dd0 <ETH_SetMACConfig+0x110>
 8004dce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004dd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004dd8:	2a01      	cmp	r2, #1
 8004dda:	d101      	bne.n	8004de0 <ETH_SetMACConfig+0x120>
 8004ddc:	2204      	movs	r2, #4
 8004dde:	e000      	b.n	8004de2 <ETH_SetMACConfig+0x122>
 8004de0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004de2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004dea:	2a01      	cmp	r2, #1
 8004dec:	d101      	bne.n	8004df2 <ETH_SetMACConfig+0x132>
 8004dee:	2202      	movs	r2, #2
 8004df0:	e000      	b.n	8004df4 <ETH_SetMACConfig+0x134>
 8004df2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004df4:	4313      	orrs	r3, r2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f7fd fad1 	bl	80023b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	619a      	str	r2, [r3, #24]
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	fd20810f 	.word	0xfd20810f

08004e28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4b3d      	ldr	r3, [pc, #244]	@ (8004f38 <ETH_SetDMAConfig+0x110>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	7b1b      	ldrb	r3, [r3, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <ETH_SetDMAConfig+0x2c>
 8004e4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004e52:	e000      	b.n	8004e56 <ETH_SetDMAConfig+0x2e>
 8004e54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	7b5b      	ldrb	r3, [r3, #13]
 8004e5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	7f52      	ldrb	r2, [r2, #29]
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d102      	bne.n	8004e6c <ETH_SetDMAConfig+0x44>
 8004e66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e6a:	e000      	b.n	8004e6e <ETH_SetDMAConfig+0x46>
 8004e6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	7b9b      	ldrb	r3, [r3, #14]
 8004e74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004e76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004e7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	7f1b      	ldrb	r3, [r3, #28]
 8004e82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004e84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	7f9b      	ldrb	r3, [r3, #30]
 8004e8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004e8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004e92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7fd fa78 	bl	80023b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004edc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004ee2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ee8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ef0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004ef2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004efa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004f00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7fd fa49 	bl	80023b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	f8de3f23 	.word	0xf8de3f23

08004f3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0a6      	sub	sp, #152	@ 0x98
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004fa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004faa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004fb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fe7f 	bl	8004cc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ff6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ff8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ffc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005002:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800500a:	2300      	movs	r3, #0
 800500c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ff05 	bl	8004e28 <ETH_SetDMAConfig>
}
 800501e:	bf00      	nop
 8005020:	3798      	adds	r7, #152	@ 0x98
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3305      	adds	r3, #5
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	3204      	adds	r2, #4
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <ETH_MACAddressConfig+0x68>)
 800504a:	4413      	add	r3, r2
 800504c:	461a      	mov	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3303      	adds	r3, #3
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3302      	adds	r3, #2
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3301      	adds	r3, #1
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	4313      	orrs	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <ETH_MACAddressConfig+0x6c>)
 800507a:	4413      	add	r3, r2
 800507c:	461a      	mov	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6013      	str	r3, [r2, #0]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40028040 	.word	0x40028040
 8005094:	40028044 	.word	0x40028044

08005098 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e03e      	b.n	8005124 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68d9      	ldr	r1, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	440b      	add	r3, r1
 80050b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	3206      	adds	r2, #6
 80050d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d80c      	bhi.n	8005108 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68d9      	ldr	r1, [r3, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e004      	b.n	8005112 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	461a      	mov	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d9bd      	bls.n	80050a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513c:	611a      	str	r2, [r3, #16]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e048      	b.n	80051ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6919      	ldr	r1, [r3, #16]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005194:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	3212      	adds	r2, #18
 80051b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d80c      	bhi.n	80051da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6919      	ldr	r1, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	461a      	mov	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e004      	b.n	80051e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d9b3      	bls.n	8005158 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521a:	60da      	str	r2, [r3, #12]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005228:	b480      	push	{r7}
 800522a:	b091      	sub	sp, #68	@ 0x44
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3318      	adds	r3, #24
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800526a:	d007      	beq.n	800527c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800526c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005270:	3304      	adds	r3, #4
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	e111      	b.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	3301      	adds	r3, #1
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b86      	ldr	r3, [pc, #536]	@ (80054b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005296:	4013      	ands	r3, r2
 8005298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529a:	6852      	ldr	r2, [r2, #4]
 800529c:	431a      	orrs	r2, r3
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	431a      	orrs	r2, r3
 80052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052dc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005302:	e082      	b.n	800540a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e005      	b.n	8005330 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005332:	3301      	adds	r3, #1
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	2b03      	cmp	r3, #3
 800533a:	d902      	bls.n	8005342 <ETH_Prepare_Tx_Descriptors+0x11a>
 800533c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533e:	3b04      	subs	r3, #4
 8005340:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005358:	d007      	beq.n	800536a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800535a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535e:	3304      	adds	r3, #4
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d029      	beq.n	80053be <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800537c:	e019      	b.n	80053b2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800537e:	f3bf 8f5f 	dmb	sy
}
 8005382:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005392:	3301      	adds	r3, #1
 8005394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005398:	2b03      	cmp	r3, #3
 800539a:	d902      	bls.n	80053a2 <ETH_Prepare_Tx_Descriptors+0x17a>
 800539c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539e:	3b04      	subs	r3, #4
 80053a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	3301      	adds	r3, #1
 80053b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3e1      	bcc.n	800537e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80053ba:	2302      	movs	r3, #2
 80053bc:	e072      	b.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053cc:	3301      	adds	r3, #1
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	4b32      	ldr	r3, [pc, #200]	@ (80054b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	6852      	ldr	r2, [r2, #4]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	3301      	adds	r3, #1
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80053f8:	f3bf 8f5f 	dmb	sy
}
 80053fc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f47f af78 	bne.w	8005304 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d006      	beq.n	8005428 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e005      	b.n	8005434 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800544a:	f3bf 8f5f 	dmb	sy
}
 800544e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	3304      	adds	r3, #4
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005470:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005472:	f3ef 8310 	mrs	r3, PRIMASK
 8005476:	613b      	str	r3, [r7, #16]
  return(result);
 8005478:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	4413      	add	r3, r2
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	629a      	str	r2, [r3, #40]	@ 0x28
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3744      	adds	r7, #68	@ 0x44
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	ffffe000 	.word	0xffffe000

080054b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e175      	b.n	80057c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 8164 	bne.w	80057ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <HAL_GPIO_Init+0x56>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d130      	bne.n	800556c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005540:	2201      	movs	r2, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0201 	and.w	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d017      	beq.n	80055a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	2203      	movs	r2, #3
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d123      	bne.n	80055fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0203 	and.w	r2, r3, #3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80be 	beq.w	80057ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563e:	4b66      	ldr	r3, [pc, #408]	@ (80057d8 <HAL_GPIO_Init+0x324>)
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	4a65      	ldr	r2, [pc, #404]	@ (80057d8 <HAL_GPIO_Init+0x324>)
 8005644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005648:	6453      	str	r3, [r2, #68]	@ 0x44
 800564a:	4b63      	ldr	r3, [pc, #396]	@ (80057d8 <HAL_GPIO_Init+0x324>)
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005656:	4a61      	ldr	r2, [pc, #388]	@ (80057dc <HAL_GPIO_Init+0x328>)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	3302      	adds	r3, #2
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	220f      	movs	r2, #15
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a58      	ldr	r2, [pc, #352]	@ (80057e0 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d037      	beq.n	80056f2 <HAL_GPIO_Init+0x23e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a57      	ldr	r2, [pc, #348]	@ (80057e4 <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_GPIO_Init+0x23a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a56      	ldr	r2, [pc, #344]	@ (80057e8 <HAL_GPIO_Init+0x334>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <HAL_GPIO_Init+0x236>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a55      	ldr	r2, [pc, #340]	@ (80057ec <HAL_GPIO_Init+0x338>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d025      	beq.n	80056e6 <HAL_GPIO_Init+0x232>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a54      	ldr	r2, [pc, #336]	@ (80057f0 <HAL_GPIO_Init+0x33c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01f      	beq.n	80056e2 <HAL_GPIO_Init+0x22e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a53      	ldr	r2, [pc, #332]	@ (80057f4 <HAL_GPIO_Init+0x340>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d019      	beq.n	80056de <HAL_GPIO_Init+0x22a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a52      	ldr	r2, [pc, #328]	@ (80057f8 <HAL_GPIO_Init+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_GPIO_Init+0x226>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a51      	ldr	r2, [pc, #324]	@ (80057fc <HAL_GPIO_Init+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00d      	beq.n	80056d6 <HAL_GPIO_Init+0x222>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a50      	ldr	r2, [pc, #320]	@ (8005800 <HAL_GPIO_Init+0x34c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <HAL_GPIO_Init+0x21e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005804 <HAL_GPIO_Init+0x350>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d101      	bne.n	80056ce <HAL_GPIO_Init+0x21a>
 80056ca:	2309      	movs	r3, #9
 80056cc:	e012      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ce:	230a      	movs	r3, #10
 80056d0:	e010      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d2:	2308      	movs	r3, #8
 80056d4:	e00e      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d6:	2307      	movs	r3, #7
 80056d8:	e00c      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056da:	2306      	movs	r3, #6
 80056dc:	e00a      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056de:	2305      	movs	r3, #5
 80056e0:	e008      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e2:	2304      	movs	r3, #4
 80056e4:	e006      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e6:	2303      	movs	r3, #3
 80056e8:	e004      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e002      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056f2:	2300      	movs	r3, #0
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	f002 0203 	and.w	r2, r2, #3
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	4093      	lsls	r3, r2
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005704:	4935      	ldr	r1, [pc, #212]	@ (80057dc <HAL_GPIO_Init+0x328>)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	3302      	adds	r3, #2
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005712:	4b3d      	ldr	r3, [pc, #244]	@ (8005808 <HAL_GPIO_Init+0x354>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005736:	4a34      	ldr	r2, [pc, #208]	@ (8005808 <HAL_GPIO_Init+0x354>)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800573c:	4b32      	ldr	r3, [pc, #200]	@ (8005808 <HAL_GPIO_Init+0x354>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005760:	4a29      	ldr	r2, [pc, #164]	@ (8005808 <HAL_GPIO_Init+0x354>)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005766:	4b28      	ldr	r3, [pc, #160]	@ (8005808 <HAL_GPIO_Init+0x354>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800578a:	4a1f      	ldr	r2, [pc, #124]	@ (8005808 <HAL_GPIO_Init+0x354>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <HAL_GPIO_Init+0x354>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057b4:	4a14      	ldr	r2, [pc, #80]	@ (8005808 <HAL_GPIO_Init+0x354>)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	f67f ae86 	bls.w	80054d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3724      	adds	r7, #36	@ 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40020000 	.word	0x40020000
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40020800 	.word	0x40020800
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40021400 	.word	0x40021400
 80057f8:	40021800 	.word	0x40021800
 80057fc:	40021c00 	.word	0x40021c00
 8005800:	40022000 	.word	0x40022000
 8005804:	40022400 	.word	0x40022400
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e0d9      	b.n	80059dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005828:	2201      	movs	r2, #1
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	f040 80c9 	bne.w	80059d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005844:	4a6b      	ldr	r2, [pc, #428]	@ (80059f4 <HAL_GPIO_DeInit+0x1e8>)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a63      	ldr	r2, [pc, #396]	@ (80059f8 <HAL_GPIO_DeInit+0x1ec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d037      	beq.n	80058de <HAL_GPIO_DeInit+0xd2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a62      	ldr	r2, [pc, #392]	@ (80059fc <HAL_GPIO_DeInit+0x1f0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_GPIO_DeInit+0xce>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a61      	ldr	r2, [pc, #388]	@ (8005a00 <HAL_GPIO_DeInit+0x1f4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d02b      	beq.n	80058d6 <HAL_GPIO_DeInit+0xca>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a60      	ldr	r2, [pc, #384]	@ (8005a04 <HAL_GPIO_DeInit+0x1f8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d025      	beq.n	80058d2 <HAL_GPIO_DeInit+0xc6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a5f      	ldr	r2, [pc, #380]	@ (8005a08 <HAL_GPIO_DeInit+0x1fc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01f      	beq.n	80058ce <HAL_GPIO_DeInit+0xc2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a5e      	ldr	r2, [pc, #376]	@ (8005a0c <HAL_GPIO_DeInit+0x200>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d019      	beq.n	80058ca <HAL_GPIO_DeInit+0xbe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a5d      	ldr	r2, [pc, #372]	@ (8005a10 <HAL_GPIO_DeInit+0x204>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_GPIO_DeInit+0xba>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a5c      	ldr	r2, [pc, #368]	@ (8005a14 <HAL_GPIO_DeInit+0x208>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00d      	beq.n	80058c2 <HAL_GPIO_DeInit+0xb6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005a18 <HAL_GPIO_DeInit+0x20c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <HAL_GPIO_DeInit+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a5a      	ldr	r2, [pc, #360]	@ (8005a1c <HAL_GPIO_DeInit+0x210>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d101      	bne.n	80058ba <HAL_GPIO_DeInit+0xae>
 80058b6:	2309      	movs	r3, #9
 80058b8:	e012      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058ba:	230a      	movs	r3, #10
 80058bc:	e010      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058be:	2308      	movs	r3, #8
 80058c0:	e00e      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058c2:	2307      	movs	r3, #7
 80058c4:	e00c      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058c6:	2306      	movs	r3, #6
 80058c8:	e00a      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058ca:	2305      	movs	r3, #5
 80058cc:	e008      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058ce:	2304      	movs	r3, #4
 80058d0:	e006      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058d2:	2303      	movs	r3, #3
 80058d4:	e004      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e002      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_GPIO_DeInit+0xd4>
 80058de:	2300      	movs	r3, #0
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	f002 0203 	and.w	r2, r2, #3
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	4093      	lsls	r3, r2
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d132      	bne.n	8005956 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80058f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	4949      	ldr	r1, [pc, #292]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80058fe:	4b48      	ldr	r3, [pc, #288]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	43db      	mvns	r3, r3
 8005906:	4946      	ldr	r1, [pc, #280]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 8005908:	4013      	ands	r3, r2
 800590a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800590c:	4b44      	ldr	r3, [pc, #272]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	43db      	mvns	r3, r3
 8005914:	4942      	ldr	r1, [pc, #264]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 8005916:	4013      	ands	r3, r2
 8005918:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800591a:	4b41      	ldr	r3, [pc, #260]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	43db      	mvns	r3, r3
 8005922:	493f      	ldr	r1, [pc, #252]	@ (8005a20 <HAL_GPIO_DeInit+0x214>)
 8005924:	4013      	ands	r3, r2
 8005926:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	220f      	movs	r2, #15
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005938:	4a2e      	ldr	r2, [pc, #184]	@ (80059f4 <HAL_GPIO_DeInit+0x1e8>)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	3302      	adds	r3, #2
 8005940:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	43da      	mvns	r2, r3
 8005948:	482a      	ldr	r0, [pc, #168]	@ (80059f4 <HAL_GPIO_DeInit+0x1e8>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	089b      	lsrs	r3, r3, #2
 800594e:	400a      	ands	r2, r1
 8005950:	3302      	adds	r3, #2
 8005952:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2103      	movs	r1, #3
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	08da      	lsrs	r2, r3, #3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3208      	adds	r2, #8
 8005974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	220f      	movs	r2, #15
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	08d2      	lsrs	r2, r2, #3
 800598c:	4019      	ands	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3208      	adds	r2, #8
 8005992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	2103      	movs	r1, #3
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	401a      	ands	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	2101      	movs	r1, #1
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	401a      	ands	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	2103      	movs	r1, #3
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	401a      	ands	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	f67f af22 	bls.w	8005828 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40013800 	.word	0x40013800
 80059f8:	40020000 	.word	0x40020000
 80059fc:	40020400 	.word	0x40020400
 8005a00:	40020800 	.word	0x40020800
 8005a04:	40020c00 	.word	0x40020c00
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40021400 	.word	0x40021400
 8005a10:	40021800 	.word	0x40021800
 8005a14:	40021c00 	.word	0x40021c00
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40022400 	.word	0x40022400
 8005a20:	40013c00 	.word	0x40013c00

08005a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
 8005a30:	4613      	mov	r3, r2
 8005a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a34:	787b      	ldrb	r3, [r7, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a40:	e003      	b.n	8005a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a42:	887b      	ldrh	r3, [r7, #2]
 8005a44:	041a      	lsls	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	619a      	str	r2, [r3, #24]
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	041a      	lsls	r2, r3, #16
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	43d9      	mvns	r1, r3
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	400b      	ands	r3, r1
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	619a      	str	r2, [r3, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e08b      	b.n	8005bb6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fb fcec 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	@ 0x24
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005adc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d107      	bne.n	8005b06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	e006      	b.n	8005b14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d108      	bne.n	8005b2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	e007      	b.n	8005b3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <HAL_I2C_Init+0x134>)
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	02008000 	.word	0x02008000

08005bc4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e021      	b.n	8005c1a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb fd7a 	bl	80016e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08a      	sub	sp, #40	@ 0x28
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
 8005c34:	4613      	mov	r3, r2
 8005c36:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	f040 80ef 	bne.w	8005e28 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c58:	d101      	bne.n	8005c5e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0e5      	b.n	8005e2a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0de      	b.n	8005e2a <HAL_I2C_Master_Transmit_DMA+0x206>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2221      	movs	r2, #33	@ 0x21
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	893a      	ldrh	r2, [r7, #8]
 8005c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a66      	ldr	r2, [pc, #408]	@ (8005e34 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a66      	ldr	r2, [pc, #408]	@ (8005e38 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005ca0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2bff      	cmp	r3, #255	@ 0xff
 8005caa:	d906      	bls.n	8005cba <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	@ 0xff
 8005cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005cb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e007      	b.n	8005cca <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005cc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cc8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cec:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d074      	beq.n	8005dfa <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d022      	beq.n	8005d5e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	4a47      	ldr	r2, [pc, #284]	@ (8005e3c <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005d1e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	4a46      	ldr	r2, [pc, #280]	@ (8005e40 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005d26:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d34:	2200      	movs	r2, #0
 8005d36:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d48:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d4e:	f7fd fdc5 	bl	80038dc <HAL_DMA_Start_IT>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d13a      	bne.n	8005dd2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005d5c:	e013      	b.n	8005d86 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e051      	b.n	8005e2a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	8979      	ldrh	r1, [r7, #10]
 8005d92:	4b2c      	ldr	r3, [pc, #176]	@ (8005e44 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f001 fcff 	bl	800779c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005db8:	2110      	movs	r1, #16
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f001 fd20 	bl	8007800 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e028      	b.n	8005e24 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de6:	f043 0210 	orr.w	r2, r3, #16
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e017      	b.n	8005e2a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	@ (8005e48 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005dfe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	8979      	ldrh	r1, [r7, #10]
 8005e06:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f001 fcc4 	bl	800779c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 fcee 	bl	8007800 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	ffff0000 	.word	0xffff0000
 8005e38:	080065e3 	.word	0x080065e3
 8005e3c:	0800760f 	.word	0x0800760f
 8005e40:	080076eb 	.word	0x080076eb
 8005e44:	80002000 	.word	0x80002000
 8005e48:	08006157 	.word	0x08006157

08005e4c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	f040 809b 	bne.w	8005f9e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e08f      	b.n	8005fa0 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_I2C_Slave_Receive_DMA+0x42>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e088      	b.n	8005fa0 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2222      	movs	r2, #34	@ 0x22
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a38      	ldr	r2, [pc, #224]	@ (8005fa8 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a38      	ldr	r2, [pc, #224]	@ (8005fac <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d020      	beq.n	8005f18 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eda:	4a35      	ldr	r2, [pc, #212]	@ (8005fb0 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005edc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005ee4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	2200      	movs	r2, #0
 8005eec:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3324      	adds	r3, #36	@ 0x24
 8005f00:	4619      	mov	r1, r3
 8005f02:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005f08:	f7fd fce8 	bl	80038dc <HAL_DMA_Start_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d12f      	bne.n	8005f76 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005f16:	e013      	b.n	8005f40 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2228      	movs	r2, #40	@ 0x28
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e02f      	b.n	8005fa0 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f4e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 fc4f 	bl	8007800 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f70:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e014      	b.n	8005fa0 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2228      	movs	r2, #40	@ 0x28
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	f043 0210 	orr.w	r2, r3, #16
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	ffff0000 	.word	0xffff0000
 8005fac:	08006a85 	.word	0x08006a85
 8005fb0:	080076a5 	.word	0x080076a5
 8005fb4:	080076eb 	.word	0x080076eb

08005fb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d010      	beq.n	8006032 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	09db      	lsrs	r3, r3, #7
 8006014:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006020:	f043 0201 	orr.w	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006030:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	0a9b      	lsrs	r3, r3, #10
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d010      	beq.n	8006060 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	09db      	lsrs	r3, r3, #7
 8006042:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800605e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	0a5b      	lsrs	r3, r3, #9
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	09db      	lsrs	r3, r3, #7
 8006070:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607c:	f043 0202 	orr.w	r2, r3, #2
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800608c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 030b 	and.w	r3, r3, #11
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 f979 	bl	8007398 <I2C_ITError>
  }
}
 80060a6:	bf00      	nop
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
 80060e2:	4613      	mov	r3, r2
 80060e4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b088      	sub	sp, #32
 800615a:	af02      	add	r7, sp, #8
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <I2C_Master_ISR_IT+0x1e>
 8006170:	2302      	movs	r3, #2
 8006172:	e12e      	b.n	80063d2 <I2C_Master_ISR_IT+0x27c>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d013      	beq.n	80061b0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2210      	movs	r2, #16
 800619a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a0:	f043 0204 	orr.w	r2, r3, #4
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fa0c 	bl	80075c6 <I2C_Flush_TXDR>
 80061ae:	e0fb      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d023      	beq.n	8006204 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01d      	beq.n	8006204 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0304 	bic.w	r3, r3, #4
 80061ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006202:	e0d1      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d12a      	bne.n	8006266 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006218:	2b00      	cmp	r3, #0
 800621a:	d024      	beq.n	8006266 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80ba 	beq.w	80063a8 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006264:	e0a0      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	09db      	lsrs	r3, r3, #7
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d06b      	beq.n	800634a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	099b      	lsrs	r3, r3, #6
 8006276:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800627a:	2b00      	cmp	r3, #0
 800627c:	d065      	beq.n	800634a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d04e      	beq.n	8006326 <I2C_Master_ISR_IT+0x1d0>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d14a      	bne.n	8006326 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2bff      	cmp	r3, #255	@ 0xff
 80062a6:	d91c      	bls.n	80062e2 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d103      	bne.n	80062c4 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80062c2:	e002      	b.n	80062ca <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	22ff      	movs	r2, #255	@ 0xff
 80062c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	8a79      	ldrh	r1, [r7, #18]
 80062d2:	2300      	movs	r3, #0
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 fa5e 	bl	800779c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062e0:	e032      	b.n	8006348 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062f4:	d00b      	beq.n	800630e <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fa:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006300:	8a79      	ldrh	r1, [r7, #18]
 8006302:	2000      	movs	r0, #0
 8006304:	9000      	str	r0, [sp, #0]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f001 fa48 	bl	800779c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800630c:	e01c      	b.n	8006348 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	b2da      	uxtb	r2, r3
 8006314:	8a79      	ldrh	r1, [r7, #18]
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f001 fa3c 	bl	800779c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006324:	e010      	b.n	8006348 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006334:	d003      	beq.n	800633e <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fd09 	bl	8006d4e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800633c:	e034      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800633e:	2140      	movs	r1, #64	@ 0x40
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f001 f829 	bl	8007398 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006346:	e02f      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
 8006348:	e02e      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	099b      	lsrs	r3, r3, #6
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d028      	beq.n	80063a8 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	099b      	lsrs	r3, r3, #6
 800635a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800635e:	2b00      	cmp	r3, #0
 8006360:	d022      	beq.n	80063a8 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d119      	bne.n	80063a0 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800637a:	d015      	beq.n	80063a8 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006384:	d108      	bne.n	8006398 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	e007      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fcd8 	bl	8006d4e <I2C_ITMasterSeqCplt>
 800639e:	e003      	b.n	80063a8 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063a0:	2140      	movs	r1, #64	@ 0x40
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fff8 	bl	8007398 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fd5e 	bl	8006e84 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <I2C_Slave_ISR_IT+0x24>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0ed      	b.n	80065da <I2C_Slave_ISR_IT+0x200>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800641e:	6939      	ldr	r1, [r7, #16]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fdf9 	bl	8007018 <I2C_ITSlaveCplt>
 8006426:	e0d3      	b.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d04d      	beq.n	80064d0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800643c:	2b00      	cmp	r3, #0
 800643e:	d047      	beq.n	80064d0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d128      	bne.n	800649c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b28      	cmp	r3, #40	@ 0x28
 8006454:	d108      	bne.n	8006468 <I2C_Slave_ISR_IT+0x8e>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800645c:	d104      	bne.n	8006468 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800645e:	6939      	ldr	r1, [r7, #16]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 ff43 	bl	80072ec <I2C_ITListenCplt>
 8006466:	e032      	b.n	80064ce <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b29      	cmp	r3, #41	@ 0x29
 8006472:	d10e      	bne.n	8006492 <I2C_Slave_ISR_IT+0xb8>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800647a:	d00a      	beq.n	8006492 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2210      	movs	r2, #16
 8006482:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f001 f89e 	bl	80075c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fc9c 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
 8006490:	e01d      	b.n	80064ce <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2210      	movs	r2, #16
 8006498:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800649a:	e096      	b.n	80065ca <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2210      	movs	r2, #16
 80064a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a8:	f043 0204 	orr.w	r2, r3, #4
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <I2C_Slave_ISR_IT+0xe6>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064bc:	f040 8085 	bne.w	80065ca <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c4:	4619      	mov	r1, r3
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 ff66 	bl	8007398 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80064cc:	e07d      	b.n	80065ca <I2C_Slave_ISR_IT+0x1f0>
 80064ce:	e07c      	b.n	80065ca <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	089b      	lsrs	r3, r3, #2
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d030      	beq.n	800653e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	089b      	lsrs	r3, r3, #2
 80064e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02a      	beq.n	800653e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d14f      	bne.n	80065ce <I2C_Slave_ISR_IT+0x1f4>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006534:	d04b      	beq.n	80065ce <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fc46 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800653c:	e047      	b.n	80065ce <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	08db      	lsrs	r3, r3, #3
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006556:	6939      	ldr	r1, [r7, #16]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fb74 	bl	8006c46 <I2C_ITAddrCplt>
 800655e:	e037      	b.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d031      	beq.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02b      	beq.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065b2:	e00d      	b.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ba:	d002      	beq.n	80065c2 <I2C_Slave_ISR_IT+0x1e8>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fc00 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
 80065c8:	e002      	b.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80065ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b088      	sub	sp, #32
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <I2C_Master_ISR_DMA+0x1a>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e0f0      	b.n	80067de <I2C_Master_ISR_DMA+0x1fc>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d017      	beq.n	8006640 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	091b      	lsrs	r3, r3, #4
 8006614:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006618:	2b00      	cmp	r3, #0
 800661a:	d011      	beq.n	8006640 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2210      	movs	r2, #16
 8006622:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f043 0204 	orr.w	r2, r3, #4
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006630:	2120      	movs	r1, #32
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 f8e4 	bl	8007800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 ffc4 	bl	80075c6 <I2C_Flush_TXDR>
 800663e:	e0c9      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8081 	beq.w	8006750 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006656:	2b00      	cmp	r3, #0
 8006658:	d07a      	beq.n	8006750 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006668:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05c      	beq.n	800672e <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006680:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	2bff      	cmp	r3, #255	@ 0xff
 800668a:	d914      	bls.n	80066b6 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	0c1b      	lsrs	r3, r3, #16
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d103      	bne.n	80066a8 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80066a6:	e002      	b.n	80066ae <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	22ff      	movs	r2, #255	@ 0xff
 80066ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80066ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e010      	b.n	80066d8 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066c8:	d003      	beq.n	80066d2 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e002      	b.n	80066d8 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80066d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066d6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	8a79      	ldrh	r1, [r7, #18]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f001 f858 	bl	800779c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b22      	cmp	r3, #34	@ 0x22
 8006708:	d108      	bne.n	800671c <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006718:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800671a:	e05b      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800672a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800672c:	e052      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800673c:	d003      	beq.n	8006746 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fb05 	bl	8006d4e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006744:	e046      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006746:	2140      	movs	r1, #64	@ 0x40
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fe25 	bl	8007398 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800674e:	e041      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	099b      	lsrs	r3, r3, #6
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d029      	beq.n	80067b0 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006764:	2b00      	cmp	r3, #0
 8006766:	d023      	beq.n	80067b0 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006780:	d027      	beq.n	80067d2 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678a:	d108      	bne.n	800679e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800679a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800679c:	e019      	b.n	80067d2 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fad5 	bl	8006d4e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80067a4:	e015      	b.n	80067d2 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067a6:	2140      	movs	r1, #64	@ 0x40
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fdf5 	bl	8007398 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067ae:	e010      	b.n	80067d2 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fb5a 	bl	8006e84 <I2C_ITMasterCplt>
 80067d0:	e000      	b.n	80067d4 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80067d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80067f4:	4b94      	ldr	r3, [pc, #592]	@ (8006a48 <I2C_Mem_ISR_DMA+0x260>)
 80067f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <I2C_Mem_ISR_DMA+0x1e>
 8006802:	2302      	movs	r3, #2
 8006804:	e139      	b.n	8006a7a <I2C_Mem_ISR_DMA+0x292>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d017      	beq.n	800684a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2210      	movs	r2, #16
 800682c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800683a:	2120      	movs	r1, #32
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 ffdf 	bl	8007800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 febf 	bl	80075c6 <I2C_Flush_TXDR>
 8006848:	e112      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	085b      	lsrs	r3, r3, #1
 800685a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800686a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f04f 32ff 	mov.w	r2, #4294967295
 8006872:	651a      	str	r2, [r3, #80]	@ 0x50
 8006874:	e0fc      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	09db      	lsrs	r3, r3, #7
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d06e      	beq.n	8006960 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	099b      	lsrs	r3, r3, #6
 8006886:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800688a:	2b00      	cmp	r3, #0
 800688c:	d068      	beq.n	8006960 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800688e:	2101      	movs	r1, #1
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 f839 	bl	8007908 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006896:	2110      	movs	r1, #16
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 ffb1 	bl	8007800 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d056      	beq.n	8006956 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2bff      	cmp	r3, #255	@ 0xff
 80068b0:	d91e      	bls.n	80068f0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d103      	bne.n	80068ce <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068cc:	e002      	b.n	80068d4 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	22ff      	movs	r2, #255	@ 0xff
 80068d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d8:	b299      	uxth	r1, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 ff57 	bl	800779c <I2C_TransferConfig>
 80068ee:	e011      	b.n	8006914 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fe:	b299      	uxth	r1, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006904:	b2da      	uxtb	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 ff44 	bl	800779c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b22      	cmp	r3, #34	@ 0x22
 8006930:	d108      	bne.n	8006944 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006940:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006942:	e095      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006952:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006954:	e08c      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006956:	2140      	movs	r1, #64	@ 0x40
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fd1d 	bl	8007398 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800695e:	e087      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	099b      	lsrs	r3, r3, #6
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d071      	beq.n	8006a50 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	099b      	lsrs	r3, r3, #6
 8006970:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06b      	beq.n	8006a50 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006978:	2101      	movs	r1, #1
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 ffc4 	bl	8007908 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006980:	2110      	movs	r1, #16
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 ff3c 	bl	8007800 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b22      	cmp	r3, #34	@ 0x22
 8006992:	d101      	bne.n	8006998 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006994:	4b2d      	ldr	r3, [pc, #180]	@ (8006a4c <I2C_Mem_ISR_DMA+0x264>)
 8006996:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2bff      	cmp	r3, #255	@ 0xff
 80069a0:	d91e      	bls.n	80069e0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d103      	bne.n	80069be <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069bc:	e002      	b.n	80069c4 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	@ 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c8:	b299      	uxth	r1, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fedf 	bl	800779c <I2C_TransferConfig>
 80069de:	e011      	b.n	8006a04 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ee:	b299      	uxth	r1, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fecc 	bl	800779c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b22      	cmp	r3, #34	@ 0x22
 8006a20:	d108      	bne.n	8006a34 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a32:	e01d      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a44:	e014      	b.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
 8006a46:	bf00      	nop
 8006a48:	80002000 	.word	0x80002000
 8006a4c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa0a 	bl	8006e84 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <I2C_Slave_ISR_DMA+0x24>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e0ca      	b.n	8006c3e <I2C_Slave_ISR_DMA+0x1ba>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 faa4 	bl	8007018 <I2C_ITSlaveCplt>
 8006ad0:	e0b0      	b.n	8006c34 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 809a 	beq.w	8006c14 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8093 	beq.w	8006c14 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0b9b      	lsrs	r3, r3, #14
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0bdb      	lsrs	r3, r3, #15
 8006afe:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07f      	beq.n	8006c06 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00d      	beq.n	8006b2a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0bdb      	lsrs	r3, r3, #15
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006b26:	2301      	movs	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0b9b      	lsrs	r3, r3, #14
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d128      	bne.n	8006ba6 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b28      	cmp	r3, #40	@ 0x28
 8006b5e:	d108      	bne.n	8006b72 <I2C_Slave_ISR_DMA+0xee>
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b66:	d104      	bne.n	8006b72 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fbbe 	bl	80072ec <I2C_ITListenCplt>
 8006b70:	e048      	b.n	8006c04 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b29      	cmp	r3, #41	@ 0x29
 8006b7c:	d10e      	bne.n	8006b9c <I2C_Slave_ISR_DMA+0x118>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b84:	d00a      	beq.n	8006b9c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2210      	movs	r2, #16
 8006b8c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fd19 	bl	80075c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f917 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
 8006b9a:	e033      	b.n	8006c04 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006ba4:	e034      	b.n	8006c10 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2210      	movs	r2, #16
 8006bac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <I2C_Slave_ISR_DMA+0x14c>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bce:	d11f      	bne.n	8006c10 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b21      	cmp	r3, #33	@ 0x21
 8006bd4:	d002      	beq.n	8006bdc <I2C_Slave_ISR_DMA+0x158>
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b29      	cmp	r3, #41	@ 0x29
 8006bda:	d103      	bne.n	8006be4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2221      	movs	r2, #33	@ 0x21
 8006be0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006be2:	e008      	b.n	8006bf6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b22      	cmp	r3, #34	@ 0x22
 8006be8:	d002      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x16c>
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bee:	d102      	bne.n	8006bf6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2222      	movs	r2, #34	@ 0x22
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fbcb 	bl	8007398 <I2C_ITError>
      if (treatdmanack == 1U)
 8006c02:	e005      	b.n	8006c10 <I2C_Slave_ISR_DMA+0x18c>
 8006c04:	e004      	b.n	8006c10 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c0e:	e011      	b.n	8006c34 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006c10:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c12:	e00f      	b.n	8006c34 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	08db      	lsrs	r3, r3, #3
 8006c24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f809 	bl	8006c46 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c5c:	2b28      	cmp	r3, #40	@ 0x28
 8006c5e:	d16a      	bne.n	8006d36 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	0c1b      	lsrs	r3, r3, #16
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006c7e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c8c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006c9a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d138      	bne.n	8006d16 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ca4:	897b      	ldrh	r3, [r7, #10]
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	89bb      	ldrh	r3, [r7, #12]
 8006cac:	4053      	eors	r3, r2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f003 0306 	and.w	r3, r3, #6
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11c      	bne.n	8006cf2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006cb8:	897b      	ldrh	r3, [r7, #10]
 8006cba:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d13b      	bne.n	8006d46 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2208      	movs	r2, #8
 8006cda:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ce4:	89ba      	ldrh	r2, [r7, #12]
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff f9f3 	bl	80060d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006cf0:	e029      	b.n	8006d46 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006cf2:	893b      	ldrh	r3, [r7, #8]
 8006cf4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fe04 	bl	8007908 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d08:	89ba      	ldrh	r2, [r7, #12]
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff f9e1 	bl	80060d6 <HAL_I2C_AddrCallback>
}
 8006d14:	e017      	b.n	8006d46 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fdf4 	bl	8007908 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d28:	89ba      	ldrh	r2, [r7, #12]
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff f9d1 	bl	80060d6 <HAL_I2C_AddrCallback>
}
 8006d34:	e007      	b.n	8006d46 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b21      	cmp	r3, #33	@ 0x21
 8006d68:	d115      	bne.n	8006d96 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2211      	movs	r2, #17
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d7e:	2101      	movs	r1, #1
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fdc1 	bl	8007908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f015 fd3a 	bl	801c808 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d94:	e014      	b.n	8006dc0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2212      	movs	r2, #18
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006daa:	2102      	movs	r1, #2
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fdab 	bl	8007908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff f977 	bl	80060ae <HAL_I2C_MasterRxCpltCallback>
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	0b9b      	lsrs	r3, r3, #14
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e00d      	b.n	8006e1a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	0bdb      	lsrs	r3, r3, #15
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b29      	cmp	r3, #41	@ 0x29
 8006e24:	d112      	bne.n	8006e4c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2228      	movs	r2, #40	@ 0x28
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2221      	movs	r2, #33	@ 0x21
 8006e32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e34:	2101      	movs	r1, #1
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fd66 	bl	8007908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff f93c 	bl	80060c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e4a:	e017      	b.n	8006e7c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e56:	d111      	bne.n	8006e7c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2228      	movs	r2, #40	@ 0x28
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2222      	movs	r2, #34	@ 0x22
 8006e64:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e66:	2102      	movs	r1, #2
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fd4d 	bl	8007908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f015 fcf4 	bl	801c864 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2220      	movs	r2, #32
 8006e98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	@ 0x21
 8006ea4:	d107      	bne.n	8006eb6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fd2d 	bl	8007908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2211      	movs	r2, #17
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eb4:	e00c      	b.n	8006ed0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b22      	cmp	r3, #34	@ 0x22
 8006ec0:	d106      	bne.n	8006ed0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fd1f 	bl	8007908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2212      	movs	r2, #18
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b4d      	ldr	r3, [pc, #308]	@ (8007010 <I2C_ITMasterCplt+0x18c>)
 8006edc:	400b      	ands	r3, r1
 8006ede:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8007014 <I2C_ITMasterCplt+0x190>)
 8006eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2210      	movs	r2, #16
 8006efe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f04:	f043 0204 	orr.w	r2, r3, #4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b60      	cmp	r3, #96	@ 0x60
 8006f16:	d10b      	bne.n	8006f30 <I2C_ITMasterCplt+0xac>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	089b      	lsrs	r3, r3, #2
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fb48 	bl	80075c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b60      	cmp	r3, #96	@ 0x60
 8006f46:	d002      	beq.n	8006f4e <I2C_ITMasterCplt+0xca>
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d006      	beq.n	8006f5c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa1f 	bl	8007398 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f5a:	e054      	b.n	8007006 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b21      	cmp	r3, #33	@ 0x21
 8006f66:	d124      	bne.n	8006fb2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d10b      	bne.n	8006f9a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff f8b7 	bl	8006106 <HAL_I2C_MemTxCpltCallback>
}
 8006f98:	e035      	b.n	8007006 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f015 fc2c 	bl	801c808 <HAL_I2C_MasterTxCpltCallback>
}
 8006fb0:	e029      	b.n	8007006 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b22      	cmp	r3, #34	@ 0x22
 8006fbc:	d123      	bne.n	8007006 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	d10b      	bne.n	8006ff0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff f896 	bl	800611a <HAL_I2C_MemRxCpltCallback>
}
 8006fee:	e00a      	b.n	8007006 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f854 	bl	80060ae <HAL_I2C_MasterRxCpltCallback>
}
 8007006:	bf00      	nop
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	fe00e800 	.word	0xfe00e800
 8007014:	ffff0000 	.word	0xffff0000

08007018 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800703a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2220      	movs	r2, #32
 8007042:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	2b21      	cmp	r3, #33	@ 0x21
 8007048:	d002      	beq.n	8007050 <I2C_ITSlaveCplt+0x38>
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	2b29      	cmp	r3, #41	@ 0x29
 800704e:	d108      	bne.n	8007062 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007050:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fc57 	bl	8007908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2221      	movs	r2, #33	@ 0x21
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007060:	e019      	b.n	8007096 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	2b22      	cmp	r3, #34	@ 0x22
 8007066:	d002      	beq.n	800706e <I2C_ITSlaveCplt+0x56>
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	2b2a      	cmp	r3, #42	@ 0x2a
 800706c:	d108      	bne.n	8007080 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800706e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fc48 	bl	8007908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2222      	movs	r2, #34	@ 0x22
 800707c:	631a      	str	r2, [r3, #48]	@ 0x30
 800707e:	e00a      	b.n	8007096 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	2b28      	cmp	r3, #40	@ 0x28
 8007084:	d107      	bne.n	8007096 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007086:	f248 0103 	movw	r1, #32771	@ 0x8003
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fc3c 	bl	8007908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070a4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6859      	ldr	r1, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b8c      	ldr	r3, [pc, #560]	@ (80072e4 <I2C_ITSlaveCplt+0x2cc>)
 80070b2:	400b      	ands	r3, r1
 80070b4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa85 	bl	80075c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	0b9b      	lsrs	r3, r3, #14
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d013      	beq.n	80070f0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d020      	beq.n	8007122 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070ee:	e018      	b.n	8007122 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	0bdb      	lsrs	r3, r3, #15
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800710a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	089b      	lsrs	r3, r3, #2
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d020      	beq.n	8007170 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f023 0304 	bic.w	r3, r3, #4
 8007134:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00c      	beq.n	8007170 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717e:	f043 0204 	orr.w	r2, r3, #4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	091b      	lsrs	r3, r3, #4
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04a      	beq.n	8007228 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800719a:	2b00      	cmp	r3, #0
 800719c:	d044      	beq.n	8007228 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d128      	bne.n	80071fa <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b28      	cmp	r3, #40	@ 0x28
 80071b2:	d108      	bne.n	80071c6 <I2C_ITSlaveCplt+0x1ae>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ba:	d104      	bne.n	80071c6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80071bc:	6979      	ldr	r1, [r7, #20]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f894 	bl	80072ec <I2C_ITListenCplt>
 80071c4:	e030      	b.n	8007228 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b29      	cmp	r3, #41	@ 0x29
 80071d0:	d10e      	bne.n	80071f0 <I2C_ITSlaveCplt+0x1d8>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071d8:	d00a      	beq.n	80071f0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2210      	movs	r2, #16
 80071e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9ef 	bl	80075c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fded 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
 80071ee:	e01b      	b.n	8007228 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2210      	movs	r2, #16
 80071f6:	61da      	str	r2, [r3, #28]
 80071f8:	e016      	b.n	8007228 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2210      	movs	r2, #16
 8007200:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <I2C_ITSlaveCplt+0x204>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800721a:	d105      	bne.n	8007228 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8b8 	bl	8007398 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8a7 	bl	8007398 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b28      	cmp	r3, #40	@ 0x28
 8007254:	d141      	bne.n	80072da <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f847 	bl	80072ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800725e:	e03c      	b.n	80072da <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007268:	d014      	beq.n	8007294 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fdac 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a1d      	ldr	r2, [pc, #116]	@ (80072e8 <I2C_ITSlaveCplt+0x2d0>)
 8007274:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fe ff30 	bl	80060f2 <HAL_I2C_ListenCpltCallback>
}
 8007292:	e022      	b.n	80072da <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b22      	cmp	r3, #34	@ 0x22
 800729e:	d10e      	bne.n	80072be <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f015 fad4 	bl	801c864 <HAL_I2C_SlaveRxCpltCallback>
}
 80072bc:	e00d      	b.n	80072da <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe fef4 	bl	80060c2 <HAL_I2C_SlaveTxCpltCallback>
}
 80072da:	bf00      	nop
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	fe00e800 	.word	0xfe00e800
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a26      	ldr	r2, [pc, #152]	@ (8007394 <I2C_ITListenCplt+0xa8>)
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	d012      	beq.n	800736a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007362:	f043 0204 	orr.w	r2, r3, #4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800736a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 faca 	bl	8007908 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2210      	movs	r2, #16
 800737a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fe feb4 	bl	80060f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	ffff0000 	.word	0xffff0000

08007398 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a6d      	ldr	r2, [pc, #436]	@ (800756c <I2C_ITError+0x1d4>)
 80073b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b28      	cmp	r3, #40	@ 0x28
 80073ce:	d005      	beq.n	80073dc <I2C_ITError+0x44>
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b29      	cmp	r3, #41	@ 0x29
 80073d4:	d002      	beq.n	80073dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073da:	d10b      	bne.n	80073f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073dc:	2103      	movs	r1, #3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa92 	bl	8007908 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2228      	movs	r2, #40	@ 0x28
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a60      	ldr	r2, [pc, #384]	@ (8007570 <I2C_ITError+0x1d8>)
 80073f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80073f2:	e030      	b.n	8007456 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa85 	bl	8007908 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8e1 	bl	80075c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b60      	cmp	r3, #96	@ 0x60
 800740e:	d01f      	beq.n	8007450 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b20      	cmp	r3, #32
 8007424:	d114      	bne.n	8007450 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b10      	cmp	r3, #16
 8007432:	d109      	bne.n	8007448 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2210      	movs	r2, #16
 800743a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007440:	f043 0204 	orr.w	r2, r3, #4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2220      	movs	r2, #32
 800744e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d039      	beq.n	80074d8 <I2C_ITError+0x140>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b11      	cmp	r3, #17
 8007468:	d002      	beq.n	8007470 <I2C_ITError+0xd8>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b21      	cmp	r3, #33	@ 0x21
 800746e:	d133      	bne.n	80074d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800747a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800747e:	d107      	bne.n	8007490 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800748e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	4618      	mov	r0, r3
 8007496:	f7fc fc9d 	bl	8003dd4 <HAL_DMA_GetState>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d017      	beq.n	80074d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a4:	4a33      	ldr	r2, [pc, #204]	@ (8007574 <I2C_ITError+0x1dc>)
 80074a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fc fae1 	bl	8003a7c <HAL_DMA_Abort_IT>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d04d      	beq.n	800755c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80074ca:	4610      	mov	r0, r2
 80074cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074ce:	e045      	b.n	800755c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f851 	bl	8007578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074d6:	e041      	b.n	800755c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d039      	beq.n	8007554 <I2C_ITError+0x1bc>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b12      	cmp	r3, #18
 80074e4:	d002      	beq.n	80074ec <I2C_ITError+0x154>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b22      	cmp	r3, #34	@ 0x22
 80074ea:	d133      	bne.n	8007554 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fa:	d107      	bne.n	800750c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800750a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	4618      	mov	r0, r3
 8007512:	f7fc fc5f 	bl	8003dd4 <HAL_DMA_GetState>
 8007516:	4603      	mov	r3, r0
 8007518:	2b01      	cmp	r3, #1
 800751a:	d017      	beq.n	800754c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007520:	4a14      	ldr	r2, [pc, #80]	@ (8007574 <I2C_ITError+0x1dc>)
 8007522:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc faa3 	bl	8003a7c <HAL_DMA_Abort_IT>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d011      	beq.n	8007560 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007546:	4610      	mov	r0, r2
 8007548:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800754a:	e009      	b.n	8007560 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f813 	bl	8007578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007552:	e005      	b.n	8007560 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f80f 	bl	8007578 <I2C_TreatErrorCallback>
  }
}
 800755a:	e002      	b.n	8007562 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007560:	bf00      	nop
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	ffff0000 	.word	0xffff0000
 8007570:	080063db 	.word	0x080063db
 8007574:	0800775f 	.word	0x0800775f

08007578 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b60      	cmp	r3, #96	@ 0x60
 800758a:	d10e      	bne.n	80075aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe fdcd 	bl	8006142 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075a8:	e009      	b.n	80075be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fe fdb8 	bl	800612e <HAL_I2C_ErrorCallback>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d103      	bne.n	80075e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2200      	movs	r2, #0
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d007      	beq.n	8007602 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0201 	orr.w	r2, r2, #1
 8007600:	619a      	str	r2, [r3, #24]
  }
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800762a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007636:	2120      	movs	r1, #32
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f8e1 	bl	8007800 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800763e:	e02d      	b.n	800769c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007648:	441a      	add	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	2bff      	cmp	r3, #255	@ 0xff
 8007656:	d903      	bls.n	8007660 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	22ff      	movs	r2, #255	@ 0xff
 800765c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800765e:	e004      	b.n	800766a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	4619      	mov	r1, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3328      	adds	r3, #40	@ 0x28
 800767a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007680:	f7fc f92c 	bl	80038dc <HAL_DMA_Start_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800768a:	2110      	movs	r1, #16
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fe83 	bl	8007398 <I2C_ITError>
}
 8007692:	e003      	b.n	800769c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007694:	2140      	movs	r1, #64	@ 0x40
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f8b2 	bl	8007800 <I2C_Enable_IRQ>
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10e      	bne.n	80076e2 <I2C_DMASlaveReceiveCplt+0x3e>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076ca:	d00a      	beq.n	80076e2 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076da:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff fb73 	bl	8006dc8 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007728:	2301      	movs	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fc fb5f 	bl	8003df0 <HAL_DMA_GetError>
 8007732:	4603      	mov	r3, r0
 8007734:	2b02      	cmp	r3, #2
 8007736:	d00e      	beq.n	8007756 <I2C_DMAError+0x6c>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800774c:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800774e:	2110      	movs	r1, #16
 8007750:	68b8      	ldr	r0, [r7, #8]
 8007752:	f7ff fe21 	bl	8007398 <I2C_ITError>
  }
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	2200      	movs	r2, #0
 800777a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007788:	2200      	movs	r2, #0
 800778a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fef3 	bl	8007578 <I2C_TreatErrorCallback>
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	817b      	strh	r3, [r7, #10]
 80077aa:	4613      	mov	r3, r2
 80077ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077ae:	897b      	ldrh	r3, [r7, #10]
 80077b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077b4:	7a7b      	ldrb	r3, [r7, #9]
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077bc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077ca:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	0d5b      	lsrs	r3, r3, #21
 80077d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <I2C_TransferConfig+0x60>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	43db      	mvns	r3, r3
 80077e0:	ea02 0103 	and.w	r1, r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	03ff63ff 	.word	0x03ff63ff

08007800 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007814:	4a39      	ldr	r2, [pc, #228]	@ (80078fc <I2C_Enable_IRQ+0xfc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d032      	beq.n	8007880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800781e:	4a38      	ldr	r2, [pc, #224]	@ (8007900 <I2C_Enable_IRQ+0x100>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d02d      	beq.n	8007880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007828:	4a36      	ldr	r2, [pc, #216]	@ (8007904 <I2C_Enable_IRQ+0x104>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d028      	beq.n	8007880 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800782e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007832:	2b00      	cmp	r3, #0
 8007834:	da03      	bge.n	800783e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800783c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800783e:	887b      	ldrh	r3, [r7, #2]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800784e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007860:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007862:	887b      	ldrh	r3, [r7, #2]
 8007864:	2b10      	cmp	r3, #16
 8007866:	d103      	bne.n	8007870 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800786e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	2b20      	cmp	r3, #32
 8007874:	d133      	bne.n	80078de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f043 0320 	orr.w	r3, r3, #32
 800787c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800787e:	e02e      	b.n	80078de <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	da03      	bge.n	8007890 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800788e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80078a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80078b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078b4:	887b      	ldrh	r3, [r7, #2]
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d103      	bne.n	80078c2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80078c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078c2:	887b      	ldrh	r3, [r7, #2]
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d103      	bne.n	80078d0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80078d0:	887b      	ldrh	r3, [r7, #2]
 80078d2:	2b40      	cmp	r3, #64	@ 0x40
 80078d4:	d103      	bne.n	80078de <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	080065e3 	.word	0x080065e3
 8007900:	08006a85 	.word	0x08006a85
 8007904:	080067e9 	.word	0x080067e9

08007908 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007918:	887b      	ldrh	r3, [r7, #2]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00f      	beq.n	8007942 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007928:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007936:	2b28      	cmp	r3, #40	@ 0x28
 8007938:	d003      	beq.n	8007942 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007940:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007942:	887b      	ldrh	r3, [r7, #2]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00f      	beq.n	800796c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007952:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007960:	2b28      	cmp	r3, #40	@ 0x28
 8007962:	d003      	beq.n	800796c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800796a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800796c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	da03      	bge.n	800797c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800797a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800797c:	887b      	ldrh	r3, [r7, #2]
 800797e:	2b10      	cmp	r3, #16
 8007980:	d103      	bne.n	800798a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007988:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800798a:	887b      	ldrh	r3, [r7, #2]
 800798c:	2b20      	cmp	r3, #32
 800798e:	d103      	bne.n	8007998 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f043 0320 	orr.w	r3, r3, #32
 8007996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007998:	887b      	ldrh	r3, [r7, #2]
 800799a:	2b40      	cmp	r3, #64	@ 0x40
 800799c:	d103      	bne.n	80079a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	43da      	mvns	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	400a      	ands	r2, r1
 80079b6:	601a      	str	r2, [r3, #0]
}
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d138      	bne.n	8007a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e032      	b.n	8007a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	@ 0x24
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0201 	bic.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d139      	bne.n	8007ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e033      	b.n	8007ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2224      	movs	r2, #36	@ 0x24
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007aac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e000      	b.n	8007ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ae4:	2302      	movs	r3, #2
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af02      	add	r7, sp, #8
 8007af8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e108      	b.n	8007d16 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa f83c 	bl	8001b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b32:	d102      	bne.n	8007b3a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f004 fd52 	bl	800c5e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7c1a      	ldrb	r2, [r3, #16]
 8007b4c:	f88d 2000 	strb.w	r2, [sp]
 8007b50:	3304      	adds	r3, #4
 8007b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b54:	f004 fcee 	bl	800c534 <USB_CoreInit>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e0d5      	b.n	8007d16 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f004 fd4a 	bl	800c60a <USB_SetCurrentMode>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0c6      	b.n	8007d16 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e04a      	b.n	8007c24 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b8e:	7bfa      	ldrb	r2, [r7, #15]
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3315      	adds	r3, #21
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ba2:	7bfa      	ldrb	r2, [r7, #15]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	7bfa      	ldrb	r2, [r7, #15]
 8007bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007bb6:	7bfa      	ldrb	r2, [r7, #15]
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	b298      	uxth	r0, r3
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	332e      	adds	r3, #46	@ 0x2e
 8007bca:	4602      	mov	r2, r0
 8007bcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bce:	7bfa      	ldrb	r2, [r7, #15]
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	3318      	adds	r3, #24
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007be2:	7bfa      	ldrb	r2, [r7, #15]
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	331c      	adds	r3, #28
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bf6:	7bfa      	ldrb	r2, [r7, #15]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3320      	adds	r3, #32
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c0a:	7bfa      	ldrb	r2, [r7, #15]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3324      	adds	r3, #36	@ 0x24
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	3301      	adds	r3, #1
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	7bfa      	ldrb	r2, [r7, #15]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3af      	bcc.n	8007b8e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	e044      	b.n	8007cbe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c34:	7bfa      	ldrb	r2, [r7, #15]
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c4a:	7bfa      	ldrb	r2, [r7, #15]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007c5c:	7bfa      	ldrb	r2, [r7, #15]
 8007c5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c60:	7bfa      	ldrb	r2, [r7, #15]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c76:	7bfa      	ldrb	r2, [r7, #15]
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ca2:	7bfa      	ldrb	r2, [r7, #15]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3b5      	bcc.n	8007c34 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7c1a      	ldrb	r2, [r3, #16]
 8007cd0:	f88d 2000 	strb.w	r2, [sp]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cd8:	f004 fce4 	bl	800c6a4 <USB_DevInit>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e013      	b.n	8007d16 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7b1b      	ldrb	r3, [r3, #12]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d102      	bne.n	8007d0a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f80b 	bl	8007d20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f004 fe9f 	bl	800ca52 <USB_DevDisconnect>

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d4e:	4b05      	ldr	r3, [pc, #20]	@ (8007d64 <HAL_PCDEx_ActivateLPM+0x44>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	10000003 	.word	0x10000003

08007d68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a04      	ldr	r2, [pc, #16]	@ (8007d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d76:	6013      	str	r3, [r2, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40007000 	.word	0x40007000

08007d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007d90:	2300      	movs	r3, #0
 8007d92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e291      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 8087 	beq.w	8007eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dac:	4b96      	ldr	r3, [pc, #600]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 030c 	and.w	r3, r3, #12
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d00c      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007db8:	4b93      	ldr	r3, [pc, #588]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 030c 	and.w	r3, r3, #12
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d112      	bne.n	8007dea <HAL_RCC_OscConfig+0x62>
 8007dc4:	4b90      	ldr	r3, [pc, #576]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dd0:	d10b      	bne.n	8007dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d06c      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x130>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d168      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e26b      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df2:	d106      	bne.n	8007e02 <HAL_RCC_OscConfig+0x7a>
 8007df4:	4b84      	ldr	r3, [pc, #528]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a83      	ldr	r2, [pc, #524]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e02e      	b.n	8007e60 <HAL_RCC_OscConfig+0xd8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10c      	bne.n	8007e24 <HAL_RCC_OscConfig+0x9c>
 8007e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	4b7c      	ldr	r3, [pc, #496]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	e01d      	b.n	8007e60 <HAL_RCC_OscConfig+0xd8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e2c:	d10c      	bne.n	8007e48 <HAL_RCC_OscConfig+0xc0>
 8007e2e:	4b76      	ldr	r3, [pc, #472]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a75      	ldr	r2, [pc, #468]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	4b73      	ldr	r3, [pc, #460]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a72      	ldr	r2, [pc, #456]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e00b      	b.n	8007e60 <HAL_RCC_OscConfig+0xd8>
 8007e48:	4b6f      	ldr	r3, [pc, #444]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	4b6c      	ldr	r3, [pc, #432]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a6b      	ldr	r2, [pc, #428]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d013      	beq.n	8007e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fa fa98 	bl	800239c <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e70:	f7fa fa94 	bl	800239c <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b64      	cmp	r3, #100	@ 0x64
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e21f      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e82:	4b61      	ldr	r3, [pc, #388]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f0      	beq.n	8007e70 <HAL_RCC_OscConfig+0xe8>
 8007e8e:	e014      	b.n	8007eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e90:	f7fa fa84 	bl	800239c <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e98:	f7fa fa80 	bl	800239c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b64      	cmp	r3, #100	@ 0x64
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e20b      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eaa:	4b57      	ldr	r3, [pc, #348]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x110>
 8007eb6:	e000      	b.n	8007eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d069      	beq.n	8007f9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ec6:	4b50      	ldr	r3, [pc, #320]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 030c 	and.w	r3, r3, #12
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 030c 	and.w	r3, r3, #12
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d11c      	bne.n	8007f18 <HAL_RCC_OscConfig+0x190>
 8007ede:	4b4a      	ldr	r3, [pc, #296]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d116      	bne.n	8007f18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eea:	4b47      	ldr	r3, [pc, #284]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <HAL_RCC_OscConfig+0x17a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d001      	beq.n	8007f02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e1df      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f02:	4b41      	ldr	r3, [pc, #260]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	493d      	ldr	r1, [pc, #244]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f16:	e040      	b.n	8007f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d023      	beq.n	8007f68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f20:	4b39      	ldr	r3, [pc, #228]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a38      	ldr	r2, [pc, #224]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fa fa36 	bl	800239c <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f34:	f7fa fa32 	bl	800239c <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e1bd      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f46:	4b30      	ldr	r3, [pc, #192]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f52:	4b2d      	ldr	r3, [pc, #180]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4929      	ldr	r1, [pc, #164]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	600b      	str	r3, [r1, #0]
 8007f66:	e018      	b.n	8007f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f68:	4b27      	ldr	r3, [pc, #156]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a26      	ldr	r2, [pc, #152]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fa fa12 	bl	800239c <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f7c:	f7fa fa0e 	bl	800239c <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e199      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d038      	beq.n	8008018 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d019      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fae:	4b16      	ldr	r3, [pc, #88]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb2:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fba:	f7fa f9ef 	bl	800239c <HAL_GetTick>
 8007fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fc2:	f7fa f9eb 	bl	800239c <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e176      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0f0      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x23a>
 8007fe0:	e01a      	b.n	8008018 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe2:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe6:	4a08      	ldr	r2, [pc, #32]	@ (8008008 <HAL_RCC_OscConfig+0x280>)
 8007fe8:	f023 0301 	bic.w	r3, r3, #1
 8007fec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fee:	f7fa f9d5 	bl	800239c <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ff4:	e00a      	b.n	800800c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ff6:	f7fa f9d1 	bl	800239c <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d903      	bls.n	800800c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e15c      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
 8008008:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800800c:	4b91      	ldr	r3, [pc, #580]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 800800e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1ee      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80a4 	beq.w	800816e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008026:	4b8b      	ldr	r3, [pc, #556]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10d      	bne.n	800804e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008032:	4b88      	ldr	r3, [pc, #544]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008036:	4a87      	ldr	r2, [pc, #540]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800803c:	6413      	str	r3, [r2, #64]	@ 0x40
 800803e:	4b85      	ldr	r3, [pc, #532]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800804e:	4b82      	ldr	r3, [pc, #520]	@ (8008258 <HAL_RCC_OscConfig+0x4d0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008056:	2b00      	cmp	r3, #0
 8008058:	d118      	bne.n	800808c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800805a:	4b7f      	ldr	r3, [pc, #508]	@ (8008258 <HAL_RCC_OscConfig+0x4d0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a7e      	ldr	r2, [pc, #504]	@ (8008258 <HAL_RCC_OscConfig+0x4d0>)
 8008060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008066:	f7fa f999 	bl	800239c <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800806e:	f7fa f995 	bl	800239c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b64      	cmp	r3, #100	@ 0x64
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e120      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008080:	4b75      	ldr	r3, [pc, #468]	@ (8008258 <HAL_RCC_OscConfig+0x4d0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0f0      	beq.n	800806e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d106      	bne.n	80080a2 <HAL_RCC_OscConfig+0x31a>
 8008094:	4b6f      	ldr	r3, [pc, #444]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008098:	4a6e      	ldr	r2, [pc, #440]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	6713      	str	r3, [r2, #112]	@ 0x70
 80080a0:	e02d      	b.n	80080fe <HAL_RCC_OscConfig+0x376>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10c      	bne.n	80080c4 <HAL_RCC_OscConfig+0x33c>
 80080aa:	4b6a      	ldr	r3, [pc, #424]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ae:	4a69      	ldr	r2, [pc, #420]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80080b6:	4b67      	ldr	r3, [pc, #412]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	4a66      	ldr	r2, [pc, #408]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80080c2:	e01c      	b.n	80080fe <HAL_RCC_OscConfig+0x376>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b05      	cmp	r3, #5
 80080ca:	d10c      	bne.n	80080e6 <HAL_RCC_OscConfig+0x35e>
 80080cc:	4b61      	ldr	r3, [pc, #388]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d0:	4a60      	ldr	r2, [pc, #384]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80080d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080dc:	4a5d      	ldr	r2, [pc, #372]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80080e4:	e00b      	b.n	80080fe <HAL_RCC_OscConfig+0x376>
 80080e6:	4b5b      	ldr	r3, [pc, #364]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ea:	4a5a      	ldr	r2, [pc, #360]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80080f2:	4b58      	ldr	r3, [pc, #352]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f6:	4a57      	ldr	r2, [pc, #348]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80080f8:	f023 0304 	bic.w	r3, r3, #4
 80080fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d015      	beq.n	8008132 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008106:	f7fa f949 	bl	800239c <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800810c:	e00a      	b.n	8008124 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800810e:	f7fa f945 	bl	800239c <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e0ce      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008124:	4b4b      	ldr	r3, [pc, #300]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0ee      	beq.n	800810e <HAL_RCC_OscConfig+0x386>
 8008130:	e014      	b.n	800815c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008132:	f7fa f933 	bl	800239c <HAL_GetTick>
 8008136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008138:	e00a      	b.n	8008150 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800813a:	f7fa f92f 	bl	800239c <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008148:	4293      	cmp	r3, r2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e0b8      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008150:	4b40      	ldr	r3, [pc, #256]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1ee      	bne.n	800813a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d105      	bne.n	800816e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008162:	4b3c      	ldr	r3, [pc, #240]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008166:	4a3b      	ldr	r2, [pc, #236]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800816c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80a4 	beq.w	80082c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008178:	4b36      	ldr	r3, [pc, #216]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 030c 	and.w	r3, r3, #12
 8008180:	2b08      	cmp	r3, #8
 8008182:	d06b      	beq.n	800825c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d149      	bne.n	8008220 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800818c:	4b31      	ldr	r3, [pc, #196]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a30      	ldr	r2, [pc, #192]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008198:	f7fa f900 	bl	800239c <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081a0:	f7fa f8fc 	bl	800239c <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e087      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b2:	4b28      	ldr	r3, [pc, #160]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f0      	bne.n	80081a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69da      	ldr	r2, [r3, #28]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	019b      	lsls	r3, r3, #6
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	3b01      	subs	r3, #1
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	4313      	orrs	r3, r2
 80081e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80081e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ec:	4b19      	ldr	r3, [pc, #100]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a18      	ldr	r2, [pc, #96]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 80081f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f8:	f7fa f8d0 	bl	800239c <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008200:	f7fa f8cc 	bl	800239c <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e057      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008212:	4b10      	ldr	r3, [pc, #64]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x478>
 800821e:	e04f      	b.n	80082c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008220:	4b0c      	ldr	r3, [pc, #48]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a0b      	ldr	r2, [pc, #44]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800822a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fa f8b6 	bl	800239c <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008234:	f7fa f8b2 	bl	800239c <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e03d      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008246:	4b03      	ldr	r3, [pc, #12]	@ (8008254 <HAL_RCC_OscConfig+0x4cc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f0      	bne.n	8008234 <HAL_RCC_OscConfig+0x4ac>
 8008252:	e035      	b.n	80082c0 <HAL_RCC_OscConfig+0x538>
 8008254:	40023800 	.word	0x40023800
 8008258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800825c:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <HAL_RCC_OscConfig+0x544>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d028      	beq.n	80082bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008274:	429a      	cmp	r2, r3
 8008276:	d121      	bne.n	80082bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008282:	429a      	cmp	r2, r3
 8008284:	d11a      	bne.n	80082bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800828c:	4013      	ands	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008292:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008294:	4293      	cmp	r3, r2
 8008296:	d111      	bne.n	80082bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	3b01      	subs	r3, #1
 80082a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d107      	bne.n	80082bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40023800 	.word	0x40023800

080082d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e0d0      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082e8:	4b6a      	ldr	r3, [pc, #424]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d910      	bls.n	8008318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f6:	4b67      	ldr	r3, [pc, #412]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f023 020f 	bic.w	r2, r3, #15
 80082fe:	4965      	ldr	r1, [pc, #404]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	4313      	orrs	r3, r2
 8008304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008306:	4b63      	ldr	r3, [pc, #396]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e0b8      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d020      	beq.n	8008366 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008330:	4b59      	ldr	r3, [pc, #356]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	4a58      	ldr	r2, [pc, #352]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800833a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008348:	4b53      	ldr	r3, [pc, #332]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4a52      	ldr	r2, [pc, #328]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800834e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008352:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008354:	4b50      	ldr	r3, [pc, #320]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	494d      	ldr	r1, [pc, #308]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008362:	4313      	orrs	r3, r2
 8008364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d040      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d107      	bne.n	800838a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800837a:	4b47      	ldr	r3, [pc, #284]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d115      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e07f      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d107      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008392:	4b41      	ldr	r3, [pc, #260]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d109      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e073      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e06b      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083b2:	4b39      	ldr	r3, [pc, #228]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f023 0203 	bic.w	r2, r3, #3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4936      	ldr	r1, [pc, #216]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c4:	f7f9 ffea 	bl	800239c <HAL_GetTick>
 80083c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ca:	e00a      	b.n	80083e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083cc:	f7f9 ffe6 	bl	800239c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083da:	4293      	cmp	r3, r2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e053      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 020c 	and.w	r2, r3, #12
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d1eb      	bne.n	80083cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083f4:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d210      	bcs.n	8008424 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008402:	4b24      	ldr	r3, [pc, #144]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f023 020f 	bic.w	r2, r3, #15
 800840a:	4922      	ldr	r1, [pc, #136]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	4313      	orrs	r3, r2
 8008410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008412:	4b20      	ldr	r3, [pc, #128]	@ (8008494 <HAL_RCC_ClockConfig+0x1c4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d001      	beq.n	8008424 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e032      	b.n	800848a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008430:	4b19      	ldr	r3, [pc, #100]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4916      	ldr	r1, [pc, #88]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800843e:	4313      	orrs	r3, r2
 8008440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800844e:	4b12      	ldr	r3, [pc, #72]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	490e      	ldr	r1, [pc, #56]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800845e:	4313      	orrs	r3, r2
 8008460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008462:	f000 f821 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 8008466:	4602      	mov	r2, r0
 8008468:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <HAL_RCC_ClockConfig+0x1c8>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	490a      	ldr	r1, [pc, #40]	@ (800849c <HAL_RCC_ClockConfig+0x1cc>)
 8008474:	5ccb      	ldrb	r3, [r1, r3]
 8008476:	fa22 f303 	lsr.w	r3, r2, r3
 800847a:	4a09      	ldr	r2, [pc, #36]	@ (80084a0 <HAL_RCC_ClockConfig+0x1d0>)
 800847c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800847e:	4b09      	ldr	r3, [pc, #36]	@ (80084a4 <HAL_RCC_ClockConfig+0x1d4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f7f9 fc04 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40023c00 	.word	0x40023c00
 8008498:	40023800 	.word	0x40023800
 800849c:	08021968 	.word	0x08021968
 80084a0:	20000000 	.word	0x20000000
 80084a4:	20000004 	.word	0x20000004

080084a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ac:	b094      	sub	sp, #80	@ 0x50
 80084ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b4:	2300      	movs	r3, #0
 80084b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b8:	2300      	movs	r3, #0
 80084ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084c0:	4b79      	ldr	r3, [pc, #484]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 030c 	and.w	r3, r3, #12
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d00d      	beq.n	80084e8 <HAL_RCC_GetSysClockFreq+0x40>
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	f200 80e1 	bhi.w	8008694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_RCC_GetSysClockFreq+0x34>
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d003      	beq.n	80084e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80084da:	e0db      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084dc:	4b73      	ldr	r3, [pc, #460]	@ (80086ac <HAL_RCC_GetSysClockFreq+0x204>)
 80084de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084e0:	e0db      	b.n	800869a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084e2:	4b73      	ldr	r3, [pc, #460]	@ (80086b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80084e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084e6:	e0d8      	b.n	800869a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084e8:	4b6f      	ldr	r3, [pc, #444]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80084f2:	4b6d      	ldr	r3, [pc, #436]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d063      	beq.n	80085c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084fe:	4b6a      	ldr	r3, [pc, #424]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	099b      	lsrs	r3, r3, #6
 8008504:	2200      	movs	r2, #0
 8008506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008510:	633b      	str	r3, [r7, #48]	@ 0x30
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	f04f 0000 	mov.w	r0, #0
 8008522:	f04f 0100 	mov.w	r1, #0
 8008526:	0159      	lsls	r1, r3, #5
 8008528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800852c:	0150      	lsls	r0, r2, #5
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4621      	mov	r1, r4
 8008534:	1a51      	subs	r1, r2, r1
 8008536:	6139      	str	r1, [r7, #16]
 8008538:	4629      	mov	r1, r5
 800853a:	eb63 0301 	sbc.w	r3, r3, r1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800854c:	4659      	mov	r1, fp
 800854e:	018b      	lsls	r3, r1, #6
 8008550:	4651      	mov	r1, sl
 8008552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008556:	4651      	mov	r1, sl
 8008558:	018a      	lsls	r2, r1, #6
 800855a:	4651      	mov	r1, sl
 800855c:	ebb2 0801 	subs.w	r8, r2, r1
 8008560:	4659      	mov	r1, fp
 8008562:	eb63 0901 	sbc.w	r9, r3, r1
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800857a:	4690      	mov	r8, r2
 800857c:	4699      	mov	r9, r3
 800857e:	4623      	mov	r3, r4
 8008580:	eb18 0303 	adds.w	r3, r8, r3
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	462b      	mov	r3, r5
 8008588:	eb49 0303 	adc.w	r3, r9, r3
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800859a:	4629      	mov	r1, r5
 800859c:	024b      	lsls	r3, r1, #9
 800859e:	4621      	mov	r1, r4
 80085a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80085a4:	4621      	mov	r1, r4
 80085a6:	024a      	lsls	r2, r1, #9
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ae:	2200      	movs	r2, #0
 80085b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085b8:	f7f7 fe7a 	bl	80002b0 <__aeabi_uldivmod>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4613      	mov	r3, r2
 80085c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085c4:	e058      	b.n	8008678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085c6:	4b38      	ldr	r3, [pc, #224]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	099b      	lsrs	r3, r3, #6
 80085cc:	2200      	movs	r2, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	4611      	mov	r1, r2
 80085d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085d6:	623b      	str	r3, [r7, #32]
 80085d8:	2300      	movs	r3, #0
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
 80085dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	f04f 0000 	mov.w	r0, #0
 80085e8:	f04f 0100 	mov.w	r1, #0
 80085ec:	0159      	lsls	r1, r3, #5
 80085ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085f2:	0150      	lsls	r0, r2, #5
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4641      	mov	r1, r8
 80085fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80085fe:	4649      	mov	r1, r9
 8008600:	eb63 0b01 	sbc.w	fp, r3, r1
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008618:	ebb2 040a 	subs.w	r4, r2, sl
 800861c:	eb63 050b 	sbc.w	r5, r3, fp
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	00eb      	lsls	r3, r5, #3
 800862a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800862e:	00e2      	lsls	r2, r4, #3
 8008630:	4614      	mov	r4, r2
 8008632:	461d      	mov	r5, r3
 8008634:	4643      	mov	r3, r8
 8008636:	18e3      	adds	r3, r4, r3
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	464b      	mov	r3, r9
 800863c:	eb45 0303 	adc.w	r3, r5, r3
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800864e:	4629      	mov	r1, r5
 8008650:	028b      	lsls	r3, r1, #10
 8008652:	4621      	mov	r1, r4
 8008654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008658:	4621      	mov	r1, r4
 800865a:	028a      	lsls	r2, r1, #10
 800865c:	4610      	mov	r0, r2
 800865e:	4619      	mov	r1, r3
 8008660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008662:	2200      	movs	r2, #0
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	61fa      	str	r2, [r7, #28]
 8008668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800866c:	f7f7 fe20 	bl	80002b0 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4613      	mov	r3, r2
 8008676:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008678:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	3301      	adds	r3, #1
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800868a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800868c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008692:	e002      	b.n	800869a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <HAL_RCC_GetSysClockFreq+0x204>)
 8008696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800869a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800869c:	4618      	mov	r0, r3
 800869e:	3750      	adds	r7, #80	@ 0x50
 80086a0:	46bd      	mov	sp, r7
 80086a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a6:	bf00      	nop
 80086a8:	40023800 	.word	0x40023800
 80086ac:	00f42400 	.word	0x00f42400
 80086b0:	007a1200 	.word	0x007a1200

080086b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086b8:	4b03      	ldr	r3, [pc, #12]	@ (80086c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80086ba:	681b      	ldr	r3, [r3, #0]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000000 	.word	0x20000000

080086cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80086d0:	f7ff fff0 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	0a9b      	lsrs	r3, r3, #10
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	4903      	ldr	r1, [pc, #12]	@ (80086f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086e2:	5ccb      	ldrb	r3, [r1, r3]
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40023800 	.word	0x40023800
 80086f0:	08021978 	.word	0x08021978

080086f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086f8:	f7ff ffdc 	bl	80086b4 <HAL_RCC_GetHCLKFreq>
 80086fc:	4602      	mov	r2, r0
 80086fe:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	0b5b      	lsrs	r3, r3, #13
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	4903      	ldr	r1, [pc, #12]	@ (8008718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800870a:	5ccb      	ldrb	r3, [r1, r3]
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008710:	4618      	mov	r0, r3
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40023800 	.word	0x40023800
 8008718:	08021978 	.word	0x08021978

0800871c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	220f      	movs	r2, #15
 800872a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800872c:	4b12      	ldr	r3, [pc, #72]	@ (8008778 <HAL_RCC_GetClockConfig+0x5c>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0203 	and.w	r2, r3, #3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008738:	4b0f      	ldr	r3, [pc, #60]	@ (8008778 <HAL_RCC_GetClockConfig+0x5c>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008744:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <HAL_RCC_GetClockConfig+0x5c>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008750:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <HAL_RCC_GetClockConfig+0x5c>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	08db      	lsrs	r3, r3, #3
 8008756:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800875e:	4b07      	ldr	r3, [pc, #28]	@ (800877c <HAL_RCC_GetClockConfig+0x60>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800
 800877c:	40023c00 	.word	0x40023c00

08008780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d012      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087a8:	4b69      	ldr	r3, [pc, #420]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4a68      	ldr	r2, [pc, #416]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087b2:	6093      	str	r3, [r2, #8]
 80087b4:	4b66      	ldr	r3, [pc, #408]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087bc:	4964      	ldr	r1, [pc, #400]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80087ca:	2301      	movs	r3, #1
 80087cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087da:	4b5d      	ldr	r3, [pc, #372]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e8:	4959      	ldr	r1, [pc, #356]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087f8:	d101      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80087fa:	2301      	movs	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008806:	2301      	movs	r3, #1
 8008808:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008816:	4b4e      	ldr	r3, [pc, #312]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008824:	494a      	ldr	r1, [pc, #296]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008834:	d101      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008842:	2301      	movs	r3, #1
 8008844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 808b 	beq.w	800897a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008864:	4b3a      	ldr	r3, [pc, #232]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008868:	4a39      	ldr	r2, [pc, #228]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800886a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800886e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008870:	4b37      	ldr	r3, [pc, #220]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800887c:	4b35      	ldr	r3, [pc, #212]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a34      	ldr	r2, [pc, #208]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008888:	f7f9 fd88 	bl	800239c <HAL_GetTick>
 800888c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800888e:	e008      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008890:	f7f9 fd84 	bl	800239c <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b64      	cmp	r3, #100	@ 0x64
 800889c:	d901      	bls.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e357      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80088a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088ae:	4b28      	ldr	r3, [pc, #160]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d035      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d02e      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088cc:	4b20      	ldr	r3, [pc, #128]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088da:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80088ee:	4a18      	ldr	r2, [pc, #96]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80088f4:	4b16      	ldr	r3, [pc, #88]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d114      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008900:	f7f9 fd4c 	bl	800239c <HAL_GetTick>
 8008904:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008906:	e00a      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008908:	f7f9 fd48 	bl	800239c <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008916:	4293      	cmp	r3, r2
 8008918:	d901      	bls.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e319      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800891e:	4b0c      	ldr	r3, [pc, #48]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0ee      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008936:	d111      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008946:	400b      	ands	r3, r1
 8008948:	4901      	ldr	r1, [pc, #4]	@ (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800894a:	4313      	orrs	r3, r2
 800894c:	608b      	str	r3, [r1, #8]
 800894e:	e00b      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008950:	40023800 	.word	0x40023800
 8008954:	40007000 	.word	0x40007000
 8008958:	0ffffcff 	.word	0x0ffffcff
 800895c:	4baa      	ldr	r3, [pc, #680]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	4aa9      	ldr	r2, [pc, #676]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008962:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008966:	6093      	str	r3, [r2, #8]
 8008968:	4ba7      	ldr	r3, [pc, #668]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800896a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008974:	49a4      	ldr	r1, [pc, #656]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008976:	4313      	orrs	r3, r2
 8008978:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008986:	4ba0      	ldr	r3, [pc, #640]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800898c:	4a9e      	ldr	r2, [pc, #632]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800898e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008992:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008996:	4b9c      	ldr	r3, [pc, #624]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008998:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a0:	4999      	ldr	r1, [pc, #612]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089b4:	4b94      	ldr	r3, [pc, #592]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089c2:	4991      	ldr	r1, [pc, #580]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089d6:	4b8c      	ldr	r3, [pc, #560]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089e4:	4988      	ldr	r1, [pc, #544]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80089f8:	4b83      	ldr	r3, [pc, #524]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a06:	4980      	ldr	r1, [pc, #512]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a28:	4977      	ldr	r1, [pc, #476]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a3c:	4b72      	ldr	r3, [pc, #456]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a42:	f023 0203 	bic.w	r2, r3, #3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4a:	496f      	ldr	r1, [pc, #444]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a64:	f023 020c 	bic.w	r2, r3, #12
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a6c:	4966      	ldr	r1, [pc, #408]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a80:	4b61      	ldr	r3, [pc, #388]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a8e:	495e      	ldr	r1, [pc, #376]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008aa2:	4b59      	ldr	r3, [pc, #356]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab0:	4955      	ldr	r1, [pc, #340]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ac4:	4b50      	ldr	r3, [pc, #320]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad2:	494d      	ldr	r1, [pc, #308]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008ae6:	4b48      	ldr	r3, [pc, #288]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af4:	4944      	ldr	r1, [pc, #272]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008b08:	4b3f      	ldr	r3, [pc, #252]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b16:	493c      	ldr	r1, [pc, #240]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008b2a:	4b37      	ldr	r3, [pc, #220]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b38:	4933      	ldr	r1, [pc, #204]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b5a:	492b      	ldr	r1, [pc, #172]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d011      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b6e:	4b26      	ldr	r3, [pc, #152]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b7c:	4922      	ldr	r1, [pc, #136]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b8c:	d101      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00a      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bae:	4b16      	ldr	r3, [pc, #88]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bbc:	4912      	ldr	r1, [pc, #72]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be0:	4909      	ldr	r1, [pc, #36]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d006      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80d9 	beq.w	8008dae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a01      	ldr	r2, [pc, #4]	@ (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c06:	e001      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008c08:	40023800 	.word	0x40023800
 8008c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c0e:	f7f9 fbc5 	bl	800239c <HAL_GetTick>
 8008c12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c14:	e008      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008c16:	f7f9 fbc1 	bl	800239c <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b64      	cmp	r3, #100	@ 0x64
 8008c22:	d901      	bls.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e194      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c28:	4b6c      	ldr	r3, [pc, #432]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1f0      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d021      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11d      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c48:	4b64      	ldr	r3, [pc, #400]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4e:	0c1b      	lsrs	r3, r3, #16
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c56:	4b61      	ldr	r3, [pc, #388]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c5c:	0e1b      	lsrs	r3, r3, #24
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	019a      	lsls	r2, r3, #6
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	041b      	lsls	r3, r3, #16
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	061b      	lsls	r3, r3, #24
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	071b      	lsls	r3, r3, #28
 8008c7c:	4957      	ldr	r1, [pc, #348]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c98:	d00a      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d02e      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cae:	d129      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cb6:	0c1b      	lsrs	r3, r3, #16
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008cbe:	4b47      	ldr	r3, [pc, #284]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc4:	0f1b      	lsrs	r3, r3, #28
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	019a      	lsls	r2, r3, #6
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	041b      	lsls	r3, r3, #16
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	061b      	lsls	r3, r3, #24
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	071b      	lsls	r3, r3, #28
 8008ce4:	493d      	ldr	r1, [pc, #244]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008cec:	4b3b      	ldr	r3, [pc, #236]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cf2:	f023 021f 	bic.w	r2, r3, #31
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	4937      	ldr	r1, [pc, #220]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01d      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d10:	4b32      	ldr	r3, [pc, #200]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d16:	0e1b      	lsrs	r3, r3, #24
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d24:	0f1b      	lsrs	r3, r3, #28
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	019a      	lsls	r2, r3, #6
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	061b      	lsls	r3, r3, #24
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	071b      	lsls	r3, r3, #28
 8008d44:	4925      	ldr	r1, [pc, #148]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d011      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	019a      	lsls	r2, r3, #6
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	061b      	lsls	r3, r3, #24
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	071b      	lsls	r3, r3, #28
 8008d74:	4919      	ldr	r1, [pc, #100]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008d7c:	4b17      	ldr	r3, [pc, #92]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a16      	ldr	r2, [pc, #88]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d88:	f7f9 fb08 	bl	800239c <HAL_GetTick>
 8008d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d90:	f7f9 fb04 	bl	800239c <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b64      	cmp	r3, #100	@ 0x64
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e0d7      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008da2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f0      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	f040 80cd 	bne.w	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008db6:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc2:	f7f9 faeb 	bl	800239c <HAL_GetTick>
 8008dc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008dc8:	e00a      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008dca:	f7f9 fae7 	bl	800239c <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b64      	cmp	r3, #100	@ 0x64
 8008dd6:	d903      	bls.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e0ba      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008ddc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008de0:	4b5e      	ldr	r3, [pc, #376]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dec:	d0ed      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d02e      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d12a      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e16:	4b51      	ldr	r3, [pc, #324]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e1c:	0c1b      	lsrs	r3, r3, #16
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e24:	4b4d      	ldr	r3, [pc, #308]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	019a      	lsls	r2, r3, #6
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	061b      	lsls	r3, r3, #24
 8008e44:	431a      	orrs	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	071b      	lsls	r3, r3, #28
 8008e4a:	4944      	ldr	r1, [pc, #272]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e52:	4b42      	ldr	r3, [pc, #264]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	3b01      	subs	r3, #1
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	493d      	ldr	r1, [pc, #244]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d022      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e80:	d11d      	bne.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e82:	4b36      	ldr	r3, [pc, #216]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e88:	0e1b      	lsrs	r3, r3, #24
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e90:	4b32      	ldr	r3, [pc, #200]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e96:	0f1b      	lsrs	r3, r3, #28
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	019a      	lsls	r2, r3, #6
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	061b      	lsls	r3, r3, #24
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	071b      	lsls	r3, r3, #28
 8008eb6:	4929      	ldr	r1, [pc, #164]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d028      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008eca:	4b24      	ldr	r3, [pc, #144]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ed8:	4b20      	ldr	r3, [pc, #128]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	019a      	lsls	r2, r3, #6
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	071b      	lsls	r3, r3, #28
 8008efe:	4917      	ldr	r1, [pc, #92]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008f06:	4b15      	ldr	r3, [pc, #84]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	4911      	ldr	r1, [pc, #68]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0e      	ldr	r2, [pc, #56]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f28:	f7f9 fa38 	bl	800239c <HAL_GetTick>
 8008f2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008f30:	f7f9 fa34 	bl	800239c <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b64      	cmp	r3, #100	@ 0x64
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e007      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f42:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f4e:	d1ef      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40023800 	.word	0x40023800

08008f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e09d      	b.n	80090ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d108      	bne.n	8008f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f82:	d009      	beq.n	8008f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	61da      	str	r2, [r3, #28]
 8008f8a:	e005      	b.n	8008f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7f8 fbec 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fd8:	d902      	bls.n	8008fe0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e002      	b.n	8008fe6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fe4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008fee:	d007      	beq.n	8009000 <HAL_SPI_Init+0xa0>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ff8:	d002      	beq.n	8009000 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009042:	ea42 0103 	orr.w	r1, r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	0c1b      	lsrs	r3, r3, #16
 800905c:	f003 0204 	and.w	r2, r3, #4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800907c:	ea42 0103 	orr.w	r1, r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800909c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	603b      	str	r3, [r7, #0]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090c6:	f7f9 f969 	bl	800239c <HAL_GetTick>
 80090ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d001      	beq.n	80090e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80090dc:	2302      	movs	r3, #2
 80090de:	e15c      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_SPI_Transmit+0x36>
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e154      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_SPI_Transmit+0x48>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e14d      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2203      	movs	r2, #3
 800910a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	88fa      	ldrh	r2, [r7, #6]
 800911e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	88fa      	ldrh	r2, [r7, #6]
 8009124:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009150:	d10f      	bne.n	8009172 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009170:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b40      	cmp	r3, #64	@ 0x40
 800917e:	d007      	beq.n	8009190 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800918e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009198:	d952      	bls.n	8009240 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <HAL_SPI_Transmit+0xf2>
 80091a2:	8b7b      	ldrh	r3, [r7, #26]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d145      	bne.n	8009234 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091cc:	e032      	b.n	8009234 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d112      	bne.n	8009202 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e0:	881a      	ldrh	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ec:	1c9a      	adds	r2, r3, #2
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009200:	e018      	b.n	8009234 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009202:	f7f9 f8cb 	bl	800239c <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d803      	bhi.n	800921a <HAL_SPI_Transmit+0x164>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d102      	bne.n	8009220 <HAL_SPI_Transmit+0x16a>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e0b2      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1c7      	bne.n	80091ce <HAL_SPI_Transmit+0x118>
 800923e:	e083      	b.n	8009348 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_SPI_Transmit+0x198>
 8009248:	8b7b      	ldrh	r3, [r7, #26]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d177      	bne.n	800933e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	d912      	bls.n	800927e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	881a      	ldrh	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009268:	1c9a      	adds	r2, r3, #2
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b02      	subs	r3, #2
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800927c:	e05f      	b.n	800933e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	7812      	ldrb	r2, [r2, #0]
 800928a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800929a:	b29b      	uxth	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80092a4:	e04b      	b.n	800933e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d12b      	bne.n	800930c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d912      	bls.n	80092e4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	881a      	ldrh	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	1c9a      	adds	r2, r3, #2
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b02      	subs	r3, #2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092e2:	e02c      	b.n	800933e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800930a:	e018      	b.n	800933e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800930c:	f7f9 f846 	bl	800239c <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d803      	bhi.n	8009324 <HAL_SPI_Transmit+0x26e>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009322:	d102      	bne.n	800932a <HAL_SPI_Transmit+0x274>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e02d      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ae      	bne.n	80092a6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 ff7d 	bl	800a24c <SPI_EndRxTxTransaction>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2220      	movs	r2, #32
 800935c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009398:	2300      	movs	r3, #0
  }
}
 800939a:	4618      	mov	r0, r3
 800939c:	3720      	adds	r7, #32
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d001      	beq.n	80093c2 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80093be:	2302      	movs	r3, #2
 80093c0:	e092      	b.n	80094e8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_SPI_Receive_IT+0x2a>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e08a      	b.n	80094e8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d110      	bne.n	80093fc <HAL_SPI_Receive_IT+0x58>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093e2:	d10b      	bne.n	80093fc <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2204      	movs	r2, #4
 80093e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 f880 	bl	80094f8 <HAL_SPI_TransmitReceive_IT>
 80093f8:	4603      	mov	r3, r0
 80093fa:	e075      	b.n	80094e8 <HAL_SPI_Receive_IT+0x144>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009402:	2b01      	cmp	r3, #1
 8009404:	d101      	bne.n	800940a <HAL_SPI_Receive_IT+0x66>
 8009406:	2302      	movs	r3, #2
 8009408:	e06e      	b.n	80094e8 <HAL_SPI_Receive_IT+0x144>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2204      	movs	r2, #4
 8009416:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	88fa      	ldrh	r2, [r7, #6]
 800942a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	88fa      	ldrh	r2, [r7, #6]
 8009432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009456:	d90b      	bls.n	8009470 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009466:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4a21      	ldr	r2, [pc, #132]	@ (80094f0 <HAL_SPI_Receive_IT+0x14c>)
 800946c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800946e:	e00a      	b.n	8009486 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800947e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4a1c      	ldr	r2, [pc, #112]	@ (80094f4 <HAL_SPI_Receive_IT+0x150>)
 8009484:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800948e:	d10f      	bne.n	80094b0 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800949e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094ae:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ba:	2b40      	cmp	r3, #64	@ 0x40
 80094bc:	d007      	beq.n	80094ce <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80094e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	08009ecd 	.word	0x08009ecd
 80094f4:	08009e7d 	.word	0x08009e7d

080094f8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800950c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d00c      	beq.n	8009534 <HAL_SPI_TransmitReceive_IT+0x3c>
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009520:	d106      	bne.n	8009530 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <HAL_SPI_TransmitReceive_IT+0x38>
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b04      	cmp	r3, #4
 800952e:	d001      	beq.n	8009534 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009530:	2302      	movs	r3, #2
 8009532:	e07d      	b.n	8009630 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <HAL_SPI_TransmitReceive_IT+0x4e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <HAL_SPI_TransmitReceive_IT+0x4e>
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e072      	b.n	8009630 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_SPI_TransmitReceive_IT+0x60>
 8009554:	2302      	movs	r3, #2
 8009556:	e06b      	b.n	8009630 <HAL_SPI_TransmitReceive_IT+0x138>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b04      	cmp	r3, #4
 800956a:	d003      	beq.n	8009574 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2205      	movs	r2, #5
 8009570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	887a      	ldrh	r2, [r7, #2]
 8009584:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	887a      	ldrh	r2, [r7, #2]
 800958a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	887a      	ldrh	r2, [r7, #2]
 8009596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	887a      	ldrh	r2, [r7, #2]
 800959e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095aa:	d906      	bls.n	80095ba <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a23      	ldr	r2, [pc, #140]	@ (800963c <HAL_SPI_TransmitReceive_IT+0x144>)
 80095b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a22      	ldr	r2, [pc, #136]	@ (8009640 <HAL_SPI_TransmitReceive_IT+0x148>)
 80095b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80095b8:	e005      	b.n	80095c6 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4a21      	ldr	r2, [pc, #132]	@ (8009644 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80095be:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a21      	ldr	r2, [pc, #132]	@ (8009648 <HAL_SPI_TransmitReceive_IT+0x150>)
 80095c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095ce:	d802      	bhi.n	80095d6 <HAL_SPI_TransmitReceive_IT+0xde>
 80095d0:	887b      	ldrh	r3, [r7, #2]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d908      	bls.n	80095e8 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	e007      	b.n	80095f8 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095f6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009602:	2b40      	cmp	r3, #64	@ 0x40
 8009604:	d007      	beq.n	8009616 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009614:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800962c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	08009db7 	.word	0x08009db7
 8009640:	08009e1d 	.word	0x08009e1d
 8009644:	08009c67 	.word	0x08009c67
 8009648:	08009d25 	.word	0x08009d25

0800964c <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8009658:	2301      	movs	r3, #1
 800965a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800965c:	4b72      	ldr	r3, [pc, #456]	@ (8009828 <HAL_SPI_Abort_IT+0x1dc>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a72      	ldr	r2, [pc, #456]	@ (800982c <HAL_SPI_Abort_IT+0x1e0>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	0a5b      	lsrs	r3, r3, #9
 8009668:	2264      	movs	r2, #100	@ 0x64
 800966a:	fb02 f303 	mul.w	r3, r2, r3
 800966e:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0220 	bic.w	r2, r2, #32
 8009682:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968e:	2b80      	cmp	r3, #128	@ 0x80
 8009690:	d117      	bne.n	80096c2 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a66      	ldr	r2, [pc, #408]	@ (8009830 <HAL_SPI_Abort_IT+0x1e4>)
 8009696:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80096aa:	e008      	b.n	80096be <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b07      	cmp	r3, #7
 80096bc:	d1ec      	bne.n	8009698 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	d117      	bne.n	8009700 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a58      	ldr	r2, [pc, #352]	@ (8009834 <HAL_SPI_Abort_IT+0x1e8>)
 80096d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80096e8:	e008      	b.n	80096fc <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b07      	cmp	r3, #7
 80096fa:	d1ec      	bne.n	80096d6 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00f      	beq.n	8009728 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d104      	bne.n	8009720 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971a:	4a47      	ldr	r2, [pc, #284]	@ (8009838 <HAL_SPI_Abort_IT+0x1ec>)
 800971c:	651a      	str	r2, [r3, #80]	@ 0x50
 800971e:	e003      	b.n	8009728 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009724:	2200      	movs	r2, #0
 8009726:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00f      	beq.n	8009750 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b01      	cmp	r3, #1
 800973c:	d104      	bne.n	8009748 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009742:	4a3e      	ldr	r2, [pc, #248]	@ (800983c <HAL_SPI_Abort_IT+0x1f0>)
 8009744:	651a      	str	r2, [r3, #80]	@ 0x50
 8009746:	e003      	b.n	8009750 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974c:	2200      	movs	r2, #0
 800974e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b02      	cmp	r3, #2
 800975c:	d115      	bne.n	800978a <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009762:	2b00      	cmp	r3, #0
 8009764:	d011      	beq.n	800978a <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	4618      	mov	r0, r3
 800976c:	f7fa f986 	bl	8003a7c <HAL_DMA_Abort_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d007      	beq.n	8009786 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977a:	2200      	movs	r2, #0
 800977c:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2240      	movs	r2, #64	@ 0x40
 8009782:	661a      	str	r2, [r3, #96]	@ 0x60
 8009784:	e001      	b.n	800978a <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b01      	cmp	r3, #1
 8009796:	d115      	bne.n	80097c4 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fa f969 	bl	8003a7c <HAL_DMA_Abort_IT>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b4:	2200      	movs	r2, #0
 80097b6:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2240      	movs	r2, #64	@ 0x40
 80097bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80097be:	e001      	b.n	80097c4 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d129      	bne.n	800981e <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->TxXferCount = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097dc:	2b40      	cmp	r3, #64	@ 0x40
 80097de:	d102      	bne.n	80097e6 <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	77fb      	strb	r3, [r7, #31]
 80097e4:	e002      	b.n	80097ec <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f925 	bl	8009a68 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800981e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000000 	.word	0x20000000
 800982c:	057619f1 	.word	0x057619f1
 8009830:	0800a4c5 	.word	0x0800a4c5
 8009834:	0800a405 	.word	0x0800a405
 8009838:	08009aa7 	.word	0x08009aa7
 800983c:	08009b85 	.word	0x08009b85

08009840 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	099b      	lsrs	r3, r3, #6
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10f      	bne.n	8009884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	4798      	blx	r3
    return;
 8009882:	e0d7      	b.n	8009a34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <HAL_SPI_IRQHandler+0x66>
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	09db      	lsrs	r3, r3, #7
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
    return;
 80098a4:	e0c6      	b.n	8009a34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	095b      	lsrs	r3, r3, #5
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <HAL_SPI_IRQHandler+0x8c>
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	099b      	lsrs	r3, r3, #6
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 80b4 	beq.w	8009a34 <HAL_SPI_IRQHandler+0x1f4>
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80ad 	beq.w	8009a34 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	099b      	lsrs	r3, r3, #6
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d023      	beq.n	800992e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d011      	beq.n	8009916 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f6:	f043 0204 	orr.w	r2, r3, #4
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	e00b      	b.n	800992e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	693b      	ldr	r3, [r7, #16]
        return;
 800992c:	e082      	b.n	8009a34 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	095b      	lsrs	r3, r3, #5
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d014      	beq.n	8009964 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993e:	f043 0201 	orr.w	r2, r3, #1
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	0a1b      	lsrs	r3, r3, #8
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00c      	beq.n	800998a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009974:	f043 0208 	orr.w	r2, r3, #8
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800997c:	2300      	movs	r3, #0
 800997e:	60bb      	str	r3, [r7, #8]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998e:	2b00      	cmp	r3, #0
 8009990:	d04f      	beq.n	8009a32 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <HAL_SPI_IRQHandler+0x17e>
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d034      	beq.n	8009a28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0203 	bic.w	r2, r2, #3
 80099cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d011      	beq.n	80099fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099da:	4a18      	ldr	r2, [pc, #96]	@ (8009a3c <HAL_SPI_IRQHandler+0x1fc>)
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fa f84a 	bl	8003a7c <HAL_DMA_Abort_IT>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a06:	4a0d      	ldr	r2, [pc, #52]	@ (8009a3c <HAL_SPI_IRQHandler+0x1fc>)
 8009a08:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fa f834 	bl	8003a7c <HAL_DMA_Abort_IT>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009a26:	e003      	b.n	8009a30 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f813 	bl	8009a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a2e:	e000      	b.n	8009a32 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009a30:	bf00      	nop
    return;
 8009a32:	bf00      	nop
  }
}
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	08009a7d 	.word	0x08009a7d

08009a40 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff ffdb 	bl	8009a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b088      	sub	sp, #32
 8009aaa:	af02      	add	r7, sp, #8
 8009aac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab2:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab8:	2200      	movs	r2, #0
 8009aba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0202 	bic.w	r2, r2, #2
 8009aca:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009acc:	f7f8 fc66 	bl	800239c <HAL_GetTick>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	2164      	movs	r1, #100	@ 0x64
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	f000 fbb8 	bl	800a24c <SPI_EndRxTxTransaction>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2240      	movs	r2, #64	@ 0x40
 8009ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009af6:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009af8:	f7f8 fc50 	bl	800239c <HAL_GetTick>
 8009afc:	4603      	mov	r3, r0
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	2364      	movs	r3, #100	@ 0x64
 8009b02:	2200      	movs	r2, #0
 8009b04:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f000 fa8d 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <SPI_DMATxAbortCallback+0x74>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2240      	movs	r2, #64	@ 0x40
 8009b18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d127      	bne.n	8009b7c <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2200      	movs	r2, #0
 8009b38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b3e:	2b40      	cmp	r3, #64	@ 0x40
 8009b40:	d002      	beq.n	8009b48 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2200      	movs	r2, #0
 8009b46:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009b74:	6978      	ldr	r0, [r7, #20]
 8009b76:	f7ff ff77 	bl	8009a68 <HAL_SPI_AbortCpltCallback>
 8009b7a:	e000      	b.n	8009b7e <SPI_DMATxAbortCallback+0xd8>
      return;
 8009b7c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b90:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ba0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0201 	bic.w	r2, r2, #1
 8009bb8:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009bba:	f7f8 fbef 	bl	800239c <HAL_GetTick>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	2364      	movs	r3, #100	@ 0x64
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2180      	movs	r1, #128	@ 0x80
 8009bc8:	6978      	ldr	r0, [r7, #20]
 8009bca:	f000 f9a5 	bl	8009f18 <SPI_WaitFlagStateUntilTimeout>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2240      	movs	r2, #64	@ 0x40
 8009bd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009bda:	f7f8 fbdf 	bl	800239c <HAL_GetTick>
 8009bde:	4603      	mov	r3, r0
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	2364      	movs	r3, #100	@ 0x64
 8009be4:	2200      	movs	r2, #0
 8009be6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bea:	6978      	ldr	r0, [r7, #20]
 8009bec:	f000 fa1c 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <SPI_DMARxAbortCallback+0x78>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2240      	movs	r2, #64	@ 0x40
 8009bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d127      	bne.n	8009c5e <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d002      	beq.n	8009c2a <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2200      	movs	r2, #0
 8009c28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	f7ff ff06 	bl	8009a68 <HAL_SPI_AbortCpltCallback>
 8009c5c:	e000      	b.n	8009c60 <SPI_DMARxAbortCallback+0xdc>
      return;
 8009c5e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d923      	bls.n	8009cc2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c84:	b292      	uxth	r2, r2
 8009c86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8c:	1c9a      	adds	r2, r3, #2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3b02      	subs	r3, #2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d11f      	bne.n	8009cf0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cbe:	605a      	str	r2, [r3, #4]
 8009cc0:	e016      	b.n	8009cf0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f103 020c 	add.w	r2, r3, #12
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cce:	7812      	ldrb	r2, [r2, #0]
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10f      	bne.n	8009d1c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009d0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fb02 	bl	800a320 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d912      	bls.n	8009d5c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3a:	881a      	ldrh	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d46:	1c9a      	adds	r2, r3, #2
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b02      	subs	r3, #2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d5a:	e012      	b.n	8009d82 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	7812      	ldrb	r2, [r2, #0]
 8009d68:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d110      	bne.n	8009dae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d9a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fab9 	bl	800a320 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc8:	b292      	uxth	r2, r2
 8009dca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd0:	1c9a      	adds	r2, r3, #2
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa86 	bl	800a320 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e28:	881a      	ldrh	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e34:	1c9a      	adds	r2, r3, #2
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3b01      	subs	r3, #1
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d110      	bne.n	8009e74 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e60:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fa56 	bl	800a320 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f103 020c 	add.w	r2, r3, #12
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e90:	7812      	ldrb	r2, [r2, #0]
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa70 	bl	800a3a4 <SPI_CloseRx_ISR>
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ede:	b292      	uxth	r2, r2
 8009ee0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee6:	1c9a      	adds	r2, r3, #2
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa4a 	bl	800a3a4 <SPI_CloseRx_ISR>
  }
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f28:	f7f8 fa38 	bl	800239c <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f30:	1a9b      	subs	r3, r3, r2
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	4413      	add	r3, r2
 8009f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f38:	f7f8 fa30 	bl	800239c <HAL_GetTick>
 8009f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f3e:	4b39      	ldr	r3, [pc, #228]	@ (800a024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	015b      	lsls	r3, r3, #5
 8009f44:	0d1b      	lsrs	r3, r3, #20
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	fb02 f303 	mul.w	r3, r2, r3
 8009f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f4e:	e055      	b.n	8009ffc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f56:	d051      	beq.n	8009ffc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f58:	f7f8 fa20 	bl	800239c <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d902      	bls.n	8009f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d13d      	bne.n	8009fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f86:	d111      	bne.n	8009fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f90:	d004      	beq.n	8009f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f9a:	d107      	bne.n	8009fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb4:	d10f      	bne.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e018      	b.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d102      	bne.n	8009ff6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	e002      	b.n	8009ffc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4013      	ands	r3, r2
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	429a      	cmp	r2, r3
 800a018:	d19a      	bne.n	8009f50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000000 	.word	0x20000000

0800a028 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	@ 0x28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a03a:	f7f8 f9af 	bl	800239c <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	4413      	add	r3, r2
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a04a:	f7f8 f9a7 	bl	800239c <HAL_GetTick>
 800a04e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a058:	4b3d      	ldr	r3, [pc, #244]	@ (800a150 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	00da      	lsls	r2, r3, #3
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	0d1b      	lsrs	r3, r3, #20
 800a068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a070:	e061      	b.n	800a136 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a078:	d107      	bne.n	800a08a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d104      	bne.n	800a08a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a088:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a090:	d051      	beq.n	800a136 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a092:	f7f8 f983 	bl	800239c <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d902      	bls.n	800a0a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d13d      	bne.n	800a124 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a0b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c0:	d111      	bne.n	800a0e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ca:	d004      	beq.n	800a0d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d4:	d107      	bne.n	800a0e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0ee:	d10f      	bne.n	800a110 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a10e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e011      	b.n	800a148 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a12e:	e002      	b.n	800a136 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	3b01      	subs	r3, #1
 800a134:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4013      	ands	r3, r2
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d195      	bne.n	800a072 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3728      	adds	r7, #40	@ 0x28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000000 	.word	0x20000000

0800a154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a168:	d111      	bne.n	800a18e <SPI_EndRxTransaction+0x3a>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a172:	d004      	beq.n	800a17e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a17c:	d107      	bne.n	800a18e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a18c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a196:	d112      	bne.n	800a1be <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2180      	movs	r1, #128	@ 0x80
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff feb8 	bl	8009f18 <SPI_WaitFlagStateUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d021      	beq.n	800a1f2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b2:	f043 0220 	orr.w	r2, r3, #32
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e03d      	b.n	800a23a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1be:	4b21      	ldr	r3, [pc, #132]	@ (800a244 <SPI_EndRxTransaction+0xf0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a21      	ldr	r2, [pc, #132]	@ (800a248 <SPI_EndRxTransaction+0xf4>)
 800a1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c8:	0d5b      	lsrs	r3, r3, #21
 800a1ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1ce:	fb02 f303 	mul.w	r3, r2, r3
 800a1d2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ea:	2b80      	cmp	r3, #128	@ 0x80
 800a1ec:	d0f2      	beq.n	800a1d4 <SPI_EndRxTransaction+0x80>
 800a1ee:	e000      	b.n	800a1f2 <SPI_EndRxTransaction+0x9e>
        break;
 800a1f0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1fa:	d11d      	bne.n	800a238 <SPI_EndRxTransaction+0xe4>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a204:	d004      	beq.n	800a210 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20e:	d113      	bne.n	800a238 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff ff03 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d007      	beq.n	800a238 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a22c:	f043 0220 	orr.w	r2, r3, #32
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e000      	b.n	800a23a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000000 	.word	0x20000000
 800a248:	165e9f81 	.word	0x165e9f81

0800a24c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af02      	add	r7, sp, #8
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2200      	movs	r2, #0
 800a260:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff fedf 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a274:	f043 0220 	orr.w	r2, r3, #32
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e046      	b.n	800a30e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a280:	4b25      	ldr	r3, [pc, #148]	@ (800a318 <SPI_EndRxTxTransaction+0xcc>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a25      	ldr	r2, [pc, #148]	@ (800a31c <SPI_EndRxTxTransaction+0xd0>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0d5b      	lsrs	r3, r3, #21
 800a28c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a290:	fb02 f303 	mul.w	r3, r2, r3
 800a294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a29e:	d112      	bne.n	800a2c6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2180      	movs	r1, #128	@ 0x80
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fe34 	bl	8009f18 <SPI_WaitFlagStateUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d016      	beq.n	800a2e4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ba:	f043 0220 	orr.w	r2, r3, #32
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e023      	b.n	800a30e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00a      	beq.n	800a2e2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2dc:	2b80      	cmp	r3, #128	@ 0x80
 800a2de:	d0f2      	beq.n	800a2c6 <SPI_EndRxTxTransaction+0x7a>
 800a2e0:	e000      	b.n	800a2e4 <SPI_EndRxTxTransaction+0x98>
        break;
 800a2e2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fe99 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a300:	f043 0220 	orr.w	r2, r3, #32
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e000      	b.n	800a30e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000000 	.word	0x20000000
 800a31c:	165e9f81 	.word	0x165e9f81

0800a320 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a328:	f7f8 f838 	bl	800239c <HAL_GetTick>
 800a32c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0220 	bic.w	r2, r2, #32
 800a33c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	2164      	movs	r1, #100	@ 0x64
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff ff82 	bl	800a24c <SPI_EndRxTxTransaction>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d005      	beq.n	800a35a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a352:	f043 0220 	orr.w	r2, r3, #32
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d115      	bne.n	800a38e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d107      	bne.n	800a37e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f012 fcba 	bl	801ccf0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a37c:	e00e      	b.n	800a39c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff fb5a 	bl	8009a40 <HAL_SPI_TxRxCpltCallback>
}
 800a38c:	e006      	b.n	800a39c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fb5c 	bl	8009a54 <HAL_SPI_ErrorCallback>
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a3ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a3bc:	f7f7 ffee 	bl	800239c <HAL_GetTick>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	2164      	movs	r1, #100	@ 0x64
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff fec4 	bl	800a154 <SPI_EndRxTransaction>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3d6:	f043 0220 	orr.w	r2, r3, #32
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d103      	bne.n	800a3f6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f012 fc7e 	bl	801ccf0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a3f4:	e002      	b.n	800a3fc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fb2c 	bl	8009a54 <HAL_SPI_ErrorCallback>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af02      	add	r7, sp, #8
 800a40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a41a:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a41c:	4b27      	ldr	r3, [pc, #156]	@ (800a4bc <SPI_AbortRx_ISR+0xb8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a27      	ldr	r2, [pc, #156]	@ (800a4c0 <SPI_AbortRx_ISR+0xbc>)
 800a422:	fba2 2303 	umull	r2, r3, r2, r3
 800a426:	0a5b      	lsrs	r3, r3, #9
 800a428:	2264      	movs	r2, #100	@ 0x64
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a43e:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a452:	e009      	b.n	800a468 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3b01      	subs	r3, #1
 800a458:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a464:	2b40      	cmp	r3, #64	@ 0x40
 800a466:	d0eb      	beq.n	800a440 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a468:	f7f7 ff98 	bl	800239c <HAL_GetTick>
 800a46c:	4603      	mov	r3, r0
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2364      	movs	r3, #100	@ 0x64
 800a472:	2200      	movs	r2, #0
 800a474:	2180      	movs	r1, #128	@ 0x80
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fd4e 	bl	8009f18 <SPI_WaitFlagStateUntilTimeout>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2240      	movs	r2, #64	@ 0x40
 800a486:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a488:	f7f7 ff88 	bl	800239c <HAL_GetTick>
 800a48c:	4603      	mov	r3, r0
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	2364      	movs	r3, #100	@ 0x64
 800a492:	2200      	movs	r2, #0
 800a494:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff fdc5 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2240      	movs	r2, #64	@ 0x40
 800a4a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2207      	movs	r2, #7
 800a4ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000000 	.word	0x20000000
 800a4c0:	057619f1 	.word	0x057619f1

0800a4c4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a4cc:	4b4c      	ldr	r3, [pc, #304]	@ (800a600 <SPI_AbortTx_ISR+0x13c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a4c      	ldr	r2, [pc, #304]	@ (800a604 <SPI_AbortTx_ISR+0x140>)
 800a4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d6:	0a5b      	lsrs	r3, r3, #9
 800a4d8:	2264      	movs	r2, #100	@ 0x64
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4ee:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a502:	e009      	b.n	800a518 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	3b01      	subs	r3, #1
 800a508:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a514:	2b80      	cmp	r3, #128	@ 0x80
 800a516:	d0eb      	beq.n	800a4f0 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a518:	f7f7 ff40 	bl	800239c <HAL_GetTick>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	2164      	movs	r1, #100	@ 0x64
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff fe92 	bl	800a24c <SPI_EndRxTxTransaction>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2240      	movs	r2, #64	@ 0x40
 800a532:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a542:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a544:	f7f7 ff2a 	bl	800239c <HAL_GetTick>
 800a548:	4603      	mov	r3, r0
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	2364      	movs	r3, #100	@ 0x64
 800a54e:	2200      	movs	r2, #0
 800a550:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fd67 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2240      	movs	r2, #64	@ 0x40
 800a564:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a570:	2b40      	cmp	r3, #64	@ 0x40
 800a572:	d13c      	bne.n	800a5ee <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a582:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a596:	e009      	b.n	800a5ac <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a8:	2b40      	cmp	r3, #64	@ 0x40
 800a5aa:	d0eb      	beq.n	800a584 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a5ac:	f7f7 fef6 	bl	800239c <HAL_GetTick>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	2364      	movs	r3, #100	@ 0x64
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2180      	movs	r1, #128	@ 0x80
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fcac 	bl	8009f18 <SPI_WaitFlagStateUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2240      	movs	r2, #64	@ 0x40
 800a5ca:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a5cc:	f7f7 fee6 	bl	800239c <HAL_GetTick>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	2364      	movs	r3, #100	@ 0x64
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff fd23 	bl	800a028 <SPI_WaitFifoStateUntilTimeout>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2240      	movs	r2, #64	@ 0x40
 800a5ec:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a5f6:	bf00      	nop
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000000 	.word	0x20000000
 800a604:	057619f1 	.word	0x057619f1

0800a608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e049      	b.n	800a6ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f841 	bl	800a6b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f000 f9e8 	bl	800aa1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d001      	beq.n	800a6e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e054      	b.n	800a78e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0201 	orr.w	r2, r2, #1
 800a6fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a26      	ldr	r2, [pc, #152]	@ (800a79c <HAL_TIM_Base_Start_IT+0xd0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d022      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a70e:	d01d      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a22      	ldr	r2, [pc, #136]	@ (800a7a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d018      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a21      	ldr	r2, [pc, #132]	@ (800a7a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d013      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a1f      	ldr	r2, [pc, #124]	@ (800a7a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d00e      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a1e      	ldr	r2, [pc, #120]	@ (800a7ac <HAL_TIM_Base_Start_IT+0xe0>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d009      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d004      	beq.n	800a74c <HAL_TIM_Base_Start_IT+0x80>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a1b      	ldr	r2, [pc, #108]	@ (800a7b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d115      	bne.n	800a778 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689a      	ldr	r2, [r3, #8]
 800a752:	4b19      	ldr	r3, [pc, #100]	@ (800a7b8 <HAL_TIM_Base_Start_IT+0xec>)
 800a754:	4013      	ands	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b06      	cmp	r3, #6
 800a75c:	d015      	beq.n	800a78a <HAL_TIM_Base_Start_IT+0xbe>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d011      	beq.n	800a78a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f042 0201 	orr.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a776:	e008      	b.n	800a78a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0201 	orr.w	r2, r2, #1
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	e000      	b.n	800a78c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a78a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40000400 	.word	0x40000400
 800a7a4:	40000800 	.word	0x40000800
 800a7a8:	40000c00 	.word	0x40000c00
 800a7ac:	40010400 	.word	0x40010400
 800a7b0:	40014000 	.word	0x40014000
 800a7b4:	40001800 	.word	0x40001800
 800a7b8:	00010007 	.word	0x00010007

0800a7bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d020      	beq.n	800a820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01b      	beq.n	800a820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f06f 0202 	mvn.w	r2, #2
 800a7f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8e9 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a80c:	e005      	b.n	800a81a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8db 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f8ec 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 0304 	and.w	r3, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	d020      	beq.n	800a86c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d01b      	beq.n	800a86c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0204 	mvn.w	r2, #4
 800a83c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2202      	movs	r2, #2
 800a842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8c3 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a858:	e005      	b.n	800a866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f8b5 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f8c6 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b00      	cmp	r3, #0
 800a874:	d020      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f003 0308 	and.w	r3, r3, #8
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01b      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f06f 0208 	mvn.w	r2, #8
 800a888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2204      	movs	r2, #4
 800a88e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f89d 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a8a4:	e005      	b.n	800a8b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f88f 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f8a0 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f003 0310 	and.w	r3, r3, #16
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d020      	beq.n	800a904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01b      	beq.n	800a904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0210 	mvn.w	r2, #16
 800a8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2208      	movs	r2, #8
 800a8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f877 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a8f0:	e005      	b.n	800a8fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f869 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f87a 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f06f 0201 	mvn.w	r2, #1
 800a920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7f6 fcc4 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00c      	beq.n	800a956 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f913 	bl	800ab7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00c      	beq.n	800a97a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a966:	2b00      	cmp	r3, #0
 800a968:	d007      	beq.n	800a97a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f90b 	bl	800ab90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00c      	beq.n	800a99e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d007      	beq.n	800a99e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f834 	bl	800aa06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f003 0320 	and.w	r3, r3, #32
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00c      	beq.n	800a9c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f003 0320 	and.w	r3, r3, #32
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d007      	beq.n	800a9c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f06f 0220 	mvn.w	r2, #32
 800a9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f8d3 	bl	800ab68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
	...

0800aa1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a43      	ldr	r2, [pc, #268]	@ (800ab3c <TIM_Base_SetConfig+0x120>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d013      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa3a:	d00f      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a40      	ldr	r2, [pc, #256]	@ (800ab40 <TIM_Base_SetConfig+0x124>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d00b      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a3f      	ldr	r2, [pc, #252]	@ (800ab44 <TIM_Base_SetConfig+0x128>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d007      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a3e      	ldr	r2, [pc, #248]	@ (800ab48 <TIM_Base_SetConfig+0x12c>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d003      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a3d      	ldr	r2, [pc, #244]	@ (800ab4c <TIM_Base_SetConfig+0x130>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d108      	bne.n	800aa6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a32      	ldr	r2, [pc, #200]	@ (800ab3c <TIM_Base_SetConfig+0x120>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d02b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa7c:	d027      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a2f      	ldr	r2, [pc, #188]	@ (800ab40 <TIM_Base_SetConfig+0x124>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d023      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a2e      	ldr	r2, [pc, #184]	@ (800ab44 <TIM_Base_SetConfig+0x128>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d01f      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a2d      	ldr	r2, [pc, #180]	@ (800ab48 <TIM_Base_SetConfig+0x12c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d01b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a2c      	ldr	r2, [pc, #176]	@ (800ab4c <TIM_Base_SetConfig+0x130>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d017      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a2b      	ldr	r2, [pc, #172]	@ (800ab50 <TIM_Base_SetConfig+0x134>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d013      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a2a      	ldr	r2, [pc, #168]	@ (800ab54 <TIM_Base_SetConfig+0x138>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00f      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a29      	ldr	r2, [pc, #164]	@ (800ab58 <TIM_Base_SetConfig+0x13c>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a28      	ldr	r2, [pc, #160]	@ (800ab5c <TIM_Base_SetConfig+0x140>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d007      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a27      	ldr	r2, [pc, #156]	@ (800ab60 <TIM_Base_SetConfig+0x144>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d003      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a26      	ldr	r2, [pc, #152]	@ (800ab64 <TIM_Base_SetConfig+0x148>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d108      	bne.n	800aae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4313      	orrs	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	689a      	ldr	r2, [r3, #8]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a0e      	ldr	r2, [pc, #56]	@ (800ab3c <TIM_Base_SetConfig+0x120>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d003      	beq.n	800ab0e <TIM_Base_SetConfig+0xf2>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a10      	ldr	r2, [pc, #64]	@ (800ab4c <TIM_Base_SetConfig+0x130>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d103      	bne.n	800ab16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f043 0204 	orr.w	r2, r3, #4
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]
}
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	40010000 	.word	0x40010000
 800ab40:	40000400 	.word	0x40000400
 800ab44:	40000800 	.word	0x40000800
 800ab48:	40000c00 	.word	0x40000c00
 800ab4c:	40010400 	.word	0x40010400
 800ab50:	40014000 	.word	0x40014000
 800ab54:	40014400 	.word	0x40014400
 800ab58:	40014800 	.word	0x40014800
 800ab5c:	40001800 	.word	0x40001800
 800ab60:	40001c00 	.word	0x40001c00
 800ab64:	40002000 	.word	0x40002000

0800ab68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e040      	b.n	800ac38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7f6 fea2 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	@ 0x24
 800abd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 ff4c 	bl	800ba88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fce5 	bl	800b5c0 <UART_SetConfig>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d101      	bne.n	800ac00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e01b      	b.n	800ac38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 ffcb 	bl	800bbcc <UART_CheckIdleState>
 800ac36:	4603      	mov	r3, r0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	@ 0x28
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d177      	bne.n	800ad48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <HAL_UART_Transmit+0x24>
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e070      	b.n	800ad4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2221      	movs	r2, #33	@ 0x21
 800ac74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac76:	f7f7 fb91 	bl	800239c <HAL_GetTick>
 800ac7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	88fa      	ldrh	r2, [r7, #6]
 800ac80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	88fa      	ldrh	r2, [r7, #6]
 800ac88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac94:	d108      	bne.n	800aca8 <HAL_UART_Transmit+0x68>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d104      	bne.n	800aca8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	61bb      	str	r3, [r7, #24]
 800aca6:	e003      	b.n	800acb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800acb0:	e02f      	b.n	800ad12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2200      	movs	r2, #0
 800acba:	2180      	movs	r1, #128	@ 0x80
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 ffdc 	bl	800bc7a <UART_WaitOnFlagUntilTimeout>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2220      	movs	r2, #32
 800accc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e03b      	b.n	800ad4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ace6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	3302      	adds	r3, #2
 800acec:	61bb      	str	r3, [r7, #24]
 800acee:	e007      	b.n	800ad00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	781a      	ldrb	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	3301      	adds	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1c9      	bne.n	800acb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	2140      	movs	r1, #64	@ 0x40
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 ffa6 	bl	800bc7a <UART_WaitOnFlagUntilTimeout>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e005      	b.n	800ad4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	e000      	b.n	800ad4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ad48:	2302      	movs	r3, #2
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b08b      	sub	sp, #44	@ 0x2c
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d147      	bne.n	800adfa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_UART_Transmit_IT+0x22>
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e040      	b.n	800adfc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	88fa      	ldrh	r2, [r7, #6]
 800ad84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	88fa      	ldrh	r2, [r7, #6]
 800ad8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2221      	movs	r2, #33	@ 0x21
 800ada2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adac:	d107      	bne.n	800adbe <HAL_UART_Transmit_IT+0x6a>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4a13      	ldr	r2, [pc, #76]	@ (800ae08 <HAL_UART_Transmit_IT+0xb4>)
 800adba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800adbc:	e002      	b.n	800adc4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4a12      	ldr	r2, [pc, #72]	@ (800ae0c <HAL_UART_Transmit_IT+0xb8>)
 800adc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	613b      	str	r3, [r7, #16]
   return(result);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade2:	623b      	str	r3, [r7, #32]
 800ade4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	69f9      	ldr	r1, [r7, #28]
 800ade8:	6a3a      	ldr	r2, [r7, #32]
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	61bb      	str	r3, [r7, #24]
   return(result);
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	e000      	b.n	800adfc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800adfa:	2302      	movs	r3, #2
  }
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	372c      	adds	r7, #44	@ 0x2c
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	0800c0cf 	.word	0x0800c0cf
 800ae0c:	0800c019 	.word	0x0800c019

0800ae10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08a      	sub	sp, #40	@ 0x28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d132      	bne.n	800ae8e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <HAL_UART_Receive_IT+0x24>
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e02b      	b.n	800ae90 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d018      	beq.n	800ae7e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	613b      	str	r3, [r7, #16]
   return(result);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	623b      	str	r3, [r7, #32]
 800ae6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	69f9      	ldr	r1, [r7, #28]
 800ae70:	6a3a      	ldr	r2, [r7, #32]
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e6      	bne.n	800ae4c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	461a      	mov	r2, r3
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 ff65 	bl	800bd54 <UART_Start_Receive_IT>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	e000      	b.n	800ae90 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ae8e:	2302      	movs	r3, #2
  }
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3728      	adds	r7, #40	@ 0x28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b090      	sub	sp, #64	@ 0x40
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeac:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb8:	2b80      	cmp	r3, #128	@ 0x80
 800aeba:	d139      	bne.n	800af30 <HAL_UART_DMAStop+0x98>
 800aebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aebe:	2b21      	cmp	r3, #33	@ 0x21
 800aec0:	d136      	bne.n	800af30 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aed8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d015      	beq.n	800af2a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af02:	4618      	mov	r0, r3
 800af04:	f7f8 fd4a 	bl	800399c <HAL_DMA_Abort>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00d      	beq.n	800af2a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af12:	4618      	mov	r0, r3
 800af14:	f7f8 ff6c 	bl	8003df0 <HAL_DMA_GetError>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d105      	bne.n	800af2a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2210      	movs	r2, #16
 800af22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e044      	b.n	800afb4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 ffd8 	bl	800bee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af3a:	2b40      	cmp	r3, #64	@ 0x40
 800af3c:	d139      	bne.n	800afb2 <HAL_UART_DMAStop+0x11a>
 800af3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af40:	2b22      	cmp	r3, #34	@ 0x22
 800af42:	d136      	bne.n	800afb2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3308      	adds	r3, #8
 800af4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	60bb      	str	r3, [r7, #8]
   return(result);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3308      	adds	r3, #8
 800af62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af64:	61ba      	str	r2, [r7, #24]
 800af66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6979      	ldr	r1, [r7, #20]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	613b      	str	r3, [r7, #16]
   return(result);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e5      	bne.n	800af44 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d015      	beq.n	800afac <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af84:	4618      	mov	r0, r3
 800af86:	f7f8 fd09 	bl	800399c <HAL_DMA_Abort>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00d      	beq.n	800afac <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af94:	4618      	mov	r0, r3
 800af96:	f7f8 ff2b 	bl	8003df0 <HAL_DMA_GetError>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d105      	bne.n	800afac <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2210      	movs	r2, #16
 800afa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e003      	b.n	800afb4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 ffbd 	bl	800bf2c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3740      	adds	r7, #64	@ 0x40
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b0ba      	sub	sp, #232	@ 0xe8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800afe6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800afea:	4013      	ands	r3, r2
 800afec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d115      	bne.n	800b024 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800affc:	f003 0320 	and.w	r3, r3, #32
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00f      	beq.n	800b024 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 82b1 	beq.w	800b57c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
      }
      return;
 800b022:	e2ab      	b.n	800b57c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8117 	beq.w	800b25c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b02e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b03a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b03e:	4b85      	ldr	r3, [pc, #532]	@ (800b254 <HAL_UART_IRQHandler+0x298>)
 800b040:	4013      	ands	r3, r2
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 810a 	beq.w	800b25c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	d011      	beq.n	800b078 <HAL_UART_IRQHandler+0xbc>
 800b054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2201      	movs	r2, #1
 800b066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b06e:	f043 0201 	orr.w	r2, r3, #1
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b07c:	f003 0302 	and.w	r3, r3, #2
 800b080:	2b00      	cmp	r3, #0
 800b082:	d011      	beq.n	800b0a8 <HAL_UART_IRQHandler+0xec>
 800b084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00b      	beq.n	800b0a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2202      	movs	r2, #2
 800b096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09e:	f043 0204 	orr.w	r2, r3, #4
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <HAL_UART_IRQHandler+0x11c>
 800b0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0ce:	f043 0202 	orr.w	r2, r3, #2
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0dc:	f003 0308 	and.w	r3, r3, #8
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d017      	beq.n	800b114 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d105      	bne.n	800b0fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2208      	movs	r2, #8
 800b102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b10a:	f043 0208 	orr.w	r2, r3, #8
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d012      	beq.n	800b146 <HAL_UART_IRQHandler+0x18a>
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00c      	beq.n	800b146 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b13c:	f043 0220 	orr.w	r2, r3, #32
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8217 	beq.w	800b580 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b156:	f003 0320 	and.w	r3, r3, #32
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00d      	beq.n	800b17a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b18e:	2b40      	cmp	r3, #64	@ 0x40
 800b190:	d005      	beq.n	800b19e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b196:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d04f      	beq.n	800b23e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fec4 	bl	800bf2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ae:	2b40      	cmp	r3, #64	@ 0x40
 800b1b0:	d141      	bne.n	800b236 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1c0:	e853 3f00 	ldrex	r3, [r3]
 800b1c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1d9      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b202:	2b00      	cmp	r3, #0
 800b204:	d013      	beq.n	800b22e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b20a:	4a13      	ldr	r2, [pc, #76]	@ (800b258 <HAL_UART_IRQHandler+0x29c>)
 800b20c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b212:	4618      	mov	r0, r3
 800b214:	f7f8 fc32 	bl	8003a7c <HAL_DMA_Abort_IT>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d017      	beq.n	800b24e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22c:	e00f      	b.n	800b24e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f9b0 	bl	800b594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b234:	e00b      	b.n	800b24e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9ac 	bl	800b594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b23c:	e007      	b.n	800b24e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f9a8 	bl	800b594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b24c:	e198      	b.n	800b580 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24e:	bf00      	nop
    return;
 800b250:	e196      	b.n	800b580 <HAL_UART_IRQHandler+0x5c4>
 800b252:	bf00      	nop
 800b254:	04000120 	.word	0x04000120
 800b258:	0800bff5 	.word	0x0800bff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b260:	2b01      	cmp	r3, #1
 800b262:	f040 8166 	bne.w	800b532 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26a:	f003 0310 	and.w	r3, r3, #16
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 815f 	beq.w	800b532 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b278:	f003 0310 	and.w	r3, r3, #16
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 8158 	beq.w	800b532 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2210      	movs	r2, #16
 800b288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b294:	2b40      	cmp	r3, #64	@ 0x40
 800b296:	f040 80d0 	bne.w	800b43a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 80ab 	beq.w	800b406 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	f080 80a3 	bcs.w	800b406 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2d4:	f000 8086 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b306:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b31a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1da      	bne.n	800b2d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3308      	adds	r3, #8
 800b328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b34a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b34e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b352:	e841 2300 	strex	r3, r2, [r1]
 800b356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e1      	bne.n	800b322 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3308      	adds	r3, #8
 800b364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b368:	e853 3f00 	ldrex	r3, [r3]
 800b36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b36e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3308      	adds	r3, #8
 800b37e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e3      	bne.n	800b35e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b4:	f023 0310 	bic.w	r3, r3, #16
 800b3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3ce:	e841 2300 	strex	r3, r2, [r1]
 800b3d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1e4      	bne.n	800b3a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7f8 fadc 	bl	800399c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f8d2 	bl	800b5a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b404:	e0be      	b.n	800b584 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b40c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b410:	429a      	cmp	r2, r3
 800b412:	f040 80b7 	bne.w	800b584 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b420:	f040 80b0 	bne.w	800b584 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f8b8 	bl	800b5a8 <HAL_UARTEx_RxEventCallback>
      return;
 800b438:	e0a4      	b.n	800b584 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b446:	b29b      	uxth	r3, r3
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b454:	b29b      	uxth	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 8096 	beq.w	800b588 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b45c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 8091 	beq.w	800b588 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b47a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b488:	647b      	str	r3, [r7, #68]	@ 0x44
 800b48a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e4      	bne.n	800b466 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a6:	e853 3f00 	ldrex	r3, [r3]
 800b4aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	f023 0301 	bic.w	r3, r3, #1
 800b4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4c0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4c8:	e841 2300 	strex	r3, r2, [r1]
 800b4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1e3      	bne.n	800b49c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f023 0310 	bic.w	r3, r3, #16
 800b4fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	69b9      	ldr	r1, [r7, #24]
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	617b      	str	r3, [r7, #20]
   return(result);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e4      	bne.n	800b4e8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2202      	movs	r2, #2
 800b522:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f83c 	bl	800b5a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b530:	e02a      	b.n	800b588 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00e      	beq.n	800b55c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b53e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b546:	2b00      	cmp	r3, #0
 800b548:	d008      	beq.n	800b55c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d01c      	beq.n	800b58c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	4798      	blx	r3
    }
    return;
 800b55a:	e017      	b.n	800b58c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d012      	beq.n	800b58e <HAL_UART_IRQHandler+0x5d2>
 800b568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00c      	beq.n	800b58e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fe0a 	bl	800c18e <UART_EndTransmit_IT>
    return;
 800b57a:	e008      	b.n	800b58e <HAL_UART_IRQHandler+0x5d2>
      return;
 800b57c:	bf00      	nop
 800b57e:	e006      	b.n	800b58e <HAL_UART_IRQHandler+0x5d2>
    return;
 800b580:	bf00      	nop
 800b582:	e004      	b.n	800b58e <HAL_UART_IRQHandler+0x5d2>
      return;
 800b584:	bf00      	nop
 800b586:	e002      	b.n	800b58e <HAL_UART_IRQHandler+0x5d2>
      return;
 800b588:	bf00      	nop
 800b58a:	e000      	b.n	800b58e <HAL_UART_IRQHandler+0x5d2>
    return;
 800b58c:	bf00      	nop
  }

}
 800b58e:	37e8      	adds	r7, #232	@ 0xe8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689a      	ldr	r2, [r3, #8]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	431a      	orrs	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4ba6      	ldr	r3, [pc, #664]	@ (800b884 <UART_SetConfig+0x2c4>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6812      	ldr	r2, [r2, #0]
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	430b      	orrs	r3, r1
 800b5f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	430a      	orrs	r2, r1
 800b630:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a94      	ldr	r2, [pc, #592]	@ (800b888 <UART_SetConfig+0x2c8>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d120      	bne.n	800b67e <UART_SetConfig+0xbe>
 800b63c:	4b93      	ldr	r3, [pc, #588]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b642:	f003 0303 	and.w	r3, r3, #3
 800b646:	2b03      	cmp	r3, #3
 800b648:	d816      	bhi.n	800b678 <UART_SetConfig+0xb8>
 800b64a:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <UART_SetConfig+0x90>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b66d 	.word	0x0800b66d
 800b658:	0800b667 	.word	0x0800b667
 800b65c:	0800b673 	.word	0x0800b673
 800b660:	2301      	movs	r3, #1
 800b662:	77fb      	strb	r3, [r7, #31]
 800b664:	e150      	b.n	800b908 <UART_SetConfig+0x348>
 800b666:	2302      	movs	r3, #2
 800b668:	77fb      	strb	r3, [r7, #31]
 800b66a:	e14d      	b.n	800b908 <UART_SetConfig+0x348>
 800b66c:	2304      	movs	r3, #4
 800b66e:	77fb      	strb	r3, [r7, #31]
 800b670:	e14a      	b.n	800b908 <UART_SetConfig+0x348>
 800b672:	2308      	movs	r3, #8
 800b674:	77fb      	strb	r3, [r7, #31]
 800b676:	e147      	b.n	800b908 <UART_SetConfig+0x348>
 800b678:	2310      	movs	r3, #16
 800b67a:	77fb      	strb	r3, [r7, #31]
 800b67c:	e144      	b.n	800b908 <UART_SetConfig+0x348>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a83      	ldr	r2, [pc, #524]	@ (800b890 <UART_SetConfig+0x2d0>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d132      	bne.n	800b6ee <UART_SetConfig+0x12e>
 800b688:	4b80      	ldr	r3, [pc, #512]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68e:	f003 030c 	and.w	r3, r3, #12
 800b692:	2b0c      	cmp	r3, #12
 800b694:	d828      	bhi.n	800b6e8 <UART_SetConfig+0x128>
 800b696:	a201      	add	r2, pc, #4	@ (adr r2, 800b69c <UART_SetConfig+0xdc>)
 800b698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69c:	0800b6d1 	.word	0x0800b6d1
 800b6a0:	0800b6e9 	.word	0x0800b6e9
 800b6a4:	0800b6e9 	.word	0x0800b6e9
 800b6a8:	0800b6e9 	.word	0x0800b6e9
 800b6ac:	0800b6dd 	.word	0x0800b6dd
 800b6b0:	0800b6e9 	.word	0x0800b6e9
 800b6b4:	0800b6e9 	.word	0x0800b6e9
 800b6b8:	0800b6e9 	.word	0x0800b6e9
 800b6bc:	0800b6d7 	.word	0x0800b6d7
 800b6c0:	0800b6e9 	.word	0x0800b6e9
 800b6c4:	0800b6e9 	.word	0x0800b6e9
 800b6c8:	0800b6e9 	.word	0x0800b6e9
 800b6cc:	0800b6e3 	.word	0x0800b6e3
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	77fb      	strb	r3, [r7, #31]
 800b6d4:	e118      	b.n	800b908 <UART_SetConfig+0x348>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	77fb      	strb	r3, [r7, #31]
 800b6da:	e115      	b.n	800b908 <UART_SetConfig+0x348>
 800b6dc:	2304      	movs	r3, #4
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e112      	b.n	800b908 <UART_SetConfig+0x348>
 800b6e2:	2308      	movs	r3, #8
 800b6e4:	77fb      	strb	r3, [r7, #31]
 800b6e6:	e10f      	b.n	800b908 <UART_SetConfig+0x348>
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e10c      	b.n	800b908 <UART_SetConfig+0x348>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a68      	ldr	r2, [pc, #416]	@ (800b894 <UART_SetConfig+0x2d4>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d120      	bne.n	800b73a <UART_SetConfig+0x17a>
 800b6f8:	4b64      	ldr	r3, [pc, #400]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b702:	2b30      	cmp	r3, #48	@ 0x30
 800b704:	d013      	beq.n	800b72e <UART_SetConfig+0x16e>
 800b706:	2b30      	cmp	r3, #48	@ 0x30
 800b708:	d814      	bhi.n	800b734 <UART_SetConfig+0x174>
 800b70a:	2b20      	cmp	r3, #32
 800b70c:	d009      	beq.n	800b722 <UART_SetConfig+0x162>
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d810      	bhi.n	800b734 <UART_SetConfig+0x174>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <UART_SetConfig+0x15c>
 800b716:	2b10      	cmp	r3, #16
 800b718:	d006      	beq.n	800b728 <UART_SetConfig+0x168>
 800b71a:	e00b      	b.n	800b734 <UART_SetConfig+0x174>
 800b71c:	2300      	movs	r3, #0
 800b71e:	77fb      	strb	r3, [r7, #31]
 800b720:	e0f2      	b.n	800b908 <UART_SetConfig+0x348>
 800b722:	2302      	movs	r3, #2
 800b724:	77fb      	strb	r3, [r7, #31]
 800b726:	e0ef      	b.n	800b908 <UART_SetConfig+0x348>
 800b728:	2304      	movs	r3, #4
 800b72a:	77fb      	strb	r3, [r7, #31]
 800b72c:	e0ec      	b.n	800b908 <UART_SetConfig+0x348>
 800b72e:	2308      	movs	r3, #8
 800b730:	77fb      	strb	r3, [r7, #31]
 800b732:	e0e9      	b.n	800b908 <UART_SetConfig+0x348>
 800b734:	2310      	movs	r3, #16
 800b736:	77fb      	strb	r3, [r7, #31]
 800b738:	e0e6      	b.n	800b908 <UART_SetConfig+0x348>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a56      	ldr	r2, [pc, #344]	@ (800b898 <UART_SetConfig+0x2d8>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d120      	bne.n	800b786 <UART_SetConfig+0x1c6>
 800b744:	4b51      	ldr	r3, [pc, #324]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b74a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b74e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b750:	d013      	beq.n	800b77a <UART_SetConfig+0x1ba>
 800b752:	2bc0      	cmp	r3, #192	@ 0xc0
 800b754:	d814      	bhi.n	800b780 <UART_SetConfig+0x1c0>
 800b756:	2b80      	cmp	r3, #128	@ 0x80
 800b758:	d009      	beq.n	800b76e <UART_SetConfig+0x1ae>
 800b75a:	2b80      	cmp	r3, #128	@ 0x80
 800b75c:	d810      	bhi.n	800b780 <UART_SetConfig+0x1c0>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <UART_SetConfig+0x1a8>
 800b762:	2b40      	cmp	r3, #64	@ 0x40
 800b764:	d006      	beq.n	800b774 <UART_SetConfig+0x1b4>
 800b766:	e00b      	b.n	800b780 <UART_SetConfig+0x1c0>
 800b768:	2300      	movs	r3, #0
 800b76a:	77fb      	strb	r3, [r7, #31]
 800b76c:	e0cc      	b.n	800b908 <UART_SetConfig+0x348>
 800b76e:	2302      	movs	r3, #2
 800b770:	77fb      	strb	r3, [r7, #31]
 800b772:	e0c9      	b.n	800b908 <UART_SetConfig+0x348>
 800b774:	2304      	movs	r3, #4
 800b776:	77fb      	strb	r3, [r7, #31]
 800b778:	e0c6      	b.n	800b908 <UART_SetConfig+0x348>
 800b77a:	2308      	movs	r3, #8
 800b77c:	77fb      	strb	r3, [r7, #31]
 800b77e:	e0c3      	b.n	800b908 <UART_SetConfig+0x348>
 800b780:	2310      	movs	r3, #16
 800b782:	77fb      	strb	r3, [r7, #31]
 800b784:	e0c0      	b.n	800b908 <UART_SetConfig+0x348>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a44      	ldr	r2, [pc, #272]	@ (800b89c <UART_SetConfig+0x2dc>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d125      	bne.n	800b7dc <UART_SetConfig+0x21c>
 800b790:	4b3e      	ldr	r3, [pc, #248]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b79a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b79e:	d017      	beq.n	800b7d0 <UART_SetConfig+0x210>
 800b7a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7a4:	d817      	bhi.n	800b7d6 <UART_SetConfig+0x216>
 800b7a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7aa:	d00b      	beq.n	800b7c4 <UART_SetConfig+0x204>
 800b7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b0:	d811      	bhi.n	800b7d6 <UART_SetConfig+0x216>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <UART_SetConfig+0x1fe>
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ba:	d006      	beq.n	800b7ca <UART_SetConfig+0x20a>
 800b7bc:	e00b      	b.n	800b7d6 <UART_SetConfig+0x216>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	77fb      	strb	r3, [r7, #31]
 800b7c2:	e0a1      	b.n	800b908 <UART_SetConfig+0x348>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	77fb      	strb	r3, [r7, #31]
 800b7c8:	e09e      	b.n	800b908 <UART_SetConfig+0x348>
 800b7ca:	2304      	movs	r3, #4
 800b7cc:	77fb      	strb	r3, [r7, #31]
 800b7ce:	e09b      	b.n	800b908 <UART_SetConfig+0x348>
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	77fb      	strb	r3, [r7, #31]
 800b7d4:	e098      	b.n	800b908 <UART_SetConfig+0x348>
 800b7d6:	2310      	movs	r3, #16
 800b7d8:	77fb      	strb	r3, [r7, #31]
 800b7da:	e095      	b.n	800b908 <UART_SetConfig+0x348>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a2f      	ldr	r2, [pc, #188]	@ (800b8a0 <UART_SetConfig+0x2e0>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d125      	bne.n	800b832 <UART_SetConfig+0x272>
 800b7e6:	4b29      	ldr	r3, [pc, #164]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b7f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b7f4:	d017      	beq.n	800b826 <UART_SetConfig+0x266>
 800b7f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b7fa:	d817      	bhi.n	800b82c <UART_SetConfig+0x26c>
 800b7fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b800:	d00b      	beq.n	800b81a <UART_SetConfig+0x25a>
 800b802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b806:	d811      	bhi.n	800b82c <UART_SetConfig+0x26c>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <UART_SetConfig+0x254>
 800b80c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b810:	d006      	beq.n	800b820 <UART_SetConfig+0x260>
 800b812:	e00b      	b.n	800b82c <UART_SetConfig+0x26c>
 800b814:	2301      	movs	r3, #1
 800b816:	77fb      	strb	r3, [r7, #31]
 800b818:	e076      	b.n	800b908 <UART_SetConfig+0x348>
 800b81a:	2302      	movs	r3, #2
 800b81c:	77fb      	strb	r3, [r7, #31]
 800b81e:	e073      	b.n	800b908 <UART_SetConfig+0x348>
 800b820:	2304      	movs	r3, #4
 800b822:	77fb      	strb	r3, [r7, #31]
 800b824:	e070      	b.n	800b908 <UART_SetConfig+0x348>
 800b826:	2308      	movs	r3, #8
 800b828:	77fb      	strb	r3, [r7, #31]
 800b82a:	e06d      	b.n	800b908 <UART_SetConfig+0x348>
 800b82c:	2310      	movs	r3, #16
 800b82e:	77fb      	strb	r3, [r7, #31]
 800b830:	e06a      	b.n	800b908 <UART_SetConfig+0x348>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a1b      	ldr	r2, [pc, #108]	@ (800b8a4 <UART_SetConfig+0x2e4>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d138      	bne.n	800b8ae <UART_SetConfig+0x2ee>
 800b83c:	4b13      	ldr	r3, [pc, #76]	@ (800b88c <UART_SetConfig+0x2cc>)
 800b83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b842:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b846:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b84a:	d017      	beq.n	800b87c <UART_SetConfig+0x2bc>
 800b84c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b850:	d82a      	bhi.n	800b8a8 <UART_SetConfig+0x2e8>
 800b852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b856:	d00b      	beq.n	800b870 <UART_SetConfig+0x2b0>
 800b858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b85c:	d824      	bhi.n	800b8a8 <UART_SetConfig+0x2e8>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <UART_SetConfig+0x2aa>
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b866:	d006      	beq.n	800b876 <UART_SetConfig+0x2b6>
 800b868:	e01e      	b.n	800b8a8 <UART_SetConfig+0x2e8>
 800b86a:	2300      	movs	r3, #0
 800b86c:	77fb      	strb	r3, [r7, #31]
 800b86e:	e04b      	b.n	800b908 <UART_SetConfig+0x348>
 800b870:	2302      	movs	r3, #2
 800b872:	77fb      	strb	r3, [r7, #31]
 800b874:	e048      	b.n	800b908 <UART_SetConfig+0x348>
 800b876:	2304      	movs	r3, #4
 800b878:	77fb      	strb	r3, [r7, #31]
 800b87a:	e045      	b.n	800b908 <UART_SetConfig+0x348>
 800b87c:	2308      	movs	r3, #8
 800b87e:	77fb      	strb	r3, [r7, #31]
 800b880:	e042      	b.n	800b908 <UART_SetConfig+0x348>
 800b882:	bf00      	nop
 800b884:	efff69f3 	.word	0xefff69f3
 800b888:	40011000 	.word	0x40011000
 800b88c:	40023800 	.word	0x40023800
 800b890:	40004400 	.word	0x40004400
 800b894:	40004800 	.word	0x40004800
 800b898:	40004c00 	.word	0x40004c00
 800b89c:	40005000 	.word	0x40005000
 800b8a0:	40011400 	.word	0x40011400
 800b8a4:	40007800 	.word	0x40007800
 800b8a8:	2310      	movs	r3, #16
 800b8aa:	77fb      	strb	r3, [r7, #31]
 800b8ac:	e02c      	b.n	800b908 <UART_SetConfig+0x348>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a72      	ldr	r2, [pc, #456]	@ (800ba7c <UART_SetConfig+0x4bc>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d125      	bne.n	800b904 <UART_SetConfig+0x344>
 800b8b8:	4b71      	ldr	r3, [pc, #452]	@ (800ba80 <UART_SetConfig+0x4c0>)
 800b8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8c6:	d017      	beq.n	800b8f8 <UART_SetConfig+0x338>
 800b8c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8cc:	d817      	bhi.n	800b8fe <UART_SetConfig+0x33e>
 800b8ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8d2:	d00b      	beq.n	800b8ec <UART_SetConfig+0x32c>
 800b8d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8d8:	d811      	bhi.n	800b8fe <UART_SetConfig+0x33e>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <UART_SetConfig+0x326>
 800b8de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8e2:	d006      	beq.n	800b8f2 <UART_SetConfig+0x332>
 800b8e4:	e00b      	b.n	800b8fe <UART_SetConfig+0x33e>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	77fb      	strb	r3, [r7, #31]
 800b8ea:	e00d      	b.n	800b908 <UART_SetConfig+0x348>
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	77fb      	strb	r3, [r7, #31]
 800b8f0:	e00a      	b.n	800b908 <UART_SetConfig+0x348>
 800b8f2:	2304      	movs	r3, #4
 800b8f4:	77fb      	strb	r3, [r7, #31]
 800b8f6:	e007      	b.n	800b908 <UART_SetConfig+0x348>
 800b8f8:	2308      	movs	r3, #8
 800b8fa:	77fb      	strb	r3, [r7, #31]
 800b8fc:	e004      	b.n	800b908 <UART_SetConfig+0x348>
 800b8fe:	2310      	movs	r3, #16
 800b900:	77fb      	strb	r3, [r7, #31]
 800b902:	e001      	b.n	800b908 <UART_SetConfig+0x348>
 800b904:	2310      	movs	r3, #16
 800b906:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b910:	d15b      	bne.n	800b9ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b912:	7ffb      	ldrb	r3, [r7, #31]
 800b914:	2b08      	cmp	r3, #8
 800b916:	d828      	bhi.n	800b96a <UART_SetConfig+0x3aa>
 800b918:	a201      	add	r2, pc, #4	@ (adr r2, 800b920 <UART_SetConfig+0x360>)
 800b91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91e:	bf00      	nop
 800b920:	0800b945 	.word	0x0800b945
 800b924:	0800b94d 	.word	0x0800b94d
 800b928:	0800b955 	.word	0x0800b955
 800b92c:	0800b96b 	.word	0x0800b96b
 800b930:	0800b95b 	.word	0x0800b95b
 800b934:	0800b96b 	.word	0x0800b96b
 800b938:	0800b96b 	.word	0x0800b96b
 800b93c:	0800b96b 	.word	0x0800b96b
 800b940:	0800b963 	.word	0x0800b963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b944:	f7fc fec2 	bl	80086cc <HAL_RCC_GetPCLK1Freq>
 800b948:	61b8      	str	r0, [r7, #24]
        break;
 800b94a:	e013      	b.n	800b974 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b94c:	f7fc fed2 	bl	80086f4 <HAL_RCC_GetPCLK2Freq>
 800b950:	61b8      	str	r0, [r7, #24]
        break;
 800b952:	e00f      	b.n	800b974 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b954:	4b4b      	ldr	r3, [pc, #300]	@ (800ba84 <UART_SetConfig+0x4c4>)
 800b956:	61bb      	str	r3, [r7, #24]
        break;
 800b958:	e00c      	b.n	800b974 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b95a:	f7fc fda5 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800b95e:	61b8      	str	r0, [r7, #24]
        break;
 800b960:	e008      	b.n	800b974 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b966:	61bb      	str	r3, [r7, #24]
        break;
 800b968:	e004      	b.n	800b974 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	77bb      	strb	r3, [r7, #30]
        break;
 800b972:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d074      	beq.n	800ba64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	005a      	lsls	r2, r3, #1
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	085b      	lsrs	r3, r3, #1
 800b984:	441a      	add	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d916      	bls.n	800b9c4 <UART_SetConfig+0x404>
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b99c:	d212      	bcs.n	800b9c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	f023 030f 	bic.w	r3, r3, #15
 800b9a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	085b      	lsrs	r3, r3, #1
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	89fa      	ldrh	r2, [r7, #14]
 800b9c0:	60da      	str	r2, [r3, #12]
 800b9c2:	e04f      	b.n	800ba64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	77bb      	strb	r3, [r7, #30]
 800b9c8:	e04c      	b.n	800ba64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9ca:	7ffb      	ldrb	r3, [r7, #31]
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	d828      	bhi.n	800ba22 <UART_SetConfig+0x462>
 800b9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <UART_SetConfig+0x418>)
 800b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800b9fd 	.word	0x0800b9fd
 800b9dc:	0800ba05 	.word	0x0800ba05
 800b9e0:	0800ba0d 	.word	0x0800ba0d
 800b9e4:	0800ba23 	.word	0x0800ba23
 800b9e8:	0800ba13 	.word	0x0800ba13
 800b9ec:	0800ba23 	.word	0x0800ba23
 800b9f0:	0800ba23 	.word	0x0800ba23
 800b9f4:	0800ba23 	.word	0x0800ba23
 800b9f8:	0800ba1b 	.word	0x0800ba1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9fc:	f7fc fe66 	bl	80086cc <HAL_RCC_GetPCLK1Freq>
 800ba00:	61b8      	str	r0, [r7, #24]
        break;
 800ba02:	e013      	b.n	800ba2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba04:	f7fc fe76 	bl	80086f4 <HAL_RCC_GetPCLK2Freq>
 800ba08:	61b8      	str	r0, [r7, #24]
        break;
 800ba0a:	e00f      	b.n	800ba2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ba84 <UART_SetConfig+0x4c4>)
 800ba0e:	61bb      	str	r3, [r7, #24]
        break;
 800ba10:	e00c      	b.n	800ba2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba12:	f7fc fd49 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 800ba16:	61b8      	str	r0, [r7, #24]
        break;
 800ba18:	e008      	b.n	800ba2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba1e:	61bb      	str	r3, [r7, #24]
        break;
 800ba20:	e004      	b.n	800ba2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	77bb      	strb	r3, [r7, #30]
        break;
 800ba2a:	bf00      	nop
    }

    if (pclk != 0U)
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d018      	beq.n	800ba64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	085a      	lsrs	r2, r3, #1
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b0f      	cmp	r3, #15
 800ba4a:	d909      	bls.n	800ba60 <UART_SetConfig+0x4a0>
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba52:	d205      	bcs.n	800ba60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60da      	str	r2, [r3, #12]
 800ba5e:	e001      	b.n	800ba64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ba70:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3720      	adds	r7, #32
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	40007c00 	.word	0x40007c00
 800ba80:	40023800 	.word	0x40023800
 800ba84:	00f42400 	.word	0x00f42400

0800ba88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	f003 0308 	and.w	r3, r3, #8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafa:	f003 0304 	and.w	r3, r3, #4
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00a      	beq.n	800bb3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01a      	beq.n	800bb9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	430a      	orrs	r2, r1
 800bb7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb86:	d10a      	bne.n	800bb9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	605a      	str	r2, [r3, #4]
  }
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08c      	sub	sp, #48	@ 0x30
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbdc:	f7f6 fbde 	bl	800239c <HAL_GetTick>
 800bbe0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0308 	and.w	r3, r3, #8
 800bbec:	2b08      	cmp	r3, #8
 800bbee:	d12e      	bne.n	800bc4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f83b 	bl	800bc7a <UART_WaitOnFlagUntilTimeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d021      	beq.n	800bc4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc1e:	623b      	str	r3, [r7, #32]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	461a      	mov	r2, r3
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	69b9      	ldr	r1, [r7, #24]
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	617b      	str	r3, [r7, #20]
   return(result);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e6      	bne.n	800bc0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e011      	b.n	800bc72 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2220      	movs	r2, #32
 800bc52:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3728      	adds	r7, #40	@ 0x28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	60f8      	str	r0, [r7, #12]
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	603b      	str	r3, [r7, #0]
 800bc86:	4613      	mov	r3, r2
 800bc88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc8a:	e04f      	b.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc92:	d04b      	beq.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc94:	f7f6 fb82 	bl	800239c <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	69ba      	ldr	r2, [r7, #24]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d302      	bcc.n	800bcaa <UART_WaitOnFlagUntilTimeout+0x30>
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e04e      	b.n	800bd4c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d037      	beq.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b80      	cmp	r3, #128	@ 0x80
 800bcc0:	d034      	beq.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b40      	cmp	r3, #64	@ 0x40
 800bcc6:	d031      	beq.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	f003 0308 	and.w	r3, r3, #8
 800bcd2:	2b08      	cmp	r3, #8
 800bcd4:	d110      	bne.n	800bcf8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2208      	movs	r2, #8
 800bcdc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f924 	bl	800bf2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2208      	movs	r2, #8
 800bce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e029      	b.n	800bd4c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd06:	d111      	bne.n	800bd2c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 f90a 	bl	800bf2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e00f      	b.n	800bd4c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	69da      	ldr	r2, [r3, #28]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	4013      	ands	r3, r2
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	bf0c      	ite	eq
 800bd3c:	2301      	moveq	r3, #1
 800bd3e:	2300      	movne	r3, #0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	461a      	mov	r2, r3
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d0a0      	beq.n	800bc8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b097      	sub	sp, #92	@ 0x5c
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	88fa      	ldrh	r2, [r7, #6]
 800bd6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	88fa      	ldrh	r2, [r7, #6]
 800bd74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd86:	d10e      	bne.n	800bda6 <UART_Start_Receive_IT+0x52>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d105      	bne.n	800bd9c <UART_Start_Receive_IT+0x48>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bd96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bd9a:	e02d      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	22ff      	movs	r2, #255	@ 0xff
 800bda0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bda4:	e028      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10d      	bne.n	800bdca <UART_Start_Receive_IT+0x76>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d104      	bne.n	800bdc0 <UART_Start_Receive_IT+0x6c>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	22ff      	movs	r2, #255	@ 0xff
 800bdba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bdbe:	e01b      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	227f      	movs	r2, #127	@ 0x7f
 800bdc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bdc8:	e016      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdd2:	d10d      	bne.n	800bdf0 <UART_Start_Receive_IT+0x9c>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <UART_Start_Receive_IT+0x92>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	227f      	movs	r2, #127	@ 0x7f
 800bde0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bde4:	e008      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	223f      	movs	r2, #63	@ 0x3f
 800bdea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bdee:	e003      	b.n	800bdf8 <UART_Start_Receive_IT+0xa4>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2222      	movs	r2, #34	@ 0x22
 800be04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3308      	adds	r3, #8
 800be0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be12:	e853 3f00 	ldrex	r3, [r3]
 800be16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be28:	64ba      	str	r2, [r7, #72]	@ 0x48
 800be2a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be30:	e841 2300 	strex	r3, r2, [r1]
 800be34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e5      	bne.n	800be08 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be44:	d107      	bne.n	800be56 <UART_Start_Receive_IT+0x102>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	4a21      	ldr	r2, [pc, #132]	@ (800bed8 <UART_Start_Receive_IT+0x184>)
 800be52:	669a      	str	r2, [r3, #104]	@ 0x68
 800be54:	e002      	b.n	800be5c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	4a20      	ldr	r2, [pc, #128]	@ (800bedc <UART_Start_Receive_IT+0x188>)
 800be5a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d019      	beq.n	800be98 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800be78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be82:	637b      	str	r3, [r7, #52]	@ 0x34
 800be84:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e6      	bne.n	800be64 <UART_Start_Receive_IT+0x110>
 800be96:	e018      	b.n	800beca <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	613b      	str	r3, [r7, #16]
   return(result);
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f043 0320 	orr.w	r3, r3, #32
 800beac:	653b      	str	r3, [r7, #80]	@ 0x50
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb6:	623b      	str	r3, [r7, #32]
 800beb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	69f9      	ldr	r1, [r7, #28]
 800bebc:	6a3a      	ldr	r2, [r7, #32]
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e6      	bne.n	800be98 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	375c      	adds	r7, #92	@ 0x5c
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	0800c38b 	.word	0x0800c38b
 800bedc:	0800c1e3 	.word	0x0800c1e3

0800bee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b089      	sub	sp, #36	@ 0x24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	61bb      	str	r3, [r7, #24]
 800bf08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	6979      	ldr	r1, [r7, #20]
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	613b      	str	r3, [r7, #16]
   return(result);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e6      	bne.n	800bee8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bf20:	bf00      	nop
 800bf22:	3724      	adds	r7, #36	@ 0x24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b095      	sub	sp, #84	@ 0x54
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf3c:	e853 3f00 	ldrex	r3, [r3]
 800bf40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf52:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e6      	bne.n	800bf34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	f023 0301 	bic.w	r3, r3, #1
 800bf7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e5      	bne.n	800bf66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d118      	bne.n	800bfd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f023 0310 	bic.w	r3, r3, #16
 800bfb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	6979      	ldr	r1, [r7, #20]
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	613b      	str	r3, [r7, #16]
   return(result);
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e6      	bne.n	800bfa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bfe8:	bf00      	nop
 800bfea:	3754      	adds	r7, #84	@ 0x54
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff fac2 	bl	800b594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c018:	b480      	push	{r7}
 800c01a:	b08f      	sub	sp, #60	@ 0x3c
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c024:	2b21      	cmp	r3, #33	@ 0x21
 800c026:	d14c      	bne.n	800c0c2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c02e:	b29b      	uxth	r3, r3
 800c030:	2b00      	cmp	r3, #0
 800c032:	d132      	bne.n	800c09a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	61fb      	str	r3, [r7, #28]
   return(result);
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c048:	637b      	str	r3, [r7, #52]	@ 0x34
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c054:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c05a:	e841 2300 	strex	r3, r2, [r1]
 800c05e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1e6      	bne.n	800c034 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	e853 3f00 	ldrex	r3, [r3]
 800c072:	60bb      	str	r3, [r7, #8]
   return(result);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c07a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	461a      	mov	r2, r3
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	61bb      	str	r3, [r7, #24]
 800c086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c088:	6979      	ldr	r1, [r7, #20]
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	e841 2300 	strex	r3, r2, [r1]
 800c090:	613b      	str	r3, [r7, #16]
   return(result);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e6      	bne.n	800c066 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c098:	e013      	b.n	800c0c2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c09e:	781a      	ldrb	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c0c2:	bf00      	nop
 800c0c4:	373c      	adds	r7, #60	@ 0x3c
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b091      	sub	sp, #68	@ 0x44
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0da:	2b21      	cmp	r3, #33	@ 0x21
 800c0dc:	d151      	bne.n	800c182 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d132      	bne.n	800c150 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	e853 3f00 	ldrex	r3, [r3]
 800c0f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	633b      	str	r3, [r7, #48]	@ 0x30
 800c10a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c10e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c110:	e841 2300 	strex	r3, r2, [r1]
 800c114:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e6      	bne.n	800c0ea <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c130:	637b      	str	r3, [r7, #52]	@ 0x34
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	69b9      	ldr	r1, [r7, #24]
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	617b      	str	r3, [r7, #20]
   return(result);
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e6      	bne.n	800c11c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c14e:	e018      	b.n	800c182 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c154:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c164:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c16a:	1c9a      	adds	r2, r3, #2
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c176:	b29b      	uxth	r3, r3
 800c178:	3b01      	subs	r3, #1
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c182:	bf00      	nop
 800c184:	3744      	adds	r7, #68	@ 0x44
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b088      	sub	sp, #32
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1aa:	61fb      	str	r3, [r7, #28]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	61bb      	str	r3, [r7, #24]
 800c1b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b8:	6979      	ldr	r1, [r7, #20]
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	e841 2300 	strex	r3, r2, [r1]
 800c1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1e6      	bne.n	800c196 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2220      	movs	r2, #32
 800c1cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f011 f807 	bl	801d1e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1da:	bf00      	nop
 800c1dc:	3720      	adds	r7, #32
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b09c      	sub	sp, #112	@ 0x70
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1f0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1fa:	2b22      	cmp	r3, #34	@ 0x22
 800c1fc:	f040 80b9 	bne.w	800c372 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c206:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c20a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c20e:	b2d9      	uxtb	r1, r3
 800c210:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c214:	b2da      	uxtb	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c21a:	400a      	ands	r2, r1
 800c21c:	b2d2      	uxtb	r2, r2
 800c21e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c230:	b29b      	uxth	r3, r3
 800c232:	3b01      	subs	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c242:	b29b      	uxth	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	f040 809c 	bne.w	800c382 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c252:	e853 3f00 	ldrex	r3, [r3]
 800c256:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c25a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c25e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c268:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c26a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c26e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c270:	e841 2300 	strex	r3, r2, [r1]
 800c274:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1e6      	bne.n	800c24a <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28e:	f023 0301 	bic.w	r3, r3, #1
 800c292:	667b      	str	r3, [r7, #100]	@ 0x64
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3308      	adds	r3, #8
 800c29a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c29c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c29e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e5      	bne.n	800c27c <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d018      	beq.n	800c304 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	623b      	str	r3, [r7, #32]
   return(result);
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e6      	bne.n	800c2d2 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d12e      	bne.n	800c36a <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0310 	bic.w	r3, r3, #16
 800c326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c330:	61fb      	str	r3, [r7, #28]
 800c332:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	69b9      	ldr	r1, [r7, #24]
 800c336:	69fa      	ldr	r2, [r7, #28]
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	617b      	str	r3, [r7, #20]
   return(result);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e6      	bne.n	800c312 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	f003 0310 	and.w	r3, r3, #16
 800c34e:	2b10      	cmp	r3, #16
 800c350:	d103      	bne.n	800c35a <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2210      	movs	r2, #16
 800c358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff f920 	bl	800b5a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c368:	e00b      	b.n	800c382 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f010 ff6a 	bl	801d244 <HAL_UART_RxCpltCallback>
}
 800c370:	e007      	b.n	800c382 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	699a      	ldr	r2, [r3, #24]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f042 0208 	orr.w	r2, r2, #8
 800c380:	619a      	str	r2, [r3, #24]
}
 800c382:	bf00      	nop
 800c384:	3770      	adds	r7, #112	@ 0x70
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b09c      	sub	sp, #112	@ 0x70
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c398:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3a2:	2b22      	cmp	r3, #34	@ 0x22
 800c3a4:	f040 80b9 	bne.w	800c51a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3b8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c3bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3cc:	1c9a      	adds	r2, r3, #2
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 809c 	bne.w	800c52a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c406:	667b      	str	r3, [r7, #100]	@ 0x64
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c410:	657b      	str	r3, [r7, #84]	@ 0x54
 800c412:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c416:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c41e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e6      	bne.n	800c3f2 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3308      	adds	r3, #8
 800c42a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c436:	f023 0301 	bic.w	r3, r3, #1
 800c43a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3308      	adds	r3, #8
 800c442:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c444:	643a      	str	r2, [r7, #64]	@ 0x40
 800c446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c44a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e5      	bne.n	800c424 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2220      	movs	r2, #32
 800c45c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d018      	beq.n	800c4ac <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	e853 3f00 	ldrex	r3, [r3]
 800c486:	61fb      	str	r3, [r7, #28]
   return(result);
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c48e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	461a      	mov	r2, r3
 800c496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c49a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c49e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a0:	e841 2300 	strex	r3, r2, [r1]
 800c4a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e6      	bne.n	800c47a <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d12e      	bne.n	800c512 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	e853 3f00 	ldrex	r3, [r3]
 800c4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	f023 0310 	bic.w	r3, r3, #16
 800c4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4dc:	6979      	ldr	r1, [r7, #20]
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	e841 2300 	strex	r3, r2, [r1]
 800c4e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1e6      	bne.n	800c4ba <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	f003 0310 	and.w	r3, r3, #16
 800c4f6:	2b10      	cmp	r3, #16
 800c4f8:	d103      	bne.n	800c502 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2210      	movs	r2, #16
 800c500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff f84c 	bl	800b5a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c510:	e00b      	b.n	800c52a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f010 fe96 	bl	801d244 <HAL_UART_RxCpltCallback>
}
 800c518:	e007      	b.n	800c52a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699a      	ldr	r2, [r3, #24]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f042 0208 	orr.w	r2, r2, #8
 800c528:	619a      	str	r2, [r3, #24]
}
 800c52a:	bf00      	nop
 800c52c:	3770      	adds	r7, #112	@ 0x70
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c534:	b084      	sub	sp, #16
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	f107 001c 	add.w	r0, r7, #28
 800c542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c546:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d121      	bne.n	800c592 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c552:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	4b21      	ldr	r3, [pc, #132]	@ (800c5e4 <USB_CoreInit+0xb0>)
 800c560:	4013      	ands	r3, r2
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c576:	2b01      	cmp	r3, #1
 800c578:	d105      	bne.n	800c586 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fa92 	bl	800cab0 <USB_CoreReset>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]
 800c590:	e010      	b.n	800c5b4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa86 	bl	800cab0 <USB_CoreReset>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800c5b4:	7fbb      	ldrb	r3, [r7, #30]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d10b      	bne.n	800c5d2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f043 0206 	orr.w	r2, r3, #6
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f043 0220 	orr.w	r2, r3, #32
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5de:	b004      	add	sp, #16
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	ffbdffbf 	.word	0xffbdffbf

0800c5e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f023 0201 	bic.w	r2, r3, #1
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	460b      	mov	r3, r1
 800c614:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c616:	2300      	movs	r3, #0
 800c618:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c626:	78fb      	ldrb	r3, [r7, #3]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d115      	bne.n	800c658 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c638:	200a      	movs	r0, #10
 800c63a:	f7f5 febb 	bl	80023b4 <HAL_Delay>
      ms += 10U;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	330a      	adds	r3, #10
 800c642:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fa25 	bl	800ca94 <USB_GetMode>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d01e      	beq.n	800c68e <USB_SetCurrentMode+0x84>
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2bc7      	cmp	r3, #199	@ 0xc7
 800c654:	d9f0      	bls.n	800c638 <USB_SetCurrentMode+0x2e>
 800c656:	e01a      	b.n	800c68e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d115      	bne.n	800c68a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c66a:	200a      	movs	r0, #10
 800c66c:	f7f5 fea2 	bl	80023b4 <HAL_Delay>
      ms += 10U;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	330a      	adds	r3, #10
 800c674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fa0c 	bl	800ca94 <USB_GetMode>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <USB_SetCurrentMode+0x84>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2bc7      	cmp	r3, #199	@ 0xc7
 800c686:	d9f0      	bls.n	800c66a <USB_SetCurrentMode+0x60>
 800c688:	e001      	b.n	800c68e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e005      	b.n	800c69a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2bc8      	cmp	r3, #200	@ 0xc8
 800c692:	d101      	bne.n	800c698 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e000      	b.n	800c69a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6a4:	b084      	sub	sp, #16
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b086      	sub	sp, #24
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c6b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c6be:	2300      	movs	r3, #0
 800c6c0:	613b      	str	r3, [r7, #16]
 800c6c2:	e009      	b.n	800c6d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	3340      	adds	r3, #64	@ 0x40
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	613b      	str	r3, [r7, #16]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	2b0e      	cmp	r3, #14
 800c6dc:	d9f2      	bls.n	800c6c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c6de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d11c      	bne.n	800c720 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6f4:	f043 0302 	orr.w	r3, r3, #2
 800c6f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	e005      	b.n	800c72c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c724:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c732:	461a      	mov	r2, r3
 800c734:	2300      	movs	r3, #0
 800c736:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c738:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10d      	bne.n	800c75c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c744:	2b00      	cmp	r3, #0
 800c746:	d104      	bne.n	800c752 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c748:	2100      	movs	r1, #0
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f968 	bl	800ca20 <USB_SetDevSpeed>
 800c750:	e008      	b.n	800c764 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c752:	2101      	movs	r1, #1
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f963 	bl	800ca20 <USB_SetDevSpeed>
 800c75a:	e003      	b.n	800c764 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c75c:	2103      	movs	r1, #3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f95e 	bl	800ca20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c764:	2110      	movs	r1, #16
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f8fa 	bl	800c960 <USB_FlushTxFifo>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f924 	bl	800c9c4 <USB_FlushRxFifo>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c78c:	461a      	mov	r2, r3
 800c78e:	2300      	movs	r3, #0
 800c790:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c798:	461a      	mov	r2, r3
 800c79a:	2300      	movs	r3, #0
 800c79c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	613b      	str	r3, [r7, #16]
 800c7ae:	e043      	b.n	800c838 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7c6:	d118      	bne.n	800c7fa <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10a      	bne.n	800c7e4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	e013      	b.n	800c80c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	015a      	lsls	r2, r3, #5
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	e008      	b.n	800c80c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c806:	461a      	mov	r2, r3
 800c808:	2300      	movs	r3, #0
 800c80a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c818:	461a      	mov	r2, r3
 800c81a:	2300      	movs	r3, #0
 800c81c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c82a:	461a      	mov	r2, r3
 800c82c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	3301      	adds	r3, #1
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c83c:	461a      	mov	r2, r3
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	4293      	cmp	r3, r2
 800c842:	d3b5      	bcc.n	800c7b0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c844:	2300      	movs	r3, #0
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	e043      	b.n	800c8d2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c85c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c860:	d118      	bne.n	800c894 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10a      	bne.n	800c87e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c874:	461a      	mov	r2, r3
 800c876:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c87a:	6013      	str	r3, [r2, #0]
 800c87c:	e013      	b.n	800c8a6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88a:	461a      	mov	r2, r3
 800c88c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	e008      	b.n	800c8a6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c8ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d3b5      	bcc.n	800c84a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c8fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c904:	2b00      	cmp	r3, #0
 800c906:	d105      	bne.n	800c914 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	f043 0210 	orr.w	r2, r3, #16
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699a      	ldr	r2, [r3, #24]
 800c918:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <USB_DevInit+0x2b4>)
 800c91a:	4313      	orrs	r3, r2
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c920:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	f043 0208 	orr.w	r2, r3, #8
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c934:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d105      	bne.n	800c948 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	699a      	ldr	r2, [r3, #24]
 800c940:	4b06      	ldr	r3, [pc, #24]	@ (800c95c <USB_DevInit+0x2b8>)
 800c942:	4313      	orrs	r3, r2
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c954:	b004      	add	sp, #16
 800c956:	4770      	bx	lr
 800c958:	803c3800 	.word	0x803c3800
 800c95c:	40000004 	.word	0x40000004

0800c960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c97a:	d901      	bls.n	800c980 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e01b      	b.n	800c9b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	2b00      	cmp	r3, #0
 800c986:	daf2      	bge.n	800c96e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	019b      	lsls	r3, r3, #6
 800c990:	f043 0220 	orr.w	r2, r3, #32
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3301      	adds	r3, #1
 800c99c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9a4:	d901      	bls.n	800c9aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e006      	b.n	800c9b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	f003 0320 	and.w	r3, r3, #32
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	d0f0      	beq.n	800c998 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9dc:	d901      	bls.n	800c9e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e018      	b.n	800ca14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	daf2      	bge.n	800c9d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2210      	movs	r2, #16
 800c9f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca00:	d901      	bls.n	800ca06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca02:	2303      	movs	r3, #3
 800ca04:	e006      	b.n	800ca14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f003 0310 	and.w	r3, r3, #16
 800ca0e:	2b10      	cmp	r3, #16
 800ca10:	d0f0      	beq.n	800c9f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	78fb      	ldrb	r3, [r7, #3]
 800ca3a:	68f9      	ldr	r1, [r7, #12]
 800ca3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca40:	4313      	orrs	r3, r2
 800ca42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b085      	sub	sp, #20
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca6c:	f023 0303 	bic.w	r3, r3, #3
 800ca70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca80:	f043 0302 	orr.w	r3, r3, #2
 800ca84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	f003 0301 	and.w	r3, r3, #1
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cac8:	d901      	bls.n	800cace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e022      	b.n	800cb14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	daf2      	bge.n	800cabc <USB_CoreReset+0xc>

  count = 10U;
 800cad6:	230a      	movs	r3, #10
 800cad8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800cada:	e002      	b.n	800cae2 <USB_CoreReset+0x32>
  {
    count--;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3b01      	subs	r3, #1
 800cae0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f9      	bne.n	800cadc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	f043 0201 	orr.w	r2, r3, #1
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3301      	adds	r3, #1
 800caf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb00:	d901      	bls.n	800cb06 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800cb02:	2303      	movs	r3, #3
 800cb04:	e006      	b.n	800cb14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d0f0      	beq.n	800caf4 <USB_CoreReset+0x44>

  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800cb26:	4b96      	ldr	r3, [pc, #600]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb28:	22c0      	movs	r2, #192	@ 0xc0
 800cb2a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800cb2c:	4b94      	ldr	r3, [pc, #592]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb2e:	22a8      	movs	r2, #168	@ 0xa8
 800cb30:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800cb32:	4b93      	ldr	r3, [pc, #588]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb34:	2201      	movs	r2, #1
 800cb36:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800cb38:	4b91      	ldr	r3, [pc, #580]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb3a:	22a8      	movs	r2, #168	@ 0xa8
 800cb3c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800cb3e:	4b91      	ldr	r3, [pc, #580]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cb40:	22ff      	movs	r2, #255	@ 0xff
 800cb42:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800cb44:	4b8f      	ldr	r3, [pc, #572]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cb46:	22ff      	movs	r2, #255	@ 0xff
 800cb48:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800cb4a:	4b8e      	ldr	r3, [pc, #568]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cb4c:	22ff      	movs	r2, #255	@ 0xff
 800cb4e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800cb50:	4b8c      	ldr	r3, [pc, #560]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800cb56:	4b8c      	ldr	r3, [pc, #560]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800cb5c:	4b8a      	ldr	r3, [pc, #552]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800cb62:	4b89      	ldr	r3, [pc, #548]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800cb68:	4b87      	ldr	r3, [pc, #540]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800cb6e:	2100      	movs	r1, #0
 800cb70:	2000      	movs	r0, #0
 800cb72:	f005 f873 	bl	8011c5c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800cb76:	4b82      	ldr	r3, [pc, #520]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	061a      	lsls	r2, r3, #24
 800cb7c:	4b80      	ldr	r3, [pc, #512]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	041b      	lsls	r3, r3, #16
 800cb82:	431a      	orrs	r2, r3
 800cb84:	4b7e      	ldr	r3, [pc, #504]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb86:	789b      	ldrb	r3, [r3, #2]
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	4a7c      	ldr	r2, [pc, #496]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb8e:	78d2      	ldrb	r2, [r2, #3]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	061a      	lsls	r2, r3, #24
 800cb94:	4b7a      	ldr	r3, [pc, #488]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	0619      	lsls	r1, r3, #24
 800cb9a:	4b79      	ldr	r3, [pc, #484]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cb9c:	785b      	ldrb	r3, [r3, #1]
 800cb9e:	041b      	lsls	r3, r3, #16
 800cba0:	4319      	orrs	r1, r3
 800cba2:	4b77      	ldr	r3, [pc, #476]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cba4:	789b      	ldrb	r3, [r3, #2]
 800cba6:	021b      	lsls	r3, r3, #8
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	4975      	ldr	r1, [pc, #468]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbac:	78c9      	ldrb	r1, [r1, #3]
 800cbae:	430b      	orrs	r3, r1
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	4b71      	ldr	r3, [pc, #452]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	0619      	lsls	r1, r3, #24
 800cbbe:	4b70      	ldr	r3, [pc, #448]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	041b      	lsls	r3, r3, #16
 800cbc4:	4319      	orrs	r1, r3
 800cbc6:	4b6e      	ldr	r3, [pc, #440]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbc8:	789b      	ldrb	r3, [r3, #2]
 800cbca:	021b      	lsls	r3, r3, #8
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	496c      	ldr	r1, [pc, #432]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbd0:	78c9      	ldrb	r1, [r1, #3]
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	0a1b      	lsrs	r3, r3, #8
 800cbd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	4b68      	ldr	r3, [pc, #416]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	0619      	lsls	r1, r3, #24
 800cbe2:	4b67      	ldr	r3, [pc, #412]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	041b      	lsls	r3, r3, #16
 800cbe8:	4319      	orrs	r1, r3
 800cbea:	4b65      	ldr	r3, [pc, #404]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbec:	789b      	ldrb	r3, [r3, #2]
 800cbee:	021b      	lsls	r3, r3, #8
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	4963      	ldr	r1, [pc, #396]	@ (800cd80 <MX_LWIP_Init+0x260>)
 800cbf4:	78c9      	ldrb	r1, [r1, #3]
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	0e1b      	lsrs	r3, r3, #24
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	4a63      	ldr	r2, [pc, #396]	@ (800cd8c <MX_LWIP_Init+0x26c>)
 800cbfe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800cc00:	4b60      	ldr	r3, [pc, #384]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	061a      	lsls	r2, r3, #24
 800cc06:	4b5f      	ldr	r3, [pc, #380]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc08:	785b      	ldrb	r3, [r3, #1]
 800cc0a:	041b      	lsls	r3, r3, #16
 800cc0c:	431a      	orrs	r2, r3
 800cc0e:	4b5d      	ldr	r3, [pc, #372]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc10:	789b      	ldrb	r3, [r3, #2]
 800cc12:	021b      	lsls	r3, r3, #8
 800cc14:	4313      	orrs	r3, r2
 800cc16:	4a5b      	ldr	r2, [pc, #364]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc18:	78d2      	ldrb	r2, [r2, #3]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	061a      	lsls	r2, r3, #24
 800cc1e:	4b59      	ldr	r3, [pc, #356]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	0619      	lsls	r1, r3, #24
 800cc24:	4b57      	ldr	r3, [pc, #348]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc26:	785b      	ldrb	r3, [r3, #1]
 800cc28:	041b      	lsls	r3, r3, #16
 800cc2a:	4319      	orrs	r1, r3
 800cc2c:	4b55      	ldr	r3, [pc, #340]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc2e:	789b      	ldrb	r3, [r3, #2]
 800cc30:	021b      	lsls	r3, r3, #8
 800cc32:	430b      	orrs	r3, r1
 800cc34:	4953      	ldr	r1, [pc, #332]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc36:	78c9      	ldrb	r1, [r1, #3]
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	021b      	lsls	r3, r3, #8
 800cc3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc40:	431a      	orrs	r2, r3
 800cc42:	4b50      	ldr	r3, [pc, #320]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	0619      	lsls	r1, r3, #24
 800cc48:	4b4e      	ldr	r3, [pc, #312]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	041b      	lsls	r3, r3, #16
 800cc4e:	4319      	orrs	r1, r3
 800cc50:	4b4c      	ldr	r3, [pc, #304]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc52:	789b      	ldrb	r3, [r3, #2]
 800cc54:	021b      	lsls	r3, r3, #8
 800cc56:	430b      	orrs	r3, r1
 800cc58:	494a      	ldr	r1, [pc, #296]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc5a:	78c9      	ldrb	r1, [r1, #3]
 800cc5c:	430b      	orrs	r3, r1
 800cc5e:	0a1b      	lsrs	r3, r3, #8
 800cc60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cc64:	431a      	orrs	r2, r3
 800cc66:	4b47      	ldr	r3, [pc, #284]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	0619      	lsls	r1, r3, #24
 800cc6c:	4b45      	ldr	r3, [pc, #276]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc6e:	785b      	ldrb	r3, [r3, #1]
 800cc70:	041b      	lsls	r3, r3, #16
 800cc72:	4319      	orrs	r1, r3
 800cc74:	4b43      	ldr	r3, [pc, #268]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc76:	789b      	ldrb	r3, [r3, #2]
 800cc78:	021b      	lsls	r3, r3, #8
 800cc7a:	430b      	orrs	r3, r1
 800cc7c:	4941      	ldr	r1, [pc, #260]	@ (800cd84 <MX_LWIP_Init+0x264>)
 800cc7e:	78c9      	ldrb	r1, [r1, #3]
 800cc80:	430b      	orrs	r3, r1
 800cc82:	0e1b      	lsrs	r3, r3, #24
 800cc84:	4313      	orrs	r3, r2
 800cc86:	4a42      	ldr	r2, [pc, #264]	@ (800cd90 <MX_LWIP_Init+0x270>)
 800cc88:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800cc8a:	4b3f      	ldr	r3, [pc, #252]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	061a      	lsls	r2, r3, #24
 800cc90:	4b3d      	ldr	r3, [pc, #244]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	041b      	lsls	r3, r3, #16
 800cc96:	431a      	orrs	r2, r3
 800cc98:	4b3b      	ldr	r3, [pc, #236]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cc9a:	789b      	ldrb	r3, [r3, #2]
 800cc9c:	021b      	lsls	r3, r3, #8
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	4a39      	ldr	r2, [pc, #228]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cca2:	78d2      	ldrb	r2, [r2, #3]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	061a      	lsls	r2, r3, #24
 800cca8:	4b37      	ldr	r3, [pc, #220]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	0619      	lsls	r1, r3, #24
 800ccae:	4b36      	ldr	r3, [pc, #216]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	4319      	orrs	r1, r3
 800ccb6:	4b34      	ldr	r3, [pc, #208]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	430b      	orrs	r3, r1
 800ccbe:	4932      	ldr	r1, [pc, #200]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccc0:	78c9      	ldrb	r1, [r1, #3]
 800ccc2:	430b      	orrs	r3, r1
 800ccc4:	021b      	lsls	r3, r3, #8
 800ccc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccca:	431a      	orrs	r2, r3
 800cccc:	4b2e      	ldr	r3, [pc, #184]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	0619      	lsls	r1, r3, #24
 800ccd2:	4b2d      	ldr	r3, [pc, #180]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccd4:	785b      	ldrb	r3, [r3, #1]
 800ccd6:	041b      	lsls	r3, r3, #16
 800ccd8:	4319      	orrs	r1, r3
 800ccda:	4b2b      	ldr	r3, [pc, #172]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccdc:	789b      	ldrb	r3, [r3, #2]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	430b      	orrs	r3, r1
 800cce2:	4929      	ldr	r1, [pc, #164]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cce4:	78c9      	ldrb	r1, [r1, #3]
 800cce6:	430b      	orrs	r3, r1
 800cce8:	0a1b      	lsrs	r3, r3, #8
 800ccea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	4b25      	ldr	r3, [pc, #148]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	0619      	lsls	r1, r3, #24
 800ccf6:	4b24      	ldr	r3, [pc, #144]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800ccf8:	785b      	ldrb	r3, [r3, #1]
 800ccfa:	041b      	lsls	r3, r3, #16
 800ccfc:	4319      	orrs	r1, r3
 800ccfe:	4b22      	ldr	r3, [pc, #136]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cd00:	789b      	ldrb	r3, [r3, #2]
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	430b      	orrs	r3, r1
 800cd06:	4920      	ldr	r1, [pc, #128]	@ (800cd88 <MX_LWIP_Init+0x268>)
 800cd08:	78c9      	ldrb	r1, [r1, #3]
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	0e1b      	lsrs	r3, r3, #24
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	4a20      	ldr	r2, [pc, #128]	@ (800cd94 <MX_LWIP_Init+0x274>)
 800cd12:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cd14:	4b20      	ldr	r3, [pc, #128]	@ (800cd98 <MX_LWIP_Init+0x278>)
 800cd16:	9302      	str	r3, [sp, #8]
 800cd18:	4b20      	ldr	r3, [pc, #128]	@ (800cd9c <MX_LWIP_Init+0x27c>)
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4b1c      	ldr	r3, [pc, #112]	@ (800cd94 <MX_LWIP_Init+0x274>)
 800cd22:	4a1b      	ldr	r2, [pc, #108]	@ (800cd90 <MX_LWIP_Init+0x270>)
 800cd24:	4919      	ldr	r1, [pc, #100]	@ (800cd8c <MX_LWIP_Init+0x26c>)
 800cd26:	481e      	ldr	r0, [pc, #120]	@ (800cda0 <MX_LWIP_Init+0x280>)
 800cd28:	f005 fd5e 	bl	80127e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800cd2c:	481c      	ldr	r0, [pc, #112]	@ (800cda0 <MX_LWIP_Init+0x280>)
 800cd2e:	f005 ff0d 	bl	8012b4c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800cd32:	481b      	ldr	r0, [pc, #108]	@ (800cda0 <MX_LWIP_Init+0x280>)
 800cd34:	f005 ff1a 	bl	8012b6c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800cd38:	491a      	ldr	r1, [pc, #104]	@ (800cda4 <MX_LWIP_Init+0x284>)
 800cd3a:	4819      	ldr	r0, [pc, #100]	@ (800cda0 <MX_LWIP_Init+0x280>)
 800cd3c:	f006 f818 	bl	8012d70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800cd40:	2224      	movs	r2, #36	@ 0x24
 800cd42:	2100      	movs	r1, #0
 800cd44:	4818      	ldr	r0, [pc, #96]	@ (800cda8 <MX_LWIP_Init+0x288>)
 800cd46:	f010 fc10 	bl	801d56a <memset>
  attributes.name = "EthLink";
 800cd4a:	4b17      	ldr	r3, [pc, #92]	@ (800cda8 <MX_LWIP_Init+0x288>)
 800cd4c:	4a17      	ldr	r2, [pc, #92]	@ (800cdac <MX_LWIP_Init+0x28c>)
 800cd4e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800cd50:	4b15      	ldr	r3, [pc, #84]	@ (800cda8 <MX_LWIP_Init+0x288>)
 800cd52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cd56:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800cd58:	4b13      	ldr	r3, [pc, #76]	@ (800cda8 <MX_LWIP_Init+0x288>)
 800cd5a:	2210      	movs	r2, #16
 800cd5c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800cd5e:	4a12      	ldr	r2, [pc, #72]	@ (800cda8 <MX_LWIP_Init+0x288>)
 800cd60:	490f      	ldr	r1, [pc, #60]	@ (800cda0 <MX_LWIP_Init+0x280>)
 800cd62:	4813      	ldr	r0, [pc, #76]	@ (800cdb0 <MX_LWIP_Init+0x290>)
 800cd64:	f000 fdda 	bl	800d91c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
 800cd68:	4812      	ldr	r0, [pc, #72]	@ (800cdb4 <MX_LWIP_Init+0x294>)
 800cd6a:	f00e f945 	bl	801aff8 <ip4addr_ntoa>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4619      	mov	r1, r3
 800cd72:	4811      	ldr	r0, [pc, #68]	@ (800cdb8 <MX_LWIP_Init+0x298>)
 800cd74:	f010 fb94 	bl	801d4a0 <iprintf>
/* USER CODE END 3 */
}
 800cd78:	bf00      	nop
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20000be0 	.word	0x20000be0
 800cd84:	20000be4 	.word	0x20000be4
 800cd88:	20000be8 	.word	0x20000be8
 800cd8c:	20000bd4 	.word	0x20000bd4
 800cd90:	20000bd8 	.word	0x20000bd8
 800cd94:	20000bdc 	.word	0x20000bdc
 800cd98:	08011b99 	.word	0x08011b99
 800cd9c:	0800d2fd 	.word	0x0800d2fd
 800cda0:	20000ba0 	.word	0x20000ba0
 800cda4:	0800cdbd 	.word	0x0800cdbd
 800cda8:	20000bec 	.word	0x20000bec
 800cdac:	0801e618 	.word	0x0801e618
 800cdb0:	0800d5d5 	.word	0x0800d5d5
 800cdb4:	20000ba4 	.word	0x20000ba4
 800cdb8:	0801e620 	.word	0x0801e620

0800cdbc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800cde2:	2320      	movs	r3, #32
 800cde4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cde6:	f3bf 8f4f 	dsb	sy
}
 800cdea:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800cdec:	e00b      	b.n	800ce06 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800cdee:	4a0d      	ldr	r2, [pc, #52]	@ (800ce24 <SCB_InvalidateDCache_by_Addr+0x54>)
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	dcf0      	bgt.n	800cdee <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800ce0c:	f3bf 8f4f 	dsb	sy
}
 800ce10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce12:	f3bf 8f6f 	isb	sy
}
 800ce16:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800ce18:	bf00      	nop
 800ce1a:	371c      	adds	r7, #28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	e000ed00 	.word	0xe000ed00

0800ce28 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ce30:	4b04      	ldr	r3, [pc, #16]	@ (800ce44 <HAL_ETH_RxCpltCallback+0x1c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 f88f 	bl	800df58 <osSemaphoreRelease>
}
 800ce3a:	bf00      	nop
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20009f1c 	.word	0x20009f1c

0800ce48 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800ce50:	4b04      	ldr	r3, [pc, #16]	@ (800ce64 <HAL_ETH_TxCpltCallback+0x1c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 f87f 	bl	800df58 <osSemaphoreRelease>
}
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20009f20 	.word	0x20009f20

0800ce68 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7f7 fef2 	bl	8004c5a <HAL_ETH_GetDMAError>
 800ce76:	4603      	mov	r3, r0
 800ce78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce7c:	2b80      	cmp	r3, #128	@ 0x80
 800ce7e:	d104      	bne.n	800ce8a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800ce80:	4b04      	ldr	r3, [pc, #16]	@ (800ce94 <HAL_ETH_ErrorCallback+0x2c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f001 f867 	bl	800df58 <osSemaphoreRelease>
  }
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	20009f1c 	.word	0x20009f1c

0800ce98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b0aa      	sub	sp, #168	@ 0xa8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800ceb2:	f107 0310 	add.w	r3, r7, #16
 800ceb6:	2264      	movs	r2, #100	@ 0x64
 800ceb8:	2100      	movs	r1, #0
 800ceba:	4618      	mov	r0, r3
 800cebc:	f010 fb55 	bl	801d56a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800cec0:	4b89      	ldr	r3, [pc, #548]	@ (800d0e8 <low_level_init+0x250>)
 800cec2:	4a8a      	ldr	r2, [pc, #552]	@ (800d0ec <low_level_init+0x254>)
 800cec4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800cec6:	2300      	movs	r3, #0
 800cec8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ceca:	2380      	movs	r3, #128	@ 0x80
 800cecc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800cece:	23e1      	movs	r3, #225	@ 0xe1
 800ced0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ced2:	2300      	movs	r3, #0
 800ced4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ced6:	2300      	movs	r3, #0
 800ced8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ceda:	2300      	movs	r3, #0
 800cedc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800cede:	4a82      	ldr	r2, [pc, #520]	@ (800d0e8 <low_level_init+0x250>)
 800cee0:	f107 0308 	add.w	r3, r7, #8
 800cee4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800cee6:	4b80      	ldr	r3, [pc, #512]	@ (800d0e8 <low_level_init+0x250>)
 800cee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800ceec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ceee:	4b7e      	ldr	r3, [pc, #504]	@ (800d0e8 <low_level_init+0x250>)
 800cef0:	4a7f      	ldr	r2, [pc, #508]	@ (800d0f0 <low_level_init+0x258>)
 800cef2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800cef4:	4b7c      	ldr	r3, [pc, #496]	@ (800d0e8 <low_level_init+0x250>)
 800cef6:	4a7f      	ldr	r2, [pc, #508]	@ (800d0f4 <low_level_init+0x25c>)
 800cef8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800cefa:	4b7b      	ldr	r3, [pc, #492]	@ (800d0e8 <low_level_init+0x250>)
 800cefc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800cf00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800cf02:	4879      	ldr	r0, [pc, #484]	@ (800d0e8 <low_level_init+0x250>)
 800cf04:	f7f7 f860 	bl	8003fc8 <HAL_ETH_Init>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800cf0e:	2238      	movs	r2, #56	@ 0x38
 800cf10:	2100      	movs	r1, #0
 800cf12:	4879      	ldr	r0, [pc, #484]	@ (800d0f8 <low_level_init+0x260>)
 800cf14:	f010 fb29 	bl	801d56a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800cf18:	4b77      	ldr	r3, [pc, #476]	@ (800d0f8 <low_level_init+0x260>)
 800cf1a:	2221      	movs	r2, #33	@ 0x21
 800cf1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800cf1e:	4b76      	ldr	r3, [pc, #472]	@ (800d0f8 <low_level_init+0x260>)
 800cf20:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800cf24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800cf26:	4b74      	ldr	r3, [pc, #464]	@ (800d0f8 <low_level_init+0x260>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800cf2c:	4873      	ldr	r0, [pc, #460]	@ (800d0fc <low_level_init+0x264>)
 800cf2e:	f005 fb15 	bl	801255c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2206      	movs	r2, #6
 800cf36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800cf3a:	4b6b      	ldr	r3, [pc, #428]	@ (800d0e8 <low_level_init+0x250>)
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	781a      	ldrb	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800cf46:	4b68      	ldr	r3, [pc, #416]	@ (800d0e8 <low_level_init+0x250>)
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	785a      	ldrb	r2, [r3, #1]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cf52:	4b65      	ldr	r3, [pc, #404]	@ (800d0e8 <low_level_init+0x250>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	789a      	ldrb	r2, [r3, #2]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cf5e:	4b62      	ldr	r3, [pc, #392]	@ (800d0e8 <low_level_init+0x250>)
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	78da      	ldrb	r2, [r3, #3]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cf6a:	4b5f      	ldr	r3, [pc, #380]	@ (800d0e8 <low_level_init+0x250>)
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	791a      	ldrb	r2, [r3, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cf76:	4b5c      	ldr	r3, [pc, #368]	@ (800d0e8 <low_level_init+0x250>)
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	795a      	ldrb	r2, [r3, #5]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800cf88:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf90:	f043 030a 	orr.w	r3, r3, #10
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	f000 fed7 	bl	800dd54 <osSemaphoreNew>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4a55      	ldr	r2, [pc, #340]	@ (800d100 <low_level_init+0x268>)
 800cfaa:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800cfac:	2200      	movs	r2, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	f000 fecf 	bl	800dd54 <osSemaphoreNew>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4a52      	ldr	r2, [pc, #328]	@ (800d104 <low_level_init+0x26c>)
 800cfba:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800cfbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800cfc0:	2224      	movs	r2, #36	@ 0x24
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f010 fad0 	bl	801d56a <memset>
  attributes.name = "EthIf";
 800cfca:	4b4f      	ldr	r3, [pc, #316]	@ (800d108 <low_level_init+0x270>)
 800cfcc:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800cfce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800cfd6:	2330      	movs	r3, #48	@ 0x30
 800cfd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800cfdc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	4849      	ldr	r0, [pc, #292]	@ (800d10c <low_level_init+0x274>)
 800cfe6:	f000 fc99 	bl	800d91c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800cfea:	4949      	ldr	r1, [pc, #292]	@ (800d110 <low_level_init+0x278>)
 800cfec:	4849      	ldr	r0, [pc, #292]	@ (800d114 <low_level_init+0x27c>)
 800cfee:	f7f5 f8ae 	bl	800214e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800cff2:	4848      	ldr	r0, [pc, #288]	@ (800d114 <low_level_init+0x27c>)
 800cff4:	f7f5 f8dd 	bl	80021b2 <LAN8742_Init>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d006      	beq.n	800d00c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f005 fe86 	bl	8012d10 <netif_set_link_down>
    netif_set_down(netif);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f005 fe1d 	bl	8012c44 <netif_set_down>
 800d00a:	e06a      	b.n	800d0e2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800d00c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d010:	2b00      	cmp	r3, #0
 800d012:	d164      	bne.n	800d0de <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d014:	483f      	ldr	r0, [pc, #252]	@ (800d114 <low_level_init+0x27c>)
 800d016:	f7f5 f919 	bl	800224c <LAN8742_GetLinkState>
 800d01a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800d01e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d022:	2b01      	cmp	r3, #1
 800d024:	dc06      	bgt.n	800d034 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f005 fe72 	bl	8012d10 <netif_set_link_down>
      netif_set_down(netif);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f005 fe09 	bl	8012c44 <netif_set_down>
 800d032:	e056      	b.n	800d0e2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800d034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d038:	3b02      	subs	r3, #2
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d82a      	bhi.n	800d094 <low_level_init+0x1fc>
 800d03e:	a201      	add	r2, pc, #4	@ (adr r2, 800d044 <low_level_init+0x1ac>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d055 	.word	0x0800d055
 800d048:	0800d067 	.word	0x0800d067
 800d04c:	0800d077 	.word	0x0800d077
 800d050:	0800d087 	.word	0x0800d087
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800d054:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d058:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800d05c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800d064:	e01f      	b.n	800d0a6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800d066:	2300      	movs	r3, #0
 800d068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800d06c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800d074:	e017      	b.n	800d0a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800d076:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d07a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800d07e:	2300      	movs	r3, #0
 800d080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800d084:	e00f      	b.n	800d0a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800d086:	2300      	movs	r3, #0
 800d088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800d08c:	2300      	movs	r3, #0
 800d08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800d092:	e008      	b.n	800d0a6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800d094:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800d09c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d0a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800d0a4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d0a6:	f107 0310 	add.w	r3, r7, #16
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	480e      	ldr	r0, [pc, #56]	@ (800d0e8 <low_level_init+0x250>)
 800d0ae:	f7f7 fc73 	bl	8004998 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800d0b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800d0b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d0be:	f107 0310 	add.w	r3, r7, #16
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4808      	ldr	r0, [pc, #32]	@ (800d0e8 <low_level_init+0x250>)
 800d0c6:	f7f7 fd5e 	bl	8004b86 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800d0ca:	4807      	ldr	r0, [pc, #28]	@ (800d0e8 <low_level_init+0x250>)
 800d0cc:	f7f7 f816 	bl	80040fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f005 fd4b 	bl	8012b6c <netif_set_up>
    netif_set_link_up(netif);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f005 fde6 	bl	8012ca8 <netif_set_link_up>
 800d0dc:	e001      	b.n	800d0e2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800d0de:	f7f4 f8f9 	bl	80012d4 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800d0e2:	37a8      	adds	r7, #168	@ 0xa8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20009f24 	.word	0x20009f24
 800d0ec:	40028000 	.word	0x40028000
 800d0f0:	2000012c 	.word	0x2000012c
 800d0f4:	2000008c 	.word	0x2000008c
 800d0f8:	20009fd4 	.word	0x20009fd4
 800d0fc:	08021988 	.word	0x08021988
 800d100:	20009f1c 	.word	0x20009f1c
 800d104:	20009f20 	.word	0x20009f20
 800d108:	0801e62c 	.word	0x0801e62c
 800d10c:	0800d2a9 	.word	0x0800d2a9
 800d110:	2000000c 	.word	0x2000000c
 800d114:	2000a00c 	.word	0x2000a00c

0800d118 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b092      	sub	sp, #72	@ 0x48
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800d126:	2300      	movs	r3, #0
 800d128:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800d130:	f107 030c 	add.w	r3, r7, #12
 800d134:	2230      	movs	r2, #48	@ 0x30
 800d136:	2100      	movs	r1, #0
 800d138:	4618      	mov	r0, r3
 800d13a:	f010 fa16 	bl	801d56a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800d13e:	f107 030c 	add.w	r3, r7, #12
 800d142:	2230      	movs	r2, #48	@ 0x30
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f010 fa0f 	bl	801d56a <memset>

  for(q = p; q != NULL; q = q->next)
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d150:	e045      	b.n	800d1de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800d152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d154:	2b03      	cmp	r3, #3
 800d156:	d902      	bls.n	800d15e <low_level_output+0x46>
      return ERR_IF;
 800d158:	f06f 030b 	mvn.w	r3, #11
 800d15c:	e07f      	b.n	800d25e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800d15e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d160:	6859      	ldr	r1, [r3, #4]
 800d162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	3348      	adds	r3, #72	@ 0x48
 800d16e:	443b      	add	r3, r7
 800d170:	3b3c      	subs	r3, #60	@ 0x3c
 800d172:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800d174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d176:	895b      	ldrh	r3, [r3, #10]
 800d178:	4619      	mov	r1, r3
 800d17a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d17c:	4613      	mov	r3, r2
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	3348      	adds	r3, #72	@ 0x48
 800d186:	443b      	add	r3, r7
 800d188:	3b38      	subs	r3, #56	@ 0x38
 800d18a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800d18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d011      	beq.n	800d1b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800d192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d194:	1e5a      	subs	r2, r3, #1
 800d196:	f107 000c 	add.w	r0, r7, #12
 800d19a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d19c:	460b      	mov	r3, r1
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	440b      	add	r3, r1
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	18c1      	adds	r1, r0, r3
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	4413      	add	r3, r2
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	3348      	adds	r3, #72	@ 0x48
 800d1b0:	443b      	add	r3, r7
 800d1b2:	3b34      	subs	r3, #52	@ 0x34
 800d1b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800d1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800d1be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	4413      	add	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	3348      	adds	r3, #72	@ 0x48
 800d1ca:	443b      	add	r3, r7
 800d1cc:	3b34      	subs	r3, #52	@ 0x34
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800d1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800d1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1b6      	bne.n	800d152 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	891b      	ldrh	r3, [r3, #8]
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800d268 <low_level_output+0x150>)
 800d1ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800d1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800d268 <low_level_output+0x150>)
 800d1f0:	f107 030c 	add.w	r3, r7, #12
 800d1f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800d1f6:	4a1c      	ldr	r2, [pc, #112]	@ (800d268 <low_level_output+0x150>)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800d1fc:	6838      	ldr	r0, [r7, #0]
 800d1fe:	f006 fa0b 	bl	8013618 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800d202:	4919      	ldr	r1, [pc, #100]	@ (800d268 <low_level_output+0x150>)
 800d204:	4819      	ldr	r0, [pc, #100]	@ (800d26c <low_level_output+0x154>)
 800d206:	f7f7 f869 	bl	80042dc <HAL_ETH_Transmit_IT>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d103      	bne.n	800d218 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d216:	e01b      	b.n	800d250 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800d218:	4814      	ldr	r0, [pc, #80]	@ (800d26c <low_level_output+0x154>)
 800d21a:	f7f7 fd11 	bl	8004c40 <HAL_ETH_GetError>
 800d21e:	4603      	mov	r3, r0
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00d      	beq.n	800d244 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800d228:	4b11      	ldr	r3, [pc, #68]	@ (800d270 <low_level_output+0x158>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800d230:	4618      	mov	r0, r3
 800d232:	f000 fe2b 	bl	800de8c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800d236:	480d      	ldr	r0, [pc, #52]	@ (800d26c <low_level_output+0x154>)
 800d238:	f7f7 f9f0 	bl	800461c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800d23c:	23fe      	movs	r3, #254	@ 0xfe
 800d23e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d242:	e005      	b.n	800d250 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800d244:	6838      	ldr	r0, [r7, #0]
 800d246:	f006 f941 	bl	80134cc <pbuf_free>
        errval =  ERR_IF;
 800d24a:	23f4      	movs	r3, #244	@ 0xf4
 800d24c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800d250:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d254:	f113 0f02 	cmn.w	r3, #2
 800d258:	d0d3      	beq.n	800d202 <low_level_output+0xea>

  return errval;
 800d25a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3748      	adds	r7, #72	@ 0x48
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20009fd4 	.word	0x20009fd4
 800d26c:	20009f24 	.word	0x20009f24
 800d270:	20009f20 	.word	0x20009f20

0800d274 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800d280:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <low_level_input+0x2c>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d105      	bne.n	800d294 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800d288:	f107 030c 	add.w	r3, r7, #12
 800d28c:	4619      	mov	r1, r3
 800d28e:	4805      	ldr	r0, [pc, #20]	@ (800d2a4 <low_level_input+0x30>)
 800d290:	f7f7 f880 	bl	8004394 <HAL_ETH_ReadData>
  }

  return p;
 800d294:	68fb      	ldr	r3, [r7, #12]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	20009f18 	.word	0x20009f18
 800d2a4:	20009f24 	.word	0x20009f24

0800d2a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f8 <ethernetif_input+0x50>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f04f 31ff 	mov.w	r1, #4294967295
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 fde3 	bl	800de8c <osSemaphoreAcquire>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1f5      	bne.n	800d2b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800d2cc:	68b8      	ldr	r0, [r7, #8]
 800d2ce:	f7ff ffd1 	bl	800d274 <low_level_input>
 800d2d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	4798      	blx	r3
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f006 f8ee 	bl	80134cc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1ea      	bne.n	800d2cc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d2f6:	e7df      	b.n	800d2b8 <ethernetif_input+0x10>
 800d2f8:	20009f1c 	.word	0x20009f1c

0800d2fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d106      	bne.n	800d318 <ethernetif_init+0x1c>
 800d30a:	4b0e      	ldr	r3, [pc, #56]	@ (800d344 <ethernetif_init+0x48>)
 800d30c:	f240 220d 	movw	r2, #525	@ 0x20d
 800d310:	490d      	ldr	r1, [pc, #52]	@ (800d348 <ethernetif_init+0x4c>)
 800d312:	480e      	ldr	r0, [pc, #56]	@ (800d34c <ethernetif_init+0x50>)
 800d314:	f010 f8c4 	bl	801d4a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2273      	movs	r2, #115	@ 0x73
 800d31c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2274      	movs	r2, #116	@ 0x74
 800d324:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a09      	ldr	r2, [pc, #36]	@ (800d350 <ethernetif_init+0x54>)
 800d32c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a08      	ldr	r2, [pc, #32]	@ (800d354 <ethernetif_init+0x58>)
 800d332:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff fdaf 	bl	800ce98 <low_level_init>

  return ERR_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	0801e634 	.word	0x0801e634
 800d348:	0801e650 	.word	0x0801e650
 800d34c:	0801e660 	.word	0x0801e660
 800d350:	0801a12d 	.word	0x0801a12d
 800d354:	0800d119 	.word	0x0800d119

0800d358 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800d364:	68f9      	ldr	r1, [r7, #12]
 800d366:	4809      	ldr	r0, [pc, #36]	@ (800d38c <pbuf_free_custom+0x34>)
 800d368:	f005 f9e8 	bl	801273c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800d36c:	4b08      	ldr	r3, [pc, #32]	@ (800d390 <pbuf_free_custom+0x38>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d107      	bne.n	800d384 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800d374:	4b06      	ldr	r3, [pc, #24]	@ (800d390 <pbuf_free_custom+0x38>)
 800d376:	2200      	movs	r2, #0
 800d378:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800d37a:	4b06      	ldr	r3, [pc, #24]	@ (800d394 <pbuf_free_custom+0x3c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f000 fdea 	bl	800df58 <osSemaphoreRelease>
  }
}
 800d384:	bf00      	nop
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	08021988 	.word	0x08021988
 800d390:	20009f18 	.word	0x20009f18
 800d394:	20009f1c 	.word	0x20009f1c

0800d398 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d39c:	f7f4 fffe 	bl	800239c <HAL_GetTick>
 800d3a0:	4603      	mov	r3, r0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08e      	sub	sp, #56	@ 0x38
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	605a      	str	r2, [r3, #4]
 800d3ba:	609a      	str	r2, [r3, #8]
 800d3bc:	60da      	str	r2, [r3, #12]
 800d3be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a56      	ldr	r2, [pc, #344]	@ (800d520 <HAL_ETH_MspInit+0x178>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	f040 80a6 	bne.w	800d518 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800d3cc:	4b55      	ldr	r3, [pc, #340]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3d0:	4a54      	ldr	r2, [pc, #336]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d3d6:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3d8:	4b52      	ldr	r3, [pc, #328]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3e0:	623b      	str	r3, [r7, #32]
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	4b4f      	ldr	r3, [pc, #316]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3e8:	4a4e      	ldr	r2, [pc, #312]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d3ee:	6313      	str	r3, [r2, #48]	@ 0x30
 800d3f0:	4b4c      	ldr	r3, [pc, #304]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d3f8:	61fb      	str	r3, [r7, #28]
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	4b49      	ldr	r3, [pc, #292]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d3fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d400:	4a48      	ldr	r2, [pc, #288]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d406:	6313      	str	r3, [r2, #48]	@ 0x30
 800d408:	4b46      	ldr	r3, [pc, #280]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d40a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d40c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d414:	4b43      	ldr	r3, [pc, #268]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d418:	4a42      	ldr	r2, [pc, #264]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d41a:	f043 0304 	orr.w	r3, r3, #4
 800d41e:	6313      	str	r3, [r2, #48]	@ 0x30
 800d420:	4b40      	ldr	r3, [pc, #256]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d42c:	4b3d      	ldr	r3, [pc, #244]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d430:	4a3c      	ldr	r2, [pc, #240]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d432:	f043 0301 	orr.w	r3, r3, #1
 800d436:	6313      	str	r3, [r2, #48]	@ 0x30
 800d438:	4b3a      	ldr	r3, [pc, #232]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	613b      	str	r3, [r7, #16]
 800d442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d444:	4b37      	ldr	r3, [pc, #220]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d448:	4a36      	ldr	r2, [pc, #216]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d44a:	f043 0302 	orr.w	r3, r3, #2
 800d44e:	6313      	str	r3, [r2, #48]	@ 0x30
 800d450:	4b34      	ldr	r3, [pc, #208]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d45c:	4b31      	ldr	r3, [pc, #196]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d460:	4a30      	ldr	r2, [pc, #192]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d466:	6313      	str	r3, [r2, #48]	@ 0x30
 800d468:	4b2e      	ldr	r3, [pc, #184]	@ (800d524 <HAL_ETH_MspInit+0x17c>)
 800d46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d470:	60bb      	str	r3, [r7, #8]
 800d472:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800d474:	2332      	movs	r3, #50	@ 0x32
 800d476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d478:	2302      	movs	r3, #2
 800d47a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d47c:	2300      	movs	r3, #0
 800d47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d480:	2303      	movs	r3, #3
 800d482:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d484:	230b      	movs	r3, #11
 800d486:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d48c:	4619      	mov	r1, r3
 800d48e:	4826      	ldr	r0, [pc, #152]	@ (800d528 <HAL_ETH_MspInit+0x180>)
 800d490:	f7f8 f810 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800d494:	2386      	movs	r3, #134	@ 0x86
 800d496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d498:	2302      	movs	r3, #2
 800d49a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d49c:	2300      	movs	r3, #0
 800d49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d4a4:	230b      	movs	r3, #11
 800d4a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	481f      	ldr	r0, [pc, #124]	@ (800d52c <HAL_ETH_MspInit+0x184>)
 800d4b0:	f7f8 f800 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800d4b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d4c6:	230b      	movs	r3, #11
 800d4c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800d4ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4817      	ldr	r0, [pc, #92]	@ (800d530 <HAL_ETH_MspInit+0x188>)
 800d4d2:	f7f7 ffef 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800d4d6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800d4da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d4e8:	230b      	movs	r3, #11
 800d4ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d4ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4810      	ldr	r0, [pc, #64]	@ (800d534 <HAL_ETH_MspInit+0x18c>)
 800d4f4:	f7f7 ffde 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	2105      	movs	r1, #5
 800d4fc:	203d      	movs	r0, #61	@ 0x3d
 800d4fe:	f7f5 fd39 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d502:	203d      	movs	r0, #61	@ 0x3d
 800d504:	f7f5 fd52 	bl	8002fac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800d508:	2200      	movs	r2, #0
 800d50a:	2105      	movs	r1, #5
 800d50c:	203e      	movs	r0, #62	@ 0x3e
 800d50e:	f7f5 fd31 	bl	8002f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800d512:	203e      	movs	r0, #62	@ 0x3e
 800d514:	f7f5 fd4a 	bl	8002fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d518:	bf00      	nop
 800d51a:	3738      	adds	r7, #56	@ 0x38
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	40028000 	.word	0x40028000
 800d524:	40023800 	.word	0x40023800
 800d528:	40020800 	.word	0x40020800
 800d52c:	40020000 	.word	0x40020000
 800d530:	40020400 	.word	0x40020400
 800d534:	40021800 	.word	0x40021800

0800d538 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800d53c:	4802      	ldr	r0, [pc, #8]	@ (800d548 <ETH_PHY_IO_Init+0x10>)
 800d53e:	f7f7 fb3d 	bl	8004bbc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20009f24 	.word	0x20009f24

0800d54c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
  return 0;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	68f9      	ldr	r1, [r7, #12]
 800d56e:	4807      	ldr	r0, [pc, #28]	@ (800d58c <ETH_PHY_IO_ReadReg+0x30>)
 800d570:	f7f7 f97e 	bl	8004870 <HAL_ETH_ReadPHYRegister>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800d57a:	f04f 33ff 	mov.w	r3, #4294967295
 800d57e:	e000      	b.n	800d582 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	20009f24 	.word	0x20009f24

0800d590 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	68f9      	ldr	r1, [r7, #12]
 800d5a2:	4807      	ldr	r0, [pc, #28]	@ (800d5c0 <ETH_PHY_IO_WriteReg+0x30>)
 800d5a4:	f7f7 f9af 	bl	8004906 <HAL_ETH_WritePHYRegister>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d002      	beq.n	800d5b4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800d5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b2:	e000      	b.n	800d5b6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20009f24 	.word	0x20009f24

0800d5c4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d5c8:	f7f4 fee8 	bl	800239c <HAL_GetTick>
 800d5cc:	4603      	mov	r3, r0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b0a0      	sub	sp, #128	@ 0x80
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	2264      	movs	r2, #100	@ 0x64
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f00f ffc0 	bl	801d56a <memset>
  int32_t PHYLinkState = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d5fe:	483a      	ldr	r0, [pc, #232]	@ (800d6e8 <ethernet_link_thread+0x114>)
 800d600:	f7f4 fe24 	bl	800224c <LAN8742_GetLinkState>
 800d604:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800d606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d608:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d60c:	089b      	lsrs	r3, r3, #2
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00c      	beq.n	800d632 <ethernet_link_thread+0x5e>
 800d618:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	dc09      	bgt.n	800d632 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800d61e:	4833      	ldr	r0, [pc, #204]	@ (800d6ec <ethernet_link_thread+0x118>)
 800d620:	f7f6 fddc 	bl	80041dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800d624:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d626:	f005 fb0d 	bl	8012c44 <netif_set_down>
    netif_set_link_down(netif);
 800d62a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d62c:	f005 fb70 	bl	8012d10 <netif_set_link_down>
 800d630:	e055      	b.n	800d6de <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800d632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d634:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d14e      	bne.n	800d6de <ethernet_link_thread+0x10a>
 800d640:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d642:	2b01      	cmp	r3, #1
 800d644:	dd4b      	ble.n	800d6de <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800d646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d648:	3b02      	subs	r3, #2
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d82a      	bhi.n	800d6a4 <ethernet_link_thread+0xd0>
 800d64e:	a201      	add	r2, pc, #4	@ (adr r2, 800d654 <ethernet_link_thread+0x80>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d665 	.word	0x0800d665
 800d658:	0800d677 	.word	0x0800d677
 800d65c:	0800d687 	.word	0x0800d687
 800d660:	0800d697 	.word	0x0800d697
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d664:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d668:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800d66a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d66e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800d670:	2301      	movs	r3, #1
 800d672:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800d674:	e017      	b.n	800d6a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d676:	2300      	movs	r3, #0
 800d678:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800d67a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d67e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800d680:	2301      	movs	r3, #1
 800d682:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800d684:	e00f      	b.n	800d6a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d68a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800d68c:	2300      	movs	r3, #0
 800d68e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800d690:	2301      	movs	r3, #1
 800d692:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800d694:	e007      	b.n	800d6a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d696:	2300      	movs	r3, #0
 800d698:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800d69a:	2300      	movs	r3, #0
 800d69c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800d6a2:	e000      	b.n	800d6a6 <ethernet_link_thread+0xd2>
    default:
      break;
 800d6a4:	bf00      	nop
    }

    if(linkchanged)
 800d6a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d018      	beq.n	800d6de <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d6ac:	f107 0308 	add.w	r3, r7, #8
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	480e      	ldr	r0, [pc, #56]	@ (800d6ec <ethernet_link_thread+0x118>)
 800d6b4:	f7f7 f970 	bl	8004998 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800d6b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d6ba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800d6bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6be:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d6c0:	f107 0308 	add.w	r3, r7, #8
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	4809      	ldr	r0, [pc, #36]	@ (800d6ec <ethernet_link_thread+0x118>)
 800d6c8:	f7f7 fa5d 	bl	8004b86 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800d6cc:	4807      	ldr	r0, [pc, #28]	@ (800d6ec <ethernet_link_thread+0x118>)
 800d6ce:	f7f6 fd15 	bl	80040fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800d6d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d6d4:	f005 fa4a 	bl	8012b6c <netif_set_up>
      netif_set_link_up(netif);
 800d6d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d6da:	f005 fae5 	bl	8012ca8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800d6de:	2064      	movs	r0, #100	@ 0x64
 800d6e0:	f000 f9c2 	bl	800da68 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d6e4:	e78b      	b.n	800d5fe <ethernet_link_thread+0x2a>
 800d6e6:	bf00      	nop
 800d6e8:	2000a00c 	.word	0x2000a00c
 800d6ec:	20009f24 	.word	0x20009f24

0800d6f0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af02      	add	r7, sp, #8
 800d6f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d6f8:	4812      	ldr	r0, [pc, #72]	@ (800d744 <HAL_ETH_RxAllocateCallback+0x54>)
 800d6fa:	f004 ffab 	bl	8012654 <memp_malloc_pool>
 800d6fe:	60f8      	str	r0, [r7, #12]
  if (p)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d014      	beq.n	800d730 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f103 0220 	add.w	r2, r3, #32
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4a0d      	ldr	r2, [pc, #52]	@ (800d748 <HAL_ETH_RxAllocateCallback+0x58>)
 800d714:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2241      	movs	r2, #65	@ 0x41
 800d726:	2100      	movs	r1, #0
 800d728:	2000      	movs	r0, #0
 800d72a:	f005 fd15 	bl	8013158 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d72e:	e005      	b.n	800d73c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d730:	4b06      	ldr	r3, [pc, #24]	@ (800d74c <HAL_ETH_RxAllocateCallback+0x5c>)
 800d732:	2201      	movs	r2, #1
 800d734:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	601a      	str	r2, [r3, #0]
}
 800d73c:	bf00      	nop
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	08021988 	.word	0x08021988
 800d748:	0800d359 	.word	0x0800d359
 800d74c:	20009f18 	.word	0x20009f18

0800d750 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3b20      	subs	r3, #32
 800d76e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2200      	movs	r2, #0
 800d77a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	887a      	ldrh	r2, [r7, #2]
 800d780:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d103      	bne.n	800d792 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	69fa      	ldr	r2, [r7, #28]
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	e003      	b.n	800d79a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	61fb      	str	r3, [r7, #28]
 800d7a6:	e009      	b.n	800d7bc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	891a      	ldrh	r2, [r3, #8]
 800d7ac:	887b      	ldrh	r3, [r7, #2]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	61fb      	str	r3, [r7, #28]
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1f2      	bne.n	800d7a8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d7c2:	887b      	ldrh	r3, [r7, #2]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fb02 	bl	800cdd0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d7cc:	bf00      	nop
 800d7ce:	3720      	adds	r7, #32
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f005 fe75 	bl	80134cc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d7ea:	b480      	push	{r7}
 800d7ec:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d7ee:	bf00      	nop
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7fe:	f3ef 8305 	mrs	r3, IPSR
 800d802:	60bb      	str	r3, [r7, #8]
  return(result);
 800d804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10f      	bne.n	800d82a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d80a:	f3ef 8310 	mrs	r3, PRIMASK
 800d80e:	607b      	str	r3, [r7, #4]
  return(result);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d105      	bne.n	800d822 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d816:	f3ef 8311 	mrs	r3, BASEPRI
 800d81a:	603b      	str	r3, [r7, #0]
  return(result);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d007      	beq.n	800d832 <osKernelInitialize+0x3a>
 800d822:	4b0e      	ldr	r3, [pc, #56]	@ (800d85c <osKernelInitialize+0x64>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b02      	cmp	r3, #2
 800d828:	d103      	bne.n	800d832 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d82a:	f06f 0305 	mvn.w	r3, #5
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	e00c      	b.n	800d84c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d832:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <osKernelInitialize+0x64>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d83a:	4b08      	ldr	r3, [pc, #32]	@ (800d85c <osKernelInitialize+0x64>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d840:	2300      	movs	r3, #0
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	e002      	b.n	800d84c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d846:	f04f 33ff 	mov.w	r3, #4294967295
 800d84a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d84c:	68fb      	ldr	r3, [r7, #12]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	2000a02c 	.word	0x2000a02c

0800d860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d866:	f3ef 8305 	mrs	r3, IPSR
 800d86a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d86c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10f      	bne.n	800d892 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d872:	f3ef 8310 	mrs	r3, PRIMASK
 800d876:	607b      	str	r3, [r7, #4]
  return(result);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d87e:	f3ef 8311 	mrs	r3, BASEPRI
 800d882:	603b      	str	r3, [r7, #0]
  return(result);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <osKernelStart+0x3a>
 800d88a:	4b0f      	ldr	r3, [pc, #60]	@ (800d8c8 <osKernelStart+0x68>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d103      	bne.n	800d89a <osKernelStart+0x3a>
    stat = osErrorISR;
 800d892:	f06f 0305 	mvn.w	r3, #5
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	e010      	b.n	800d8bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d89a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c8 <osKernelStart+0x68>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d109      	bne.n	800d8b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d8a2:	f7ff ffa2 	bl	800d7ea <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d8a6:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <osKernelStart+0x68>)
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d8ac:	f002 f92e 	bl	800fb0c <vTaskStartScheduler>
      stat = osOK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	2000a02c 	.word	0x2000a02c

0800d8cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8d2:	f3ef 8305 	mrs	r3, IPSR
 800d8d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10f      	bne.n	800d8fe <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8de:	f3ef 8310 	mrs	r3, PRIMASK
 800d8e2:	607b      	str	r3, [r7, #4]
  return(result);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d8ee:	603b      	str	r3, [r7, #0]
  return(result);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <osKernelGetTickCount+0x3a>
 800d8f6:	4b08      	ldr	r3, [pc, #32]	@ (800d918 <osKernelGetTickCount+0x4c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d103      	bne.n	800d906 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800d8fe:	f002 fa37 	bl	800fd70 <xTaskGetTickCountFromISR>
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	e002      	b.n	800d90c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800d906:	f002 fa23 	bl	800fd50 <xTaskGetTickCount>
 800d90a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800d90c:	68fb      	ldr	r3, [r7, #12]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	2000a02c 	.word	0x2000a02c

0800d91c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b090      	sub	sp, #64	@ 0x40
 800d920:	af04      	add	r7, sp, #16
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d928:	2300      	movs	r3, #0
 800d92a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d92c:	f3ef 8305 	mrs	r3, IPSR
 800d930:	61fb      	str	r3, [r7, #28]
  return(result);
 800d932:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d934:	2b00      	cmp	r3, #0
 800d936:	f040 8090 	bne.w	800da5a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93a:	f3ef 8310 	mrs	r3, PRIMASK
 800d93e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d105      	bne.n	800d952 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d946:	f3ef 8311 	mrs	r3, BASEPRI
 800d94a:	617b      	str	r3, [r7, #20]
  return(result);
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <osThreadNew+0x3e>
 800d952:	4b44      	ldr	r3, [pc, #272]	@ (800da64 <osThreadNew+0x148>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d07f      	beq.n	800da5a <osThreadNew+0x13e>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d07c      	beq.n	800da5a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d964:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d966:	2318      	movs	r3, #24
 800d968:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800d96e:	f04f 33ff 	mov.w	r3, #4294967295
 800d972:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d045      	beq.n	800da06 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d002      	beq.n	800d988 <osThreadNew+0x6c>
        name = attr->name;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d008      	beq.n	800d9ae <osThreadNew+0x92>
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	2b38      	cmp	r3, #56	@ 0x38
 800d9a0:	d805      	bhi.n	800d9ae <osThreadNew+0x92>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <osThreadNew+0x96>
        return (NULL);
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e054      	b.n	800da5c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	089b      	lsrs	r3, r3, #2
 800d9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00e      	beq.n	800d9e8 <osThreadNew+0xcc>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	2ba7      	cmp	r3, #167	@ 0xa7
 800d9d0:	d90a      	bls.n	800d9e8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d006      	beq.n	800d9e8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <osThreadNew+0xcc>
        mem = 1;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	623b      	str	r3, [r7, #32]
 800d9e6:	e010      	b.n	800da0a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10c      	bne.n	800da0a <osThreadNew+0xee>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d108      	bne.n	800da0a <osThreadNew+0xee>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d104      	bne.n	800da0a <osThreadNew+0xee>
          mem = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	623b      	str	r3, [r7, #32]
 800da04:	e001      	b.n	800da0a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d110      	bne.n	800da32 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da18:	9202      	str	r2, [sp, #8]
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f001 fe72 	bl	800f710 <xTaskCreateStatic>
 800da2c:	4603      	mov	r3, r0
 800da2e:	613b      	str	r3, [r7, #16]
 800da30:	e013      	b.n	800da5a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d110      	bne.n	800da5a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	f107 0310 	add.w	r3, r7, #16
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f001 fec6 	bl	800f7dc <xTaskCreate>
 800da50:	4603      	mov	r3, r0
 800da52:	2b01      	cmp	r3, #1
 800da54:	d001      	beq.n	800da5a <osThreadNew+0x13e>
          hTask = NULL;
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da5a:	693b      	ldr	r3, [r7, #16]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3730      	adds	r7, #48	@ 0x30
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	2000a02c 	.word	0x2000a02c

0800da68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da70:	f3ef 8305 	mrs	r3, IPSR
 800da74:	613b      	str	r3, [r7, #16]
  return(result);
 800da76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10f      	bne.n	800da9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da7c:	f3ef 8310 	mrs	r3, PRIMASK
 800da80:	60fb      	str	r3, [r7, #12]
  return(result);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da88:	f3ef 8311 	mrs	r3, BASEPRI
 800da8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d007      	beq.n	800daa4 <osDelay+0x3c>
 800da94:	4b0a      	ldr	r3, [pc, #40]	@ (800dac0 <osDelay+0x58>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d103      	bne.n	800daa4 <osDelay+0x3c>
    stat = osErrorISR;
 800da9c:	f06f 0305 	mvn.w	r3, #5
 800daa0:	617b      	str	r3, [r7, #20]
 800daa2:	e007      	b.n	800dab4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f001 fff4 	bl	800fa9c <vTaskDelay>
    }
  }

  return (stat);
 800dab4:	697b      	ldr	r3, [r7, #20]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	2000a02c 	.word	0x2000a02c

0800dac4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08a      	sub	sp, #40	@ 0x28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dad0:	f3ef 8305 	mrs	r3, IPSR
 800dad4:	613b      	str	r3, [r7, #16]
  return(result);
 800dad6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f040 8085 	bne.w	800dbe8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dade:	f3ef 8310 	mrs	r3, PRIMASK
 800dae2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d105      	bne.n	800daf6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800daea:	f3ef 8311 	mrs	r3, BASEPRI
 800daee:	60bb      	str	r3, [r7, #8]
  return(result);
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <osMutexNew+0x3a>
 800daf6:	4b3f      	ldr	r3, [pc, #252]	@ (800dbf4 <osMutexNew+0x130>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d074      	beq.n	800dbe8 <osMutexNew+0x124>
    if (attr != NULL) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d003      	beq.n	800db0c <osMutexNew+0x48>
      type = attr->attr_bits;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	623b      	str	r3, [r7, #32]
 800db0a:	e001      	b.n	800db10 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800db0c:	2300      	movs	r3, #0
 800db0e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <osMutexNew+0x5c>
      rmtx = 1U;
 800db1a:	2301      	movs	r3, #1
 800db1c:	61fb      	str	r3, [r7, #28]
 800db1e:	e001      	b.n	800db24 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800db20:	2300      	movs	r3, #0
 800db22:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	f003 0308 	and.w	r3, r3, #8
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d15c      	bne.n	800dbe8 <osMutexNew+0x124>
      mem = -1;
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d015      	beq.n	800db66 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d006      	beq.n	800db50 <osMutexNew+0x8c>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	2b4f      	cmp	r3, #79	@ 0x4f
 800db48:	d902      	bls.n	800db50 <osMutexNew+0x8c>
          mem = 1;
 800db4a:	2301      	movs	r3, #1
 800db4c:	61bb      	str	r3, [r7, #24]
 800db4e:	e00c      	b.n	800db6a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d108      	bne.n	800db6a <osMutexNew+0xa6>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d104      	bne.n	800db6a <osMutexNew+0xa6>
            mem = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	61bb      	str	r3, [r7, #24]
 800db64:	e001      	b.n	800db6a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d112      	bne.n	800db96 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d007      	beq.n	800db86 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	4619      	mov	r1, r3
 800db7c:	2004      	movs	r0, #4
 800db7e:	f000 fe22 	bl	800e7c6 <xQueueCreateMutexStatic>
 800db82:	6278      	str	r0, [r7, #36]	@ 0x24
 800db84:	e016      	b.n	800dbb4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	4619      	mov	r1, r3
 800db8c:	2001      	movs	r0, #1
 800db8e:	f000 fe1a 	bl	800e7c6 <xQueueCreateMutexStatic>
 800db92:	6278      	str	r0, [r7, #36]	@ 0x24
 800db94:	e00e      	b.n	800dbb4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10b      	bne.n	800dbb4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d004      	beq.n	800dbac <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800dba2:	2004      	movs	r0, #4
 800dba4:	f000 fdf7 	bl	800e796 <xQueueCreateMutex>
 800dba8:	6278      	str	r0, [r7, #36]	@ 0x24
 800dbaa:	e003      	b.n	800dbb4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800dbac:	2001      	movs	r0, #1
 800dbae:	f000 fdf2 	bl	800e796 <xQueueCreateMutex>
 800dbb2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <osMutexNew+0x110>
        if (attr != NULL) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <osMutexNew+0x104>
          name = attr->name;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	617b      	str	r3, [r7, #20]
 800dbc6:	e001      	b.n	800dbcc <osMutexNew+0x108>
        } else {
          name = NULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800dbcc:	6979      	ldr	r1, [r7, #20]
 800dbce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbd0:	f001 fd16 	bl	800f600 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d006      	beq.n	800dbe8 <osMutexNew+0x124>
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d003      	beq.n	800dbe8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3728      	adds	r7, #40	@ 0x28
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	2000a02c 	.word	0x2000a02c

0800dbf8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f023 0301 	bic.w	r3, r3, #1
 800dc08:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f003 0301 	and.w	r3, r3, #1
 800dc10:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc16:	f3ef 8305 	mrs	r3, IPSR
 800dc1a:	613b      	str	r3, [r7, #16]
  return(result);
 800dc1c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10f      	bne.n	800dc42 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc22:	f3ef 8310 	mrs	r3, PRIMASK
 800dc26:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d105      	bne.n	800dc3a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc2e:	f3ef 8311 	mrs	r3, BASEPRI
 800dc32:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d007      	beq.n	800dc4a <osMutexAcquire+0x52>
 800dc3a:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb0 <osMutexAcquire+0xb8>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d103      	bne.n	800dc4a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dc42:	f06f 0305 	mvn.w	r3, #5
 800dc46:	61fb      	str	r3, [r7, #28]
 800dc48:	e02c      	b.n	800dca4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d103      	bne.n	800dc58 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800dc50:	f06f 0303 	mvn.w	r3, #3
 800dc54:	61fb      	str	r3, [r7, #28]
 800dc56:	e025      	b.n	800dca4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d011      	beq.n	800dc82 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	69b8      	ldr	r0, [r7, #24]
 800dc62:	f000 fe02 	bl	800e86a <xQueueTakeMutexRecursive>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d01b      	beq.n	800dca4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800dc72:	f06f 0301 	mvn.w	r3, #1
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	e014      	b.n	800dca4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dc7a:	f06f 0302 	mvn.w	r3, #2
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	e010      	b.n	800dca4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	69b8      	ldr	r0, [r7, #24]
 800dc86:	f001 f9cd 	bl	800f024 <xQueueSemaphoreTake>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d009      	beq.n	800dca4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800dc96:	f06f 0301 	mvn.w	r3, #1
 800dc9a:	61fb      	str	r3, [r7, #28]
 800dc9c:	e002      	b.n	800dca4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dc9e:	f06f 0302 	mvn.w	r3, #2
 800dca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dca4:	69fb      	ldr	r3, [r7, #28]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	2000a02c 	.word	0x2000a02c

0800dcb4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f023 0301 	bic.w	r3, r3, #1
 800dcc2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcd0:	f3ef 8305 	mrs	r3, IPSR
 800dcd4:	613b      	str	r3, [r7, #16]
  return(result);
 800dcd6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10f      	bne.n	800dcfc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcdc:	f3ef 8310 	mrs	r3, PRIMASK
 800dce0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d105      	bne.n	800dcf4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dce8:	f3ef 8311 	mrs	r3, BASEPRI
 800dcec:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d007      	beq.n	800dd04 <osMutexRelease+0x50>
 800dcf4:	4b16      	ldr	r3, [pc, #88]	@ (800dd50 <osMutexRelease+0x9c>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d103      	bne.n	800dd04 <osMutexRelease+0x50>
    stat = osErrorISR;
 800dcfc:	f06f 0305 	mvn.w	r3, #5
 800dd00:	61fb      	str	r3, [r7, #28]
 800dd02:	e01f      	b.n	800dd44 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d103      	bne.n	800dd12 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800dd0a:	f06f 0303 	mvn.w	r3, #3
 800dd0e:	61fb      	str	r3, [r7, #28]
 800dd10:	e018      	b.n	800dd44 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d009      	beq.n	800dd2c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dd18:	69b8      	ldr	r0, [r7, #24]
 800dd1a:	f000 fd6f 	bl	800e7fc <xQueueGiveMutexRecursive>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d00f      	beq.n	800dd44 <osMutexRelease+0x90>
        stat = osErrorResource;
 800dd24:	f06f 0302 	mvn.w	r3, #2
 800dd28:	61fb      	str	r3, [r7, #28]
 800dd2a:	e00b      	b.n	800dd44 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2100      	movs	r1, #0
 800dd32:	69b8      	ldr	r0, [r7, #24]
 800dd34:	f000 fe48 	bl	800e9c8 <xQueueGenericSend>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d002      	beq.n	800dd44 <osMutexRelease+0x90>
        stat = osErrorResource;
 800dd3e:	f06f 0302 	mvn.w	r3, #2
 800dd42:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800dd44:	69fb      	ldr	r3, [r7, #28]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	2000a02c 	.word	0x2000a02c

0800dd54 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08c      	sub	sp, #48	@ 0x30
 800dd58:	af02      	add	r7, sp, #8
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dd60:	2300      	movs	r3, #0
 800dd62:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd64:	f3ef 8305 	mrs	r3, IPSR
 800dd68:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd6a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8086 	bne.w	800de7e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd72:	f3ef 8310 	mrs	r3, PRIMASK
 800dd76:	617b      	str	r3, [r7, #20]
  return(result);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d105      	bne.n	800dd8a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd7e:	f3ef 8311 	mrs	r3, BASEPRI
 800dd82:	613b      	str	r3, [r7, #16]
  return(result);
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <osSemaphoreNew+0x3e>
 800dd8a:	4b3f      	ldr	r3, [pc, #252]	@ (800de88 <osSemaphoreNew+0x134>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d075      	beq.n	800de7e <osSemaphoreNew+0x12a>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d072      	beq.n	800de7e <osSemaphoreNew+0x12a>
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d86e      	bhi.n	800de7e <osSemaphoreNew+0x12a>
    mem = -1;
 800dda0:	f04f 33ff 	mov.w	r3, #4294967295
 800dda4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d015      	beq.n	800ddd8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d006      	beq.n	800ddc2 <osSemaphoreNew+0x6e>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	2b4f      	cmp	r3, #79	@ 0x4f
 800ddba:	d902      	bls.n	800ddc2 <osSemaphoreNew+0x6e>
        mem = 1;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	623b      	str	r3, [r7, #32]
 800ddc0:	e00c      	b.n	800dddc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d108      	bne.n	800dddc <osSemaphoreNew+0x88>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d104      	bne.n	800dddc <osSemaphoreNew+0x88>
          mem = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	623b      	str	r3, [r7, #32]
 800ddd6:	e001      	b.n	800dddc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde2:	d04c      	beq.n	800de7e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d128      	bne.n	800de3c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d10a      	bne.n	800de06 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	9200      	str	r2, [sp, #0]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	f000 fbc3 	bl	800e588 <xQueueGenericCreateStatic>
 800de02:	6278      	str	r0, [r7, #36]	@ 0x24
 800de04:	e005      	b.n	800de12 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800de06:	2203      	movs	r2, #3
 800de08:	2100      	movs	r1, #0
 800de0a:	2001      	movs	r0, #1
 800de0c:	f000 fc43 	bl	800e696 <xQueueGenericCreate>
 800de10:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800de12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de14:	2b00      	cmp	r3, #0
 800de16:	d022      	beq.n	800de5e <osSemaphoreNew+0x10a>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d01f      	beq.n	800de5e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800de1e:	2300      	movs	r3, #0
 800de20:	2200      	movs	r2, #0
 800de22:	2100      	movs	r1, #0
 800de24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de26:	f000 fdcf 	bl	800e9c8 <xQueueGenericSend>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d016      	beq.n	800de5e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800de30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de32:	f001 fa97 	bl	800f364 <vQueueDelete>
            hSemaphore = NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	627b      	str	r3, [r7, #36]	@ 0x24
 800de3a:	e010      	b.n	800de5e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d108      	bne.n	800de54 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	461a      	mov	r2, r3
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f000 fd46 	bl	800e8dc <xQueueCreateCountingSemaphoreStatic>
 800de50:	6278      	str	r0, [r7, #36]	@ 0x24
 800de52:	e004      	b.n	800de5e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 fd7d 	bl	800e956 <xQueueCreateCountingSemaphore>
 800de5c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00c      	beq.n	800de7e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <osSemaphoreNew+0x11e>
          name = attr->name;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	61fb      	str	r3, [r7, #28]
 800de70:	e001      	b.n	800de76 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800de76:	69f9      	ldr	r1, [r7, #28]
 800de78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de7a:	f001 fbc1 	bl	800f600 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800de7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800de80:	4618      	mov	r0, r3
 800de82:	3728      	adds	r7, #40	@ 0x28
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	2000a02c 	.word	0x2000a02c

0800de8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d103      	bne.n	800deac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dea4:	f06f 0303 	mvn.w	r3, #3
 800dea8:	61fb      	str	r3, [r7, #28]
 800deaa:	e04b      	b.n	800df44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deac:	f3ef 8305 	mrs	r3, IPSR
 800deb0:	617b      	str	r3, [r7, #20]
  return(result);
 800deb2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10f      	bne.n	800ded8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deb8:	f3ef 8310 	mrs	r3, PRIMASK
 800debc:	613b      	str	r3, [r7, #16]
  return(result);
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d105      	bne.n	800ded0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dec4:	f3ef 8311 	mrs	r3, BASEPRI
 800dec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d026      	beq.n	800df1e <osSemaphoreAcquire+0x92>
 800ded0:	4b1f      	ldr	r3, [pc, #124]	@ (800df50 <osSemaphoreAcquire+0xc4>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d122      	bne.n	800df1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800dede:	f06f 0303 	mvn.w	r3, #3
 800dee2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dee4:	e02d      	b.n	800df42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dee6:	2300      	movs	r3, #0
 800dee8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800deea:	f107 0308 	add.w	r3, r7, #8
 800deee:	461a      	mov	r2, r3
 800def0:	2100      	movs	r1, #0
 800def2:	69b8      	ldr	r0, [r7, #24]
 800def4:	f001 f9ae 	bl	800f254 <xQueueReceiveFromISR>
 800def8:	4603      	mov	r3, r0
 800defa:	2b01      	cmp	r3, #1
 800defc:	d003      	beq.n	800df06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800defe:	f06f 0302 	mvn.w	r3, #2
 800df02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800df04:	e01d      	b.n	800df42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d01a      	beq.n	800df42 <osSemaphoreAcquire+0xb6>
 800df0c:	4b11      	ldr	r3, [pc, #68]	@ (800df54 <osSemaphoreAcquire+0xc8>)
 800df0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800df1c:	e011      	b.n	800df42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	69b8      	ldr	r0, [r7, #24]
 800df22:	f001 f87f 	bl	800f024 <xQueueSemaphoreTake>
 800df26:	4603      	mov	r3, r0
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d00b      	beq.n	800df44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d003      	beq.n	800df3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800df32:	f06f 0301 	mvn.w	r3, #1
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	e004      	b.n	800df44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800df3a:	f06f 0302 	mvn.w	r3, #2
 800df3e:	61fb      	str	r3, [r7, #28]
 800df40:	e000      	b.n	800df44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800df42:	bf00      	nop
      }
    }
  }

  return (stat);
 800df44:	69fb      	ldr	r3, [r7, #28]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3720      	adds	r7, #32
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	2000a02c 	.word	0x2000a02c
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d103      	bne.n	800df76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800df6e:	f06f 0303 	mvn.w	r3, #3
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	e03e      	b.n	800dff4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df76:	f3ef 8305 	mrs	r3, IPSR
 800df7a:	617b      	str	r3, [r7, #20]
  return(result);
 800df7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10f      	bne.n	800dfa2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df82:	f3ef 8310 	mrs	r3, PRIMASK
 800df86:	613b      	str	r3, [r7, #16]
  return(result);
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d105      	bne.n	800df9a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df8e:	f3ef 8311 	mrs	r3, BASEPRI
 800df92:	60fb      	str	r3, [r7, #12]
  return(result);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d01e      	beq.n	800dfd8 <osSemaphoreRelease+0x80>
 800df9a:	4b19      	ldr	r3, [pc, #100]	@ (800e000 <osSemaphoreRelease+0xa8>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d11a      	bne.n	800dfd8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dfa6:	f107 0308 	add.w	r3, r7, #8
 800dfaa:	4619      	mov	r1, r3
 800dfac:	69b8      	ldr	r0, [r7, #24]
 800dfae:	f000 feb8 	bl	800ed22 <xQueueGiveFromISR>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d003      	beq.n	800dfc0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800dfb8:	f06f 0302 	mvn.w	r3, #2
 800dfbc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dfbe:	e018      	b.n	800dff2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d015      	beq.n	800dff2 <osSemaphoreRelease+0x9a>
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800e004 <osSemaphoreRelease+0xac>)
 800dfc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dfd6:	e00c      	b.n	800dff2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2200      	movs	r2, #0
 800dfdc:	2100      	movs	r1, #0
 800dfde:	69b8      	ldr	r0, [r7, #24]
 800dfe0:	f000 fcf2 	bl	800e9c8 <xQueueGenericSend>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d004      	beq.n	800dff4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800dfea:	f06f 0302 	mvn.w	r3, #2
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e000      	b.n	800dff4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dff2:	bf00      	nop
    }
  }

  return (stat);
 800dff4:	69fb      	ldr	r3, [r7, #28]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3720      	adds	r7, #32
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	2000a02c 	.word	0x2000a02c
 800e004:	e000ed04 	.word	0xe000ed04

0800e008 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08c      	sub	sp, #48	@ 0x30
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e014:	2300      	movs	r3, #0
 800e016:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e018:	f3ef 8305 	mrs	r3, IPSR
 800e01c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e01e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e020:	2b00      	cmp	r3, #0
 800e022:	d16f      	bne.n	800e104 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e024:	f3ef 8310 	mrs	r3, PRIMASK
 800e028:	617b      	str	r3, [r7, #20]
  return(result);
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d105      	bne.n	800e03c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e030:	f3ef 8311 	mrs	r3, BASEPRI
 800e034:	613b      	str	r3, [r7, #16]
  return(result);
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <osMessageQueueNew+0x3c>
 800e03c:	4b34      	ldr	r3, [pc, #208]	@ (800e110 <osMessageQueueNew+0x108>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b02      	cmp	r3, #2
 800e042:	d05f      	beq.n	800e104 <osMessageQueueNew+0xfc>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d05c      	beq.n	800e104 <osMessageQueueNew+0xfc>
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d059      	beq.n	800e104 <osMessageQueueNew+0xfc>
    mem = -1;
 800e050:	f04f 33ff 	mov.w	r3, #4294967295
 800e054:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d029      	beq.n	800e0b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d012      	beq.n	800e08a <osMessageQueueNew+0x82>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	2b4f      	cmp	r3, #79	@ 0x4f
 800e06a:	d90e      	bls.n	800e08a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00a      	beq.n	800e08a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	695a      	ldr	r2, [r3, #20]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	68b9      	ldr	r1, [r7, #8]
 800e07c:	fb01 f303 	mul.w	r3, r1, r3
 800e080:	429a      	cmp	r2, r3
 800e082:	d302      	bcc.n	800e08a <osMessageQueueNew+0x82>
        mem = 1;
 800e084:	2301      	movs	r3, #1
 800e086:	623b      	str	r3, [r7, #32]
 800e088:	e014      	b.n	800e0b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d110      	bne.n	800e0b4 <osMessageQueueNew+0xac>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10c      	bne.n	800e0b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d108      	bne.n	800e0b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	695b      	ldr	r3, [r3, #20]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d104      	bne.n	800e0b4 <osMessageQueueNew+0xac>
          mem = 0;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	623b      	str	r3, [r7, #32]
 800e0ae:	e001      	b.n	800e0b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d10b      	bne.n	800e0d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691a      	ldr	r2, [r3, #16]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	9100      	str	r1, [sp, #0]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 fa5d 	bl	800e588 <xQueueGenericCreateStatic>
 800e0ce:	6278      	str	r0, [r7, #36]	@ 0x24
 800e0d0:	e008      	b.n	800e0e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800e0d2:	6a3b      	ldr	r3, [r7, #32]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d105      	bne.n	800e0e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e0d8:	2200      	movs	r2, #0
 800e0da:	68b9      	ldr	r1, [r7, #8]
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f000 fada 	bl	800e696 <xQueueGenericCreate>
 800e0e2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d003      	beq.n	800e0f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	61fb      	str	r3, [r7, #28]
 800e0f6:	e001      	b.n	800e0fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e0fc:	69f9      	ldr	r1, [r7, #28]
 800e0fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e100:	f001 fa7e 	bl	800f600 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e106:	4618      	mov	r0, r3
 800e108:	3728      	adds	r7, #40	@ 0x28
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	2000a02c 	.word	0x2000a02c

0800e114 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	@ 0x28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e128:	2300      	movs	r3, #0
 800e12a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e12c:	f3ef 8305 	mrs	r3, IPSR
 800e130:	61fb      	str	r3, [r7, #28]
  return(result);
 800e132:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10f      	bne.n	800e158 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e138:	f3ef 8310 	mrs	r3, PRIMASK
 800e13c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d105      	bne.n	800e150 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e144:	f3ef 8311 	mrs	r3, BASEPRI
 800e148:	617b      	str	r3, [r7, #20]
  return(result);
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d02c      	beq.n	800e1aa <osMessageQueuePut+0x96>
 800e150:	4b28      	ldr	r3, [pc, #160]	@ (800e1f4 <osMessageQueuePut+0xe0>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b02      	cmp	r3, #2
 800e156:	d128      	bne.n	800e1aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d005      	beq.n	800e16a <osMessageQueuePut+0x56>
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <osMessageQueuePut+0x56>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e16a:	f06f 0303 	mvn.w	r3, #3
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e170:	e039      	b.n	800e1e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e172:	2300      	movs	r3, #0
 800e174:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e176:	f107 0210 	add.w	r2, r7, #16
 800e17a:	2300      	movs	r3, #0
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	6a38      	ldr	r0, [r7, #32]
 800e180:	f000 fd2c 	bl	800ebdc <xQueueGenericSendFromISR>
 800e184:	4603      	mov	r3, r0
 800e186:	2b01      	cmp	r3, #1
 800e188:	d003      	beq.n	800e192 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e18a:	f06f 0302 	mvn.w	r3, #2
 800e18e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e190:	e029      	b.n	800e1e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d026      	beq.n	800e1e6 <osMessageQueuePut+0xd2>
 800e198:	4b17      	ldr	r3, [pc, #92]	@ (800e1f8 <osMessageQueuePut+0xe4>)
 800e19a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e1a8:	e01d      	b.n	800e1e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <osMessageQueuePut+0xa2>
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d103      	bne.n	800e1be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e1b6:	f06f 0303 	mvn.w	r3, #3
 800e1ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1bc:	e014      	b.n	800e1e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e1be:	2300      	movs	r3, #0
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	6a38      	ldr	r0, [r7, #32]
 800e1c6:	f000 fbff 	bl	800e9c8 <xQueueGenericSend>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d00b      	beq.n	800e1e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e1d6:	f06f 0301 	mvn.w	r3, #1
 800e1da:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1dc:	e004      	b.n	800e1e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e1de:	f06f 0302 	mvn.w	r3, #2
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1e4:	e000      	b.n	800e1e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e1e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3728      	adds	r7, #40	@ 0x28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	2000a02c 	.word	0x2000a02c
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08a      	sub	sp, #40	@ 0x28
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e20e:	2300      	movs	r3, #0
 800e210:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e212:	f3ef 8305 	mrs	r3, IPSR
 800e216:	61fb      	str	r3, [r7, #28]
  return(result);
 800e218:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10f      	bne.n	800e23e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e21e:	f3ef 8310 	mrs	r3, PRIMASK
 800e222:	61bb      	str	r3, [r7, #24]
  return(result);
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e22a:	f3ef 8311 	mrs	r3, BASEPRI
 800e22e:	617b      	str	r3, [r7, #20]
  return(result);
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d02c      	beq.n	800e290 <osMessageQueueGet+0x94>
 800e236:	4b28      	ldr	r3, [pc, #160]	@ (800e2d8 <osMessageQueueGet+0xdc>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d128      	bne.n	800e290 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d005      	beq.n	800e250 <osMessageQueueGet+0x54>
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <osMessageQueueGet+0x54>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d003      	beq.n	800e258 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e250:	f06f 0303 	mvn.w	r3, #3
 800e254:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e256:	e038      	b.n	800e2ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e258:	2300      	movs	r3, #0
 800e25a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e25c:	f107 0310 	add.w	r3, r7, #16
 800e260:	461a      	mov	r2, r3
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	6a38      	ldr	r0, [r7, #32]
 800e266:	f000 fff5 	bl	800f254 <xQueueReceiveFromISR>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d003      	beq.n	800e278 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e270:	f06f 0302 	mvn.w	r3, #2
 800e274:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e276:	e028      	b.n	800e2ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d025      	beq.n	800e2ca <osMessageQueueGet+0xce>
 800e27e:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <osMessageQueueGet+0xe0>)
 800e280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e28e:	e01c      	b.n	800e2ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <osMessageQueueGet+0xa0>
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d103      	bne.n	800e2a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e29c:	f06f 0303 	mvn.w	r3, #3
 800e2a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2a2:	e013      	b.n	800e2cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	68b9      	ldr	r1, [r7, #8]
 800e2a8:	6a38      	ldr	r0, [r7, #32]
 800e2aa:	f000 fdd3 	bl	800ee54 <xQueueReceive>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d00b      	beq.n	800e2cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e2ba:	f06f 0301 	mvn.w	r3, #1
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2c0:	e004      	b.n	800e2cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e2c2:	f06f 0302 	mvn.w	r3, #2
 800e2c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2c8:	e000      	b.n	800e2cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3728      	adds	r7, #40	@ 0x28
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	2000a02c 	.word	0x2000a02c
 800e2dc:	e000ed04 	.word	0xe000ed04

0800e2e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4a07      	ldr	r2, [pc, #28]	@ (800e30c <vApplicationGetIdleTaskMemory+0x2c>)
 800e2f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	4a06      	ldr	r2, [pc, #24]	@ (800e310 <vApplicationGetIdleTaskMemory+0x30>)
 800e2f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e2fe:	601a      	str	r2, [r3, #0]
}
 800e300:	bf00      	nop
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	2000a030 	.word	0x2000a030
 800e310:	2000a0d8 	.word	0x2000a0d8

0800e314 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4a07      	ldr	r2, [pc, #28]	@ (800e340 <vApplicationGetTimerTaskMemory+0x2c>)
 800e324:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4a06      	ldr	r2, [pc, #24]	@ (800e344 <vApplicationGetTimerTaskMemory+0x30>)
 800e32a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e332:	601a      	str	r2, [r3, #0]
}
 800e334:	bf00      	nop
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	2000a4d8 	.word	0x2000a4d8
 800e344:	2000a580 	.word	0x2000a580

0800e348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f103 0208 	add.w	r2, r3, #8
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f103 0208 	add.w	r2, r3, #8
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f103 0208 	add.w	r2, r3, #8
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e396:	bf00      	nop
 800e398:	370c      	adds	r7, #12
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3a2:	b480      	push	{r7}
 800e3a4:	b085      	sub	sp, #20
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	689a      	ldr	r2, [r3, #8]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	1c5a      	adds	r2, r3, #1
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	601a      	str	r2, [r3, #0]
}
 800e3de:	bf00      	nop
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d103      	bne.n	800e40a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	e00c      	b.n	800e424 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3308      	adds	r3, #8
 800e40e:	60fb      	str	r3, [r7, #12]
 800e410:	e002      	b.n	800e418 <vListInsert+0x2e>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	60fb      	str	r3, [r7, #12]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	429a      	cmp	r2, r3
 800e422:	d2f6      	bcs.n	800e412 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	601a      	str	r2, [r3, #0]
}
 800e450:	bf00      	nop
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	6892      	ldr	r2, [r2, #8]
 800e472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	6852      	ldr	r2, [r2, #4]
 800e47c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	429a      	cmp	r2, r3
 800e486:	d103      	bne.n	800e490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	689a      	ldr	r2, [r3, #8]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	1e5a      	subs	r2, r3, #1
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3714      	adds	r7, #20
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10d      	bne.n	800e4e0 <xQueueGenericReset+0x30>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c8:	b672      	cpsid	i
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	b662      	cpsie	i
 800e4d8:	60bb      	str	r3, [r7, #8]
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	e7fd      	b.n	800e4dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e4e0:	f002 ff4c 	bl	801137c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ec:	68f9      	ldr	r1, [r7, #12]
 800e4ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e4f0:	fb01 f303 	mul.w	r3, r1, r3
 800e4f4:	441a      	add	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e510:	3b01      	subs	r3, #1
 800e512:	68f9      	ldr	r1, [r7, #12]
 800e514:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e516:	fb01 f303 	mul.w	r3, r1, r3
 800e51a:	441a      	add	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	22ff      	movs	r2, #255	@ 0xff
 800e524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	22ff      	movs	r2, #255	@ 0xff
 800e52c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d114      	bne.n	800e560 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	691b      	ldr	r3, [r3, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d01a      	beq.n	800e574 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3310      	adds	r3, #16
 800e542:	4618      	mov	r0, r3
 800e544:	f001 fdc4 	bl	80100d0 <xTaskRemoveFromEventList>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d012      	beq.n	800e574 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e54e:	4b0d      	ldr	r3, [pc, #52]	@ (800e584 <xQueueGenericReset+0xd4>)
 800e550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	e009      	b.n	800e574 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	3310      	adds	r3, #16
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff feef 	bl	800e348 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3324      	adds	r3, #36	@ 0x24
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff feea 	bl	800e348 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e574:	f002 ff38 	bl	80113e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e578:	2301      	movs	r3, #1
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	e000ed04 	.word	0xe000ed04

0800e588 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	@ 0x38
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10d      	bne.n	800e5b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a0:	b672      	cpsid	i
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	b662      	cpsie	i
 800e5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e5b2:	bf00      	nop
 800e5b4:	bf00      	nop
 800e5b6:	e7fd      	b.n	800e5b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10d      	bne.n	800e5da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c2:	b672      	cpsid	i
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	b662      	cpsie	i
 800e5d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop
 800e5d8:	e7fd      	b.n	800e5d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <xQueueGenericCreateStatic+0x5e>
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <xQueueGenericCreateStatic+0x62>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e000      	b.n	800e5ec <xQueueGenericCreateStatic+0x64>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10d      	bne.n	800e60c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f4:	b672      	cpsid	i
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	b662      	cpsie	i
 800e604:	623b      	str	r3, [r7, #32]
}
 800e606:	bf00      	nop
 800e608:	bf00      	nop
 800e60a:	e7fd      	b.n	800e608 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <xQueueGenericCreateStatic+0x90>
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <xQueueGenericCreateStatic+0x94>
 800e618:	2301      	movs	r3, #1
 800e61a:	e000      	b.n	800e61e <xQueueGenericCreateStatic+0x96>
 800e61c:	2300      	movs	r3, #0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10d      	bne.n	800e63e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e626:	b672      	cpsid	i
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	b662      	cpsie	i
 800e636:	61fb      	str	r3, [r7, #28]
}
 800e638:	bf00      	nop
 800e63a:	bf00      	nop
 800e63c:	e7fd      	b.n	800e63a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e63e:	2350      	movs	r3, #80	@ 0x50
 800e640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b50      	cmp	r3, #80	@ 0x50
 800e646:	d00d      	beq.n	800e664 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64c:	b672      	cpsid	i
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	b662      	cpsie	i
 800e65c:	61bb      	str	r3, [r7, #24]
}
 800e65e:	bf00      	nop
 800e660:	bf00      	nop
 800e662:	e7fd      	b.n	800e660 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00d      	beq.n	800e68c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e678:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	4613      	mov	r3, r2
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f000 f848 	bl	800e71c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e68e:	4618      	mov	r0, r3
 800e690:	3730      	adds	r7, #48	@ 0x30
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e696:	b580      	push	{r7, lr}
 800e698:	b08a      	sub	sp, #40	@ 0x28
 800e69a:	af02      	add	r7, sp, #8
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	60b9      	str	r1, [r7, #8]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10d      	bne.n	800e6c6 <xQueueGenericCreate+0x30>
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ae:	b672      	cpsid	i
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	b662      	cpsie	i
 800e6be:	613b      	str	r3, [r7, #16]
}
 800e6c0:	bf00      	nop
 800e6c2:	bf00      	nop
 800e6c4:	e7fd      	b.n	800e6c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	61fb      	str	r3, [r7, #28]
 800e6d0:	e004      	b.n	800e6dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	fb02 f303 	mul.w	r3, r2, r3
 800e6da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	3350      	adds	r3, #80	@ 0x50
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f002 ff79 	bl	80115d8 <pvPortMalloc>
 800e6e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d011      	beq.n	800e712 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	3350      	adds	r3, #80	@ 0x50
 800e6f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e700:	79fa      	ldrb	r2, [r7, #7]
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	4613      	mov	r3, r2
 800e708:	697a      	ldr	r2, [r7, #20]
 800e70a:	68b9      	ldr	r1, [r7, #8]
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f000 f805 	bl	800e71c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e712:	69bb      	ldr	r3, [r7, #24]
	}
 800e714:	4618      	mov	r0, r3
 800e716:	3720      	adds	r7, #32
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d103      	bne.n	800e738 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	e002      	b.n	800e73e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e74a:	2101      	movs	r1, #1
 800e74c:	69b8      	ldr	r0, [r7, #24]
 800e74e:	f7ff feaf 	bl	800e4b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	78fa      	ldrb	r2, [r7, #3]
 800e756:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e762:	b580      	push	{r7, lr}
 800e764:	b082      	sub	sp, #8
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00e      	beq.n	800e78e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e782:	2300      	movs	r3, #0
 800e784:	2200      	movs	r2, #0
 800e786:	2100      	movs	r1, #0
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 f91d 	bl	800e9c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e78e:	bf00      	nop
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e796:	b580      	push	{r7, lr}
 800e798:	b086      	sub	sp, #24
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	4603      	mov	r3, r0
 800e79e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	617b      	str	r3, [r7, #20]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	6939      	ldr	r1, [r7, #16]
 800e7ae:	6978      	ldr	r0, [r7, #20]
 800e7b0:	f7ff ff71 	bl	800e696 <xQueueGenericCreate>
 800e7b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff ffd3 	bl	800e762 <prvInitialiseMutex>

		return xNewQueue;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
	}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b088      	sub	sp, #32
 800e7ca:	af02      	add	r7, sp, #8
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	6039      	str	r1, [r7, #0]
 800e7d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	617b      	str	r3, [r7, #20]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e7da:	79fb      	ldrb	r3, [r7, #7]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	6939      	ldr	r1, [r7, #16]
 800e7e4:	6978      	ldr	r0, [r7, #20]
 800e7e6:	f7ff fecf 	bl	800e588 <xQueueGenericCreateStatic>
 800e7ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7ff ffb8 	bl	800e762 <prvInitialiseMutex>

		return xNewQueue;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
	}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e7fc:	b590      	push	{r4, r7, lr}
 800e7fe:	b087      	sub	sp, #28
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10d      	bne.n	800e82a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e812:	b672      	cpsid	i
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	b662      	cpsie	i
 800e822:	60fb      	str	r3, [r7, #12]
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop
 800e828:	e7fd      	b.n	800e826 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	689c      	ldr	r4, [r3, #8]
 800e82e:	f001 fe1d 	bl	801046c <xTaskGetCurrentTaskHandle>
 800e832:	4603      	mov	r3, r0
 800e834:	429c      	cmp	r4, r3
 800e836:	d111      	bne.n	800e85c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	1e5a      	subs	r2, r3, #1
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d105      	bne.n	800e856 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e84a:	2300      	movs	r3, #0
 800e84c:	2200      	movs	r2, #0
 800e84e:	2100      	movs	r1, #0
 800e850:	6938      	ldr	r0, [r7, #16]
 800e852:	f000 f8b9 	bl	800e9c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e856:	2301      	movs	r3, #1
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	e001      	b.n	800e860 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e85c:	2300      	movs	r3, #0
 800e85e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e860:	697b      	ldr	r3, [r7, #20]
	}
 800e862:	4618      	mov	r0, r3
 800e864:	371c      	adds	r7, #28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}

0800e86a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e86a:	b590      	push	{r4, r7, lr}
 800e86c:	b087      	sub	sp, #28
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10d      	bne.n	800e89a <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e882:	b672      	cpsid	i
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	b662      	cpsie	i
 800e892:	60fb      	str	r3, [r7, #12]
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	e7fd      	b.n	800e896 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	689c      	ldr	r4, [r3, #8]
 800e89e:	f001 fde5 	bl	801046c <xTaskGetCurrentTaskHandle>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d107      	bne.n	800e8b8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	617b      	str	r3, [r7, #20]
 800e8b6:	e00c      	b.n	800e8d2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6938      	ldr	r0, [r7, #16]
 800e8bc:	f000 fbb2 	bl	800f024 <xQueueSemaphoreTake>
 800e8c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	1c5a      	adds	r2, r3, #1
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e8d2:	697b      	ldr	r3, [r7, #20]
	}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	371c      	adds	r7, #28
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd90      	pop	{r4, r7, pc}

0800e8dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	@ 0x28
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10d      	bne.n	800e90a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f2:	b672      	cpsid	i
 800e8f4:	f383 8811 	msr	BASEPRI, r3
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	b662      	cpsie	i
 800e902:	61bb      	str	r3, [r7, #24]
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	e7fd      	b.n	800e906 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d90d      	bls.n	800e92e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e916:	b672      	cpsid	i
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	b662      	cpsie	i
 800e926:	617b      	str	r3, [r7, #20]
}
 800e928:	bf00      	nop
 800e92a:	bf00      	nop
 800e92c:	e7fd      	b.n	800e92a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e92e:	2302      	movs	r3, #2
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	2100      	movs	r1, #0
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7ff fe25 	bl	800e588 <xQueueGenericCreateStatic>
 800e93e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e94c:	69fb      	ldr	r3, [r7, #28]
	}
 800e94e:	4618      	mov	r0, r3
 800e950:	3720      	adds	r7, #32
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e956:	b580      	push	{r7, lr}
 800e958:	b086      	sub	sp, #24
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10d      	bne.n	800e982 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96a:	b672      	cpsid	i
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	b662      	cpsie	i
 800e97a:	613b      	str	r3, [r7, #16]
}
 800e97c:	bf00      	nop
 800e97e:	bf00      	nop
 800e980:	e7fd      	b.n	800e97e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d90d      	bls.n	800e9a6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98e:	b672      	cpsid	i
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	b662      	cpsie	i
 800e99e:	60fb      	str	r3, [r7, #12]
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	e7fd      	b.n	800e9a2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff fe73 	bl	800e696 <xQueueGenericCreate>
 800e9b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e9be:	697b      	ldr	r3, [r7, #20]
	}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08e      	sub	sp, #56	@ 0x38
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10d      	bne.n	800ea00 <xQueueGenericSend+0x38>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e8:	b672      	cpsid	i
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	b662      	cpsie	i
 800e9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e9fa:	bf00      	nop
 800e9fc:	bf00      	nop
 800e9fe:	e7fd      	b.n	800e9fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d103      	bne.n	800ea0e <xQueueGenericSend+0x46>
 800ea06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <xQueueGenericSend+0x4a>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e000      	b.n	800ea14 <xQueueGenericSend+0x4c>
 800ea12:	2300      	movs	r3, #0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10d      	bne.n	800ea34 <xQueueGenericSend+0x6c>
	__asm volatile
 800ea18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1c:	b672      	cpsid	i
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	b662      	cpsie	i
 800ea2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ea2e:	bf00      	nop
 800ea30:	bf00      	nop
 800ea32:	e7fd      	b.n	800ea30 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d103      	bne.n	800ea42 <xQueueGenericSend+0x7a>
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d101      	bne.n	800ea46 <xQueueGenericSend+0x7e>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e000      	b.n	800ea48 <xQueueGenericSend+0x80>
 800ea46:	2300      	movs	r3, #0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10d      	bne.n	800ea68 <xQueueGenericSend+0xa0>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea50:	b672      	cpsid	i
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	b662      	cpsie	i
 800ea60:	623b      	str	r3, [r7, #32]
}
 800ea62:	bf00      	nop
 800ea64:	bf00      	nop
 800ea66:	e7fd      	b.n	800ea64 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea68:	f001 fd10 	bl	801048c <xTaskGetSchedulerState>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <xQueueGenericSend+0xb0>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d101      	bne.n	800ea7c <xQueueGenericSend+0xb4>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e000      	b.n	800ea7e <xQueueGenericSend+0xb6>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10d      	bne.n	800ea9e <xQueueGenericSend+0xd6>
	__asm volatile
 800ea82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea86:	b672      	cpsid	i
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	b662      	cpsie	i
 800ea96:	61fb      	str	r3, [r7, #28]
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	e7fd      	b.n	800ea9a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea9e:	f002 fc6d 	bl	801137c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d302      	bcc.n	800eab4 <xQueueGenericSend+0xec>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d129      	bne.n	800eb08 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eaba:	f000 fc91 	bl	800f3e0 <prvCopyDataToQueue>
 800eabe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d010      	beq.n	800eaea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaca:	3324      	adds	r3, #36	@ 0x24
 800eacc:	4618      	mov	r0, r3
 800eace:	f001 faff 	bl	80100d0 <xTaskRemoveFromEventList>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d013      	beq.n	800eb00 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ead8:	4b3f      	ldr	r3, [pc, #252]	@ (800ebd8 <xQueueGenericSend+0x210>)
 800eada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	e00a      	b.n	800eb00 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d007      	beq.n	800eb00 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eaf0:	4b39      	ldr	r3, [pc, #228]	@ (800ebd8 <xQueueGenericSend+0x210>)
 800eaf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb00:	f002 fc72 	bl	80113e8 <vPortExitCritical>
				return pdPASS;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e063      	b.n	800ebd0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d103      	bne.n	800eb16 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb0e:	f002 fc6b 	bl	80113e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	e05c      	b.n	800ebd0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d106      	bne.n	800eb2a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb1c:	f107 0314 	add.w	r3, r7, #20
 800eb20:	4618      	mov	r0, r3
 800eb22:	f001 fb3b 	bl	801019c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb26:	2301      	movs	r3, #1
 800eb28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb2a:	f002 fc5d 	bl	80113e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb2e:	f001 f861 	bl	800fbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb32:	f002 fc23 	bl	801137c <vPortEnterCritical>
 800eb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb3c:	b25b      	sxtb	r3, r3
 800eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb42:	d103      	bne.n	800eb4c <xQueueGenericSend+0x184>
 800eb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb52:	b25b      	sxtb	r3, r3
 800eb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb58:	d103      	bne.n	800eb62 <xQueueGenericSend+0x19a>
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb62:	f002 fc41 	bl	80113e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb66:	1d3a      	adds	r2, r7, #4
 800eb68:	f107 0314 	add.w	r3, r7, #20
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f001 fb2a 	bl	80101c8 <xTaskCheckForTimeOut>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d124      	bne.n	800ebc4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb7c:	f000 fd28 	bl	800f5d0 <prvIsQueueFull>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d018      	beq.n	800ebb8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb88:	3310      	adds	r3, #16
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f001 fa48 	bl	8010024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb96:	f000 fcb3 	bl	800f500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb9a:	f001 f839 	bl	800fc10 <xTaskResumeAll>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f47f af7c 	bne.w	800ea9e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800eba6:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd8 <xQueueGenericSend+0x210>)
 800eba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	e772      	b.n	800ea9e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ebb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ebba:	f000 fca1 	bl	800f500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebbe:	f001 f827 	bl	800fc10 <xTaskResumeAll>
 800ebc2:	e76c      	b.n	800ea9e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ebc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ebc6:	f000 fc9b 	bl	800f500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebca:	f001 f821 	bl	800fc10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ebce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3738      	adds	r7, #56	@ 0x38
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	@ 0x38
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
 800ebe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10d      	bne.n	800ec10 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800ebf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf8:	b672      	cpsid	i
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	b662      	cpsie	i
 800ec08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ec0a:	bf00      	nop
 800ec0c:	bf00      	nop
 800ec0e:	e7fd      	b.n	800ec0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d103      	bne.n	800ec1e <xQueueGenericSendFromISR+0x42>
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d101      	bne.n	800ec22 <xQueueGenericSendFromISR+0x46>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e000      	b.n	800ec24 <xQueueGenericSendFromISR+0x48>
 800ec22:	2300      	movs	r3, #0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10d      	bne.n	800ec44 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2c:	b672      	cpsid	i
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	b662      	cpsie	i
 800ec3c:	623b      	str	r3, [r7, #32]
}
 800ec3e:	bf00      	nop
 800ec40:	bf00      	nop
 800ec42:	e7fd      	b.n	800ec40 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d103      	bne.n	800ec52 <xQueueGenericSendFromISR+0x76>
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <xQueueGenericSendFromISR+0x7a>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <xQueueGenericSendFromISR+0x7c>
 800ec56:	2300      	movs	r3, #0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10d      	bne.n	800ec78 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec60:	b672      	cpsid	i
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	b662      	cpsie	i
 800ec70:	61fb      	str	r3, [r7, #28]
}
 800ec72:	bf00      	nop
 800ec74:	bf00      	nop
 800ec76:	e7fd      	b.n	800ec74 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec78:	f002 fc68 	bl	801154c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ec7c:	f3ef 8211 	mrs	r2, BASEPRI
 800ec80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec84:	b672      	cpsid	i
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	b662      	cpsie	i
 800ec94:	61ba      	str	r2, [r7, #24]
 800ec96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d302      	bcc.n	800ecae <xQueueGenericSendFromISR+0xd2>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d12c      	bne.n	800ed08 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ecae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecb8:	683a      	ldr	r2, [r7, #0]
 800ecba:	68b9      	ldr	r1, [r7, #8]
 800ecbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecbe:	f000 fb8f 	bl	800f3e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d112      	bne.n	800ecf2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d016      	beq.n	800ed02 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd6:	3324      	adds	r3, #36	@ 0x24
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 f9f9 	bl	80100d0 <xTaskRemoveFromEventList>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00e      	beq.n	800ed02 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00b      	beq.n	800ed02 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2201      	movs	r2, #1
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	e007      	b.n	800ed02 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ecf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	b25a      	sxtb	r2, r3
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ed02:	2301      	movs	r3, #1
 800ed04:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800ed06:	e001      	b.n	800ed0c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ed16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3738      	adds	r7, #56	@ 0x38
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b08e      	sub	sp, #56	@ 0x38
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ed30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10d      	bne.n	800ed52 <xQueueGiveFromISR+0x30>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3a:	b672      	cpsid	i
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	b662      	cpsie	i
 800ed4a:	623b      	str	r3, [r7, #32]
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	e7fd      	b.n	800ed4e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00d      	beq.n	800ed76 <xQueueGiveFromISR+0x54>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed5e:	b672      	cpsid	i
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	b662      	cpsie	i
 800ed6e:	61fb      	str	r3, [r7, #28]
}
 800ed70:	bf00      	nop
 800ed72:	bf00      	nop
 800ed74:	e7fd      	b.n	800ed72 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d103      	bne.n	800ed86 <xQueueGiveFromISR+0x64>
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <xQueueGiveFromISR+0x68>
 800ed86:	2301      	movs	r3, #1
 800ed88:	e000      	b.n	800ed8c <xQueueGiveFromISR+0x6a>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10d      	bne.n	800edac <xQueueGiveFromISR+0x8a>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed94:	b672      	cpsid	i
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	b662      	cpsie	i
 800eda4:	61bb      	str	r3, [r7, #24]
}
 800eda6:	bf00      	nop
 800eda8:	bf00      	nop
 800edaa:	e7fd      	b.n	800eda8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edac:	f002 fbce 	bl	801154c <vPortValidateInterruptPriority>
	__asm volatile
 800edb0:	f3ef 8211 	mrs	r2, BASEPRI
 800edb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb8:	b672      	cpsid	i
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	b662      	cpsie	i
 800edc8:	617a      	str	r2, [r7, #20]
 800edca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800edcc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edd4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800edd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eddc:	429a      	cmp	r2, r3
 800edde:	d22b      	bcs.n	800ee38 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ede0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ede6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800edea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800edf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfa:	d112      	bne.n	800ee22 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d016      	beq.n	800ee32 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	3324      	adds	r3, #36	@ 0x24
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f001 f961 	bl	80100d0 <xTaskRemoveFromEventList>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00e      	beq.n	800ee32 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00b      	beq.n	800ee32 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	e007      	b.n	800ee32 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee26:	3301      	adds	r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	b25a      	sxtb	r2, r3
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ee32:	2301      	movs	r3, #1
 800ee34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee36:	e001      	b.n	800ee3c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee3e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f383 8811 	msr	BASEPRI, r3
}
 800ee46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3738      	adds	r7, #56	@ 0x38
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08c      	sub	sp, #48	@ 0x30
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee60:	2300      	movs	r3, #0
 800ee62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d10d      	bne.n	800ee8a <xQueueReceive+0x36>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee72:	b672      	cpsid	i
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	b662      	cpsie	i
 800ee82:	623b      	str	r3, [r7, #32]
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
 800ee88:	e7fd      	b.n	800ee86 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d103      	bne.n	800ee98 <xQueueReceive+0x44>
 800ee90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <xQueueReceive+0x48>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e000      	b.n	800ee9e <xQueueReceive+0x4a>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10d      	bne.n	800eebe <xQueueReceive+0x6a>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	b672      	cpsid	i
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	b662      	cpsie	i
 800eeb6:	61fb      	str	r3, [r7, #28]
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	e7fd      	b.n	800eeba <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eebe:	f001 fae5 	bl	801048c <xTaskGetSchedulerState>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <xQueueReceive+0x7a>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <xQueueReceive+0x7e>
 800eece:	2301      	movs	r3, #1
 800eed0:	e000      	b.n	800eed4 <xQueueReceive+0x80>
 800eed2:	2300      	movs	r3, #0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10d      	bne.n	800eef4 <xQueueReceive+0xa0>
	__asm volatile
 800eed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eedc:	b672      	cpsid	i
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	b662      	cpsie	i
 800eeec:	61bb      	str	r3, [r7, #24]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eef4:	f002 fa42 	bl	801137c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eefc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d01f      	beq.n	800ef44 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef08:	f000 fad4 	bl	800f4b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0e:	1e5a      	subs	r2, r3, #1
 800ef10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00f      	beq.n	800ef3c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1e:	3310      	adds	r3, #16
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 f8d5 	bl	80100d0 <xTaskRemoveFromEventList>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef2c:	4b3c      	ldr	r3, [pc, #240]	@ (800f020 <xQueueReceive+0x1cc>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef3c:	f002 fa54 	bl	80113e8 <vPortExitCritical>
				return pdPASS;
 800ef40:	2301      	movs	r3, #1
 800ef42:	e069      	b.n	800f018 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef4a:	f002 fa4d 	bl	80113e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e062      	b.n	800f018 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef58:	f107 0310 	add.w	r3, r7, #16
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f001 f91d 	bl	801019c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef62:	2301      	movs	r3, #1
 800ef64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef66:	f002 fa3f 	bl	80113e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef6a:	f000 fe43 	bl	800fbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef6e:	f002 fa05 	bl	801137c <vPortEnterCritical>
 800ef72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7e:	d103      	bne.n	800ef88 <xQueueReceive+0x134>
 800ef80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef8e:	b25b      	sxtb	r3, r3
 800ef90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef94:	d103      	bne.n	800ef9e <xQueueReceive+0x14a>
 800ef96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef9e:	f002 fa23 	bl	80113e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efa2:	1d3a      	adds	r2, r7, #4
 800efa4:	f107 0310 	add.w	r3, r7, #16
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f001 f90c 	bl	80101c8 <xTaskCheckForTimeOut>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d123      	bne.n	800effe <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efb8:	f000 faf4 	bl	800f5a4 <prvIsQueueEmpty>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d017      	beq.n	800eff2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	3324      	adds	r3, #36	@ 0x24
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f001 f82a 	bl	8010024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efd2:	f000 fa95 	bl	800f500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efd6:	f000 fe1b 	bl	800fc10 <xTaskResumeAll>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d189      	bne.n	800eef4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800efe0:	4b0f      	ldr	r3, [pc, #60]	@ (800f020 <xQueueReceive+0x1cc>)
 800efe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	e780      	b.n	800eef4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eff4:	f000 fa84 	bl	800f500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eff8:	f000 fe0a 	bl	800fc10 <xTaskResumeAll>
 800effc:	e77a      	b.n	800eef4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800effe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f000:	f000 fa7e 	bl	800f500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f004:	f000 fe04 	bl	800fc10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f00a:	f000 facb 	bl	800f5a4 <prvIsQueueEmpty>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	f43f af6f 	beq.w	800eef4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f016:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3730      	adds	r7, #48	@ 0x30
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	@ 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f02e:	2300      	movs	r3, #0
 800f030:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10d      	bne.n	800f05c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f044:	b672      	cpsid	i
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	b662      	cpsie	i
 800f054:	623b      	str	r3, [r7, #32]
}
 800f056:	bf00      	nop
 800f058:	bf00      	nop
 800f05a:	e7fd      	b.n	800f058 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00d      	beq.n	800f080 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800f064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f068:	b672      	cpsid	i
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	b662      	cpsie	i
 800f078:	61fb      	str	r3, [r7, #28]
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	e7fd      	b.n	800f07c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f080:	f001 fa04 	bl	801048c <xTaskGetSchedulerState>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <xQueueSemaphoreTake+0x6c>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <xQueueSemaphoreTake+0x70>
 800f090:	2301      	movs	r3, #1
 800f092:	e000      	b.n	800f096 <xQueueSemaphoreTake+0x72>
 800f094:	2300      	movs	r3, #0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10d      	bne.n	800f0b6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800f09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09e:	b672      	cpsid	i
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	b662      	cpsie	i
 800f0ae:	61bb      	str	r3, [r7, #24]
}
 800f0b0:	bf00      	nop
 800f0b2:	bf00      	nop
 800f0b4:	e7fd      	b.n	800f0b2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0b6:	f002 f961 	bl	801137c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d024      	beq.n	800f110 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c8:	1e5a      	subs	r2, r3, #1
 800f0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d104      	bne.n	800f0e0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0d6:	f001 fb5b 	bl	8010790 <pvTaskIncrementMutexHeldCount>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00f      	beq.n	800f108 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ea:	3310      	adds	r3, #16
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 ffef 	bl	80100d0 <xTaskRemoveFromEventList>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d007      	beq.n	800f108 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0f8:	4b55      	ldr	r3, [pc, #340]	@ (800f250 <xQueueSemaphoreTake+0x22c>)
 800f0fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0fe:	601a      	str	r2, [r3, #0]
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f108:	f002 f96e 	bl	80113e8 <vPortExitCritical>
				return pdPASS;
 800f10c:	2301      	movs	r3, #1
 800f10e:	e09a      	b.n	800f246 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d114      	bne.n	800f140 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00d      	beq.n	800f138 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f120:	b672      	cpsid	i
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	b662      	cpsie	i
 800f130:	617b      	str	r3, [r7, #20]
}
 800f132:	bf00      	nop
 800f134:	bf00      	nop
 800f136:	e7fd      	b.n	800f134 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f138:	f002 f956 	bl	80113e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f13c:	2300      	movs	r3, #0
 800f13e:	e082      	b.n	800f246 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f146:	f107 030c 	add.w	r3, r7, #12
 800f14a:	4618      	mov	r0, r3
 800f14c:	f001 f826 	bl	801019c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f150:	2301      	movs	r3, #1
 800f152:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f154:	f002 f948 	bl	80113e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f158:	f000 fd4c 	bl	800fbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f15c:	f002 f90e 	bl	801137c <vPortEnterCritical>
 800f160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f166:	b25b      	sxtb	r3, r3
 800f168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16c:	d103      	bne.n	800f176 <xQueueSemaphoreTake+0x152>
 800f16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f170:	2200      	movs	r2, #0
 800f172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f17c:	b25b      	sxtb	r3, r3
 800f17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f182:	d103      	bne.n	800f18c <xQueueSemaphoreTake+0x168>
 800f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f186:	2200      	movs	r2, #0
 800f188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f18c:	f002 f92c 	bl	80113e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f190:	463a      	mov	r2, r7
 800f192:	f107 030c 	add.w	r3, r7, #12
 800f196:	4611      	mov	r1, r2
 800f198:	4618      	mov	r0, r3
 800f19a:	f001 f815 	bl	80101c8 <xTaskCheckForTimeOut>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d132      	bne.n	800f20a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1a6:	f000 f9fd 	bl	800f5a4 <prvIsQueueEmpty>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d026      	beq.n	800f1fe <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d109      	bne.n	800f1cc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800f1b8:	f002 f8e0 	bl	801137c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f001 f981 	bl	80104c8 <xTaskPriorityInherit>
 800f1c6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f1c8:	f002 f90e 	bl	80113e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ce:	3324      	adds	r3, #36	@ 0x24
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 ff25 	bl	8010024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1dc:	f000 f990 	bl	800f500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1e0:	f000 fd16 	bl	800fc10 <xTaskResumeAll>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f47f af65 	bne.w	800f0b6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800f1ec:	4b18      	ldr	r3, [pc, #96]	@ (800f250 <xQueueSemaphoreTake+0x22c>)
 800f1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	e75b      	b.n	800f0b6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f200:	f000 f97e 	bl	800f500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f204:	f000 fd04 	bl	800fc10 <xTaskResumeAll>
 800f208:	e755      	b.n	800f0b6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f20a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f20c:	f000 f978 	bl	800f500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f210:	f000 fcfe 	bl	800fc10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f214:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f216:	f000 f9c5 	bl	800f5a4 <prvIsQueueEmpty>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f43f af4a 	beq.w	800f0b6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00d      	beq.n	800f244 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800f228:	f002 f8a8 	bl	801137c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f22c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f22e:	f000 f8bf 	bl	800f3b0 <prvGetDisinheritPriorityAfterTimeout>
 800f232:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f23a:	4618      	mov	r0, r3
 800f23c:	f001 fa20 	bl	8010680 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f240:	f002 f8d2 	bl	80113e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f246:	4618      	mov	r0, r3
 800f248:	3738      	adds	r7, #56	@ 0x38
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08e      	sub	sp, #56	@ 0x38
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10d      	bne.n	800f286 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f26e:	b672      	cpsid	i
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	b662      	cpsie	i
 800f27e:	623b      	str	r3, [r7, #32]
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	e7fd      	b.n	800f282 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d103      	bne.n	800f294 <xQueueReceiveFromISR+0x40>
 800f28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <xQueueReceiveFromISR+0x44>
 800f294:	2301      	movs	r3, #1
 800f296:	e000      	b.n	800f29a <xQueueReceiveFromISR+0x46>
 800f298:	2300      	movs	r3, #0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10d      	bne.n	800f2ba <xQueueReceiveFromISR+0x66>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a2:	b672      	cpsid	i
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	b662      	cpsie	i
 800f2b2:	61fb      	str	r3, [r7, #28]
}
 800f2b4:	bf00      	nop
 800f2b6:	bf00      	nop
 800f2b8:	e7fd      	b.n	800f2b6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2ba:	f002 f947 	bl	801154c <vPortValidateInterruptPriority>
	__asm volatile
 800f2be:	f3ef 8211 	mrs	r2, BASEPRI
 800f2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c6:	b672      	cpsid	i
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	b662      	cpsie	i
 800f2d6:	61ba      	str	r2, [r7, #24]
 800f2d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d02f      	beq.n	800f34a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2f4:	68b9      	ldr	r1, [r7, #8]
 800f2f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2f8:	f000 f8dc 	bl	800f4b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2fe:	1e5a      	subs	r2, r3, #1
 800f300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f302:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f304:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f30c:	d112      	bne.n	800f334 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d016      	beq.n	800f344 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f318:	3310      	adds	r3, #16
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 fed8 	bl	80100d0 <xTaskRemoveFromEventList>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00e      	beq.n	800f344 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00b      	beq.n	800f344 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	e007      	b.n	800f344 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f338:	3301      	adds	r3, #1
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	b25a      	sxtb	r2, r3
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f344:	2301      	movs	r3, #1
 800f346:	637b      	str	r3, [r7, #52]	@ 0x34
 800f348:	e001      	b.n	800f34e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800f34a:	2300      	movs	r3, #0
 800f34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f350:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	f383 8811 	msr	BASEPRI, r3
}
 800f358:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3738      	adds	r7, #56	@ 0x38
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10d      	bne.n	800f392 <vQueueDelete+0x2e>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37a:	b672      	cpsid	i
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	b662      	cpsie	i
 800f38a:	60bb      	str	r3, [r7, #8]
}
 800f38c:	bf00      	nop
 800f38e:	bf00      	nop
 800f390:	e7fd      	b.n	800f38e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f000 f95e 	bl	800f654 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d102      	bne.n	800f3a8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f002 f9e6 	bl	8011774 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f3a8:	bf00      	nop
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d006      	beq.n	800f3ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f3ca:	60fb      	str	r3, [r7, #12]
 800f3cc:	e001      	b.n	800f3d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
	}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10d      	bne.n	800f41a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d14d      	bne.n	800f4a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f001 f8c4 	bl	8010598 <xTaskPriorityDisinherit>
 800f410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	609a      	str	r2, [r3, #8]
 800f418:	e043      	b.n	800f4a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d119      	bne.n	800f454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6858      	ldr	r0, [r3, #4]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f428:	461a      	mov	r2, r3
 800f42a:	68b9      	ldr	r1, [r7, #8]
 800f42c:	f00e f971 	bl	801d712 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f438:	441a      	add	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	429a      	cmp	r2, r3
 800f448:	d32b      	bcc.n	800f4a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	605a      	str	r2, [r3, #4]
 800f452:	e026      	b.n	800f4a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	68d8      	ldr	r0, [r3, #12]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f45c:	461a      	mov	r2, r3
 800f45e:	68b9      	ldr	r1, [r7, #8]
 800f460:	f00e f957 	bl	801d712 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68da      	ldr	r2, [r3, #12]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f46c:	425b      	negs	r3, r3
 800f46e:	441a      	add	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	68da      	ldr	r2, [r3, #12]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d207      	bcs.n	800f490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	689a      	ldr	r2, [r3, #8]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f488:	425b      	negs	r3, r3
 800f48a:	441a      	add	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d105      	bne.n	800f4a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f4aa:	697b      	ldr	r3, [r7, #20]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3718      	adds	r7, #24
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d018      	beq.n	800f4f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4ce:	441a      	add	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68da      	ldr	r2, [r3, #12]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d303      	bcc.n	800f4e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68d9      	ldr	r1, [r3, #12]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6838      	ldr	r0, [r7, #0]
 800f4f4:	f00e f90d 	bl	801d712 <memcpy>
	}
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f508:	f001 ff38 	bl	801137c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f514:	e011      	b.n	800f53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d012      	beq.n	800f544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	3324      	adds	r3, #36	@ 0x24
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fdd4 	bl	80100d0 <xTaskRemoveFromEventList>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f52e:	f000 feb3 	bl	8010298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	3b01      	subs	r3, #1
 800f536:	b2db      	uxtb	r3, r3
 800f538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dce9      	bgt.n	800f516 <prvUnlockQueue+0x16>
 800f542:	e000      	b.n	800f546 <prvUnlockQueue+0x46>
					break;
 800f544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	22ff      	movs	r2, #255	@ 0xff
 800f54a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f54e:	f001 ff4b 	bl	80113e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f552:	f001 ff13 	bl	801137c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f55e:	e011      	b.n	800f584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d012      	beq.n	800f58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3310      	adds	r3, #16
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 fdaf 	bl	80100d0 <xTaskRemoveFromEventList>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f578:	f000 fe8e 	bl	8010298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	3b01      	subs	r3, #1
 800f580:	b2db      	uxtb	r3, r3
 800f582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	dce9      	bgt.n	800f560 <prvUnlockQueue+0x60>
 800f58c:	e000      	b.n	800f590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	22ff      	movs	r2, #255	@ 0xff
 800f594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f598:	f001 ff26 	bl	80113e8 <vPortExitCritical>
}
 800f59c:	bf00      	nop
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5ac:	f001 fee6 	bl	801137c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	e001      	b.n	800f5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5c2:	f001 ff11 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5d8:	f001 fed0 	bl	801137c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d102      	bne.n	800f5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	60fb      	str	r3, [r7, #12]
 800f5ec:	e001      	b.n	800f5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5f2:	f001 fef9 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f60a:	2300      	movs	r3, #0
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	e014      	b.n	800f63a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f610:	4a0f      	ldr	r2, [pc, #60]	@ (800f650 <vQueueAddToRegistry+0x50>)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f61c:	490c      	ldr	r1, [pc, #48]	@ (800f650 <vQueueAddToRegistry+0x50>)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f626:	4a0a      	ldr	r2, [pc, #40]	@ (800f650 <vQueueAddToRegistry+0x50>)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	4413      	add	r3, r2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f632:	e006      	b.n	800f642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	3301      	adds	r3, #1
 800f638:	60fb      	str	r3, [r7, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b07      	cmp	r3, #7
 800f63e:	d9e7      	bls.n	800f610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	3714      	adds	r7, #20
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	2000ad80 	.word	0x2000ad80

0800f654 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f65c:	2300      	movs	r3, #0
 800f65e:	60fb      	str	r3, [r7, #12]
 800f660:	e016      	b.n	800f690 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f662:	4a10      	ldr	r2, [pc, #64]	@ (800f6a4 <vQueueUnregisterQueue+0x50>)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	00db      	lsls	r3, r3, #3
 800f668:	4413      	add	r3, r2
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d10b      	bne.n	800f68a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f672:	4a0c      	ldr	r2, [pc, #48]	@ (800f6a4 <vQueueUnregisterQueue+0x50>)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2100      	movs	r1, #0
 800f678:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f67c:	4a09      	ldr	r2, [pc, #36]	@ (800f6a4 <vQueueUnregisterQueue+0x50>)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	4413      	add	r3, r2
 800f684:	2200      	movs	r2, #0
 800f686:	605a      	str	r2, [r3, #4]
				break;
 800f688:	e006      	b.n	800f698 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	3301      	adds	r3, #1
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2b07      	cmp	r3, #7
 800f694:	d9e5      	bls.n	800f662 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f696:	bf00      	nop
 800f698:	bf00      	nop
 800f69a:	3714      	adds	r7, #20
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	2000ad80 	.word	0x2000ad80

0800f6a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f6b8:	f001 fe60 	bl	801137c <vPortEnterCritical>
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f6c2:	b25b      	sxtb	r3, r3
 800f6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c8:	d103      	bne.n	800f6d2 <vQueueWaitForMessageRestricted+0x2a>
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6d8:	b25b      	sxtb	r3, r3
 800f6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6de:	d103      	bne.n	800f6e8 <vQueueWaitForMessageRestricted+0x40>
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6e8:	f001 fe7e 	bl	80113e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3324      	adds	r3, #36	@ 0x24
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	68b9      	ldr	r1, [r7, #8]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fcb9 	bl	8010074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f702:	6978      	ldr	r0, [r7, #20]
 800f704:	f7ff fefc 	bl	800f500 <prvUnlockQueue>
	}
 800f708:	bf00      	nop
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f710:	b580      	push	{r7, lr}
 800f712:	b08e      	sub	sp, #56	@ 0x38
 800f714:	af04      	add	r7, sp, #16
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
 800f71c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f720:	2b00      	cmp	r3, #0
 800f722:	d10d      	bne.n	800f740 <xTaskCreateStatic+0x30>
	__asm volatile
 800f724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f728:	b672      	cpsid	i
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	b662      	cpsie	i
 800f738:	623b      	str	r3, [r7, #32]
}
 800f73a:	bf00      	nop
 800f73c:	bf00      	nop
 800f73e:	e7fd      	b.n	800f73c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10d      	bne.n	800f762 <xTaskCreateStatic+0x52>
	__asm volatile
 800f746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74a:	b672      	cpsid	i
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	b662      	cpsie	i
 800f75a:	61fb      	str	r3, [r7, #28]
}
 800f75c:	bf00      	nop
 800f75e:	bf00      	nop
 800f760:	e7fd      	b.n	800f75e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f762:	23a8      	movs	r3, #168	@ 0xa8
 800f764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	2ba8      	cmp	r3, #168	@ 0xa8
 800f76a:	d00d      	beq.n	800f788 <xTaskCreateStatic+0x78>
	__asm volatile
 800f76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f770:	b672      	cpsid	i
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	b662      	cpsie	i
 800f780:	61bb      	str	r3, [r7, #24]
}
 800f782:	bf00      	nop
 800f784:	bf00      	nop
 800f786:	e7fd      	b.n	800f784 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f788:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d01e      	beq.n	800f7ce <xTaskCreateStatic+0xbe>
 800f790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f792:	2b00      	cmp	r3, #0
 800f794:	d01b      	beq.n	800f7ce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f798:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f79e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9303      	str	r3, [sp, #12]
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ae:	9302      	str	r3, [sp, #8]
 800f7b0:	f107 0314 	add.w	r3, r7, #20
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f851 	bl	800f868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f7c8:	f000 f8f8 	bl	800f9bc <prvAddNewTaskToReadyList>
 800f7cc:	e001      	b.n	800f7d2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f7d2:	697b      	ldr	r3, [r7, #20]
	}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3728      	adds	r7, #40	@ 0x28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08c      	sub	sp, #48	@ 0x30
 800f7e0:	af04      	add	r7, sp, #16
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	603b      	str	r3, [r7, #0]
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f001 fef1 	bl	80115d8 <pvPortMalloc>
 800f7f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00e      	beq.n	800f81c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7fe:	20a8      	movs	r0, #168	@ 0xa8
 800f800:	f001 feea 	bl	80115d8 <pvPortMalloc>
 800f804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	697a      	ldr	r2, [r7, #20]
 800f810:	631a      	str	r2, [r3, #48]	@ 0x30
 800f812:	e005      	b.n	800f820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f814:	6978      	ldr	r0, [r7, #20]
 800f816:	f001 ffad 	bl	8011774 <vPortFree>
 800f81a:	e001      	b.n	800f820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d017      	beq.n	800f856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f82e:	88fa      	ldrh	r2, [r7, #6]
 800f830:	2300      	movs	r3, #0
 800f832:	9303      	str	r3, [sp, #12]
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	9302      	str	r3, [sp, #8]
 800f838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83a:	9301      	str	r3, [sp, #4]
 800f83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	68b9      	ldr	r1, [r7, #8]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 f80f 	bl	800f868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f84a:	69f8      	ldr	r0, [r7, #28]
 800f84c:	f000 f8b6 	bl	800f9bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f850:	2301      	movs	r3, #1
 800f852:	61bb      	str	r3, [r7, #24]
 800f854:	e002      	b.n	800f85c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
 800f85a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f85c:	69bb      	ldr	r3, [r7, #24]
	}
 800f85e:	4618      	mov	r0, r3
 800f860:	3720      	adds	r7, #32
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b088      	sub	sp, #32
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f878:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	461a      	mov	r2, r3
 800f880:	21a5      	movs	r1, #165	@ 0xa5
 800f882:	f00d fe72 	bl	801d56a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f88a:	6879      	ldr	r1, [r7, #4]
 800f88c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f890:	440b      	add	r3, r1
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4413      	add	r3, r2
 800f896:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f898:	69bb      	ldr	r3, [r7, #24]
 800f89a:	f023 0307 	bic.w	r3, r3, #7
 800f89e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	f003 0307 	and.w	r3, r3, #7
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00d      	beq.n	800f8c6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ae:	b672      	cpsid	i
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	b662      	cpsie	i
 800f8be:	617b      	str	r3, [r7, #20]
}
 800f8c0:	bf00      	nop
 800f8c2:	bf00      	nop
 800f8c4:	e7fd      	b.n	800f8c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d01f      	beq.n	800f90c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	61fb      	str	r3, [r7, #28]
 800f8d0:	e012      	b.n	800f8f8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	7819      	ldrb	r1, [r3, #0]
 800f8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	4413      	add	r3, r2
 800f8e0:	3334      	adds	r3, #52	@ 0x34
 800f8e2:	460a      	mov	r2, r1
 800f8e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d006      	beq.n	800f900 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	61fb      	str	r3, [r7, #28]
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	2b0f      	cmp	r3, #15
 800f8fc:	d9e9      	bls.n	800f8d2 <prvInitialiseNewTask+0x6a>
 800f8fe:	e000      	b.n	800f902 <prvInitialiseNewTask+0x9a>
			{
				break;
 800f900:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f90a:	e003      	b.n	800f914 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f916:	2b37      	cmp	r3, #55	@ 0x37
 800f918:	d901      	bls.n	800f91e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f91a:	2337      	movs	r3, #55	@ 0x37
 800f91c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f922:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f928:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f92c:	2200      	movs	r2, #0
 800f92e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f932:	3304      	adds	r3, #4
 800f934:	4618      	mov	r0, r3
 800f936:	f7fe fd27 	bl	800e388 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93c:	3318      	adds	r3, #24
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fe fd22 	bl	800e388 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f948:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f952:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f958:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f95c:	2200      	movs	r2, #0
 800f95e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f964:	2200      	movs	r2, #0
 800f966:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f96c:	3354      	adds	r3, #84	@ 0x54
 800f96e:	224c      	movs	r2, #76	@ 0x4c
 800f970:	2100      	movs	r1, #0
 800f972:	4618      	mov	r0, r3
 800f974:	f00d fdf9 	bl	801d56a <memset>
 800f978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f97a:	4a0d      	ldr	r2, [pc, #52]	@ (800f9b0 <prvInitialiseNewTask+0x148>)
 800f97c:	659a      	str	r2, [r3, #88]	@ 0x58
 800f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f980:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b4 <prvInitialiseNewTask+0x14c>)
 800f982:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f986:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b8 <prvInitialiseNewTask+0x150>)
 800f988:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f98a:	683a      	ldr	r2, [r7, #0]
 800f98c:	68f9      	ldr	r1, [r7, #12]
 800f98e:	69b8      	ldr	r0, [r7, #24]
 800f990:	f001 fbe2 	bl	8011158 <pxPortInitialiseStack>
 800f994:	4602      	mov	r2, r0
 800f996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f998:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9a6:	bf00      	nop
 800f9a8:	3720      	adds	r7, #32
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	2002768c 	.word	0x2002768c
 800f9b4:	200276f4 	.word	0x200276f4
 800f9b8:	2002775c 	.word	0x2002775c

0800f9bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9c4:	f001 fcda 	bl	801137c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9c8:	4b2d      	ldr	r3, [pc, #180]	@ (800fa80 <prvAddNewTaskToReadyList+0xc4>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	4a2c      	ldr	r2, [pc, #176]	@ (800fa80 <prvAddNewTaskToReadyList+0xc4>)
 800f9d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9d2:	4b2c      	ldr	r3, [pc, #176]	@ (800fa84 <prvAddNewTaskToReadyList+0xc8>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d109      	bne.n	800f9ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f9da:	4a2a      	ldr	r2, [pc, #168]	@ (800fa84 <prvAddNewTaskToReadyList+0xc8>)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f9e0:	4b27      	ldr	r3, [pc, #156]	@ (800fa80 <prvAddNewTaskToReadyList+0xc4>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d110      	bne.n	800fa0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f9e8:	f000 fc7a 	bl	80102e0 <prvInitialiseTaskLists>
 800f9ec:	e00d      	b.n	800fa0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f9ee:	4b26      	ldr	r3, [pc, #152]	@ (800fa88 <prvAddNewTaskToReadyList+0xcc>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d109      	bne.n	800fa0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f9f6:	4b23      	ldr	r3, [pc, #140]	@ (800fa84 <prvAddNewTaskToReadyList+0xc8>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d802      	bhi.n	800fa0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa04:	4a1f      	ldr	r2, [pc, #124]	@ (800fa84 <prvAddNewTaskToReadyList+0xc8>)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa0a:	4b20      	ldr	r3, [pc, #128]	@ (800fa8c <prvAddNewTaskToReadyList+0xd0>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	4a1e      	ldr	r2, [pc, #120]	@ (800fa8c <prvAddNewTaskToReadyList+0xd0>)
 800fa12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fa14:	4b1d      	ldr	r3, [pc, #116]	@ (800fa8c <prvAddNewTaskToReadyList+0xd0>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa20:	4b1b      	ldr	r3, [pc, #108]	@ (800fa90 <prvAddNewTaskToReadyList+0xd4>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d903      	bls.n	800fa30 <prvAddNewTaskToReadyList+0x74>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa2c:	4a18      	ldr	r2, [pc, #96]	@ (800fa90 <prvAddNewTaskToReadyList+0xd4>)
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa34:	4613      	mov	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	4413      	add	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4a15      	ldr	r2, [pc, #84]	@ (800fa94 <prvAddNewTaskToReadyList+0xd8>)
 800fa3e:	441a      	add	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	3304      	adds	r3, #4
 800fa44:	4619      	mov	r1, r3
 800fa46:	4610      	mov	r0, r2
 800fa48:	f7fe fcab 	bl	800e3a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa4c:	f001 fccc 	bl	80113e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa50:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <prvAddNewTaskToReadyList+0xcc>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00e      	beq.n	800fa76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa58:	4b0a      	ldr	r3, [pc, #40]	@ (800fa84 <prvAddNewTaskToReadyList+0xc8>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d207      	bcs.n	800fa76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa66:	4b0c      	ldr	r3, [pc, #48]	@ (800fa98 <prvAddNewTaskToReadyList+0xdc>)
 800fa68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa76:	bf00      	nop
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	2000b294 	.word	0x2000b294
 800fa84:	2000adc0 	.word	0x2000adc0
 800fa88:	2000b2a0 	.word	0x2000b2a0
 800fa8c:	2000b2b0 	.word	0x2000b2b0
 800fa90:	2000b29c 	.word	0x2000b29c
 800fa94:	2000adc4 	.word	0x2000adc4
 800fa98:	e000ed04 	.word	0xe000ed04

0800fa9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800faa4:	2300      	movs	r3, #0
 800faa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d01a      	beq.n	800fae4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800faae:	4b15      	ldr	r3, [pc, #84]	@ (800fb04 <vTaskDelay+0x68>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00d      	beq.n	800fad2 <vTaskDelay+0x36>
	__asm volatile
 800fab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faba:	b672      	cpsid	i
 800fabc:	f383 8811 	msr	BASEPRI, r3
 800fac0:	f3bf 8f6f 	isb	sy
 800fac4:	f3bf 8f4f 	dsb	sy
 800fac8:	b662      	cpsie	i
 800faca:	60bb      	str	r3, [r7, #8]
}
 800facc:	bf00      	nop
 800face:	bf00      	nop
 800fad0:	e7fd      	b.n	800face <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fad2:	f000 f88f 	bl	800fbf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fad6:	2100      	movs	r1, #0
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 ff81 	bl	80109e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fade:	f000 f897 	bl	800fc10 <xTaskResumeAll>
 800fae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d107      	bne.n	800fafa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800faea:	4b07      	ldr	r3, [pc, #28]	@ (800fb08 <vTaskDelay+0x6c>)
 800faec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fafa:	bf00      	nop
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	2000b2bc 	.word	0x2000b2bc
 800fb08:	e000ed04 	.word	0xe000ed04

0800fb0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08a      	sub	sp, #40	@ 0x28
 800fb10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fb16:	2300      	movs	r3, #0
 800fb18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fb1a:	463a      	mov	r2, r7
 800fb1c:	1d39      	adds	r1, r7, #4
 800fb1e:	f107 0308 	add.w	r3, r7, #8
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fe fbdc 	bl	800e2e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	9202      	str	r2, [sp, #8]
 800fb30:	9301      	str	r3, [sp, #4]
 800fb32:	2300      	movs	r3, #0
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	2300      	movs	r3, #0
 800fb38:	460a      	mov	r2, r1
 800fb3a:	4926      	ldr	r1, [pc, #152]	@ (800fbd4 <vTaskStartScheduler+0xc8>)
 800fb3c:	4826      	ldr	r0, [pc, #152]	@ (800fbd8 <vTaskStartScheduler+0xcc>)
 800fb3e:	f7ff fde7 	bl	800f710 <xTaskCreateStatic>
 800fb42:	4603      	mov	r3, r0
 800fb44:	4a25      	ldr	r2, [pc, #148]	@ (800fbdc <vTaskStartScheduler+0xd0>)
 800fb46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fb48:	4b24      	ldr	r3, [pc, #144]	@ (800fbdc <vTaskStartScheduler+0xd0>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d002      	beq.n	800fb56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fb50:	2301      	movs	r3, #1
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	e001      	b.n	800fb5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d102      	bne.n	800fb66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fb60:	f000 ff92 	bl	8010a88 <xTimerCreateTimerTask>
 800fb64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d11d      	bne.n	800fba8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb70:	b672      	cpsid	i
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	b662      	cpsie	i
 800fb80:	613b      	str	r3, [r7, #16]
}
 800fb82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb84:	4b16      	ldr	r3, [pc, #88]	@ (800fbe0 <vTaskStartScheduler+0xd4>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3354      	adds	r3, #84	@ 0x54
 800fb8a:	4a16      	ldr	r2, [pc, #88]	@ (800fbe4 <vTaskStartScheduler+0xd8>)
 800fb8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb8e:	4b16      	ldr	r3, [pc, #88]	@ (800fbe8 <vTaskStartScheduler+0xdc>)
 800fb90:	f04f 32ff 	mov.w	r2, #4294967295
 800fb94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb96:	4b15      	ldr	r3, [pc, #84]	@ (800fbec <vTaskStartScheduler+0xe0>)
 800fb98:	2201      	movs	r2, #1
 800fb9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb9c:	4b14      	ldr	r3, [pc, #80]	@ (800fbf0 <vTaskStartScheduler+0xe4>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fba2:	f001 fb6d 	bl	8011280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fba6:	e011      	b.n	800fbcc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbae:	d10d      	bne.n	800fbcc <vTaskStartScheduler+0xc0>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb4:	b672      	cpsid	i
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	b662      	cpsie	i
 800fbc4:	60fb      	str	r3, [r7, #12]
}
 800fbc6:	bf00      	nop
 800fbc8:	bf00      	nop
 800fbca:	e7fd      	b.n	800fbc8 <vTaskStartScheduler+0xbc>
}
 800fbcc:	bf00      	nop
 800fbce:	3718      	adds	r7, #24
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	0801e688 	.word	0x0801e688
 800fbd8:	080102b1 	.word	0x080102b1
 800fbdc:	2000b2b8 	.word	0x2000b2b8
 800fbe0:	2000adc0 	.word	0x2000adc0
 800fbe4:	2000003c 	.word	0x2000003c
 800fbe8:	2000b2b4 	.word	0x2000b2b4
 800fbec:	2000b2a0 	.word	0x2000b2a0
 800fbf0:	2000b298 	.word	0x2000b298

0800fbf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fbf8:	4b04      	ldr	r3, [pc, #16]	@ (800fc0c <vTaskSuspendAll+0x18>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	4a03      	ldr	r2, [pc, #12]	@ (800fc0c <vTaskSuspendAll+0x18>)
 800fc00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fc02:	bf00      	nop
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	2000b2bc 	.word	0x2000b2bc

0800fc10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fc1e:	4b43      	ldr	r3, [pc, #268]	@ (800fd2c <xTaskResumeAll+0x11c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10d      	bne.n	800fc42 <xTaskResumeAll+0x32>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc2a:	b672      	cpsid	i
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	b662      	cpsie	i
 800fc3a:	603b      	str	r3, [r7, #0]
}
 800fc3c:	bf00      	nop
 800fc3e:	bf00      	nop
 800fc40:	e7fd      	b.n	800fc3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc42:	f001 fb9b 	bl	801137c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc46:	4b39      	ldr	r3, [pc, #228]	@ (800fd2c <xTaskResumeAll+0x11c>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	4a37      	ldr	r2, [pc, #220]	@ (800fd2c <xTaskResumeAll+0x11c>)
 800fc4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc50:	4b36      	ldr	r3, [pc, #216]	@ (800fd2c <xTaskResumeAll+0x11c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d162      	bne.n	800fd1e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc58:	4b35      	ldr	r3, [pc, #212]	@ (800fd30 <xTaskResumeAll+0x120>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d05e      	beq.n	800fd1e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc60:	e02f      	b.n	800fcc2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc62:	4b34      	ldr	r3, [pc, #208]	@ (800fd34 <xTaskResumeAll+0x124>)
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3318      	adds	r3, #24
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fbf4 	bl	800e45c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fe fbef 	bl	800e45c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc82:	4b2d      	ldr	r3, [pc, #180]	@ (800fd38 <xTaskResumeAll+0x128>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d903      	bls.n	800fc92 <xTaskResumeAll+0x82>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc8e:	4a2a      	ldr	r2, [pc, #168]	@ (800fd38 <xTaskResumeAll+0x128>)
 800fc90:	6013      	str	r3, [r2, #0]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc96:	4613      	mov	r3, r2
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	4413      	add	r3, r2
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4a27      	ldr	r2, [pc, #156]	@ (800fd3c <xTaskResumeAll+0x12c>)
 800fca0:	441a      	add	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3304      	adds	r3, #4
 800fca6:	4619      	mov	r1, r3
 800fca8:	4610      	mov	r0, r2
 800fcaa:	f7fe fb7a 	bl	800e3a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcb2:	4b23      	ldr	r3, [pc, #140]	@ (800fd40 <xTaskResumeAll+0x130>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d302      	bcc.n	800fcc2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800fcbc:	4b21      	ldr	r3, [pc, #132]	@ (800fd44 <xTaskResumeAll+0x134>)
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fcc2:	4b1c      	ldr	r3, [pc, #112]	@ (800fd34 <xTaskResumeAll+0x124>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1cb      	bne.n	800fc62 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d001      	beq.n	800fcd4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fcd0:	f000 fbac 	bl	801042c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fcd4:	4b1c      	ldr	r3, [pc, #112]	@ (800fd48 <xTaskResumeAll+0x138>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d010      	beq.n	800fd02 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fce0:	f000 f858 	bl	800fd94 <xTaskIncrementTick>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d002      	beq.n	800fcf0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800fcea:	4b16      	ldr	r3, [pc, #88]	@ (800fd44 <xTaskResumeAll+0x134>)
 800fcec:	2201      	movs	r2, #1
 800fcee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1f1      	bne.n	800fce0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800fcfc:	4b12      	ldr	r3, [pc, #72]	@ (800fd48 <xTaskResumeAll+0x138>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fd02:	4b10      	ldr	r3, [pc, #64]	@ (800fd44 <xTaskResumeAll+0x134>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d009      	beq.n	800fd1e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fd0e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd4c <xTaskResumeAll+0x13c>)
 800fd10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd1e:	f001 fb63 	bl	80113e8 <vPortExitCritical>

	return xAlreadyYielded;
 800fd22:	68bb      	ldr	r3, [r7, #8]
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	2000b2bc 	.word	0x2000b2bc
 800fd30:	2000b294 	.word	0x2000b294
 800fd34:	2000b254 	.word	0x2000b254
 800fd38:	2000b29c 	.word	0x2000b29c
 800fd3c:	2000adc4 	.word	0x2000adc4
 800fd40:	2000adc0 	.word	0x2000adc0
 800fd44:	2000b2a8 	.word	0x2000b2a8
 800fd48:	2000b2a4 	.word	0x2000b2a4
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd56:	4b05      	ldr	r3, [pc, #20]	@ (800fd6c <xTaskGetTickCount+0x1c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd5c:	687b      	ldr	r3, [r7, #4]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	370c      	adds	r7, #12
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	2000b298 	.word	0x2000b298

0800fd70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd76:	f001 fbe9 	bl	801154c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fd7e:	4b04      	ldr	r3, [pc, #16]	@ (800fd90 <xTaskGetTickCountFromISR+0x20>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd84:	683b      	ldr	r3, [r7, #0]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	2000b298 	.word	0x2000b298

0800fd94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd9e:	4b50      	ldr	r3, [pc, #320]	@ (800fee0 <xTaskIncrementTick+0x14c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f040 808c 	bne.w	800fec0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fda8:	4b4e      	ldr	r3, [pc, #312]	@ (800fee4 <xTaskIncrementTick+0x150>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	3301      	adds	r3, #1
 800fdae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fdb0:	4a4c      	ldr	r2, [pc, #304]	@ (800fee4 <xTaskIncrementTick+0x150>)
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d123      	bne.n	800fe04 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800fdbc:	4b4a      	ldr	r3, [pc, #296]	@ (800fee8 <xTaskIncrementTick+0x154>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00d      	beq.n	800fde2 <xTaskIncrementTick+0x4e>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdca:	b672      	cpsid	i
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	b662      	cpsie	i
 800fdda:	603b      	str	r3, [r7, #0]
}
 800fddc:	bf00      	nop
 800fdde:	bf00      	nop
 800fde0:	e7fd      	b.n	800fdde <xTaskIncrementTick+0x4a>
 800fde2:	4b41      	ldr	r3, [pc, #260]	@ (800fee8 <xTaskIncrementTick+0x154>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	60fb      	str	r3, [r7, #12]
 800fde8:	4b40      	ldr	r3, [pc, #256]	@ (800feec <xTaskIncrementTick+0x158>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a3e      	ldr	r2, [pc, #248]	@ (800fee8 <xTaskIncrementTick+0x154>)
 800fdee:	6013      	str	r3, [r2, #0]
 800fdf0:	4a3e      	ldr	r2, [pc, #248]	@ (800feec <xTaskIncrementTick+0x158>)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	4b3e      	ldr	r3, [pc, #248]	@ (800fef0 <xTaskIncrementTick+0x15c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	4a3c      	ldr	r2, [pc, #240]	@ (800fef0 <xTaskIncrementTick+0x15c>)
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	f000 fb14 	bl	801042c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe04:	4b3b      	ldr	r3, [pc, #236]	@ (800fef4 <xTaskIncrementTick+0x160>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d349      	bcc.n	800fea2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe0e:	4b36      	ldr	r3, [pc, #216]	@ (800fee8 <xTaskIncrementTick+0x154>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d104      	bne.n	800fe22 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe18:	4b36      	ldr	r3, [pc, #216]	@ (800fef4 <xTaskIncrementTick+0x160>)
 800fe1a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe1e:	601a      	str	r2, [r3, #0]
					break;
 800fe20:	e03f      	b.n	800fea2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe22:	4b31      	ldr	r3, [pc, #196]	@ (800fee8 <xTaskIncrementTick+0x154>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe32:	693a      	ldr	r2, [r7, #16]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d203      	bcs.n	800fe42 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fe3a:	4a2e      	ldr	r2, [pc, #184]	@ (800fef4 <xTaskIncrementTick+0x160>)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe40:	e02f      	b.n	800fea2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	3304      	adds	r3, #4
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fe fb08 	bl	800e45c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d004      	beq.n	800fe5e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	3318      	adds	r3, #24
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fe faff 	bl	800e45c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe62:	4b25      	ldr	r3, [pc, #148]	@ (800fef8 <xTaskIncrementTick+0x164>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d903      	bls.n	800fe72 <xTaskIncrementTick+0xde>
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe6e:	4a22      	ldr	r2, [pc, #136]	@ (800fef8 <xTaskIncrementTick+0x164>)
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe76:	4613      	mov	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4a1f      	ldr	r2, [pc, #124]	@ (800fefc <xTaskIncrementTick+0x168>)
 800fe80:	441a      	add	r2, r3
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	3304      	adds	r3, #4
 800fe86:	4619      	mov	r1, r3
 800fe88:	4610      	mov	r0, r2
 800fe8a:	f7fe fa8a 	bl	800e3a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe92:	4b1b      	ldr	r3, [pc, #108]	@ (800ff00 <xTaskIncrementTick+0x16c>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d3b8      	bcc.n	800fe0e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fea0:	e7b5      	b.n	800fe0e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fea2:	4b17      	ldr	r3, [pc, #92]	@ (800ff00 <xTaskIncrementTick+0x16c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fea8:	4914      	ldr	r1, [pc, #80]	@ (800fefc <xTaskIncrementTick+0x168>)
 800feaa:	4613      	mov	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4413      	add	r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	440b      	add	r3, r1
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d907      	bls.n	800feca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800feba:	2301      	movs	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
 800febe:	e004      	b.n	800feca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fec0:	4b10      	ldr	r3, [pc, #64]	@ (800ff04 <xTaskIncrementTick+0x170>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3301      	adds	r3, #1
 800fec6:	4a0f      	ldr	r2, [pc, #60]	@ (800ff04 <xTaskIncrementTick+0x170>)
 800fec8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800feca:	4b0f      	ldr	r3, [pc, #60]	@ (800ff08 <xTaskIncrementTick+0x174>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800fed2:	2301      	movs	r3, #1
 800fed4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fed6:	697b      	ldr	r3, [r7, #20]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	2000b2bc 	.word	0x2000b2bc
 800fee4:	2000b298 	.word	0x2000b298
 800fee8:	2000b24c 	.word	0x2000b24c
 800feec:	2000b250 	.word	0x2000b250
 800fef0:	2000b2ac 	.word	0x2000b2ac
 800fef4:	2000b2b4 	.word	0x2000b2b4
 800fef8:	2000b29c 	.word	0x2000b29c
 800fefc:	2000adc4 	.word	0x2000adc4
 800ff00:	2000adc0 	.word	0x2000adc0
 800ff04:	2000b2a4 	.word	0x2000b2a4
 800ff08:	2000b2a8 	.word	0x2000b2a8

0800ff0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff12:	4b3e      	ldr	r3, [pc, #248]	@ (801000c <vTaskSwitchContext+0x100>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d003      	beq.n	800ff22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff1a:	4b3d      	ldr	r3, [pc, #244]	@ (8010010 <vTaskSwitchContext+0x104>)
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff20:	e070      	b.n	8010004 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800ff22:	4b3b      	ldr	r3, [pc, #236]	@ (8010010 <vTaskSwitchContext+0x104>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ff28:	4b3a      	ldr	r3, [pc, #232]	@ (8010014 <vTaskSwitchContext+0x108>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2e:	613b      	str	r3, [r7, #16]
 800ff30:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d111      	bne.n	800ff64 <vTaskSwitchContext+0x58>
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	3304      	adds	r3, #4
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d10b      	bne.n	800ff64 <vTaskSwitchContext+0x58>
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	3308      	adds	r3, #8
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d105      	bne.n	800ff64 <vTaskSwitchContext+0x58>
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	330c      	adds	r3, #12
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d008      	beq.n	800ff76 <vTaskSwitchContext+0x6a>
 800ff64:	4b2b      	ldr	r3, [pc, #172]	@ (8010014 <vTaskSwitchContext+0x108>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	4b2a      	ldr	r3, [pc, #168]	@ (8010014 <vTaskSwitchContext+0x108>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3334      	adds	r3, #52	@ 0x34
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4610      	mov	r0, r2
 800ff72:	f7f0 ff81 	bl	8000e78 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff76:	4b28      	ldr	r3, [pc, #160]	@ (8010018 <vTaskSwitchContext+0x10c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	617b      	str	r3, [r7, #20]
 800ff7c:	e013      	b.n	800ffa6 <vTaskSwitchContext+0x9a>
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10d      	bne.n	800ffa0 <vTaskSwitchContext+0x94>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff88:	b672      	cpsid	i
 800ff8a:	f383 8811 	msr	BASEPRI, r3
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	b662      	cpsie	i
 800ff98:	607b      	str	r3, [r7, #4]
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	e7fd      	b.n	800ff9c <vTaskSwitchContext+0x90>
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	617b      	str	r3, [r7, #20]
 800ffa6:	491d      	ldr	r1, [pc, #116]	@ (801001c <vTaskSwitchContext+0x110>)
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	440b      	add	r3, r1
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d0e1      	beq.n	800ff7e <vTaskSwitchContext+0x72>
 800ffba:	697a      	ldr	r2, [r7, #20]
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	4a15      	ldr	r2, [pc, #84]	@ (801001c <vTaskSwitchContext+0x110>)
 800ffc6:	4413      	add	r3, r2
 800ffc8:	60bb      	str	r3, [r7, #8]
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	605a      	str	r2, [r3, #4]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	3308      	adds	r3, #8
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d104      	bne.n	800ffea <vTaskSwitchContext+0xde>
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	685a      	ldr	r2, [r3, #4]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	605a      	str	r2, [r3, #4]
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	4a08      	ldr	r2, [pc, #32]	@ (8010014 <vTaskSwitchContext+0x108>)
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	4a08      	ldr	r2, [pc, #32]	@ (8010018 <vTaskSwitchContext+0x10c>)
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fffa:	4b06      	ldr	r3, [pc, #24]	@ (8010014 <vTaskSwitchContext+0x108>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3354      	adds	r3, #84	@ 0x54
 8010000:	4a07      	ldr	r2, [pc, #28]	@ (8010020 <vTaskSwitchContext+0x114>)
 8010002:	6013      	str	r3, [r2, #0]
}
 8010004:	bf00      	nop
 8010006:	3718      	adds	r7, #24
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	2000b2bc 	.word	0x2000b2bc
 8010010:	2000b2a8 	.word	0x2000b2a8
 8010014:	2000adc0 	.word	0x2000adc0
 8010018:	2000b29c 	.word	0x2000b29c
 801001c:	2000adc4 	.word	0x2000adc4
 8010020:	2000003c 	.word	0x2000003c

08010024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10d      	bne.n	8010050 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010038:	b672      	cpsid	i
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	b662      	cpsie	i
 8010048:	60fb      	str	r3, [r7, #12]
}
 801004a:	bf00      	nop
 801004c:	bf00      	nop
 801004e:	e7fd      	b.n	801004c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010050:	4b07      	ldr	r3, [pc, #28]	@ (8010070 <vTaskPlaceOnEventList+0x4c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3318      	adds	r3, #24
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7fe f9c6 	bl	800e3ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801005e:	2101      	movs	r1, #1
 8010060:	6838      	ldr	r0, [r7, #0]
 8010062:	f000 fcbd 	bl	80109e0 <prvAddCurrentTaskToDelayedList>
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	2000adc0 	.word	0x2000adc0

08010074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010074:	b580      	push	{r7, lr}
 8010076:	b086      	sub	sp, #24
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10d      	bne.n	80100a2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801008a:	b672      	cpsid	i
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	b662      	cpsie	i
 801009a:	617b      	str	r3, [r7, #20]
}
 801009c:	bf00      	nop
 801009e:	bf00      	nop
 80100a0:	e7fd      	b.n	801009e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100a2:	4b0a      	ldr	r3, [pc, #40]	@ (80100cc <vTaskPlaceOnEventListRestricted+0x58>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3318      	adds	r3, #24
 80100a8:	4619      	mov	r1, r3
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7fe f979 	bl	800e3a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80100b6:	f04f 33ff 	mov.w	r3, #4294967295
 80100ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	68b8      	ldr	r0, [r7, #8]
 80100c0:	f000 fc8e 	bl	80109e0 <prvAddCurrentTaskToDelayedList>
	}
 80100c4:	bf00      	nop
 80100c6:	3718      	adds	r7, #24
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	2000adc0 	.word	0x2000adc0

080100d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10d      	bne.n	8010102 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80100e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ea:	b672      	cpsid	i
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	b662      	cpsie	i
 80100fa:	60fb      	str	r3, [r7, #12]
}
 80100fc:	bf00      	nop
 80100fe:	bf00      	nop
 8010100:	e7fd      	b.n	80100fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	3318      	adds	r3, #24
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe f9a8 	bl	800e45c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801010c:	4b1d      	ldr	r3, [pc, #116]	@ (8010184 <xTaskRemoveFromEventList+0xb4>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d11d      	bne.n	8010150 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	3304      	adds	r3, #4
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe f99f 	bl	800e45c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010122:	4b19      	ldr	r3, [pc, #100]	@ (8010188 <xTaskRemoveFromEventList+0xb8>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	429a      	cmp	r2, r3
 8010128:	d903      	bls.n	8010132 <xTaskRemoveFromEventList+0x62>
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801012e:	4a16      	ldr	r2, [pc, #88]	@ (8010188 <xTaskRemoveFromEventList+0xb8>)
 8010130:	6013      	str	r3, [r2, #0]
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010136:	4613      	mov	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	4413      	add	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4a13      	ldr	r2, [pc, #76]	@ (801018c <xTaskRemoveFromEventList+0xbc>)
 8010140:	441a      	add	r2, r3
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	3304      	adds	r3, #4
 8010146:	4619      	mov	r1, r3
 8010148:	4610      	mov	r0, r2
 801014a:	f7fe f92a 	bl	800e3a2 <vListInsertEnd>
 801014e:	e005      	b.n	801015c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	3318      	adds	r3, #24
 8010154:	4619      	mov	r1, r3
 8010156:	480e      	ldr	r0, [pc, #56]	@ (8010190 <xTaskRemoveFromEventList+0xc0>)
 8010158:	f7fe f923 	bl	800e3a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010160:	4b0c      	ldr	r3, [pc, #48]	@ (8010194 <xTaskRemoveFromEventList+0xc4>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010166:	429a      	cmp	r2, r3
 8010168:	d905      	bls.n	8010176 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801016a:	2301      	movs	r3, #1
 801016c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801016e:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <xTaskRemoveFromEventList+0xc8>)
 8010170:	2201      	movs	r2, #1
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	e001      	b.n	801017a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8010176:	2300      	movs	r3, #0
 8010178:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801017a:	697b      	ldr	r3, [r7, #20]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2000b2bc 	.word	0x2000b2bc
 8010188:	2000b29c 	.word	0x2000b29c
 801018c:	2000adc4 	.word	0x2000adc4
 8010190:	2000b254 	.word	0x2000b254
 8010194:	2000adc0 	.word	0x2000adc0
 8010198:	2000b2a8 	.word	0x2000b2a8

0801019c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80101a4:	4b06      	ldr	r3, [pc, #24]	@ (80101c0 <vTaskInternalSetTimeOutState+0x24>)
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80101ac:	4b05      	ldr	r3, [pc, #20]	@ (80101c4 <vTaskInternalSetTimeOutState+0x28>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	605a      	str	r2, [r3, #4]
}
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	2000b2ac 	.word	0x2000b2ac
 80101c4:	2000b298 	.word	0x2000b298

080101c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d10d      	bne.n	80101f4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80101d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101dc:	b672      	cpsid	i
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	b662      	cpsie	i
 80101ec:	613b      	str	r3, [r7, #16]
}
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	e7fd      	b.n	80101f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d10d      	bne.n	8010216 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80101fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fe:	b672      	cpsid	i
 8010200:	f383 8811 	msr	BASEPRI, r3
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	b662      	cpsie	i
 801020e:	60fb      	str	r3, [r7, #12]
}
 8010210:	bf00      	nop
 8010212:	bf00      	nop
 8010214:	e7fd      	b.n	8010212 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8010216:	f001 f8b1 	bl	801137c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801021a:	4b1d      	ldr	r3, [pc, #116]	@ (8010290 <xTaskCheckForTimeOut+0xc8>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	69ba      	ldr	r2, [r7, #24]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010232:	d102      	bne.n	801023a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010234:	2300      	movs	r3, #0
 8010236:	61fb      	str	r3, [r7, #28]
 8010238:	e023      	b.n	8010282 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	4b15      	ldr	r3, [pc, #84]	@ (8010294 <xTaskCheckForTimeOut+0xcc>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	d007      	beq.n	8010256 <xTaskCheckForTimeOut+0x8e>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	429a      	cmp	r2, r3
 801024e:	d302      	bcc.n	8010256 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010250:	2301      	movs	r3, #1
 8010252:	61fb      	str	r3, [r7, #28]
 8010254:	e015      	b.n	8010282 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	697a      	ldr	r2, [r7, #20]
 801025c:	429a      	cmp	r2, r3
 801025e:	d20b      	bcs.n	8010278 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	1ad2      	subs	r2, r2, r3
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7ff ff95 	bl	801019c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010272:	2300      	movs	r3, #0
 8010274:	61fb      	str	r3, [r7, #28]
 8010276:	e004      	b.n	8010282 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2200      	movs	r2, #0
 801027c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801027e:	2301      	movs	r3, #1
 8010280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010282:	f001 f8b1 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 8010286:	69fb      	ldr	r3, [r7, #28]
}
 8010288:	4618      	mov	r0, r3
 801028a:	3720      	adds	r7, #32
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	2000b298 	.word	0x2000b298
 8010294:	2000b2ac 	.word	0x2000b2ac

08010298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801029c:	4b03      	ldr	r3, [pc, #12]	@ (80102ac <vTaskMissedYield+0x14>)
 801029e:	2201      	movs	r2, #1
 80102a0:	601a      	str	r2, [r3, #0]
}
 80102a2:	bf00      	nop
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	2000b2a8 	.word	0x2000b2a8

080102b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80102b8:	f000 f852 	bl	8010360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80102bc:	4b06      	ldr	r3, [pc, #24]	@ (80102d8 <prvIdleTask+0x28>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d9f9      	bls.n	80102b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80102c4:	4b05      	ldr	r3, [pc, #20]	@ (80102dc <prvIdleTask+0x2c>)
 80102c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	f3bf 8f4f 	dsb	sy
 80102d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80102d4:	e7f0      	b.n	80102b8 <prvIdleTask+0x8>
 80102d6:	bf00      	nop
 80102d8:	2000adc4 	.word	0x2000adc4
 80102dc:	e000ed04 	.word	0xe000ed04

080102e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102e6:	2300      	movs	r3, #0
 80102e8:	607b      	str	r3, [r7, #4]
 80102ea:	e00c      	b.n	8010306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	4613      	mov	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	4a12      	ldr	r2, [pc, #72]	@ (8010340 <prvInitialiseTaskLists+0x60>)
 80102f8:	4413      	add	r3, r2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fe f824 	bl	800e348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	3301      	adds	r3, #1
 8010304:	607b      	str	r3, [r7, #4]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b37      	cmp	r3, #55	@ 0x37
 801030a:	d9ef      	bls.n	80102ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801030c:	480d      	ldr	r0, [pc, #52]	@ (8010344 <prvInitialiseTaskLists+0x64>)
 801030e:	f7fe f81b 	bl	800e348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010312:	480d      	ldr	r0, [pc, #52]	@ (8010348 <prvInitialiseTaskLists+0x68>)
 8010314:	f7fe f818 	bl	800e348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010318:	480c      	ldr	r0, [pc, #48]	@ (801034c <prvInitialiseTaskLists+0x6c>)
 801031a:	f7fe f815 	bl	800e348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801031e:	480c      	ldr	r0, [pc, #48]	@ (8010350 <prvInitialiseTaskLists+0x70>)
 8010320:	f7fe f812 	bl	800e348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010324:	480b      	ldr	r0, [pc, #44]	@ (8010354 <prvInitialiseTaskLists+0x74>)
 8010326:	f7fe f80f 	bl	800e348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801032a:	4b0b      	ldr	r3, [pc, #44]	@ (8010358 <prvInitialiseTaskLists+0x78>)
 801032c:	4a05      	ldr	r2, [pc, #20]	@ (8010344 <prvInitialiseTaskLists+0x64>)
 801032e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010330:	4b0a      	ldr	r3, [pc, #40]	@ (801035c <prvInitialiseTaskLists+0x7c>)
 8010332:	4a05      	ldr	r2, [pc, #20]	@ (8010348 <prvInitialiseTaskLists+0x68>)
 8010334:	601a      	str	r2, [r3, #0]
}
 8010336:	bf00      	nop
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	2000adc4 	.word	0x2000adc4
 8010344:	2000b224 	.word	0x2000b224
 8010348:	2000b238 	.word	0x2000b238
 801034c:	2000b254 	.word	0x2000b254
 8010350:	2000b268 	.word	0x2000b268
 8010354:	2000b280 	.word	0x2000b280
 8010358:	2000b24c 	.word	0x2000b24c
 801035c:	2000b250 	.word	0x2000b250

08010360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010366:	e019      	b.n	801039c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010368:	f001 f808 	bl	801137c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801036c:	4b10      	ldr	r3, [pc, #64]	@ (80103b0 <prvCheckTasksWaitingTermination+0x50>)
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	3304      	adds	r3, #4
 8010378:	4618      	mov	r0, r3
 801037a:	f7fe f86f 	bl	800e45c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801037e:	4b0d      	ldr	r3, [pc, #52]	@ (80103b4 <prvCheckTasksWaitingTermination+0x54>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	3b01      	subs	r3, #1
 8010384:	4a0b      	ldr	r2, [pc, #44]	@ (80103b4 <prvCheckTasksWaitingTermination+0x54>)
 8010386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010388:	4b0b      	ldr	r3, [pc, #44]	@ (80103b8 <prvCheckTasksWaitingTermination+0x58>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3b01      	subs	r3, #1
 801038e:	4a0a      	ldr	r2, [pc, #40]	@ (80103b8 <prvCheckTasksWaitingTermination+0x58>)
 8010390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010392:	f001 f829 	bl	80113e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f810 	bl	80103bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801039c:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <prvCheckTasksWaitingTermination+0x58>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1e1      	bne.n	8010368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80103a4:	bf00      	nop
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	2000b268 	.word	0x2000b268
 80103b4:	2000b294 	.word	0x2000b294
 80103b8:	2000b27c 	.word	0x2000b27c

080103bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	3354      	adds	r3, #84	@ 0x54
 80103c8:	4618      	mov	r0, r3
 80103ca:	f00d f8e7 	bl	801d59c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d108      	bne.n	80103ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103dc:	4618      	mov	r0, r3
 80103de:	f001 f9c9 	bl	8011774 <vPortFree>
				vPortFree( pxTCB );
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f001 f9c6 	bl	8011774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80103e8:	e01b      	b.n	8010422 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d103      	bne.n	80103fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f001 f9bd 	bl	8011774 <vPortFree>
	}
 80103fa:	e012      	b.n	8010422 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010402:	2b02      	cmp	r3, #2
 8010404:	d00d      	beq.n	8010422 <prvDeleteTCB+0x66>
	__asm volatile
 8010406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801040a:	b672      	cpsid	i
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	b662      	cpsie	i
 801041a:	60fb      	str	r3, [r7, #12]
}
 801041c:	bf00      	nop
 801041e:	bf00      	nop
 8010420:	e7fd      	b.n	801041e <prvDeleteTCB+0x62>
	}
 8010422:	bf00      	nop
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
	...

0801042c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010432:	4b0c      	ldr	r3, [pc, #48]	@ (8010464 <prvResetNextTaskUnblockTime+0x38>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d104      	bne.n	8010446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801043c:	4b0a      	ldr	r3, [pc, #40]	@ (8010468 <prvResetNextTaskUnblockTime+0x3c>)
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010444:	e008      	b.n	8010458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010446:	4b07      	ldr	r3, [pc, #28]	@ (8010464 <prvResetNextTaskUnblockTime+0x38>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4a04      	ldr	r2, [pc, #16]	@ (8010468 <prvResetNextTaskUnblockTime+0x3c>)
 8010456:	6013      	str	r3, [r2, #0]
}
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	2000b24c 	.word	0x2000b24c
 8010468:	2000b2b4 	.word	0x2000b2b4

0801046c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010472:	4b05      	ldr	r3, [pc, #20]	@ (8010488 <xTaskGetCurrentTaskHandle+0x1c>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010478:	687b      	ldr	r3, [r7, #4]
	}
 801047a:	4618      	mov	r0, r3
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	2000adc0 	.word	0x2000adc0

0801048c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010492:	4b0b      	ldr	r3, [pc, #44]	@ (80104c0 <xTaskGetSchedulerState+0x34>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d102      	bne.n	80104a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801049a:	2301      	movs	r3, #1
 801049c:	607b      	str	r3, [r7, #4]
 801049e:	e008      	b.n	80104b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104a0:	4b08      	ldr	r3, [pc, #32]	@ (80104c4 <xTaskGetSchedulerState+0x38>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d102      	bne.n	80104ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80104a8:	2302      	movs	r3, #2
 80104aa:	607b      	str	r3, [r7, #4]
 80104ac:	e001      	b.n	80104b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80104ae:	2300      	movs	r3, #0
 80104b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80104b2:	687b      	ldr	r3, [r7, #4]
	}
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	2000b2a0 	.word	0x2000b2a0
 80104c4:	2000b2bc 	.word	0x2000b2bc

080104c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80104d4:	2300      	movs	r3, #0
 80104d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d051      	beq.n	8010582 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104e2:	4b2a      	ldr	r3, [pc, #168]	@ (801058c <xTaskPriorityInherit+0xc4>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d241      	bcs.n	8010570 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	699b      	ldr	r3, [r3, #24]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	db06      	blt.n	8010502 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104f4:	4b25      	ldr	r3, [pc, #148]	@ (801058c <xTaskPriorityInherit+0xc4>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	6959      	ldr	r1, [r3, #20]
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801050a:	4613      	mov	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	4a1f      	ldr	r2, [pc, #124]	@ (8010590 <xTaskPriorityInherit+0xc8>)
 8010514:	4413      	add	r3, r2
 8010516:	4299      	cmp	r1, r3
 8010518:	d122      	bne.n	8010560 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	3304      	adds	r3, #4
 801051e:	4618      	mov	r0, r3
 8010520:	f7fd ff9c 	bl	800e45c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010524:	4b19      	ldr	r3, [pc, #100]	@ (801058c <xTaskPriorityInherit+0xc4>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010532:	4b18      	ldr	r3, [pc, #96]	@ (8010594 <xTaskPriorityInherit+0xcc>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	429a      	cmp	r2, r3
 8010538:	d903      	bls.n	8010542 <xTaskPriorityInherit+0x7a>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053e:	4a15      	ldr	r2, [pc, #84]	@ (8010594 <xTaskPriorityInherit+0xcc>)
 8010540:	6013      	str	r3, [r2, #0]
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010546:	4613      	mov	r3, r2
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	4413      	add	r3, r2
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	4a10      	ldr	r2, [pc, #64]	@ (8010590 <xTaskPriorityInherit+0xc8>)
 8010550:	441a      	add	r2, r3
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	3304      	adds	r3, #4
 8010556:	4619      	mov	r1, r3
 8010558:	4610      	mov	r0, r2
 801055a:	f7fd ff22 	bl	800e3a2 <vListInsertEnd>
 801055e:	e004      	b.n	801056a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010560:	4b0a      	ldr	r3, [pc, #40]	@ (801058c <xTaskPriorityInherit+0xc4>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801056a:	2301      	movs	r3, #1
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	e008      	b.n	8010582 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010574:	4b05      	ldr	r3, [pc, #20]	@ (801058c <xTaskPriorityInherit+0xc4>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057a:	429a      	cmp	r2, r3
 801057c:	d201      	bcs.n	8010582 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801057e:	2301      	movs	r3, #1
 8010580:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010582:	68fb      	ldr	r3, [r7, #12]
	}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	2000adc0 	.word	0x2000adc0
 8010590:	2000adc4 	.word	0x2000adc4
 8010594:	2000b29c 	.word	0x2000b29c

08010598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d05c      	beq.n	8010668 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80105ae:	4b31      	ldr	r3, [pc, #196]	@ (8010674 <xTaskPriorityDisinherit+0xdc>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d00d      	beq.n	80105d4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80105b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105bc:	b672      	cpsid	i
 80105be:	f383 8811 	msr	BASEPRI, r3
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	f3bf 8f4f 	dsb	sy
 80105ca:	b662      	cpsie	i
 80105cc:	60fb      	str	r3, [r7, #12]
}
 80105ce:	bf00      	nop
 80105d0:	bf00      	nop
 80105d2:	e7fd      	b.n	80105d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d10d      	bne.n	80105f8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80105dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e0:	b672      	cpsid	i
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	b662      	cpsie	i
 80105f0:	60bb      	str	r3, [r7, #8]
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	e7fd      	b.n	80105f4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105fc:	1e5a      	subs	r2, r3, #1
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801060a:	429a      	cmp	r2, r3
 801060c:	d02c      	beq.n	8010668 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010612:	2b00      	cmp	r3, #0
 8010614:	d128      	bne.n	8010668 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	3304      	adds	r3, #4
 801061a:	4618      	mov	r0, r3
 801061c:	f7fd ff1e 	bl	800e45c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801062c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010638:	4b0f      	ldr	r3, [pc, #60]	@ (8010678 <xTaskPriorityDisinherit+0xe0>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	429a      	cmp	r2, r3
 801063e:	d903      	bls.n	8010648 <xTaskPriorityDisinherit+0xb0>
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010644:	4a0c      	ldr	r2, [pc, #48]	@ (8010678 <xTaskPriorityDisinherit+0xe0>)
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801064c:	4613      	mov	r3, r2
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	4413      	add	r3, r2
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	4a09      	ldr	r2, [pc, #36]	@ (801067c <xTaskPriorityDisinherit+0xe4>)
 8010656:	441a      	add	r2, r3
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	3304      	adds	r3, #4
 801065c:	4619      	mov	r1, r3
 801065e:	4610      	mov	r0, r2
 8010660:	f7fd fe9f 	bl	800e3a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010664:	2301      	movs	r3, #1
 8010666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010668:	697b      	ldr	r3, [r7, #20]
	}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	2000adc0 	.word	0x2000adc0
 8010678:	2000b29c 	.word	0x2000b29c
 801067c:	2000adc4 	.word	0x2000adc4

08010680 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010680:	b580      	push	{r7, lr}
 8010682:	b088      	sub	sp, #32
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801068e:	2301      	movs	r3, #1
 8010690:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d070      	beq.n	801077a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10d      	bne.n	80106bc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80106a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a4:	b672      	cpsid	i
 80106a6:	f383 8811 	msr	BASEPRI, r3
 80106aa:	f3bf 8f6f 	isb	sy
 80106ae:	f3bf 8f4f 	dsb	sy
 80106b2:	b662      	cpsie	i
 80106b4:	60fb      	str	r3, [r7, #12]
}
 80106b6:	bf00      	nop
 80106b8:	bf00      	nop
 80106ba:	e7fd      	b.n	80106b8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d902      	bls.n	80106cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	61fb      	str	r3, [r7, #28]
 80106ca:	e002      	b.n	80106d2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d6:	69fa      	ldr	r2, [r7, #28]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d04e      	beq.n	801077a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106e0:	697a      	ldr	r2, [r7, #20]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d149      	bne.n	801077a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80106e6:	4b27      	ldr	r3, [pc, #156]	@ (8010784 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	69ba      	ldr	r2, [r7, #24]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d10d      	bne.n	801070c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f4:	b672      	cpsid	i
 80106f6:	f383 8811 	msr	BASEPRI, r3
 80106fa:	f3bf 8f6f 	isb	sy
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	b662      	cpsie	i
 8010704:	60bb      	str	r3, [r7, #8]
}
 8010706:	bf00      	nop
 8010708:	bf00      	nop
 801070a:	e7fd      	b.n	8010708 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010710:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	69fa      	ldr	r2, [r7, #28]
 8010716:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	699b      	ldr	r3, [r3, #24]
 801071c:	2b00      	cmp	r3, #0
 801071e:	db04      	blt.n	801072a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	6959      	ldr	r1, [r3, #20]
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	4613      	mov	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	4413      	add	r3, r2
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	4a13      	ldr	r2, [pc, #76]	@ (8010788 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801073a:	4413      	add	r3, r2
 801073c:	4299      	cmp	r1, r3
 801073e:	d11c      	bne.n	801077a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	3304      	adds	r3, #4
 8010744:	4618      	mov	r0, r3
 8010746:	f7fd fe89 	bl	800e45c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801074e:	4b0f      	ldr	r3, [pc, #60]	@ (801078c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	429a      	cmp	r2, r3
 8010754:	d903      	bls.n	801075e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075a:	4a0c      	ldr	r2, [pc, #48]	@ (801078c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010762:	4613      	mov	r3, r2
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4a07      	ldr	r2, [pc, #28]	@ (8010788 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801076c:	441a      	add	r2, r3
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	3304      	adds	r3, #4
 8010772:	4619      	mov	r1, r3
 8010774:	4610      	mov	r0, r2
 8010776:	f7fd fe14 	bl	800e3a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801077a:	bf00      	nop
 801077c:	3720      	adds	r7, #32
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	2000adc0 	.word	0x2000adc0
 8010788:	2000adc4 	.word	0x2000adc4
 801078c:	2000b29c 	.word	0x2000b29c

08010790 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010790:	b480      	push	{r7}
 8010792:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010794:	4b07      	ldr	r3, [pc, #28]	@ (80107b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801079c:	4b05      	ldr	r3, [pc, #20]	@ (80107b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80107a2:	3201      	adds	r2, #1
 80107a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80107a6:	4b03      	ldr	r3, [pc, #12]	@ (80107b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80107a8:	681b      	ldr	r3, [r3, #0]
	}
 80107aa:	4618      	mov	r0, r3
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	2000adc0 	.word	0x2000adc0

080107b8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80107c2:	f000 fddb 	bl	801137c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80107c6:	4b20      	ldr	r3, [pc, #128]	@ (8010848 <ulTaskNotifyTake+0x90>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d113      	bne.n	80107fa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80107d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010848 <ulTaskNotifyTake+0x90>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2201      	movs	r2, #1
 80107d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00b      	beq.n	80107fa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80107e2:	2101      	movs	r1, #1
 80107e4:	6838      	ldr	r0, [r7, #0]
 80107e6:	f000 f8fb 	bl	80109e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80107ea:	4b18      	ldr	r3, [pc, #96]	@ (801084c <ulTaskNotifyTake+0x94>)
 80107ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107f0:	601a      	str	r2, [r3, #0]
 80107f2:	f3bf 8f4f 	dsb	sy
 80107f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80107fa:	f000 fdf5 	bl	80113e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80107fe:	f000 fdbd 	bl	801137c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010802:	4b11      	ldr	r3, [pc, #68]	@ (8010848 <ulTaskNotifyTake+0x90>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801080a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00e      	beq.n	8010830 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d005      	beq.n	8010824 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010818:	4b0b      	ldr	r3, [pc, #44]	@ (8010848 <ulTaskNotifyTake+0x90>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2200      	movs	r2, #0
 801081e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8010822:	e005      	b.n	8010830 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010824:	4b08      	ldr	r3, [pc, #32]	@ (8010848 <ulTaskNotifyTake+0x90>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	3a01      	subs	r2, #1
 801082c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010830:	4b05      	ldr	r3, [pc, #20]	@ (8010848 <ulTaskNotifyTake+0x90>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2200      	movs	r2, #0
 8010836:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801083a:	f000 fdd5 	bl	80113e8 <vPortExitCritical>

		return ulReturn;
 801083e:	68fb      	ldr	r3, [r7, #12]
	}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	2000adc0 	.word	0x2000adc0
 801084c:	e000ed04 	.word	0xe000ed04

08010850 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08a      	sub	sp, #40	@ 0x28
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	603b      	str	r3, [r7, #0]
 801085c:	4613      	mov	r3, r2
 801085e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010860:	2301      	movs	r3, #1
 8010862:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10d      	bne.n	8010886 <xTaskGenericNotify+0x36>
	__asm volatile
 801086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086e:	b672      	cpsid	i
 8010870:	f383 8811 	msr	BASEPRI, r3
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	b662      	cpsie	i
 801087e:	61bb      	str	r3, [r7, #24]
}
 8010880:	bf00      	nop
 8010882:	bf00      	nop
 8010884:	e7fd      	b.n	8010882 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801088a:	f000 fd77 	bl	801137c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d004      	beq.n	801089e <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010894:	6a3b      	ldr	r3, [r7, #32]
 8010896:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80108a4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80108a6:	6a3b      	ldr	r3, [r7, #32]
 80108a8:	2202      	movs	r2, #2
 80108aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	2b04      	cmp	r3, #4
 80108b2:	d82e      	bhi.n	8010912 <xTaskGenericNotify+0xc2>
 80108b4:	a201      	add	r2, pc, #4	@ (adr r2, 80108bc <xTaskGenericNotify+0x6c>)
 80108b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ba:	bf00      	nop
 80108bc:	0801093b 	.word	0x0801093b
 80108c0:	080108d1 	.word	0x080108d1
 80108c4:	080108e3 	.word	0x080108e3
 80108c8:	080108f3 	.word	0x080108f3
 80108cc:	080108fd 	.word	0x080108fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80108d0:	6a3b      	ldr	r3, [r7, #32]
 80108d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	431a      	orrs	r2, r3
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108e0:	e02e      	b.n	8010940 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80108e2:	6a3b      	ldr	r3, [r7, #32]
 80108e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108f0:	e026      	b.n	8010940 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80108fa:	e021      	b.n	8010940 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80108fc:	7ffb      	ldrb	r3, [r7, #31]
 80108fe:	2b02      	cmp	r3, #2
 8010900:	d004      	beq.n	801090c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010902:	6a3b      	ldr	r3, [r7, #32]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801090a:	e019      	b.n	8010940 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 801090c:	2300      	movs	r3, #0
 801090e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010910:	e016      	b.n	8010940 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801091c:	d00f      	beq.n	801093e <xTaskGenericNotify+0xee>
	__asm volatile
 801091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010922:	b672      	cpsid	i
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	b662      	cpsie	i
 8010932:	617b      	str	r3, [r7, #20]
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop
 8010938:	e7fd      	b.n	8010936 <xTaskGenericNotify+0xe6>
					break;
 801093a:	bf00      	nop
 801093c:	e000      	b.n	8010940 <xTaskGenericNotify+0xf0>

					break;
 801093e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010940:	7ffb      	ldrb	r3, [r7, #31]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d13d      	bne.n	80109c2 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010946:	6a3b      	ldr	r3, [r7, #32]
 8010948:	3304      	adds	r3, #4
 801094a:	4618      	mov	r0, r3
 801094c:	f7fd fd86 	bl	800e45c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010954:	4b1e      	ldr	r3, [pc, #120]	@ (80109d0 <xTaskGenericNotify+0x180>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	429a      	cmp	r2, r3
 801095a:	d903      	bls.n	8010964 <xTaskGenericNotify+0x114>
 801095c:	6a3b      	ldr	r3, [r7, #32]
 801095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010960:	4a1b      	ldr	r2, [pc, #108]	@ (80109d0 <xTaskGenericNotify+0x180>)
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010968:	4613      	mov	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4413      	add	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4a18      	ldr	r2, [pc, #96]	@ (80109d4 <xTaskGenericNotify+0x184>)
 8010972:	441a      	add	r2, r3
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	3304      	adds	r3, #4
 8010978:	4619      	mov	r1, r3
 801097a:	4610      	mov	r0, r2
 801097c:	f7fd fd11 	bl	800e3a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00d      	beq.n	80109a4 <xTaskGenericNotify+0x154>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801098c:	b672      	cpsid	i
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	b662      	cpsie	i
 801099c:	613b      	str	r3, [r7, #16]
}
 801099e:	bf00      	nop
 80109a0:	bf00      	nop
 80109a2:	e7fd      	b.n	80109a0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a8:	4b0b      	ldr	r3, [pc, #44]	@ (80109d8 <xTaskGenericNotify+0x188>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d907      	bls.n	80109c2 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80109b2:	4b0a      	ldr	r3, [pc, #40]	@ (80109dc <xTaskGenericNotify+0x18c>)
 80109b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80109c2:	f000 fd11 	bl	80113e8 <vPortExitCritical>

		return xReturn;
 80109c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3728      	adds	r7, #40	@ 0x28
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	2000b29c 	.word	0x2000b29c
 80109d4:	2000adc4 	.word	0x2000adc4
 80109d8:	2000adc0 	.word	0x2000adc0
 80109dc:	e000ed04 	.word	0xe000ed04

080109e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109ea:	4b21      	ldr	r3, [pc, #132]	@ (8010a70 <prvAddCurrentTaskToDelayedList+0x90>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109f0:	4b20      	ldr	r3, [pc, #128]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x94>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3304      	adds	r3, #4
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fd fd30 	bl	800e45c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a02:	d10a      	bne.n	8010a1a <prvAddCurrentTaskToDelayedList+0x3a>
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d007      	beq.n	8010a1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	3304      	adds	r3, #4
 8010a10:	4619      	mov	r1, r3
 8010a12:	4819      	ldr	r0, [pc, #100]	@ (8010a78 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a14:	f7fd fcc5 	bl	800e3a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a18:	e026      	b.n	8010a68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4413      	add	r3, r2
 8010a20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a22:	4b14      	ldr	r3, [pc, #80]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a2a:	68ba      	ldr	r2, [r7, #8]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d209      	bcs.n	8010a46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a32:	4b12      	ldr	r3, [pc, #72]	@ (8010a7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	4b0f      	ldr	r3, [pc, #60]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4610      	mov	r0, r2
 8010a40:	f7fd fcd3 	bl	800e3ea <vListInsert>
}
 8010a44:	e010      	b.n	8010a68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a46:	4b0e      	ldr	r3, [pc, #56]	@ (8010a80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	4619      	mov	r1, r3
 8010a52:	4610      	mov	r0, r2
 8010a54:	f7fd fcc9 	bl	800e3ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a58:	4b0a      	ldr	r3, [pc, #40]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68ba      	ldr	r2, [r7, #8]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d202      	bcs.n	8010a68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a62:	4a08      	ldr	r2, [pc, #32]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	6013      	str	r3, [r2, #0]
}
 8010a68:	bf00      	nop
 8010a6a:	3710      	adds	r7, #16
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	2000b298 	.word	0x2000b298
 8010a74:	2000adc0 	.word	0x2000adc0
 8010a78:	2000b280 	.word	0x2000b280
 8010a7c:	2000b250 	.word	0x2000b250
 8010a80:	2000b24c 	.word	0x2000b24c
 8010a84:	2000b2b4 	.word	0x2000b2b4

08010a88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b08a      	sub	sp, #40	@ 0x28
 8010a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010a92:	f000 fb21 	bl	80110d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010a96:	4b1e      	ldr	r3, [pc, #120]	@ (8010b10 <xTimerCreateTimerTask+0x88>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d021      	beq.n	8010ae2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010aa6:	1d3a      	adds	r2, r7, #4
 8010aa8:	f107 0108 	add.w	r1, r7, #8
 8010aac:	f107 030c 	add.w	r3, r7, #12
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fd fc2f 	bl	800e314 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	9202      	str	r2, [sp, #8]
 8010abe:	9301      	str	r3, [sp, #4]
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	460a      	mov	r2, r1
 8010ac8:	4912      	ldr	r1, [pc, #72]	@ (8010b14 <xTimerCreateTimerTask+0x8c>)
 8010aca:	4813      	ldr	r0, [pc, #76]	@ (8010b18 <xTimerCreateTimerTask+0x90>)
 8010acc:	f7fe fe20 	bl	800f710 <xTaskCreateStatic>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	4a12      	ldr	r2, [pc, #72]	@ (8010b1c <xTimerCreateTimerTask+0x94>)
 8010ad4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ad6:	4b11      	ldr	r3, [pc, #68]	@ (8010b1c <xTimerCreateTimerTask+0x94>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d001      	beq.n	8010ae2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10d      	bne.n	8010b04 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aec:	b672      	cpsid	i
 8010aee:	f383 8811 	msr	BASEPRI, r3
 8010af2:	f3bf 8f6f 	isb	sy
 8010af6:	f3bf 8f4f 	dsb	sy
 8010afa:	b662      	cpsie	i
 8010afc:	613b      	str	r3, [r7, #16]
}
 8010afe:	bf00      	nop
 8010b00:	bf00      	nop
 8010b02:	e7fd      	b.n	8010b00 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010b04:	697b      	ldr	r3, [r7, #20]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000b2f0 	.word	0x2000b2f0
 8010b14:	0801e690 	.word	0x0801e690
 8010b18:	08010c61 	.word	0x08010c61
 8010b1c:	2000b2f4 	.word	0x2000b2f4

08010b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b08a      	sub	sp, #40	@ 0x28
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
 8010b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d10d      	bne.n	8010b54 <xTimerGenericCommand+0x34>
	__asm volatile
 8010b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3c:	b672      	cpsid	i
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	b662      	cpsie	i
 8010b4c:	623b      	str	r3, [r7, #32]
}
 8010b4e:	bf00      	nop
 8010b50:	bf00      	nop
 8010b52:	e7fd      	b.n	8010b50 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010b54:	4b19      	ldr	r3, [pc, #100]	@ (8010bbc <xTimerGenericCommand+0x9c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d02a      	beq.n	8010bb2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	2b05      	cmp	r3, #5
 8010b6c:	dc18      	bgt.n	8010ba0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b6e:	f7ff fc8d 	bl	801048c <xTaskGetSchedulerState>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d109      	bne.n	8010b8c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b78:	4b10      	ldr	r3, [pc, #64]	@ (8010bbc <xTimerGenericCommand+0x9c>)
 8010b7a:	6818      	ldr	r0, [r3, #0]
 8010b7c:	f107 0110 	add.w	r1, r7, #16
 8010b80:	2300      	movs	r3, #0
 8010b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b84:	f7fd ff20 	bl	800e9c8 <xQueueGenericSend>
 8010b88:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b8a:	e012      	b.n	8010bb2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8010bbc <xTimerGenericCommand+0x9c>)
 8010b8e:	6818      	ldr	r0, [r3, #0]
 8010b90:	f107 0110 	add.w	r1, r7, #16
 8010b94:	2300      	movs	r3, #0
 8010b96:	2200      	movs	r2, #0
 8010b98:	f7fd ff16 	bl	800e9c8 <xQueueGenericSend>
 8010b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b9e:	e008      	b.n	8010bb2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ba0:	4b06      	ldr	r3, [pc, #24]	@ (8010bbc <xTimerGenericCommand+0x9c>)
 8010ba2:	6818      	ldr	r0, [r3, #0]
 8010ba4:	f107 0110 	add.w	r1, r7, #16
 8010ba8:	2300      	movs	r3, #0
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	f7fe f816 	bl	800ebdc <xQueueGenericSendFromISR>
 8010bb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3728      	adds	r7, #40	@ 0x28
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	2000b2f0 	.word	0x2000b2f0

08010bc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b088      	sub	sp, #32
 8010bc4:	af02      	add	r7, sp, #8
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bca:	4b24      	ldr	r3, [pc, #144]	@ (8010c5c <prvProcessExpiredTimer+0x9c>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fd fc3f 	bl	800e45c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d025      	beq.n	8010c38 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	699a      	ldr	r2, [r3, #24]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	18d1      	adds	r1, r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	6978      	ldr	r0, [r7, #20]
 8010bfa:	f000 f8d7 	bl	8010dac <prvInsertTimerInActiveList>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d022      	beq.n	8010c4a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c04:	2300      	movs	r3, #0
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	2300      	movs	r3, #0
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	6978      	ldr	r0, [r7, #20]
 8010c10:	f7ff ff86 	bl	8010b20 <xTimerGenericCommand>
 8010c14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d116      	bne.n	8010c4a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c20:	b672      	cpsid	i
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	b662      	cpsie	i
 8010c30:	60fb      	str	r3, [r7, #12]
}
 8010c32:	bf00      	nop
 8010c34:	bf00      	nop
 8010c36:	e7fd      	b.n	8010c34 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c3e:	f023 0301 	bic.w	r3, r3, #1
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	6978      	ldr	r0, [r7, #20]
 8010c50:	4798      	blx	r3
}
 8010c52:	bf00      	nop
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	2000b2e8 	.word	0x2000b2e8

08010c60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c68:	f107 0308 	add.w	r3, r7, #8
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f000 f859 	bl	8010d24 <prvGetNextExpireTime>
 8010c72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	4619      	mov	r1, r3
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f000 f805 	bl	8010c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010c7e:	f000 f8d7 	bl	8010e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c82:	bf00      	nop
 8010c84:	e7f0      	b.n	8010c68 <prvTimerTask+0x8>
	...

08010c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010c92:	f7fe ffaf 	bl	800fbf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c96:	f107 0308 	add.w	r3, r7, #8
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 f866 	bl	8010d6c <prvSampleTimeNow>
 8010ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d130      	bne.n	8010d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d10a      	bne.n	8010cc4 <prvProcessTimerOrBlockTask+0x3c>
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d806      	bhi.n	8010cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010cb6:	f7fe ffab 	bl	800fc10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010cba:	68f9      	ldr	r1, [r7, #12]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ff7f 	bl	8010bc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010cc2:	e024      	b.n	8010d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d008      	beq.n	8010cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010cca:	4b13      	ldr	r3, [pc, #76]	@ (8010d18 <prvProcessTimerOrBlockTask+0x90>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <prvProcessTimerOrBlockTask+0x50>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e000      	b.n	8010cda <prvProcessTimerOrBlockTask+0x52>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8010d1c <prvProcessTimerOrBlockTask+0x94>)
 8010cde:	6818      	ldr	r0, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	f7fe fcdd 	bl	800f6a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010cee:	f7fe ff8f 	bl	800fc10 <xTaskResumeAll>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d10a      	bne.n	8010d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010cf8:	4b09      	ldr	r3, [pc, #36]	@ (8010d20 <prvProcessTimerOrBlockTask+0x98>)
 8010cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cfe:	601a      	str	r2, [r3, #0]
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	f3bf 8f6f 	isb	sy
}
 8010d08:	e001      	b.n	8010d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d0a:	f7fe ff81 	bl	800fc10 <xTaskResumeAll>
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	2000b2ec 	.word	0x2000b2ec
 8010d1c:	2000b2f0 	.word	0x2000b2f0
 8010d20:	e000ed04 	.word	0xe000ed04

08010d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8010d68 <prvGetNextExpireTime+0x44>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d101      	bne.n	8010d3a <prvGetNextExpireTime+0x16>
 8010d36:	2201      	movs	r2, #1
 8010d38:	e000      	b.n	8010d3c <prvGetNextExpireTime+0x18>
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d105      	bne.n	8010d54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d48:	4b07      	ldr	r3, [pc, #28]	@ (8010d68 <prvGetNextExpireTime+0x44>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	60fb      	str	r3, [r7, #12]
 8010d52:	e001      	b.n	8010d58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d54:	2300      	movs	r3, #0
 8010d56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010d58:	68fb      	ldr	r3, [r7, #12]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	2000b2e8 	.word	0x2000b2e8

08010d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010d74:	f7fe ffec 	bl	800fd50 <xTaskGetTickCount>
 8010d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8010da8 <prvSampleTimeNow+0x3c>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d205      	bcs.n	8010d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010d84:	f000 f940 	bl	8011008 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	e002      	b.n	8010d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010d96:	4a04      	ldr	r2, [pc, #16]	@ (8010da8 <prvSampleTimeNow+0x3c>)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	2000b2f8 	.word	0x2000b2f8

08010dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
 8010db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	68ba      	ldr	r2, [r7, #8]
 8010dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	68fa      	ldr	r2, [r7, #12]
 8010dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d812      	bhi.n	8010df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	1ad2      	subs	r2, r2, r3
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d302      	bcc.n	8010de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010de0:	2301      	movs	r3, #1
 8010de2:	617b      	str	r3, [r7, #20]
 8010de4:	e01b      	b.n	8010e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010de6:	4b10      	ldr	r3, [pc, #64]	@ (8010e28 <prvInsertTimerInActiveList+0x7c>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3304      	adds	r3, #4
 8010dee:	4619      	mov	r1, r3
 8010df0:	4610      	mov	r0, r2
 8010df2:	f7fd fafa 	bl	800e3ea <vListInsert>
 8010df6:	e012      	b.n	8010e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d206      	bcs.n	8010e0e <prvInsertTimerInActiveList+0x62>
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d302      	bcc.n	8010e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	617b      	str	r3, [r7, #20]
 8010e0c:	e007      	b.n	8010e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e0e:	4b07      	ldr	r3, [pc, #28]	@ (8010e2c <prvInsertTimerInActiveList+0x80>)
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	3304      	adds	r3, #4
 8010e16:	4619      	mov	r1, r3
 8010e18:	4610      	mov	r0, r2
 8010e1a:	f7fd fae6 	bl	800e3ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e1e:	697b      	ldr	r3, [r7, #20]
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3718      	adds	r7, #24
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	2000b2ec 	.word	0x2000b2ec
 8010e2c:	2000b2e8 	.word	0x2000b2e8

08010e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b08e      	sub	sp, #56	@ 0x38
 8010e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e36:	e0d4      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	da1b      	bge.n	8010e76 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e3e:	1d3b      	adds	r3, r7, #4
 8010e40:	3304      	adds	r3, #4
 8010e42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10d      	bne.n	8010e66 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e4e:	b672      	cpsid	i
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	b662      	cpsie	i
 8010e5e:	61fb      	str	r3, [r7, #28]
}
 8010e60:	bf00      	nop
 8010e62:	bf00      	nop
 8010e64:	e7fd      	b.n	8010e62 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e6c:	6850      	ldr	r0, [r2, #4]
 8010e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e70:	6892      	ldr	r2, [r2, #8]
 8010e72:	4611      	mov	r1, r2
 8010e74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f2c0 80b2 	blt.w	8010fe2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d004      	beq.n	8010e94 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fd fae4 	bl	800e45c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e94:	463b      	mov	r3, r7
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff ff68 	bl	8010d6c <prvSampleTimeNow>
 8010e9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b09      	cmp	r3, #9
 8010ea2:	f200 809b 	bhi.w	8010fdc <prvProcessReceivedCommands+0x1ac>
 8010ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8010eac <prvProcessReceivedCommands+0x7c>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ed5 	.word	0x08010ed5
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08010ed5 	.word	0x08010ed5
 8010eb8:	08010f4f 	.word	0x08010f4f
 8010ebc:	08010f63 	.word	0x08010f63
 8010ec0:	08010fb3 	.word	0x08010fb3
 8010ec4:	08010ed5 	.word	0x08010ed5
 8010ec8:	08010ed5 	.word	0x08010ed5
 8010ecc:	08010f4f 	.word	0x08010f4f
 8010ed0:	08010f63 	.word	0x08010f63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eda:	f043 0301 	orr.w	r3, r3, #1
 8010ede:	b2da      	uxtb	r2, r3
 8010ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eea:	699b      	ldr	r3, [r3, #24]
 8010eec:	18d1      	adds	r1, r2, r3
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ef4:	f7ff ff5a 	bl	8010dac <prvInsertTimerInActiveList>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d070      	beq.n	8010fe0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f0c:	f003 0304 	and.w	r3, r3, #4
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d065      	beq.n	8010fe0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f18:	699b      	ldr	r3, [r3, #24]
 8010f1a:	441a      	add	r2, r3
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	2300      	movs	r3, #0
 8010f22:	2100      	movs	r1, #0
 8010f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f26:	f7ff fdfb 	bl	8010b20 <xTimerGenericCommand>
 8010f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f2c:	6a3b      	ldr	r3, [r7, #32]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d156      	bne.n	8010fe0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8010f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f36:	b672      	cpsid	i
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	b662      	cpsie	i
 8010f46:	61bb      	str	r3, [r7, #24]
}
 8010f48:	bf00      	nop
 8010f4a:	bf00      	nop
 8010f4c:	e7fd      	b.n	8010f4a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f54:	f023 0301 	bic.w	r3, r3, #1
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010f60:	e03f      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f68:	f043 0301 	orr.w	r3, r3, #1
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10d      	bne.n	8010f9e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8010f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f86:	b672      	cpsid	i
 8010f88:	f383 8811 	msr	BASEPRI, r3
 8010f8c:	f3bf 8f6f 	isb	sy
 8010f90:	f3bf 8f4f 	dsb	sy
 8010f94:	b662      	cpsie	i
 8010f96:	617b      	str	r3, [r7, #20]
}
 8010f98:	bf00      	nop
 8010f9a:	bf00      	nop
 8010f9c:	e7fd      	b.n	8010f9a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fa0:	699a      	ldr	r2, [r3, #24]
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa4:	18d1      	adds	r1, r2, r3
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fac:	f7ff fefe 	bl	8010dac <prvInsertTimerInActiveList>
					break;
 8010fb0:	e017      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fb8:	f003 0302 	and.w	r3, r3, #2
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d103      	bne.n	8010fc8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fc2:	f000 fbd7 	bl	8011774 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010fc6:	e00c      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fce:	f023 0301 	bic.w	r3, r3, #1
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010fda:	e002      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010fdc:	bf00      	nop
 8010fde:	e000      	b.n	8010fe2 <prvProcessReceivedCommands+0x1b2>
					break;
 8010fe0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fe2:	4b08      	ldr	r3, [pc, #32]	@ (8011004 <prvProcessReceivedCommands+0x1d4>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	1d39      	adds	r1, r7, #4
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fd ff32 	bl	800ee54 <xQueueReceive>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f47f af20 	bne.w	8010e38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010ff8:	bf00      	nop
 8010ffa:	bf00      	nop
 8010ffc:	3730      	adds	r7, #48	@ 0x30
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	2000b2f0 	.word	0x2000b2f0

08011008 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b088      	sub	sp, #32
 801100c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801100e:	e04b      	b.n	80110a8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011010:	4b2f      	ldr	r3, [pc, #188]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801101a:	4b2d      	ldr	r3, [pc, #180]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	3304      	adds	r3, #4
 8011028:	4618      	mov	r0, r3
 801102a:	f7fd fa17 	bl	800e45c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6a1b      	ldr	r3, [r3, #32]
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801103c:	f003 0304 	and.w	r3, r3, #4
 8011040:	2b00      	cmp	r3, #0
 8011042:	d031      	beq.n	80110a8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	699b      	ldr	r3, [r3, #24]
 8011048:	693a      	ldr	r2, [r7, #16]
 801104a:	4413      	add	r3, r2
 801104c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	429a      	cmp	r2, r3
 8011054:	d90e      	bls.n	8011074 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011062:	4b1b      	ldr	r3, [pc, #108]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	3304      	adds	r3, #4
 801106a:	4619      	mov	r1, r3
 801106c:	4610      	mov	r0, r2
 801106e:	f7fd f9bc 	bl	800e3ea <vListInsert>
 8011072:	e019      	b.n	80110a8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011074:	2300      	movs	r3, #0
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	2300      	movs	r3, #0
 801107a:	693a      	ldr	r2, [r7, #16]
 801107c:	2100      	movs	r1, #0
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f7ff fd4e 	bl	8010b20 <xTimerGenericCommand>
 8011084:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d10d      	bne.n	80110a8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 801108c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011090:	b672      	cpsid	i
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	b662      	cpsie	i
 80110a0:	603b      	str	r3, [r7, #0]
}
 80110a2:	bf00      	nop
 80110a4:	bf00      	nop
 80110a6:	e7fd      	b.n	80110a4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110a8:	4b09      	ldr	r3, [pc, #36]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1ae      	bne.n	8011010 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80110b2:	4b07      	ldr	r3, [pc, #28]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80110b8:	4b06      	ldr	r3, [pc, #24]	@ (80110d4 <prvSwitchTimerLists+0xcc>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a04      	ldr	r2, [pc, #16]	@ (80110d0 <prvSwitchTimerLists+0xc8>)
 80110be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80110c0:	4a04      	ldr	r2, [pc, #16]	@ (80110d4 <prvSwitchTimerLists+0xcc>)
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	6013      	str	r3, [r2, #0]
}
 80110c6:	bf00      	nop
 80110c8:	3718      	adds	r7, #24
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	2000b2e8 	.word	0x2000b2e8
 80110d4:	2000b2ec 	.word	0x2000b2ec

080110d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80110de:	f000 f94d 	bl	801137c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80110e2:	4b15      	ldr	r3, [pc, #84]	@ (8011138 <prvCheckForValidListAndQueue+0x60>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d120      	bne.n	801112c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80110ea:	4814      	ldr	r0, [pc, #80]	@ (801113c <prvCheckForValidListAndQueue+0x64>)
 80110ec:	f7fd f92c 	bl	800e348 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80110f0:	4813      	ldr	r0, [pc, #76]	@ (8011140 <prvCheckForValidListAndQueue+0x68>)
 80110f2:	f7fd f929 	bl	800e348 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80110f6:	4b13      	ldr	r3, [pc, #76]	@ (8011144 <prvCheckForValidListAndQueue+0x6c>)
 80110f8:	4a10      	ldr	r2, [pc, #64]	@ (801113c <prvCheckForValidListAndQueue+0x64>)
 80110fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80110fc:	4b12      	ldr	r3, [pc, #72]	@ (8011148 <prvCheckForValidListAndQueue+0x70>)
 80110fe:	4a10      	ldr	r2, [pc, #64]	@ (8011140 <prvCheckForValidListAndQueue+0x68>)
 8011100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011102:	2300      	movs	r3, #0
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	4b11      	ldr	r3, [pc, #68]	@ (801114c <prvCheckForValidListAndQueue+0x74>)
 8011108:	4a11      	ldr	r2, [pc, #68]	@ (8011150 <prvCheckForValidListAndQueue+0x78>)
 801110a:	2110      	movs	r1, #16
 801110c:	200a      	movs	r0, #10
 801110e:	f7fd fa3b 	bl	800e588 <xQueueGenericCreateStatic>
 8011112:	4603      	mov	r3, r0
 8011114:	4a08      	ldr	r2, [pc, #32]	@ (8011138 <prvCheckForValidListAndQueue+0x60>)
 8011116:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011118:	4b07      	ldr	r3, [pc, #28]	@ (8011138 <prvCheckForValidListAndQueue+0x60>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d005      	beq.n	801112c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011120:	4b05      	ldr	r3, [pc, #20]	@ (8011138 <prvCheckForValidListAndQueue+0x60>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	490b      	ldr	r1, [pc, #44]	@ (8011154 <prvCheckForValidListAndQueue+0x7c>)
 8011126:	4618      	mov	r0, r3
 8011128:	f7fe fa6a 	bl	800f600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801112c:	f000 f95c 	bl	80113e8 <vPortExitCritical>
}
 8011130:	bf00      	nop
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	2000b2f0 	.word	0x2000b2f0
 801113c:	2000b2c0 	.word	0x2000b2c0
 8011140:	2000b2d4 	.word	0x2000b2d4
 8011144:	2000b2e8 	.word	0x2000b2e8
 8011148:	2000b2ec 	.word	0x2000b2ec
 801114c:	2000b39c 	.word	0x2000b39c
 8011150:	2000b2fc 	.word	0x2000b2fc
 8011154:	0801e698 	.word	0x0801e698

08011158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011158:	b480      	push	{r7}
 801115a:	b085      	sub	sp, #20
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	3b04      	subs	r3, #4
 8011168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3b04      	subs	r3, #4
 8011176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	f023 0201 	bic.w	r2, r3, #1
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	3b04      	subs	r3, #4
 8011186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011188:	4a0c      	ldr	r2, [pc, #48]	@ (80111bc <pxPortInitialiseStack+0x64>)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	3b14      	subs	r3, #20
 8011192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	3b04      	subs	r3, #4
 801119e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f06f 0202 	mvn.w	r2, #2
 80111a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	3b20      	subs	r3, #32
 80111ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80111ae:	68fb      	ldr	r3, [r7, #12]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3714      	adds	r7, #20
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	080111c1 	.word	0x080111c1

080111c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111ca:	4b15      	ldr	r3, [pc, #84]	@ (8011220 <prvTaskExitError+0x60>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d2:	d00d      	beq.n	80111f0 <prvTaskExitError+0x30>
	__asm volatile
 80111d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d8:	b672      	cpsid	i
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	b662      	cpsie	i
 80111e8:	60fb      	str	r3, [r7, #12]
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	e7fd      	b.n	80111ec <prvTaskExitError+0x2c>
	__asm volatile
 80111f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111f4:	b672      	cpsid	i
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	b662      	cpsie	i
 8011204:	60bb      	str	r3, [r7, #8]
}
 8011206:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011208:	bf00      	nop
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d0fc      	beq.n	801120a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011210:	bf00      	nop
 8011212:	bf00      	nop
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	20000020 	.word	0x20000020
	...

08011230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011230:	4b07      	ldr	r3, [pc, #28]	@ (8011250 <pxCurrentTCBConst2>)
 8011232:	6819      	ldr	r1, [r3, #0]
 8011234:	6808      	ldr	r0, [r1, #0]
 8011236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123a:	f380 8809 	msr	PSP, r0
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f04f 0000 	mov.w	r0, #0
 8011246:	f380 8811 	msr	BASEPRI, r0
 801124a:	4770      	bx	lr
 801124c:	f3af 8000 	nop.w

08011250 <pxCurrentTCBConst2>:
 8011250:	2000adc0 	.word	0x2000adc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011254:	bf00      	nop
 8011256:	bf00      	nop

08011258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011258:	4808      	ldr	r0, [pc, #32]	@ (801127c <prvPortStartFirstTask+0x24>)
 801125a:	6800      	ldr	r0, [r0, #0]
 801125c:	6800      	ldr	r0, [r0, #0]
 801125e:	f380 8808 	msr	MSP, r0
 8011262:	f04f 0000 	mov.w	r0, #0
 8011266:	f380 8814 	msr	CONTROL, r0
 801126a:	b662      	cpsie	i
 801126c:	b661      	cpsie	f
 801126e:	f3bf 8f4f 	dsb	sy
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	df00      	svc	0
 8011278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801127a:	bf00      	nop
 801127c:	e000ed08 	.word	0xe000ed08

08011280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011286:	4b37      	ldr	r3, [pc, #220]	@ (8011364 <xPortStartScheduler+0xe4>)
 8011288:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	b2db      	uxtb	r3, r3
 8011290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	22ff      	movs	r2, #255	@ 0xff
 8011296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	b2db      	uxtb	r3, r3
 801129e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112a0:	78fb      	ldrb	r3, [r7, #3]
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	4b2f      	ldr	r3, [pc, #188]	@ (8011368 <xPortStartScheduler+0xe8>)
 80112ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112ae:	4b2f      	ldr	r3, [pc, #188]	@ (801136c <xPortStartScheduler+0xec>)
 80112b0:	2207      	movs	r2, #7
 80112b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112b4:	e009      	b.n	80112ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80112b6:	4b2d      	ldr	r3, [pc, #180]	@ (801136c <xPortStartScheduler+0xec>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	3b01      	subs	r3, #1
 80112bc:	4a2b      	ldr	r2, [pc, #172]	@ (801136c <xPortStartScheduler+0xec>)
 80112be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112ca:	78fb      	ldrb	r3, [r7, #3]
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112d2:	2b80      	cmp	r3, #128	@ 0x80
 80112d4:	d0ef      	beq.n	80112b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112d6:	4b25      	ldr	r3, [pc, #148]	@ (801136c <xPortStartScheduler+0xec>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f1c3 0307 	rsb	r3, r3, #7
 80112de:	2b04      	cmp	r3, #4
 80112e0:	d00d      	beq.n	80112fe <xPortStartScheduler+0x7e>
	__asm volatile
 80112e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e6:	b672      	cpsid	i
 80112e8:	f383 8811 	msr	BASEPRI, r3
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f3bf 8f4f 	dsb	sy
 80112f4:	b662      	cpsie	i
 80112f6:	60bb      	str	r3, [r7, #8]
}
 80112f8:	bf00      	nop
 80112fa:	bf00      	nop
 80112fc:	e7fd      	b.n	80112fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112fe:	4b1b      	ldr	r3, [pc, #108]	@ (801136c <xPortStartScheduler+0xec>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	021b      	lsls	r3, r3, #8
 8011304:	4a19      	ldr	r2, [pc, #100]	@ (801136c <xPortStartScheduler+0xec>)
 8011306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011308:	4b18      	ldr	r3, [pc, #96]	@ (801136c <xPortStartScheduler+0xec>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011310:	4a16      	ldr	r2, [pc, #88]	@ (801136c <xPortStartScheduler+0xec>)
 8011312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	b2da      	uxtb	r2, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801131c:	4b14      	ldr	r3, [pc, #80]	@ (8011370 <xPortStartScheduler+0xf0>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a13      	ldr	r2, [pc, #76]	@ (8011370 <xPortStartScheduler+0xf0>)
 8011322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011328:	4b11      	ldr	r3, [pc, #68]	@ (8011370 <xPortStartScheduler+0xf0>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a10      	ldr	r2, [pc, #64]	@ (8011370 <xPortStartScheduler+0xf0>)
 801132e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011334:	f000 f8dc 	bl	80114f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011338:	4b0e      	ldr	r3, [pc, #56]	@ (8011374 <xPortStartScheduler+0xf4>)
 801133a:	2200      	movs	r2, #0
 801133c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801133e:	f000 f8fb 	bl	8011538 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011342:	4b0d      	ldr	r3, [pc, #52]	@ (8011378 <xPortStartScheduler+0xf8>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a0c      	ldr	r2, [pc, #48]	@ (8011378 <xPortStartScheduler+0xf8>)
 8011348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801134c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801134e:	f7ff ff83 	bl	8011258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011352:	f7fe fddb 	bl	800ff0c <vTaskSwitchContext>
	prvTaskExitError();
 8011356:	f7ff ff33 	bl	80111c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	e000e400 	.word	0xe000e400
 8011368:	2000b3ec 	.word	0x2000b3ec
 801136c:	2000b3f0 	.word	0x2000b3f0
 8011370:	e000ed20 	.word	0xe000ed20
 8011374:	20000020 	.word	0x20000020
 8011378:	e000ef34 	.word	0xe000ef34

0801137c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
	__asm volatile
 8011382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011386:	b672      	cpsid	i
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	b662      	cpsie	i
 8011396:	607b      	str	r3, [r7, #4]
}
 8011398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801139a:	4b11      	ldr	r3, [pc, #68]	@ (80113e0 <vPortEnterCritical+0x64>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	4a0f      	ldr	r2, [pc, #60]	@ (80113e0 <vPortEnterCritical+0x64>)
 80113a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80113a4:	4b0e      	ldr	r3, [pc, #56]	@ (80113e0 <vPortEnterCritical+0x64>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d112      	bne.n	80113d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113ac:	4b0d      	ldr	r3, [pc, #52]	@ (80113e4 <vPortEnterCritical+0x68>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d00d      	beq.n	80113d2 <vPortEnterCritical+0x56>
	__asm volatile
 80113b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ba:	b672      	cpsid	i
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	b662      	cpsie	i
 80113ca:	603b      	str	r3, [r7, #0]
}
 80113cc:	bf00      	nop
 80113ce:	bf00      	nop
 80113d0:	e7fd      	b.n	80113ce <vPortEnterCritical+0x52>
	}
}
 80113d2:	bf00      	nop
 80113d4:	370c      	adds	r7, #12
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	20000020 	.word	0x20000020
 80113e4:	e000ed04 	.word	0xe000ed04

080113e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113ee:	4b13      	ldr	r3, [pc, #76]	@ (801143c <vPortExitCritical+0x54>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d10d      	bne.n	8011412 <vPortExitCritical+0x2a>
	__asm volatile
 80113f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113fa:	b672      	cpsid	i
 80113fc:	f383 8811 	msr	BASEPRI, r3
 8011400:	f3bf 8f6f 	isb	sy
 8011404:	f3bf 8f4f 	dsb	sy
 8011408:	b662      	cpsie	i
 801140a:	607b      	str	r3, [r7, #4]
}
 801140c:	bf00      	nop
 801140e:	bf00      	nop
 8011410:	e7fd      	b.n	801140e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011412:	4b0a      	ldr	r3, [pc, #40]	@ (801143c <vPortExitCritical+0x54>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3b01      	subs	r3, #1
 8011418:	4a08      	ldr	r2, [pc, #32]	@ (801143c <vPortExitCritical+0x54>)
 801141a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801141c:	4b07      	ldr	r3, [pc, #28]	@ (801143c <vPortExitCritical+0x54>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d105      	bne.n	8011430 <vPortExitCritical+0x48>
 8011424:	2300      	movs	r3, #0
 8011426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	f383 8811 	msr	BASEPRI, r3
}
 801142e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	20000020 	.word	0x20000020

08011440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011440:	f3ef 8009 	mrs	r0, PSP
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	4b15      	ldr	r3, [pc, #84]	@ (80114a0 <pxCurrentTCBConst>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	f01e 0f10 	tst.w	lr, #16
 8011450:	bf08      	it	eq
 8011452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145a:	6010      	str	r0, [r2, #0]
 801145c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011464:	b672      	cpsid	i
 8011466:	f380 8811 	msr	BASEPRI, r0
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	f3bf 8f6f 	isb	sy
 8011472:	b662      	cpsie	i
 8011474:	f7fe fd4a 	bl	800ff0c <vTaskSwitchContext>
 8011478:	f04f 0000 	mov.w	r0, #0
 801147c:	f380 8811 	msr	BASEPRI, r0
 8011480:	bc09      	pop	{r0, r3}
 8011482:	6819      	ldr	r1, [r3, #0]
 8011484:	6808      	ldr	r0, [r1, #0]
 8011486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148a:	f01e 0f10 	tst.w	lr, #16
 801148e:	bf08      	it	eq
 8011490:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011494:	f380 8809 	msr	PSP, r0
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop

080114a0 <pxCurrentTCBConst>:
 80114a0:	2000adc0 	.word	0x2000adc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop

080114a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b2:	b672      	cpsid	i
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	b662      	cpsie	i
 80114c2:	607b      	str	r3, [r7, #4]
}
 80114c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114c6:	f7fe fc65 	bl	800fd94 <xTaskIncrementTick>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d003      	beq.n	80114d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114d0:	4b06      	ldr	r3, [pc, #24]	@ (80114ec <SysTick_Handler+0x44>)
 80114d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114d6:	601a      	str	r2, [r3, #0]
 80114d8:	2300      	movs	r3, #0
 80114da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	f383 8811 	msr	BASEPRI, r3
}
 80114e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114e4:	bf00      	nop
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	e000ed04 	.word	0xe000ed04

080114f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114f0:	b480      	push	{r7}
 80114f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011524 <vPortSetupTimerInterrupt+0x34>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011528 <vPortSetupTimerInterrupt+0x38>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011500:	4b0a      	ldr	r3, [pc, #40]	@ (801152c <vPortSetupTimerInterrupt+0x3c>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4a0a      	ldr	r2, [pc, #40]	@ (8011530 <vPortSetupTimerInterrupt+0x40>)
 8011506:	fba2 2303 	umull	r2, r3, r2, r3
 801150a:	099b      	lsrs	r3, r3, #6
 801150c:	4a09      	ldr	r2, [pc, #36]	@ (8011534 <vPortSetupTimerInterrupt+0x44>)
 801150e:	3b01      	subs	r3, #1
 8011510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011512:	4b04      	ldr	r3, [pc, #16]	@ (8011524 <vPortSetupTimerInterrupt+0x34>)
 8011514:	2207      	movs	r2, #7
 8011516:	601a      	str	r2, [r3, #0]
}
 8011518:	bf00      	nop
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	e000e010 	.word	0xe000e010
 8011528:	e000e018 	.word	0xe000e018
 801152c:	20000000 	.word	0x20000000
 8011530:	10624dd3 	.word	0x10624dd3
 8011534:	e000e014 	.word	0xe000e014

08011538 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011538:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011548 <vPortEnableVFP+0x10>
 801153c:	6801      	ldr	r1, [r0, #0]
 801153e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011542:	6001      	str	r1, [r0, #0]
 8011544:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011546:	bf00      	nop
 8011548:	e000ed88 	.word	0xe000ed88

0801154c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011552:	f3ef 8305 	mrs	r3, IPSR
 8011556:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2b0f      	cmp	r3, #15
 801155c:	d917      	bls.n	801158e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801155e:	4a1a      	ldr	r2, [pc, #104]	@ (80115c8 <vPortValidateInterruptPriority+0x7c>)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4413      	add	r3, r2
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011568:	4b18      	ldr	r3, [pc, #96]	@ (80115cc <vPortValidateInterruptPriority+0x80>)
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	7afa      	ldrb	r2, [r7, #11]
 801156e:	429a      	cmp	r2, r3
 8011570:	d20d      	bcs.n	801158e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8011572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011576:	b672      	cpsid	i
 8011578:	f383 8811 	msr	BASEPRI, r3
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f3bf 8f4f 	dsb	sy
 8011584:	b662      	cpsie	i
 8011586:	607b      	str	r3, [r7, #4]
}
 8011588:	bf00      	nop
 801158a:	bf00      	nop
 801158c:	e7fd      	b.n	801158a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801158e:	4b10      	ldr	r3, [pc, #64]	@ (80115d0 <vPortValidateInterruptPriority+0x84>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011596:	4b0f      	ldr	r3, [pc, #60]	@ (80115d4 <vPortValidateInterruptPriority+0x88>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	429a      	cmp	r2, r3
 801159c:	d90d      	bls.n	80115ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801159e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a2:	b672      	cpsid	i
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	b662      	cpsie	i
 80115b2:	603b      	str	r3, [r7, #0]
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	e7fd      	b.n	80115b6 <vPortValidateInterruptPriority+0x6a>
	}
 80115ba:	bf00      	nop
 80115bc:	3714      	adds	r7, #20
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop
 80115c8:	e000e3f0 	.word	0xe000e3f0
 80115cc:	2000b3ec 	.word	0x2000b3ec
 80115d0:	e000ed0c 	.word	0xe000ed0c
 80115d4:	2000b3f0 	.word	0x2000b3f0

080115d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b08a      	sub	sp, #40	@ 0x28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115e0:	2300      	movs	r3, #0
 80115e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115e4:	f7fe fb06 	bl	800fbf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115e8:	4b5d      	ldr	r3, [pc, #372]	@ (8011760 <pvPortMalloc+0x188>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d101      	bne.n	80115f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115f0:	f000 f920 	bl	8011834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115f4:	4b5b      	ldr	r3, [pc, #364]	@ (8011764 <pvPortMalloc+0x18c>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f040 8094 	bne.w	801172a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d020      	beq.n	801164a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8011608:	2208      	movs	r2, #8
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4413      	add	r3, r2
 801160e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f003 0307 	and.w	r3, r3, #7
 8011616:	2b00      	cmp	r3, #0
 8011618:	d017      	beq.n	801164a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f023 0307 	bic.w	r3, r3, #7
 8011620:	3308      	adds	r3, #8
 8011622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00d      	beq.n	801164a <pvPortMalloc+0x72>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011632:	b672      	cpsid	i
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	b662      	cpsie	i
 8011642:	617b      	str	r3, [r7, #20]
}
 8011644:	bf00      	nop
 8011646:	bf00      	nop
 8011648:	e7fd      	b.n	8011646 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d06c      	beq.n	801172a <pvPortMalloc+0x152>
 8011650:	4b45      	ldr	r3, [pc, #276]	@ (8011768 <pvPortMalloc+0x190>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	429a      	cmp	r2, r3
 8011658:	d867      	bhi.n	801172a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801165a:	4b44      	ldr	r3, [pc, #272]	@ (801176c <pvPortMalloc+0x194>)
 801165c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801165e:	4b43      	ldr	r3, [pc, #268]	@ (801176c <pvPortMalloc+0x194>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011664:	e004      	b.n	8011670 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8011666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d903      	bls.n	8011682 <pvPortMalloc+0xaa>
 801167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1f1      	bne.n	8011666 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011682:	4b37      	ldr	r3, [pc, #220]	@ (8011760 <pvPortMalloc+0x188>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011688:	429a      	cmp	r2, r3
 801168a:	d04e      	beq.n	801172a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801168c:	6a3b      	ldr	r3, [r7, #32]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2208      	movs	r2, #8
 8011692:	4413      	add	r3, r2
 8011694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a0:	685a      	ldr	r2, [r3, #4]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	1ad2      	subs	r2, r2, r3
 80116a6:	2308      	movs	r3, #8
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d922      	bls.n	80116f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4413      	add	r3, r2
 80116b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	f003 0307 	and.w	r3, r3, #7
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00d      	beq.n	80116dc <pvPortMalloc+0x104>
	__asm volatile
 80116c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116c4:	b672      	cpsid	i
 80116c6:	f383 8811 	msr	BASEPRI, r3
 80116ca:	f3bf 8f6f 	isb	sy
 80116ce:	f3bf 8f4f 	dsb	sy
 80116d2:	b662      	cpsie	i
 80116d4:	613b      	str	r3, [r7, #16]
}
 80116d6:	bf00      	nop
 80116d8:	bf00      	nop
 80116da:	e7fd      	b.n	80116d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116de:	685a      	ldr	r2, [r3, #4]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	1ad2      	subs	r2, r2, r3
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116ee:	69b8      	ldr	r0, [r7, #24]
 80116f0:	f000 f902 	bl	80118f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116f4:	4b1c      	ldr	r3, [pc, #112]	@ (8011768 <pvPortMalloc+0x190>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	1ad3      	subs	r3, r2, r3
 80116fe:	4a1a      	ldr	r2, [pc, #104]	@ (8011768 <pvPortMalloc+0x190>)
 8011700:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011702:	4b19      	ldr	r3, [pc, #100]	@ (8011768 <pvPortMalloc+0x190>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	4b1a      	ldr	r3, [pc, #104]	@ (8011770 <pvPortMalloc+0x198>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	429a      	cmp	r2, r3
 801170c:	d203      	bcs.n	8011716 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801170e:	4b16      	ldr	r3, [pc, #88]	@ (8011768 <pvPortMalloc+0x190>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a17      	ldr	r2, [pc, #92]	@ (8011770 <pvPortMalloc+0x198>)
 8011714:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011718:	685a      	ldr	r2, [r3, #4]
 801171a:	4b12      	ldr	r3, [pc, #72]	@ (8011764 <pvPortMalloc+0x18c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	431a      	orrs	r2, r3
 8011720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011722:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011726:	2200      	movs	r2, #0
 8011728:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801172a:	f7fe fa71 	bl	800fc10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	f003 0307 	and.w	r3, r3, #7
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00d      	beq.n	8011754 <pvPortMalloc+0x17c>
	__asm volatile
 8011738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801173c:	b672      	cpsid	i
 801173e:	f383 8811 	msr	BASEPRI, r3
 8011742:	f3bf 8f6f 	isb	sy
 8011746:	f3bf 8f4f 	dsb	sy
 801174a:	b662      	cpsie	i
 801174c:	60fb      	str	r3, [r7, #12]
}
 801174e:	bf00      	nop
 8011750:	bf00      	nop
 8011752:	e7fd      	b.n	8011750 <pvPortMalloc+0x178>
	return pvReturn;
 8011754:	69fb      	ldr	r3, [r7, #28]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3728      	adds	r7, #40	@ 0x28
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	200243fc 	.word	0x200243fc
 8011764:	20024408 	.word	0x20024408
 8011768:	20024400 	.word	0x20024400
 801176c:	200243f4 	.word	0x200243f4
 8011770:	20024404 	.word	0x20024404

08011774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b086      	sub	sp, #24
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d04e      	beq.n	8011824 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011786:	2308      	movs	r3, #8
 8011788:	425b      	negs	r3, r3
 801178a:	697a      	ldr	r2, [r7, #20]
 801178c:	4413      	add	r3, r2
 801178e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	685a      	ldr	r2, [r3, #4]
 8011798:	4b24      	ldr	r3, [pc, #144]	@ (801182c <vPortFree+0xb8>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4013      	ands	r3, r2
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d10d      	bne.n	80117be <vPortFree+0x4a>
	__asm volatile
 80117a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117a6:	b672      	cpsid	i
 80117a8:	f383 8811 	msr	BASEPRI, r3
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	f3bf 8f4f 	dsb	sy
 80117b4:	b662      	cpsie	i
 80117b6:	60fb      	str	r3, [r7, #12]
}
 80117b8:	bf00      	nop
 80117ba:	bf00      	nop
 80117bc:	e7fd      	b.n	80117ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00d      	beq.n	80117e2 <vPortFree+0x6e>
	__asm volatile
 80117c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ca:	b672      	cpsid	i
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	b662      	cpsie	i
 80117da:	60bb      	str	r3, [r7, #8]
}
 80117dc:	bf00      	nop
 80117de:	bf00      	nop
 80117e0:	e7fd      	b.n	80117de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	4b11      	ldr	r3, [pc, #68]	@ (801182c <vPortFree+0xb8>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4013      	ands	r3, r2
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d019      	beq.n	8011824 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d115      	bne.n	8011824 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	4b0b      	ldr	r3, [pc, #44]	@ (801182c <vPortFree+0xb8>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	43db      	mvns	r3, r3
 8011802:	401a      	ands	r2, r3
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011808:	f7fe f9f4 	bl	800fbf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	685a      	ldr	r2, [r3, #4]
 8011810:	4b07      	ldr	r3, [pc, #28]	@ (8011830 <vPortFree+0xbc>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4413      	add	r3, r2
 8011816:	4a06      	ldr	r2, [pc, #24]	@ (8011830 <vPortFree+0xbc>)
 8011818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801181a:	6938      	ldr	r0, [r7, #16]
 801181c:	f000 f86c 	bl	80118f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011820:	f7fe f9f6 	bl	800fc10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011824:	bf00      	nop
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	20024408 	.word	0x20024408
 8011830:	20024400 	.word	0x20024400

08011834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011834:	b480      	push	{r7}
 8011836:	b085      	sub	sp, #20
 8011838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801183a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801183e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011840:	4b27      	ldr	r3, [pc, #156]	@ (80118e0 <prvHeapInit+0xac>)
 8011842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f003 0307 	and.w	r3, r3, #7
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00c      	beq.n	8011868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	3307      	adds	r3, #7
 8011852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f023 0307 	bic.w	r3, r3, #7
 801185a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	4a1f      	ldr	r2, [pc, #124]	@ (80118e0 <prvHeapInit+0xac>)
 8011864:	4413      	add	r3, r2
 8011866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801186c:	4a1d      	ldr	r2, [pc, #116]	@ (80118e4 <prvHeapInit+0xb0>)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011872:	4b1c      	ldr	r3, [pc, #112]	@ (80118e4 <prvHeapInit+0xb0>)
 8011874:	2200      	movs	r2, #0
 8011876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	4413      	add	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011880:	2208      	movs	r2, #8
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	1a9b      	subs	r3, r3, r2
 8011886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f023 0307 	bic.w	r3, r3, #7
 801188e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	4a15      	ldr	r2, [pc, #84]	@ (80118e8 <prvHeapInit+0xb4>)
 8011894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011896:	4b14      	ldr	r3, [pc, #80]	@ (80118e8 <prvHeapInit+0xb4>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2200      	movs	r2, #0
 801189c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801189e:	4b12      	ldr	r3, [pc, #72]	@ (80118e8 <prvHeapInit+0xb4>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2200      	movs	r2, #0
 80118a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	1ad2      	subs	r2, r2, r3
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80118b4:	4b0c      	ldr	r3, [pc, #48]	@ (80118e8 <prvHeapInit+0xb4>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	4a0a      	ldr	r2, [pc, #40]	@ (80118ec <prvHeapInit+0xb8>)
 80118c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	4a09      	ldr	r2, [pc, #36]	@ (80118f0 <prvHeapInit+0xbc>)
 80118ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118cc:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <prvHeapInit+0xc0>)
 80118ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80118d2:	601a      	str	r2, [r3, #0]
}
 80118d4:	bf00      	nop
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	2000b3f4 	.word	0x2000b3f4
 80118e4:	200243f4 	.word	0x200243f4
 80118e8:	200243fc 	.word	0x200243fc
 80118ec:	20024404 	.word	0x20024404
 80118f0:	20024400 	.word	0x20024400
 80118f4:	20024408 	.word	0x20024408

080118f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011900:	4b28      	ldr	r3, [pc, #160]	@ (80119a4 <prvInsertBlockIntoFreeList+0xac>)
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	e002      	b.n	801190c <prvInsertBlockIntoFreeList+0x14>
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	60fb      	str	r3, [r7, #12]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	429a      	cmp	r2, r3
 8011914:	d8f7      	bhi.n	8011906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	4413      	add	r3, r2
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	429a      	cmp	r2, r3
 8011926:	d108      	bne.n	801193a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	685a      	ldr	r2, [r3, #4]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	441a      	add	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	441a      	add	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d118      	bne.n	8011980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	4b15      	ldr	r3, [pc, #84]	@ (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d00d      	beq.n	8011976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	685a      	ldr	r2, [r3, #4]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	441a      	add	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	e008      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011976:	4b0c      	ldr	r3, [pc, #48]	@ (80119a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	e003      	b.n	8011988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	429a      	cmp	r2, r3
 801198e:	d002      	beq.n	8011996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011996:	bf00      	nop
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	200243f4 	.word	0x200243f4
 80119a8:	200243fc 	.word	0x200243fc

080119ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80119b6:	f007 facd 	bl	8018f54 <sys_timeouts_sleeptime>
 80119ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c2:	d10b      	bne.n	80119dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80119c4:	4813      	ldr	r0, [pc, #76]	@ (8011a14 <tcpip_timeouts_mbox_fetch+0x68>)
 80119c6:	f00a fb62 	bl	801c08e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80119ca:	2200      	movs	r2, #0
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f00a faea 	bl	801bfa8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80119d4:	480f      	ldr	r0, [pc, #60]	@ (8011a14 <tcpip_timeouts_mbox_fetch+0x68>)
 80119d6:	f00a fb4b 	bl	801c070 <sys_mutex_lock>
    return;
 80119da:	e018      	b.n	8011a0e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d102      	bne.n	80119e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80119e2:	f007 fa7d 	bl	8018ee0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80119e6:	e7e6      	b.n	80119b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80119e8:	480a      	ldr	r0, [pc, #40]	@ (8011a14 <tcpip_timeouts_mbox_fetch+0x68>)
 80119ea:	f00a fb50 	bl	801c08e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f00a fad8 	bl	801bfa8 <sys_arch_mbox_fetch>
 80119f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80119fa:	4806      	ldr	r0, [pc, #24]	@ (8011a14 <tcpip_timeouts_mbox_fetch+0x68>)
 80119fc:	f00a fb38 	bl	801c070 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a06:	d102      	bne.n	8011a0e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011a08:	f007 fa6a 	bl	8018ee0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011a0c:	e7d3      	b.n	80119b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	20024418 	.word	0x20024418

08011a18 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011a20:	4810      	ldr	r0, [pc, #64]	@ (8011a64 <tcpip_thread+0x4c>)
 8011a22:	f00a fb25 	bl	801c070 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011a26:	4b10      	ldr	r3, [pc, #64]	@ (8011a68 <tcpip_thread+0x50>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d005      	beq.n	8011a3a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a68 <tcpip_thread+0x50>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4a0e      	ldr	r2, [pc, #56]	@ (8011a6c <tcpip_thread+0x54>)
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	4610      	mov	r0, r2
 8011a38:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a3a:	f107 030c 	add.w	r3, r7, #12
 8011a3e:	4619      	mov	r1, r3
 8011a40:	480b      	ldr	r0, [pc, #44]	@ (8011a70 <tcpip_thread+0x58>)
 8011a42:	f7ff ffb3 	bl	80119ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d106      	bne.n	8011a5a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011a4c:	4b09      	ldr	r3, [pc, #36]	@ (8011a74 <tcpip_thread+0x5c>)
 8011a4e:	2291      	movs	r2, #145	@ 0x91
 8011a50:	4909      	ldr	r1, [pc, #36]	@ (8011a78 <tcpip_thread+0x60>)
 8011a52:	480a      	ldr	r0, [pc, #40]	@ (8011a7c <tcpip_thread+0x64>)
 8011a54:	f00b fd24 	bl	801d4a0 <iprintf>
      continue;
 8011a58:	e003      	b.n	8011a62 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f000 f80f 	bl	8011a80 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a62:	e7ea      	b.n	8011a3a <tcpip_thread+0x22>
 8011a64:	20024418 	.word	0x20024418
 8011a68:	2002440c 	.word	0x2002440c
 8011a6c:	20024410 	.word	0x20024410
 8011a70:	20024414 	.word	0x20024414
 8011a74:	0801e6a0 	.word	0x0801e6a0
 8011a78:	0801e6d0 	.word	0x0801e6d0
 8011a7c:	0801e6f0 	.word	0x0801e6f0

08011a80 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d026      	beq.n	8011ade <tcpip_thread_handle_msg+0x5e>
 8011a90:	2b02      	cmp	r3, #2
 8011a92:	dc2b      	bgt.n	8011aec <tcpip_thread_handle_msg+0x6c>
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <tcpip_thread_handle_msg+0x1e>
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d015      	beq.n	8011ac8 <tcpip_thread_handle_msg+0x48>
 8011a9c:	e026      	b.n	8011aec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	6850      	ldr	r0, [r2, #4]
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	6892      	ldr	r2, [r2, #8]
 8011aaa:	4611      	mov	r1, r2
 8011aac:	4798      	blx	r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f001 fd07 	bl	80134cc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	2009      	movs	r0, #9
 8011ac2:	f000 fe5f 	bl	8012784 <memp_free>
      break;
 8011ac6:	e018      	b.n	8011afa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	6892      	ldr	r2, [r2, #8]
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011ad4:	6879      	ldr	r1, [r7, #4]
 8011ad6:	2008      	movs	r0, #8
 8011ad8:	f000 fe54 	bl	8012784 <memp_free>
      break;
 8011adc:	e00d      	b.n	8011afa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	6892      	ldr	r2, [r2, #8]
 8011ae6:	4610      	mov	r0, r2
 8011ae8:	4798      	blx	r3
      break;
 8011aea:	e006      	b.n	8011afa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011aec:	4b05      	ldr	r3, [pc, #20]	@ (8011b04 <tcpip_thread_handle_msg+0x84>)
 8011aee:	22cf      	movs	r2, #207	@ 0xcf
 8011af0:	4905      	ldr	r1, [pc, #20]	@ (8011b08 <tcpip_thread_handle_msg+0x88>)
 8011af2:	4806      	ldr	r0, [pc, #24]	@ (8011b0c <tcpip_thread_handle_msg+0x8c>)
 8011af4:	f00b fcd4 	bl	801d4a0 <iprintf>
      break;
 8011af8:	bf00      	nop
  }
}
 8011afa:	bf00      	nop
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	0801e6a0 	.word	0x0801e6a0
 8011b08:	0801e6d0 	.word	0x0801e6d0
 8011b0c:	0801e6f0 	.word	0x0801e6f0

08011b10 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011b1c:	481a      	ldr	r0, [pc, #104]	@ (8011b88 <tcpip_inpkt+0x78>)
 8011b1e:	f00a fa74 	bl	801c00a <sys_mbox_valid>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d105      	bne.n	8011b34 <tcpip_inpkt+0x24>
 8011b28:	4b18      	ldr	r3, [pc, #96]	@ (8011b8c <tcpip_inpkt+0x7c>)
 8011b2a:	22fc      	movs	r2, #252	@ 0xfc
 8011b2c:	4918      	ldr	r1, [pc, #96]	@ (8011b90 <tcpip_inpkt+0x80>)
 8011b2e:	4819      	ldr	r0, [pc, #100]	@ (8011b94 <tcpip_inpkt+0x84>)
 8011b30:	f00b fcb6 	bl	801d4a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011b34:	2009      	movs	r0, #9
 8011b36:	f000 fdaf 	bl	8012698 <memp_malloc>
 8011b3a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d102      	bne.n	8011b48 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011b42:	f04f 33ff 	mov.w	r3, #4294967295
 8011b46:	e01a      	b.n	8011b7e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011b60:	6979      	ldr	r1, [r7, #20]
 8011b62:	4809      	ldr	r0, [pc, #36]	@ (8011b88 <tcpip_inpkt+0x78>)
 8011b64:	f00a fa06 	bl	801bf74 <sys_mbox_trypost>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d006      	beq.n	8011b7c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011b6e:	6979      	ldr	r1, [r7, #20]
 8011b70:	2009      	movs	r0, #9
 8011b72:	f000 fe07 	bl	8012784 <memp_free>
    return ERR_MEM;
 8011b76:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7a:	e000      	b.n	8011b7e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011b7c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	20024414 	.word	0x20024414
 8011b8c:	0801e6a0 	.word	0x0801e6a0
 8011b90:	0801e718 	.word	0x0801e718
 8011b94:	0801e6f0 	.word	0x0801e6f0

08011b98 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ba8:	f003 0318 	and.w	r3, r3, #24
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d006      	beq.n	8011bbe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011bb0:	4a08      	ldr	r2, [pc, #32]	@ (8011bd4 <tcpip_input+0x3c>)
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff ffab 	bl	8011b10 <tcpip_inpkt>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	e005      	b.n	8011bca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011bbe:	4a06      	ldr	r2, [pc, #24]	@ (8011bd8 <tcpip_input+0x40>)
 8011bc0:	6839      	ldr	r1, [r7, #0]
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff ffa4 	bl	8011b10 <tcpip_inpkt>
 8011bc8:	4603      	mov	r3, r0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	0801bd95 	.word	0x0801bd95
 8011bd8:	0801ab7d 	.word	0x0801ab7d

08011bdc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011be6:	4819      	ldr	r0, [pc, #100]	@ (8011c4c <tcpip_try_callback+0x70>)
 8011be8:	f00a fa0f 	bl	801c00a <sys_mbox_valid>
 8011bec:	4603      	mov	r3, r0
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d106      	bne.n	8011c00 <tcpip_try_callback+0x24>
 8011bf2:	4b17      	ldr	r3, [pc, #92]	@ (8011c50 <tcpip_try_callback+0x74>)
 8011bf4:	f240 125d 	movw	r2, #349	@ 0x15d
 8011bf8:	4916      	ldr	r1, [pc, #88]	@ (8011c54 <tcpip_try_callback+0x78>)
 8011bfa:	4817      	ldr	r0, [pc, #92]	@ (8011c58 <tcpip_try_callback+0x7c>)
 8011bfc:	f00b fc50 	bl	801d4a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011c00:	2008      	movs	r0, #8
 8011c02:	f000 fd49 	bl	8012698 <memp_malloc>
 8011c06:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d102      	bne.n	8011c14 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c12:	e017      	b.n	8011c44 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2201      	movs	r2, #1
 8011c18:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	683a      	ldr	r2, [r7, #0]
 8011c24:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011c26:	68f9      	ldr	r1, [r7, #12]
 8011c28:	4808      	ldr	r0, [pc, #32]	@ (8011c4c <tcpip_try_callback+0x70>)
 8011c2a:	f00a f9a3 	bl	801bf74 <sys_mbox_trypost>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d006      	beq.n	8011c42 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011c34:	68f9      	ldr	r1, [r7, #12]
 8011c36:	2008      	movs	r0, #8
 8011c38:	f000 fda4 	bl	8012784 <memp_free>
    return ERR_MEM;
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c40:	e000      	b.n	8011c44 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3710      	adds	r7, #16
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	20024414 	.word	0x20024414
 8011c50:	0801e6a0 	.word	0x0801e6a0
 8011c54:	0801e718 	.word	0x0801e718
 8011c58:	0801e6f0 	.word	0x0801e6f0

08011c5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af02      	add	r7, sp, #8
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011c66:	f000 f872 	bl	8011d4e <lwip_init>

  tcpip_init_done = initfunc;
 8011c6a:	4a17      	ldr	r2, [pc, #92]	@ (8011cc8 <tcpip_init+0x6c>)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011c70:	4a16      	ldr	r2, [pc, #88]	@ (8011ccc <tcpip_init+0x70>)
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011c76:	2106      	movs	r1, #6
 8011c78:	4815      	ldr	r0, [pc, #84]	@ (8011cd0 <tcpip_init+0x74>)
 8011c7a:	f00a f961 	bl	801bf40 <sys_mbox_new>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d006      	beq.n	8011c92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011c84:	4b13      	ldr	r3, [pc, #76]	@ (8011cd4 <tcpip_init+0x78>)
 8011c86:	f240 2261 	movw	r2, #609	@ 0x261
 8011c8a:	4913      	ldr	r1, [pc, #76]	@ (8011cd8 <tcpip_init+0x7c>)
 8011c8c:	4813      	ldr	r0, [pc, #76]	@ (8011cdc <tcpip_init+0x80>)
 8011c8e:	f00b fc07 	bl	801d4a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011c92:	4813      	ldr	r0, [pc, #76]	@ (8011ce0 <tcpip_init+0x84>)
 8011c94:	f00a f9d6 	bl	801c044 <sys_mutex_new>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d006      	beq.n	8011cac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8011cd4 <tcpip_init+0x78>)
 8011ca0:	f240 2265 	movw	r2, #613	@ 0x265
 8011ca4:	490f      	ldr	r1, [pc, #60]	@ (8011ce4 <tcpip_init+0x88>)
 8011ca6:	480d      	ldr	r0, [pc, #52]	@ (8011cdc <tcpip_init+0x80>)
 8011ca8:	f00b fbfa 	bl	801d4a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011cac:	2318      	movs	r3, #24
 8011cae:	9300      	str	r3, [sp, #0]
 8011cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	490c      	ldr	r1, [pc, #48]	@ (8011ce8 <tcpip_init+0x8c>)
 8011cb8:	480c      	ldr	r0, [pc, #48]	@ (8011cec <tcpip_init+0x90>)
 8011cba:	f00a f9f5 	bl	801c0a8 <sys_thread_new>
}
 8011cbe:	bf00      	nop
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	2002440c 	.word	0x2002440c
 8011ccc:	20024410 	.word	0x20024410
 8011cd0:	20024414 	.word	0x20024414
 8011cd4:	0801e6a0 	.word	0x0801e6a0
 8011cd8:	0801e728 	.word	0x0801e728
 8011cdc:	0801e6f0 	.word	0x0801e6f0
 8011ce0:	20024418 	.word	0x20024418
 8011ce4:	0801e74c 	.word	0x0801e74c
 8011ce8:	08011a19 	.word	0x08011a19
 8011cec:	0801e770 	.word	0x0801e770

08011cf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cfe:	021b      	lsls	r3, r3, #8
 8011d00:	b21a      	sxth	r2, r3
 8011d02:	88fb      	ldrh	r3, [r7, #6]
 8011d04:	0a1b      	lsrs	r3, r3, #8
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	b21b      	sxth	r3, r3
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	b21b      	sxth	r3, r3
 8011d0e:	b29b      	uxth	r3, r3
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	061a      	lsls	r2, r3, #24
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	021b      	lsls	r3, r3, #8
 8011d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011d30:	431a      	orrs	r2, r3
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	0a1b      	lsrs	r3, r3, #8
 8011d36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	0e1b      	lsrs	r3, r3, #24
 8011d40:	4313      	orrs	r3, r2
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b082      	sub	sp, #8
 8011d52:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011d54:	2300      	movs	r3, #0
 8011d56:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011d58:	f00a f968 	bl	801c02c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011d5c:	f000 f8d4 	bl	8011f08 <mem_init>
  memp_init();
 8011d60:	f000 fc2c 	bl	80125bc <memp_init>
  pbuf_init();
  netif_init();
 8011d64:	f000 fd38 	bl	80127d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011d68:	f007 f92c 	bl	8018fc4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011d6c:	f001 fe58 	bl	8013a20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011d70:	f007 f86e 	bl	8018e50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011d74:	bf00      	nop
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	4603      	mov	r3, r0
 8011d84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011d86:	4b05      	ldr	r3, [pc, #20]	@ (8011d9c <ptr_to_mem+0x20>)
 8011d88:	681a      	ldr	r2, [r3, #0]
 8011d8a:	88fb      	ldrh	r3, [r7, #6]
 8011d8c:	4413      	add	r3, r2
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr
 8011d9a:	bf00      	nop
 8011d9c:	20024434 	.word	0x20024434

08011da0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011da8:	4b05      	ldr	r3, [pc, #20]	@ (8011dc0 <mem_to_ptr+0x20>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	b29b      	uxth	r3, r3
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	20024434 	.word	0x20024434

08011dc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011dc4:	b590      	push	{r4, r7, lr}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011dcc:	4b45      	ldr	r3, [pc, #276]	@ (8011ee4 <plug_holes+0x120>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d206      	bcs.n	8011de4 <plug_holes+0x20>
 8011dd6:	4b44      	ldr	r3, [pc, #272]	@ (8011ee8 <plug_holes+0x124>)
 8011dd8:	f240 12df 	movw	r2, #479	@ 0x1df
 8011ddc:	4943      	ldr	r1, [pc, #268]	@ (8011eec <plug_holes+0x128>)
 8011dde:	4844      	ldr	r0, [pc, #272]	@ (8011ef0 <plug_holes+0x12c>)
 8011de0:	f00b fb5e 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011de4:	4b43      	ldr	r3, [pc, #268]	@ (8011ef4 <plug_holes+0x130>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d306      	bcc.n	8011dfc <plug_holes+0x38>
 8011dee:	4b3e      	ldr	r3, [pc, #248]	@ (8011ee8 <plug_holes+0x124>)
 8011df0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011df4:	4940      	ldr	r1, [pc, #256]	@ (8011ef8 <plug_holes+0x134>)
 8011df6:	483e      	ldr	r0, [pc, #248]	@ (8011ef0 <plug_holes+0x12c>)
 8011df8:	f00b fb52 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	791b      	ldrb	r3, [r3, #4]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d006      	beq.n	8011e12 <plug_holes+0x4e>
 8011e04:	4b38      	ldr	r3, [pc, #224]	@ (8011ee8 <plug_holes+0x124>)
 8011e06:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8011e0a:	493c      	ldr	r1, [pc, #240]	@ (8011efc <plug_holes+0x138>)
 8011e0c:	4838      	ldr	r0, [pc, #224]	@ (8011ef0 <plug_holes+0x12c>)
 8011e0e:	f00b fb47 	bl	801d4a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011e1a:	d906      	bls.n	8011e2a <plug_holes+0x66>
 8011e1c:	4b32      	ldr	r3, [pc, #200]	@ (8011ee8 <plug_holes+0x124>)
 8011e1e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011e22:	4937      	ldr	r1, [pc, #220]	@ (8011f00 <plug_holes+0x13c>)
 8011e24:	4832      	ldr	r0, [pc, #200]	@ (8011ef0 <plug_holes+0x12c>)
 8011e26:	f00b fb3b 	bl	801d4a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff ffa4 	bl	8011d7c <ptr_to_mem>
 8011e34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d024      	beq.n	8011e88 <plug_holes+0xc4>
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	791b      	ldrb	r3, [r3, #4]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d120      	bne.n	8011e88 <plug_holes+0xc4>
 8011e46:	4b2b      	ldr	r3, [pc, #172]	@ (8011ef4 <plug_holes+0x130>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	68fa      	ldr	r2, [r7, #12]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d01b      	beq.n	8011e88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011e50:	4b2c      	ldr	r3, [pc, #176]	@ (8011f04 <plug_holes+0x140>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d102      	bne.n	8011e60 <plug_holes+0x9c>
      lfree = mem;
 8011e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8011f04 <plug_holes+0x140>)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	881a      	ldrh	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011e70:	d00a      	beq.n	8011e88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7ff ff80 	bl	8011d7c <ptr_to_mem>
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ff ff8e 	bl	8011da0 <mem_to_ptr>
 8011e84:	4603      	mov	r3, r0
 8011e86:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	885b      	ldrh	r3, [r3, #2]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff ff75 	bl	8011d7c <ptr_to_mem>
 8011e92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d01f      	beq.n	8011edc <plug_holes+0x118>
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	791b      	ldrb	r3, [r3, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d11b      	bne.n	8011edc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011ea4:	4b17      	ldr	r3, [pc, #92]	@ (8011f04 <plug_holes+0x140>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d102      	bne.n	8011eb4 <plug_holes+0xf0>
      lfree = pmem;
 8011eae:	4a15      	ldr	r2, [pc, #84]	@ (8011f04 <plug_holes+0x140>)
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	881a      	ldrh	r2, [r3, #0]
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	881b      	ldrh	r3, [r3, #0]
 8011ec0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011ec4:	d00a      	beq.n	8011edc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	881b      	ldrh	r3, [r3, #0]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ff ff56 	bl	8011d7c <ptr_to_mem>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	68b8      	ldr	r0, [r7, #8]
 8011ed4:	f7ff ff64 	bl	8011da0 <mem_to_ptr>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011edc:	bf00      	nop
 8011ede:	3714      	adds	r7, #20
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd90      	pop	{r4, r7, pc}
 8011ee4:	20024434 	.word	0x20024434
 8011ee8:	0801e780 	.word	0x0801e780
 8011eec:	0801e7b0 	.word	0x0801e7b0
 8011ef0:	0801e7c8 	.word	0x0801e7c8
 8011ef4:	20024438 	.word	0x20024438
 8011ef8:	0801e7f0 	.word	0x0801e7f0
 8011efc:	0801e80c 	.word	0x0801e80c
 8011f00:	0801e828 	.word	0x0801e828
 8011f04:	20024440 	.word	0x20024440

08011f08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8011f84 <mem_init+0x7c>)
 8011f10:	4a1d      	ldr	r2, [pc, #116]	@ (8011f88 <mem_init+0x80>)
 8011f12:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011f14:	4b1b      	ldr	r3, [pc, #108]	@ (8011f84 <mem_init+0x7c>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8011f20:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011f2e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8011f32:	f7ff ff23 	bl	8011d7c <ptr_to_mem>
 8011f36:	4603      	mov	r3, r0
 8011f38:	4a14      	ldr	r2, [pc, #80]	@ (8011f8c <mem_init+0x84>)
 8011f3a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011f3c:	4b13      	ldr	r3, [pc, #76]	@ (8011f8c <mem_init+0x84>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2201      	movs	r2, #1
 8011f42:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011f44:	4b11      	ldr	r3, [pc, #68]	@ (8011f8c <mem_init+0x84>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8011f4c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8011f8c <mem_init+0x84>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8011f56:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011f58:	4b0a      	ldr	r3, [pc, #40]	@ (8011f84 <mem_init+0x7c>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f90 <mem_init+0x88>)
 8011f5e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011f60:	480c      	ldr	r0, [pc, #48]	@ (8011f94 <mem_init+0x8c>)
 8011f62:	f00a f86f 	bl	801c044 <sys_mutex_new>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d006      	beq.n	8011f7a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f98 <mem_init+0x90>)
 8011f6e:	f240 221f 	movw	r2, #543	@ 0x21f
 8011f72:	490a      	ldr	r1, [pc, #40]	@ (8011f9c <mem_init+0x94>)
 8011f74:	480a      	ldr	r0, [pc, #40]	@ (8011fa0 <mem_init+0x98>)
 8011f76:	f00b fa93 	bl	801d4a0 <iprintf>
  }
}
 8011f7a:	bf00      	nop
 8011f7c:	3708      	adds	r7, #8
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20024434 	.word	0x20024434
 8011f88:	20048000 	.word	0x20048000
 8011f8c:	20024438 	.word	0x20024438
 8011f90:	20024440 	.word	0x20024440
 8011f94:	2002443c 	.word	0x2002443c
 8011f98:	0801e780 	.word	0x0801e780
 8011f9c:	0801e854 	.word	0x0801e854
 8011fa0:	0801e7c8 	.word	0x0801e7c8

08011fa4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b086      	sub	sp, #24
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff fef7 	bl	8011da0 <mem_to_ptr>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff fede 	bl	8011d7c <ptr_to_mem>
 8011fc0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	885b      	ldrh	r3, [r3, #2]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7ff fed8 	bl	8011d7c <ptr_to_mem>
 8011fcc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011fd6:	d818      	bhi.n	801200a <mem_link_valid+0x66>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	885b      	ldrh	r3, [r3, #2]
 8011fdc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011fe0:	d813      	bhi.n	801200a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011fe6:	8afa      	ldrh	r2, [r7, #22]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d004      	beq.n	8011ff6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	8afa      	ldrh	r2, [r7, #22]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d109      	bne.n	801200a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011ff6:	4b08      	ldr	r3, [pc, #32]	@ (8012018 <mem_link_valid+0x74>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d006      	beq.n	801200e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	885b      	ldrh	r3, [r3, #2]
 8012004:	8afa      	ldrh	r2, [r7, #22]
 8012006:	429a      	cmp	r2, r3
 8012008:	d001      	beq.n	801200e <mem_link_valid+0x6a>
    return 0;
 801200a:	2300      	movs	r3, #0
 801200c:	e000      	b.n	8012010 <mem_link_valid+0x6c>
  }
  return 1;
 801200e:	2301      	movs	r3, #1
}
 8012010:	4618      	mov	r0, r3
 8012012:	3718      	adds	r7, #24
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	20024438 	.word	0x20024438

0801201c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b088      	sub	sp, #32
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d070      	beq.n	801210c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f003 0303 	and.w	r3, r3, #3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00d      	beq.n	8012050 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012034:	4b37      	ldr	r3, [pc, #220]	@ (8012114 <mem_free+0xf8>)
 8012036:	f240 2273 	movw	r2, #627	@ 0x273
 801203a:	4937      	ldr	r1, [pc, #220]	@ (8012118 <mem_free+0xfc>)
 801203c:	4837      	ldr	r0, [pc, #220]	@ (801211c <mem_free+0x100>)
 801203e:	f00b fa2f 	bl	801d4a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012042:	f00a f851 	bl	801c0e8 <sys_arch_protect>
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	f00a f85b 	bl	801c104 <sys_arch_unprotect>
    return;
 801204e:	e05e      	b.n	801210e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	3b08      	subs	r3, #8
 8012054:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012056:	4b32      	ldr	r3, [pc, #200]	@ (8012120 <mem_free+0x104>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	69fa      	ldr	r2, [r7, #28]
 801205c:	429a      	cmp	r2, r3
 801205e:	d306      	bcc.n	801206e <mem_free+0x52>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f103 020c 	add.w	r2, r3, #12
 8012066:	4b2f      	ldr	r3, [pc, #188]	@ (8012124 <mem_free+0x108>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	429a      	cmp	r2, r3
 801206c:	d90d      	bls.n	801208a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801206e:	4b29      	ldr	r3, [pc, #164]	@ (8012114 <mem_free+0xf8>)
 8012070:	f240 227f 	movw	r2, #639	@ 0x27f
 8012074:	492c      	ldr	r1, [pc, #176]	@ (8012128 <mem_free+0x10c>)
 8012076:	4829      	ldr	r0, [pc, #164]	@ (801211c <mem_free+0x100>)
 8012078:	f00b fa12 	bl	801d4a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801207c:	f00a f834 	bl	801c0e8 <sys_arch_protect>
 8012080:	6138      	str	r0, [r7, #16]
 8012082:	6938      	ldr	r0, [r7, #16]
 8012084:	f00a f83e 	bl	801c104 <sys_arch_unprotect>
    return;
 8012088:	e041      	b.n	801210e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801208a:	4828      	ldr	r0, [pc, #160]	@ (801212c <mem_free+0x110>)
 801208c:	f009 fff0 	bl	801c070 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	791b      	ldrb	r3, [r3, #4]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d110      	bne.n	80120ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012098:	4b1e      	ldr	r3, [pc, #120]	@ (8012114 <mem_free+0xf8>)
 801209a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801209e:	4924      	ldr	r1, [pc, #144]	@ (8012130 <mem_free+0x114>)
 80120a0:	481e      	ldr	r0, [pc, #120]	@ (801211c <mem_free+0x100>)
 80120a2:	f00b f9fd 	bl	801d4a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80120a6:	4821      	ldr	r0, [pc, #132]	@ (801212c <mem_free+0x110>)
 80120a8:	f009 fff1 	bl	801c08e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120ac:	f00a f81c 	bl	801c0e8 <sys_arch_protect>
 80120b0:	6178      	str	r0, [r7, #20]
 80120b2:	6978      	ldr	r0, [r7, #20]
 80120b4:	f00a f826 	bl	801c104 <sys_arch_unprotect>
    return;
 80120b8:	e029      	b.n	801210e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80120ba:	69f8      	ldr	r0, [r7, #28]
 80120bc:	f7ff ff72 	bl	8011fa4 <mem_link_valid>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d110      	bne.n	80120e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80120c6:	4b13      	ldr	r3, [pc, #76]	@ (8012114 <mem_free+0xf8>)
 80120c8:	f240 2295 	movw	r2, #661	@ 0x295
 80120cc:	4919      	ldr	r1, [pc, #100]	@ (8012134 <mem_free+0x118>)
 80120ce:	4813      	ldr	r0, [pc, #76]	@ (801211c <mem_free+0x100>)
 80120d0:	f00b f9e6 	bl	801d4a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80120d4:	4815      	ldr	r0, [pc, #84]	@ (801212c <mem_free+0x110>)
 80120d6:	f009 ffda 	bl	801c08e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120da:	f00a f805 	bl	801c0e8 <sys_arch_protect>
 80120de:	61b8      	str	r0, [r7, #24]
 80120e0:	69b8      	ldr	r0, [r7, #24]
 80120e2:	f00a f80f 	bl	801c104 <sys_arch_unprotect>
    return;
 80120e6:	e012      	b.n	801210e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	2200      	movs	r2, #0
 80120ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80120ee:	4b12      	ldr	r3, [pc, #72]	@ (8012138 <mem_free+0x11c>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	69fa      	ldr	r2, [r7, #28]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d202      	bcs.n	80120fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80120f8:	4a0f      	ldr	r2, [pc, #60]	@ (8012138 <mem_free+0x11c>)
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80120fe:	69f8      	ldr	r0, [r7, #28]
 8012100:	f7ff fe60 	bl	8011dc4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012104:	4809      	ldr	r0, [pc, #36]	@ (801212c <mem_free+0x110>)
 8012106:	f009 ffc2 	bl	801c08e <sys_mutex_unlock>
 801210a:	e000      	b.n	801210e <mem_free+0xf2>
    return;
 801210c:	bf00      	nop
}
 801210e:	3720      	adds	r7, #32
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	0801e780 	.word	0x0801e780
 8012118:	0801e870 	.word	0x0801e870
 801211c:	0801e7c8 	.word	0x0801e7c8
 8012120:	20024434 	.word	0x20024434
 8012124:	20024438 	.word	0x20024438
 8012128:	0801e894 	.word	0x0801e894
 801212c:	2002443c 	.word	0x2002443c
 8012130:	0801e8b0 	.word	0x0801e8b0
 8012134:	0801e8d8 	.word	0x0801e8d8
 8012138:	20024440 	.word	0x20024440

0801213c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b088      	sub	sp, #32
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	460b      	mov	r3, r1
 8012146:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012148:	887b      	ldrh	r3, [r7, #2]
 801214a:	3303      	adds	r3, #3
 801214c:	b29b      	uxth	r3, r3
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012154:	8bfb      	ldrh	r3, [r7, #30]
 8012156:	2b0b      	cmp	r3, #11
 8012158:	d801      	bhi.n	801215e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801215a:	230c      	movs	r3, #12
 801215c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801215e:	8bfb      	ldrh	r3, [r7, #30]
 8012160:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012164:	d803      	bhi.n	801216e <mem_trim+0x32>
 8012166:	8bfa      	ldrh	r2, [r7, #30]
 8012168:	887b      	ldrh	r3, [r7, #2]
 801216a:	429a      	cmp	r2, r3
 801216c:	d201      	bcs.n	8012172 <mem_trim+0x36>
    return NULL;
 801216e:	2300      	movs	r3, #0
 8012170:	e0d8      	b.n	8012324 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012172:	4b6e      	ldr	r3, [pc, #440]	@ (801232c <mem_trim+0x1f0>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	429a      	cmp	r2, r3
 801217a:	d304      	bcc.n	8012186 <mem_trim+0x4a>
 801217c:	4b6c      	ldr	r3, [pc, #432]	@ (8012330 <mem_trim+0x1f4>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d306      	bcc.n	8012194 <mem_trim+0x58>
 8012186:	4b6b      	ldr	r3, [pc, #428]	@ (8012334 <mem_trim+0x1f8>)
 8012188:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801218c:	496a      	ldr	r1, [pc, #424]	@ (8012338 <mem_trim+0x1fc>)
 801218e:	486b      	ldr	r0, [pc, #428]	@ (801233c <mem_trim+0x200>)
 8012190:	f00b f986 	bl	801d4a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012194:	4b65      	ldr	r3, [pc, #404]	@ (801232c <mem_trim+0x1f0>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	429a      	cmp	r2, r3
 801219c:	d304      	bcc.n	80121a8 <mem_trim+0x6c>
 801219e:	4b64      	ldr	r3, [pc, #400]	@ (8012330 <mem_trim+0x1f4>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d307      	bcc.n	80121b8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80121a8:	f009 ff9e 	bl	801c0e8 <sys_arch_protect>
 80121ac:	60b8      	str	r0, [r7, #8]
 80121ae:	68b8      	ldr	r0, [r7, #8]
 80121b0:	f009 ffa8 	bl	801c104 <sys_arch_unprotect>
    return rmem;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	e0b5      	b.n	8012324 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3b08      	subs	r3, #8
 80121bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80121be:	69b8      	ldr	r0, [r7, #24]
 80121c0:	f7ff fdee 	bl	8011da0 <mem_to_ptr>
 80121c4:	4603      	mov	r3, r0
 80121c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	881a      	ldrh	r2, [r3, #0]
 80121cc:	8afb      	ldrh	r3, [r7, #22]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	3b08      	subs	r3, #8
 80121d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80121d6:	8bfa      	ldrh	r2, [r7, #30]
 80121d8:	8abb      	ldrh	r3, [r7, #20]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d906      	bls.n	80121ec <mem_trim+0xb0>
 80121de:	4b55      	ldr	r3, [pc, #340]	@ (8012334 <mem_trim+0x1f8>)
 80121e0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80121e4:	4956      	ldr	r1, [pc, #344]	@ (8012340 <mem_trim+0x204>)
 80121e6:	4855      	ldr	r0, [pc, #340]	@ (801233c <mem_trim+0x200>)
 80121e8:	f00b f95a 	bl	801d4a0 <iprintf>
  if (newsize > size) {
 80121ec:	8bfa      	ldrh	r2, [r7, #30]
 80121ee:	8abb      	ldrh	r3, [r7, #20]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d901      	bls.n	80121f8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80121f4:	2300      	movs	r3, #0
 80121f6:	e095      	b.n	8012324 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80121f8:	8bfa      	ldrh	r2, [r7, #30]
 80121fa:	8abb      	ldrh	r3, [r7, #20]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d101      	bne.n	8012204 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	e08f      	b.n	8012324 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012204:	484f      	ldr	r0, [pc, #316]	@ (8012344 <mem_trim+0x208>)
 8012206:	f009 ff33 	bl	801c070 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	4618      	mov	r0, r3
 8012210:	f7ff fdb4 	bl	8011d7c <ptr_to_mem>
 8012214:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	791b      	ldrb	r3, [r3, #4]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d13f      	bne.n	801229e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012226:	d106      	bne.n	8012236 <mem_trim+0xfa>
 8012228:	4b42      	ldr	r3, [pc, #264]	@ (8012334 <mem_trim+0x1f8>)
 801222a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801222e:	4946      	ldr	r1, [pc, #280]	@ (8012348 <mem_trim+0x20c>)
 8012230:	4842      	ldr	r0, [pc, #264]	@ (801233c <mem_trim+0x200>)
 8012232:	f00b f935 	bl	801d4a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801223c:	8afa      	ldrh	r2, [r7, #22]
 801223e:	8bfb      	ldrh	r3, [r7, #30]
 8012240:	4413      	add	r3, r2
 8012242:	b29b      	uxth	r3, r3
 8012244:	3308      	adds	r3, #8
 8012246:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012248:	4b40      	ldr	r3, [pc, #256]	@ (801234c <mem_trim+0x210>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	693a      	ldr	r2, [r7, #16]
 801224e:	429a      	cmp	r2, r3
 8012250:	d106      	bne.n	8012260 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012252:	89fb      	ldrh	r3, [r7, #14]
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fd91 	bl	8011d7c <ptr_to_mem>
 801225a:	4603      	mov	r3, r0
 801225c:	4a3b      	ldr	r2, [pc, #236]	@ (801234c <mem_trim+0x210>)
 801225e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012260:	89fb      	ldrh	r3, [r7, #14]
 8012262:	4618      	mov	r0, r3
 8012264:	f7ff fd8a 	bl	8011d7c <ptr_to_mem>
 8012268:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	2200      	movs	r2, #0
 801226e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	89ba      	ldrh	r2, [r7, #12]
 8012274:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	8afa      	ldrh	r2, [r7, #22]
 801227a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	89fa      	ldrh	r2, [r7, #14]
 8012280:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	881b      	ldrh	r3, [r3, #0]
 8012286:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801228a:	d047      	beq.n	801231c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	881b      	ldrh	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f7ff fd73 	bl	8011d7c <ptr_to_mem>
 8012296:	4602      	mov	r2, r0
 8012298:	89fb      	ldrh	r3, [r7, #14]
 801229a:	8053      	strh	r3, [r2, #2]
 801229c:	e03e      	b.n	801231c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801229e:	8bfb      	ldrh	r3, [r7, #30]
 80122a0:	f103 0214 	add.w	r2, r3, #20
 80122a4:	8abb      	ldrh	r3, [r7, #20]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d838      	bhi.n	801231c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80122aa:	8afa      	ldrh	r2, [r7, #22]
 80122ac:	8bfb      	ldrh	r3, [r7, #30]
 80122ae:	4413      	add	r3, r2
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	3308      	adds	r3, #8
 80122b4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80122be:	d106      	bne.n	80122ce <mem_trim+0x192>
 80122c0:	4b1c      	ldr	r3, [pc, #112]	@ (8012334 <mem_trim+0x1f8>)
 80122c2:	f240 3216 	movw	r2, #790	@ 0x316
 80122c6:	4920      	ldr	r1, [pc, #128]	@ (8012348 <mem_trim+0x20c>)
 80122c8:	481c      	ldr	r0, [pc, #112]	@ (801233c <mem_trim+0x200>)
 80122ca:	f00b f8e9 	bl	801d4a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80122ce:	89fb      	ldrh	r3, [r7, #14]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7ff fd53 	bl	8011d7c <ptr_to_mem>
 80122d6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80122d8:	4b1c      	ldr	r3, [pc, #112]	@ (801234c <mem_trim+0x210>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	693a      	ldr	r2, [r7, #16]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d202      	bcs.n	80122e8 <mem_trim+0x1ac>
      lfree = mem2;
 80122e2:	4a1a      	ldr	r2, [pc, #104]	@ (801234c <mem_trim+0x210>)
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2200      	movs	r2, #0
 80122ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	881a      	ldrh	r2, [r3, #0]
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	8afa      	ldrh	r2, [r7, #22]
 80122fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	89fa      	ldrh	r2, [r7, #14]
 8012300:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801230a:	d007      	beq.n	801231c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff fd33 	bl	8011d7c <ptr_to_mem>
 8012316:	4602      	mov	r2, r0
 8012318:	89fb      	ldrh	r3, [r7, #14]
 801231a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801231c:	4809      	ldr	r0, [pc, #36]	@ (8012344 <mem_trim+0x208>)
 801231e:	f009 feb6 	bl	801c08e <sys_mutex_unlock>
  return rmem;
 8012322:	687b      	ldr	r3, [r7, #4]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20024434 	.word	0x20024434
 8012330:	20024438 	.word	0x20024438
 8012334:	0801e780 	.word	0x0801e780
 8012338:	0801e90c 	.word	0x0801e90c
 801233c:	0801e7c8 	.word	0x0801e7c8
 8012340:	0801e924 	.word	0x0801e924
 8012344:	2002443c 	.word	0x2002443c
 8012348:	0801e944 	.word	0x0801e944
 801234c:	20024440 	.word	0x20024440

08012350 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b088      	sub	sp, #32
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801235a:	88fb      	ldrh	r3, [r7, #6]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d101      	bne.n	8012364 <mem_malloc+0x14>
    return NULL;
 8012360:	2300      	movs	r3, #0
 8012362:	e0e2      	b.n	801252a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012364:	88fb      	ldrh	r3, [r7, #6]
 8012366:	3303      	adds	r3, #3
 8012368:	b29b      	uxth	r3, r3
 801236a:	f023 0303 	bic.w	r3, r3, #3
 801236e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012370:	8bbb      	ldrh	r3, [r7, #28]
 8012372:	2b0b      	cmp	r3, #11
 8012374:	d801      	bhi.n	801237a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012376:	230c      	movs	r3, #12
 8012378:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801237a:	8bbb      	ldrh	r3, [r7, #28]
 801237c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012380:	d803      	bhi.n	801238a <mem_malloc+0x3a>
 8012382:	8bba      	ldrh	r2, [r7, #28]
 8012384:	88fb      	ldrh	r3, [r7, #6]
 8012386:	429a      	cmp	r2, r3
 8012388:	d201      	bcs.n	801238e <mem_malloc+0x3e>
    return NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	e0cd      	b.n	801252a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801238e:	4869      	ldr	r0, [pc, #420]	@ (8012534 <mem_malloc+0x1e4>)
 8012390:	f009 fe6e 	bl	801c070 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012394:	4b68      	ldr	r3, [pc, #416]	@ (8012538 <mem_malloc+0x1e8>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4618      	mov	r0, r3
 801239a:	f7ff fd01 	bl	8011da0 <mem_to_ptr>
 801239e:	4603      	mov	r3, r0
 80123a0:	83fb      	strh	r3, [r7, #30]
 80123a2:	e0b7      	b.n	8012514 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80123a4:	8bfb      	ldrh	r3, [r7, #30]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7ff fce8 	bl	8011d7c <ptr_to_mem>
 80123ac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	791b      	ldrb	r3, [r3, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f040 80a7 	bne.w	8012506 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	461a      	mov	r2, r3
 80123be:	8bfb      	ldrh	r3, [r7, #30]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	f1a3 0208 	sub.w	r2, r3, #8
 80123c6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80123c8:	429a      	cmp	r2, r3
 80123ca:	f0c0 809c 	bcc.w	8012506 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	881b      	ldrh	r3, [r3, #0]
 80123d2:	461a      	mov	r2, r3
 80123d4:	8bfb      	ldrh	r3, [r7, #30]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	f1a3 0208 	sub.w	r2, r3, #8
 80123dc:	8bbb      	ldrh	r3, [r7, #28]
 80123de:	3314      	adds	r3, #20
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d333      	bcc.n	801244c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80123e4:	8bfa      	ldrh	r2, [r7, #30]
 80123e6:	8bbb      	ldrh	r3, [r7, #28]
 80123e8:	4413      	add	r3, r2
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	3308      	adds	r3, #8
 80123ee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80123f0:	8a7b      	ldrh	r3, [r7, #18]
 80123f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80123f6:	d106      	bne.n	8012406 <mem_malloc+0xb6>
 80123f8:	4b50      	ldr	r3, [pc, #320]	@ (801253c <mem_malloc+0x1ec>)
 80123fa:	f240 3287 	movw	r2, #903	@ 0x387
 80123fe:	4950      	ldr	r1, [pc, #320]	@ (8012540 <mem_malloc+0x1f0>)
 8012400:	4850      	ldr	r0, [pc, #320]	@ (8012544 <mem_malloc+0x1f4>)
 8012402:	f00b f84d 	bl	801d4a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012406:	8a7b      	ldrh	r3, [r7, #18]
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff fcb7 	bl	8011d7c <ptr_to_mem>
 801240e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2200      	movs	r2, #0
 8012414:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	881a      	ldrh	r2, [r3, #0]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	8bfa      	ldrh	r2, [r7, #30]
 8012422:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	8a7a      	ldrh	r2, [r7, #18]
 8012428:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	2201      	movs	r2, #1
 801242e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	881b      	ldrh	r3, [r3, #0]
 8012434:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012438:	d00b      	beq.n	8012452 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff fc9c 	bl	8011d7c <ptr_to_mem>
 8012444:	4602      	mov	r2, r0
 8012446:	8a7b      	ldrh	r3, [r7, #18]
 8012448:	8053      	strh	r3, [r2, #2]
 801244a:	e002      	b.n	8012452 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2201      	movs	r2, #1
 8012450:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012452:	4b39      	ldr	r3, [pc, #228]	@ (8012538 <mem_malloc+0x1e8>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	697a      	ldr	r2, [r7, #20]
 8012458:	429a      	cmp	r2, r3
 801245a:	d127      	bne.n	80124ac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801245c:	4b36      	ldr	r3, [pc, #216]	@ (8012538 <mem_malloc+0x1e8>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012462:	e005      	b.n	8012470 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	881b      	ldrh	r3, [r3, #0]
 8012468:	4618      	mov	r0, r3
 801246a:	f7ff fc87 	bl	8011d7c <ptr_to_mem>
 801246e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	791b      	ldrb	r3, [r3, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d004      	beq.n	8012482 <mem_malloc+0x132>
 8012478:	4b33      	ldr	r3, [pc, #204]	@ (8012548 <mem_malloc+0x1f8>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	69ba      	ldr	r2, [r7, #24]
 801247e:	429a      	cmp	r2, r3
 8012480:	d1f0      	bne.n	8012464 <mem_malloc+0x114>
          }
          lfree = cur;
 8012482:	4a2d      	ldr	r2, [pc, #180]	@ (8012538 <mem_malloc+0x1e8>)
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012488:	4b2b      	ldr	r3, [pc, #172]	@ (8012538 <mem_malloc+0x1e8>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	4b2e      	ldr	r3, [pc, #184]	@ (8012548 <mem_malloc+0x1f8>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	429a      	cmp	r2, r3
 8012492:	d00b      	beq.n	80124ac <mem_malloc+0x15c>
 8012494:	4b28      	ldr	r3, [pc, #160]	@ (8012538 <mem_malloc+0x1e8>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	791b      	ldrb	r3, [r3, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d006      	beq.n	80124ac <mem_malloc+0x15c>
 801249e:	4b27      	ldr	r3, [pc, #156]	@ (801253c <mem_malloc+0x1ec>)
 80124a0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80124a4:	4929      	ldr	r1, [pc, #164]	@ (801254c <mem_malloc+0x1fc>)
 80124a6:	4827      	ldr	r0, [pc, #156]	@ (8012544 <mem_malloc+0x1f4>)
 80124a8:	f00a fffa 	bl	801d4a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80124ac:	4821      	ldr	r0, [pc, #132]	@ (8012534 <mem_malloc+0x1e4>)
 80124ae:	f009 fdee 	bl	801c08e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80124b2:	8bba      	ldrh	r2, [r7, #28]
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	4413      	add	r3, r2
 80124b8:	3308      	adds	r3, #8
 80124ba:	4a23      	ldr	r2, [pc, #140]	@ (8012548 <mem_malloc+0x1f8>)
 80124bc:	6812      	ldr	r2, [r2, #0]
 80124be:	4293      	cmp	r3, r2
 80124c0:	d906      	bls.n	80124d0 <mem_malloc+0x180>
 80124c2:	4b1e      	ldr	r3, [pc, #120]	@ (801253c <mem_malloc+0x1ec>)
 80124c4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80124c8:	4921      	ldr	r1, [pc, #132]	@ (8012550 <mem_malloc+0x200>)
 80124ca:	481e      	ldr	r0, [pc, #120]	@ (8012544 <mem_malloc+0x1f4>)
 80124cc:	f00a ffe8 	bl	801d4a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	f003 0303 	and.w	r3, r3, #3
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d006      	beq.n	80124e8 <mem_malloc+0x198>
 80124da:	4b18      	ldr	r3, [pc, #96]	@ (801253c <mem_malloc+0x1ec>)
 80124dc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80124e0:	491c      	ldr	r1, [pc, #112]	@ (8012554 <mem_malloc+0x204>)
 80124e2:	4818      	ldr	r0, [pc, #96]	@ (8012544 <mem_malloc+0x1f4>)
 80124e4:	f00a ffdc 	bl	801d4a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f003 0303 	and.w	r3, r3, #3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d006      	beq.n	8012500 <mem_malloc+0x1b0>
 80124f2:	4b12      	ldr	r3, [pc, #72]	@ (801253c <mem_malloc+0x1ec>)
 80124f4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80124f8:	4917      	ldr	r1, [pc, #92]	@ (8012558 <mem_malloc+0x208>)
 80124fa:	4812      	ldr	r0, [pc, #72]	@ (8012544 <mem_malloc+0x1f4>)
 80124fc:	f00a ffd0 	bl	801d4a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	3308      	adds	r3, #8
 8012504:	e011      	b.n	801252a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012506:	8bfb      	ldrh	r3, [r7, #30]
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fc37 	bl	8011d7c <ptr_to_mem>
 801250e:	4603      	mov	r3, r0
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012514:	8bfa      	ldrh	r2, [r7, #30]
 8012516:	8bbb      	ldrh	r3, [r7, #28]
 8012518:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801251c:	429a      	cmp	r2, r3
 801251e:	f4ff af41 	bcc.w	80123a4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012522:	4804      	ldr	r0, [pc, #16]	@ (8012534 <mem_malloc+0x1e4>)
 8012524:	f009 fdb3 	bl	801c08e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012528:	2300      	movs	r3, #0
}
 801252a:	4618      	mov	r0, r3
 801252c:	3720      	adds	r7, #32
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	2002443c 	.word	0x2002443c
 8012538:	20024440 	.word	0x20024440
 801253c:	0801e780 	.word	0x0801e780
 8012540:	0801e944 	.word	0x0801e944
 8012544:	0801e7c8 	.word	0x0801e7c8
 8012548:	20024438 	.word	0x20024438
 801254c:	0801e958 	.word	0x0801e958
 8012550:	0801e974 	.word	0x0801e974
 8012554:	0801e9a4 	.word	0x0801e9a4
 8012558:	0801e9d4 	.word	0x0801e9d4

0801255c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801255c:	b480      	push	{r7}
 801255e:	b085      	sub	sp, #20
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	2200      	movs	r2, #0
 801256a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	3303      	adds	r3, #3
 8012572:	f023 0303 	bic.w	r3, r3, #3
 8012576:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012578:	2300      	movs	r3, #0
 801257a:	60fb      	str	r3, [r7, #12]
 801257c:	e011      	b.n	80125a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	689b      	ldr	r3, [r3, #8]
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	461a      	mov	r2, r3
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	4413      	add	r3, r2
 801259a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	3301      	adds	r3, #1
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	885b      	ldrh	r3, [r3, #2]
 80125a6:	461a      	mov	r2, r3
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	4293      	cmp	r3, r2
 80125ac:	dbe7      	blt.n	801257e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80125ae:	bf00      	nop
 80125b0:	bf00      	nop
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80125c2:	2300      	movs	r3, #0
 80125c4:	80fb      	strh	r3, [r7, #6]
 80125c6:	e009      	b.n	80125dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80125c8:	88fb      	ldrh	r3, [r7, #6]
 80125ca:	4a08      	ldr	r2, [pc, #32]	@ (80125ec <memp_init+0x30>)
 80125cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7ff ffc3 	bl	801255c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80125d6:	88fb      	ldrh	r3, [r7, #6]
 80125d8:	3301      	adds	r3, #1
 80125da:	80fb      	strh	r3, [r7, #6]
 80125dc:	88fb      	ldrh	r3, [r7, #6]
 80125de:	2b0c      	cmp	r3, #12
 80125e0:	d9f2      	bls.n	80125c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80125e2:	bf00      	nop
 80125e4:	bf00      	nop
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	08021a30 	.word	0x08021a30

080125f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80125f8:	f009 fd76 	bl	801c0e8 <sys_arch_protect>
 80125fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	689b      	ldr	r3, [r3, #8]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d015      	beq.n	8012638 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	689b      	ldr	r3, [r3, #8]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	6812      	ldr	r2, [r2, #0]
 8012614:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	f003 0303 	and.w	r3, r3, #3
 801261c:	2b00      	cmp	r3, #0
 801261e:	d006      	beq.n	801262e <do_memp_malloc_pool+0x3e>
 8012620:	4b09      	ldr	r3, [pc, #36]	@ (8012648 <do_memp_malloc_pool+0x58>)
 8012622:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012626:	4909      	ldr	r1, [pc, #36]	@ (801264c <do_memp_malloc_pool+0x5c>)
 8012628:	4809      	ldr	r0, [pc, #36]	@ (8012650 <do_memp_malloc_pool+0x60>)
 801262a:	f00a ff39 	bl	801d4a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f009 fd68 	bl	801c104 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	e003      	b.n	8012640 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	f009 fd63 	bl	801c104 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	0801e9f8 	.word	0x0801e9f8
 801264c:	0801ea28 	.word	0x0801ea28
 8012650:	0801ea4c 	.word	0x0801ea4c

08012654 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d106      	bne.n	8012670 <memp_malloc_pool+0x1c>
 8012662:	4b0a      	ldr	r3, [pc, #40]	@ (801268c <memp_malloc_pool+0x38>)
 8012664:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012668:	4909      	ldr	r1, [pc, #36]	@ (8012690 <memp_malloc_pool+0x3c>)
 801266a:	480a      	ldr	r0, [pc, #40]	@ (8012694 <memp_malloc_pool+0x40>)
 801266c:	f00a ff18 	bl	801d4a0 <iprintf>
  if (desc == NULL) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d101      	bne.n	801267a <memp_malloc_pool+0x26>
    return NULL;
 8012676:	2300      	movs	r3, #0
 8012678:	e003      	b.n	8012682 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7ff ffb8 	bl	80125f0 <do_memp_malloc_pool>
 8012680:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012682:	4618      	mov	r0, r3
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	0801e9f8 	.word	0x0801e9f8
 8012690:	0801ea74 	.word	0x0801ea74
 8012694:	0801ea4c 	.word	0x0801ea4c

08012698 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80126a2:	79fb      	ldrb	r3, [r7, #7]
 80126a4:	2b0c      	cmp	r3, #12
 80126a6:	d908      	bls.n	80126ba <memp_malloc+0x22>
 80126a8:	4b0a      	ldr	r3, [pc, #40]	@ (80126d4 <memp_malloc+0x3c>)
 80126aa:	f240 1257 	movw	r2, #343	@ 0x157
 80126ae:	490a      	ldr	r1, [pc, #40]	@ (80126d8 <memp_malloc+0x40>)
 80126b0:	480a      	ldr	r0, [pc, #40]	@ (80126dc <memp_malloc+0x44>)
 80126b2:	f00a fef5 	bl	801d4a0 <iprintf>
 80126b6:	2300      	movs	r3, #0
 80126b8:	e008      	b.n	80126cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	4a08      	ldr	r2, [pc, #32]	@ (80126e0 <memp_malloc+0x48>)
 80126be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7ff ff94 	bl	80125f0 <do_memp_malloc_pool>
 80126c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80126ca:	68fb      	ldr	r3, [r7, #12]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	0801e9f8 	.word	0x0801e9f8
 80126d8:	0801ea88 	.word	0x0801ea88
 80126dc:	0801ea4c 	.word	0x0801ea4c
 80126e0:	08021a30 	.word	0x08021a30

080126e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	f003 0303 	and.w	r3, r3, #3
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d006      	beq.n	8012706 <do_memp_free_pool+0x22>
 80126f8:	4b0d      	ldr	r3, [pc, #52]	@ (8012730 <do_memp_free_pool+0x4c>)
 80126fa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80126fe:	490d      	ldr	r1, [pc, #52]	@ (8012734 <do_memp_free_pool+0x50>)
 8012700:	480d      	ldr	r0, [pc, #52]	@ (8012738 <do_memp_free_pool+0x54>)
 8012702:	f00a fecd 	bl	801d4a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801270a:	f009 fced 	bl	801c0e8 <sys_arch_protect>
 801270e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012722:	68b8      	ldr	r0, [r7, #8]
 8012724:	f009 fcee 	bl	801c104 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012728:	bf00      	nop
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	0801e9f8 	.word	0x0801e9f8
 8012734:	0801eaa8 	.word	0x0801eaa8
 8012738:	0801ea4c 	.word	0x0801ea4c

0801273c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d106      	bne.n	801275a <memp_free_pool+0x1e>
 801274c:	4b0a      	ldr	r3, [pc, #40]	@ (8012778 <memp_free_pool+0x3c>)
 801274e:	f240 1295 	movw	r2, #405	@ 0x195
 8012752:	490a      	ldr	r1, [pc, #40]	@ (801277c <memp_free_pool+0x40>)
 8012754:	480a      	ldr	r0, [pc, #40]	@ (8012780 <memp_free_pool+0x44>)
 8012756:	f00a fea3 	bl	801d4a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d007      	beq.n	8012770 <memp_free_pool+0x34>
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d004      	beq.n	8012770 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012766:	6839      	ldr	r1, [r7, #0]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff ffbb 	bl	80126e4 <do_memp_free_pool>
 801276e:	e000      	b.n	8012772 <memp_free_pool+0x36>
    return;
 8012770:	bf00      	nop
}
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	0801e9f8 	.word	0x0801e9f8
 801277c:	0801ea74 	.word	0x0801ea74
 8012780:	0801ea4c 	.word	0x0801ea4c

08012784 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	6039      	str	r1, [r7, #0]
 801278e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012790:	79fb      	ldrb	r3, [r7, #7]
 8012792:	2b0c      	cmp	r3, #12
 8012794:	d907      	bls.n	80127a6 <memp_free+0x22>
 8012796:	4b0c      	ldr	r3, [pc, #48]	@ (80127c8 <memp_free+0x44>)
 8012798:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801279c:	490b      	ldr	r1, [pc, #44]	@ (80127cc <memp_free+0x48>)
 801279e:	480c      	ldr	r0, [pc, #48]	@ (80127d0 <memp_free+0x4c>)
 80127a0:	f00a fe7e 	bl	801d4a0 <iprintf>
 80127a4:	e00c      	b.n	80127c0 <memp_free+0x3c>

  if (mem == NULL) {
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d008      	beq.n	80127be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80127ac:	79fb      	ldrb	r3, [r7, #7]
 80127ae:	4a09      	ldr	r2, [pc, #36]	@ (80127d4 <memp_free+0x50>)
 80127b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7ff ff94 	bl	80126e4 <do_memp_free_pool>
 80127bc:	e000      	b.n	80127c0 <memp_free+0x3c>
    return;
 80127be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	0801e9f8 	.word	0x0801e9f8
 80127cc:	0801eac8 	.word	0x0801eac8
 80127d0:	0801ea4c 	.word	0x0801ea4c
 80127d4:	08021a30 	.word	0x08021a30

080127d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80127d8:	b480      	push	{r7}
 80127da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80127dc:	bf00      	nop
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
	...

080127e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b086      	sub	sp, #24
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
 80127f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d108      	bne.n	801280e <netif_add+0x26>
 80127fc:	4b57      	ldr	r3, [pc, #348]	@ (801295c <netif_add+0x174>)
 80127fe:	f240 1227 	movw	r2, #295	@ 0x127
 8012802:	4957      	ldr	r1, [pc, #348]	@ (8012960 <netif_add+0x178>)
 8012804:	4857      	ldr	r0, [pc, #348]	@ (8012964 <netif_add+0x17c>)
 8012806:	f00a fe4b 	bl	801d4a0 <iprintf>
 801280a:	2300      	movs	r3, #0
 801280c:	e0a2      	b.n	8012954 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012810:	2b00      	cmp	r3, #0
 8012812:	d108      	bne.n	8012826 <netif_add+0x3e>
 8012814:	4b51      	ldr	r3, [pc, #324]	@ (801295c <netif_add+0x174>)
 8012816:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801281a:	4953      	ldr	r1, [pc, #332]	@ (8012968 <netif_add+0x180>)
 801281c:	4851      	ldr	r0, [pc, #324]	@ (8012964 <netif_add+0x17c>)
 801281e:	f00a fe3f 	bl	801d4a0 <iprintf>
 8012822:	2300      	movs	r3, #0
 8012824:	e096      	b.n	8012954 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d101      	bne.n	8012830 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801282c:	4b4f      	ldr	r3, [pc, #316]	@ (801296c <netif_add+0x184>)
 801282e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012836:	4b4d      	ldr	r3, [pc, #308]	@ (801296c <netif_add+0x184>)
 8012838:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012840:	4b4a      	ldr	r3, [pc, #296]	@ (801296c <netif_add+0x184>)
 8012842:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2200      	movs	r2, #0
 8012848:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2200      	movs	r2, #0
 801284e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2200      	movs	r2, #0
 8012854:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	4a45      	ldr	r2, [pc, #276]	@ (8012970 <netif_add+0x188>)
 801285a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2200      	movs	r2, #0
 8012860:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2200      	movs	r2, #0
 801286e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	6a3a      	ldr	r2, [r7, #32]
 8012874:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012876:	4b3f      	ldr	r3, [pc, #252]	@ (8012974 <netif_add+0x18c>)
 8012878:	781a      	ldrb	r2, [r3, #0]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012884:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	68b9      	ldr	r1, [r7, #8]
 801288c:	68f8      	ldr	r0, [r7, #12]
 801288e:	f000 f913 	bl	8012ab8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012894:	68f8      	ldr	r0, [r7, #12]
 8012896:	4798      	blx	r3
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <netif_add+0xba>
    return NULL;
 801289e:	2300      	movs	r3, #0
 80128a0:	e058      	b.n	8012954 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128a8:	2bff      	cmp	r3, #255	@ 0xff
 80128aa:	d103      	bne.n	80128b4 <netif_add+0xcc>
        netif->num = 0;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2200      	movs	r2, #0
 80128b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80128b8:	4b2f      	ldr	r3, [pc, #188]	@ (8012978 <netif_add+0x190>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	617b      	str	r3, [r7, #20]
 80128be:	e02b      	b.n	8012918 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80128c0:	697a      	ldr	r2, [r7, #20]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d106      	bne.n	80128d6 <netif_add+0xee>
 80128c8:	4b24      	ldr	r3, [pc, #144]	@ (801295c <netif_add+0x174>)
 80128ca:	f240 128b 	movw	r2, #395	@ 0x18b
 80128ce:	492b      	ldr	r1, [pc, #172]	@ (801297c <netif_add+0x194>)
 80128d0:	4824      	ldr	r0, [pc, #144]	@ (8012964 <netif_add+0x17c>)
 80128d2:	f00a fde5 	bl	801d4a0 <iprintf>
        num_netifs++;
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	3301      	adds	r3, #1
 80128da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	2bff      	cmp	r3, #255	@ 0xff
 80128e0:	dd06      	ble.n	80128f0 <netif_add+0x108>
 80128e2:	4b1e      	ldr	r3, [pc, #120]	@ (801295c <netif_add+0x174>)
 80128e4:	f240 128d 	movw	r2, #397	@ 0x18d
 80128e8:	4925      	ldr	r1, [pc, #148]	@ (8012980 <netif_add+0x198>)
 80128ea:	481e      	ldr	r0, [pc, #120]	@ (8012964 <netif_add+0x17c>)
 80128ec:	f00a fdd8 	bl	801d4a0 <iprintf>
        if (netif2->num == netif->num) {
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d108      	bne.n	8012912 <netif_add+0x12a>
          netif->num++;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012906:	3301      	adds	r3, #1
 8012908:	b2da      	uxtb	r2, r3
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8012910:	e005      	b.n	801291e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	617b      	str	r3, [r7, #20]
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1d0      	bne.n	80128c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1be      	bne.n	80128a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801292a:	2bfe      	cmp	r3, #254	@ 0xfe
 801292c:	d103      	bne.n	8012936 <netif_add+0x14e>
    netif_num = 0;
 801292e:	4b11      	ldr	r3, [pc, #68]	@ (8012974 <netif_add+0x18c>)
 8012930:	2200      	movs	r2, #0
 8012932:	701a      	strb	r2, [r3, #0]
 8012934:	e006      	b.n	8012944 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801293c:	3301      	adds	r3, #1
 801293e:	b2da      	uxtb	r2, r3
 8012940:	4b0c      	ldr	r3, [pc, #48]	@ (8012974 <netif_add+0x18c>)
 8012942:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012944:	4b0c      	ldr	r3, [pc, #48]	@ (8012978 <netif_add+0x190>)
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801294c:	4a0a      	ldr	r2, [pc, #40]	@ (8012978 <netif_add+0x190>)
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012952:	68fb      	ldr	r3, [r7, #12]
}
 8012954:	4618      	mov	r0, r3
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	0801eae4 	.word	0x0801eae4
 8012960:	0801eb78 	.word	0x0801eb78
 8012964:	0801eb34 	.word	0x0801eb34
 8012968:	0801eb94 	.word	0x0801eb94
 801296c:	08021aa4 	.word	0x08021aa4
 8012970:	08012d93 	.word	0x08012d93
 8012974:	20027518 	.word	0x20027518
 8012978:	20027510 	.word	0x20027510
 801297c:	0801ebb8 	.word	0x0801ebb8
 8012980:	0801ebcc 	.word	0x0801ebcc

08012984 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801298e:	6839      	ldr	r1, [r7, #0]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f002 fb8f 	bl	80150b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012996:	6839      	ldr	r1, [r7, #0]
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f006 ff4b 	bl	8019834 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d106      	bne.n	80129c8 <netif_do_set_ipaddr+0x20>
 80129ba:	4b1d      	ldr	r3, [pc, #116]	@ (8012a30 <netif_do_set_ipaddr+0x88>)
 80129bc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80129c0:	491c      	ldr	r1, [pc, #112]	@ (8012a34 <netif_do_set_ipaddr+0x8c>)
 80129c2:	481d      	ldr	r0, [pc, #116]	@ (8012a38 <netif_do_set_ipaddr+0x90>)
 80129c4:	f00a fd6c 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d106      	bne.n	80129dc <netif_do_set_ipaddr+0x34>
 80129ce:	4b18      	ldr	r3, [pc, #96]	@ (8012a30 <netif_do_set_ipaddr+0x88>)
 80129d0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80129d4:	4917      	ldr	r1, [pc, #92]	@ (8012a34 <netif_do_set_ipaddr+0x8c>)
 80129d6:	4818      	ldr	r0, [pc, #96]	@ (8012a38 <netif_do_set_ipaddr+0x90>)
 80129d8:	f00a fd62 	bl	801d4a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	3304      	adds	r3, #4
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d01c      	beq.n	8012a24 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3304      	adds	r3, #4
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80129fa:	f107 0314 	add.w	r3, r7, #20
 80129fe:	4619      	mov	r1, r3
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7ff ffbf 	bl	8012984 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <netif_do_set_ipaddr+0x6a>
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	e000      	b.n	8012a14 <netif_do_set_ipaddr+0x6c>
 8012a12:	2300      	movs	r3, #0
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012a18:	2101      	movs	r1, #1
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f000 f8d2 	bl	8012bc4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012a20:	2301      	movs	r3, #1
 8012a22:	e000      	b.n	8012a26 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012a24:	2300      	movs	r3, #0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3718      	adds	r7, #24
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	0801eae4 	.word	0x0801eae4
 8012a34:	0801ebfc 	.word	0x0801ebfc
 8012a38:	0801eb34 	.word	0x0801eb34

08012a3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b085      	sub	sp, #20
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	3308      	adds	r3, #8
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d00a      	beq.n	8012a6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <netif_do_set_netmask+0x26>
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	e000      	b.n	8012a64 <netif_do_set_netmask+0x28>
 8012a62:	2300      	movs	r3, #0
 8012a64:	68fa      	ldr	r2, [r7, #12]
 8012a66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e000      	b.n	8012a6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3714      	adds	r7, #20
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	60f8      	str	r0, [r7, #12]
 8012a82:	60b9      	str	r1, [r7, #8]
 8012a84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	330c      	adds	r3, #12
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d00a      	beq.n	8012aaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d002      	beq.n	8012aa0 <netif_do_set_gw+0x26>
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	e000      	b.n	8012aa2 <netif_do_set_gw+0x28>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	e000      	b.n	8012aac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3714      	adds	r7, #20
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b088      	sub	sp, #32
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8012b48 <netif_set_addr+0x90>)
 8012ad6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d101      	bne.n	8012ae2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012ade:	4b1a      	ldr	r3, [pc, #104]	@ (8012b48 <netif_set_addr+0x90>)
 8012ae0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012ae8:	4b17      	ldr	r3, [pc, #92]	@ (8012b48 <netif_set_addr+0x90>)
 8012aea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d003      	beq.n	8012afa <netif_set_addr+0x42>
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d101      	bne.n	8012afe <netif_set_addr+0x46>
 8012afa:	2301      	movs	r3, #1
 8012afc:	e000      	b.n	8012b00 <netif_set_addr+0x48>
 8012afe:	2300      	movs	r3, #0
 8012b00:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d006      	beq.n	8012b16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012b08:	f107 0310 	add.w	r3, r7, #16
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	68b9      	ldr	r1, [r7, #8]
 8012b10:	68f8      	ldr	r0, [r7, #12]
 8012b12:	f7ff ff49 	bl	80129a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012b16:	69fa      	ldr	r2, [r7, #28]
 8012b18:	6879      	ldr	r1, [r7, #4]
 8012b1a:	68f8      	ldr	r0, [r7, #12]
 8012b1c:	f7ff ff8e 	bl	8012a3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012b20:	69ba      	ldr	r2, [r7, #24]
 8012b22:	6839      	ldr	r1, [r7, #0]
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f7ff ffa8 	bl	8012a7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d106      	bne.n	8012b3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012b30:	f107 0310 	add.w	r3, r7, #16
 8012b34:	461a      	mov	r2, r3
 8012b36:	68b9      	ldr	r1, [r7, #8]
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f7ff ff35 	bl	80129a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012b3e:	bf00      	nop
 8012b40:	3720      	adds	r7, #32
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	08021aa4 	.word	0x08021aa4

08012b4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b083      	sub	sp, #12
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012b54:	4a04      	ldr	r2, [pc, #16]	@ (8012b68 <netif_set_default+0x1c>)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012b5a:	bf00      	nop
 8012b5c:	370c      	adds	r7, #12
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop
 8012b68:	20027514 	.word	0x20027514

08012b6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d107      	bne.n	8012b8a <netif_set_up+0x1e>
 8012b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8012bb8 <netif_set_up+0x4c>)
 8012b7c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8012b80:	490e      	ldr	r1, [pc, #56]	@ (8012bbc <netif_set_up+0x50>)
 8012b82:	480f      	ldr	r0, [pc, #60]	@ (8012bc0 <netif_set_up+0x54>)
 8012b84:	f00a fc8c 	bl	801d4a0 <iprintf>
 8012b88:	e013      	b.n	8012bb2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10c      	bne.n	8012bb2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b9e:	f043 0301 	orr.w	r3, r3, #1
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012baa:	2103      	movs	r1, #3
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f809 	bl	8012bc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	0801eae4 	.word	0x0801eae4
 8012bbc:	0801ec6c 	.word	0x0801ec6c
 8012bc0:	0801eb34 	.word	0x0801eb34

08012bc4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d106      	bne.n	8012be4 <netif_issue_reports+0x20>
 8012bd6:	4b18      	ldr	r3, [pc, #96]	@ (8012c38 <netif_issue_reports+0x74>)
 8012bd8:	f240 326d 	movw	r2, #877	@ 0x36d
 8012bdc:	4917      	ldr	r1, [pc, #92]	@ (8012c3c <netif_issue_reports+0x78>)
 8012bde:	4818      	ldr	r0, [pc, #96]	@ (8012c40 <netif_issue_reports+0x7c>)
 8012be0:	f00a fc5e 	bl	801d4a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bea:	f003 0304 	and.w	r3, r3, #4
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d01e      	beq.n	8012c30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bf8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d017      	beq.n	8012c30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d013      	beq.n	8012c32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	3304      	adds	r3, #4
 8012c0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00e      	beq.n	8012c32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c1a:	f003 0308 	and.w	r3, r3, #8
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d007      	beq.n	8012c32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	3304      	adds	r3, #4
 8012c26:	4619      	mov	r1, r3
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f007 fd6d 	bl	801a708 <etharp_request>
 8012c2e:	e000      	b.n	8012c32 <netif_issue_reports+0x6e>
    return;
 8012c30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0801eae4 	.word	0x0801eae4
 8012c3c:	0801ec88 	.word	0x0801ec88
 8012c40:	0801eb34 	.word	0x0801eb34

08012c44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d107      	bne.n	8012c62 <netif_set_down+0x1e>
 8012c52:	4b12      	ldr	r3, [pc, #72]	@ (8012c9c <netif_set_down+0x58>)
 8012c54:	f240 329b 	movw	r2, #923	@ 0x39b
 8012c58:	4911      	ldr	r1, [pc, #68]	@ (8012ca0 <netif_set_down+0x5c>)
 8012c5a:	4812      	ldr	r0, [pc, #72]	@ (8012ca4 <netif_set_down+0x60>)
 8012c5c:	f00a fc20 	bl	801d4a0 <iprintf>
 8012c60:	e019      	b.n	8012c96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d012      	beq.n	8012c96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c76:	f023 0301 	bic.w	r3, r3, #1
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c88:	f003 0308 	and.w	r3, r3, #8
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d002      	beq.n	8012c96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f007 f8f7 	bl	8019e84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012c96:	3708      	adds	r7, #8
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	0801eae4 	.word	0x0801eae4
 8012ca0:	0801ecac 	.word	0x0801ecac
 8012ca4:	0801eb34 	.word	0x0801eb34

08012ca8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d107      	bne.n	8012cc6 <netif_set_link_up+0x1e>
 8012cb6:	4b13      	ldr	r3, [pc, #76]	@ (8012d04 <netif_set_link_up+0x5c>)
 8012cb8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012cbc:	4912      	ldr	r1, [pc, #72]	@ (8012d08 <netif_set_link_up+0x60>)
 8012cbe:	4813      	ldr	r0, [pc, #76]	@ (8012d0c <netif_set_link_up+0x64>)
 8012cc0:	f00a fbee 	bl	801d4a0 <iprintf>
 8012cc4:	e01b      	b.n	8012cfe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ccc:	f003 0304 	and.w	r3, r3, #4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d114      	bne.n	8012cfe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012cda:	f043 0304 	orr.w	r3, r3, #4
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012ce6:	2103      	movs	r1, #3
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7ff ff6b 	bl	8012bc4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	69db      	ldr	r3, [r3, #28]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d003      	beq.n	8012cfe <netif_set_link_up+0x56>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	69db      	ldr	r3, [r3, #28]
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	0801eae4 	.word	0x0801eae4
 8012d08:	0801eccc 	.word	0x0801eccc
 8012d0c:	0801eb34 	.word	0x0801eb34

08012d10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d107      	bne.n	8012d2e <netif_set_link_down+0x1e>
 8012d1e:	4b11      	ldr	r3, [pc, #68]	@ (8012d64 <netif_set_link_down+0x54>)
 8012d20:	f240 4206 	movw	r2, #1030	@ 0x406
 8012d24:	4910      	ldr	r1, [pc, #64]	@ (8012d68 <netif_set_link_down+0x58>)
 8012d26:	4811      	ldr	r0, [pc, #68]	@ (8012d6c <netif_set_link_down+0x5c>)
 8012d28:	f00a fbba 	bl	801d4a0 <iprintf>
 8012d2c:	e017      	b.n	8012d5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d34:	f003 0304 	and.w	r3, r3, #4
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d010      	beq.n	8012d5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d42:	f023 0304 	bic.w	r3, r3, #4
 8012d46:	b2da      	uxtb	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	69db      	ldr	r3, [r3, #28]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d003      	beq.n	8012d5e <netif_set_link_down+0x4e>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	69db      	ldr	r3, [r3, #28]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	0801eae4 	.word	0x0801eae4
 8012d68:	0801ecf0 	.word	0x0801ecf0
 8012d6c:	0801eb34 	.word	0x0801eb34

08012d70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	683a      	ldr	r2, [r7, #0]
 8012d84:	61da      	str	r2, [r3, #28]
  }
}
 8012d86:	bf00      	nop
 8012d88:	370c      	adds	r7, #12
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr

08012d92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012d92:	b480      	push	{r7}
 8012d94:	b085      	sub	sp, #20
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	60f8      	str	r0, [r7, #12]
 8012d9a:	60b9      	str	r1, [r7, #8]
 8012d9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012d9e:	f06f 030b 	mvn.w	r3, #11
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3714      	adds	r7, #20
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
	...

08012db0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b085      	sub	sp, #20
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	4603      	mov	r3, r0
 8012db8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012dba:	79fb      	ldrb	r3, [r7, #7]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d013      	beq.n	8012de8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <netif_get_by_index+0x48>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	60fb      	str	r3, [r7, #12]
 8012dc6:	e00c      	b.n	8012de2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012dce:	3301      	adds	r3, #1
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	79fa      	ldrb	r2, [r7, #7]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d101      	bne.n	8012ddc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	e006      	b.n	8012dea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	60fb      	str	r3, [r7, #12]
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1ef      	bne.n	8012dc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3714      	adds	r7, #20
 8012dee:	46bd      	mov	sp, r7
 8012df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	20027510 	.word	0x20027510

08012dfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012e02:	f009 f971 	bl	801c0e8 <sys_arch_protect>
 8012e06:	6038      	str	r0, [r7, #0]
 8012e08:	4b0d      	ldr	r3, [pc, #52]	@ (8012e40 <pbuf_free_ooseq+0x44>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	701a      	strb	r2, [r3, #0]
 8012e0e:	6838      	ldr	r0, [r7, #0]
 8012e10:	f009 f978 	bl	801c104 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012e14:	4b0b      	ldr	r3, [pc, #44]	@ (8012e44 <pbuf_free_ooseq+0x48>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	607b      	str	r3, [r7, #4]
 8012e1a:	e00a      	b.n	8012e32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d003      	beq.n	8012e2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f002 f983 	bl	8015130 <tcp_free_ooseq>
      return;
 8012e2a:	e005      	b.n	8012e38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	607b      	str	r3, [r7, #4]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1f1      	bne.n	8012e1c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012e38:	3708      	adds	r7, #8
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
 8012e3e:	bf00      	nop
 8012e40:	20027519 	.word	0x20027519
 8012e44:	20027528 	.word	0x20027528

08012e48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012e50:	f7ff ffd4 	bl	8012dfc <pbuf_free_ooseq>
}
 8012e54:	bf00      	nop
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012e62:	f009 f941 	bl	801c0e8 <sys_arch_protect>
 8012e66:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012e68:	4b0f      	ldr	r3, [pc, #60]	@ (8012ea8 <pbuf_pool_is_empty+0x4c>)
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8012ea8 <pbuf_pool_is_empty+0x4c>)
 8012e70:	2201      	movs	r2, #1
 8012e72:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f009 f945 	bl	801c104 <sys_arch_unprotect>

  if (!queued) {
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d10f      	bne.n	8012ea0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012e80:	2100      	movs	r1, #0
 8012e82:	480a      	ldr	r0, [pc, #40]	@ (8012eac <pbuf_pool_is_empty+0x50>)
 8012e84:	f7fe feaa 	bl	8011bdc <tcpip_try_callback>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d008      	beq.n	8012ea0 <pbuf_pool_is_empty+0x44>
 8012e8e:	f009 f92b 	bl	801c0e8 <sys_arch_protect>
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	4b04      	ldr	r3, [pc, #16]	@ (8012ea8 <pbuf_pool_is_empty+0x4c>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	701a      	strb	r2, [r3, #0]
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f009 f932 	bl	801c104 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	20027519 	.word	0x20027519
 8012eac:	08012e49 	.word	0x08012e49

08012eb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	4611      	mov	r1, r2
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	80fb      	strh	r3, [r7, #6]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	68ba      	ldr	r2, [r7, #8]
 8012ed0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	88fa      	ldrh	r2, [r7, #6]
 8012ed6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	88ba      	ldrh	r2, [r7, #4]
 8012edc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012ede:	8b3b      	ldrh	r3, [r7, #24]
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	7f3a      	ldrb	r2, [r7, #28]
 8012eea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	73da      	strb	r2, [r3, #15]
}
 8012ef8:	bf00      	nop
 8012efa:	3714      	adds	r7, #20
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr

08012f04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b08c      	sub	sp, #48	@ 0x30
 8012f08:	af02      	add	r7, sp, #8
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	71fb      	strb	r3, [r7, #7]
 8012f0e:	460b      	mov	r3, r1
 8012f10:	80bb      	strh	r3, [r7, #4]
 8012f12:	4613      	mov	r3, r2
 8012f14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012f16:	79fb      	ldrb	r3, [r7, #7]
 8012f18:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012f1a:	887b      	ldrh	r3, [r7, #2]
 8012f1c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012f20:	d07f      	beq.n	8013022 <pbuf_alloc+0x11e>
 8012f22:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012f26:	f300 80c8 	bgt.w	80130ba <pbuf_alloc+0x1b6>
 8012f2a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012f2e:	d010      	beq.n	8012f52 <pbuf_alloc+0x4e>
 8012f30:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012f34:	f300 80c1 	bgt.w	80130ba <pbuf_alloc+0x1b6>
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d002      	beq.n	8012f42 <pbuf_alloc+0x3e>
 8012f3c:	2b41      	cmp	r3, #65	@ 0x41
 8012f3e:	f040 80bc 	bne.w	80130ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012f42:	887a      	ldrh	r2, [r7, #2]
 8012f44:	88bb      	ldrh	r3, [r7, #4]
 8012f46:	4619      	mov	r1, r3
 8012f48:	2000      	movs	r0, #0
 8012f4a:	f000 f8d1 	bl	80130f0 <pbuf_alloc_reference>
 8012f4e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8012f50:	e0bd      	b.n	80130ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012f5a:	88bb      	ldrh	r3, [r7, #4]
 8012f5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012f5e:	200c      	movs	r0, #12
 8012f60:	f7ff fb9a 	bl	8012698 <memp_malloc>
 8012f64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d109      	bne.n	8012f80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012f6c:	f7ff ff76 	bl	8012e5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d002      	beq.n	8012f7c <pbuf_alloc+0x78>
            pbuf_free(p);
 8012f76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f78:	f000 faa8 	bl	80134cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	e0a7      	b.n	80130d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012f80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f82:	3303      	adds	r3, #3
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	f023 0303 	bic.w	r3, r3, #3
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	8b7a      	ldrh	r2, [r7, #26]
 8012f94:	4293      	cmp	r3, r2
 8012f96:	bf28      	it	cs
 8012f98:	4613      	movcs	r3, r2
 8012f9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012f9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f9e:	3310      	adds	r3, #16
 8012fa0:	693a      	ldr	r2, [r7, #16]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	3303      	adds	r3, #3
 8012fa6:	f023 0303 	bic.w	r3, r3, #3
 8012faa:	4618      	mov	r0, r3
 8012fac:	89f9      	ldrh	r1, [r7, #14]
 8012fae:	8b7a      	ldrh	r2, [r7, #26]
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	9301      	str	r3, [sp, #4]
 8012fb4:	887b      	ldrh	r3, [r7, #2]
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4601      	mov	r1, r0
 8012fbc:	6938      	ldr	r0, [r7, #16]
 8012fbe:	f7ff ff77 	bl	8012eb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	f003 0303 	and.w	r3, r3, #3
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d006      	beq.n	8012fdc <pbuf_alloc+0xd8>
 8012fce:	4b42      	ldr	r3, [pc, #264]	@ (80130d8 <pbuf_alloc+0x1d4>)
 8012fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012fd4:	4941      	ldr	r1, [pc, #260]	@ (80130dc <pbuf_alloc+0x1d8>)
 8012fd6:	4842      	ldr	r0, [pc, #264]	@ (80130e0 <pbuf_alloc+0x1dc>)
 8012fd8:	f00a fa62 	bl	801d4a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012fdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012fde:	3303      	adds	r3, #3
 8012fe0:	f023 0303 	bic.w	r3, r3, #3
 8012fe4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012fe8:	d106      	bne.n	8012ff8 <pbuf_alloc+0xf4>
 8012fea:	4b3b      	ldr	r3, [pc, #236]	@ (80130d8 <pbuf_alloc+0x1d4>)
 8012fec:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012ff0:	493c      	ldr	r1, [pc, #240]	@ (80130e4 <pbuf_alloc+0x1e0>)
 8012ff2:	483b      	ldr	r0, [pc, #236]	@ (80130e0 <pbuf_alloc+0x1dc>)
 8012ff4:	f00a fa54 	bl	801d4a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d102      	bne.n	8013004 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	627b      	str	r3, [r7, #36]	@ 0x24
 8013002:	e002      	b.n	801300a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	693a      	ldr	r2, [r7, #16]
 8013008:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801300e:	8b7a      	ldrh	r2, [r7, #26]
 8013010:	89fb      	ldrh	r3, [r7, #14]
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801301a:	8b7b      	ldrh	r3, [r7, #26]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d19e      	bne.n	8012f5e <pbuf_alloc+0x5a>
      break;
 8013020:	e055      	b.n	80130ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013022:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013024:	3303      	adds	r3, #3
 8013026:	b29b      	uxth	r3, r3
 8013028:	f023 0303 	bic.w	r3, r3, #3
 801302c:	b29a      	uxth	r2, r3
 801302e:	88bb      	ldrh	r3, [r7, #4]
 8013030:	3303      	adds	r3, #3
 8013032:	b29b      	uxth	r3, r3
 8013034:	f023 0303 	bic.w	r3, r3, #3
 8013038:	b29b      	uxth	r3, r3
 801303a:	4413      	add	r3, r2
 801303c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801303e:	8b3b      	ldrh	r3, [r7, #24]
 8013040:	3310      	adds	r3, #16
 8013042:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013044:	8b3a      	ldrh	r2, [r7, #24]
 8013046:	88bb      	ldrh	r3, [r7, #4]
 8013048:	3303      	adds	r3, #3
 801304a:	f023 0303 	bic.w	r3, r3, #3
 801304e:	429a      	cmp	r2, r3
 8013050:	d306      	bcc.n	8013060 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013052:	8afa      	ldrh	r2, [r7, #22]
 8013054:	88bb      	ldrh	r3, [r7, #4]
 8013056:	3303      	adds	r3, #3
 8013058:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801305c:	429a      	cmp	r2, r3
 801305e:	d201      	bcs.n	8013064 <pbuf_alloc+0x160>
        return NULL;
 8013060:	2300      	movs	r3, #0
 8013062:	e035      	b.n	80130d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013064:	8afb      	ldrh	r3, [r7, #22]
 8013066:	4618      	mov	r0, r3
 8013068:	f7ff f972 	bl	8012350 <mem_malloc>
 801306c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013070:	2b00      	cmp	r3, #0
 8013072:	d101      	bne.n	8013078 <pbuf_alloc+0x174>
        return NULL;
 8013074:	2300      	movs	r3, #0
 8013076:	e02b      	b.n	80130d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013078:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801307a:	3310      	adds	r3, #16
 801307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801307e:	4413      	add	r3, r2
 8013080:	3303      	adds	r3, #3
 8013082:	f023 0303 	bic.w	r3, r3, #3
 8013086:	4618      	mov	r0, r3
 8013088:	88b9      	ldrh	r1, [r7, #4]
 801308a:	88ba      	ldrh	r2, [r7, #4]
 801308c:	2300      	movs	r3, #0
 801308e:	9301      	str	r3, [sp, #4]
 8013090:	887b      	ldrh	r3, [r7, #2]
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	460b      	mov	r3, r1
 8013096:	4601      	mov	r1, r0
 8013098:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801309a:	f7ff ff09 	bl	8012eb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	f003 0303 	and.w	r3, r3, #3
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d010      	beq.n	80130cc <pbuf_alloc+0x1c8>
 80130aa:	4b0b      	ldr	r3, [pc, #44]	@ (80130d8 <pbuf_alloc+0x1d4>)
 80130ac:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80130b0:	490d      	ldr	r1, [pc, #52]	@ (80130e8 <pbuf_alloc+0x1e4>)
 80130b2:	480b      	ldr	r0, [pc, #44]	@ (80130e0 <pbuf_alloc+0x1dc>)
 80130b4:	f00a f9f4 	bl	801d4a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80130b8:	e008      	b.n	80130cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80130ba:	4b07      	ldr	r3, [pc, #28]	@ (80130d8 <pbuf_alloc+0x1d4>)
 80130bc:	f240 1227 	movw	r2, #295	@ 0x127
 80130c0:	490a      	ldr	r1, [pc, #40]	@ (80130ec <pbuf_alloc+0x1e8>)
 80130c2:	4807      	ldr	r0, [pc, #28]	@ (80130e0 <pbuf_alloc+0x1dc>)
 80130c4:	f00a f9ec 	bl	801d4a0 <iprintf>
      return NULL;
 80130c8:	2300      	movs	r3, #0
 80130ca:	e001      	b.n	80130d0 <pbuf_alloc+0x1cc>
      break;
 80130cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80130ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3728      	adds	r7, #40	@ 0x28
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	0801ed14 	.word	0x0801ed14
 80130dc:	0801ed44 	.word	0x0801ed44
 80130e0:	0801ed74 	.word	0x0801ed74
 80130e4:	0801ed9c 	.word	0x0801ed9c
 80130e8:	0801edd0 	.word	0x0801edd0
 80130ec:	0801edfc 	.word	0x0801edfc

080130f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af02      	add	r7, sp, #8
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	807b      	strh	r3, [r7, #2]
 80130fc:	4613      	mov	r3, r2
 80130fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013100:	883b      	ldrh	r3, [r7, #0]
 8013102:	2b41      	cmp	r3, #65	@ 0x41
 8013104:	d009      	beq.n	801311a <pbuf_alloc_reference+0x2a>
 8013106:	883b      	ldrh	r3, [r7, #0]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d006      	beq.n	801311a <pbuf_alloc_reference+0x2a>
 801310c:	4b0f      	ldr	r3, [pc, #60]	@ (801314c <pbuf_alloc_reference+0x5c>)
 801310e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013112:	490f      	ldr	r1, [pc, #60]	@ (8013150 <pbuf_alloc_reference+0x60>)
 8013114:	480f      	ldr	r0, [pc, #60]	@ (8013154 <pbuf_alloc_reference+0x64>)
 8013116:	f00a f9c3 	bl	801d4a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801311a:	200b      	movs	r0, #11
 801311c:	f7ff fabc 	bl	8012698 <memp_malloc>
 8013120:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d101      	bne.n	801312c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013128:	2300      	movs	r3, #0
 801312a:	e00b      	b.n	8013144 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801312c:	8879      	ldrh	r1, [r7, #2]
 801312e:	887a      	ldrh	r2, [r7, #2]
 8013130:	2300      	movs	r3, #0
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	883b      	ldrh	r3, [r7, #0]
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	460b      	mov	r3, r1
 801313a:	6879      	ldr	r1, [r7, #4]
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	f7ff feb7 	bl	8012eb0 <pbuf_init_alloced_pbuf>
  return p;
 8013142:	68fb      	ldr	r3, [r7, #12]
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	0801ed14 	.word	0x0801ed14
 8013150:	0801ee18 	.word	0x0801ee18
 8013154:	0801ed74 	.word	0x0801ed74

08013158 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b088      	sub	sp, #32
 801315c:	af02      	add	r7, sp, #8
 801315e:	607b      	str	r3, [r7, #4]
 8013160:	4603      	mov	r3, r0
 8013162:	73fb      	strb	r3, [r7, #15]
 8013164:	460b      	mov	r3, r1
 8013166:	81bb      	strh	r3, [r7, #12]
 8013168:	4613      	mov	r3, r2
 801316a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801316c:	7bfb      	ldrb	r3, [r7, #15]
 801316e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013170:	8a7b      	ldrh	r3, [r7, #18]
 8013172:	3303      	adds	r3, #3
 8013174:	f023 0203 	bic.w	r2, r3, #3
 8013178:	89bb      	ldrh	r3, [r7, #12]
 801317a:	441a      	add	r2, r3
 801317c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801317e:	429a      	cmp	r2, r3
 8013180:	d901      	bls.n	8013186 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013182:	2300      	movs	r3, #0
 8013184:	e018      	b.n	80131b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d007      	beq.n	801319c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801318c:	8a7b      	ldrh	r3, [r7, #18]
 801318e:	3303      	adds	r3, #3
 8013190:	f023 0303 	bic.w	r3, r3, #3
 8013194:	6a3a      	ldr	r2, [r7, #32]
 8013196:	4413      	add	r3, r2
 8013198:	617b      	str	r3, [r7, #20]
 801319a:	e001      	b.n	80131a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801319c:	2300      	movs	r3, #0
 801319e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	89b9      	ldrh	r1, [r7, #12]
 80131a4:	89ba      	ldrh	r2, [r7, #12]
 80131a6:	2302      	movs	r3, #2
 80131a8:	9301      	str	r3, [sp, #4]
 80131aa:	897b      	ldrh	r3, [r7, #10]
 80131ac:	9300      	str	r3, [sp, #0]
 80131ae:	460b      	mov	r3, r1
 80131b0:	6979      	ldr	r1, [r7, #20]
 80131b2:	f7ff fe7d 	bl	8012eb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80131b6:	687b      	ldr	r3, [r7, #4]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3718      	adds	r7, #24
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	460b      	mov	r3, r1
 80131ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <pbuf_realloc+0x20>
 80131d2:	4b3a      	ldr	r3, [pc, #232]	@ (80132bc <pbuf_realloc+0xfc>)
 80131d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80131d8:	4939      	ldr	r1, [pc, #228]	@ (80132c0 <pbuf_realloc+0x100>)
 80131da:	483a      	ldr	r0, [pc, #232]	@ (80132c4 <pbuf_realloc+0x104>)
 80131dc:	f00a f960 	bl	801d4a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	891b      	ldrh	r3, [r3, #8]
 80131e4:	887a      	ldrh	r2, [r7, #2]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d263      	bcs.n	80132b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	891a      	ldrh	r2, [r3, #8]
 80131ee:	887b      	ldrh	r3, [r7, #2]
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80131f4:	887b      	ldrh	r3, [r7, #2]
 80131f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80131fc:	e018      	b.n	8013230 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	895b      	ldrh	r3, [r3, #10]
 8013202:	897a      	ldrh	r2, [r7, #10]
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	891a      	ldrh	r2, [r3, #8]
 801320c:	893b      	ldrh	r3, [r7, #8]
 801320e:	1ad3      	subs	r3, r2, r3
 8013210:	b29a      	uxth	r2, r3
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <pbuf_realloc+0x70>
 8013222:	4b26      	ldr	r3, [pc, #152]	@ (80132bc <pbuf_realloc+0xfc>)
 8013224:	f240 12af 	movw	r2, #431	@ 0x1af
 8013228:	4927      	ldr	r1, [pc, #156]	@ (80132c8 <pbuf_realloc+0x108>)
 801322a:	4826      	ldr	r0, [pc, #152]	@ (80132c4 <pbuf_realloc+0x104>)
 801322c:	f00a f938 	bl	801d4a0 <iprintf>
  while (rem_len > q->len) {
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	895b      	ldrh	r3, [r3, #10]
 8013234:	897a      	ldrh	r2, [r7, #10]
 8013236:	429a      	cmp	r2, r3
 8013238:	d8e1      	bhi.n	80131fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	7b1b      	ldrb	r3, [r3, #12]
 801323e:	f003 030f 	and.w	r3, r3, #15
 8013242:	2b00      	cmp	r3, #0
 8013244:	d121      	bne.n	801328a <pbuf_realloc+0xca>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	895b      	ldrh	r3, [r3, #10]
 801324a:	897a      	ldrh	r2, [r7, #10]
 801324c:	429a      	cmp	r2, r3
 801324e:	d01c      	beq.n	801328a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	7b5b      	ldrb	r3, [r3, #13]
 8013254:	f003 0302 	and.w	r3, r3, #2
 8013258:	2b00      	cmp	r3, #0
 801325a:	d116      	bne.n	801328a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	b29a      	uxth	r2, r3
 8013266:	897b      	ldrh	r3, [r7, #10]
 8013268:	4413      	add	r3, r2
 801326a:	b29b      	uxth	r3, r3
 801326c:	4619      	mov	r1, r3
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7fe ff64 	bl	801213c <mem_trim>
 8013274:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d106      	bne.n	801328a <pbuf_realloc+0xca>
 801327c:	4b0f      	ldr	r3, [pc, #60]	@ (80132bc <pbuf_realloc+0xfc>)
 801327e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013282:	4912      	ldr	r1, [pc, #72]	@ (80132cc <pbuf_realloc+0x10c>)
 8013284:	480f      	ldr	r0, [pc, #60]	@ (80132c4 <pbuf_realloc+0x104>)
 8013286:	f00a f90b 	bl	801d4a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	897a      	ldrh	r2, [r7, #10]
 801328e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	895a      	ldrh	r2, [r3, #10]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d004      	beq.n	80132aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f000 f911 	bl	80134cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	601a      	str	r2, [r3, #0]
 80132b0:	e000      	b.n	80132b4 <pbuf_realloc+0xf4>
    return;
 80132b2:	bf00      	nop

}
 80132b4:	3710      	adds	r7, #16
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	0801ed14 	.word	0x0801ed14
 80132c0:	0801ee2c 	.word	0x0801ee2c
 80132c4:	0801ed74 	.word	0x0801ed74
 80132c8:	0801ee44 	.word	0x0801ee44
 80132cc:	0801ee5c 	.word	0x0801ee5c

080132d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	4613      	mov	r3, r2
 80132dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d106      	bne.n	80132f2 <pbuf_add_header_impl+0x22>
 80132e4:	4b2b      	ldr	r3, [pc, #172]	@ (8013394 <pbuf_add_header_impl+0xc4>)
 80132e6:	f240 12df 	movw	r2, #479	@ 0x1df
 80132ea:	492b      	ldr	r1, [pc, #172]	@ (8013398 <pbuf_add_header_impl+0xc8>)
 80132ec:	482b      	ldr	r0, [pc, #172]	@ (801339c <pbuf_add_header_impl+0xcc>)
 80132ee:	f00a f8d7 	bl	801d4a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d003      	beq.n	8013300 <pbuf_add_header_impl+0x30>
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80132fe:	d301      	bcc.n	8013304 <pbuf_add_header_impl+0x34>
    return 1;
 8013300:	2301      	movs	r3, #1
 8013302:	e043      	b.n	801338c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d101      	bne.n	801330e <pbuf_add_header_impl+0x3e>
    return 0;
 801330a:	2300      	movs	r3, #0
 801330c:	e03e      	b.n	801338c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	891a      	ldrh	r2, [r3, #8]
 8013316:	8a7b      	ldrh	r3, [r7, #18]
 8013318:	4413      	add	r3, r2
 801331a:	b29b      	uxth	r3, r3
 801331c:	8a7a      	ldrh	r2, [r7, #18]
 801331e:	429a      	cmp	r2, r3
 8013320:	d901      	bls.n	8013326 <pbuf_add_header_impl+0x56>
    return 1;
 8013322:	2301      	movs	r3, #1
 8013324:	e032      	b.n	801338c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	7b1b      	ldrb	r3, [r3, #12]
 801332a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801332c:	8a3b      	ldrh	r3, [r7, #16]
 801332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00c      	beq.n	8013350 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	685a      	ldr	r2, [r3, #4]
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	425b      	negs	r3, r3
 801333e:	4413      	add	r3, r2
 8013340:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	3310      	adds	r3, #16
 8013346:	697a      	ldr	r2, [r7, #20]
 8013348:	429a      	cmp	r2, r3
 801334a:	d20d      	bcs.n	8013368 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801334c:	2301      	movs	r3, #1
 801334e:	e01d      	b.n	801338c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013350:	79fb      	ldrb	r3, [r7, #7]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d006      	beq.n	8013364 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	685a      	ldr	r2, [r3, #4]
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	425b      	negs	r3, r3
 801335e:	4413      	add	r3, r2
 8013360:	617b      	str	r3, [r7, #20]
 8013362:	e001      	b.n	8013368 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013364:	2301      	movs	r3, #1
 8013366:	e011      	b.n	801338c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	697a      	ldr	r2, [r7, #20]
 801336c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	895a      	ldrh	r2, [r3, #10]
 8013372:	8a7b      	ldrh	r3, [r7, #18]
 8013374:	4413      	add	r3, r2
 8013376:	b29a      	uxth	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	891a      	ldrh	r2, [r3, #8]
 8013380:	8a7b      	ldrh	r3, [r7, #18]
 8013382:	4413      	add	r3, r2
 8013384:	b29a      	uxth	r2, r3
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	811a      	strh	r2, [r3, #8]


  return 0;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	0801ed14 	.word	0x0801ed14
 8013398:	0801ee78 	.word	0x0801ee78
 801339c:	0801ed74 	.word	0x0801ed74

080133a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80133aa:	2200      	movs	r2, #0
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff ff8e 	bl	80132d0 <pbuf_add_header_impl>
 80133b4:	4603      	mov	r3, r0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3708      	adds	r7, #8
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
	...

080133c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d106      	bne.n	80133de <pbuf_remove_header+0x1e>
 80133d0:	4b20      	ldr	r3, [pc, #128]	@ (8013454 <pbuf_remove_header+0x94>)
 80133d2:	f240 224b 	movw	r2, #587	@ 0x24b
 80133d6:	4920      	ldr	r1, [pc, #128]	@ (8013458 <pbuf_remove_header+0x98>)
 80133d8:	4820      	ldr	r0, [pc, #128]	@ (801345c <pbuf_remove_header+0x9c>)
 80133da:	f00a f861 	bl	801d4a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d003      	beq.n	80133ec <pbuf_remove_header+0x2c>
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133ea:	d301      	bcc.n	80133f0 <pbuf_remove_header+0x30>
    return 1;
 80133ec:	2301      	movs	r3, #1
 80133ee:	e02c      	b.n	801344a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <pbuf_remove_header+0x3a>
    return 0;
 80133f6:	2300      	movs	r3, #0
 80133f8:	e027      	b.n	801344a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	895b      	ldrh	r3, [r3, #10]
 8013402:	89fa      	ldrh	r2, [r7, #14]
 8013404:	429a      	cmp	r2, r3
 8013406:	d908      	bls.n	801341a <pbuf_remove_header+0x5a>
 8013408:	4b12      	ldr	r3, [pc, #72]	@ (8013454 <pbuf_remove_header+0x94>)
 801340a:	f240 2255 	movw	r2, #597	@ 0x255
 801340e:	4914      	ldr	r1, [pc, #80]	@ (8013460 <pbuf_remove_header+0xa0>)
 8013410:	4812      	ldr	r0, [pc, #72]	@ (801345c <pbuf_remove_header+0x9c>)
 8013412:	f00a f845 	bl	801d4a0 <iprintf>
 8013416:	2301      	movs	r3, #1
 8013418:	e017      	b.n	801344a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	685a      	ldr	r2, [r3, #4]
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	441a      	add	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	895a      	ldrh	r2, [r3, #10]
 8013430:	89fb      	ldrh	r3, [r7, #14]
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	b29a      	uxth	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	891a      	ldrh	r2, [r3, #8]
 801343e:	89fb      	ldrh	r3, [r7, #14]
 8013440:	1ad3      	subs	r3, r2, r3
 8013442:	b29a      	uxth	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013448:	2300      	movs	r3, #0
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	0801ed14 	.word	0x0801ed14
 8013458:	0801ee78 	.word	0x0801ee78
 801345c:	0801ed74 	.word	0x0801ed74
 8013460:	0801ee84 	.word	0x0801ee84

08013464 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	460b      	mov	r3, r1
 801346e:	807b      	strh	r3, [r7, #2]
 8013470:	4613      	mov	r3, r2
 8013472:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013478:	2b00      	cmp	r3, #0
 801347a:	da08      	bge.n	801348e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801347c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013480:	425b      	negs	r3, r3
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7ff ff9b 	bl	80133c0 <pbuf_remove_header>
 801348a:	4603      	mov	r3, r0
 801348c:	e007      	b.n	801349e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801348e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013492:	787a      	ldrb	r2, [r7, #1]
 8013494:	4619      	mov	r1, r3
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f7ff ff1a 	bl	80132d0 <pbuf_add_header_impl>
 801349c:	4603      	mov	r3, r0
  }
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b082      	sub	sp, #8
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	460b      	mov	r3, r1
 80134b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80134b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80134b6:	2201      	movs	r2, #1
 80134b8:	4619      	mov	r1, r3
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff ffd2 	bl	8013464 <pbuf_header_impl>
 80134c0:	4603      	mov	r3, r0
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
	...

080134cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b088      	sub	sp, #32
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10b      	bne.n	80134f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <pbuf_free+0x22>
 80134e0:	4b3b      	ldr	r3, [pc, #236]	@ (80135d0 <pbuf_free+0x104>)
 80134e2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80134e6:	493b      	ldr	r1, [pc, #236]	@ (80135d4 <pbuf_free+0x108>)
 80134e8:	483b      	ldr	r0, [pc, #236]	@ (80135d8 <pbuf_free+0x10c>)
 80134ea:	f009 ffd9 	bl	801d4a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80134ee:	2300      	movs	r3, #0
 80134f0:	e069      	b.n	80135c6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80134f2:	2300      	movs	r3, #0
 80134f4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80134f6:	e062      	b.n	80135be <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80134f8:	f008 fdf6 	bl	801c0e8 <sys_arch_protect>
 80134fc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	7b9b      	ldrb	r3, [r3, #14]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <pbuf_free+0x48>
 8013506:	4b32      	ldr	r3, [pc, #200]	@ (80135d0 <pbuf_free+0x104>)
 8013508:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801350c:	4933      	ldr	r1, [pc, #204]	@ (80135dc <pbuf_free+0x110>)
 801350e:	4832      	ldr	r0, [pc, #200]	@ (80135d8 <pbuf_free+0x10c>)
 8013510:	f009 ffc6 	bl	801d4a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	7b9b      	ldrb	r3, [r3, #14]
 8013518:	3b01      	subs	r3, #1
 801351a:	b2da      	uxtb	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	739a      	strb	r2, [r3, #14]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	7b9b      	ldrb	r3, [r3, #14]
 8013524:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013526:	69b8      	ldr	r0, [r7, #24]
 8013528:	f008 fdec 	bl	801c104 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801352c:	7dfb      	ldrb	r3, [r7, #23]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d143      	bne.n	80135ba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	7b1b      	ldrb	r3, [r3, #12]
 801353c:	f003 030f 	and.w	r3, r3, #15
 8013540:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	7b5b      	ldrb	r3, [r3, #13]
 8013546:	f003 0302 	and.w	r3, r3, #2
 801354a:	2b00      	cmp	r3, #0
 801354c:	d011      	beq.n	8013572 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	691b      	ldr	r3, [r3, #16]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d106      	bne.n	8013568 <pbuf_free+0x9c>
 801355a:	4b1d      	ldr	r3, [pc, #116]	@ (80135d0 <pbuf_free+0x104>)
 801355c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013560:	491f      	ldr	r1, [pc, #124]	@ (80135e0 <pbuf_free+0x114>)
 8013562:	481d      	ldr	r0, [pc, #116]	@ (80135d8 <pbuf_free+0x10c>)
 8013564:	f009 ff9c 	bl	801d4a0 <iprintf>
        pc->custom_free_function(p);
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	4798      	blx	r3
 8013570:	e01d      	b.n	80135ae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013572:	7bfb      	ldrb	r3, [r7, #15]
 8013574:	2b02      	cmp	r3, #2
 8013576:	d104      	bne.n	8013582 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013578:	6879      	ldr	r1, [r7, #4]
 801357a:	200c      	movs	r0, #12
 801357c:	f7ff f902 	bl	8012784 <memp_free>
 8013580:	e015      	b.n	80135ae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013582:	7bfb      	ldrb	r3, [r7, #15]
 8013584:	2b01      	cmp	r3, #1
 8013586:	d104      	bne.n	8013592 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	200b      	movs	r0, #11
 801358c:	f7ff f8fa 	bl	8012784 <memp_free>
 8013590:	e00d      	b.n	80135ae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013592:	7bfb      	ldrb	r3, [r7, #15]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d103      	bne.n	80135a0 <pbuf_free+0xd4>
          mem_free(p);
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7fe fd3f 	bl	801201c <mem_free>
 801359e:	e006      	b.n	80135ae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80135a0:	4b0b      	ldr	r3, [pc, #44]	@ (80135d0 <pbuf_free+0x104>)
 80135a2:	f240 320f 	movw	r2, #783	@ 0x30f
 80135a6:	490f      	ldr	r1, [pc, #60]	@ (80135e4 <pbuf_free+0x118>)
 80135a8:	480b      	ldr	r0, [pc, #44]	@ (80135d8 <pbuf_free+0x10c>)
 80135aa:	f009 ff79 	bl	801d4a0 <iprintf>
        }
      }
      count++;
 80135ae:	7ffb      	ldrb	r3, [r7, #31]
 80135b0:	3301      	adds	r3, #1
 80135b2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	607b      	str	r3, [r7, #4]
 80135b8:	e001      	b.n	80135be <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80135ba:	2300      	movs	r3, #0
 80135bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d199      	bne.n	80134f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80135c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3720      	adds	r7, #32
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	0801ed14 	.word	0x0801ed14
 80135d4:	0801ee78 	.word	0x0801ee78
 80135d8:	0801ed74 	.word	0x0801ed74
 80135dc:	0801eea4 	.word	0x0801eea4
 80135e0:	0801eebc 	.word	0x0801eebc
 80135e4:	0801eee0 	.word	0x0801eee0

080135e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80135f0:	2300      	movs	r3, #0
 80135f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80135f4:	e005      	b.n	8013602 <pbuf_clen+0x1a>
    ++len;
 80135f6:	89fb      	ldrh	r3, [r7, #14]
 80135f8:	3301      	adds	r3, #1
 80135fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d1f6      	bne.n	80135f6 <pbuf_clen+0xe>
  }
  return len;
 8013608:	89fb      	ldrh	r3, [r7, #14]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3714      	adds	r7, #20
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr
	...

08013618 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d016      	beq.n	8013654 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013626:	f008 fd5f 	bl	801c0e8 <sys_arch_protect>
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	7b9b      	ldrb	r3, [r3, #14]
 8013630:	3301      	adds	r3, #1
 8013632:	b2da      	uxtb	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	739a      	strb	r2, [r3, #14]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f008 fd63 	bl	801c104 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	7b9b      	ldrb	r3, [r3, #14]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d106      	bne.n	8013654 <pbuf_ref+0x3c>
 8013646:	4b05      	ldr	r3, [pc, #20]	@ (801365c <pbuf_ref+0x44>)
 8013648:	f240 3242 	movw	r2, #834	@ 0x342
 801364c:	4904      	ldr	r1, [pc, #16]	@ (8013660 <pbuf_ref+0x48>)
 801364e:	4805      	ldr	r0, [pc, #20]	@ (8013664 <pbuf_ref+0x4c>)
 8013650:	f009 ff26 	bl	801d4a0 <iprintf>
  }
}
 8013654:	bf00      	nop
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	0801ed14 	.word	0x0801ed14
 8013660:	0801eef4 	.word	0x0801eef4
 8013664:	0801ed74 	.word	0x0801ed74

08013668 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <pbuf_cat+0x16>
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d107      	bne.n	801368e <pbuf_cat+0x26>
 801367e:	4b20      	ldr	r3, [pc, #128]	@ (8013700 <pbuf_cat+0x98>)
 8013680:	f240 3259 	movw	r2, #857	@ 0x359
 8013684:	491f      	ldr	r1, [pc, #124]	@ (8013704 <pbuf_cat+0x9c>)
 8013686:	4820      	ldr	r0, [pc, #128]	@ (8013708 <pbuf_cat+0xa0>)
 8013688:	f009 ff0a 	bl	801d4a0 <iprintf>
 801368c:	e034      	b.n	80136f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	60fb      	str	r3, [r7, #12]
 8013692:	e00a      	b.n	80136aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	891a      	ldrh	r2, [r3, #8]
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	891b      	ldrh	r3, [r3, #8]
 801369c:	4413      	add	r3, r2
 801369e:	b29a      	uxth	r2, r3
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	60fb      	str	r3, [r7, #12]
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d1f0      	bne.n	8013694 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	891a      	ldrh	r2, [r3, #8]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	895b      	ldrh	r3, [r3, #10]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d006      	beq.n	80136cc <pbuf_cat+0x64>
 80136be:	4b10      	ldr	r3, [pc, #64]	@ (8013700 <pbuf_cat+0x98>)
 80136c0:	f240 3262 	movw	r2, #866	@ 0x362
 80136c4:	4911      	ldr	r1, [pc, #68]	@ (801370c <pbuf_cat+0xa4>)
 80136c6:	4810      	ldr	r0, [pc, #64]	@ (8013708 <pbuf_cat+0xa0>)
 80136c8:	f009 feea 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d006      	beq.n	80136e2 <pbuf_cat+0x7a>
 80136d4:	4b0a      	ldr	r3, [pc, #40]	@ (8013700 <pbuf_cat+0x98>)
 80136d6:	f240 3263 	movw	r2, #867	@ 0x363
 80136da:	490d      	ldr	r1, [pc, #52]	@ (8013710 <pbuf_cat+0xa8>)
 80136dc:	480a      	ldr	r0, [pc, #40]	@ (8013708 <pbuf_cat+0xa0>)
 80136de:	f009 fedf 	bl	801d4a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	891a      	ldrh	r2, [r3, #8]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	891b      	ldrh	r3, [r3, #8]
 80136ea:	4413      	add	r3, r2
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80136f8:	3710      	adds	r7, #16
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	0801ed14 	.word	0x0801ed14
 8013704:	0801ef08 	.word	0x0801ef08
 8013708:	0801ed74 	.word	0x0801ed74
 801370c:	0801ef40 	.word	0x0801ef40
 8013710:	0801ef70 	.word	0x0801ef70

08013714 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801371e:	6839      	ldr	r1, [r7, #0]
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ffa1 	bl	8013668 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013726:	6838      	ldr	r0, [r7, #0]
 8013728:	f7ff ff76 	bl	8013618 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801372c:	bf00      	nop
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801373e:	2300      	movs	r3, #0
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	2300      	movs	r3, #0
 8013744:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d008      	beq.n	801375e <pbuf_copy+0x2a>
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d005      	beq.n	801375e <pbuf_copy+0x2a>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	891a      	ldrh	r2, [r3, #8]
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	891b      	ldrh	r3, [r3, #8]
 801375a:	429a      	cmp	r2, r3
 801375c:	d209      	bcs.n	8013772 <pbuf_copy+0x3e>
 801375e:	4b57      	ldr	r3, [pc, #348]	@ (80138bc <pbuf_copy+0x188>)
 8013760:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013764:	4956      	ldr	r1, [pc, #344]	@ (80138c0 <pbuf_copy+0x18c>)
 8013766:	4857      	ldr	r0, [pc, #348]	@ (80138c4 <pbuf_copy+0x190>)
 8013768:	f009 fe9a 	bl	801d4a0 <iprintf>
 801376c:	f06f 030f 	mvn.w	r3, #15
 8013770:	e09f      	b.n	80138b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	895b      	ldrh	r3, [r3, #10]
 8013776:	461a      	mov	r2, r3
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	1ad2      	subs	r2, r2, r3
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	895b      	ldrh	r3, [r3, #10]
 8013780:	4619      	mov	r1, r3
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	1acb      	subs	r3, r1, r3
 8013786:	429a      	cmp	r2, r3
 8013788:	d306      	bcc.n	8013798 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	895b      	ldrh	r3, [r3, #10]
 801378e:	461a      	mov	r2, r3
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	1ad3      	subs	r3, r2, r3
 8013794:	60fb      	str	r3, [r7, #12]
 8013796:	e005      	b.n	80137a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	895b      	ldrh	r3, [r3, #10]
 801379c:	461a      	mov	r2, r3
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	1ad3      	subs	r3, r2, r3
 80137a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	685a      	ldr	r2, [r3, #4]
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	18d0      	adds	r0, r2, r3
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	4413      	add	r3, r2
 80137b4:	68fa      	ldr	r2, [r7, #12]
 80137b6:	4619      	mov	r1, r3
 80137b8:	f009 ffab 	bl	801d712 <memcpy>
    offset_to += len;
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	4413      	add	r3, r2
 80137c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	4413      	add	r3, r2
 80137ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	895b      	ldrh	r3, [r3, #10]
 80137d0:	461a      	mov	r2, r3
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d906      	bls.n	80137e6 <pbuf_copy+0xb2>
 80137d8:	4b38      	ldr	r3, [pc, #224]	@ (80138bc <pbuf_copy+0x188>)
 80137da:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80137de:	493a      	ldr	r1, [pc, #232]	@ (80138c8 <pbuf_copy+0x194>)
 80137e0:	4838      	ldr	r0, [pc, #224]	@ (80138c4 <pbuf_copy+0x190>)
 80137e2:	f009 fe5d 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	895b      	ldrh	r3, [r3, #10]
 80137ea:	461a      	mov	r2, r3
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d906      	bls.n	8013800 <pbuf_copy+0xcc>
 80137f2:	4b32      	ldr	r3, [pc, #200]	@ (80138bc <pbuf_copy+0x188>)
 80137f4:	f240 32da 	movw	r2, #986	@ 0x3da
 80137f8:	4934      	ldr	r1, [pc, #208]	@ (80138cc <pbuf_copy+0x198>)
 80137fa:	4832      	ldr	r0, [pc, #200]	@ (80138c4 <pbuf_copy+0x190>)
 80137fc:	f009 fe50 	bl	801d4a0 <iprintf>
    if (offset_from >= p_from->len) {
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	895b      	ldrh	r3, [r3, #10]
 8013804:	461a      	mov	r2, r3
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	4293      	cmp	r3, r2
 801380a:	d304      	bcc.n	8013816 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	895b      	ldrh	r3, [r3, #10]
 801381a:	461a      	mov	r2, r3
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	4293      	cmp	r3, r2
 8013820:	d114      	bne.n	801384c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013822:	2300      	movs	r3, #0
 8013824:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d10c      	bne.n	801384c <pbuf_copy+0x118>
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d009      	beq.n	801384c <pbuf_copy+0x118>
 8013838:	4b20      	ldr	r3, [pc, #128]	@ (80138bc <pbuf_copy+0x188>)
 801383a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801383e:	4924      	ldr	r1, [pc, #144]	@ (80138d0 <pbuf_copy+0x19c>)
 8013840:	4820      	ldr	r0, [pc, #128]	@ (80138c4 <pbuf_copy+0x190>)
 8013842:	f009 fe2d 	bl	801d4a0 <iprintf>
 8013846:	f06f 030f 	mvn.w	r3, #15
 801384a:	e032      	b.n	80138b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d013      	beq.n	801387a <pbuf_copy+0x146>
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	895a      	ldrh	r2, [r3, #10]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	891b      	ldrh	r3, [r3, #8]
 801385a:	429a      	cmp	r2, r3
 801385c:	d10d      	bne.n	801387a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d009      	beq.n	801387a <pbuf_copy+0x146>
 8013866:	4b15      	ldr	r3, [pc, #84]	@ (80138bc <pbuf_copy+0x188>)
 8013868:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801386c:	4919      	ldr	r1, [pc, #100]	@ (80138d4 <pbuf_copy+0x1a0>)
 801386e:	4815      	ldr	r0, [pc, #84]	@ (80138c4 <pbuf_copy+0x190>)
 8013870:	f009 fe16 	bl	801d4a0 <iprintf>
 8013874:	f06f 0305 	mvn.w	r3, #5
 8013878:	e01b      	b.n	80138b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d013      	beq.n	80138a8 <pbuf_copy+0x174>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	895a      	ldrh	r2, [r3, #10]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	891b      	ldrh	r3, [r3, #8]
 8013888:	429a      	cmp	r2, r3
 801388a:	d10d      	bne.n	80138a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d009      	beq.n	80138a8 <pbuf_copy+0x174>
 8013894:	4b09      	ldr	r3, [pc, #36]	@ (80138bc <pbuf_copy+0x188>)
 8013896:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801389a:	490e      	ldr	r1, [pc, #56]	@ (80138d4 <pbuf_copy+0x1a0>)
 801389c:	4809      	ldr	r0, [pc, #36]	@ (80138c4 <pbuf_copy+0x190>)
 801389e:	f009 fdff 	bl	801d4a0 <iprintf>
 80138a2:	f06f 0305 	mvn.w	r3, #5
 80138a6:	e004      	b.n	80138b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	f47f af61 	bne.w	8013772 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80138b0:	2300      	movs	r3, #0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3718      	adds	r7, #24
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	0801ed14 	.word	0x0801ed14
 80138c0:	0801efbc 	.word	0x0801efbc
 80138c4:	0801ed74 	.word	0x0801ed74
 80138c8:	0801efec 	.word	0x0801efec
 80138cc:	0801f004 	.word	0x0801f004
 80138d0:	0801f020 	.word	0x0801f020
 80138d4:	0801f030 	.word	0x0801f030

080138d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b088      	sub	sp, #32
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	4611      	mov	r1, r2
 80138e4:	461a      	mov	r2, r3
 80138e6:	460b      	mov	r3, r1
 80138e8:	80fb      	strh	r3, [r7, #6]
 80138ea:	4613      	mov	r3, r2
 80138ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80138ee:	2300      	movs	r3, #0
 80138f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d108      	bne.n	801390e <pbuf_copy_partial+0x36>
 80138fc:	4b2b      	ldr	r3, [pc, #172]	@ (80139ac <pbuf_copy_partial+0xd4>)
 80138fe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8013902:	492b      	ldr	r1, [pc, #172]	@ (80139b0 <pbuf_copy_partial+0xd8>)
 8013904:	482b      	ldr	r0, [pc, #172]	@ (80139b4 <pbuf_copy_partial+0xdc>)
 8013906:	f009 fdcb 	bl	801d4a0 <iprintf>
 801390a:	2300      	movs	r3, #0
 801390c:	e04a      	b.n	80139a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d108      	bne.n	8013926 <pbuf_copy_partial+0x4e>
 8013914:	4b25      	ldr	r3, [pc, #148]	@ (80139ac <pbuf_copy_partial+0xd4>)
 8013916:	f240 420b 	movw	r2, #1035	@ 0x40b
 801391a:	4927      	ldr	r1, [pc, #156]	@ (80139b8 <pbuf_copy_partial+0xe0>)
 801391c:	4825      	ldr	r0, [pc, #148]	@ (80139b4 <pbuf_copy_partial+0xdc>)
 801391e:	f009 fdbf 	bl	801d4a0 <iprintf>
 8013922:	2300      	movs	r3, #0
 8013924:	e03e      	b.n	80139a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	61fb      	str	r3, [r7, #28]
 801392a:	e034      	b.n	8013996 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801392c:	88bb      	ldrh	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d00a      	beq.n	8013948 <pbuf_copy_partial+0x70>
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	895b      	ldrh	r3, [r3, #10]
 8013936:	88ba      	ldrh	r2, [r7, #4]
 8013938:	429a      	cmp	r2, r3
 801393a:	d305      	bcc.n	8013948 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	895b      	ldrh	r3, [r3, #10]
 8013940:	88ba      	ldrh	r2, [r7, #4]
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	80bb      	strh	r3, [r7, #4]
 8013946:	e023      	b.n	8013990 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	895a      	ldrh	r2, [r3, #10]
 801394c:	88bb      	ldrh	r3, [r7, #4]
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013952:	8b3a      	ldrh	r2, [r7, #24]
 8013954:	88fb      	ldrh	r3, [r7, #6]
 8013956:	429a      	cmp	r2, r3
 8013958:	d901      	bls.n	801395e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801395a:	88fb      	ldrh	r3, [r7, #6]
 801395c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801395e:	8b7b      	ldrh	r3, [r7, #26]
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	18d0      	adds	r0, r2, r3
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	685a      	ldr	r2, [r3, #4]
 8013968:	88bb      	ldrh	r3, [r7, #4]
 801396a:	4413      	add	r3, r2
 801396c:	8b3a      	ldrh	r2, [r7, #24]
 801396e:	4619      	mov	r1, r3
 8013970:	f009 fecf 	bl	801d712 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013974:	8afa      	ldrh	r2, [r7, #22]
 8013976:	8b3b      	ldrh	r3, [r7, #24]
 8013978:	4413      	add	r3, r2
 801397a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801397c:	8b7a      	ldrh	r2, [r7, #26]
 801397e:	8b3b      	ldrh	r3, [r7, #24]
 8013980:	4413      	add	r3, r2
 8013982:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013984:	88fa      	ldrh	r2, [r7, #6]
 8013986:	8b3b      	ldrh	r3, [r7, #24]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801398c:	2300      	movs	r3, #0
 801398e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	61fb      	str	r3, [r7, #28]
 8013996:	88fb      	ldrh	r3, [r7, #6]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d002      	beq.n	80139a2 <pbuf_copy_partial+0xca>
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1c4      	bne.n	801392c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80139a2:	8afb      	ldrh	r3, [r7, #22]
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3720      	adds	r7, #32
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801ed14 	.word	0x0801ed14
 80139b0:	0801f05c 	.word	0x0801f05c
 80139b4:	0801ed74 	.word	0x0801ed74
 80139b8:	0801f07c 	.word	0x0801f07c

080139bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	4603      	mov	r3, r0
 80139c4:	603a      	str	r2, [r7, #0]
 80139c6:	71fb      	strb	r3, [r7, #7]
 80139c8:	460b      	mov	r3, r1
 80139ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	8919      	ldrh	r1, [r3, #8]
 80139d0:	88ba      	ldrh	r2, [r7, #4]
 80139d2:	79fb      	ldrb	r3, [r7, #7]
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff fa95 	bl	8012f04 <pbuf_alloc>
 80139da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d101      	bne.n	80139e6 <pbuf_clone+0x2a>
    return NULL;
 80139e2:	2300      	movs	r3, #0
 80139e4:	e011      	b.n	8013a0a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80139e6:	6839      	ldr	r1, [r7, #0]
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f7ff fea3 	bl	8013734 <pbuf_copy>
 80139ee:	4603      	mov	r3, r0
 80139f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80139f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d006      	beq.n	8013a08 <pbuf_clone+0x4c>
 80139fa:	4b06      	ldr	r3, [pc, #24]	@ (8013a14 <pbuf_clone+0x58>)
 80139fc:	f240 5224 	movw	r2, #1316	@ 0x524
 8013a00:	4905      	ldr	r1, [pc, #20]	@ (8013a18 <pbuf_clone+0x5c>)
 8013a02:	4806      	ldr	r0, [pc, #24]	@ (8013a1c <pbuf_clone+0x60>)
 8013a04:	f009 fd4c 	bl	801d4a0 <iprintf>
  return q;
 8013a08:	68fb      	ldr	r3, [r7, #12]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	0801ed14 	.word	0x0801ed14
 8013a18:	0801f188 	.word	0x0801f188
 8013a1c:	0801ed74 	.word	0x0801ed74

08013a20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a24:	f009 fc3c 	bl	801d2a0 <rand>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013a36:	b29a      	uxth	r2, r3
 8013a38:	4b01      	ldr	r3, [pc, #4]	@ (8013a40 <tcp_init+0x20>)
 8013a3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013a3c:	bf00      	nop
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20000024 	.word	0x20000024

08013a44 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	7d1b      	ldrb	r3, [r3, #20]
 8013a50:	2b01      	cmp	r3, #1
 8013a52:	d105      	bne.n	8013a60 <tcp_free+0x1c>
 8013a54:	4b06      	ldr	r3, [pc, #24]	@ (8013a70 <tcp_free+0x2c>)
 8013a56:	22d4      	movs	r2, #212	@ 0xd4
 8013a58:	4906      	ldr	r1, [pc, #24]	@ (8013a74 <tcp_free+0x30>)
 8013a5a:	4807      	ldr	r0, [pc, #28]	@ (8013a78 <tcp_free+0x34>)
 8013a5c:	f009 fd20 	bl	801d4a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	2001      	movs	r0, #1
 8013a64:	f7fe fe8e 	bl	8012784 <memp_free>
}
 8013a68:	bf00      	nop
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	0801f214 	.word	0x0801f214
 8013a74:	0801f244 	.word	0x0801f244
 8013a78:	0801f258 	.word	0x0801f258

08013a7c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	7d1b      	ldrb	r3, [r3, #20]
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d105      	bne.n	8013a98 <tcp_free_listen+0x1c>
 8013a8c:	4b06      	ldr	r3, [pc, #24]	@ (8013aa8 <tcp_free_listen+0x2c>)
 8013a8e:	22df      	movs	r2, #223	@ 0xdf
 8013a90:	4906      	ldr	r1, [pc, #24]	@ (8013aac <tcp_free_listen+0x30>)
 8013a92:	4807      	ldr	r0, [pc, #28]	@ (8013ab0 <tcp_free_listen+0x34>)
 8013a94:	f009 fd04 	bl	801d4a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013a98:	6879      	ldr	r1, [r7, #4]
 8013a9a:	2002      	movs	r0, #2
 8013a9c:	f7fe fe72 	bl	8012784 <memp_free>
}
 8013aa0:	bf00      	nop
 8013aa2:	3708      	adds	r7, #8
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	0801f214 	.word	0x0801f214
 8013aac:	0801f280 	.word	0x0801f280
 8013ab0:	0801f258 	.word	0x0801f258

08013ab4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013ab8:	f000 fea4 	bl	8014804 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013abc:	4b07      	ldr	r3, [pc, #28]	@ (8013adc <tcp_tmr+0x28>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	b2da      	uxtb	r2, r3
 8013ac4:	4b05      	ldr	r3, [pc, #20]	@ (8013adc <tcp_tmr+0x28>)
 8013ac6:	701a      	strb	r2, [r3, #0]
 8013ac8:	4b04      	ldr	r3, [pc, #16]	@ (8013adc <tcp_tmr+0x28>)
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	f003 0301 	and.w	r3, r3, #1
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d001      	beq.n	8013ad8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013ad4:	f000 fb54 	bl	8014180 <tcp_slowtmr>
  }
}
 8013ad8:	bf00      	nop
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	20027531 	.word	0x20027531

08013ae0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d105      	bne.n	8013afc <tcp_remove_listener+0x1c>
 8013af0:	4b0d      	ldr	r3, [pc, #52]	@ (8013b28 <tcp_remove_listener+0x48>)
 8013af2:	22ff      	movs	r2, #255	@ 0xff
 8013af4:	490d      	ldr	r1, [pc, #52]	@ (8013b2c <tcp_remove_listener+0x4c>)
 8013af6:	480e      	ldr	r0, [pc, #56]	@ (8013b30 <tcp_remove_listener+0x50>)
 8013af8:	f009 fcd2 	bl	801d4a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	60fb      	str	r3, [r7, #12]
 8013b00:	e00a      	b.n	8013b18 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013b06:	683a      	ldr	r2, [r7, #0]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d102      	bne.n	8013b12 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	68db      	ldr	r3, [r3, #12]
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1f1      	bne.n	8013b02 <tcp_remove_listener+0x22>
    }
  }
}
 8013b1e:	bf00      	nop
 8013b20:	bf00      	nop
 8013b22:	3710      	adds	r7, #16
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	0801f214 	.word	0x0801f214
 8013b2c:	0801f29c 	.word	0x0801f29c
 8013b30:	0801f258 	.word	0x0801f258

08013b34 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d106      	bne.n	8013b50 <tcp_listen_closed+0x1c>
 8013b42:	4b14      	ldr	r3, [pc, #80]	@ (8013b94 <tcp_listen_closed+0x60>)
 8013b44:	f240 1211 	movw	r2, #273	@ 0x111
 8013b48:	4913      	ldr	r1, [pc, #76]	@ (8013b98 <tcp_listen_closed+0x64>)
 8013b4a:	4814      	ldr	r0, [pc, #80]	@ (8013b9c <tcp_listen_closed+0x68>)
 8013b4c:	f009 fca8 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	7d1b      	ldrb	r3, [r3, #20]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d006      	beq.n	8013b66 <tcp_listen_closed+0x32>
 8013b58:	4b0e      	ldr	r3, [pc, #56]	@ (8013b94 <tcp_listen_closed+0x60>)
 8013b5a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8013b5e:	4910      	ldr	r1, [pc, #64]	@ (8013ba0 <tcp_listen_closed+0x6c>)
 8013b60:	480e      	ldr	r0, [pc, #56]	@ (8013b9c <tcp_listen_closed+0x68>)
 8013b62:	f009 fc9d 	bl	801d4a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013b66:	2301      	movs	r3, #1
 8013b68:	60fb      	str	r3, [r7, #12]
 8013b6a:	e00b      	b.n	8013b84 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8013ba4 <tcp_listen_closed+0x70>)
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	6879      	ldr	r1, [r7, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff ffb1 	bl	8013ae0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	3301      	adds	r3, #1
 8013b82:	60fb      	str	r3, [r7, #12]
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	2b03      	cmp	r3, #3
 8013b88:	d9f0      	bls.n	8013b6c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013b8a:	bf00      	nop
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	0801f214 	.word	0x0801f214
 8013b98:	0801f2c4 	.word	0x0801f2c4
 8013b9c:	0801f258 	.word	0x0801f258
 8013ba0:	0801f2d0 	.word	0x0801f2d0
 8013ba4:	08021a7c 	.word	0x08021a7c

08013ba8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013ba8:	b5b0      	push	{r4, r5, r7, lr}
 8013baa:	b088      	sub	sp, #32
 8013bac:	af04      	add	r7, sp, #16
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d106      	bne.n	8013bc8 <tcp_close_shutdown+0x20>
 8013bba:	4b63      	ldr	r3, [pc, #396]	@ (8013d48 <tcp_close_shutdown+0x1a0>)
 8013bbc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8013bc0:	4962      	ldr	r1, [pc, #392]	@ (8013d4c <tcp_close_shutdown+0x1a4>)
 8013bc2:	4863      	ldr	r0, [pc, #396]	@ (8013d50 <tcp_close_shutdown+0x1a8>)
 8013bc4:	f009 fc6c 	bl	801d4a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013bc8:	78fb      	ldrb	r3, [r7, #3]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d066      	beq.n	8013c9c <tcp_close_shutdown+0xf4>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	7d1b      	ldrb	r3, [r3, #20]
 8013bd2:	2b04      	cmp	r3, #4
 8013bd4:	d003      	beq.n	8013bde <tcp_close_shutdown+0x36>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	7d1b      	ldrb	r3, [r3, #20]
 8013bda:	2b07      	cmp	r3, #7
 8013bdc:	d15e      	bne.n	8013c9c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d104      	bne.n	8013bf0 <tcp_close_shutdown+0x48>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013bee:	d055      	beq.n	8013c9c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	8b5b      	ldrh	r3, [r3, #26]
 8013bf4:	f003 0310 	and.w	r3, r3, #16
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d106      	bne.n	8013c0a <tcp_close_shutdown+0x62>
 8013bfc:	4b52      	ldr	r3, [pc, #328]	@ (8013d48 <tcp_close_shutdown+0x1a0>)
 8013bfe:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8013c02:	4954      	ldr	r1, [pc, #336]	@ (8013d54 <tcp_close_shutdown+0x1ac>)
 8013c04:	4852      	ldr	r0, [pc, #328]	@ (8013d50 <tcp_close_shutdown+0x1a8>)
 8013c06:	f009 fc4b 	bl	801d4a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013c12:	687d      	ldr	r5, [r7, #4]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	3304      	adds	r3, #4
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	8ad2      	ldrh	r2, [r2, #22]
 8013c1c:	6879      	ldr	r1, [r7, #4]
 8013c1e:	8b09      	ldrh	r1, [r1, #24]
 8013c20:	9102      	str	r1, [sp, #8]
 8013c22:	9201      	str	r2, [sp, #4]
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	462b      	mov	r3, r5
 8013c28:	4622      	mov	r2, r4
 8013c2a:	4601      	mov	r1, r0
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f004 fe8d 	bl	801894c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f001 f8c8 	bl	8014dc8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013c38:	4b47      	ldr	r3, [pc, #284]	@ (8013d58 <tcp_close_shutdown+0x1b0>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d105      	bne.n	8013c4e <tcp_close_shutdown+0xa6>
 8013c42:	4b45      	ldr	r3, [pc, #276]	@ (8013d58 <tcp_close_shutdown+0x1b0>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	4a43      	ldr	r2, [pc, #268]	@ (8013d58 <tcp_close_shutdown+0x1b0>)
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	e013      	b.n	8013c76 <tcp_close_shutdown+0xce>
 8013c4e:	4b42      	ldr	r3, [pc, #264]	@ (8013d58 <tcp_close_shutdown+0x1b0>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	60fb      	str	r3, [r7, #12]
 8013c54:	e00c      	b.n	8013c70 <tcp_close_shutdown+0xc8>
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d104      	bne.n	8013c6a <tcp_close_shutdown+0xc2>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	68da      	ldr	r2, [r3, #12]
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	60da      	str	r2, [r3, #12]
 8013c68:	e005      	b.n	8013c76 <tcp_close_shutdown+0xce>
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	60fb      	str	r3, [r7, #12]
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d1ef      	bne.n	8013c56 <tcp_close_shutdown+0xae>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	60da      	str	r2, [r3, #12]
 8013c7c:	4b37      	ldr	r3, [pc, #220]	@ (8013d5c <tcp_close_shutdown+0x1b4>)
 8013c7e:	2201      	movs	r2, #1
 8013c80:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013c82:	4b37      	ldr	r3, [pc, #220]	@ (8013d60 <tcp_close_shutdown+0x1b8>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d102      	bne.n	8013c92 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013c8c:	f003 fd5c 	bl	8017748 <tcp_trigger_input_pcb_close>
 8013c90:	e002      	b.n	8013c98 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f7ff fed6 	bl	8013a44 <tcp_free>
      }
      return ERR_OK;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	e050      	b.n	8013d3e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ca0:	2b02      	cmp	r3, #2
 8013ca2:	d03b      	beq.n	8013d1c <tcp_close_shutdown+0x174>
 8013ca4:	2b02      	cmp	r3, #2
 8013ca6:	dc44      	bgt.n	8013d32 <tcp_close_shutdown+0x18a>
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <tcp_close_shutdown+0x10a>
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	d02a      	beq.n	8013d06 <tcp_close_shutdown+0x15e>
 8013cb0:	e03f      	b.n	8013d32 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	8adb      	ldrh	r3, [r3, #22]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d021      	beq.n	8013cfe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013cba:	4b2a      	ldr	r3, [pc, #168]	@ (8013d64 <tcp_close_shutdown+0x1bc>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d105      	bne.n	8013cd0 <tcp_close_shutdown+0x128>
 8013cc4:	4b27      	ldr	r3, [pc, #156]	@ (8013d64 <tcp_close_shutdown+0x1bc>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	4a26      	ldr	r2, [pc, #152]	@ (8013d64 <tcp_close_shutdown+0x1bc>)
 8013ccc:	6013      	str	r3, [r2, #0]
 8013cce:	e013      	b.n	8013cf8 <tcp_close_shutdown+0x150>
 8013cd0:	4b24      	ldr	r3, [pc, #144]	@ (8013d64 <tcp_close_shutdown+0x1bc>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	60bb      	str	r3, [r7, #8]
 8013cd6:	e00c      	b.n	8013cf2 <tcp_close_shutdown+0x14a>
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d104      	bne.n	8013cec <tcp_close_shutdown+0x144>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	68da      	ldr	r2, [r3, #12]
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	60da      	str	r2, [r3, #12]
 8013cea:	e005      	b.n	8013cf8 <tcp_close_shutdown+0x150>
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	60bb      	str	r3, [r7, #8]
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1ef      	bne.n	8013cd8 <tcp_close_shutdown+0x130>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7ff fea0 	bl	8013a44 <tcp_free>
      break;
 8013d04:	e01a      	b.n	8013d3c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7ff ff14 	bl	8013b34 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013d0c:	6879      	ldr	r1, [r7, #4]
 8013d0e:	4816      	ldr	r0, [pc, #88]	@ (8013d68 <tcp_close_shutdown+0x1c0>)
 8013d10:	f001 f8aa 	bl	8014e68 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7ff feb1 	bl	8013a7c <tcp_free_listen>
      break;
 8013d1a:	e00f      	b.n	8013d3c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013d1c:	6879      	ldr	r1, [r7, #4]
 8013d1e:	480e      	ldr	r0, [pc, #56]	@ (8013d58 <tcp_close_shutdown+0x1b0>)
 8013d20:	f001 f8a2 	bl	8014e68 <tcp_pcb_remove>
 8013d24:	4b0d      	ldr	r3, [pc, #52]	@ (8013d5c <tcp_close_shutdown+0x1b4>)
 8013d26:	2201      	movs	r2, #1
 8013d28:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ff fe8a 	bl	8013a44 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013d30:	e004      	b.n	8013d3c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 f81a 	bl	8013d6c <tcp_close_shutdown_fin>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	e000      	b.n	8013d3e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013d3c:	2300      	movs	r3, #0
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3710      	adds	r7, #16
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bdb0      	pop	{r4, r5, r7, pc}
 8013d46:	bf00      	nop
 8013d48:	0801f214 	.word	0x0801f214
 8013d4c:	0801f2e8 	.word	0x0801f2e8
 8013d50:	0801f258 	.word	0x0801f258
 8013d54:	0801f308 	.word	0x0801f308
 8013d58:	20027528 	.word	0x20027528
 8013d5c:	20027530 	.word	0x20027530
 8013d60:	20027568 	.word	0x20027568
 8013d64:	20027520 	.word	0x20027520
 8013d68:	20027524 	.word	0x20027524

08013d6c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d106      	bne.n	8013d88 <tcp_close_shutdown_fin+0x1c>
 8013d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8013e34 <tcp_close_shutdown_fin+0xc8>)
 8013d7c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8013d80:	492d      	ldr	r1, [pc, #180]	@ (8013e38 <tcp_close_shutdown_fin+0xcc>)
 8013d82:	482e      	ldr	r0, [pc, #184]	@ (8013e3c <tcp_close_shutdown_fin+0xd0>)
 8013d84:	f009 fb8c 	bl	801d4a0 <iprintf>

  switch (pcb->state) {
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	7d1b      	ldrb	r3, [r3, #20]
 8013d8c:	2b07      	cmp	r3, #7
 8013d8e:	d020      	beq.n	8013dd2 <tcp_close_shutdown_fin+0x66>
 8013d90:	2b07      	cmp	r3, #7
 8013d92:	dc2b      	bgt.n	8013dec <tcp_close_shutdown_fin+0x80>
 8013d94:	2b03      	cmp	r3, #3
 8013d96:	d002      	beq.n	8013d9e <tcp_close_shutdown_fin+0x32>
 8013d98:	2b04      	cmp	r3, #4
 8013d9a:	d00d      	beq.n	8013db8 <tcp_close_shutdown_fin+0x4c>
 8013d9c:	e026      	b.n	8013dec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f003 fee2 	bl	8017b68 <tcp_send_fin>
 8013da4:	4603      	mov	r3, r0
 8013da6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d11f      	bne.n	8013df0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2205      	movs	r2, #5
 8013db4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013db6:	e01b      	b.n	8013df0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f003 fed5 	bl	8017b68 <tcp_send_fin>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d114      	bne.n	8013df4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2205      	movs	r2, #5
 8013dce:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013dd0:	e010      	b.n	8013df4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f003 fec8 	bl	8017b68 <tcp_send_fin>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d109      	bne.n	8013df8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2209      	movs	r2, #9
 8013de8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013dea:	e005      	b.n	8013df8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013dec:	2300      	movs	r3, #0
 8013dee:	e01c      	b.n	8013e2a <tcp_close_shutdown_fin+0xbe>
      break;
 8013df0:	bf00      	nop
 8013df2:	e002      	b.n	8013dfa <tcp_close_shutdown_fin+0x8e>
      break;
 8013df4:	bf00      	nop
 8013df6:	e000      	b.n	8013dfa <tcp_close_shutdown_fin+0x8e>
      break;
 8013df8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d103      	bne.n	8013e0a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f003 ffee 	bl	8017de4 <tcp_output>
 8013e08:	e00d      	b.n	8013e26 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e12:	d108      	bne.n	8013e26 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	8b5b      	ldrh	r3, [r3, #26]
 8013e18:	f043 0308 	orr.w	r3, r3, #8
 8013e1c:	b29a      	uxth	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013e22:	2300      	movs	r3, #0
 8013e24:	e001      	b.n	8013e2a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	0801f214 	.word	0x0801f214
 8013e38:	0801f2c4 	.word	0x0801f2c4
 8013e3c:	0801f258 	.word	0x0801f258

08013e40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d109      	bne.n	8013e62 <tcp_close+0x22>
 8013e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8013e8c <tcp_close+0x4c>)
 8013e50:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013e54:	490e      	ldr	r1, [pc, #56]	@ (8013e90 <tcp_close+0x50>)
 8013e56:	480f      	ldr	r0, [pc, #60]	@ (8013e94 <tcp_close+0x54>)
 8013e58:	f009 fb22 	bl	801d4a0 <iprintf>
 8013e5c:	f06f 030f 	mvn.w	r3, #15
 8013e60:	e00f      	b.n	8013e82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	7d1b      	ldrb	r3, [r3, #20]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d006      	beq.n	8013e78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	8b5b      	ldrh	r3, [r3, #26]
 8013e6e:	f043 0310 	orr.w	r3, r3, #16
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013e78:	2101      	movs	r1, #1
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff fe94 	bl	8013ba8 <tcp_close_shutdown>
 8013e80:	4603      	mov	r3, r0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0801f214 	.word	0x0801f214
 8013e90:	0801f324 	.word	0x0801f324
 8013e94:	0801f258 	.word	0x0801f258

08013e98 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08e      	sub	sp, #56	@ 0x38
 8013e9c:	af04      	add	r7, sp, #16
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d107      	bne.n	8013eb8 <tcp_abandon+0x20>
 8013ea8:	4b52      	ldr	r3, [pc, #328]	@ (8013ff4 <tcp_abandon+0x15c>)
 8013eaa:	f240 223d 	movw	r2, #573	@ 0x23d
 8013eae:	4952      	ldr	r1, [pc, #328]	@ (8013ff8 <tcp_abandon+0x160>)
 8013eb0:	4852      	ldr	r0, [pc, #328]	@ (8013ffc <tcp_abandon+0x164>)
 8013eb2:	f009 faf5 	bl	801d4a0 <iprintf>
 8013eb6:	e099      	b.n	8013fec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	7d1b      	ldrb	r3, [r3, #20]
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	d106      	bne.n	8013ece <tcp_abandon+0x36>
 8013ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8013ff4 <tcp_abandon+0x15c>)
 8013ec2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013ec6:	494e      	ldr	r1, [pc, #312]	@ (8014000 <tcp_abandon+0x168>)
 8013ec8:	484c      	ldr	r0, [pc, #304]	@ (8013ffc <tcp_abandon+0x164>)
 8013eca:	f009 fae9 	bl	801d4a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	7d1b      	ldrb	r3, [r3, #20]
 8013ed2:	2b0a      	cmp	r3, #10
 8013ed4:	d107      	bne.n	8013ee6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013ed6:	6879      	ldr	r1, [r7, #4]
 8013ed8:	484a      	ldr	r0, [pc, #296]	@ (8014004 <tcp_abandon+0x16c>)
 8013eda:	f000 ffc5 	bl	8014e68 <tcp_pcb_remove>
    tcp_free(pcb);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7ff fdb0 	bl	8013a44 <tcp_free>
 8013ee4:	e082      	b.n	8013fec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8013eea:	2300      	movs	r3, #0
 8013eec:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ef2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ef8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f00:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	691b      	ldr	r3, [r3, #16]
 8013f06:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	7d1b      	ldrb	r3, [r3, #20]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d126      	bne.n	8013f5e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	8adb      	ldrh	r3, [r3, #22]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d02e      	beq.n	8013f76 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f18:	4b3b      	ldr	r3, [pc, #236]	@ (8014008 <tcp_abandon+0x170>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d105      	bne.n	8013f2e <tcp_abandon+0x96>
 8013f22:	4b39      	ldr	r3, [pc, #228]	@ (8014008 <tcp_abandon+0x170>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	4a37      	ldr	r2, [pc, #220]	@ (8014008 <tcp_abandon+0x170>)
 8013f2a:	6013      	str	r3, [r2, #0]
 8013f2c:	e013      	b.n	8013f56 <tcp_abandon+0xbe>
 8013f2e:	4b36      	ldr	r3, [pc, #216]	@ (8014008 <tcp_abandon+0x170>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	61fb      	str	r3, [r7, #28]
 8013f34:	e00c      	b.n	8013f50 <tcp_abandon+0xb8>
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	68db      	ldr	r3, [r3, #12]
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d104      	bne.n	8013f4a <tcp_abandon+0xb2>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	68da      	ldr	r2, [r3, #12]
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	60da      	str	r2, [r3, #12]
 8013f48:	e005      	b.n	8013f56 <tcp_abandon+0xbe>
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	61fb      	str	r3, [r7, #28]
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1ef      	bne.n	8013f36 <tcp_abandon+0x9e>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	60da      	str	r2, [r3, #12]
 8013f5c:	e00b      	b.n	8013f76 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	8adb      	ldrh	r3, [r3, #22]
 8013f66:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013f68:	6879      	ldr	r1, [r7, #4]
 8013f6a:	4828      	ldr	r0, [pc, #160]	@ (801400c <tcp_abandon+0x174>)
 8013f6c:	f000 ff7c 	bl	8014e68 <tcp_pcb_remove>
 8013f70:	4b27      	ldr	r3, [pc, #156]	@ (8014010 <tcp_abandon+0x178>)
 8013f72:	2201      	movs	r2, #1
 8013f74:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d004      	beq.n	8013f88 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f82:	4618      	mov	r0, r3
 8013f84:	f000 fd1e 	bl	80149c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d004      	beq.n	8013f9a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f94:	4618      	mov	r0, r3
 8013f96:	f000 fd15 	bl	80149c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d004      	beq.n	8013fac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f000 fd0c 	bl	80149c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d00e      	beq.n	8013fd0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013fb2:	6879      	ldr	r1, [r7, #4]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	3304      	adds	r3, #4
 8013fb8:	687a      	ldr	r2, [r7, #4]
 8013fba:	8b12      	ldrh	r2, [r2, #24]
 8013fbc:	9202      	str	r2, [sp, #8]
 8013fbe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013fc0:	9201      	str	r2, [sp, #4]
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	69b9      	ldr	r1, [r7, #24]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f004 fcbe 	bl	801894c <tcp_rst>
    }
    last_state = pcb->state;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	7d1b      	ldrb	r3, [r3, #20]
 8013fd4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7ff fd34 	bl	8013a44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d004      	beq.n	8013fec <tcp_abandon+0x154>
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	f06f 010c 	mvn.w	r1, #12
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	4798      	blx	r3
  }
}
 8013fec:	3728      	adds	r7, #40	@ 0x28
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	0801f214 	.word	0x0801f214
 8013ff8:	0801f358 	.word	0x0801f358
 8013ffc:	0801f258 	.word	0x0801f258
 8014000:	0801f374 	.word	0x0801f374
 8014004:	2002752c 	.word	0x2002752c
 8014008:	20027520 	.word	0x20027520
 801400c:	20027528 	.word	0x20027528
 8014010:	20027530 	.word	0x20027530

08014014 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801401c:	2101      	movs	r1, #1
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7ff ff3a 	bl	8013e98 <tcp_abandon>
}
 8014024:	bf00      	nop
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d106      	bne.n	8014048 <tcp_update_rcv_ann_wnd+0x1c>
 801403a:	4b25      	ldr	r3, [pc, #148]	@ (80140d0 <tcp_update_rcv_ann_wnd+0xa4>)
 801403c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014040:	4924      	ldr	r1, [pc, #144]	@ (80140d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8014042:	4825      	ldr	r0, [pc, #148]	@ (80140d8 <tcp_update_rcv_ann_wnd+0xac>)
 8014044:	f009 fa2c 	bl	801d4a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014050:	4413      	add	r3, r2
 8014052:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014058:	687a      	ldr	r2, [r7, #4]
 801405a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801405c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014060:	bf28      	it	cs
 8014062:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014066:	b292      	uxth	r2, r2
 8014068:	4413      	add	r3, r2
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	db08      	blt.n	8014084 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801407e:	68fa      	ldr	r2, [r7, #12]
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	e020      	b.n	80140c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801408c:	1ad3      	subs	r3, r2, r3
 801408e:	2b00      	cmp	r3, #0
 8014090:	dd03      	ble.n	801409a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014098:	e014      	b.n	80140c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140ac:	d306      	bcc.n	80140bc <tcp_update_rcv_ann_wnd+0x90>
 80140ae:	4b08      	ldr	r3, [pc, #32]	@ (80140d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80140b0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80140b4:	4909      	ldr	r1, [pc, #36]	@ (80140dc <tcp_update_rcv_ann_wnd+0xb0>)
 80140b6:	4808      	ldr	r0, [pc, #32]	@ (80140d8 <tcp_update_rcv_ann_wnd+0xac>)
 80140b8:	f009 f9f2 	bl	801d4a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	b29a      	uxth	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80140c4:	2300      	movs	r3, #0
  }
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3710      	adds	r7, #16
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}
 80140ce:	bf00      	nop
 80140d0:	0801f214 	.word	0x0801f214
 80140d4:	0801f470 	.word	0x0801f470
 80140d8:	0801f258 	.word	0x0801f258
 80140dc:	0801f494 	.word	0x0801f494

080140e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	460b      	mov	r3, r1
 80140ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d107      	bne.n	8014102 <tcp_recved+0x22>
 80140f2:	4b1f      	ldr	r3, [pc, #124]	@ (8014170 <tcp_recved+0x90>)
 80140f4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80140f8:	491e      	ldr	r1, [pc, #120]	@ (8014174 <tcp_recved+0x94>)
 80140fa:	481f      	ldr	r0, [pc, #124]	@ (8014178 <tcp_recved+0x98>)
 80140fc:	f009 f9d0 	bl	801d4a0 <iprintf>
 8014100:	e032      	b.n	8014168 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	7d1b      	ldrb	r3, [r3, #20]
 8014106:	2b01      	cmp	r3, #1
 8014108:	d106      	bne.n	8014118 <tcp_recved+0x38>
 801410a:	4b19      	ldr	r3, [pc, #100]	@ (8014170 <tcp_recved+0x90>)
 801410c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014110:	491a      	ldr	r1, [pc, #104]	@ (801417c <tcp_recved+0x9c>)
 8014112:	4819      	ldr	r0, [pc, #100]	@ (8014178 <tcp_recved+0x98>)
 8014114:	f009 f9c4 	bl	801d4a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801411c:	887b      	ldrh	r3, [r7, #2]
 801411e:	4413      	add	r3, r2
 8014120:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014122:	89fb      	ldrh	r3, [r7, #14]
 8014124:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014128:	d804      	bhi.n	8014134 <tcp_recved+0x54>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801412e:	89fa      	ldrh	r2, [r7, #14]
 8014130:	429a      	cmp	r2, r3
 8014132:	d204      	bcs.n	801413e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801413a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801413c:	e002      	b.n	8014144 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	89fa      	ldrh	r2, [r7, #14]
 8014142:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7ff ff71 	bl	801402c <tcp_update_rcv_ann_wnd>
 801414a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014152:	d309      	bcc.n	8014168 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	8b5b      	ldrh	r3, [r3, #26]
 8014158:	f043 0302 	orr.w	r3, r3, #2
 801415c:	b29a      	uxth	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f003 fe3e 	bl	8017de4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014168:	3710      	adds	r7, #16
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop
 8014170:	0801f214 	.word	0x0801f214
 8014174:	0801f4b0 	.word	0x0801f4b0
 8014178:	0801f258 	.word	0x0801f258
 801417c:	0801f4c8 	.word	0x0801f4c8

08014180 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014180:	b5b0      	push	{r4, r5, r7, lr}
 8014182:	b090      	sub	sp, #64	@ 0x40
 8014184:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014186:	2300      	movs	r3, #0
 8014188:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801418c:	4b95      	ldr	r3, [pc, #596]	@ (80143e4 <tcp_slowtmr+0x264>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	3301      	adds	r3, #1
 8014192:	4a94      	ldr	r2, [pc, #592]	@ (80143e4 <tcp_slowtmr+0x264>)
 8014194:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014196:	4b94      	ldr	r3, [pc, #592]	@ (80143e8 <tcp_slowtmr+0x268>)
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	3301      	adds	r3, #1
 801419c:	b2da      	uxtb	r2, r3
 801419e:	4b92      	ldr	r3, [pc, #584]	@ (80143e8 <tcp_slowtmr+0x268>)
 80141a0:	701a      	strb	r2, [r3, #0]
 80141a2:	e000      	b.n	80141a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80141a4:	bf00      	nop
  prev = NULL;
 80141a6:	2300      	movs	r3, #0
 80141a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80141aa:	4b90      	ldr	r3, [pc, #576]	@ (80143ec <tcp_slowtmr+0x26c>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80141b0:	e29d      	b.n	80146ee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80141b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b4:	7d1b      	ldrb	r3, [r3, #20]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d106      	bne.n	80141c8 <tcp_slowtmr+0x48>
 80141ba:	4b8d      	ldr	r3, [pc, #564]	@ (80143f0 <tcp_slowtmr+0x270>)
 80141bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80141c0:	498c      	ldr	r1, [pc, #560]	@ (80143f4 <tcp_slowtmr+0x274>)
 80141c2:	488d      	ldr	r0, [pc, #564]	@ (80143f8 <tcp_slowtmr+0x278>)
 80141c4:	f009 f96c 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80141c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ca:	7d1b      	ldrb	r3, [r3, #20]
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d106      	bne.n	80141de <tcp_slowtmr+0x5e>
 80141d0:	4b87      	ldr	r3, [pc, #540]	@ (80143f0 <tcp_slowtmr+0x270>)
 80141d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80141d6:	4989      	ldr	r1, [pc, #548]	@ (80143fc <tcp_slowtmr+0x27c>)
 80141d8:	4887      	ldr	r0, [pc, #540]	@ (80143f8 <tcp_slowtmr+0x278>)
 80141da:	f009 f961 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80141de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e0:	7d1b      	ldrb	r3, [r3, #20]
 80141e2:	2b0a      	cmp	r3, #10
 80141e4:	d106      	bne.n	80141f4 <tcp_slowtmr+0x74>
 80141e6:	4b82      	ldr	r3, [pc, #520]	@ (80143f0 <tcp_slowtmr+0x270>)
 80141e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80141ec:	4984      	ldr	r1, [pc, #528]	@ (8014400 <tcp_slowtmr+0x280>)
 80141ee:	4882      	ldr	r0, [pc, #520]	@ (80143f8 <tcp_slowtmr+0x278>)
 80141f0:	f009 f956 	bl	801d4a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80141f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141f6:	7f9a      	ldrb	r2, [r3, #30]
 80141f8:	4b7b      	ldr	r3, [pc, #492]	@ (80143e8 <tcp_slowtmr+0x268>)
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d105      	bne.n	801420c <tcp_slowtmr+0x8c>
      prev = pcb;
 8014200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014202:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801420a:	e270      	b.n	80146ee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801420c:	4b76      	ldr	r3, [pc, #472]	@ (80143e8 <tcp_slowtmr+0x268>)
 801420e:	781a      	ldrb	r2, [r3, #0]
 8014210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014212:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014214:	2300      	movs	r3, #0
 8014216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801421a:	2300      	movs	r3, #0
 801421c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014222:	7d1b      	ldrb	r3, [r3, #20]
 8014224:	2b02      	cmp	r3, #2
 8014226:	d10a      	bne.n	801423e <tcp_slowtmr+0xbe>
 8014228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801422a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801422e:	2b05      	cmp	r3, #5
 8014230:	d905      	bls.n	801423e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014236:	3301      	adds	r3, #1
 8014238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801423c:	e11e      	b.n	801447c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014244:	2b0b      	cmp	r3, #11
 8014246:	d905      	bls.n	8014254 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801424c:	3301      	adds	r3, #1
 801424e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014252:	e113      	b.n	801447c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014256:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801425a:	2b00      	cmp	r3, #0
 801425c:	d075      	beq.n	801434a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014262:	2b00      	cmp	r3, #0
 8014264:	d006      	beq.n	8014274 <tcp_slowtmr+0xf4>
 8014266:	4b62      	ldr	r3, [pc, #392]	@ (80143f0 <tcp_slowtmr+0x270>)
 8014268:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801426c:	4965      	ldr	r1, [pc, #404]	@ (8014404 <tcp_slowtmr+0x284>)
 801426e:	4862      	ldr	r0, [pc, #392]	@ (80143f8 <tcp_slowtmr+0x278>)
 8014270:	f009 f916 	bl	801d4a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014278:	2b00      	cmp	r3, #0
 801427a:	d106      	bne.n	801428a <tcp_slowtmr+0x10a>
 801427c:	4b5c      	ldr	r3, [pc, #368]	@ (80143f0 <tcp_slowtmr+0x270>)
 801427e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014282:	4961      	ldr	r1, [pc, #388]	@ (8014408 <tcp_slowtmr+0x288>)
 8014284:	485c      	ldr	r0, [pc, #368]	@ (80143f8 <tcp_slowtmr+0x278>)
 8014286:	f009 f90b 	bl	801d4a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014290:	2b0b      	cmp	r3, #11
 8014292:	d905      	bls.n	80142a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8014294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014298:	3301      	adds	r3, #1
 801429a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801429e:	e0ed      	b.n	801447c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80142a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80142a6:	3b01      	subs	r3, #1
 80142a8:	4a58      	ldr	r2, [pc, #352]	@ (801440c <tcp_slowtmr+0x28c>)
 80142aa:	5cd3      	ldrb	r3, [r2, r3]
 80142ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80142ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80142b4:	7c7a      	ldrb	r2, [r7, #17]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d907      	bls.n	80142ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80142ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80142c0:	3301      	adds	r3, #1
 80142c2:	b2da      	uxtb	r2, r3
 80142c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80142d0:	7c7a      	ldrb	r2, [r7, #17]
 80142d2:	429a      	cmp	r2, r3
 80142d4:	f200 80d2 	bhi.w	801447c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80142d8:	2301      	movs	r3, #1
 80142da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d108      	bne.n	80142f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80142e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142e8:	f004 fc24 	bl	8018b34 <tcp_zero_window_probe>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d014      	beq.n	801431c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80142f2:	2300      	movs	r3, #0
 80142f4:	623b      	str	r3, [r7, #32]
 80142f6:	e011      	b.n	801431c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80142f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80142fe:	4619      	mov	r1, r3
 8014300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014302:	f003 fae9 	bl	80178d8 <tcp_split_unsent_seg>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d107      	bne.n	801431c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801430c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801430e:	f003 fd69 	bl	8017de4 <tcp_output>
 8014312:	4603      	mov	r3, r0
 8014314:	2b00      	cmp	r3, #0
 8014316:	d101      	bne.n	801431c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014318:	2300      	movs	r3, #0
 801431a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80ac 	beq.w	801447c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014326:	2200      	movs	r2, #0
 8014328:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014332:	2b06      	cmp	r3, #6
 8014334:	f200 80a2 	bhi.w	801447c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801433a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801433e:	3301      	adds	r3, #1
 8014340:	b2da      	uxtb	r2, r3
 8014342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014344:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014348:	e098      	b.n	801447c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014350:	2b00      	cmp	r3, #0
 8014352:	db0f      	blt.n	8014374 <tcp_slowtmr+0x1f4>
 8014354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014356:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801435a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801435e:	4293      	cmp	r3, r2
 8014360:	d008      	beq.n	8014374 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014364:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014368:	b29b      	uxth	r3, r3
 801436a:	3301      	adds	r3, #1
 801436c:	b29b      	uxth	r3, r3
 801436e:	b21a      	sxth	r2, r3
 8014370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014372:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014376:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801437c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014380:	429a      	cmp	r2, r3
 8014382:	db7b      	blt.n	801447c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014386:	f004 f821 	bl	80183cc <tcp_rexmit_rto_prepare>
 801438a:	4603      	mov	r3, r0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d007      	beq.n	80143a0 <tcp_slowtmr+0x220>
 8014390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014394:	2b00      	cmp	r3, #0
 8014396:	d171      	bne.n	801447c <tcp_slowtmr+0x2fc>
 8014398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801439c:	2b00      	cmp	r3, #0
 801439e:	d06d      	beq.n	801447c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80143a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a2:	7d1b      	ldrb	r3, [r3, #20]
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d03a      	beq.n	801441e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80143a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80143ae:	2b0c      	cmp	r3, #12
 80143b0:	bf28      	it	cs
 80143b2:	230c      	movcs	r3, #12
 80143b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80143b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80143bc:	10db      	asrs	r3, r3, #3
 80143be:	b21b      	sxth	r3, r3
 80143c0:	461a      	mov	r2, r3
 80143c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80143c8:	4413      	add	r3, r2
 80143ca:	7efa      	ldrb	r2, [r7, #27]
 80143cc:	4910      	ldr	r1, [pc, #64]	@ (8014410 <tcp_slowtmr+0x290>)
 80143ce:	5c8a      	ldrb	r2, [r1, r2]
 80143d0:	4093      	lsls	r3, r2
 80143d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80143da:	4293      	cmp	r3, r2
 80143dc:	dc1a      	bgt.n	8014414 <tcp_slowtmr+0x294>
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	b21a      	sxth	r2, r3
 80143e2:	e019      	b.n	8014418 <tcp_slowtmr+0x298>
 80143e4:	2002751c 	.word	0x2002751c
 80143e8:	20027532 	.word	0x20027532
 80143ec:	20027528 	.word	0x20027528
 80143f0:	0801f214 	.word	0x0801f214
 80143f4:	0801f558 	.word	0x0801f558
 80143f8:	0801f258 	.word	0x0801f258
 80143fc:	0801f584 	.word	0x0801f584
 8014400:	0801f5b0 	.word	0x0801f5b0
 8014404:	0801f5e0 	.word	0x0801f5e0
 8014408:	0801f614 	.word	0x0801f614
 801440c:	08021a74 	.word	0x08021a74
 8014410:	08021a64 	.word	0x08021a64
 8014414:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014420:	2200      	movs	r2, #0
 8014422:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014426:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801442c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014430:	4293      	cmp	r3, r2
 8014432:	bf28      	it	cs
 8014434:	4613      	movcs	r3, r2
 8014436:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014438:	8a7b      	ldrh	r3, [r7, #18]
 801443a:	085b      	lsrs	r3, r3, #1
 801443c:	b29a      	uxth	r2, r3
 801443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014440:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014446:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801444c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	b29b      	uxth	r3, r3
 8014452:	429a      	cmp	r2, r3
 8014454:	d206      	bcs.n	8014464 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	b29a      	uxth	r2, r3
 801445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014466:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801446e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014470:	2200      	movs	r2, #0
 8014472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8014476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014478:	f004 f818 	bl	80184ac <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801447e:	7d1b      	ldrb	r3, [r3, #20]
 8014480:	2b06      	cmp	r3, #6
 8014482:	d111      	bne.n	80144a8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014486:	8b5b      	ldrh	r3, [r3, #26]
 8014488:	f003 0310 	and.w	r3, r3, #16
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00b      	beq.n	80144a8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014490:	4b9c      	ldr	r3, [pc, #624]	@ (8014704 <tcp_slowtmr+0x584>)
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014496:	6a1b      	ldr	r3, [r3, #32]
 8014498:	1ad3      	subs	r3, r2, r3
 801449a:	2b28      	cmp	r3, #40	@ 0x28
 801449c:	d904      	bls.n	80144a8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801449e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144a2:	3301      	adds	r3, #1
 80144a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144aa:	7a5b      	ldrb	r3, [r3, #9]
 80144ac:	f003 0308 	and.w	r3, r3, #8
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d04a      	beq.n	801454a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80144b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144b8:	2b04      	cmp	r3, #4
 80144ba:	d003      	beq.n	80144c4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80144bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80144c0:	2b07      	cmp	r3, #7
 80144c2:	d142      	bne.n	801454a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144c4:	4b8f      	ldr	r3, [pc, #572]	@ (8014704 <tcp_slowtmr+0x584>)
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ca:	6a1b      	ldr	r3, [r3, #32]
 80144cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80144ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80144d4:	4b8c      	ldr	r3, [pc, #560]	@ (8014708 <tcp_slowtmr+0x588>)
 80144d6:	440b      	add	r3, r1
 80144d8:	498c      	ldr	r1, [pc, #560]	@ (801470c <tcp_slowtmr+0x58c>)
 80144da:	fba1 1303 	umull	r1, r3, r1, r3
 80144de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d90a      	bls.n	80144fa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80144e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144e8:	3301      	adds	r3, #1
 80144ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80144ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80144f2:	3301      	adds	r3, #1
 80144f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80144f8:	e027      	b.n	801454a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144fa:	4b82      	ldr	r3, [pc, #520]	@ (8014704 <tcp_slowtmr+0x584>)
 80144fc:	681a      	ldr	r2, [r3, #0]
 80144fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014500:	6a1b      	ldr	r3, [r3, #32]
 8014502:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014506:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014510:	4618      	mov	r0, r3
 8014512:	4b7f      	ldr	r3, [pc, #508]	@ (8014710 <tcp_slowtmr+0x590>)
 8014514:	fb00 f303 	mul.w	r3, r0, r3
 8014518:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801451a:	497c      	ldr	r1, [pc, #496]	@ (801470c <tcp_slowtmr+0x58c>)
 801451c:	fba1 1303 	umull	r1, r3, r1, r3
 8014520:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014522:	429a      	cmp	r2, r3
 8014524:	d911      	bls.n	801454a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014528:	f004 fac4 	bl	8018ab4 <tcp_keepalive>
 801452c:	4603      	mov	r3, r0
 801452e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8014532:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014536:	2b00      	cmp	r3, #0
 8014538:	d107      	bne.n	801454a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801453c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014540:	3301      	adds	r3, #1
 8014542:	b2da      	uxtb	r2, r3
 8014544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014546:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801454a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801454c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801454e:	2b00      	cmp	r3, #0
 8014550:	d011      	beq.n	8014576 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014552:	4b6c      	ldr	r3, [pc, #432]	@ (8014704 <tcp_slowtmr+0x584>)
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014558:	6a1b      	ldr	r3, [r3, #32]
 801455a:	1ad2      	subs	r2, r2, r3
 801455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801455e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014562:	4619      	mov	r1, r3
 8014564:	460b      	mov	r3, r1
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	440b      	add	r3, r1
 801456a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801456c:	429a      	cmp	r2, r3
 801456e:	d302      	bcc.n	8014576 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014572:	f000 fddd 	bl	8015130 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8014576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014578:	7d1b      	ldrb	r3, [r3, #20]
 801457a:	2b03      	cmp	r3, #3
 801457c:	d10b      	bne.n	8014596 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801457e:	4b61      	ldr	r3, [pc, #388]	@ (8014704 <tcp_slowtmr+0x584>)
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014584:	6a1b      	ldr	r3, [r3, #32]
 8014586:	1ad3      	subs	r3, r2, r3
 8014588:	2b28      	cmp	r3, #40	@ 0x28
 801458a:	d904      	bls.n	8014596 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014590:	3301      	adds	r3, #1
 8014592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8014596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014598:	7d1b      	ldrb	r3, [r3, #20]
 801459a:	2b09      	cmp	r3, #9
 801459c:	d10b      	bne.n	80145b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801459e:	4b59      	ldr	r3, [pc, #356]	@ (8014704 <tcp_slowtmr+0x584>)
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a4:	6a1b      	ldr	r3, [r3, #32]
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80145aa:	d904      	bls.n	80145b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80145ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145b0:	3301      	adds	r3, #1
 80145b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80145b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d060      	beq.n	8014680 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80145be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80145c4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80145c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145c8:	f000 fbfe 	bl	8014dc8 <tcp_pcb_purge>
      if (prev != NULL) {
 80145cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d010      	beq.n	80145f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80145d2:	4b50      	ldr	r3, [pc, #320]	@ (8014714 <tcp_slowtmr+0x594>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145d8:	429a      	cmp	r2, r3
 80145da:	d106      	bne.n	80145ea <tcp_slowtmr+0x46a>
 80145dc:	4b4e      	ldr	r3, [pc, #312]	@ (8014718 <tcp_slowtmr+0x598>)
 80145de:	f240 526d 	movw	r2, #1389	@ 0x56d
 80145e2:	494e      	ldr	r1, [pc, #312]	@ (801471c <tcp_slowtmr+0x59c>)
 80145e4:	484e      	ldr	r0, [pc, #312]	@ (8014720 <tcp_slowtmr+0x5a0>)
 80145e6:	f008 ff5b 	bl	801d4a0 <iprintf>
        prev->next = pcb->next;
 80145ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ec:	68da      	ldr	r2, [r3, #12]
 80145ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f0:	60da      	str	r2, [r3, #12]
 80145f2:	e00f      	b.n	8014614 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80145f4:	4b47      	ldr	r3, [pc, #284]	@ (8014714 <tcp_slowtmr+0x594>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d006      	beq.n	801460c <tcp_slowtmr+0x48c>
 80145fe:	4b46      	ldr	r3, [pc, #280]	@ (8014718 <tcp_slowtmr+0x598>)
 8014600:	f240 5271 	movw	r2, #1393	@ 0x571
 8014604:	4947      	ldr	r1, [pc, #284]	@ (8014724 <tcp_slowtmr+0x5a4>)
 8014606:	4846      	ldr	r0, [pc, #280]	@ (8014720 <tcp_slowtmr+0x5a0>)
 8014608:	f008 ff4a 	bl	801d4a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	4a40      	ldr	r2, [pc, #256]	@ (8014714 <tcp_slowtmr+0x594>)
 8014612:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8014614:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014618:	2b00      	cmp	r3, #0
 801461a:	d013      	beq.n	8014644 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801461e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014622:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014624:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8014626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014628:	3304      	adds	r3, #4
 801462a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801462c:	8ad2      	ldrh	r2, [r2, #22]
 801462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014630:	8b09      	ldrh	r1, [r1, #24]
 8014632:	9102      	str	r1, [sp, #8]
 8014634:	9201      	str	r2, [sp, #4]
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	462b      	mov	r3, r5
 801463a:	4622      	mov	r2, r4
 801463c:	4601      	mov	r1, r0
 801463e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014640:	f004 f984 	bl	801894c <tcp_rst>
      err_arg = pcb->callback_arg;
 8014644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014646:	691b      	ldr	r3, [r3, #16]
 8014648:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801464c:	7d1b      	ldrb	r3, [r3, #20]
 801464e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014652:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014656:	68db      	ldr	r3, [r3, #12]
 8014658:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801465a:	6838      	ldr	r0, [r7, #0]
 801465c:	f7ff f9f2 	bl	8013a44 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014660:	4b31      	ldr	r3, [pc, #196]	@ (8014728 <tcp_slowtmr+0x5a8>)
 8014662:	2200      	movs	r2, #0
 8014664:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d004      	beq.n	8014676 <tcp_slowtmr+0x4f6>
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f06f 010c 	mvn.w	r1, #12
 8014672:	68b8      	ldr	r0, [r7, #8]
 8014674:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014676:	4b2c      	ldr	r3, [pc, #176]	@ (8014728 <tcp_slowtmr+0x5a8>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d037      	beq.n	80146ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801467e:	e592      	b.n	80141a6 <tcp_slowtmr+0x26>
      prev = pcb;
 8014680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014682:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801468c:	7f1b      	ldrb	r3, [r3, #28]
 801468e:	3301      	adds	r3, #1
 8014690:	b2da      	uxtb	r2, r3
 8014692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014694:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014698:	7f1a      	ldrb	r2, [r3, #28]
 801469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469c:	7f5b      	ldrb	r3, [r3, #29]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d325      	bcc.n	80146ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80146a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a4:	2200      	movs	r2, #0
 80146a6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80146a8:	4b1f      	ldr	r3, [pc, #124]	@ (8014728 <tcp_slowtmr+0x5a8>)
 80146aa:	2200      	movs	r2, #0
 80146ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80146ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00b      	beq.n	80146d0 <tcp_slowtmr+0x550>
 80146b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80146be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146c0:	6912      	ldr	r2, [r2, #16]
 80146c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80146c4:	4610      	mov	r0, r2
 80146c6:	4798      	blx	r3
 80146c8:	4603      	mov	r3, r0
 80146ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80146ce:	e002      	b.n	80146d6 <tcp_slowtmr+0x556>
 80146d0:	2300      	movs	r3, #0
 80146d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80146d6:	4b14      	ldr	r3, [pc, #80]	@ (8014728 <tcp_slowtmr+0x5a8>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f47f ad62 	bne.w	80141a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80146e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d102      	bne.n	80146ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80146e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146ea:	f003 fb7b 	bl	8017de4 <tcp_output>
  while (pcb != NULL) {
 80146ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	f47f ad5e 	bne.w	80141b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80146f6:	2300      	movs	r3, #0
 80146f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80146fa:	4b0c      	ldr	r3, [pc, #48]	@ (801472c <tcp_slowtmr+0x5ac>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014700:	e069      	b.n	80147d6 <tcp_slowtmr+0x656>
 8014702:	bf00      	nop
 8014704:	2002751c 	.word	0x2002751c
 8014708:	000a4cb8 	.word	0x000a4cb8
 801470c:	10624dd3 	.word	0x10624dd3
 8014710:	000124f8 	.word	0x000124f8
 8014714:	20027528 	.word	0x20027528
 8014718:	0801f214 	.word	0x0801f214
 801471c:	0801f64c 	.word	0x0801f64c
 8014720:	0801f258 	.word	0x0801f258
 8014724:	0801f678 	.word	0x0801f678
 8014728:	20027530 	.word	0x20027530
 801472c:	2002752c 	.word	0x2002752c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014732:	7d1b      	ldrb	r3, [r3, #20]
 8014734:	2b0a      	cmp	r3, #10
 8014736:	d006      	beq.n	8014746 <tcp_slowtmr+0x5c6>
 8014738:	4b2b      	ldr	r3, [pc, #172]	@ (80147e8 <tcp_slowtmr+0x668>)
 801473a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801473e:	492b      	ldr	r1, [pc, #172]	@ (80147ec <tcp_slowtmr+0x66c>)
 8014740:	482b      	ldr	r0, [pc, #172]	@ (80147f0 <tcp_slowtmr+0x670>)
 8014742:	f008 fead 	bl	801d4a0 <iprintf>
    pcb_remove = 0;
 8014746:	2300      	movs	r3, #0
 8014748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801474c:	4b29      	ldr	r3, [pc, #164]	@ (80147f4 <tcp_slowtmr+0x674>)
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014752:	6a1b      	ldr	r3, [r3, #32]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	2bf0      	cmp	r3, #240	@ 0xf0
 8014758:	d904      	bls.n	8014764 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801475a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801475e:	3301      	adds	r3, #1
 8014760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014768:	2b00      	cmp	r3, #0
 801476a:	d02f      	beq.n	80147cc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801476c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801476e:	f000 fb2b 	bl	8014dc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014774:	2b00      	cmp	r3, #0
 8014776:	d010      	beq.n	801479a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014778:	4b1f      	ldr	r3, [pc, #124]	@ (80147f8 <tcp_slowtmr+0x678>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801477e:	429a      	cmp	r2, r3
 8014780:	d106      	bne.n	8014790 <tcp_slowtmr+0x610>
 8014782:	4b19      	ldr	r3, [pc, #100]	@ (80147e8 <tcp_slowtmr+0x668>)
 8014784:	f240 52af 	movw	r2, #1455	@ 0x5af
 8014788:	491c      	ldr	r1, [pc, #112]	@ (80147fc <tcp_slowtmr+0x67c>)
 801478a:	4819      	ldr	r0, [pc, #100]	@ (80147f0 <tcp_slowtmr+0x670>)
 801478c:	f008 fe88 	bl	801d4a0 <iprintf>
        prev->next = pcb->next;
 8014790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014792:	68da      	ldr	r2, [r3, #12]
 8014794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014796:	60da      	str	r2, [r3, #12]
 8014798:	e00f      	b.n	80147ba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801479a:	4b17      	ldr	r3, [pc, #92]	@ (80147f8 <tcp_slowtmr+0x678>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d006      	beq.n	80147b2 <tcp_slowtmr+0x632>
 80147a4:	4b10      	ldr	r3, [pc, #64]	@ (80147e8 <tcp_slowtmr+0x668>)
 80147a6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80147aa:	4915      	ldr	r1, [pc, #84]	@ (8014800 <tcp_slowtmr+0x680>)
 80147ac:	4810      	ldr	r0, [pc, #64]	@ (80147f0 <tcp_slowtmr+0x670>)
 80147ae:	f008 fe77 	bl	801d4a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80147b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	4a10      	ldr	r2, [pc, #64]	@ (80147f8 <tcp_slowtmr+0x678>)
 80147b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80147ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80147be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147c0:	68db      	ldr	r3, [r3, #12]
 80147c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80147c4:	69f8      	ldr	r0, [r7, #28]
 80147c6:	f7ff f93d 	bl	8013a44 <tcp_free>
 80147ca:	e004      	b.n	80147d6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80147cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80147d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80147d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d1a9      	bne.n	8014730 <tcp_slowtmr+0x5b0>
    }
  }
}
 80147dc:	bf00      	nop
 80147de:	bf00      	nop
 80147e0:	3730      	adds	r7, #48	@ 0x30
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bdb0      	pop	{r4, r5, r7, pc}
 80147e6:	bf00      	nop
 80147e8:	0801f214 	.word	0x0801f214
 80147ec:	0801f6a4 	.word	0x0801f6a4
 80147f0:	0801f258 	.word	0x0801f258
 80147f4:	2002751c 	.word	0x2002751c
 80147f8:	2002752c 	.word	0x2002752c
 80147fc:	0801f6d4 	.word	0x0801f6d4
 8014800:	0801f6fc 	.word	0x0801f6fc

08014804 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801480a:	4b2d      	ldr	r3, [pc, #180]	@ (80148c0 <tcp_fasttmr+0xbc>)
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	3301      	adds	r3, #1
 8014810:	b2da      	uxtb	r2, r3
 8014812:	4b2b      	ldr	r3, [pc, #172]	@ (80148c0 <tcp_fasttmr+0xbc>)
 8014814:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014816:	4b2b      	ldr	r3, [pc, #172]	@ (80148c4 <tcp_fasttmr+0xc0>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801481c:	e048      	b.n	80148b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	7f9a      	ldrb	r2, [r3, #30]
 8014822:	4b27      	ldr	r3, [pc, #156]	@ (80148c0 <tcp_fasttmr+0xbc>)
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	429a      	cmp	r2, r3
 8014828:	d03f      	beq.n	80148aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801482a:	4b25      	ldr	r3, [pc, #148]	@ (80148c0 <tcp_fasttmr+0xbc>)
 801482c:	781a      	ldrb	r2, [r3, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	8b5b      	ldrh	r3, [r3, #26]
 8014836:	f003 0301 	and.w	r3, r3, #1
 801483a:	2b00      	cmp	r3, #0
 801483c:	d010      	beq.n	8014860 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	8b5b      	ldrh	r3, [r3, #26]
 8014842:	f043 0302 	orr.w	r3, r3, #2
 8014846:	b29a      	uxth	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f003 fac9 	bl	8017de4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8b5b      	ldrh	r3, [r3, #26]
 8014856:	f023 0303 	bic.w	r3, r3, #3
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	8b5b      	ldrh	r3, [r3, #26]
 8014864:	f003 0308 	and.w	r3, r3, #8
 8014868:	2b00      	cmp	r3, #0
 801486a:	d009      	beq.n	8014880 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	8b5b      	ldrh	r3, [r3, #26]
 8014870:	f023 0308 	bic.w	r3, r3, #8
 8014874:	b29a      	uxth	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff fa76 	bl	8013d6c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	68db      	ldr	r3, [r3, #12]
 8014884:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801488a:	2b00      	cmp	r3, #0
 801488c:	d00a      	beq.n	80148a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801488e:	4b0e      	ldr	r3, [pc, #56]	@ (80148c8 <tcp_fasttmr+0xc4>)
 8014890:	2200      	movs	r2, #0
 8014892:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 f819 	bl	80148cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801489a:	4b0b      	ldr	r3, [pc, #44]	@ (80148c8 <tcp_fasttmr+0xc4>)
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d000      	beq.n	80148a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80148a2:	e7b8      	b.n	8014816 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	607b      	str	r3, [r7, #4]
 80148a8:	e002      	b.n	80148b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d1b3      	bne.n	801481e <tcp_fasttmr+0x1a>
    }
  }
}
 80148b6:	bf00      	nop
 80148b8:	bf00      	nop
 80148ba:	3708      	adds	r7, #8
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	20027532 	.word	0x20027532
 80148c4:	20027528 	.word	0x20027528
 80148c8:	20027530 	.word	0x20027530

080148cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d109      	bne.n	80148ee <tcp_process_refused_data+0x22>
 80148da:	4b37      	ldr	r3, [pc, #220]	@ (80149b8 <tcp_process_refused_data+0xec>)
 80148dc:	f240 6209 	movw	r2, #1545	@ 0x609
 80148e0:	4936      	ldr	r1, [pc, #216]	@ (80149bc <tcp_process_refused_data+0xf0>)
 80148e2:	4837      	ldr	r0, [pc, #220]	@ (80149c0 <tcp_process_refused_data+0xf4>)
 80148e4:	f008 fddc 	bl	801d4a0 <iprintf>
 80148e8:	f06f 030f 	mvn.w	r3, #15
 80148ec:	e060      	b.n	80149b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80148f2:	7b5b      	ldrb	r3, [r3, #13]
 80148f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80148fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2200      	movs	r2, #0
 8014900:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014908:	2b00      	cmp	r3, #0
 801490a:	d00b      	beq.n	8014924 <tcp_process_refused_data+0x58>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6918      	ldr	r0, [r3, #16]
 8014916:	2300      	movs	r3, #0
 8014918:	68ba      	ldr	r2, [r7, #8]
 801491a:	6879      	ldr	r1, [r7, #4]
 801491c:	47a0      	blx	r4
 801491e:	4603      	mov	r3, r0
 8014920:	73fb      	strb	r3, [r7, #15]
 8014922:	e007      	b.n	8014934 <tcp_process_refused_data+0x68>
 8014924:	2300      	movs	r3, #0
 8014926:	68ba      	ldr	r2, [r7, #8]
 8014928:	6879      	ldr	r1, [r7, #4]
 801492a:	2000      	movs	r0, #0
 801492c:	f000 f8a4 	bl	8014a78 <tcp_recv_null>
 8014930:	4603      	mov	r3, r0
 8014932:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d12a      	bne.n	8014992 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801493c:	7bbb      	ldrb	r3, [r7, #14]
 801493e:	f003 0320 	and.w	r3, r3, #32
 8014942:	2b00      	cmp	r3, #0
 8014944:	d033      	beq.n	80149ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801494a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801494e:	d005      	beq.n	801495c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014954:	3301      	adds	r3, #1
 8014956:	b29a      	uxth	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014962:	2b00      	cmp	r3, #0
 8014964:	d00b      	beq.n	801497e <tcp_process_refused_data+0xb2>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6918      	ldr	r0, [r3, #16]
 8014970:	2300      	movs	r3, #0
 8014972:	2200      	movs	r2, #0
 8014974:	6879      	ldr	r1, [r7, #4]
 8014976:	47a0      	blx	r4
 8014978:	4603      	mov	r3, r0
 801497a:	73fb      	strb	r3, [r7, #15]
 801497c:	e001      	b.n	8014982 <tcp_process_refused_data+0xb6>
 801497e:	2300      	movs	r3, #0
 8014980:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014986:	f113 0f0d 	cmn.w	r3, #13
 801498a:	d110      	bne.n	80149ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801498c:	f06f 030c 	mvn.w	r3, #12
 8014990:	e00e      	b.n	80149b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014996:	f113 0f0d 	cmn.w	r3, #13
 801499a:	d102      	bne.n	80149a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801499c:	f06f 030c 	mvn.w	r3, #12
 80149a0:	e006      	b.n	80149b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	68ba      	ldr	r2, [r7, #8]
 80149a6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80149a8:	f06f 0304 	mvn.w	r3, #4
 80149ac:	e000      	b.n	80149b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3714      	adds	r7, #20
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd90      	pop	{r4, r7, pc}
 80149b8:	0801f214 	.word	0x0801f214
 80149bc:	0801f724 	.word	0x0801f724
 80149c0:	0801f258 	.word	0x0801f258

080149c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80149cc:	e007      	b.n	80149de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f000 f80a 	bl	80149ee <tcp_seg_free>
    seg = next;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d1f4      	bne.n	80149ce <tcp_segs_free+0xa>
  }
}
 80149e4:	bf00      	nop
 80149e6:	bf00      	nop
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b082      	sub	sp, #8
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d00c      	beq.n	8014a16 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d004      	beq.n	8014a0e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7fe fd5f 	bl	80134cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a0e:	6879      	ldr	r1, [r7, #4]
 8014a10:	2003      	movs	r0, #3
 8014a12:	f7fd feb7 	bl	8012784 <memp_free>
  }
}
 8014a16:	bf00      	nop
 8014a18:	3708      	adds	r7, #8
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
	...

08014a20 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d106      	bne.n	8014a3c <tcp_seg_copy+0x1c>
 8014a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8014a6c <tcp_seg_copy+0x4c>)
 8014a30:	f240 6282 	movw	r2, #1666	@ 0x682
 8014a34:	490e      	ldr	r1, [pc, #56]	@ (8014a70 <tcp_seg_copy+0x50>)
 8014a36:	480f      	ldr	r0, [pc, #60]	@ (8014a74 <tcp_seg_copy+0x54>)
 8014a38:	f008 fd32 	bl	801d4a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014a3c:	2003      	movs	r0, #3
 8014a3e:	f7fd fe2b 	bl	8012698 <memp_malloc>
 8014a42:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d101      	bne.n	8014a4e <tcp_seg_copy+0x2e>
    return NULL;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e00a      	b.n	8014a64 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014a4e:	2210      	movs	r2, #16
 8014a50:	6879      	ldr	r1, [r7, #4]
 8014a52:	68f8      	ldr	r0, [r7, #12]
 8014a54:	f008 fe5d 	bl	801d712 <memcpy>
  pbuf_ref(cseg->p);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7fe fddb 	bl	8013618 <pbuf_ref>
  return cseg;
 8014a62:	68fb      	ldr	r3, [r7, #12]
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3710      	adds	r7, #16
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}
 8014a6c:	0801f214 	.word	0x0801f214
 8014a70:	0801f768 	.word	0x0801f768
 8014a74:	0801f258 	.word	0x0801f258

08014a78 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
 8014a84:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d109      	bne.n	8014aa0 <tcp_recv_null+0x28>
 8014a8c:	4b12      	ldr	r3, [pc, #72]	@ (8014ad8 <tcp_recv_null+0x60>)
 8014a8e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014a92:	4912      	ldr	r1, [pc, #72]	@ (8014adc <tcp_recv_null+0x64>)
 8014a94:	4812      	ldr	r0, [pc, #72]	@ (8014ae0 <tcp_recv_null+0x68>)
 8014a96:	f008 fd03 	bl	801d4a0 <iprintf>
 8014a9a:	f06f 030f 	mvn.w	r3, #15
 8014a9e:	e016      	b.n	8014ace <tcp_recv_null+0x56>

  if (p != NULL) {
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d009      	beq.n	8014aba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	891b      	ldrh	r3, [r3, #8]
 8014aaa:	4619      	mov	r1, r3
 8014aac:	68b8      	ldr	r0, [r7, #8]
 8014aae:	f7ff fb17 	bl	80140e0 <tcp_recved>
    pbuf_free(p);
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7fe fd0a 	bl	80134cc <pbuf_free>
 8014ab8:	e008      	b.n	8014acc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d104      	bne.n	8014acc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014ac2:	68b8      	ldr	r0, [r7, #8]
 8014ac4:	f7ff f9bc 	bl	8013e40 <tcp_close>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	e000      	b.n	8014ace <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014acc:	2300      	movs	r3, #0
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3710      	adds	r7, #16
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	0801f214 	.word	0x0801f214
 8014adc:	0801f784 	.word	0x0801f784
 8014ae0:	0801f258 	.word	0x0801f258

08014ae4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b086      	sub	sp, #24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	4603      	mov	r3, r0
 8014aec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	db01      	blt.n	8014afa <tcp_kill_prio+0x16>
 8014af6:	79fb      	ldrb	r3, [r7, #7]
 8014af8:	e000      	b.n	8014afc <tcp_kill_prio+0x18>
 8014afa:	237f      	movs	r3, #127	@ 0x7f
 8014afc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014afe:	7afb      	ldrb	r3, [r7, #11]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d034      	beq.n	8014b6e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014b04:	7afb      	ldrb	r3, [r7, #11]
 8014b06:	3b01      	subs	r3, #1
 8014b08:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b12:	4b19      	ldr	r3, [pc, #100]	@ (8014b78 <tcp_kill_prio+0x94>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	617b      	str	r3, [r7, #20]
 8014b18:	e01f      	b.n	8014b5a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	7d5b      	ldrb	r3, [r3, #21]
 8014b1e:	7afa      	ldrb	r2, [r7, #11]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d80c      	bhi.n	8014b3e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b28:	7afa      	ldrb	r2, [r7, #11]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d112      	bne.n	8014b54 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b2e:	4b13      	ldr	r3, [pc, #76]	@ (8014b7c <tcp_kill_prio+0x98>)
 8014b30:	681a      	ldr	r2, [r3, #0]
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	6a1b      	ldr	r3, [r3, #32]
 8014b36:	1ad3      	subs	r3, r2, r3
 8014b38:	68fa      	ldr	r2, [r7, #12]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d80a      	bhi.n	8014b54 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8014b7c <tcp_kill_prio+0x98>)
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	6a1b      	ldr	r3, [r3, #32]
 8014b46:	1ad3      	subs	r3, r2, r3
 8014b48:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	7d5b      	ldrb	r3, [r3, #21]
 8014b52:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	617b      	str	r3, [r7, #20]
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d1dc      	bne.n	8014b1a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d004      	beq.n	8014b70 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014b66:	6938      	ldr	r0, [r7, #16]
 8014b68:	f7ff fa54 	bl	8014014 <tcp_abort>
 8014b6c:	e000      	b.n	8014b70 <tcp_kill_prio+0x8c>
    return;
 8014b6e:	bf00      	nop
  }
}
 8014b70:	3718      	adds	r7, #24
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	20027528 	.word	0x20027528
 8014b7c:	2002751c 	.word	0x2002751c

08014b80 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	4603      	mov	r3, r0
 8014b88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014b8a:	79fb      	ldrb	r3, [r7, #7]
 8014b8c:	2b08      	cmp	r3, #8
 8014b8e:	d009      	beq.n	8014ba4 <tcp_kill_state+0x24>
 8014b90:	79fb      	ldrb	r3, [r7, #7]
 8014b92:	2b09      	cmp	r3, #9
 8014b94:	d006      	beq.n	8014ba4 <tcp_kill_state+0x24>
 8014b96:	4b1a      	ldr	r3, [pc, #104]	@ (8014c00 <tcp_kill_state+0x80>)
 8014b98:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014b9c:	4919      	ldr	r1, [pc, #100]	@ (8014c04 <tcp_kill_state+0x84>)
 8014b9e:	481a      	ldr	r0, [pc, #104]	@ (8014c08 <tcp_kill_state+0x88>)
 8014ba0:	f008 fc7e 	bl	801d4a0 <iprintf>

  inactivity = 0;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bac:	4b17      	ldr	r3, [pc, #92]	@ (8014c0c <tcp_kill_state+0x8c>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	617b      	str	r3, [r7, #20]
 8014bb2:	e017      	b.n	8014be4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	7d1b      	ldrb	r3, [r3, #20]
 8014bb8:	79fa      	ldrb	r2, [r7, #7]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d10f      	bne.n	8014bde <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014bbe:	4b14      	ldr	r3, [pc, #80]	@ (8014c10 <tcp_kill_state+0x90>)
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	6a1b      	ldr	r3, [r3, #32]
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d807      	bhi.n	8014bde <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014bce:	4b10      	ldr	r3, [pc, #64]	@ (8014c10 <tcp_kill_state+0x90>)
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	6a1b      	ldr	r3, [r3, #32]
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	68db      	ldr	r3, [r3, #12]
 8014be2:	617b      	str	r3, [r7, #20]
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d1e4      	bne.n	8014bb4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d003      	beq.n	8014bf8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014bf0:	2100      	movs	r1, #0
 8014bf2:	6938      	ldr	r0, [r7, #16]
 8014bf4:	f7ff f950 	bl	8013e98 <tcp_abandon>
  }
}
 8014bf8:	bf00      	nop
 8014bfa:	3718      	adds	r7, #24
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0801f214 	.word	0x0801f214
 8014c04:	0801f7a0 	.word	0x0801f7a0
 8014c08:	0801f258 	.word	0x0801f258
 8014c0c:	20027528 	.word	0x20027528
 8014c10:	2002751c 	.word	0x2002751c

08014c14 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c22:	4b12      	ldr	r3, [pc, #72]	@ (8014c6c <tcp_kill_timewait+0x58>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	60fb      	str	r3, [r7, #12]
 8014c28:	e012      	b.n	8014c50 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c2a:	4b11      	ldr	r3, [pc, #68]	@ (8014c70 <tcp_kill_timewait+0x5c>)
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	6a1b      	ldr	r3, [r3, #32]
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d807      	bhi.n	8014c4a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c70 <tcp_kill_timewait+0x5c>)
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	6a1b      	ldr	r3, [r3, #32]
 8014c42:	1ad3      	subs	r3, r2, r3
 8014c44:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	60fb      	str	r3, [r7, #12]
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d1e9      	bne.n	8014c2a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014c5c:	68b8      	ldr	r0, [r7, #8]
 8014c5e:	f7ff f9d9 	bl	8014014 <tcp_abort>
  }
}
 8014c62:	bf00      	nop
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	2002752c 	.word	0x2002752c
 8014c70:	2002751c 	.word	0x2002751c

08014c74 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014c7a:	4b10      	ldr	r3, [pc, #64]	@ (8014cbc <tcp_handle_closepend+0x48>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014c80:	e014      	b.n	8014cac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	68db      	ldr	r3, [r3, #12]
 8014c86:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	8b5b      	ldrh	r3, [r3, #26]
 8014c8c:	f003 0308 	and.w	r3, r3, #8
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d009      	beq.n	8014ca8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f023 0308 	bic.w	r3, r3, #8
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7ff f862 	bl	8013d6c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d1e7      	bne.n	8014c82 <tcp_handle_closepend+0xe>
  }
}
 8014cb2:	bf00      	nop
 8014cb4:	bf00      	nop
 8014cb6:	3708      	adds	r7, #8
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	20027528 	.word	0x20027528

08014cc0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cca:	2001      	movs	r0, #1
 8014ccc:	f7fd fce4 	bl	8012698 <memp_malloc>
 8014cd0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d126      	bne.n	8014d26 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014cd8:	f7ff ffcc 	bl	8014c74 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014cdc:	f7ff ff9a 	bl	8014c14 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	f7fd fcd9 	bl	8012698 <memp_malloc>
 8014ce6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d11b      	bne.n	8014d26 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014cee:	2009      	movs	r0, #9
 8014cf0:	f7ff ff46 	bl	8014b80 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cf4:	2001      	movs	r0, #1
 8014cf6:	f7fd fccf 	bl	8012698 <memp_malloc>
 8014cfa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d111      	bne.n	8014d26 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014d02:	2008      	movs	r0, #8
 8014d04:	f7ff ff3c 	bl	8014b80 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d08:	2001      	movs	r0, #1
 8014d0a:	f7fd fcc5 	bl	8012698 <memp_malloc>
 8014d0e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d107      	bne.n	8014d26 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d16:	79fb      	ldrb	r3, [r7, #7]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7ff fee3 	bl	8014ae4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d1e:	2001      	movs	r0, #1
 8014d20:	f7fd fcba 	bl	8012698 <memp_malloc>
 8014d24:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d03f      	beq.n	8014dac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d2c:	229c      	movs	r2, #156	@ 0x9c
 8014d2e:	2100      	movs	r1, #0
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f008 fc1a 	bl	801d56a <memset>
    pcb->prio = prio;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	79fa      	ldrb	r2, [r7, #7]
 8014d3a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014d42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	22ff      	movs	r2, #255	@ 0xff
 8014d5a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014d62:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2206      	movs	r2, #6
 8014d68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2206      	movs	r2, #6
 8014d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d78:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014d82:	4b0d      	ldr	r3, [pc, #52]	@ (8014db8 <tcp_alloc+0xf8>)
 8014d84:	681a      	ldr	r2, [r3, #0]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8014dbc <tcp_alloc+0xfc>)
 8014d8c:	781a      	ldrb	r2, [r3, #0]
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014d98:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	4a08      	ldr	r2, [pc, #32]	@ (8014dc0 <tcp_alloc+0x100>)
 8014da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	4a07      	ldr	r2, [pc, #28]	@ (8014dc4 <tcp_alloc+0x104>)
 8014da8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014dac:	68fb      	ldr	r3, [r7, #12]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	2002751c 	.word	0x2002751c
 8014dbc:	20027532 	.word	0x20027532
 8014dc0:	08014a79 	.word	0x08014a79
 8014dc4:	006ddd00 	.word	0x006ddd00

08014dc8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d107      	bne.n	8014de6 <tcp_pcb_purge+0x1e>
 8014dd6:	4b21      	ldr	r3, [pc, #132]	@ (8014e5c <tcp_pcb_purge+0x94>)
 8014dd8:	f640 0251 	movw	r2, #2129	@ 0x851
 8014ddc:	4920      	ldr	r1, [pc, #128]	@ (8014e60 <tcp_pcb_purge+0x98>)
 8014dde:	4821      	ldr	r0, [pc, #132]	@ (8014e64 <tcp_pcb_purge+0x9c>)
 8014de0:	f008 fb5e 	bl	801d4a0 <iprintf>
 8014de4:	e037      	b.n	8014e56 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	7d1b      	ldrb	r3, [r3, #20]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d033      	beq.n	8014e56 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014df2:	2b0a      	cmp	r3, #10
 8014df4:	d02f      	beq.n	8014e56 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d02b      	beq.n	8014e56 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d007      	beq.n	8014e16 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe fb5e 	bl	80134cc <pbuf_free>
      pcb->refused_data = NULL;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d002      	beq.n	8014e24 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 f986 	bl	8015130 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff fdc7 	bl	80149c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7ff fdc2 	bl	80149c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2200      	movs	r2, #0
 8014e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	0801f214 	.word	0x0801f214
 8014e60:	0801f860 	.word	0x0801f860
 8014e64:	0801f258 	.word	0x0801f258

08014e68 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <tcp_pcb_remove+0x1e>
 8014e78:	4b3e      	ldr	r3, [pc, #248]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014e7a:	f640 0283 	movw	r2, #2179	@ 0x883
 8014e7e:	493e      	ldr	r1, [pc, #248]	@ (8014f78 <tcp_pcb_remove+0x110>)
 8014e80:	483e      	ldr	r0, [pc, #248]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014e82:	f008 fb0d 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d106      	bne.n	8014e9a <tcp_pcb_remove+0x32>
 8014e8c:	4b39      	ldr	r3, [pc, #228]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014e8e:	f640 0284 	movw	r2, #2180	@ 0x884
 8014e92:	493b      	ldr	r1, [pc, #236]	@ (8014f80 <tcp_pcb_remove+0x118>)
 8014e94:	4839      	ldr	r0, [pc, #228]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014e96:	f008 fb03 	bl	801d4a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d105      	bne.n	8014eb0 <tcp_pcb_remove+0x48>
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	68da      	ldr	r2, [r3, #12]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	601a      	str	r2, [r3, #0]
 8014eae:	e013      	b.n	8014ed8 <tcp_pcb_remove+0x70>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	60fb      	str	r3, [r7, #12]
 8014eb6:	e00c      	b.n	8014ed2 <tcp_pcb_remove+0x6a>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	683a      	ldr	r2, [r7, #0]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d104      	bne.n	8014ecc <tcp_pcb_remove+0x64>
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	68da      	ldr	r2, [r3, #12]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	60da      	str	r2, [r3, #12]
 8014eca:	e005      	b.n	8014ed8 <tcp_pcb_remove+0x70>
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	60fb      	str	r3, [r7, #12]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d1ef      	bne.n	8014eb8 <tcp_pcb_remove+0x50>
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	2200      	movs	r2, #0
 8014edc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014ede:	6838      	ldr	r0, [r7, #0]
 8014ee0:	f7ff ff72 	bl	8014dc8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	7d1b      	ldrb	r3, [r3, #20]
 8014ee8:	2b0a      	cmp	r3, #10
 8014eea:	d013      	beq.n	8014f14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d00f      	beq.n	8014f14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	8b5b      	ldrh	r3, [r3, #26]
 8014ef8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d009      	beq.n	8014f14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	8b5b      	ldrh	r3, [r3, #26]
 8014f04:	f043 0302 	orr.w	r3, r3, #2
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f0e:	6838      	ldr	r0, [r7, #0]
 8014f10:	f002 ff68 	bl	8017de4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	7d1b      	ldrb	r3, [r3, #20]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d020      	beq.n	8014f5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d006      	beq.n	8014f32 <tcp_pcb_remove+0xca>
 8014f24:	4b13      	ldr	r3, [pc, #76]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f26:	f640 0293 	movw	r2, #2195	@ 0x893
 8014f2a:	4916      	ldr	r1, [pc, #88]	@ (8014f84 <tcp_pcb_remove+0x11c>)
 8014f2c:	4813      	ldr	r0, [pc, #76]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f2e:	f008 fab7 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d006      	beq.n	8014f48 <tcp_pcb_remove+0xe0>
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f3c:	f640 0294 	movw	r2, #2196	@ 0x894
 8014f40:	4911      	ldr	r1, [pc, #68]	@ (8014f88 <tcp_pcb_remove+0x120>)
 8014f42:	480e      	ldr	r0, [pc, #56]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f44:	f008 faac 	bl	801d4a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d006      	beq.n	8014f5e <tcp_pcb_remove+0xf6>
 8014f50:	4b08      	ldr	r3, [pc, #32]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f52:	f640 0296 	movw	r2, #2198	@ 0x896
 8014f56:	490d      	ldr	r1, [pc, #52]	@ (8014f8c <tcp_pcb_remove+0x124>)
 8014f58:	4808      	ldr	r0, [pc, #32]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f5a:	f008 faa1 	bl	801d4a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	2200      	movs	r2, #0
 8014f62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2200      	movs	r2, #0
 8014f68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014f6a:	bf00      	nop
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	0801f214 	.word	0x0801f214
 8014f78:	0801f87c 	.word	0x0801f87c
 8014f7c:	0801f258 	.word	0x0801f258
 8014f80:	0801f898 	.word	0x0801f898
 8014f84:	0801f8b8 	.word	0x0801f8b8
 8014f88:	0801f8d0 	.word	0x0801f8d0
 8014f8c:	0801f8ec 	.word	0x0801f8ec

08014f90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_next_iss+0x1c>
 8014f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8014fc8 <tcp_next_iss+0x38>)
 8014fa0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014fa4:	4909      	ldr	r1, [pc, #36]	@ (8014fcc <tcp_next_iss+0x3c>)
 8014fa6:	480a      	ldr	r0, [pc, #40]	@ (8014fd0 <tcp_next_iss+0x40>)
 8014fa8:	f008 fa7a 	bl	801d4a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014fac:	4b09      	ldr	r3, [pc, #36]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	4b09      	ldr	r3, [pc, #36]	@ (8014fd8 <tcp_next_iss+0x48>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	4a07      	ldr	r2, [pc, #28]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fb8:	6013      	str	r3, [r2, #0]
  return iss;
 8014fba:	4b06      	ldr	r3, [pc, #24]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	0801f214 	.word	0x0801f214
 8014fcc:	0801f904 	.word	0x0801f904
 8014fd0:	0801f258 	.word	0x0801f258
 8014fd4:	20000028 	.word	0x20000028
 8014fd8:	2002751c 	.word	0x2002751c

08014fdc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b086      	sub	sp, #24
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d106      	bne.n	8014ffe <tcp_eff_send_mss_netif+0x22>
 8014ff0:	4b14      	ldr	r3, [pc, #80]	@ (8015044 <tcp_eff_send_mss_netif+0x68>)
 8014ff2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014ff6:	4914      	ldr	r1, [pc, #80]	@ (8015048 <tcp_eff_send_mss_netif+0x6c>)
 8014ff8:	4814      	ldr	r0, [pc, #80]	@ (801504c <tcp_eff_send_mss_netif+0x70>)
 8014ffa:	f008 fa51 	bl	801d4a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015004:	89fb      	ldrh	r3, [r7, #14]
 8015006:	e019      	b.n	801503c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801500c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801500e:	8afb      	ldrh	r3, [r7, #22]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d012      	beq.n	801503a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015014:	2328      	movs	r3, #40	@ 0x28
 8015016:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015018:	8afa      	ldrh	r2, [r7, #22]
 801501a:	8abb      	ldrh	r3, [r7, #20]
 801501c:	429a      	cmp	r2, r3
 801501e:	d904      	bls.n	801502a <tcp_eff_send_mss_netif+0x4e>
 8015020:	8afa      	ldrh	r2, [r7, #22]
 8015022:	8abb      	ldrh	r3, [r7, #20]
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	b29b      	uxth	r3, r3
 8015028:	e000      	b.n	801502c <tcp_eff_send_mss_netif+0x50>
 801502a:	2300      	movs	r3, #0
 801502c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801502e:	8a7a      	ldrh	r2, [r7, #18]
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	4293      	cmp	r3, r2
 8015034:	bf28      	it	cs
 8015036:	4613      	movcs	r3, r2
 8015038:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801503a:	89fb      	ldrh	r3, [r7, #14]
}
 801503c:	4618      	mov	r0, r3
 801503e:	3718      	adds	r7, #24
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	0801f214 	.word	0x0801f214
 8015048:	0801f920 	.word	0x0801f920
 801504c:	0801f258 	.word	0x0801f258

08015050 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d119      	bne.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015064:	4b10      	ldr	r3, [pc, #64]	@ (80150a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015066:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801506a:	4910      	ldr	r1, [pc, #64]	@ (80150ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801506c:	4810      	ldr	r0, [pc, #64]	@ (80150b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801506e:	f008 fa17 	bl	801d4a0 <iprintf>

  while (pcb != NULL) {
 8015072:	e011      	b.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	429a      	cmp	r2, r3
 801507e:	d108      	bne.n	8015092 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7fe ffc4 	bl	8014014 <tcp_abort>
      pcb = next;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	60fb      	str	r3, [r7, #12]
 8015090:	e002      	b.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d1ea      	bne.n	8015074 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801509e:	bf00      	nop
 80150a0:	bf00      	nop
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	0801f214 	.word	0x0801f214
 80150ac:	0801f948 	.word	0x0801f948
 80150b0:	0801f258 	.word	0x0801f258

080150b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d02a      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d026      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80150cc:	4b15      	ldr	r3, [pc, #84]	@ (8015124 <tcp_netif_ip_addr_changed+0x70>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4619      	mov	r1, r3
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f7ff ffbc 	bl	8015050 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80150d8:	4b13      	ldr	r3, [pc, #76]	@ (8015128 <tcp_netif_ip_addr_changed+0x74>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4619      	mov	r1, r3
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f7ff ffb6 	bl	8015050 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d017      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d013      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80150f2:	4b0e      	ldr	r3, [pc, #56]	@ (801512c <tcp_netif_ip_addr_changed+0x78>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	60fb      	str	r3, [r7, #12]
 80150f8:	e00c      	b.n	8015114 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	429a      	cmp	r2, r3
 8015104:	d103      	bne.n	801510e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	60fb      	str	r3, [r7, #12]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d1ef      	bne.n	80150fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801511a:	bf00      	nop
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	20027528 	.word	0x20027528
 8015128:	20027520 	.word	0x20027520
 801512c:	20027524 	.word	0x20027524

08015130 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801513c:	2b00      	cmp	r3, #0
 801513e:	d007      	beq.n	8015150 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015144:	4618      	mov	r0, r3
 8015146:	f7ff fc3d 	bl	80149c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015150:	bf00      	nop
 8015152:	3708      	adds	r7, #8
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015158:	b590      	push	{r4, r7, lr}
 801515a:	b08d      	sub	sp, #52	@ 0x34
 801515c:	af04      	add	r7, sp, #16
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d105      	bne.n	8015174 <tcp_input+0x1c>
 8015168:	4b9b      	ldr	r3, [pc, #620]	@ (80153d8 <tcp_input+0x280>)
 801516a:	2283      	movs	r2, #131	@ 0x83
 801516c:	499b      	ldr	r1, [pc, #620]	@ (80153dc <tcp_input+0x284>)
 801516e:	489c      	ldr	r0, [pc, #624]	@ (80153e0 <tcp_input+0x288>)
 8015170:	f008 f996 	bl	801d4a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	4a9a      	ldr	r2, [pc, #616]	@ (80153e4 <tcp_input+0x28c>)
 801517a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	895b      	ldrh	r3, [r3, #10]
 8015180:	2b13      	cmp	r3, #19
 8015182:	f240 83d1 	bls.w	8015928 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015186:	4b98      	ldr	r3, [pc, #608]	@ (80153e8 <tcp_input+0x290>)
 8015188:	695b      	ldr	r3, [r3, #20]
 801518a:	4a97      	ldr	r2, [pc, #604]	@ (80153e8 <tcp_input+0x290>)
 801518c:	6812      	ldr	r2, [r2, #0]
 801518e:	4611      	mov	r1, r2
 8015190:	4618      	mov	r0, r3
 8015192:	f005 feef 	bl	801af74 <ip4_addr_isbroadcast_u32>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	f040 83c7 	bne.w	801592c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801519e:	4b92      	ldr	r3, [pc, #584]	@ (80153e8 <tcp_input+0x290>)
 80151a0:	695b      	ldr	r3, [r3, #20]
 80151a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80151a6:	2be0      	cmp	r3, #224	@ 0xe0
 80151a8:	f000 83c0 	beq.w	801592c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80151ac:	4b8d      	ldr	r3, [pc, #564]	@ (80153e4 <tcp_input+0x28c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	899b      	ldrh	r3, [r3, #12]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fc fd9b 	bl	8011cf0 <lwip_htons>
 80151ba:	4603      	mov	r3, r0
 80151bc:	0b1b      	lsrs	r3, r3, #12
 80151be:	b29b      	uxth	r3, r3
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80151c6:	7cbb      	ldrb	r3, [r7, #18]
 80151c8:	2b13      	cmp	r3, #19
 80151ca:	f240 83b1 	bls.w	8015930 <tcp_input+0x7d8>
 80151ce:	7cbb      	ldrb	r3, [r7, #18]
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	891b      	ldrh	r3, [r3, #8]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	f200 83aa 	bhi.w	8015930 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80151dc:	7cbb      	ldrb	r3, [r7, #18]
 80151de:	b29b      	uxth	r3, r3
 80151e0:	3b14      	subs	r3, #20
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	4b81      	ldr	r3, [pc, #516]	@ (80153ec <tcp_input+0x294>)
 80151e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80151e8:	4b81      	ldr	r3, [pc, #516]	@ (80153f0 <tcp_input+0x298>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	895a      	ldrh	r2, [r3, #10]
 80151f2:	7cbb      	ldrb	r3, [r7, #18]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d309      	bcc.n	801520e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80151fa:	4b7c      	ldr	r3, [pc, #496]	@ (80153ec <tcp_input+0x294>)
 80151fc:	881a      	ldrh	r2, [r3, #0]
 80151fe:	4b7d      	ldr	r3, [pc, #500]	@ (80153f4 <tcp_input+0x29c>)
 8015200:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015202:	7cbb      	ldrb	r3, [r7, #18]
 8015204:	4619      	mov	r1, r3
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f7fe f8da 	bl	80133c0 <pbuf_remove_header>
 801520c:	e04e      	b.n	80152ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d105      	bne.n	8015222 <tcp_input+0xca>
 8015216:	4b70      	ldr	r3, [pc, #448]	@ (80153d8 <tcp_input+0x280>)
 8015218:	22c2      	movs	r2, #194	@ 0xc2
 801521a:	4977      	ldr	r1, [pc, #476]	@ (80153f8 <tcp_input+0x2a0>)
 801521c:	4870      	ldr	r0, [pc, #448]	@ (80153e0 <tcp_input+0x288>)
 801521e:	f008 f93f 	bl	801d4a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015222:	2114      	movs	r1, #20
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7fe f8cb 	bl	80133c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	895a      	ldrh	r2, [r3, #10]
 801522e:	4b71      	ldr	r3, [pc, #452]	@ (80153f4 <tcp_input+0x29c>)
 8015230:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015232:	4b6e      	ldr	r3, [pc, #440]	@ (80153ec <tcp_input+0x294>)
 8015234:	881a      	ldrh	r2, [r3, #0]
 8015236:	4b6f      	ldr	r3, [pc, #444]	@ (80153f4 <tcp_input+0x29c>)
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801523e:	4b6d      	ldr	r3, [pc, #436]	@ (80153f4 <tcp_input+0x29c>)
 8015240:	881b      	ldrh	r3, [r3, #0]
 8015242:	4619      	mov	r1, r3
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7fe f8bb 	bl	80133c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	895b      	ldrh	r3, [r3, #10]
 8015250:	8a3a      	ldrh	r2, [r7, #16]
 8015252:	429a      	cmp	r2, r3
 8015254:	f200 836e 	bhi.w	8015934 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	4a64      	ldr	r2, [pc, #400]	@ (80153f0 <tcp_input+0x298>)
 8015260:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	8a3a      	ldrh	r2, [r7, #16]
 8015268:	4611      	mov	r1, r2
 801526a:	4618      	mov	r0, r3
 801526c:	f7fe f8a8 	bl	80133c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	891a      	ldrh	r2, [r3, #8]
 8015274:	8a3b      	ldrh	r3, [r7, #16]
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	b29a      	uxth	r2, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	895b      	ldrh	r3, [r3, #10]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d005      	beq.n	8015292 <tcp_input+0x13a>
 8015286:	4b54      	ldr	r3, [pc, #336]	@ (80153d8 <tcp_input+0x280>)
 8015288:	22df      	movs	r2, #223	@ 0xdf
 801528a:	495c      	ldr	r1, [pc, #368]	@ (80153fc <tcp_input+0x2a4>)
 801528c:	4854      	ldr	r0, [pc, #336]	@ (80153e0 <tcp_input+0x288>)
 801528e:	f008 f907 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	891a      	ldrh	r2, [r3, #8]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	891b      	ldrh	r3, [r3, #8]
 801529c:	429a      	cmp	r2, r3
 801529e:	d005      	beq.n	80152ac <tcp_input+0x154>
 80152a0:	4b4d      	ldr	r3, [pc, #308]	@ (80153d8 <tcp_input+0x280>)
 80152a2:	22e0      	movs	r2, #224	@ 0xe0
 80152a4:	4956      	ldr	r1, [pc, #344]	@ (8015400 <tcp_input+0x2a8>)
 80152a6:	484e      	ldr	r0, [pc, #312]	@ (80153e0 <tcp_input+0x288>)
 80152a8:	f008 f8fa 	bl	801d4a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80152ac:	4b4d      	ldr	r3, [pc, #308]	@ (80153e4 <tcp_input+0x28c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4a4b      	ldr	r2, [pc, #300]	@ (80153e4 <tcp_input+0x28c>)
 80152b6:	6814      	ldr	r4, [r2, #0]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fc fd19 	bl	8011cf0 <lwip_htons>
 80152be:	4603      	mov	r3, r0
 80152c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80152c2:	4b48      	ldr	r3, [pc, #288]	@ (80153e4 <tcp_input+0x28c>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	885b      	ldrh	r3, [r3, #2]
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	4a46      	ldr	r2, [pc, #280]	@ (80153e4 <tcp_input+0x28c>)
 80152cc:	6814      	ldr	r4, [r2, #0]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fc fd0e 	bl	8011cf0 <lwip_htons>
 80152d4:	4603      	mov	r3, r0
 80152d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80152d8:	4b42      	ldr	r3, [pc, #264]	@ (80153e4 <tcp_input+0x28c>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4a41      	ldr	r2, [pc, #260]	@ (80153e4 <tcp_input+0x28c>)
 80152e0:	6814      	ldr	r4, [r2, #0]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fc fd1a 	bl	8011d1c <lwip_htonl>
 80152e8:	4603      	mov	r3, r0
 80152ea:	6063      	str	r3, [r4, #4]
 80152ec:	6863      	ldr	r3, [r4, #4]
 80152ee:	4a45      	ldr	r2, [pc, #276]	@ (8015404 <tcp_input+0x2ac>)
 80152f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80152f2:	4b3c      	ldr	r3, [pc, #240]	@ (80153e4 <tcp_input+0x28c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	4a3a      	ldr	r2, [pc, #232]	@ (80153e4 <tcp_input+0x28c>)
 80152fa:	6814      	ldr	r4, [r2, #0]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fc fd0d 	bl	8011d1c <lwip_htonl>
 8015302:	4603      	mov	r3, r0
 8015304:	60a3      	str	r3, [r4, #8]
 8015306:	68a3      	ldr	r3, [r4, #8]
 8015308:	4a3f      	ldr	r2, [pc, #252]	@ (8015408 <tcp_input+0x2b0>)
 801530a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801530c:	4b35      	ldr	r3, [pc, #212]	@ (80153e4 <tcp_input+0x28c>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	89db      	ldrh	r3, [r3, #14]
 8015312:	b29b      	uxth	r3, r3
 8015314:	4a33      	ldr	r2, [pc, #204]	@ (80153e4 <tcp_input+0x28c>)
 8015316:	6814      	ldr	r4, [r2, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f7fc fce9 	bl	8011cf0 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015322:	4b30      	ldr	r3, [pc, #192]	@ (80153e4 <tcp_input+0x28c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	899b      	ldrh	r3, [r3, #12]
 8015328:	b29b      	uxth	r3, r3
 801532a:	4618      	mov	r0, r3
 801532c:	f7fc fce0 	bl	8011cf0 <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015338:	b2da      	uxtb	r2, r3
 801533a:	4b34      	ldr	r3, [pc, #208]	@ (801540c <tcp_input+0x2b4>)
 801533c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	891a      	ldrh	r2, [r3, #8]
 8015342:	4b33      	ldr	r3, [pc, #204]	@ (8015410 <tcp_input+0x2b8>)
 8015344:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015346:	4b31      	ldr	r3, [pc, #196]	@ (801540c <tcp_input+0x2b4>)
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	f003 0303 	and.w	r3, r3, #3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d00c      	beq.n	801536c <tcp_input+0x214>
    tcplen++;
 8015352:	4b2f      	ldr	r3, [pc, #188]	@ (8015410 <tcp_input+0x2b8>)
 8015354:	881b      	ldrh	r3, [r3, #0]
 8015356:	3301      	adds	r3, #1
 8015358:	b29a      	uxth	r2, r3
 801535a:	4b2d      	ldr	r3, [pc, #180]	@ (8015410 <tcp_input+0x2b8>)
 801535c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	891a      	ldrh	r2, [r3, #8]
 8015362:	4b2b      	ldr	r3, [pc, #172]	@ (8015410 <tcp_input+0x2b8>)
 8015364:	881b      	ldrh	r3, [r3, #0]
 8015366:	429a      	cmp	r2, r3
 8015368:	f200 82e6 	bhi.w	8015938 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801536c:	2300      	movs	r3, #0
 801536e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015370:	4b28      	ldr	r3, [pc, #160]	@ (8015414 <tcp_input+0x2bc>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	61fb      	str	r3, [r7, #28]
 8015376:	e09d      	b.n	80154b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	7d1b      	ldrb	r3, [r3, #20]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d105      	bne.n	801538c <tcp_input+0x234>
 8015380:	4b15      	ldr	r3, [pc, #84]	@ (80153d8 <tcp_input+0x280>)
 8015382:	22fb      	movs	r2, #251	@ 0xfb
 8015384:	4924      	ldr	r1, [pc, #144]	@ (8015418 <tcp_input+0x2c0>)
 8015386:	4816      	ldr	r0, [pc, #88]	@ (80153e0 <tcp_input+0x288>)
 8015388:	f008 f88a 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	7d1b      	ldrb	r3, [r3, #20]
 8015390:	2b0a      	cmp	r3, #10
 8015392:	d105      	bne.n	80153a0 <tcp_input+0x248>
 8015394:	4b10      	ldr	r3, [pc, #64]	@ (80153d8 <tcp_input+0x280>)
 8015396:	22fc      	movs	r2, #252	@ 0xfc
 8015398:	4920      	ldr	r1, [pc, #128]	@ (801541c <tcp_input+0x2c4>)
 801539a:	4811      	ldr	r0, [pc, #68]	@ (80153e0 <tcp_input+0x288>)
 801539c:	f008 f880 	bl	801d4a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	7d1b      	ldrb	r3, [r3, #20]
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d105      	bne.n	80153b4 <tcp_input+0x25c>
 80153a8:	4b0b      	ldr	r3, [pc, #44]	@ (80153d8 <tcp_input+0x280>)
 80153aa:	22fd      	movs	r2, #253	@ 0xfd
 80153ac:	491c      	ldr	r1, [pc, #112]	@ (8015420 <tcp_input+0x2c8>)
 80153ae:	480c      	ldr	r0, [pc, #48]	@ (80153e0 <tcp_input+0x288>)
 80153b0:	f008 f876 	bl	801d4a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	7a1b      	ldrb	r3, [r3, #8]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d033      	beq.n	8015424 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	7a1a      	ldrb	r2, [r3, #8]
 80153c0:	4b09      	ldr	r3, [pc, #36]	@ (80153e8 <tcp_input+0x290>)
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80153c8:	3301      	adds	r3, #1
 80153ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d029      	beq.n	8015424 <tcp_input+0x2cc>
      prev = pcb;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	61bb      	str	r3, [r7, #24]
      continue;
 80153d4:	e06b      	b.n	80154ae <tcp_input+0x356>
 80153d6:	bf00      	nop
 80153d8:	0801f97c 	.word	0x0801f97c
 80153dc:	0801f9b0 	.word	0x0801f9b0
 80153e0:	0801f9c8 	.word	0x0801f9c8
 80153e4:	20027544 	.word	0x20027544
 80153e8:	2002441c 	.word	0x2002441c
 80153ec:	20027548 	.word	0x20027548
 80153f0:	2002754c 	.word	0x2002754c
 80153f4:	2002754a 	.word	0x2002754a
 80153f8:	0801f9f0 	.word	0x0801f9f0
 80153fc:	0801fa00 	.word	0x0801fa00
 8015400:	0801fa0c 	.word	0x0801fa0c
 8015404:	20027554 	.word	0x20027554
 8015408:	20027558 	.word	0x20027558
 801540c:	20027560 	.word	0x20027560
 8015410:	2002755e 	.word	0x2002755e
 8015414:	20027528 	.word	0x20027528
 8015418:	0801fa2c 	.word	0x0801fa2c
 801541c:	0801fa54 	.word	0x0801fa54
 8015420:	0801fa80 	.word	0x0801fa80
    }

    if (pcb->remote_port == tcphdr->src &&
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	8b1a      	ldrh	r2, [r3, #24]
 8015428:	4b72      	ldr	r3, [pc, #456]	@ (80155f4 <tcp_input+0x49c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	b29b      	uxth	r3, r3
 8015430:	429a      	cmp	r2, r3
 8015432:	d13a      	bne.n	80154aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	8ada      	ldrh	r2, [r3, #22]
 8015438:	4b6e      	ldr	r3, [pc, #440]	@ (80155f4 <tcp_input+0x49c>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	885b      	ldrh	r3, [r3, #2]
 801543e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015440:	429a      	cmp	r2, r3
 8015442:	d132      	bne.n	80154aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	4b6b      	ldr	r3, [pc, #428]	@ (80155f8 <tcp_input+0x4a0>)
 801544a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801544c:	429a      	cmp	r2, r3
 801544e:	d12c      	bne.n	80154aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	4b68      	ldr	r3, [pc, #416]	@ (80155f8 <tcp_input+0x4a0>)
 8015456:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015458:	429a      	cmp	r2, r3
 801545a:	d126      	bne.n	80154aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	429a      	cmp	r2, r3
 8015464:	d106      	bne.n	8015474 <tcp_input+0x31c>
 8015466:	4b65      	ldr	r3, [pc, #404]	@ (80155fc <tcp_input+0x4a4>)
 8015468:	f240 120d 	movw	r2, #269	@ 0x10d
 801546c:	4964      	ldr	r1, [pc, #400]	@ (8015600 <tcp_input+0x4a8>)
 801546e:	4865      	ldr	r0, [pc, #404]	@ (8015604 <tcp_input+0x4ac>)
 8015470:	f008 f816 	bl	801d4a0 <iprintf>
      if (prev != NULL) {
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00a      	beq.n	8015490 <tcp_input+0x338>
        prev->next = pcb->next;
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	68da      	ldr	r2, [r3, #12]
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015482:	4b61      	ldr	r3, [pc, #388]	@ (8015608 <tcp_input+0x4b0>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801548a:	4a5f      	ldr	r2, [pc, #380]	@ (8015608 <tcp_input+0x4b0>)
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	69fa      	ldr	r2, [r7, #28]
 8015496:	429a      	cmp	r2, r3
 8015498:	d111      	bne.n	80154be <tcp_input+0x366>
 801549a:	4b58      	ldr	r3, [pc, #352]	@ (80155fc <tcp_input+0x4a4>)
 801549c:	f240 1215 	movw	r2, #277	@ 0x115
 80154a0:	495a      	ldr	r1, [pc, #360]	@ (801560c <tcp_input+0x4b4>)
 80154a2:	4858      	ldr	r0, [pc, #352]	@ (8015604 <tcp_input+0x4ac>)
 80154a4:	f007 fffc 	bl	801d4a0 <iprintf>
      break;
 80154a8:	e009      	b.n	80154be <tcp_input+0x366>
    }
    prev = pcb;
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	61fb      	str	r3, [r7, #28]
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	f47f af5e 	bne.w	8015378 <tcp_input+0x220>
 80154bc:	e000      	b.n	80154c0 <tcp_input+0x368>
      break;
 80154be:	bf00      	nop
  }

  if (pcb == NULL) {
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f040 80aa 	bne.w	801561c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80154c8:	4b51      	ldr	r3, [pc, #324]	@ (8015610 <tcp_input+0x4b8>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	61fb      	str	r3, [r7, #28]
 80154ce:	e03f      	b.n	8015550 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	7d1b      	ldrb	r3, [r3, #20]
 80154d4:	2b0a      	cmp	r3, #10
 80154d6:	d006      	beq.n	80154e6 <tcp_input+0x38e>
 80154d8:	4b48      	ldr	r3, [pc, #288]	@ (80155fc <tcp_input+0x4a4>)
 80154da:	f240 121f 	movw	r2, #287	@ 0x11f
 80154de:	494d      	ldr	r1, [pc, #308]	@ (8015614 <tcp_input+0x4bc>)
 80154e0:	4848      	ldr	r0, [pc, #288]	@ (8015604 <tcp_input+0x4ac>)
 80154e2:	f007 ffdd 	bl	801d4a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	7a1b      	ldrb	r3, [r3, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d009      	beq.n	8015502 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	7a1a      	ldrb	r2, [r3, #8]
 80154f2:	4b41      	ldr	r3, [pc, #260]	@ (80155f8 <tcp_input+0x4a0>)
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80154fa:	3301      	adds	r3, #1
 80154fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154fe:	429a      	cmp	r2, r3
 8015500:	d122      	bne.n	8015548 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	8b1a      	ldrh	r2, [r3, #24]
 8015506:	4b3b      	ldr	r3, [pc, #236]	@ (80155f4 <tcp_input+0x49c>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	b29b      	uxth	r3, r3
 801550e:	429a      	cmp	r2, r3
 8015510:	d11b      	bne.n	801554a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	8ada      	ldrh	r2, [r3, #22]
 8015516:	4b37      	ldr	r3, [pc, #220]	@ (80155f4 <tcp_input+0x49c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	885b      	ldrh	r3, [r3, #2]
 801551c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801551e:	429a      	cmp	r2, r3
 8015520:	d113      	bne.n	801554a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	685a      	ldr	r2, [r3, #4]
 8015526:	4b34      	ldr	r3, [pc, #208]	@ (80155f8 <tcp_input+0x4a0>)
 8015528:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801552a:	429a      	cmp	r2, r3
 801552c:	d10d      	bne.n	801554a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	4b31      	ldr	r3, [pc, #196]	@ (80155f8 <tcp_input+0x4a0>)
 8015534:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015536:	429a      	cmp	r2, r3
 8015538:	d107      	bne.n	801554a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801553a:	69f8      	ldr	r0, [r7, #28]
 801553c:	f000 fb56 	bl	8015bec <tcp_timewait_input>
        }
        pbuf_free(p);
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f7fd ffc3 	bl	80134cc <pbuf_free>
        return;
 8015546:	e1fd      	b.n	8015944 <tcp_input+0x7ec>
        continue;
 8015548:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	61fb      	str	r3, [r7, #28]
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d1bc      	bne.n	80154d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015556:	2300      	movs	r3, #0
 8015558:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801555a:	4b2f      	ldr	r3, [pc, #188]	@ (8015618 <tcp_input+0x4c0>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	617b      	str	r3, [r7, #20]
 8015560:	e02a      	b.n	80155b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	7a1b      	ldrb	r3, [r3, #8]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00c      	beq.n	8015584 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	7a1a      	ldrb	r2, [r3, #8]
 801556e:	4b22      	ldr	r3, [pc, #136]	@ (80155f8 <tcp_input+0x4a0>)
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015576:	3301      	adds	r3, #1
 8015578:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801557a:	429a      	cmp	r2, r3
 801557c:	d002      	beq.n	8015584 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	61bb      	str	r3, [r7, #24]
        continue;
 8015582:	e016      	b.n	80155b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	8ada      	ldrh	r2, [r3, #22]
 8015588:	4b1a      	ldr	r3, [pc, #104]	@ (80155f4 <tcp_input+0x49c>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	885b      	ldrh	r3, [r3, #2]
 801558e:	b29b      	uxth	r3, r3
 8015590:	429a      	cmp	r2, r3
 8015592:	d10c      	bne.n	80155ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	4b17      	ldr	r3, [pc, #92]	@ (80155f8 <tcp_input+0x4a0>)
 801559a:	695b      	ldr	r3, [r3, #20]
 801559c:	429a      	cmp	r2, r3
 801559e:	d00f      	beq.n	80155c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00d      	beq.n	80155c2 <tcp_input+0x46a>
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d009      	beq.n	80155c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	617b      	str	r3, [r7, #20]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1d1      	bne.n	8015562 <tcp_input+0x40a>
 80155be:	e000      	b.n	80155c2 <tcp_input+0x46a>
            break;
 80155c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d029      	beq.n	801561c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00a      	beq.n	80155e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	68da      	ldr	r2, [r3, #12]
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80155d6:	4b10      	ldr	r3, [pc, #64]	@ (8015618 <tcp_input+0x4c0>)
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80155de:	4a0e      	ldr	r2, [pc, #56]	@ (8015618 <tcp_input+0x4c0>)
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80155e4:	6978      	ldr	r0, [r7, #20]
 80155e6:	f000 fa03 	bl	80159f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7fd ff6e 	bl	80134cc <pbuf_free>
      return;
 80155f0:	e1a8      	b.n	8015944 <tcp_input+0x7ec>
 80155f2:	bf00      	nop
 80155f4:	20027544 	.word	0x20027544
 80155f8:	2002441c 	.word	0x2002441c
 80155fc:	0801f97c 	.word	0x0801f97c
 8015600:	0801faa8 	.word	0x0801faa8
 8015604:	0801f9c8 	.word	0x0801f9c8
 8015608:	20027528 	.word	0x20027528
 801560c:	0801fad4 	.word	0x0801fad4
 8015610:	2002752c 	.word	0x2002752c
 8015614:	0801fb00 	.word	0x0801fb00
 8015618:	20027524 	.word	0x20027524
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 8158 	beq.w	80158d4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015624:	4b95      	ldr	r3, [pc, #596]	@ (801587c <tcp_input+0x724>)
 8015626:	2200      	movs	r2, #0
 8015628:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	891a      	ldrh	r2, [r3, #8]
 801562e:	4b93      	ldr	r3, [pc, #588]	@ (801587c <tcp_input+0x724>)
 8015630:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015632:	4a92      	ldr	r2, [pc, #584]	@ (801587c <tcp_input+0x724>)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015638:	4b91      	ldr	r3, [pc, #580]	@ (8015880 <tcp_input+0x728>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a8f      	ldr	r2, [pc, #572]	@ (801587c <tcp_input+0x724>)
 801563e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015640:	4b90      	ldr	r3, [pc, #576]	@ (8015884 <tcp_input+0x72c>)
 8015642:	2200      	movs	r2, #0
 8015644:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015646:	4b90      	ldr	r3, [pc, #576]	@ (8015888 <tcp_input+0x730>)
 8015648:	2200      	movs	r2, #0
 801564a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801564c:	4b8f      	ldr	r3, [pc, #572]	@ (801588c <tcp_input+0x734>)
 801564e:	2200      	movs	r2, #0
 8015650:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015652:	4b8f      	ldr	r3, [pc, #572]	@ (8015890 <tcp_input+0x738>)
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	f003 0308 	and.w	r3, r3, #8
 801565a:	2b00      	cmp	r3, #0
 801565c:	d006      	beq.n	801566c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	7b5b      	ldrb	r3, [r3, #13]
 8015662:	f043 0301 	orr.w	r3, r3, #1
 8015666:	b2da      	uxtb	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015670:	2b00      	cmp	r3, #0
 8015672:	d017      	beq.n	80156a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015674:	69f8      	ldr	r0, [r7, #28]
 8015676:	f7ff f929 	bl	80148cc <tcp_process_refused_data>
 801567a:	4603      	mov	r3, r0
 801567c:	f113 0f0d 	cmn.w	r3, #13
 8015680:	d007      	beq.n	8015692 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015686:	2b00      	cmp	r3, #0
 8015688:	d00c      	beq.n	80156a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801568a:	4b82      	ldr	r3, [pc, #520]	@ (8015894 <tcp_input+0x73c>)
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d008      	beq.n	80156a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015696:	2b00      	cmp	r3, #0
 8015698:	f040 80e3 	bne.w	8015862 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801569c:	69f8      	ldr	r0, [r7, #28]
 801569e:	f003 f9a7 	bl	80189f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80156a2:	e0de      	b.n	8015862 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80156a4:	4a7c      	ldr	r2, [pc, #496]	@ (8015898 <tcp_input+0x740>)
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80156aa:	69f8      	ldr	r0, [r7, #28]
 80156ac:	f000 fb18 	bl	8015ce0 <tcp_process>
 80156b0:	4603      	mov	r3, r0
 80156b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80156b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156b8:	f113 0f0d 	cmn.w	r3, #13
 80156bc:	f000 80d3 	beq.w	8015866 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80156c0:	4b71      	ldr	r3, [pc, #452]	@ (8015888 <tcp_input+0x730>)
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	f003 0308 	and.w	r3, r3, #8
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d015      	beq.n	80156f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d008      	beq.n	80156e8 <tcp_input+0x590>
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156dc:	69fa      	ldr	r2, [r7, #28]
 80156de:	6912      	ldr	r2, [r2, #16]
 80156e0:	f06f 010d 	mvn.w	r1, #13
 80156e4:	4610      	mov	r0, r2
 80156e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80156e8:	69f9      	ldr	r1, [r7, #28]
 80156ea:	486c      	ldr	r0, [pc, #432]	@ (801589c <tcp_input+0x744>)
 80156ec:	f7ff fbbc 	bl	8014e68 <tcp_pcb_remove>
        tcp_free(pcb);
 80156f0:	69f8      	ldr	r0, [r7, #28]
 80156f2:	f7fe f9a7 	bl	8013a44 <tcp_free>
 80156f6:	e0da      	b.n	80158ae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80156f8:	2300      	movs	r3, #0
 80156fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80156fc:	4b63      	ldr	r3, [pc, #396]	@ (801588c <tcp_input+0x734>)
 80156fe:	881b      	ldrh	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d01d      	beq.n	8015740 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015704:	4b61      	ldr	r3, [pc, #388]	@ (801588c <tcp_input+0x734>)
 8015706:	881b      	ldrh	r3, [r3, #0]
 8015708:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015710:	2b00      	cmp	r3, #0
 8015712:	d00a      	beq.n	801572a <tcp_input+0x5d2>
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801571a:	69fa      	ldr	r2, [r7, #28]
 801571c:	6910      	ldr	r0, [r2, #16]
 801571e:	89fa      	ldrh	r2, [r7, #14]
 8015720:	69f9      	ldr	r1, [r7, #28]
 8015722:	4798      	blx	r3
 8015724:	4603      	mov	r3, r0
 8015726:	74fb      	strb	r3, [r7, #19]
 8015728:	e001      	b.n	801572e <tcp_input+0x5d6>
 801572a:	2300      	movs	r3, #0
 801572c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801572e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015732:	f113 0f0d 	cmn.w	r3, #13
 8015736:	f000 8098 	beq.w	801586a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801573a:	4b54      	ldr	r3, [pc, #336]	@ (801588c <tcp_input+0x734>)
 801573c:	2200      	movs	r2, #0
 801573e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015740:	69f8      	ldr	r0, [r7, #28]
 8015742:	f000 f915 	bl	8015970 <tcp_input_delayed_close>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	f040 8090 	bne.w	801586e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801574e:	4b4d      	ldr	r3, [pc, #308]	@ (8015884 <tcp_input+0x72c>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d041      	beq.n	80157da <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801575a:	2b00      	cmp	r3, #0
 801575c:	d006      	beq.n	801576c <tcp_input+0x614>
 801575e:	4b50      	ldr	r3, [pc, #320]	@ (80158a0 <tcp_input+0x748>)
 8015760:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015764:	494f      	ldr	r1, [pc, #316]	@ (80158a4 <tcp_input+0x74c>)
 8015766:	4850      	ldr	r0, [pc, #320]	@ (80158a8 <tcp_input+0x750>)
 8015768:	f007 fe9a 	bl	801d4a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801576c:	69fb      	ldr	r3, [r7, #28]
 801576e:	8b5b      	ldrh	r3, [r3, #26]
 8015770:	f003 0310 	and.w	r3, r3, #16
 8015774:	2b00      	cmp	r3, #0
 8015776:	d008      	beq.n	801578a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015778:	4b42      	ldr	r3, [pc, #264]	@ (8015884 <tcp_input+0x72c>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd fea5 	bl	80134cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015782:	69f8      	ldr	r0, [r7, #28]
 8015784:	f7fe fc46 	bl	8014014 <tcp_abort>
            goto aborted;
 8015788:	e091      	b.n	80158ae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00c      	beq.n	80157ae <tcp_input+0x656>
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	6918      	ldr	r0, [r3, #16]
 801579e:	4b39      	ldr	r3, [pc, #228]	@ (8015884 <tcp_input+0x72c>)
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	2300      	movs	r3, #0
 80157a4:	69f9      	ldr	r1, [r7, #28]
 80157a6:	47a0      	blx	r4
 80157a8:	4603      	mov	r3, r0
 80157aa:	74fb      	strb	r3, [r7, #19]
 80157ac:	e008      	b.n	80157c0 <tcp_input+0x668>
 80157ae:	4b35      	ldr	r3, [pc, #212]	@ (8015884 <tcp_input+0x72c>)
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	2300      	movs	r3, #0
 80157b4:	69f9      	ldr	r1, [r7, #28]
 80157b6:	2000      	movs	r0, #0
 80157b8:	f7ff f95e 	bl	8014a78 <tcp_recv_null>
 80157bc:	4603      	mov	r3, r0
 80157be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80157c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157c4:	f113 0f0d 	cmn.w	r3, #13
 80157c8:	d053      	beq.n	8015872 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80157ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d003      	beq.n	80157da <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80157d2:	4b2c      	ldr	r3, [pc, #176]	@ (8015884 <tcp_input+0x72c>)
 80157d4:	681a      	ldr	r2, [r3, #0]
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80157da:	4b2b      	ldr	r3, [pc, #172]	@ (8015888 <tcp_input+0x730>)
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	f003 0320 	and.w	r3, r3, #32
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d030      	beq.n	8015848 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d009      	beq.n	8015802 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157f2:	7b5a      	ldrb	r2, [r3, #13]
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157f8:	f042 0220 	orr.w	r2, r2, #32
 80157fc:	b2d2      	uxtb	r2, r2
 80157fe:	735a      	strb	r2, [r3, #13]
 8015800:	e022      	b.n	8015848 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015806:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801580a:	d005      	beq.n	8015818 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015810:	3301      	adds	r3, #1
 8015812:	b29a      	uxth	r2, r3
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801581e:	2b00      	cmp	r3, #0
 8015820:	d00b      	beq.n	801583a <tcp_input+0x6e2>
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015828:	69fb      	ldr	r3, [r7, #28]
 801582a:	6918      	ldr	r0, [r3, #16]
 801582c:	2300      	movs	r3, #0
 801582e:	2200      	movs	r2, #0
 8015830:	69f9      	ldr	r1, [r7, #28]
 8015832:	47a0      	blx	r4
 8015834:	4603      	mov	r3, r0
 8015836:	74fb      	strb	r3, [r7, #19]
 8015838:	e001      	b.n	801583e <tcp_input+0x6e6>
 801583a:	2300      	movs	r3, #0
 801583c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801583e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015842:	f113 0f0d 	cmn.w	r3, #13
 8015846:	d016      	beq.n	8015876 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015848:	4b13      	ldr	r3, [pc, #76]	@ (8015898 <tcp_input+0x740>)
 801584a:	2200      	movs	r2, #0
 801584c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801584e:	69f8      	ldr	r0, [r7, #28]
 8015850:	f000 f88e 	bl	8015970 <tcp_input_delayed_close>
 8015854:	4603      	mov	r3, r0
 8015856:	2b00      	cmp	r3, #0
 8015858:	d128      	bne.n	80158ac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801585a:	69f8      	ldr	r0, [r7, #28]
 801585c:	f002 fac2 	bl	8017de4 <tcp_output>
 8015860:	e025      	b.n	80158ae <tcp_input+0x756>
        goto aborted;
 8015862:	bf00      	nop
 8015864:	e023      	b.n	80158ae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015866:	bf00      	nop
 8015868:	e021      	b.n	80158ae <tcp_input+0x756>
              goto aborted;
 801586a:	bf00      	nop
 801586c:	e01f      	b.n	80158ae <tcp_input+0x756>
          goto aborted;
 801586e:	bf00      	nop
 8015870:	e01d      	b.n	80158ae <tcp_input+0x756>
            goto aborted;
 8015872:	bf00      	nop
 8015874:	e01b      	b.n	80158ae <tcp_input+0x756>
              goto aborted;
 8015876:	bf00      	nop
 8015878:	e019      	b.n	80158ae <tcp_input+0x756>
 801587a:	bf00      	nop
 801587c:	20027534 	.word	0x20027534
 8015880:	20027544 	.word	0x20027544
 8015884:	20027564 	.word	0x20027564
 8015888:	20027561 	.word	0x20027561
 801588c:	2002755c 	.word	0x2002755c
 8015890:	20027560 	.word	0x20027560
 8015894:	2002755e 	.word	0x2002755e
 8015898:	20027568 	.word	0x20027568
 801589c:	20027528 	.word	0x20027528
 80158a0:	0801f97c 	.word	0x0801f97c
 80158a4:	0801fb30 	.word	0x0801fb30
 80158a8:	0801f9c8 	.word	0x0801f9c8
          goto aborted;
 80158ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80158ae:	4b27      	ldr	r3, [pc, #156]	@ (801594c <tcp_input+0x7f4>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80158b4:	4b26      	ldr	r3, [pc, #152]	@ (8015950 <tcp_input+0x7f8>)
 80158b6:	2200      	movs	r2, #0
 80158b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80158ba:	4b26      	ldr	r3, [pc, #152]	@ (8015954 <tcp_input+0x7fc>)
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d03f      	beq.n	8015942 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80158c2:	4b24      	ldr	r3, [pc, #144]	@ (8015954 <tcp_input+0x7fc>)
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fd fe00 	bl	80134cc <pbuf_free>
      inseg.p = NULL;
 80158cc:	4b21      	ldr	r3, [pc, #132]	@ (8015954 <tcp_input+0x7fc>)
 80158ce:	2200      	movs	r2, #0
 80158d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80158d2:	e036      	b.n	8015942 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80158d4:	4b20      	ldr	r3, [pc, #128]	@ (8015958 <tcp_input+0x800>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	899b      	ldrh	r3, [r3, #12]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fc fa07 	bl	8011cf0 <lwip_htons>
 80158e2:	4603      	mov	r3, r0
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	f003 0304 	and.w	r3, r3, #4
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d118      	bne.n	8015920 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158ee:	4b1b      	ldr	r3, [pc, #108]	@ (801595c <tcp_input+0x804>)
 80158f0:	6819      	ldr	r1, [r3, #0]
 80158f2:	4b1b      	ldr	r3, [pc, #108]	@ (8015960 <tcp_input+0x808>)
 80158f4:	881b      	ldrh	r3, [r3, #0]
 80158f6:	461a      	mov	r2, r3
 80158f8:	4b1a      	ldr	r3, [pc, #104]	@ (8015964 <tcp_input+0x80c>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158fe:	4b16      	ldr	r3, [pc, #88]	@ (8015958 <tcp_input+0x800>)
 8015900:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015902:	885b      	ldrh	r3, [r3, #2]
 8015904:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015906:	4a14      	ldr	r2, [pc, #80]	@ (8015958 <tcp_input+0x800>)
 8015908:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801590a:	8812      	ldrh	r2, [r2, #0]
 801590c:	b292      	uxth	r2, r2
 801590e:	9202      	str	r2, [sp, #8]
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	4b15      	ldr	r3, [pc, #84]	@ (8015968 <tcp_input+0x810>)
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	4b15      	ldr	r3, [pc, #84]	@ (801596c <tcp_input+0x814>)
 8015918:	4602      	mov	r2, r0
 801591a:	2000      	movs	r0, #0
 801591c:	f003 f816 	bl	801894c <tcp_rst>
    pbuf_free(p);
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f7fd fdd3 	bl	80134cc <pbuf_free>
  return;
 8015926:	e00c      	b.n	8015942 <tcp_input+0x7ea>
    goto dropped;
 8015928:	bf00      	nop
 801592a:	e006      	b.n	801593a <tcp_input+0x7e2>
    goto dropped;
 801592c:	bf00      	nop
 801592e:	e004      	b.n	801593a <tcp_input+0x7e2>
    goto dropped;
 8015930:	bf00      	nop
 8015932:	e002      	b.n	801593a <tcp_input+0x7e2>
      goto dropped;
 8015934:	bf00      	nop
 8015936:	e000      	b.n	801593a <tcp_input+0x7e2>
      goto dropped;
 8015938:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7fd fdc6 	bl	80134cc <pbuf_free>
 8015940:	e000      	b.n	8015944 <tcp_input+0x7ec>
  return;
 8015942:	bf00      	nop
}
 8015944:	3724      	adds	r7, #36	@ 0x24
 8015946:	46bd      	mov	sp, r7
 8015948:	bd90      	pop	{r4, r7, pc}
 801594a:	bf00      	nop
 801594c:	20027568 	.word	0x20027568
 8015950:	20027564 	.word	0x20027564
 8015954:	20027534 	.word	0x20027534
 8015958:	20027544 	.word	0x20027544
 801595c:	20027558 	.word	0x20027558
 8015960:	2002755e 	.word	0x2002755e
 8015964:	20027554 	.word	0x20027554
 8015968:	2002442c 	.word	0x2002442c
 801596c:	20024430 	.word	0x20024430

08015970 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d106      	bne.n	801598c <tcp_input_delayed_close+0x1c>
 801597e:	4b17      	ldr	r3, [pc, #92]	@ (80159dc <tcp_input_delayed_close+0x6c>)
 8015980:	f240 225a 	movw	r2, #602	@ 0x25a
 8015984:	4916      	ldr	r1, [pc, #88]	@ (80159e0 <tcp_input_delayed_close+0x70>)
 8015986:	4817      	ldr	r0, [pc, #92]	@ (80159e4 <tcp_input_delayed_close+0x74>)
 8015988:	f007 fd8a 	bl	801d4a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801598c:	4b16      	ldr	r3, [pc, #88]	@ (80159e8 <tcp_input_delayed_close+0x78>)
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	f003 0310 	and.w	r3, r3, #16
 8015994:	2b00      	cmp	r3, #0
 8015996:	d01c      	beq.n	80159d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	8b5b      	ldrh	r3, [r3, #26]
 801599c:	f003 0310 	and.w	r3, r3, #16
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10d      	bne.n	80159c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d008      	beq.n	80159c0 <tcp_input_delayed_close+0x50>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	6912      	ldr	r2, [r2, #16]
 80159b8:	f06f 010e 	mvn.w	r1, #14
 80159bc:	4610      	mov	r0, r2
 80159be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80159c0:	6879      	ldr	r1, [r7, #4]
 80159c2:	480a      	ldr	r0, [pc, #40]	@ (80159ec <tcp_input_delayed_close+0x7c>)
 80159c4:	f7ff fa50 	bl	8014e68 <tcp_pcb_remove>
    tcp_free(pcb);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7fe f83b 	bl	8013a44 <tcp_free>
    return 1;
 80159ce:	2301      	movs	r3, #1
 80159d0:	e000      	b.n	80159d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3708      	adds	r7, #8
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	0801f97c 	.word	0x0801f97c
 80159e0:	0801fb4c 	.word	0x0801fb4c
 80159e4:	0801f9c8 	.word	0x0801f9c8
 80159e8:	20027561 	.word	0x20027561
 80159ec:	20027528 	.word	0x20027528

080159f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80159f0:	b590      	push	{r4, r7, lr}
 80159f2:	b08b      	sub	sp, #44	@ 0x2c
 80159f4:	af04      	add	r7, sp, #16
 80159f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80159f8:	4b6f      	ldr	r3, [pc, #444]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	f003 0304 	and.w	r3, r3, #4
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f040 80d2 	bne.w	8015baa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d106      	bne.n	8015a1a <tcp_listen_input+0x2a>
 8015a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8015bbc <tcp_listen_input+0x1cc>)
 8015a0e:	f240 2281 	movw	r2, #641	@ 0x281
 8015a12:	496b      	ldr	r1, [pc, #428]	@ (8015bc0 <tcp_listen_input+0x1d0>)
 8015a14:	486b      	ldr	r0, [pc, #428]	@ (8015bc4 <tcp_listen_input+0x1d4>)
 8015a16:	f007 fd43 	bl	801d4a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015a1a:	4b67      	ldr	r3, [pc, #412]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	f003 0310 	and.w	r3, r3, #16
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d019      	beq.n	8015a5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a26:	4b68      	ldr	r3, [pc, #416]	@ (8015bc8 <tcp_listen_input+0x1d8>)
 8015a28:	6819      	ldr	r1, [r3, #0]
 8015a2a:	4b68      	ldr	r3, [pc, #416]	@ (8015bcc <tcp_listen_input+0x1dc>)
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	4b67      	ldr	r3, [pc, #412]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a36:	4b67      	ldr	r3, [pc, #412]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a3a:	885b      	ldrh	r3, [r3, #2]
 8015a3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a3e:	4a65      	ldr	r2, [pc, #404]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015a40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a42:	8812      	ldrh	r2, [r2, #0]
 8015a44:	b292      	uxth	r2, r2
 8015a46:	9202      	str	r2, [sp, #8]
 8015a48:	9301      	str	r3, [sp, #4]
 8015a4a:	4b63      	ldr	r3, [pc, #396]	@ (8015bd8 <tcp_listen_input+0x1e8>)
 8015a4c:	9300      	str	r3, [sp, #0]
 8015a4e:	4b63      	ldr	r3, [pc, #396]	@ (8015bdc <tcp_listen_input+0x1ec>)
 8015a50:	4602      	mov	r2, r0
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f002 ff7a 	bl	801894c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015a58:	e0a9      	b.n	8015bae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015a5a:	4b57      	ldr	r3, [pc, #348]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	f003 0302 	and.w	r3, r3, #2
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f000 80a3 	beq.w	8015bae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7d5b      	ldrb	r3, [r3, #21]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff f927 	bl	8014cc0 <tcp_alloc>
 8015a72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d111      	bne.n	8015a9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	699b      	ldr	r3, [r3, #24]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d00a      	beq.n	8015a98 <tcp_listen_input+0xa8>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	699b      	ldr	r3, [r3, #24]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	6910      	ldr	r0, [r2, #16]
 8015a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4798      	blx	r3
 8015a92:	4603      	mov	r3, r0
 8015a94:	73bb      	strb	r3, [r7, #14]
      return;
 8015a96:	e08b      	b.n	8015bb0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a98:	23f0      	movs	r3, #240	@ 0xf0
 8015a9a:	73bb      	strb	r3, [r7, #14]
      return;
 8015a9c:	e088      	b.n	8015bb0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015a9e:	4b50      	ldr	r3, [pc, #320]	@ (8015be0 <tcp_listen_input+0x1f0>)
 8015aa0:	695a      	ldr	r2, [r3, #20]
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8015be0 <tcp_listen_input+0x1f0>)
 8015aa8:	691a      	ldr	r2, [r3, #16]
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	8ada      	ldrh	r2, [r3, #22]
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015ab6:	4b47      	ldr	r3, [pc, #284]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	881b      	ldrh	r3, [r3, #0]
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2203      	movs	r2, #3
 8015ac6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015ac8:	4b41      	ldr	r3, [pc, #260]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	1c5a      	adds	r2, r3, #1
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8015ada:	6978      	ldr	r0, [r7, #20]
 8015adc:	f7ff fa58 	bl	8014f90 <tcp_next_iss>
 8015ae0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	693a      	ldr	r2, [r7, #16]
 8015ae6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	693a      	ldr	r2, [r7, #16]
 8015aec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	693a      	ldr	r2, [r7, #16]
 8015af2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015afa:	4b35      	ldr	r3, [pc, #212]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	1e5a      	subs	r2, r3, #1
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	691a      	ldr	r2, [r3, #16]
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	7a5b      	ldrb	r3, [r3, #9]
 8015b16:	f003 030c 	and.w	r3, r3, #12
 8015b1a:	b2da      	uxtb	r2, r3
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	7a1a      	ldrb	r2, [r3, #8]
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015b28:	4b2e      	ldr	r3, [pc, #184]	@ (8015be4 <tcp_listen_input+0x1f4>)
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	60da      	str	r2, [r3, #12]
 8015b30:	4a2c      	ldr	r2, [pc, #176]	@ (8015be4 <tcp_listen_input+0x1f4>)
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	6013      	str	r3, [r2, #0]
 8015b36:	f003 f8cb 	bl	8018cd0 <tcp_timer_needed>
 8015b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8015be8 <tcp_listen_input+0x1f8>)
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015b40:	6978      	ldr	r0, [r7, #20]
 8015b42:	f001 fd8b 	bl	801765c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015b46:	4b23      	ldr	r3, [pc, #140]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	89db      	ldrh	r3, [r3, #14]
 8015b4c:	b29a      	uxth	r2, r3
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	3304      	adds	r3, #4
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f004 ff6d 	bl	801aa48 <ip4_route>
 8015b6e:	4601      	mov	r1, r0
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	3304      	adds	r3, #4
 8015b74:	461a      	mov	r2, r3
 8015b76:	4620      	mov	r0, r4
 8015b78:	f7ff fa30 	bl	8014fdc <tcp_eff_send_mss_netif>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	461a      	mov	r2, r3
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015b84:	2112      	movs	r1, #18
 8015b86:	6978      	ldr	r0, [r7, #20]
 8015b88:	f002 f83e 	bl	8017c08 <tcp_enqueue_flags>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d004      	beq.n	8015ba2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015b98:	2100      	movs	r1, #0
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f7fe f97c 	bl	8013e98 <tcp_abandon>
      return;
 8015ba0:	e006      	b.n	8015bb0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015ba2:	6978      	ldr	r0, [r7, #20]
 8015ba4:	f002 f91e 	bl	8017de4 <tcp_output>
  return;
 8015ba8:	e001      	b.n	8015bae <tcp_listen_input+0x1be>
    return;
 8015baa:	bf00      	nop
 8015bac:	e000      	b.n	8015bb0 <tcp_listen_input+0x1c0>
  return;
 8015bae:	bf00      	nop
}
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd90      	pop	{r4, r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	20027560 	.word	0x20027560
 8015bbc:	0801f97c 	.word	0x0801f97c
 8015bc0:	0801fb74 	.word	0x0801fb74
 8015bc4:	0801f9c8 	.word	0x0801f9c8
 8015bc8:	20027558 	.word	0x20027558
 8015bcc:	2002755e 	.word	0x2002755e
 8015bd0:	20027554 	.word	0x20027554
 8015bd4:	20027544 	.word	0x20027544
 8015bd8:	2002442c 	.word	0x2002442c
 8015bdc:	20024430 	.word	0x20024430
 8015be0:	2002441c 	.word	0x2002441c
 8015be4:	20027528 	.word	0x20027528
 8015be8:	20027530 	.word	0x20027530

08015bec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b086      	sub	sp, #24
 8015bf0:	af04      	add	r7, sp, #16
 8015bf2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 0304 	and.w	r3, r3, #4
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d153      	bne.n	8015ca8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <tcp_timewait_input+0x28>
 8015c06:	4b2c      	ldr	r3, [pc, #176]	@ (8015cb8 <tcp_timewait_input+0xcc>)
 8015c08:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015c0c:	492b      	ldr	r1, [pc, #172]	@ (8015cbc <tcp_timewait_input+0xd0>)
 8015c0e:	482c      	ldr	r0, [pc, #176]	@ (8015cc0 <tcp_timewait_input+0xd4>)
 8015c10:	f007 fc46 	bl	801d4a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015c14:	4b27      	ldr	r3, [pc, #156]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	f003 0302 	and.w	r3, r3, #2
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d02a      	beq.n	8015c76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015c20:	4b28      	ldr	r3, [pc, #160]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	db2d      	blt.n	8015c8a <tcp_timewait_input+0x9e>
 8015c2e:	4b25      	ldr	r3, [pc, #148]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c3a:	440b      	add	r3, r1
 8015c3c:	1ad3      	subs	r3, r2, r3
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	dc23      	bgt.n	8015c8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c42:	4b21      	ldr	r3, [pc, #132]	@ (8015cc8 <tcp_timewait_input+0xdc>)
 8015c44:	6819      	ldr	r1, [r3, #0]
 8015c46:	4b21      	ldr	r3, [pc, #132]	@ (8015ccc <tcp_timewait_input+0xe0>)
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c52:	4b1f      	ldr	r3, [pc, #124]	@ (8015cd0 <tcp_timewait_input+0xe4>)
 8015c54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c56:	885b      	ldrh	r3, [r3, #2]
 8015c58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8015cd0 <tcp_timewait_input+0xe4>)
 8015c5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c5e:	8812      	ldrh	r2, [r2, #0]
 8015c60:	b292      	uxth	r2, r2
 8015c62:	9202      	str	r2, [sp, #8]
 8015c64:	9301      	str	r3, [sp, #4]
 8015c66:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd4 <tcp_timewait_input+0xe8>)
 8015c68:	9300      	str	r3, [sp, #0]
 8015c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd8 <tcp_timewait_input+0xec>)
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f002 fe6c 	bl	801894c <tcp_rst>
      return;
 8015c74:	e01b      	b.n	8015cae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015c76:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	f003 0301 	and.w	r3, r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d003      	beq.n	8015c8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015c82:	4b16      	ldr	r3, [pc, #88]	@ (8015cdc <tcp_timewait_input+0xf0>)
 8015c84:	681a      	ldr	r2, [r3, #0]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015c8a:	4b10      	ldr	r3, [pc, #64]	@ (8015ccc <tcp_timewait_input+0xe0>)
 8015c8c:	881b      	ldrh	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00c      	beq.n	8015cac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8b5b      	ldrh	r3, [r3, #26]
 8015c96:	f043 0302 	orr.w	r3, r3, #2
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f002 f89f 	bl	8017de4 <tcp_output>
  }
  return;
 8015ca6:	e001      	b.n	8015cac <tcp_timewait_input+0xc0>
    return;
 8015ca8:	bf00      	nop
 8015caa:	e000      	b.n	8015cae <tcp_timewait_input+0xc2>
  return;
 8015cac:	bf00      	nop
}
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	20027560 	.word	0x20027560
 8015cb8:	0801f97c 	.word	0x0801f97c
 8015cbc:	0801fb94 	.word	0x0801fb94
 8015cc0:	0801f9c8 	.word	0x0801f9c8
 8015cc4:	20027554 	.word	0x20027554
 8015cc8:	20027558 	.word	0x20027558
 8015ccc:	2002755e 	.word	0x2002755e
 8015cd0:	20027544 	.word	0x20027544
 8015cd4:	2002442c 	.word	0x2002442c
 8015cd8:	20024430 	.word	0x20024430
 8015cdc:	2002751c 	.word	0x2002751c

08015ce0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015ce0:	b590      	push	{r4, r7, lr}
 8015ce2:	b08d      	sub	sp, #52	@ 0x34
 8015ce4:	af04      	add	r7, sp, #16
 8015ce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015cec:	2300      	movs	r3, #0
 8015cee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d106      	bne.n	8015d04 <tcp_process+0x24>
 8015cf6:	4b9d      	ldr	r3, [pc, #628]	@ (8015f6c <tcp_process+0x28c>)
 8015cf8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015cfc:	499c      	ldr	r1, [pc, #624]	@ (8015f70 <tcp_process+0x290>)
 8015cfe:	489d      	ldr	r0, [pc, #628]	@ (8015f74 <tcp_process+0x294>)
 8015d00:	f007 fbce 	bl	801d4a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015d04:	4b9c      	ldr	r3, [pc, #624]	@ (8015f78 <tcp_process+0x298>)
 8015d06:	781b      	ldrb	r3, [r3, #0]
 8015d08:	f003 0304 	and.w	r3, r3, #4
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d04e      	beq.n	8015dae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	7d1b      	ldrb	r3, [r3, #20]
 8015d14:	2b02      	cmp	r3, #2
 8015d16:	d108      	bne.n	8015d2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d1c:	4b97      	ldr	r3, [pc, #604]	@ (8015f7c <tcp_process+0x29c>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d123      	bne.n	8015d6c <tcp_process+0x8c>
        acceptable = 1;
 8015d24:	2301      	movs	r3, #1
 8015d26:	76fb      	strb	r3, [r7, #27]
 8015d28:	e020      	b.n	8015d6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d2e:	4b94      	ldr	r3, [pc, #592]	@ (8015f80 <tcp_process+0x2a0>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d102      	bne.n	8015d3c <tcp_process+0x5c>
        acceptable = 1;
 8015d36:	2301      	movs	r3, #1
 8015d38:	76fb      	strb	r3, [r7, #27]
 8015d3a:	e017      	b.n	8015d6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d3c:	4b90      	ldr	r3, [pc, #576]	@ (8015f80 <tcp_process+0x2a0>)
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	db10      	blt.n	8015d6c <tcp_process+0x8c>
 8015d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8015f80 <tcp_process+0x2a0>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d56:	440b      	add	r3, r1
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	dc06      	bgt.n	8015d6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	8b5b      	ldrh	r3, [r3, #26]
 8015d62:	f043 0302 	orr.w	r3, r3, #2
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015d6c:	7efb      	ldrb	r3, [r7, #27]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d01b      	beq.n	8015daa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	7d1b      	ldrb	r3, [r3, #20]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d106      	bne.n	8015d88 <tcp_process+0xa8>
 8015d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8015f6c <tcp_process+0x28c>)
 8015d7c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015d80:	4980      	ldr	r1, [pc, #512]	@ (8015f84 <tcp_process+0x2a4>)
 8015d82:	487c      	ldr	r0, [pc, #496]	@ (8015f74 <tcp_process+0x294>)
 8015d84:	f007 fb8c 	bl	801d4a0 <iprintf>
      recv_flags |= TF_RESET;
 8015d88:	4b7f      	ldr	r3, [pc, #508]	@ (8015f88 <tcp_process+0x2a8>)
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	f043 0308 	orr.w	r3, r3, #8
 8015d90:	b2da      	uxtb	r2, r3
 8015d92:	4b7d      	ldr	r3, [pc, #500]	@ (8015f88 <tcp_process+0x2a8>)
 8015d94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	8b5b      	ldrh	r3, [r3, #26]
 8015d9a:	f023 0301 	bic.w	r3, r3, #1
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015da4:	f06f 030d 	mvn.w	r3, #13
 8015da8:	e37a      	b.n	80164a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015daa:	2300      	movs	r3, #0
 8015dac:	e378      	b.n	80164a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015dae:	4b72      	ldr	r3, [pc, #456]	@ (8015f78 <tcp_process+0x298>)
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	f003 0302 	and.w	r3, r3, #2
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d010      	beq.n	8015ddc <tcp_process+0xfc>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7d1b      	ldrb	r3, [r3, #20]
 8015dbe:	2b02      	cmp	r3, #2
 8015dc0:	d00c      	beq.n	8015ddc <tcp_process+0xfc>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	7d1b      	ldrb	r3, [r3, #20]
 8015dc6:	2b03      	cmp	r3, #3
 8015dc8:	d008      	beq.n	8015ddc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	8b5b      	ldrh	r3, [r3, #26]
 8015dce:	f043 0302 	orr.w	r3, r3, #2
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	e361      	b.n	80164a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	8b5b      	ldrh	r3, [r3, #26]
 8015de0:	f003 0310 	and.w	r3, r3, #16
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d103      	bne.n	8015df0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015de8:	4b68      	ldr	r3, [pc, #416]	@ (8015f8c <tcp_process+0x2ac>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f001 fc2b 	bl	801765c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
 8015e0a:	3b02      	subs	r3, #2
 8015e0c:	2b07      	cmp	r3, #7
 8015e0e:	f200 8337 	bhi.w	8016480 <tcp_process+0x7a0>
 8015e12:	a201      	add	r2, pc, #4	@ (adr r2, 8015e18 <tcp_process+0x138>)
 8015e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e18:	08015e39 	.word	0x08015e39
 8015e1c:	08016069 	.word	0x08016069
 8015e20:	080161e1 	.word	0x080161e1
 8015e24:	0801620b 	.word	0x0801620b
 8015e28:	0801632f 	.word	0x0801632f
 8015e2c:	080161e1 	.word	0x080161e1
 8015e30:	080163bb 	.word	0x080163bb
 8015e34:	0801644b 	.word	0x0801644b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015e38:	4b4f      	ldr	r3, [pc, #316]	@ (8015f78 <tcp_process+0x298>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	f003 0310 	and.w	r3, r3, #16
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 80e4 	beq.w	801600e <tcp_process+0x32e>
 8015e46:	4b4c      	ldr	r3, [pc, #304]	@ (8015f78 <tcp_process+0x298>)
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f003 0302 	and.w	r3, r3, #2
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 80dd 	beq.w	801600e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e58:	1c5a      	adds	r2, r3, #1
 8015e5a:	4b48      	ldr	r3, [pc, #288]	@ (8015f7c <tcp_process+0x29c>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	f040 80d5 	bne.w	801600e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015e64:	4b46      	ldr	r3, [pc, #280]	@ (8015f80 <tcp_process+0x2a0>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	1c5a      	adds	r2, r3, #1
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015e76:	4b41      	ldr	r3, [pc, #260]	@ (8015f7c <tcp_process+0x29c>)
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015e7e:	4b44      	ldr	r3, [pc, #272]	@ (8015f90 <tcp_process+0x2b0>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	89db      	ldrh	r3, [r3, #14]
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015e98:	4b39      	ldr	r3, [pc, #228]	@ (8015f80 <tcp_process+0x2a0>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	1e5a      	subs	r2, r3, #1
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2204      	movs	r2, #4
 8015ea6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	3304      	adds	r3, #4
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f004 fdc9 	bl	801aa48 <ip4_route>
 8015eb6:	4601      	mov	r1, r0
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	3304      	adds	r3, #4
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f7ff f88c 	bl	8014fdc <tcp_eff_send_mss_netif>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ed0:	009a      	lsls	r2, r3, #2
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ed6:	005b      	lsls	r3, r3, #1
 8015ed8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015edc:	428b      	cmp	r3, r1
 8015ede:	bf38      	it	cc
 8015ee0:	460b      	movcc	r3, r1
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d204      	bcs.n	8015ef0 <tcp_process+0x210>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	e00d      	b.n	8015f0c <tcp_process+0x22c>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d904      	bls.n	8015f08 <tcp_process+0x228>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	e001      	b.n	8015f0c <tcp_process+0x22c>
 8015f08:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d106      	bne.n	8015f2a <tcp_process+0x24a>
 8015f1c:	4b13      	ldr	r3, [pc, #76]	@ (8015f6c <tcp_process+0x28c>)
 8015f1e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015f22:	491c      	ldr	r1, [pc, #112]	@ (8015f94 <tcp_process+0x2b4>)
 8015f24:	4813      	ldr	r0, [pc, #76]	@ (8015f74 <tcp_process+0x294>)
 8015f26:	f007 fabb 	bl	801d4a0 <iprintf>
        --pcb->snd_queuelen;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f30:	3b01      	subs	r3, #1
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f3e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015f40:	69fb      	ldr	r3, [r7, #28]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d12a      	bne.n	8015f9c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f4a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <tcp_process+0x280>
 8015f52:	4b06      	ldr	r3, [pc, #24]	@ (8015f6c <tcp_process+0x28c>)
 8015f54:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015f58:	490f      	ldr	r1, [pc, #60]	@ (8015f98 <tcp_process+0x2b8>)
 8015f5a:	4806      	ldr	r0, [pc, #24]	@ (8015f74 <tcp_process+0x294>)
 8015f5c:	f007 faa0 	bl	801d4a0 <iprintf>
          pcb->unsent = rseg->next;
 8015f60:	69fb      	ldr	r3, [r7, #28]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015f68:	e01c      	b.n	8015fa4 <tcp_process+0x2c4>
 8015f6a:	bf00      	nop
 8015f6c:	0801f97c 	.word	0x0801f97c
 8015f70:	0801fbb4 	.word	0x0801fbb4
 8015f74:	0801f9c8 	.word	0x0801f9c8
 8015f78:	20027560 	.word	0x20027560
 8015f7c:	20027558 	.word	0x20027558
 8015f80:	20027554 	.word	0x20027554
 8015f84:	0801fbd0 	.word	0x0801fbd0
 8015f88:	20027561 	.word	0x20027561
 8015f8c:	2002751c 	.word	0x2002751c
 8015f90:	20027544 	.word	0x20027544
 8015f94:	0801fbf0 	.word	0x0801fbf0
 8015f98:	0801fc08 	.word	0x0801fc08
        } else {
          pcb->unacked = rseg->next;
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015fa4:	69f8      	ldr	r0, [r7, #28]
 8015fa6:	f7fe fd22 	bl	80149ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d104      	bne.n	8015fbc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015fb8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015fba:	e006      	b.n	8015fca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00a      	beq.n	8015fea <tcp_process+0x30a>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	6910      	ldr	r0, [r2, #16]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	6879      	ldr	r1, [r7, #4]
 8015fe2:	4798      	blx	r3
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	76bb      	strb	r3, [r7, #26]
 8015fe8:	e001      	b.n	8015fee <tcp_process+0x30e>
 8015fea:	2300      	movs	r3, #0
 8015fec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015fee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015ff2:	f113 0f0d 	cmn.w	r3, #13
 8015ff6:	d102      	bne.n	8015ffe <tcp_process+0x31e>
          return ERR_ABRT;
 8015ff8:	f06f 030c 	mvn.w	r3, #12
 8015ffc:	e250      	b.n	80164a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	8b5b      	ldrh	r3, [r3, #26]
 8016002:	f043 0302 	orr.w	r3, r3, #2
 8016006:	b29a      	uxth	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801600c:	e23a      	b.n	8016484 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801600e:	4b98      	ldr	r3, [pc, #608]	@ (8016270 <tcp_process+0x590>)
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	f003 0310 	and.w	r3, r3, #16
 8016016:	2b00      	cmp	r3, #0
 8016018:	f000 8234 	beq.w	8016484 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801601c:	4b95      	ldr	r3, [pc, #596]	@ (8016274 <tcp_process+0x594>)
 801601e:	6819      	ldr	r1, [r3, #0]
 8016020:	4b95      	ldr	r3, [pc, #596]	@ (8016278 <tcp_process+0x598>)
 8016022:	881b      	ldrh	r3, [r3, #0]
 8016024:	461a      	mov	r2, r3
 8016026:	4b95      	ldr	r3, [pc, #596]	@ (801627c <tcp_process+0x59c>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801602c:	4b94      	ldr	r3, [pc, #592]	@ (8016280 <tcp_process+0x5a0>)
 801602e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016030:	885b      	ldrh	r3, [r3, #2]
 8016032:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016034:	4a92      	ldr	r2, [pc, #584]	@ (8016280 <tcp_process+0x5a0>)
 8016036:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016038:	8812      	ldrh	r2, [r2, #0]
 801603a:	b292      	uxth	r2, r2
 801603c:	9202      	str	r2, [sp, #8]
 801603e:	9301      	str	r3, [sp, #4]
 8016040:	4b90      	ldr	r3, [pc, #576]	@ (8016284 <tcp_process+0x5a4>)
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	4b90      	ldr	r3, [pc, #576]	@ (8016288 <tcp_process+0x5a8>)
 8016046:	4602      	mov	r2, r0
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f002 fc7f 	bl	801894c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016054:	2b05      	cmp	r3, #5
 8016056:	f200 8215 	bhi.w	8016484 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f002 fa4b 	bl	80184fc <tcp_rexmit_rto>
      break;
 8016066:	e20d      	b.n	8016484 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016068:	4b81      	ldr	r3, [pc, #516]	@ (8016270 <tcp_process+0x590>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	f003 0310 	and.w	r3, r3, #16
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 80a1 	beq.w	80161b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016076:	4b7f      	ldr	r3, [pc, #508]	@ (8016274 <tcp_process+0x594>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801607e:	1ad3      	subs	r3, r2, r3
 8016080:	3b01      	subs	r3, #1
 8016082:	2b00      	cmp	r3, #0
 8016084:	db7e      	blt.n	8016184 <tcp_process+0x4a4>
 8016086:	4b7b      	ldr	r3, [pc, #492]	@ (8016274 <tcp_process+0x594>)
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	dc77      	bgt.n	8016184 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2204      	movs	r2, #4
 8016098:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d102      	bne.n	80160a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80160a2:	23fa      	movs	r3, #250	@ 0xfa
 80160a4:	76bb      	strb	r3, [r7, #26]
 80160a6:	e01d      	b.n	80160e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160ac:	699b      	ldr	r3, [r3, #24]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d106      	bne.n	80160c0 <tcp_process+0x3e0>
 80160b2:	4b76      	ldr	r3, [pc, #472]	@ (801628c <tcp_process+0x5ac>)
 80160b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80160b8:	4975      	ldr	r1, [pc, #468]	@ (8016290 <tcp_process+0x5b0>)
 80160ba:	4876      	ldr	r0, [pc, #472]	@ (8016294 <tcp_process+0x5b4>)
 80160bc:	f007 f9f0 	bl	801d4a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160c4:	699b      	ldr	r3, [r3, #24]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00a      	beq.n	80160e0 <tcp_process+0x400>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160ce:	699b      	ldr	r3, [r3, #24]
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	6910      	ldr	r0, [r2, #16]
 80160d4:	2200      	movs	r2, #0
 80160d6:	6879      	ldr	r1, [r7, #4]
 80160d8:	4798      	blx	r3
 80160da:	4603      	mov	r3, r0
 80160dc:	76bb      	strb	r3, [r7, #26]
 80160de:	e001      	b.n	80160e4 <tcp_process+0x404>
 80160e0:	23f0      	movs	r3, #240	@ 0xf0
 80160e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80160e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d00a      	beq.n	8016102 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80160ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160f0:	f113 0f0d 	cmn.w	r3, #13
 80160f4:	d002      	beq.n	80160fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f7fd ff8c 	bl	8014014 <tcp_abort>
            }
            return ERR_ABRT;
 80160fc:	f06f 030c 	mvn.w	r3, #12
 8016100:	e1ce      	b.n	80164a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 fae0 	bl	80166c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016108:	4b63      	ldr	r3, [pc, #396]	@ (8016298 <tcp_process+0x5b8>)
 801610a:	881b      	ldrh	r3, [r3, #0]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d005      	beq.n	801611c <tcp_process+0x43c>
            recv_acked--;
 8016110:	4b61      	ldr	r3, [pc, #388]	@ (8016298 <tcp_process+0x5b8>)
 8016112:	881b      	ldrh	r3, [r3, #0]
 8016114:	3b01      	subs	r3, #1
 8016116:	b29a      	uxth	r2, r3
 8016118:	4b5f      	ldr	r3, [pc, #380]	@ (8016298 <tcp_process+0x5b8>)
 801611a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016120:	009a      	lsls	r2, r3, #2
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	f241 111c 	movw	r1, #4380	@ 0x111c
 801612c:	428b      	cmp	r3, r1
 801612e:	bf38      	it	cc
 8016130:	460b      	movcc	r3, r1
 8016132:	429a      	cmp	r2, r3
 8016134:	d204      	bcs.n	8016140 <tcp_process+0x460>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	b29b      	uxth	r3, r3
 801613e:	e00d      	b.n	801615c <tcp_process+0x47c>
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	f241 121c 	movw	r2, #4380	@ 0x111c
 801614a:	4293      	cmp	r3, r2
 801614c:	d904      	bls.n	8016158 <tcp_process+0x478>
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	b29b      	uxth	r3, r3
 8016156:	e001      	b.n	801615c <tcp_process+0x47c>
 8016158:	f241 131c 	movw	r3, #4380	@ 0x111c
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016162:	4b4e      	ldr	r3, [pc, #312]	@ (801629c <tcp_process+0x5bc>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	f003 0320 	and.w	r3, r3, #32
 801616a:	2b00      	cmp	r3, #0
 801616c:	d037      	beq.n	80161de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	8b5b      	ldrh	r3, [r3, #26]
 8016172:	f043 0302 	orr.w	r3, r3, #2
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2207      	movs	r2, #7
 8016180:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016182:	e02c      	b.n	80161de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016184:	4b3b      	ldr	r3, [pc, #236]	@ (8016274 <tcp_process+0x594>)
 8016186:	6819      	ldr	r1, [r3, #0]
 8016188:	4b3b      	ldr	r3, [pc, #236]	@ (8016278 <tcp_process+0x598>)
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	461a      	mov	r2, r3
 801618e:	4b3b      	ldr	r3, [pc, #236]	@ (801627c <tcp_process+0x59c>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016194:	4b3a      	ldr	r3, [pc, #232]	@ (8016280 <tcp_process+0x5a0>)
 8016196:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016198:	885b      	ldrh	r3, [r3, #2]
 801619a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801619c:	4a38      	ldr	r2, [pc, #224]	@ (8016280 <tcp_process+0x5a0>)
 801619e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161a0:	8812      	ldrh	r2, [r2, #0]
 80161a2:	b292      	uxth	r2, r2
 80161a4:	9202      	str	r2, [sp, #8]
 80161a6:	9301      	str	r3, [sp, #4]
 80161a8:	4b36      	ldr	r3, [pc, #216]	@ (8016284 <tcp_process+0x5a4>)
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	4b36      	ldr	r3, [pc, #216]	@ (8016288 <tcp_process+0x5a8>)
 80161ae:	4602      	mov	r2, r0
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f002 fbcb 	bl	801894c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80161b6:	e167      	b.n	8016488 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80161b8:	4b2d      	ldr	r3, [pc, #180]	@ (8016270 <tcp_process+0x590>)
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	f003 0302 	and.w	r3, r3, #2
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f000 8161 	beq.w	8016488 <tcp_process+0x7a8>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ca:	1e5a      	subs	r2, r3, #1
 80161cc:	4b2b      	ldr	r3, [pc, #172]	@ (801627c <tcp_process+0x59c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	f040 8159 	bne.w	8016488 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f002 f9b2 	bl	8018540 <tcp_rexmit>
      break;
 80161dc:	e154      	b.n	8016488 <tcp_process+0x7a8>
 80161de:	e153      	b.n	8016488 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 fa71 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80161e6:	4b2d      	ldr	r3, [pc, #180]	@ (801629c <tcp_process+0x5bc>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	f003 0320 	and.w	r3, r3, #32
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f000 814c 	beq.w	801648c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	8b5b      	ldrh	r3, [r3, #26]
 80161f8:	f043 0302 	orr.w	r3, r3, #2
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2207      	movs	r2, #7
 8016206:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016208:	e140      	b.n	801648c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f000 fa5c 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016210:	4b22      	ldr	r3, [pc, #136]	@ (801629c <tcp_process+0x5bc>)
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	f003 0320 	and.w	r3, r3, #32
 8016218:	2b00      	cmp	r3, #0
 801621a:	d071      	beq.n	8016300 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801621c:	4b14      	ldr	r3, [pc, #80]	@ (8016270 <tcp_process+0x590>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f003 0310 	and.w	r3, r3, #16
 8016224:	2b00      	cmp	r3, #0
 8016226:	d060      	beq.n	80162ea <tcp_process+0x60a>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801622c:	4b11      	ldr	r3, [pc, #68]	@ (8016274 <tcp_process+0x594>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	429a      	cmp	r2, r3
 8016232:	d15a      	bne.n	80162ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016238:	2b00      	cmp	r3, #0
 801623a:	d156      	bne.n	80162ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	8b5b      	ldrh	r3, [r3, #26]
 8016240:	f043 0302 	orr.w	r3, r3, #2
 8016244:	b29a      	uxth	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7fe fdbc 	bl	8014dc8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016250:	4b13      	ldr	r3, [pc, #76]	@ (80162a0 <tcp_process+0x5c0>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	429a      	cmp	r2, r3
 8016258:	d105      	bne.n	8016266 <tcp_process+0x586>
 801625a:	4b11      	ldr	r3, [pc, #68]	@ (80162a0 <tcp_process+0x5c0>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	4a0f      	ldr	r2, [pc, #60]	@ (80162a0 <tcp_process+0x5c0>)
 8016262:	6013      	str	r3, [r2, #0]
 8016264:	e02e      	b.n	80162c4 <tcp_process+0x5e4>
 8016266:	4b0e      	ldr	r3, [pc, #56]	@ (80162a0 <tcp_process+0x5c0>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	617b      	str	r3, [r7, #20]
 801626c:	e027      	b.n	80162be <tcp_process+0x5de>
 801626e:	bf00      	nop
 8016270:	20027560 	.word	0x20027560
 8016274:	20027558 	.word	0x20027558
 8016278:	2002755e 	.word	0x2002755e
 801627c:	20027554 	.word	0x20027554
 8016280:	20027544 	.word	0x20027544
 8016284:	2002442c 	.word	0x2002442c
 8016288:	20024430 	.word	0x20024430
 801628c:	0801f97c 	.word	0x0801f97c
 8016290:	0801fc1c 	.word	0x0801fc1c
 8016294:	0801f9c8 	.word	0x0801f9c8
 8016298:	2002755c 	.word	0x2002755c
 801629c:	20027561 	.word	0x20027561
 80162a0:	20027528 	.word	0x20027528
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d104      	bne.n	80162b8 <tcp_process+0x5d8>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68da      	ldr	r2, [r3, #12]
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	60da      	str	r2, [r3, #12]
 80162b6:	e005      	b.n	80162c4 <tcp_process+0x5e4>
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	617b      	str	r3, [r7, #20]
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1ef      	bne.n	80162a4 <tcp_process+0x5c4>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	60da      	str	r2, [r3, #12]
 80162ca:	4b77      	ldr	r3, [pc, #476]	@ (80164a8 <tcp_process+0x7c8>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	220a      	movs	r2, #10
 80162d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80162d6:	4b75      	ldr	r3, [pc, #468]	@ (80164ac <tcp_process+0x7cc>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	60da      	str	r2, [r3, #12]
 80162de:	4a73      	ldr	r2, [pc, #460]	@ (80164ac <tcp_process+0x7cc>)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	f002 fcf4 	bl	8018cd0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80162e8:	e0d2      	b.n	8016490 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	8b5b      	ldrh	r3, [r3, #26]
 80162ee:	f043 0302 	orr.w	r3, r3, #2
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2208      	movs	r2, #8
 80162fc:	751a      	strb	r2, [r3, #20]
      break;
 80162fe:	e0c7      	b.n	8016490 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016300:	4b6b      	ldr	r3, [pc, #428]	@ (80164b0 <tcp_process+0x7d0>)
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	f003 0310 	and.w	r3, r3, #16
 8016308:	2b00      	cmp	r3, #0
 801630a:	f000 80c1 	beq.w	8016490 <tcp_process+0x7b0>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016312:	4b68      	ldr	r3, [pc, #416]	@ (80164b4 <tcp_process+0x7d4>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	429a      	cmp	r2, r3
 8016318:	f040 80ba 	bne.w	8016490 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016320:	2b00      	cmp	r3, #0
 8016322:	f040 80b5 	bne.w	8016490 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2206      	movs	r2, #6
 801632a:	751a      	strb	r2, [r3, #20]
      break;
 801632c:	e0b0      	b.n	8016490 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f9ca 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016334:	4b60      	ldr	r3, [pc, #384]	@ (80164b8 <tcp_process+0x7d8>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f003 0320 	and.w	r3, r3, #32
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 80a9 	beq.w	8016494 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	8b5b      	ldrh	r3, [r3, #26]
 8016346:	f043 0302 	orr.w	r3, r3, #2
 801634a:	b29a      	uxth	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f7fe fd39 	bl	8014dc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016356:	4b59      	ldr	r3, [pc, #356]	@ (80164bc <tcp_process+0x7dc>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	429a      	cmp	r2, r3
 801635e:	d105      	bne.n	801636c <tcp_process+0x68c>
 8016360:	4b56      	ldr	r3, [pc, #344]	@ (80164bc <tcp_process+0x7dc>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	4a55      	ldr	r2, [pc, #340]	@ (80164bc <tcp_process+0x7dc>)
 8016368:	6013      	str	r3, [r2, #0]
 801636a:	e013      	b.n	8016394 <tcp_process+0x6b4>
 801636c:	4b53      	ldr	r3, [pc, #332]	@ (80164bc <tcp_process+0x7dc>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	613b      	str	r3, [r7, #16]
 8016372:	e00c      	b.n	801638e <tcp_process+0x6ae>
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	687a      	ldr	r2, [r7, #4]
 801637a:	429a      	cmp	r2, r3
 801637c:	d104      	bne.n	8016388 <tcp_process+0x6a8>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	68da      	ldr	r2, [r3, #12]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	60da      	str	r2, [r3, #12]
 8016386:	e005      	b.n	8016394 <tcp_process+0x6b4>
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	613b      	str	r3, [r7, #16]
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d1ef      	bne.n	8016374 <tcp_process+0x694>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2200      	movs	r2, #0
 8016398:	60da      	str	r2, [r3, #12]
 801639a:	4b43      	ldr	r3, [pc, #268]	@ (80164a8 <tcp_process+0x7c8>)
 801639c:	2201      	movs	r2, #1
 801639e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	220a      	movs	r2, #10
 80163a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80163a6:	4b41      	ldr	r3, [pc, #260]	@ (80164ac <tcp_process+0x7cc>)
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	60da      	str	r2, [r3, #12]
 80163ae:	4a3f      	ldr	r2, [pc, #252]	@ (80164ac <tcp_process+0x7cc>)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6013      	str	r3, [r2, #0]
 80163b4:	f002 fc8c 	bl	8018cd0 <tcp_timer_needed>
      }
      break;
 80163b8:	e06c      	b.n	8016494 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 f984 	bl	80166c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80163c0:	4b3b      	ldr	r3, [pc, #236]	@ (80164b0 <tcp_process+0x7d0>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 0310 	and.w	r3, r3, #16
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d065      	beq.n	8016498 <tcp_process+0x7b8>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80163d0:	4b38      	ldr	r3, [pc, #224]	@ (80164b4 <tcp_process+0x7d4>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d15f      	bne.n	8016498 <tcp_process+0x7b8>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d15b      	bne.n	8016498 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f7fe fcf1 	bl	8014dc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80163e6:	4b35      	ldr	r3, [pc, #212]	@ (80164bc <tcp_process+0x7dc>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d105      	bne.n	80163fc <tcp_process+0x71c>
 80163f0:	4b32      	ldr	r3, [pc, #200]	@ (80164bc <tcp_process+0x7dc>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	68db      	ldr	r3, [r3, #12]
 80163f6:	4a31      	ldr	r2, [pc, #196]	@ (80164bc <tcp_process+0x7dc>)
 80163f8:	6013      	str	r3, [r2, #0]
 80163fa:	e013      	b.n	8016424 <tcp_process+0x744>
 80163fc:	4b2f      	ldr	r3, [pc, #188]	@ (80164bc <tcp_process+0x7dc>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	60fb      	str	r3, [r7, #12]
 8016402:	e00c      	b.n	801641e <tcp_process+0x73e>
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d104      	bne.n	8016418 <tcp_process+0x738>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68da      	ldr	r2, [r3, #12]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	60da      	str	r2, [r3, #12]
 8016416:	e005      	b.n	8016424 <tcp_process+0x744>
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1ef      	bne.n	8016404 <tcp_process+0x724>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2200      	movs	r2, #0
 8016428:	60da      	str	r2, [r3, #12]
 801642a:	4b1f      	ldr	r3, [pc, #124]	@ (80164a8 <tcp_process+0x7c8>)
 801642c:	2201      	movs	r2, #1
 801642e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	220a      	movs	r2, #10
 8016434:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016436:	4b1d      	ldr	r3, [pc, #116]	@ (80164ac <tcp_process+0x7cc>)
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	60da      	str	r2, [r3, #12]
 801643e:	4a1b      	ldr	r2, [pc, #108]	@ (80164ac <tcp_process+0x7cc>)
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6013      	str	r3, [r2, #0]
 8016444:	f002 fc44 	bl	8018cd0 <tcp_timer_needed>
      }
      break;
 8016448:	e026      	b.n	8016498 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f000 f93c 	bl	80166c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016450:	4b17      	ldr	r3, [pc, #92]	@ (80164b0 <tcp_process+0x7d0>)
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	f003 0310 	and.w	r3, r3, #16
 8016458:	2b00      	cmp	r3, #0
 801645a:	d01f      	beq.n	801649c <tcp_process+0x7bc>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016460:	4b14      	ldr	r3, [pc, #80]	@ (80164b4 <tcp_process+0x7d4>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	429a      	cmp	r2, r3
 8016466:	d119      	bne.n	801649c <tcp_process+0x7bc>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801646c:	2b00      	cmp	r3, #0
 801646e:	d115      	bne.n	801649c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016470:	4b11      	ldr	r3, [pc, #68]	@ (80164b8 <tcp_process+0x7d8>)
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	f043 0310 	orr.w	r3, r3, #16
 8016478:	b2da      	uxtb	r2, r3
 801647a:	4b0f      	ldr	r3, [pc, #60]	@ (80164b8 <tcp_process+0x7d8>)
 801647c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801647e:	e00d      	b.n	801649c <tcp_process+0x7bc>
    default:
      break;
 8016480:	bf00      	nop
 8016482:	e00c      	b.n	801649e <tcp_process+0x7be>
      break;
 8016484:	bf00      	nop
 8016486:	e00a      	b.n	801649e <tcp_process+0x7be>
      break;
 8016488:	bf00      	nop
 801648a:	e008      	b.n	801649e <tcp_process+0x7be>
      break;
 801648c:	bf00      	nop
 801648e:	e006      	b.n	801649e <tcp_process+0x7be>
      break;
 8016490:	bf00      	nop
 8016492:	e004      	b.n	801649e <tcp_process+0x7be>
      break;
 8016494:	bf00      	nop
 8016496:	e002      	b.n	801649e <tcp_process+0x7be>
      break;
 8016498:	bf00      	nop
 801649a:	e000      	b.n	801649e <tcp_process+0x7be>
      break;
 801649c:	bf00      	nop
  }
  return ERR_OK;
 801649e:	2300      	movs	r3, #0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3724      	adds	r7, #36	@ 0x24
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd90      	pop	{r4, r7, pc}
 80164a8:	20027530 	.word	0x20027530
 80164ac:	2002752c 	.word	0x2002752c
 80164b0:	20027560 	.word	0x20027560
 80164b4:	20027558 	.word	0x20027558
 80164b8:	20027561 	.word	0x20027561
 80164bc:	20027528 	.word	0x20027528

080164c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80164c0:	b590      	push	{r4, r7, lr}
 80164c2:	b085      	sub	sp, #20
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d106      	bne.n	80164de <tcp_oos_insert_segment+0x1e>
 80164d0:	4b3b      	ldr	r3, [pc, #236]	@ (80165c0 <tcp_oos_insert_segment+0x100>)
 80164d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80164d6:	493b      	ldr	r1, [pc, #236]	@ (80165c4 <tcp_oos_insert_segment+0x104>)
 80164d8:	483b      	ldr	r0, [pc, #236]	@ (80165c8 <tcp_oos_insert_segment+0x108>)
 80164da:	f006 ffe1 	bl	801d4a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	899b      	ldrh	r3, [r3, #12]
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7fb fc02 	bl	8011cf0 <lwip_htons>
 80164ec:	4603      	mov	r3, r0
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	f003 0301 	and.w	r3, r3, #1
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d028      	beq.n	801654a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80164f8:	6838      	ldr	r0, [r7, #0]
 80164fa:	f7fe fa63 	bl	80149c4 <tcp_segs_free>
    next = NULL;
 80164fe:	2300      	movs	r3, #0
 8016500:	603b      	str	r3, [r7, #0]
 8016502:	e056      	b.n	80165b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	899b      	ldrh	r3, [r3, #12]
 801650a:	b29b      	uxth	r3, r3
 801650c:	4618      	mov	r0, r3
 801650e:	f7fb fbef 	bl	8011cf0 <lwip_htons>
 8016512:	4603      	mov	r3, r0
 8016514:	b2db      	uxtb	r3, r3
 8016516:	f003 0301 	and.w	r3, r3, #1
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00d      	beq.n	801653a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	899b      	ldrh	r3, [r3, #12]
 8016524:	b29c      	uxth	r4, r3
 8016526:	2001      	movs	r0, #1
 8016528:	f7fb fbe2 	bl	8011cf0 <lwip_htons>
 801652c:	4603      	mov	r3, r0
 801652e:	461a      	mov	r2, r3
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	4322      	orrs	r2, r4
 8016536:	b292      	uxth	r2, r2
 8016538:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016544:	68f8      	ldr	r0, [r7, #12]
 8016546:	f7fe fa52 	bl	80149ee <tcp_seg_free>
    while (next &&
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00e      	beq.n	801656e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	891b      	ldrh	r3, [r3, #8]
 8016554:	461a      	mov	r2, r3
 8016556:	4b1d      	ldr	r3, [pc, #116]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	441a      	add	r2, r3
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	6839      	ldr	r1, [r7, #0]
 8016564:	8909      	ldrh	r1, [r1, #8]
 8016566:	440b      	add	r3, r1
 8016568:	1ad3      	subs	r3, r2, r3
    while (next &&
 801656a:	2b00      	cmp	r3, #0
 801656c:	daca      	bge.n	8016504 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d01e      	beq.n	80165b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	891b      	ldrh	r3, [r3, #8]
 8016578:	461a      	mov	r2, r3
 801657a:	4b14      	ldr	r3, [pc, #80]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	441a      	add	r2, r3
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	68db      	ldr	r3, [r3, #12]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016588:	2b00      	cmp	r3, #0
 801658a:	dd12      	ble.n	80165b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	68db      	ldr	r3, [r3, #12]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	b29a      	uxth	r2, r3
 8016594:	4b0d      	ldr	r3, [pc, #52]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	b29b      	uxth	r3, r3
 801659a:	1ad3      	subs	r3, r2, r3
 801659c:	b29a      	uxth	r2, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	685a      	ldr	r2, [r3, #4]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	891b      	ldrh	r3, [r3, #8]
 80165aa:	4619      	mov	r1, r3
 80165ac:	4610      	mov	r0, r2
 80165ae:	f7fc fe07 	bl	80131c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	683a      	ldr	r2, [r7, #0]
 80165b6:	601a      	str	r2, [r3, #0]
}
 80165b8:	bf00      	nop
 80165ba:	3714      	adds	r7, #20
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd90      	pop	{r4, r7, pc}
 80165c0:	0801f97c 	.word	0x0801f97c
 80165c4:	0801fc3c 	.word	0x0801fc3c
 80165c8:	0801f9c8 	.word	0x0801f9c8
 80165cc:	20027554 	.word	0x20027554

080165d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80165d0:	b5b0      	push	{r4, r5, r7, lr}
 80165d2:	b086      	sub	sp, #24
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
 80165dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80165de:	e03e      	b.n	801665e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7fc fffa 	bl	80135e8 <pbuf_clen>
 80165f4:	4603      	mov	r3, r0
 80165f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80165fe:	8a7a      	ldrh	r2, [r7, #18]
 8016600:	429a      	cmp	r2, r3
 8016602:	d906      	bls.n	8016612 <tcp_free_acked_segments+0x42>
 8016604:	4b2a      	ldr	r3, [pc, #168]	@ (80166b0 <tcp_free_acked_segments+0xe0>)
 8016606:	f240 4257 	movw	r2, #1111	@ 0x457
 801660a:	492a      	ldr	r1, [pc, #168]	@ (80166b4 <tcp_free_acked_segments+0xe4>)
 801660c:	482a      	ldr	r0, [pc, #168]	@ (80166b8 <tcp_free_acked_segments+0xe8>)
 801660e:	f006 ff47 	bl	801d4a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016618:	8a7b      	ldrh	r3, [r7, #18]
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	b29a      	uxth	r2, r3
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	891a      	ldrh	r2, [r3, #8]
 8016628:	4b24      	ldr	r3, [pc, #144]	@ (80166bc <tcp_free_acked_segments+0xec>)
 801662a:	881b      	ldrh	r3, [r3, #0]
 801662c:	4413      	add	r3, r2
 801662e:	b29a      	uxth	r2, r3
 8016630:	4b22      	ldr	r3, [pc, #136]	@ (80166bc <tcp_free_acked_segments+0xec>)
 8016632:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016634:	6978      	ldr	r0, [r7, #20]
 8016636:	f7fe f9da 	bl	80149ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016640:	2b00      	cmp	r3, #0
 8016642:	d00c      	beq.n	801665e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d109      	bne.n	801665e <tcp_free_acked_segments+0x8e>
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d106      	bne.n	801665e <tcp_free_acked_segments+0x8e>
 8016650:	4b17      	ldr	r3, [pc, #92]	@ (80166b0 <tcp_free_acked_segments+0xe0>)
 8016652:	f240 4261 	movw	r2, #1121	@ 0x461
 8016656:	491a      	ldr	r1, [pc, #104]	@ (80166c0 <tcp_free_acked_segments+0xf0>)
 8016658:	4817      	ldr	r0, [pc, #92]	@ (80166b8 <tcp_free_acked_segments+0xe8>)
 801665a:	f006 ff21 	bl	801d4a0 <iprintf>
  while (seg_list != NULL &&
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d020      	beq.n	80166a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	4618      	mov	r0, r3
 801666c:	f7fb fb56 	bl	8011d1c <lwip_htonl>
 8016670:	4604      	mov	r4, r0
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	891b      	ldrh	r3, [r3, #8]
 8016676:	461d      	mov	r5, r3
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	899b      	ldrh	r3, [r3, #12]
 801667e:	b29b      	uxth	r3, r3
 8016680:	4618      	mov	r0, r3
 8016682:	f7fb fb35 	bl	8011cf0 <lwip_htons>
 8016686:	4603      	mov	r3, r0
 8016688:	b2db      	uxtb	r3, r3
 801668a:	f003 0303 	and.w	r3, r3, #3
 801668e:	2b00      	cmp	r3, #0
 8016690:	d001      	beq.n	8016696 <tcp_free_acked_segments+0xc6>
 8016692:	2301      	movs	r3, #1
 8016694:	e000      	b.n	8016698 <tcp_free_acked_segments+0xc8>
 8016696:	2300      	movs	r3, #0
 8016698:	442b      	add	r3, r5
 801669a:	18e2      	adds	r2, r4, r3
 801669c:	4b09      	ldr	r3, [pc, #36]	@ (80166c4 <tcp_free_acked_segments+0xf4>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	dd9c      	ble.n	80165e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80166a6:	68bb      	ldr	r3, [r7, #8]
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3718      	adds	r7, #24
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bdb0      	pop	{r4, r5, r7, pc}
 80166b0:	0801f97c 	.word	0x0801f97c
 80166b4:	0801fc64 	.word	0x0801fc64
 80166b8:	0801f9c8 	.word	0x0801f9c8
 80166bc:	2002755c 	.word	0x2002755c
 80166c0:	0801fc8c 	.word	0x0801fc8c
 80166c4:	20027558 	.word	0x20027558

080166c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80166c8:	b5b0      	push	{r4, r5, r7, lr}
 80166ca:	b094      	sub	sp, #80	@ 0x50
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <tcp_receive+0x20>
 80166da:	4b91      	ldr	r3, [pc, #580]	@ (8016920 <tcp_receive+0x258>)
 80166dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80166e0:	4990      	ldr	r1, [pc, #576]	@ (8016924 <tcp_receive+0x25c>)
 80166e2:	4891      	ldr	r0, [pc, #580]	@ (8016928 <tcp_receive+0x260>)
 80166e4:	f006 fedc 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	7d1b      	ldrb	r3, [r3, #20]
 80166ec:	2b03      	cmp	r3, #3
 80166ee:	d806      	bhi.n	80166fe <tcp_receive+0x36>
 80166f0:	4b8b      	ldr	r3, [pc, #556]	@ (8016920 <tcp_receive+0x258>)
 80166f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80166f6:	498d      	ldr	r1, [pc, #564]	@ (801692c <tcp_receive+0x264>)
 80166f8:	488b      	ldr	r0, [pc, #556]	@ (8016928 <tcp_receive+0x260>)
 80166fa:	f006 fed1 	bl	801d4a0 <iprintf>

  if (flags & TCP_ACK) {
 80166fe:	4b8c      	ldr	r3, [pc, #560]	@ (8016930 <tcp_receive+0x268>)
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	f003 0310 	and.w	r3, r3, #16
 8016706:	2b00      	cmp	r3, #0
 8016708:	f000 8264 	beq.w	8016bd4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016718:	4413      	add	r3, r2
 801671a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016720:	4b84      	ldr	r3, [pc, #528]	@ (8016934 <tcp_receive+0x26c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	1ad3      	subs	r3, r2, r3
 8016726:	2b00      	cmp	r3, #0
 8016728:	db1b      	blt.n	8016762 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801672e:	4b81      	ldr	r3, [pc, #516]	@ (8016934 <tcp_receive+0x26c>)
 8016730:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016732:	429a      	cmp	r2, r3
 8016734:	d106      	bne.n	8016744 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801673a:	4b7f      	ldr	r3, [pc, #508]	@ (8016938 <tcp_receive+0x270>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	1ad3      	subs	r3, r2, r3
 8016740:	2b00      	cmp	r3, #0
 8016742:	db0e      	blt.n	8016762 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016748:	4b7b      	ldr	r3, [pc, #492]	@ (8016938 <tcp_receive+0x270>)
 801674a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801674c:	429a      	cmp	r2, r3
 801674e:	d125      	bne.n	801679c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016750:	4b7a      	ldr	r3, [pc, #488]	@ (801693c <tcp_receive+0x274>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	89db      	ldrh	r3, [r3, #14]
 8016756:	b29a      	uxth	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801675e:	429a      	cmp	r2, r3
 8016760:	d91c      	bls.n	801679c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016762:	4b76      	ldr	r3, [pc, #472]	@ (801693c <tcp_receive+0x274>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	89db      	ldrh	r3, [r3, #14]
 8016768:	b29a      	uxth	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801677c:	429a      	cmp	r2, r3
 801677e:	d205      	bcs.n	801678c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801678c:	4b69      	ldr	r3, [pc, #420]	@ (8016934 <tcp_receive+0x26c>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016794:	4b68      	ldr	r3, [pc, #416]	@ (8016938 <tcp_receive+0x270>)
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801679c:	4b66      	ldr	r3, [pc, #408]	@ (8016938 <tcp_receive+0x270>)
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	dc58      	bgt.n	801685c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80167aa:	4b65      	ldr	r3, [pc, #404]	@ (8016940 <tcp_receive+0x278>)
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d14b      	bne.n	801684a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80167bc:	4413      	add	r3, r2
 80167be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d142      	bne.n	801684a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	db3d      	blt.n	801684a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167d2:	4b59      	ldr	r3, [pc, #356]	@ (8016938 <tcp_receive+0x270>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d137      	bne.n	801684a <tcp_receive+0x182>
              found_dupack = 1;
 80167da:	2301      	movs	r3, #1
 80167dc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167e4:	2bff      	cmp	r3, #255	@ 0xff
 80167e6:	d007      	beq.n	80167f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167ee:	3301      	adds	r3, #1
 80167f0:	b2da      	uxtb	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167fe:	2b03      	cmp	r3, #3
 8016800:	d91b      	bls.n	801683a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801680c:	4413      	add	r3, r2
 801680e:	b29a      	uxth	r2, r3
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016816:	429a      	cmp	r2, r3
 8016818:	d30a      	bcc.n	8016830 <tcp_receive+0x168>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016824:	4413      	add	r3, r2
 8016826:	b29a      	uxth	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801682e:	e004      	b.n	801683a <tcp_receive+0x172>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016836:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016840:	2b02      	cmp	r3, #2
 8016842:	d902      	bls.n	801684a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f001 fee7 	bl	8018618 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801684a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801684c:	2b00      	cmp	r3, #0
 801684e:	f040 8161 	bne.w	8016b14 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801685a:	e15b      	b.n	8016b14 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801685c:	4b36      	ldr	r3, [pc, #216]	@ (8016938 <tcp_receive+0x270>)
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	3b01      	subs	r3, #1
 8016868:	2b00      	cmp	r3, #0
 801686a:	f2c0 814e 	blt.w	8016b0a <tcp_receive+0x442>
 801686e:	4b32      	ldr	r3, [pc, #200]	@ (8016938 <tcp_receive+0x270>)
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016876:	1ad3      	subs	r3, r2, r3
 8016878:	2b00      	cmp	r3, #0
 801687a:	f300 8146 	bgt.w	8016b0a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	8b5b      	ldrh	r3, [r3, #26]
 8016882:	f003 0304 	and.w	r3, r3, #4
 8016886:	2b00      	cmp	r3, #0
 8016888:	d010      	beq.n	80168ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8b5b      	ldrh	r3, [r3, #26]
 801688e:	f023 0304 	bic.w	r3, r3, #4
 8016892:	b29a      	uxth	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2200      	movs	r2, #0
 80168a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168ba:	10db      	asrs	r3, r3, #3
 80168bc:	b21b      	sxth	r3, r3
 80168be:	b29a      	uxth	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	4413      	add	r3, r2
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	b21a      	sxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80168d4:	4b18      	ldr	r3, [pc, #96]	@ (8016938 <tcp_receive+0x270>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	b29a      	uxth	r2, r3
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168de:	b29b      	uxth	r3, r3
 80168e0:	1ad3      	subs	r3, r2, r3
 80168e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80168ec:	4b12      	ldr	r3, [pc, #72]	@ (8016938 <tcp_receive+0x270>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7d1b      	ldrb	r3, [r3, #20]
 80168f8:	2b03      	cmp	r3, #3
 80168fa:	f240 8097 	bls.w	8016a2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801690a:	429a      	cmp	r2, r3
 801690c:	d245      	bcs.n	801699a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	8b5b      	ldrh	r3, [r3, #26]
 8016912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016916:	2b00      	cmp	r3, #0
 8016918:	d014      	beq.n	8016944 <tcp_receive+0x27c>
 801691a:	2301      	movs	r3, #1
 801691c:	e013      	b.n	8016946 <tcp_receive+0x27e>
 801691e:	bf00      	nop
 8016920:	0801f97c 	.word	0x0801f97c
 8016924:	0801fcac 	.word	0x0801fcac
 8016928:	0801f9c8 	.word	0x0801f9c8
 801692c:	0801fcc8 	.word	0x0801fcc8
 8016930:	20027560 	.word	0x20027560
 8016934:	20027554 	.word	0x20027554
 8016938:	20027558 	.word	0x20027558
 801693c:	20027544 	.word	0x20027544
 8016940:	2002755e 	.word	0x2002755e
 8016944:	2302      	movs	r3, #2
 8016946:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801694a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801694e:	b29a      	uxth	r2, r3
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016954:	fb12 f303 	smulbb	r3, r2, r3
 8016958:	b29b      	uxth	r3, r3
 801695a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801695c:	4293      	cmp	r3, r2
 801695e:	bf28      	it	cs
 8016960:	4613      	movcs	r3, r2
 8016962:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801696a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801696c:	4413      	add	r3, r2
 801696e:	b29a      	uxth	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016976:	429a      	cmp	r2, r3
 8016978:	d309      	bcc.n	801698e <tcp_receive+0x2c6>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016980:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016982:	4413      	add	r3, r2
 8016984:	b29a      	uxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801698c:	e04e      	b.n	8016a2c <tcp_receive+0x364>
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016994:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016998:	e048      	b.n	8016a2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169a2:	4413      	add	r3, r2
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d309      	bcc.n	80169c4 <tcp_receive+0x2fc>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169b8:	4413      	add	r3, r2
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80169c2:	e004      	b.n	80169ce <tcp_receive+0x306>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80169da:	429a      	cmp	r2, r3
 80169dc:	d326      	bcc.n	8016a2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80169ea:	1ad3      	subs	r3, r2, r3
 80169ec:	b29a      	uxth	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169fe:	4413      	add	r3, r2
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d30a      	bcc.n	8016a22 <tcp_receive+0x35a>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a16:	4413      	add	r3, r2
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016a20:	e004      	b.n	8016a2c <tcp_receive+0x364>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a34:	4a98      	ldr	r2, [pc, #608]	@ (8016c98 <tcp_receive+0x5d0>)
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7ff fdca 	bl	80165d0 <tcp_free_acked_segments>
 8016a3c:	4602      	mov	r2, r0
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a4a:	4a94      	ldr	r2, [pc, #592]	@ (8016c9c <tcp_receive+0x5d4>)
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff fdbf 	bl	80165d0 <tcp_free_acked_segments>
 8016a52:	4602      	mov	r2, r0
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d104      	bne.n	8016a6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a66:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016a68:	e002      	b.n	8016a70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d103      	bne.n	8016a86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2200      	movs	r2, #0
 8016a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016a8c:	4b84      	ldr	r3, [pc, #528]	@ (8016ca0 <tcp_receive+0x5d8>)
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	4413      	add	r3, r2
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d035      	beq.n	8016b12 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d118      	bne.n	8016ae0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00c      	beq.n	8016ad0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7fb f92a 	bl	8011d1c <lwip_htonl>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	dc20      	bgt.n	8016b12 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	8b5b      	ldrh	r3, [r3, #26]
 8016ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016ade:	e018      	b.n	8016b12 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7fb f915 	bl	8011d1c <lwip_htonl>
 8016af2:	4603      	mov	r3, r0
 8016af4:	1ae3      	subs	r3, r4, r3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	dc0b      	bgt.n	8016b12 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	8b5b      	ldrh	r3, [r3, #26]
 8016afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b08:	e003      	b.n	8016b12 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f001 ff70 	bl	80189f0 <tcp_send_empty_ack>
 8016b10:	e000      	b.n	8016b14 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b12:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d05b      	beq.n	8016bd4 <tcp_receive+0x50c>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016b20:	4b60      	ldr	r3, [pc, #384]	@ (8016ca4 <tcp_receive+0x5dc>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	da54      	bge.n	8016bd4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8016ca8 <tcp_receive+0x5e0>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	1ad3      	subs	r3, r2, r3
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016b3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016b48:	10db      	asrs	r3, r3, #3
 8016b4a:	b21b      	sxth	r3, r3
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016b62:	4413      	add	r3, r2
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	b21a      	sxth	r2, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8016b6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	da05      	bge.n	8016b80 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016b78:	425b      	negs	r3, r3
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016b80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016b8a:	109b      	asrs	r3, r3, #2
 8016b8c:	b21b      	sxth	r3, r3
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ba4:	4413      	add	r3, r2
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	b21a      	sxth	r2, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016bb4:	10db      	asrs	r3, r3, #3
 8016bb6:	b21b      	sxth	r3, r3
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	4413      	add	r3, r2
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	b21a      	sxth	r2, r3
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016bd4:	4b35      	ldr	r3, [pc, #212]	@ (8016cac <tcp_receive+0x5e4>)
 8016bd6:	881b      	ldrh	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	f000 84df 	beq.w	801759c <tcp_receive+0xed4>
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	7d1b      	ldrb	r3, [r3, #20]
 8016be2:	2b06      	cmp	r3, #6
 8016be4:	f200 84da 	bhi.w	801759c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bec:	4b30      	ldr	r3, [pc, #192]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	1ad3      	subs	r3, r2, r3
 8016bf2:	3b01      	subs	r3, #1
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	f2c0 808f 	blt.w	8016d18 <tcp_receive+0x650>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8016cac <tcp_receive+0x5e4>)
 8016c00:	881b      	ldrh	r3, [r3, #0]
 8016c02:	4619      	mov	r1, r3
 8016c04:	4b2a      	ldr	r3, [pc, #168]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	440b      	add	r3, r1
 8016c0a:	1ad3      	subs	r3, r2, r3
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f300 8082 	bgt.w	8016d18 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016c14:	4b27      	ldr	r3, [pc, #156]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c1e:	4b24      	ldr	r3, [pc, #144]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016c26:	4b23      	ldr	r3, [pc, #140]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d106      	bne.n	8016c3c <tcp_receive+0x574>
 8016c2e:	4b22      	ldr	r3, [pc, #136]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c30:	f240 5294 	movw	r2, #1428	@ 0x594
 8016c34:	4921      	ldr	r1, [pc, #132]	@ (8016cbc <tcp_receive+0x5f4>)
 8016c36:	4822      	ldr	r0, [pc, #136]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c38:	f006 fc32 	bl	801d4a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d906      	bls.n	8016c54 <tcp_receive+0x58c>
 8016c46:	4b1c      	ldr	r3, [pc, #112]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c48:	f240 5295 	movw	r2, #1429	@ 0x595
 8016c4c:	491d      	ldr	r1, [pc, #116]	@ (8016cc4 <tcp_receive+0x5fc>)
 8016c4e:	481c      	ldr	r0, [pc, #112]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c50:	f006 fc26 	bl	801d4a0 <iprintf>
      off = (u16_t)off32;
 8016c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016c5a:	4b16      	ldr	r3, [pc, #88]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	891b      	ldrh	r3, [r3, #8]
 8016c60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d906      	bls.n	8016c76 <tcp_receive+0x5ae>
 8016c68:	4b13      	ldr	r3, [pc, #76]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c6a:	f240 5297 	movw	r2, #1431	@ 0x597
 8016c6e:	4916      	ldr	r1, [pc, #88]	@ (8016cc8 <tcp_receive+0x600>)
 8016c70:	4813      	ldr	r0, [pc, #76]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c72:	f006 fc15 	bl	801d4a0 <iprintf>
      inseg.len -= off;
 8016c76:	4b0f      	ldr	r3, [pc, #60]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c78:	891a      	ldrh	r2, [r3, #8]
 8016c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	b29a      	uxth	r2, r3
 8016c82:	4b0c      	ldr	r3, [pc, #48]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c84:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016c86:	4b0b      	ldr	r3, [pc, #44]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	891a      	ldrh	r2, [r3, #8]
 8016c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016c94:	e02a      	b.n	8016cec <tcp_receive+0x624>
 8016c96:	bf00      	nop
 8016c98:	0801fce4 	.word	0x0801fce4
 8016c9c:	0801fcec 	.word	0x0801fcec
 8016ca0:	2002755c 	.word	0x2002755c
 8016ca4:	20027558 	.word	0x20027558
 8016ca8:	2002751c 	.word	0x2002751c
 8016cac:	2002755e 	.word	0x2002755e
 8016cb0:	20027554 	.word	0x20027554
 8016cb4:	20027534 	.word	0x20027534
 8016cb8:	0801f97c 	.word	0x0801f97c
 8016cbc:	0801fcf4 	.word	0x0801fcf4
 8016cc0:	0801f9c8 	.word	0x0801f9c8
 8016cc4:	0801fd04 	.word	0x0801fd04
 8016cc8:	0801fd14 	.word	0x0801fd14
        off -= p->len;
 8016ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cce:	895b      	ldrh	r3, [r3, #10]
 8016cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016cd4:	1ad3      	subs	r3, r2, r3
 8016cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cdc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016cde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cee:	895b      	ldrh	r3, [r3, #10]
 8016cf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d8e9      	bhi.n	8016ccc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016cf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016d00:	f7fc fb5e 	bl	80133c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d08:	4a90      	ldr	r2, [pc, #576]	@ (8016f4c <tcp_receive+0x884>)
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	4b90      	ldr	r3, [pc, #576]	@ (8016f50 <tcp_receive+0x888>)
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	4a8e      	ldr	r2, [pc, #568]	@ (8016f4c <tcp_receive+0x884>)
 8016d12:	6812      	ldr	r2, [r2, #0]
 8016d14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016d16:	e00d      	b.n	8016d34 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016d18:	4b8c      	ldr	r3, [pc, #560]	@ (8016f4c <tcp_receive+0x884>)
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d20:	1ad3      	subs	r3, r2, r3
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	da06      	bge.n	8016d34 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	8b5b      	ldrh	r3, [r3, #26]
 8016d2a:	f043 0302 	orr.w	r3, r3, #2
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d34:	4b85      	ldr	r3, [pc, #532]	@ (8016f4c <tcp_receive+0x884>)
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	f2c0 8427 	blt.w	8017592 <tcp_receive+0xeca>
 8016d44:	4b81      	ldr	r3, [pc, #516]	@ (8016f4c <tcp_receive+0x884>)
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d4c:	6879      	ldr	r1, [r7, #4]
 8016d4e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d50:	440b      	add	r3, r1
 8016d52:	1ad3      	subs	r3, r2, r3
 8016d54:	3301      	adds	r3, #1
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f300 841b 	bgt.w	8017592 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d60:	4b7a      	ldr	r3, [pc, #488]	@ (8016f4c <tcp_receive+0x884>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	429a      	cmp	r2, r3
 8016d66:	f040 8298 	bne.w	801729a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016d6a:	4b79      	ldr	r3, [pc, #484]	@ (8016f50 <tcp_receive+0x888>)
 8016d6c:	891c      	ldrh	r4, [r3, #8]
 8016d6e:	4b78      	ldr	r3, [pc, #480]	@ (8016f50 <tcp_receive+0x888>)
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	899b      	ldrh	r3, [r3, #12]
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fa ffba 	bl	8011cf0 <lwip_htons>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	f003 0303 	and.w	r3, r3, #3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d001      	beq.n	8016d8c <tcp_receive+0x6c4>
 8016d88:	2301      	movs	r3, #1
 8016d8a:	e000      	b.n	8016d8e <tcp_receive+0x6c6>
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	4423      	add	r3, r4
 8016d90:	b29a      	uxth	r2, r3
 8016d92:	4b70      	ldr	r3, [pc, #448]	@ (8016f54 <tcp_receive+0x88c>)
 8016d94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8016f54 <tcp_receive+0x88c>)
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d274      	bcs.n	8016e8c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016da2:	4b6b      	ldr	r3, [pc, #428]	@ (8016f50 <tcp_receive+0x888>)
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	899b      	ldrh	r3, [r3, #12]
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fa ffa0 	bl	8011cf0 <lwip_htons>
 8016db0:	4603      	mov	r3, r0
 8016db2:	b2db      	uxtb	r3, r3
 8016db4:	f003 0301 	and.w	r3, r3, #1
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d01e      	beq.n	8016dfa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016dbc:	4b64      	ldr	r3, [pc, #400]	@ (8016f50 <tcp_receive+0x888>)
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	899b      	ldrh	r3, [r3, #12]
 8016dc2:	b29b      	uxth	r3, r3
 8016dc4:	b21b      	sxth	r3, r3
 8016dc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016dca:	b21c      	sxth	r4, r3
 8016dcc:	4b60      	ldr	r3, [pc, #384]	@ (8016f50 <tcp_receive+0x888>)
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	899b      	ldrh	r3, [r3, #12]
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fa ff8b 	bl	8011cf0 <lwip_htons>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7fa ff83 	bl	8011cf0 <lwip_htons>
 8016dea:	4603      	mov	r3, r0
 8016dec:	b21b      	sxth	r3, r3
 8016dee:	4323      	orrs	r3, r4
 8016df0:	b21a      	sxth	r2, r3
 8016df2:	4b57      	ldr	r3, [pc, #348]	@ (8016f50 <tcp_receive+0x888>)
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	b292      	uxth	r2, r2
 8016df8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016dfe:	4b54      	ldr	r3, [pc, #336]	@ (8016f50 <tcp_receive+0x888>)
 8016e00:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e02:	4b53      	ldr	r3, [pc, #332]	@ (8016f50 <tcp_receive+0x888>)
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	899b      	ldrh	r3, [r3, #12]
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7fa ff70 	bl	8011cf0 <lwip_htons>
 8016e10:	4603      	mov	r3, r0
 8016e12:	b2db      	uxtb	r3, r3
 8016e14:	f003 0302 	and.w	r3, r3, #2
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d005      	beq.n	8016e28 <tcp_receive+0x760>
            inseg.len -= 1;
 8016e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8016f50 <tcp_receive+0x888>)
 8016e1e:	891b      	ldrh	r3, [r3, #8]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	4b4a      	ldr	r3, [pc, #296]	@ (8016f50 <tcp_receive+0x888>)
 8016e26:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016e28:	4b49      	ldr	r3, [pc, #292]	@ (8016f50 <tcp_receive+0x888>)
 8016e2a:	685b      	ldr	r3, [r3, #4]
 8016e2c:	4a48      	ldr	r2, [pc, #288]	@ (8016f50 <tcp_receive+0x888>)
 8016e2e:	8912      	ldrh	r2, [r2, #8]
 8016e30:	4611      	mov	r1, r2
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7fc f9c4 	bl	80131c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016e38:	4b45      	ldr	r3, [pc, #276]	@ (8016f50 <tcp_receive+0x888>)
 8016e3a:	891c      	ldrh	r4, [r3, #8]
 8016e3c:	4b44      	ldr	r3, [pc, #272]	@ (8016f50 <tcp_receive+0x888>)
 8016e3e:	68db      	ldr	r3, [r3, #12]
 8016e40:	899b      	ldrh	r3, [r3, #12]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7fa ff53 	bl	8011cf0 <lwip_htons>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	f003 0303 	and.w	r3, r3, #3
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d001      	beq.n	8016e5a <tcp_receive+0x792>
 8016e56:	2301      	movs	r3, #1
 8016e58:	e000      	b.n	8016e5c <tcp_receive+0x794>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	4423      	add	r3, r4
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	4b3c      	ldr	r3, [pc, #240]	@ (8016f54 <tcp_receive+0x88c>)
 8016e62:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016e64:	4b3b      	ldr	r3, [pc, #236]	@ (8016f54 <tcp_receive+0x88c>)
 8016e66:	881b      	ldrh	r3, [r3, #0]
 8016e68:	461a      	mov	r2, r3
 8016e6a:	4b38      	ldr	r3, [pc, #224]	@ (8016f4c <tcp_receive+0x884>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	441a      	add	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016e78:	440b      	add	r3, r1
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d006      	beq.n	8016e8c <tcp_receive+0x7c4>
 8016e7e:	4b36      	ldr	r3, [pc, #216]	@ (8016f58 <tcp_receive+0x890>)
 8016e80:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016e84:	4935      	ldr	r1, [pc, #212]	@ (8016f5c <tcp_receive+0x894>)
 8016e86:	4836      	ldr	r0, [pc, #216]	@ (8016f60 <tcp_receive+0x898>)
 8016e88:	f006 fb0a 	bl	801d4a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 80e6 	beq.w	8017062 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e96:	4b2e      	ldr	r3, [pc, #184]	@ (8016f50 <tcp_receive+0x888>)
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	899b      	ldrh	r3, [r3, #12]
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fa ff26 	bl	8011cf0 <lwip_htons>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	f003 0301 	and.w	r3, r3, #1
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d010      	beq.n	8016ed2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016eb0:	e00a      	b.n	8016ec8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016eb6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ebc:	681a      	ldr	r2, [r3, #0]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	f7fd fd93 	bl	80149ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d1f0      	bne.n	8016eb2 <tcp_receive+0x7ea>
 8016ed0:	e0c7      	b.n	8017062 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016ed8:	e051      	b.n	8016f7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	899b      	ldrh	r3, [r3, #12]
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fa ff04 	bl	8011cf0 <lwip_htons>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	f003 0301 	and.w	r3, r3, #1
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d03c      	beq.n	8016f6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016ef4:	4b16      	ldr	r3, [pc, #88]	@ (8016f50 <tcp_receive+0x888>)
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	899b      	ldrh	r3, [r3, #12]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7fa fef7 	bl	8011cf0 <lwip_htons>
 8016f02:	4603      	mov	r3, r0
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d12f      	bne.n	8016f6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016f0e:	4b10      	ldr	r3, [pc, #64]	@ (8016f50 <tcp_receive+0x888>)
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	899b      	ldrh	r3, [r3, #12]
 8016f14:	b29c      	uxth	r4, r3
 8016f16:	2001      	movs	r0, #1
 8016f18:	f7fa feea 	bl	8011cf0 <lwip_htons>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	461a      	mov	r2, r3
 8016f20:	4b0b      	ldr	r3, [pc, #44]	@ (8016f50 <tcp_receive+0x888>)
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	4322      	orrs	r2, r4
 8016f26:	b292      	uxth	r2, r2
 8016f28:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016f2a:	4b09      	ldr	r3, [pc, #36]	@ (8016f50 <tcp_receive+0x888>)
 8016f2c:	891c      	ldrh	r4, [r3, #8]
 8016f2e:	4b08      	ldr	r3, [pc, #32]	@ (8016f50 <tcp_receive+0x888>)
 8016f30:	68db      	ldr	r3, [r3, #12]
 8016f32:	899b      	ldrh	r3, [r3, #12]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7fa feda 	bl	8011cf0 <lwip_htons>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	f003 0303 	and.w	r3, r3, #3
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00d      	beq.n	8016f64 <tcp_receive+0x89c>
 8016f48:	2301      	movs	r3, #1
 8016f4a:	e00c      	b.n	8016f66 <tcp_receive+0x89e>
 8016f4c:	20027554 	.word	0x20027554
 8016f50:	20027534 	.word	0x20027534
 8016f54:	2002755e 	.word	0x2002755e
 8016f58:	0801f97c 	.word	0x0801f97c
 8016f5c:	0801fd24 	.word	0x0801fd24
 8016f60:	0801f9c8 	.word	0x0801f9c8
 8016f64:	2300      	movs	r3, #0
 8016f66:	4423      	add	r3, r4
 8016f68:	b29a      	uxth	r2, r3
 8016f6a:	4b98      	ldr	r3, [pc, #608]	@ (80171cc <tcp_receive+0xb04>)
 8016f6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016f78:	6938      	ldr	r0, [r7, #16]
 8016f7a:	f7fd fd38 	bl	80149ee <tcp_seg_free>
            while (next &&
 8016f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00e      	beq.n	8016fa2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016f84:	4b91      	ldr	r3, [pc, #580]	@ (80171cc <tcp_receive+0xb04>)
 8016f86:	881b      	ldrh	r3, [r3, #0]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4b91      	ldr	r3, [pc, #580]	@ (80171d0 <tcp_receive+0xb08>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	441a      	add	r2, r3
 8016f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016f98:	8909      	ldrh	r1, [r1, #8]
 8016f9a:	440b      	add	r3, r1
 8016f9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	da9b      	bge.n	8016eda <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d059      	beq.n	801705c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016fa8:	4b88      	ldr	r3, [pc, #544]	@ (80171cc <tcp_receive+0xb04>)
 8016faa:	881b      	ldrh	r3, [r3, #0]
 8016fac:	461a      	mov	r2, r3
 8016fae:	4b88      	ldr	r3, [pc, #544]	@ (80171d0 <tcp_receive+0xb08>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	441a      	add	r2, r3
 8016fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	dd4d      	ble.n	801705c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	4b81      	ldr	r3, [pc, #516]	@ (80171d0 <tcp_receive+0xb08>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	1ad3      	subs	r3, r2, r3
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	4b80      	ldr	r3, [pc, #512]	@ (80171d4 <tcp_receive+0xb0c>)
 8016fd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80171d4 <tcp_receive+0xb0c>)
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fe86 	bl	8011cf0 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0302 	and.w	r3, r3, #2
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d005      	beq.n	8016ffc <tcp_receive+0x934>
                inseg.len -= 1;
 8016ff0:	4b78      	ldr	r3, [pc, #480]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ff2:	891b      	ldrh	r3, [r3, #8]
 8016ff4:	3b01      	subs	r3, #1
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	4b76      	ldr	r3, [pc, #472]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ffa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016ffc:	4b75      	ldr	r3, [pc, #468]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	4a74      	ldr	r2, [pc, #464]	@ (80171d4 <tcp_receive+0xb0c>)
 8017002:	8912      	ldrh	r2, [r2, #8]
 8017004:	4611      	mov	r1, r2
 8017006:	4618      	mov	r0, r3
 8017008:	f7fc f8da 	bl	80131c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801700c:	4b71      	ldr	r3, [pc, #452]	@ (80171d4 <tcp_receive+0xb0c>)
 801700e:	891c      	ldrh	r4, [r3, #8]
 8017010:	4b70      	ldr	r3, [pc, #448]	@ (80171d4 <tcp_receive+0xb0c>)
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	899b      	ldrh	r3, [r3, #12]
 8017016:	b29b      	uxth	r3, r3
 8017018:	4618      	mov	r0, r3
 801701a:	f7fa fe69 	bl	8011cf0 <lwip_htons>
 801701e:	4603      	mov	r3, r0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	f003 0303 	and.w	r3, r3, #3
 8017026:	2b00      	cmp	r3, #0
 8017028:	d001      	beq.n	801702e <tcp_receive+0x966>
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <tcp_receive+0x968>
 801702e:	2300      	movs	r3, #0
 8017030:	4423      	add	r3, r4
 8017032:	b29a      	uxth	r2, r3
 8017034:	4b65      	ldr	r3, [pc, #404]	@ (80171cc <tcp_receive+0xb04>)
 8017036:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017038:	4b64      	ldr	r3, [pc, #400]	@ (80171cc <tcp_receive+0xb04>)
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	4b64      	ldr	r3, [pc, #400]	@ (80171d0 <tcp_receive+0xb08>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	441a      	add	r2, r3
 8017044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	429a      	cmp	r2, r3
 801704c:	d006      	beq.n	801705c <tcp_receive+0x994>
 801704e:	4b62      	ldr	r3, [pc, #392]	@ (80171d8 <tcp_receive+0xb10>)
 8017050:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017054:	4961      	ldr	r1, [pc, #388]	@ (80171dc <tcp_receive+0xb14>)
 8017056:	4862      	ldr	r0, [pc, #392]	@ (80171e0 <tcp_receive+0xb18>)
 8017058:	f006 fa22 	bl	801d4a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017060:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017062:	4b5a      	ldr	r3, [pc, #360]	@ (80171cc <tcp_receive+0xb04>)
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	4b59      	ldr	r3, [pc, #356]	@ (80171d0 <tcp_receive+0xb08>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	441a      	add	r2, r3
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017076:	4b55      	ldr	r3, [pc, #340]	@ (80171cc <tcp_receive+0xb04>)
 8017078:	881b      	ldrh	r3, [r3, #0]
 801707a:	429a      	cmp	r2, r3
 801707c:	d206      	bcs.n	801708c <tcp_receive+0x9c4>
 801707e:	4b56      	ldr	r3, [pc, #344]	@ (80171d8 <tcp_receive+0xb10>)
 8017080:	f240 6207 	movw	r2, #1543	@ 0x607
 8017084:	4957      	ldr	r1, [pc, #348]	@ (80171e4 <tcp_receive+0xb1c>)
 8017086:	4856      	ldr	r0, [pc, #344]	@ (80171e0 <tcp_receive+0xb18>)
 8017088:	f006 fa0a 	bl	801d4a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017090:	4b4e      	ldr	r3, [pc, #312]	@ (80171cc <tcp_receive+0xb04>)
 8017092:	881b      	ldrh	r3, [r3, #0]
 8017094:	1ad3      	subs	r3, r2, r3
 8017096:	b29a      	uxth	r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7fc ffc5 	bl	801402c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80170a2:	4b4c      	ldr	r3, [pc, #304]	@ (80171d4 <tcp_receive+0xb0c>)
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	891b      	ldrh	r3, [r3, #8]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d006      	beq.n	80170ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80170ac:	4b49      	ldr	r3, [pc, #292]	@ (80171d4 <tcp_receive+0xb0c>)
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	4a4d      	ldr	r2, [pc, #308]	@ (80171e8 <tcp_receive+0xb20>)
 80170b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80170b4:	4b47      	ldr	r3, [pc, #284]	@ (80171d4 <tcp_receive+0xb0c>)
 80170b6:	2200      	movs	r2, #0
 80170b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80170ba:	4b46      	ldr	r3, [pc, #280]	@ (80171d4 <tcp_receive+0xb0c>)
 80170bc:	68db      	ldr	r3, [r3, #12]
 80170be:	899b      	ldrh	r3, [r3, #12]
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fa fe14 	bl	8011cf0 <lwip_htons>
 80170c8:	4603      	mov	r3, r0
 80170ca:	b2db      	uxtb	r3, r3
 80170cc:	f003 0301 	and.w	r3, r3, #1
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 80b8 	beq.w	8017246 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80170d6:	4b45      	ldr	r3, [pc, #276]	@ (80171ec <tcp_receive+0xb24>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	f043 0320 	orr.w	r3, r3, #32
 80170de:	b2da      	uxtb	r2, r3
 80170e0:	4b42      	ldr	r3, [pc, #264]	@ (80171ec <tcp_receive+0xb24>)
 80170e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80170e4:	e0af      	b.n	8017246 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170f0:	68db      	ldr	r3, [r3, #12]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	4a36      	ldr	r2, [pc, #216]	@ (80171d0 <tcp_receive+0xb08>)
 80170f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	891b      	ldrh	r3, [r3, #8]
 80170fc:	461c      	mov	r4, r3
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	899b      	ldrh	r3, [r3, #12]
 8017104:	b29b      	uxth	r3, r3
 8017106:	4618      	mov	r0, r3
 8017108:	f7fa fdf2 	bl	8011cf0 <lwip_htons>
 801710c:	4603      	mov	r3, r0
 801710e:	b2db      	uxtb	r3, r3
 8017110:	f003 0303 	and.w	r3, r3, #3
 8017114:	2b00      	cmp	r3, #0
 8017116:	d001      	beq.n	801711c <tcp_receive+0xa54>
 8017118:	2301      	movs	r3, #1
 801711a:	e000      	b.n	801711e <tcp_receive+0xa56>
 801711c:	2300      	movs	r3, #0
 801711e:	191a      	adds	r2, r3, r4
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017124:	441a      	add	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801712e:	461c      	mov	r4, r3
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	891b      	ldrh	r3, [r3, #8]
 8017134:	461d      	mov	r5, r3
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	899b      	ldrh	r3, [r3, #12]
 801713c:	b29b      	uxth	r3, r3
 801713e:	4618      	mov	r0, r3
 8017140:	f7fa fdd6 	bl	8011cf0 <lwip_htons>
 8017144:	4603      	mov	r3, r0
 8017146:	b2db      	uxtb	r3, r3
 8017148:	f003 0303 	and.w	r3, r3, #3
 801714c:	2b00      	cmp	r3, #0
 801714e:	d001      	beq.n	8017154 <tcp_receive+0xa8c>
 8017150:	2301      	movs	r3, #1
 8017152:	e000      	b.n	8017156 <tcp_receive+0xa8e>
 8017154:	2300      	movs	r3, #0
 8017156:	442b      	add	r3, r5
 8017158:	429c      	cmp	r4, r3
 801715a:	d206      	bcs.n	801716a <tcp_receive+0xaa2>
 801715c:	4b1e      	ldr	r3, [pc, #120]	@ (80171d8 <tcp_receive+0xb10>)
 801715e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017162:	4923      	ldr	r1, [pc, #140]	@ (80171f0 <tcp_receive+0xb28>)
 8017164:	481e      	ldr	r0, [pc, #120]	@ (80171e0 <tcp_receive+0xb18>)
 8017166:	f006 f99b 	bl	801d4a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	891b      	ldrh	r3, [r3, #8]
 801716e:	461c      	mov	r4, r3
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	899b      	ldrh	r3, [r3, #12]
 8017176:	b29b      	uxth	r3, r3
 8017178:	4618      	mov	r0, r3
 801717a:	f7fa fdb9 	bl	8011cf0 <lwip_htons>
 801717e:	4603      	mov	r3, r0
 8017180:	b2db      	uxtb	r3, r3
 8017182:	f003 0303 	and.w	r3, r3, #3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <tcp_receive+0xac6>
 801718a:	2301      	movs	r3, #1
 801718c:	e000      	b.n	8017190 <tcp_receive+0xac8>
 801718e:	2300      	movs	r3, #0
 8017190:	1919      	adds	r1, r3, r4
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017196:	b28b      	uxth	r3, r1
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	b29a      	uxth	r2, r3
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7fc ff43 	bl	801402c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	891b      	ldrh	r3, [r3, #8]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d028      	beq.n	8017202 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80171b0:	4b0d      	ldr	r3, [pc, #52]	@ (80171e8 <tcp_receive+0xb20>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d01d      	beq.n	80171f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80171b8:	4b0b      	ldr	r3, [pc, #44]	@ (80171e8 <tcp_receive+0xb20>)
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	4619      	mov	r1, r3
 80171c2:	4610      	mov	r0, r2
 80171c4:	f7fc fa50 	bl	8013668 <pbuf_cat>
 80171c8:	e018      	b.n	80171fc <tcp_receive+0xb34>
 80171ca:	bf00      	nop
 80171cc:	2002755e 	.word	0x2002755e
 80171d0:	20027554 	.word	0x20027554
 80171d4:	20027534 	.word	0x20027534
 80171d8:	0801f97c 	.word	0x0801f97c
 80171dc:	0801fd5c 	.word	0x0801fd5c
 80171e0:	0801f9c8 	.word	0x0801f9c8
 80171e4:	0801fd98 	.word	0x0801fd98
 80171e8:	20027564 	.word	0x20027564
 80171ec:	20027561 	.word	0x20027561
 80171f0:	0801fdb8 	.word	0x0801fdb8
            } else {
              recv_data = cseg->p;
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	4a70      	ldr	r2, [pc, #448]	@ (80173bc <tcp_receive+0xcf4>)
 80171fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	2200      	movs	r2, #0
 8017200:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	899b      	ldrh	r3, [r3, #12]
 8017208:	b29b      	uxth	r3, r3
 801720a:	4618      	mov	r0, r3
 801720c:	f7fa fd70 	bl	8011cf0 <lwip_htons>
 8017210:	4603      	mov	r3, r0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	f003 0301 	and.w	r3, r3, #1
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00d      	beq.n	8017238 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801721c:	4b68      	ldr	r3, [pc, #416]	@ (80173c0 <tcp_receive+0xcf8>)
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	f043 0320 	orr.w	r3, r3, #32
 8017224:	b2da      	uxtb	r2, r3
 8017226:	4b66      	ldr	r3, [pc, #408]	@ (80173c0 <tcp_receive+0xcf8>)
 8017228:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	7d1b      	ldrb	r3, [r3, #20]
 801722e:	2b04      	cmp	r3, #4
 8017230:	d102      	bne.n	8017238 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2207      	movs	r2, #7
 8017236:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	681a      	ldr	r2, [r3, #0]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017240:	68b8      	ldr	r0, [r7, #8]
 8017242:	f7fd fbd4 	bl	80149ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801724a:	2b00      	cmp	r3, #0
 801724c:	d008      	beq.n	8017260 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017252:	68db      	ldr	r3, [r3, #12]
 8017254:	685a      	ldr	r2, [r3, #4]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801725a:	429a      	cmp	r2, r3
 801725c:	f43f af43 	beq.w	80170e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	8b5b      	ldrh	r3, [r3, #26]
 8017264:	f003 0301 	and.w	r3, r3, #1
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00e      	beq.n	801728a <tcp_receive+0xbc2>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	8b5b      	ldrh	r3, [r3, #26]
 8017270:	f023 0301 	bic.w	r3, r3, #1
 8017274:	b29a      	uxth	r2, r3
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	835a      	strh	r2, [r3, #26]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f043 0302 	orr.w	r3, r3, #2
 8017282:	b29a      	uxth	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017288:	e187      	b.n	801759a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	8b5b      	ldrh	r3, [r3, #26]
 801728e:	f043 0301 	orr.w	r3, r3, #1
 8017292:	b29a      	uxth	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017298:	e17f      	b.n	801759a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d106      	bne.n	80172b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80172a2:	4848      	ldr	r0, [pc, #288]	@ (80173c4 <tcp_receive+0xcfc>)
 80172a4:	f7fd fbbc 	bl	8014a20 <tcp_seg_copy>
 80172a8:	4602      	mov	r2, r0
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80172ae:	e16c      	b.n	801758a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80172b0:	2300      	movs	r3, #0
 80172b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80172b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80172ba:	e156      	b.n	801756a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80172bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	685a      	ldr	r2, [r3, #4]
 80172c2:	4b41      	ldr	r3, [pc, #260]	@ (80173c8 <tcp_receive+0xd00>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d11d      	bne.n	8017306 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80172ca:	4b3e      	ldr	r3, [pc, #248]	@ (80173c4 <tcp_receive+0xcfc>)
 80172cc:	891a      	ldrh	r2, [r3, #8]
 80172ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d0:	891b      	ldrh	r3, [r3, #8]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	f240 814e 	bls.w	8017574 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80172d8:	483a      	ldr	r0, [pc, #232]	@ (80173c4 <tcp_receive+0xcfc>)
 80172da:	f7fd fba1 	bl	8014a20 <tcp_seg_copy>
 80172de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f000 8148 	beq.w	8017578 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80172e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d003      	beq.n	80172f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80172ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172f0:	697a      	ldr	r2, [r7, #20]
 80172f2:	601a      	str	r2, [r3, #0]
 80172f4:	e002      	b.n	80172fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	697a      	ldr	r2, [r7, #20]
 80172fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80172fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80172fe:	6978      	ldr	r0, [r7, #20]
 8017300:	f7ff f8de 	bl	80164c0 <tcp_oos_insert_segment>
                }
                break;
 8017304:	e138      	b.n	8017578 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017308:	2b00      	cmp	r3, #0
 801730a:	d117      	bne.n	801733c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801730c:	4b2e      	ldr	r3, [pc, #184]	@ (80173c8 <tcp_receive+0xd00>)
 801730e:	681a      	ldr	r2, [r3, #0]
 8017310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017312:	68db      	ldr	r3, [r3, #12]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	1ad3      	subs	r3, r2, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	da57      	bge.n	80173cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801731c:	4829      	ldr	r0, [pc, #164]	@ (80173c4 <tcp_receive+0xcfc>)
 801731e:	f7fd fb7f 	bl	8014a20 <tcp_seg_copy>
 8017322:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017324:	69bb      	ldr	r3, [r7, #24]
 8017326:	2b00      	cmp	r3, #0
 8017328:	f000 8128 	beq.w	801757c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	69ba      	ldr	r2, [r7, #24]
 8017330:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017332:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017334:	69b8      	ldr	r0, [r7, #24]
 8017336:	f7ff f8c3 	bl	80164c0 <tcp_oos_insert_segment>
                  }
                  break;
 801733a:	e11f      	b.n	801757c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801733c:	4b22      	ldr	r3, [pc, #136]	@ (80173c8 <tcp_receive+0xd00>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	1ad3      	subs	r3, r2, r3
 8017348:	3b01      	subs	r3, #1
 801734a:	2b00      	cmp	r3, #0
 801734c:	db3e      	blt.n	80173cc <tcp_receive+0xd04>
 801734e:	4b1e      	ldr	r3, [pc, #120]	@ (80173c8 <tcp_receive+0xd00>)
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	3301      	adds	r3, #1
 801735c:	2b00      	cmp	r3, #0
 801735e:	dc35      	bgt.n	80173cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017360:	4818      	ldr	r0, [pc, #96]	@ (80173c4 <tcp_receive+0xcfc>)
 8017362:	f7fd fb5d 	bl	8014a20 <tcp_seg_copy>
 8017366:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	2b00      	cmp	r3, #0
 801736c:	f000 8108 	beq.w	8017580 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017372:	68db      	ldr	r3, [r3, #12]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017378:	8912      	ldrh	r2, [r2, #8]
 801737a:	441a      	add	r2, r3
 801737c:	4b12      	ldr	r3, [pc, #72]	@ (80173c8 <tcp_receive+0xd00>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	1ad3      	subs	r3, r2, r3
 8017382:	2b00      	cmp	r3, #0
 8017384:	dd12      	ble.n	80173ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017386:	4b10      	ldr	r3, [pc, #64]	@ (80173c8 <tcp_receive+0xd00>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	b29a      	uxth	r2, r3
 801738c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	685b      	ldr	r3, [r3, #4]
 8017392:	b29b      	uxth	r3, r3
 8017394:	1ad3      	subs	r3, r2, r3
 8017396:	b29a      	uxth	r2, r3
 8017398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801739a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801739e:	685a      	ldr	r2, [r3, #4]
 80173a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173a2:	891b      	ldrh	r3, [r3, #8]
 80173a4:	4619      	mov	r1, r3
 80173a6:	4610      	mov	r0, r2
 80173a8:	f7fb ff0a 	bl	80131c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80173ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173ae:	69fa      	ldr	r2, [r7, #28]
 80173b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80173b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80173b4:	69f8      	ldr	r0, [r7, #28]
 80173b6:	f7ff f883 	bl	80164c0 <tcp_oos_insert_segment>
                  }
                  break;
 80173ba:	e0e1      	b.n	8017580 <tcp_receive+0xeb8>
 80173bc:	20027564 	.word	0x20027564
 80173c0:	20027561 	.word	0x20027561
 80173c4:	20027534 	.word	0x20027534
 80173c8:	20027554 	.word	0x20027554
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80173cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80173d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	f040 80c5 	bne.w	8017564 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80173da:	4b7f      	ldr	r3, [pc, #508]	@ (80175d8 <tcp_receive+0xf10>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f340 80bc 	ble.w	8017564 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80173ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ee:	68db      	ldr	r3, [r3, #12]
 80173f0:	899b      	ldrh	r3, [r3, #12]
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7fa fc7b 	bl	8011cf0 <lwip_htons>
 80173fa:	4603      	mov	r3, r0
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	2b00      	cmp	r3, #0
 8017404:	f040 80be 	bne.w	8017584 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017408:	4874      	ldr	r0, [pc, #464]	@ (80175dc <tcp_receive+0xf14>)
 801740a:	f7fd fb09 	bl	8014a20 <tcp_seg_copy>
 801740e:	4602      	mov	r2, r0
 8017410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017412:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	f000 80b5 	beq.w	8017588 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017420:	68db      	ldr	r3, [r3, #12]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017426:	8912      	ldrh	r2, [r2, #8]
 8017428:	441a      	add	r2, r3
 801742a:	4b6b      	ldr	r3, [pc, #428]	@ (80175d8 <tcp_receive+0xf10>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	2b00      	cmp	r3, #0
 8017432:	dd12      	ble.n	801745a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017434:	4b68      	ldr	r3, [pc, #416]	@ (80175d8 <tcp_receive+0xf10>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	b29a      	uxth	r2, r3
 801743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801743c:	68db      	ldr	r3, [r3, #12]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	b29b      	uxth	r3, r3
 8017442:	1ad3      	subs	r3, r2, r3
 8017444:	b29a      	uxth	r2, r3
 8017446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017448:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801744a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801744c:	685a      	ldr	r2, [r3, #4]
 801744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017450:	891b      	ldrh	r3, [r3, #8]
 8017452:	4619      	mov	r1, r3
 8017454:	4610      	mov	r0, r2
 8017456:	f7fb feb3 	bl	80131c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801745a:	4b61      	ldr	r3, [pc, #388]	@ (80175e0 <tcp_receive+0xf18>)
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	461a      	mov	r2, r3
 8017460:	4b5d      	ldr	r3, [pc, #372]	@ (80175d8 <tcp_receive+0xf10>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	441a      	add	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801746a:	6879      	ldr	r1, [r7, #4]
 801746c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801746e:	440b      	add	r3, r1
 8017470:	1ad3      	subs	r3, r2, r3
 8017472:	2b00      	cmp	r3, #0
 8017474:	f340 8088 	ble.w	8017588 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	68db      	ldr	r3, [r3, #12]
 801747e:	899b      	ldrh	r3, [r3, #12]
 8017480:	b29b      	uxth	r3, r3
 8017482:	4618      	mov	r0, r3
 8017484:	f7fa fc34 	bl	8011cf0 <lwip_htons>
 8017488:	4603      	mov	r3, r0
 801748a:	b2db      	uxtb	r3, r3
 801748c:	f003 0301 	and.w	r3, r3, #1
 8017490:	2b00      	cmp	r3, #0
 8017492:	d021      	beq.n	80174d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	899b      	ldrh	r3, [r3, #12]
 801749c:	b29b      	uxth	r3, r3
 801749e:	b21b      	sxth	r3, r3
 80174a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80174a4:	b21c      	sxth	r4, r3
 80174a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	899b      	ldrh	r3, [r3, #12]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7fa fc1d 	bl	8011cf0 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80174be:	b29b      	uxth	r3, r3
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7fa fc15 	bl	8011cf0 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	b21b      	sxth	r3, r3
 80174ca:	4323      	orrs	r3, r4
 80174cc:	b21a      	sxth	r2, r3
 80174ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	b292      	uxth	r2, r2
 80174d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174dc:	b29a      	uxth	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80174e2:	4413      	add	r3, r2
 80174e4:	b299      	uxth	r1, r3
 80174e6:	4b3c      	ldr	r3, [pc, #240]	@ (80175d8 <tcp_receive+0xf10>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	b29a      	uxth	r2, r3
 80174ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	1a8a      	subs	r2, r1, r2
 80174f2:	b292      	uxth	r2, r2
 80174f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80174f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	685a      	ldr	r2, [r3, #4]
 80174fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	891b      	ldrh	r3, [r3, #8]
 8017502:	4619      	mov	r1, r3
 8017504:	4610      	mov	r0, r2
 8017506:	f7fb fe5b 	bl	80131c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801750a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	891c      	ldrh	r4, [r3, #8]
 8017510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	899b      	ldrh	r3, [r3, #12]
 8017518:	b29b      	uxth	r3, r3
 801751a:	4618      	mov	r0, r3
 801751c:	f7fa fbe8 	bl	8011cf0 <lwip_htons>
 8017520:	4603      	mov	r3, r0
 8017522:	b2db      	uxtb	r3, r3
 8017524:	f003 0303 	and.w	r3, r3, #3
 8017528:	2b00      	cmp	r3, #0
 801752a:	d001      	beq.n	8017530 <tcp_receive+0xe68>
 801752c:	2301      	movs	r3, #1
 801752e:	e000      	b.n	8017532 <tcp_receive+0xe6a>
 8017530:	2300      	movs	r3, #0
 8017532:	4423      	add	r3, r4
 8017534:	b29a      	uxth	r2, r3
 8017536:	4b2a      	ldr	r3, [pc, #168]	@ (80175e0 <tcp_receive+0xf18>)
 8017538:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801753a:	4b29      	ldr	r3, [pc, #164]	@ (80175e0 <tcp_receive+0xf18>)
 801753c:	881b      	ldrh	r3, [r3, #0]
 801753e:	461a      	mov	r2, r3
 8017540:	4b25      	ldr	r3, [pc, #148]	@ (80175d8 <tcp_receive+0xf10>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	441a      	add	r2, r3
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801754a:	6879      	ldr	r1, [r7, #4]
 801754c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801754e:	440b      	add	r3, r1
 8017550:	429a      	cmp	r2, r3
 8017552:	d019      	beq.n	8017588 <tcp_receive+0xec0>
 8017554:	4b23      	ldr	r3, [pc, #140]	@ (80175e4 <tcp_receive+0xf1c>)
 8017556:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801755a:	4923      	ldr	r1, [pc, #140]	@ (80175e8 <tcp_receive+0xf20>)
 801755c:	4823      	ldr	r0, [pc, #140]	@ (80175ec <tcp_receive+0xf24>)
 801755e:	f005 ff9f 	bl	801d4a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017562:	e011      	b.n	8017588 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	63bb      	str	r3, [r7, #56]	@ 0x38
 801756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801756c:	2b00      	cmp	r3, #0
 801756e:	f47f aea5 	bne.w	80172bc <tcp_receive+0xbf4>
 8017572:	e00a      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017574:	bf00      	nop
 8017576:	e008      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017578:	bf00      	nop
 801757a:	e006      	b.n	801758a <tcp_receive+0xec2>
                  break;
 801757c:	bf00      	nop
 801757e:	e004      	b.n	801758a <tcp_receive+0xec2>
                  break;
 8017580:	bf00      	nop
 8017582:	e002      	b.n	801758a <tcp_receive+0xec2>
                  break;
 8017584:	bf00      	nop
 8017586:	e000      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017588:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 fa30 	bl	80189f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017590:	e003      	b.n	801759a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f001 fa2c 	bl	80189f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017598:	e01a      	b.n	80175d0 <tcp_receive+0xf08>
 801759a:	e019      	b.n	80175d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801759c:	4b0e      	ldr	r3, [pc, #56]	@ (80175d8 <tcp_receive+0xf10>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175a4:	1ad3      	subs	r3, r2, r3
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	db0a      	blt.n	80175c0 <tcp_receive+0xef8>
 80175aa:	4b0b      	ldr	r3, [pc, #44]	@ (80175d8 <tcp_receive+0xf10>)
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175b2:	6879      	ldr	r1, [r7, #4]
 80175b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80175b6:	440b      	add	r3, r1
 80175b8:	1ad3      	subs	r3, r2, r3
 80175ba:	3301      	adds	r3, #1
 80175bc:	2b00      	cmp	r3, #0
 80175be:	dd07      	ble.n	80175d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	8b5b      	ldrh	r3, [r3, #26]
 80175c4:	f043 0302 	orr.w	r3, r3, #2
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80175ce:	e7ff      	b.n	80175d0 <tcp_receive+0xf08>
 80175d0:	bf00      	nop
 80175d2:	3750      	adds	r7, #80	@ 0x50
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bdb0      	pop	{r4, r5, r7, pc}
 80175d8:	20027554 	.word	0x20027554
 80175dc:	20027534 	.word	0x20027534
 80175e0:	2002755e 	.word	0x2002755e
 80175e4:	0801f97c 	.word	0x0801f97c
 80175e8:	0801fd24 	.word	0x0801fd24
 80175ec:	0801f9c8 	.word	0x0801f9c8

080175f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80175f6:	4b15      	ldr	r3, [pc, #84]	@ (801764c <tcp_get_next_optbyte+0x5c>)
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	1c5a      	adds	r2, r3, #1
 80175fc:	b291      	uxth	r1, r2
 80175fe:	4a13      	ldr	r2, [pc, #76]	@ (801764c <tcp_get_next_optbyte+0x5c>)
 8017600:	8011      	strh	r1, [r2, #0]
 8017602:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017604:	4b12      	ldr	r3, [pc, #72]	@ (8017650 <tcp_get_next_optbyte+0x60>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d004      	beq.n	8017616 <tcp_get_next_optbyte+0x26>
 801760c:	4b11      	ldr	r3, [pc, #68]	@ (8017654 <tcp_get_next_optbyte+0x64>)
 801760e:	881b      	ldrh	r3, [r3, #0]
 8017610:	88fa      	ldrh	r2, [r7, #6]
 8017612:	429a      	cmp	r2, r3
 8017614:	d208      	bcs.n	8017628 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017616:	4b10      	ldr	r3, [pc, #64]	@ (8017658 <tcp_get_next_optbyte+0x68>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	3314      	adds	r3, #20
 801761c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801761e:	88fb      	ldrh	r3, [r7, #6]
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	4413      	add	r3, r2
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	e00b      	b.n	8017640 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017628:	88fb      	ldrh	r3, [r7, #6]
 801762a:	b2da      	uxtb	r2, r3
 801762c:	4b09      	ldr	r3, [pc, #36]	@ (8017654 <tcp_get_next_optbyte+0x64>)
 801762e:	881b      	ldrh	r3, [r3, #0]
 8017630:	b2db      	uxtb	r3, r3
 8017632:	1ad3      	subs	r3, r2, r3
 8017634:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017636:	4b06      	ldr	r3, [pc, #24]	@ (8017650 <tcp_get_next_optbyte+0x60>)
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	797b      	ldrb	r3, [r7, #5]
 801763c:	4413      	add	r3, r2
 801763e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017640:	4618      	mov	r0, r3
 8017642:	370c      	adds	r7, #12
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr
 801764c:	20027550 	.word	0x20027550
 8017650:	2002754c 	.word	0x2002754c
 8017654:	2002754a 	.word	0x2002754a
 8017658:	20027544 	.word	0x20027544

0801765c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d106      	bne.n	8017678 <tcp_parseopt+0x1c>
 801766a:	4b32      	ldr	r3, [pc, #200]	@ (8017734 <tcp_parseopt+0xd8>)
 801766c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017670:	4931      	ldr	r1, [pc, #196]	@ (8017738 <tcp_parseopt+0xdc>)
 8017672:	4832      	ldr	r0, [pc, #200]	@ (801773c <tcp_parseopt+0xe0>)
 8017674:	f005 ff14 	bl	801d4a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017678:	4b31      	ldr	r3, [pc, #196]	@ (8017740 <tcp_parseopt+0xe4>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d056      	beq.n	801772e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017680:	4b30      	ldr	r3, [pc, #192]	@ (8017744 <tcp_parseopt+0xe8>)
 8017682:	2200      	movs	r2, #0
 8017684:	801a      	strh	r2, [r3, #0]
 8017686:	e046      	b.n	8017716 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8017688:	f7ff ffb2 	bl	80175f0 <tcp_get_next_optbyte>
 801768c:	4603      	mov	r3, r0
 801768e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017690:	7bfb      	ldrb	r3, [r7, #15]
 8017692:	2b02      	cmp	r3, #2
 8017694:	d006      	beq.n	80176a4 <tcp_parseopt+0x48>
 8017696:	2b02      	cmp	r3, #2
 8017698:	dc2a      	bgt.n	80176f0 <tcp_parseopt+0x94>
 801769a:	2b00      	cmp	r3, #0
 801769c:	d042      	beq.n	8017724 <tcp_parseopt+0xc8>
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d038      	beq.n	8017714 <tcp_parseopt+0xb8>
 80176a2:	e025      	b.n	80176f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80176a4:	f7ff ffa4 	bl	80175f0 <tcp_get_next_optbyte>
 80176a8:	4603      	mov	r3, r0
 80176aa:	2b04      	cmp	r3, #4
 80176ac:	d13c      	bne.n	8017728 <tcp_parseopt+0xcc>
 80176ae:	4b25      	ldr	r3, [pc, #148]	@ (8017744 <tcp_parseopt+0xe8>)
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	3301      	adds	r3, #1
 80176b4:	4a22      	ldr	r2, [pc, #136]	@ (8017740 <tcp_parseopt+0xe4>)
 80176b6:	8812      	ldrh	r2, [r2, #0]
 80176b8:	4293      	cmp	r3, r2
 80176ba:	da35      	bge.n	8017728 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80176bc:	f7ff ff98 	bl	80175f0 <tcp_get_next_optbyte>
 80176c0:	4603      	mov	r3, r0
 80176c2:	021b      	lsls	r3, r3, #8
 80176c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80176c6:	f7ff ff93 	bl	80175f0 <tcp_get_next_optbyte>
 80176ca:	4603      	mov	r3, r0
 80176cc:	461a      	mov	r2, r3
 80176ce:	89bb      	ldrh	r3, [r7, #12]
 80176d0:	4313      	orrs	r3, r2
 80176d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80176d4:	89bb      	ldrh	r3, [r7, #12]
 80176d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80176da:	d804      	bhi.n	80176e6 <tcp_parseopt+0x8a>
 80176dc:	89bb      	ldrh	r3, [r7, #12]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <tcp_parseopt+0x8a>
 80176e2:	89ba      	ldrh	r2, [r7, #12]
 80176e4:	e001      	b.n	80176ea <tcp_parseopt+0x8e>
 80176e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80176ee:	e012      	b.n	8017716 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80176f0:	f7ff ff7e 	bl	80175f0 <tcp_get_next_optbyte>
 80176f4:	4603      	mov	r3, r0
 80176f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80176f8:	7afb      	ldrb	r3, [r7, #11]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d916      	bls.n	801772c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80176fe:	7afb      	ldrb	r3, [r7, #11]
 8017700:	b29a      	uxth	r2, r3
 8017702:	4b10      	ldr	r3, [pc, #64]	@ (8017744 <tcp_parseopt+0xe8>)
 8017704:	881b      	ldrh	r3, [r3, #0]
 8017706:	4413      	add	r3, r2
 8017708:	b29b      	uxth	r3, r3
 801770a:	3b02      	subs	r3, #2
 801770c:	b29a      	uxth	r2, r3
 801770e:	4b0d      	ldr	r3, [pc, #52]	@ (8017744 <tcp_parseopt+0xe8>)
 8017710:	801a      	strh	r2, [r3, #0]
 8017712:	e000      	b.n	8017716 <tcp_parseopt+0xba>
          break;
 8017714:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017716:	4b0b      	ldr	r3, [pc, #44]	@ (8017744 <tcp_parseopt+0xe8>)
 8017718:	881a      	ldrh	r2, [r3, #0]
 801771a:	4b09      	ldr	r3, [pc, #36]	@ (8017740 <tcp_parseopt+0xe4>)
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	429a      	cmp	r2, r3
 8017720:	d3b2      	bcc.n	8017688 <tcp_parseopt+0x2c>
 8017722:	e004      	b.n	801772e <tcp_parseopt+0xd2>
          return;
 8017724:	bf00      	nop
 8017726:	e002      	b.n	801772e <tcp_parseopt+0xd2>
            return;
 8017728:	bf00      	nop
 801772a:	e000      	b.n	801772e <tcp_parseopt+0xd2>
            return;
 801772c:	bf00      	nop
      }
    }
  }
}
 801772e:	3710      	adds	r7, #16
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	0801f97c 	.word	0x0801f97c
 8017738:	0801fde0 	.word	0x0801fde0
 801773c:	0801f9c8 	.word	0x0801f9c8
 8017740:	20027548 	.word	0x20027548
 8017744:	20027550 	.word	0x20027550

08017748 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017748:	b480      	push	{r7}
 801774a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801774c:	4b05      	ldr	r3, [pc, #20]	@ (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f043 0310 	orr.w	r3, r3, #16
 8017754:	b2da      	uxtb	r2, r3
 8017756:	4b03      	ldr	r3, [pc, #12]	@ (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 8017758:	701a      	strb	r2, [r3, #0]
}
 801775a:	bf00      	nop
 801775c:	46bd      	mov	sp, r7
 801775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017762:	4770      	bx	lr
 8017764:	20027561 	.word	0x20027561

08017768 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	60f8      	str	r0, [r7, #12]
 8017770:	60b9      	str	r1, [r7, #8]
 8017772:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00a      	beq.n	8017790 <tcp_route+0x28>
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7a1b      	ldrb	r3, [r3, #8]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d006      	beq.n	8017790 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7a1b      	ldrb	r3, [r3, #8]
 8017786:	4618      	mov	r0, r3
 8017788:	f7fb fb12 	bl	8012db0 <netif_get_by_index>
 801778c:	4603      	mov	r3, r0
 801778e:	e003      	b.n	8017798 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f003 f959 	bl	801aa48 <ip4_route>
 8017796:	4603      	mov	r3, r0
  }
}
 8017798:	4618      	mov	r0, r3
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}

080177a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b087      	sub	sp, #28
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	603b      	str	r3, [r7, #0]
 80177ac:	4613      	mov	r3, r2
 80177ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d105      	bne.n	80177c2 <tcp_create_segment+0x22>
 80177b6:	4b43      	ldr	r3, [pc, #268]	@ (80178c4 <tcp_create_segment+0x124>)
 80177b8:	22a3      	movs	r2, #163	@ 0xa3
 80177ba:	4943      	ldr	r1, [pc, #268]	@ (80178c8 <tcp_create_segment+0x128>)
 80177bc:	4843      	ldr	r0, [pc, #268]	@ (80178cc <tcp_create_segment+0x12c>)
 80177be:	f005 fe6f 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d105      	bne.n	80177d4 <tcp_create_segment+0x34>
 80177c8:	4b3e      	ldr	r3, [pc, #248]	@ (80178c4 <tcp_create_segment+0x124>)
 80177ca:	22a4      	movs	r2, #164	@ 0xa4
 80177cc:	4940      	ldr	r1, [pc, #256]	@ (80178d0 <tcp_create_segment+0x130>)
 80177ce:	483f      	ldr	r0, [pc, #252]	@ (80178cc <tcp_create_segment+0x12c>)
 80177d0:	f005 fe66 	bl	801d4a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80177d8:	009b      	lsls	r3, r3, #2
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	f003 0304 	and.w	r3, r3, #4
 80177e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80177e2:	2003      	movs	r0, #3
 80177e4:	f7fa ff58 	bl	8012698 <memp_malloc>
 80177e8:	6138      	str	r0, [r7, #16]
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d104      	bne.n	80177fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80177f0:	68b8      	ldr	r0, [r7, #8]
 80177f2:	f7fb fe6b 	bl	80134cc <pbuf_free>
    return NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	e060      	b.n	80178bc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017800:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	2200      	movs	r2, #0
 8017806:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	68ba      	ldr	r2, [r7, #8]
 801780c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	891a      	ldrh	r2, [r3, #8]
 8017812:	7dfb      	ldrb	r3, [r7, #23]
 8017814:	b29b      	uxth	r3, r3
 8017816:	429a      	cmp	r2, r3
 8017818:	d205      	bcs.n	8017826 <tcp_create_segment+0x86>
 801781a:	4b2a      	ldr	r3, [pc, #168]	@ (80178c4 <tcp_create_segment+0x124>)
 801781c:	22b0      	movs	r2, #176	@ 0xb0
 801781e:	492d      	ldr	r1, [pc, #180]	@ (80178d4 <tcp_create_segment+0x134>)
 8017820:	482a      	ldr	r0, [pc, #168]	@ (80178cc <tcp_create_segment+0x12c>)
 8017822:	f005 fe3d 	bl	801d4a0 <iprintf>
  seg->len = p->tot_len - optlen;
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	891a      	ldrh	r2, [r3, #8]
 801782a:	7dfb      	ldrb	r3, [r7, #23]
 801782c:	b29b      	uxth	r3, r3
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	b29a      	uxth	r2, r3
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017836:	2114      	movs	r1, #20
 8017838:	68b8      	ldr	r0, [r7, #8]
 801783a:	f7fb fdb1 	bl	80133a0 <pbuf_add_header>
 801783e:	4603      	mov	r3, r0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d004      	beq.n	801784e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017844:	6938      	ldr	r0, [r7, #16]
 8017846:	f7fd f8d2 	bl	80149ee <tcp_seg_free>
    return NULL;
 801784a:	2300      	movs	r3, #0
 801784c:	e036      	b.n	80178bc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	685a      	ldr	r2, [r3, #4]
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	8ada      	ldrh	r2, [r3, #22]
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	68dc      	ldr	r4, [r3, #12]
 8017860:	4610      	mov	r0, r2
 8017862:	f7fa fa45 	bl	8011cf0 <lwip_htons>
 8017866:	4603      	mov	r3, r0
 8017868:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	8b1a      	ldrh	r2, [r3, #24]
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	68dc      	ldr	r4, [r3, #12]
 8017872:	4610      	mov	r0, r2
 8017874:	f7fa fa3c 	bl	8011cf0 <lwip_htons>
 8017878:	4603      	mov	r3, r0
 801787a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	68dc      	ldr	r4, [r3, #12]
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	f7fa fa4b 	bl	8011d1c <lwip_htonl>
 8017886:	4603      	mov	r3, r0
 8017888:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801788a:	7dfb      	ldrb	r3, [r7, #23]
 801788c:	089b      	lsrs	r3, r3, #2
 801788e:	b2db      	uxtb	r3, r3
 8017890:	3305      	adds	r3, #5
 8017892:	b29b      	uxth	r3, r3
 8017894:	031b      	lsls	r3, r3, #12
 8017896:	b29a      	uxth	r2, r3
 8017898:	79fb      	ldrb	r3, [r7, #7]
 801789a:	b29b      	uxth	r3, r3
 801789c:	4313      	orrs	r3, r2
 801789e:	b29a      	uxth	r2, r3
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	68dc      	ldr	r4, [r3, #12]
 80178a4:	4610      	mov	r0, r2
 80178a6:	f7fa fa23 	bl	8011cf0 <lwip_htons>
 80178aa:	4603      	mov	r3, r0
 80178ac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	68db      	ldr	r3, [r3, #12]
 80178b2:	2200      	movs	r2, #0
 80178b4:	749a      	strb	r2, [r3, #18]
 80178b6:	2200      	movs	r2, #0
 80178b8:	74da      	strb	r2, [r3, #19]
  return seg;
 80178ba:	693b      	ldr	r3, [r7, #16]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	371c      	adds	r7, #28
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd90      	pop	{r4, r7, pc}
 80178c4:	0801fdfc 	.word	0x0801fdfc
 80178c8:	0801fe30 	.word	0x0801fe30
 80178cc:	0801fe50 	.word	0x0801fe50
 80178d0:	0801fe78 	.word	0x0801fe78
 80178d4:	0801fe9c 	.word	0x0801fe9c

080178d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80178d8:	b590      	push	{r4, r7, lr}
 80178da:	b08b      	sub	sp, #44	@ 0x2c
 80178dc:	af02      	add	r7, sp, #8
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	460b      	mov	r3, r1
 80178e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80178e4:	2300      	movs	r3, #0
 80178e6:	61fb      	str	r3, [r7, #28]
 80178e8:	2300      	movs	r3, #0
 80178ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80178ec:	2300      	movs	r3, #0
 80178ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d106      	bne.n	8017904 <tcp_split_unsent_seg+0x2c>
 80178f6:	4b95      	ldr	r3, [pc, #596]	@ (8017b4c <tcp_split_unsent_seg+0x274>)
 80178f8:	f240 324b 	movw	r2, #843	@ 0x34b
 80178fc:	4994      	ldr	r1, [pc, #592]	@ (8017b50 <tcp_split_unsent_seg+0x278>)
 80178fe:	4895      	ldr	r0, [pc, #596]	@ (8017b54 <tcp_split_unsent_seg+0x27c>)
 8017900:	f005 fdce 	bl	801d4a0 <iprintf>

  useg = pcb->unsent;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017908:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801790a:	697b      	ldr	r3, [r7, #20]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d102      	bne.n	8017916 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017910:	f04f 33ff 	mov.w	r3, #4294967295
 8017914:	e116      	b.n	8017b44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017916:	887b      	ldrh	r3, [r7, #2]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d109      	bne.n	8017930 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801791c:	4b8b      	ldr	r3, [pc, #556]	@ (8017b4c <tcp_split_unsent_seg+0x274>)
 801791e:	f240 3253 	movw	r2, #851	@ 0x353
 8017922:	498d      	ldr	r1, [pc, #564]	@ (8017b58 <tcp_split_unsent_seg+0x280>)
 8017924:	488b      	ldr	r0, [pc, #556]	@ (8017b54 <tcp_split_unsent_seg+0x27c>)
 8017926:	f005 fdbb 	bl	801d4a0 <iprintf>
    return ERR_VAL;
 801792a:	f06f 0305 	mvn.w	r3, #5
 801792e:	e109      	b.n	8017b44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	891b      	ldrh	r3, [r3, #8]
 8017934:	887a      	ldrh	r2, [r7, #2]
 8017936:	429a      	cmp	r2, r3
 8017938:	d301      	bcc.n	801793e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801793a:	2300      	movs	r3, #0
 801793c:	e102      	b.n	8017b44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017942:	887a      	ldrh	r2, [r7, #2]
 8017944:	429a      	cmp	r2, r3
 8017946:	d906      	bls.n	8017956 <tcp_split_unsent_seg+0x7e>
 8017948:	4b80      	ldr	r3, [pc, #512]	@ (8017b4c <tcp_split_unsent_seg+0x274>)
 801794a:	f240 325b 	movw	r2, #859	@ 0x35b
 801794e:	4983      	ldr	r1, [pc, #524]	@ (8017b5c <tcp_split_unsent_seg+0x284>)
 8017950:	4880      	ldr	r0, [pc, #512]	@ (8017b54 <tcp_split_unsent_seg+0x27c>)
 8017952:	f005 fda5 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	891b      	ldrh	r3, [r3, #8]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d106      	bne.n	801796c <tcp_split_unsent_seg+0x94>
 801795e:	4b7b      	ldr	r3, [pc, #492]	@ (8017b4c <tcp_split_unsent_seg+0x274>)
 8017960:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8017964:	497e      	ldr	r1, [pc, #504]	@ (8017b60 <tcp_split_unsent_seg+0x288>)
 8017966:	487b      	ldr	r0, [pc, #492]	@ (8017b54 <tcp_split_unsent_seg+0x27c>)
 8017968:	f005 fd9a 	bl	801d4a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	7a9b      	ldrb	r3, [r3, #10]
 8017970:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017972:	7bfb      	ldrb	r3, [r7, #15]
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	b2db      	uxtb	r3, r3
 8017978:	f003 0304 	and.w	r3, r3, #4
 801797c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	891a      	ldrh	r2, [r3, #8]
 8017982:	887b      	ldrh	r3, [r7, #2]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017988:	7bbb      	ldrb	r3, [r7, #14]
 801798a:	b29a      	uxth	r2, r3
 801798c:	89bb      	ldrh	r3, [r7, #12]
 801798e:	4413      	add	r3, r2
 8017990:	b29b      	uxth	r3, r3
 8017992:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017996:	4619      	mov	r1, r3
 8017998:	2036      	movs	r0, #54	@ 0x36
 801799a:	f7fb fab3 	bl	8012f04 <pbuf_alloc>
 801799e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80179a0:	693b      	ldr	r3, [r7, #16]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	f000 80b7 	beq.w	8017b16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	891a      	ldrh	r2, [r3, #8]
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	891b      	ldrh	r3, [r3, #8]
 80179b2:	1ad3      	subs	r3, r2, r3
 80179b4:	b29a      	uxth	r2, r3
 80179b6:	887b      	ldrh	r3, [r7, #2]
 80179b8:	4413      	add	r3, r2
 80179ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	6858      	ldr	r0, [r3, #4]
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	685a      	ldr	r2, [r3, #4]
 80179c4:	7bbb      	ldrb	r3, [r7, #14]
 80179c6:	18d1      	adds	r1, r2, r3
 80179c8:	897b      	ldrh	r3, [r7, #10]
 80179ca:	89ba      	ldrh	r2, [r7, #12]
 80179cc:	f7fb ff84 	bl	80138d8 <pbuf_copy_partial>
 80179d0:	4603      	mov	r3, r0
 80179d2:	461a      	mov	r2, r3
 80179d4:	89bb      	ldrh	r3, [r7, #12]
 80179d6:	4293      	cmp	r3, r2
 80179d8:	f040 809f 	bne.w	8017b1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	68db      	ldr	r3, [r3, #12]
 80179e0:	899b      	ldrh	r3, [r3, #12]
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	4618      	mov	r0, r3
 80179e6:	f7fa f983 	bl	8011cf0 <lwip_htons>
 80179ea:	4603      	mov	r3, r0
 80179ec:	b2db      	uxtb	r3, r3
 80179ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80179f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80179f4:	2300      	movs	r3, #0
 80179f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80179f8:	7efb      	ldrb	r3, [r7, #27]
 80179fa:	f003 0308 	and.w	r3, r3, #8
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d007      	beq.n	8017a12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017a02:	7efb      	ldrb	r3, [r7, #27]
 8017a04:	f023 0308 	bic.w	r3, r3, #8
 8017a08:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017a0a:	7ebb      	ldrb	r3, [r7, #26]
 8017a0c:	f043 0308 	orr.w	r3, r3, #8
 8017a10:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017a12:	7efb      	ldrb	r3, [r7, #27]
 8017a14:	f003 0301 	and.w	r3, r3, #1
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d007      	beq.n	8017a2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017a1c:	7efb      	ldrb	r3, [r7, #27]
 8017a1e:	f023 0301 	bic.w	r3, r3, #1
 8017a22:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017a24:	7ebb      	ldrb	r3, [r7, #26]
 8017a26:	f043 0301 	orr.w	r3, r3, #1
 8017a2a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	68db      	ldr	r3, [r3, #12]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fa f972 	bl	8011d1c <lwip_htonl>
 8017a38:	4602      	mov	r2, r0
 8017a3a:	887b      	ldrh	r3, [r7, #2]
 8017a3c:	18d1      	adds	r1, r2, r3
 8017a3e:	7eba      	ldrb	r2, [r7, #26]
 8017a40:	7bfb      	ldrb	r3, [r7, #15]
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	460b      	mov	r3, r1
 8017a46:	6939      	ldr	r1, [r7, #16]
 8017a48:	6878      	ldr	r0, [r7, #4]
 8017a4a:	f7ff fea9 	bl	80177a0 <tcp_create_segment>
 8017a4e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017a50:	69fb      	ldr	r3, [r7, #28]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d063      	beq.n	8017b1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	685b      	ldr	r3, [r3, #4]
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7fb fdc4 	bl	80135e8 <pbuf_clen>
 8017a60:	4603      	mov	r3, r0
 8017a62:	461a      	mov	r2, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a6a:	1a9b      	subs	r3, r3, r2
 8017a6c:	b29a      	uxth	r2, r3
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	6858      	ldr	r0, [r3, #4]
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	891a      	ldrh	r2, [r3, #8]
 8017a7e:	89bb      	ldrh	r3, [r7, #12]
 8017a80:	1ad3      	subs	r3, r2, r3
 8017a82:	b29b      	uxth	r3, r3
 8017a84:	4619      	mov	r1, r3
 8017a86:	f7fb fb9b 	bl	80131c0 <pbuf_realloc>
  useg->len -= remainder;
 8017a8a:	697b      	ldr	r3, [r7, #20]
 8017a8c:	891a      	ldrh	r2, [r3, #8]
 8017a8e:	89bb      	ldrh	r3, [r7, #12]
 8017a90:	1ad3      	subs	r3, r2, r3
 8017a92:	b29a      	uxth	r2, r3
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	68db      	ldr	r3, [r3, #12]
 8017a9c:	899b      	ldrh	r3, [r3, #12]
 8017a9e:	b29c      	uxth	r4, r3
 8017aa0:	7efb      	ldrb	r3, [r7, #27]
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7fa f923 	bl	8011cf0 <lwip_htons>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	461a      	mov	r2, r3
 8017aae:	697b      	ldr	r3, [r7, #20]
 8017ab0:	68db      	ldr	r3, [r3, #12]
 8017ab2:	4322      	orrs	r2, r4
 8017ab4:	b292      	uxth	r2, r2
 8017ab6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7fb fd93 	bl	80135e8 <pbuf_clen>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017acc:	4413      	add	r3, r2
 8017ace:	b29a      	uxth	r2, r3
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	4618      	mov	r0, r3
 8017adc:	f7fb fd84 	bl	80135e8 <pbuf_clen>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017aea:	4413      	add	r3, r2
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	681a      	ldr	r2, [r3, #0]
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017afc:	697b      	ldr	r3, [r7, #20]
 8017afe:	69fa      	ldr	r2, [r7, #28]
 8017b00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d103      	bne.n	8017b12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017b12:	2300      	movs	r3, #0
 8017b14:	e016      	b.n	8017b44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017b16:	bf00      	nop
 8017b18:	e002      	b.n	8017b20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b1a:	bf00      	nop
 8017b1c:	e000      	b.n	8017b20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d006      	beq.n	8017b34 <tcp_split_unsent_seg+0x25c>
 8017b26:	4b09      	ldr	r3, [pc, #36]	@ (8017b4c <tcp_split_unsent_seg+0x274>)
 8017b28:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8017b2c:	490d      	ldr	r1, [pc, #52]	@ (8017b64 <tcp_split_unsent_seg+0x28c>)
 8017b2e:	4809      	ldr	r0, [pc, #36]	@ (8017b54 <tcp_split_unsent_seg+0x27c>)
 8017b30:	f005 fcb6 	bl	801d4a0 <iprintf>
  if (p != NULL) {
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d002      	beq.n	8017b40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017b3a:	6938      	ldr	r0, [r7, #16]
 8017b3c:	f7fb fcc6 	bl	80134cc <pbuf_free>
  }

  return ERR_MEM;
 8017b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3724      	adds	r7, #36	@ 0x24
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd90      	pop	{r4, r7, pc}
 8017b4c:	0801fdfc 	.word	0x0801fdfc
 8017b50:	08020190 	.word	0x08020190
 8017b54:	0801fe50 	.word	0x0801fe50
 8017b58:	080201b4 	.word	0x080201b4
 8017b5c:	080201d8 	.word	0x080201d8
 8017b60:	080201e8 	.word	0x080201e8
 8017b64:	080201f8 	.word	0x080201f8

08017b68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017b68:	b590      	push	{r4, r7, lr}
 8017b6a:	b085      	sub	sp, #20
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d106      	bne.n	8017b84 <tcp_send_fin+0x1c>
 8017b76:	4b21      	ldr	r3, [pc, #132]	@ (8017bfc <tcp_send_fin+0x94>)
 8017b78:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8017b7c:	4920      	ldr	r1, [pc, #128]	@ (8017c00 <tcp_send_fin+0x98>)
 8017b7e:	4821      	ldr	r0, [pc, #132]	@ (8017c04 <tcp_send_fin+0x9c>)
 8017b80:	f005 fc8e 	bl	801d4a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d02e      	beq.n	8017bea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b90:	60fb      	str	r3, [r7, #12]
 8017b92:	e002      	b.n	8017b9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d1f8      	bne.n	8017b94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	68db      	ldr	r3, [r3, #12]
 8017ba6:	899b      	ldrh	r3, [r3, #12]
 8017ba8:	b29b      	uxth	r3, r3
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7fa f8a0 	bl	8011cf0 <lwip_htons>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	b2db      	uxtb	r3, r3
 8017bb4:	f003 0307 	and.w	r3, r3, #7
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d116      	bne.n	8017bea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	68db      	ldr	r3, [r3, #12]
 8017bc0:	899b      	ldrh	r3, [r3, #12]
 8017bc2:	b29c      	uxth	r4, r3
 8017bc4:	2001      	movs	r0, #1
 8017bc6:	f7fa f893 	bl	8011cf0 <lwip_htons>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	461a      	mov	r2, r3
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	68db      	ldr	r3, [r3, #12]
 8017bd2:	4322      	orrs	r2, r4
 8017bd4:	b292      	uxth	r2, r2
 8017bd6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	8b5b      	ldrh	r3, [r3, #26]
 8017bdc:	f043 0320 	orr.w	r3, r3, #32
 8017be0:	b29a      	uxth	r2, r3
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017be6:	2300      	movs	r3, #0
 8017be8:	e004      	b.n	8017bf4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017bea:	2101      	movs	r1, #1
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f000 f80b 	bl	8017c08 <tcp_enqueue_flags>
 8017bf2:	4603      	mov	r3, r0
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3714      	adds	r7, #20
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd90      	pop	{r4, r7, pc}
 8017bfc:	0801fdfc 	.word	0x0801fdfc
 8017c00:	08020204 	.word	0x08020204
 8017c04:	0801fe50 	.word	0x0801fe50

08017c08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b08a      	sub	sp, #40	@ 0x28
 8017c0c:	af02      	add	r7, sp, #8
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	460b      	mov	r3, r1
 8017c12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017c1c:	78fb      	ldrb	r3, [r7, #3]
 8017c1e:	f003 0303 	and.w	r3, r3, #3
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d106      	bne.n	8017c34 <tcp_enqueue_flags+0x2c>
 8017c26:	4b67      	ldr	r3, [pc, #412]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017c28:	f240 4211 	movw	r2, #1041	@ 0x411
 8017c2c:	4966      	ldr	r1, [pc, #408]	@ (8017dc8 <tcp_enqueue_flags+0x1c0>)
 8017c2e:	4867      	ldr	r0, [pc, #412]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017c30:	f005 fc36 	bl	801d4a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d106      	bne.n	8017c48 <tcp_enqueue_flags+0x40>
 8017c3a:	4b62      	ldr	r3, [pc, #392]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017c3c:	f240 4213 	movw	r2, #1043	@ 0x413
 8017c40:	4963      	ldr	r1, [pc, #396]	@ (8017dd0 <tcp_enqueue_flags+0x1c8>)
 8017c42:	4862      	ldr	r0, [pc, #392]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017c44:	f005 fc2c 	bl	801d4a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017c48:	78fb      	ldrb	r3, [r7, #3]
 8017c4a:	f003 0302 	and.w	r3, r3, #2
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d001      	beq.n	8017c56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017c52:	2301      	movs	r3, #1
 8017c54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017c56:	7ffb      	ldrb	r3, [r7, #31]
 8017c58:	009b      	lsls	r3, r3, #2
 8017c5a:	b2db      	uxtb	r3, r3
 8017c5c:	f003 0304 	and.w	r3, r3, #4
 8017c60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017c62:	7dfb      	ldrb	r3, [r7, #23]
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	2036      	movs	r0, #54	@ 0x36
 8017c6e:	f7fb f949 	bl	8012f04 <pbuf_alloc>
 8017c72:	6138      	str	r0, [r7, #16]
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d109      	bne.n	8017c8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	8b5b      	ldrh	r3, [r3, #26]
 8017c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017c88:	f04f 33ff 	mov.w	r3, #4294967295
 8017c8c:	e095      	b.n	8017dba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	895a      	ldrh	r2, [r3, #10]
 8017c92:	7dfb      	ldrb	r3, [r7, #23]
 8017c94:	b29b      	uxth	r3, r3
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d206      	bcs.n	8017ca8 <tcp_enqueue_flags+0xa0>
 8017c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017c9c:	f240 4239 	movw	r2, #1081	@ 0x439
 8017ca0:	494c      	ldr	r1, [pc, #304]	@ (8017dd4 <tcp_enqueue_flags+0x1cc>)
 8017ca2:	484a      	ldr	r0, [pc, #296]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017ca4:	f005 fbfc 	bl	801d4a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8017cac:	78fa      	ldrb	r2, [r7, #3]
 8017cae:	7ffb      	ldrb	r3, [r7, #31]
 8017cb0:	9300      	str	r3, [sp, #0]
 8017cb2:	460b      	mov	r3, r1
 8017cb4:	6939      	ldr	r1, [r7, #16]
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7ff fd72 	bl	80177a0 <tcp_create_segment>
 8017cbc:	60f8      	str	r0, [r7, #12]
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d109      	bne.n	8017cd8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	8b5b      	ldrh	r3, [r3, #26]
 8017cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd6:	e070      	b.n	8017dba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	f003 0303 	and.w	r3, r3, #3
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d006      	beq.n	8017cf2 <tcp_enqueue_flags+0xea>
 8017ce4:	4b37      	ldr	r3, [pc, #220]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017ce6:	f240 4242 	movw	r2, #1090	@ 0x442
 8017cea:	493b      	ldr	r1, [pc, #236]	@ (8017dd8 <tcp_enqueue_flags+0x1d0>)
 8017cec:	4837      	ldr	r0, [pc, #220]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017cee:	f005 fbd7 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	891b      	ldrh	r3, [r3, #8]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d006      	beq.n	8017d08 <tcp_enqueue_flags+0x100>
 8017cfa:	4b32      	ldr	r3, [pc, #200]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017cfc:	f240 4243 	movw	r2, #1091	@ 0x443
 8017d00:	4936      	ldr	r1, [pc, #216]	@ (8017ddc <tcp_enqueue_flags+0x1d4>)
 8017d02:	4832      	ldr	r0, [pc, #200]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017d04:	f005 fbcc 	bl	801d4a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d103      	bne.n	8017d18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	68fa      	ldr	r2, [r7, #12]
 8017d14:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017d16:	e00d      	b.n	8017d34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d1c:	61bb      	str	r3, [r7, #24]
 8017d1e:	e002      	b.n	8017d26 <tcp_enqueue_flags+0x11e>
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	61bb      	str	r3, [r7, #24]
 8017d26:	69bb      	ldr	r3, [r7, #24]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d1f8      	bne.n	8017d20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017d2e:	69bb      	ldr	r3, [r7, #24]
 8017d30:	68fa      	ldr	r2, [r7, #12]
 8017d32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	2200      	movs	r2, #0
 8017d38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017d3c:	78fb      	ldrb	r3, [r7, #3]
 8017d3e:	f003 0302 	and.w	r3, r3, #2
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d104      	bne.n	8017d50 <tcp_enqueue_flags+0x148>
 8017d46:	78fb      	ldrb	r3, [r7, #3]
 8017d48:	f003 0301 	and.w	r3, r3, #1
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d004      	beq.n	8017d5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017d54:	1c5a      	adds	r2, r3, #1
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017d5a:	78fb      	ldrb	r3, [r7, #3]
 8017d5c:	f003 0301 	and.w	r3, r3, #1
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d006      	beq.n	8017d72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	8b5b      	ldrh	r3, [r3, #26]
 8017d68:	f043 0320 	orr.w	r3, r3, #32
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fb fc36 	bl	80135e8 <pbuf_clen>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	461a      	mov	r2, r3
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017d86:	4413      	add	r3, r2
 8017d88:	b29a      	uxth	r2, r3
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d00e      	beq.n	8017db8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d10a      	bne.n	8017db8 <tcp_enqueue_flags+0x1b0>
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d106      	bne.n	8017db8 <tcp_enqueue_flags+0x1b0>
 8017daa:	4b06      	ldr	r3, [pc, #24]	@ (8017dc4 <tcp_enqueue_flags+0x1bc>)
 8017dac:	f240 4265 	movw	r2, #1125	@ 0x465
 8017db0:	490b      	ldr	r1, [pc, #44]	@ (8017de0 <tcp_enqueue_flags+0x1d8>)
 8017db2:	4806      	ldr	r0, [pc, #24]	@ (8017dcc <tcp_enqueue_flags+0x1c4>)
 8017db4:	f005 fb74 	bl	801d4a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017db8:	2300      	movs	r3, #0
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3720      	adds	r7, #32
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd80      	pop	{r7, pc}
 8017dc2:	bf00      	nop
 8017dc4:	0801fdfc 	.word	0x0801fdfc
 8017dc8:	08020220 	.word	0x08020220
 8017dcc:	0801fe50 	.word	0x0801fe50
 8017dd0:	08020278 	.word	0x08020278
 8017dd4:	08020298 	.word	0x08020298
 8017dd8:	080202d4 	.word	0x080202d4
 8017ddc:	080202ec 	.word	0x080202ec
 8017de0:	08020318 	.word	0x08020318

08017de4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017de4:	b5b0      	push	{r4, r5, r7, lr}
 8017de6:	b08a      	sub	sp, #40	@ 0x28
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d106      	bne.n	8017e00 <tcp_output+0x1c>
 8017df2:	4b8a      	ldr	r3, [pc, #552]	@ (801801c <tcp_output+0x238>)
 8017df4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8017df8:	4989      	ldr	r1, [pc, #548]	@ (8018020 <tcp_output+0x23c>)
 8017dfa:	488a      	ldr	r0, [pc, #552]	@ (8018024 <tcp_output+0x240>)
 8017dfc:	f005 fb50 	bl	801d4a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	7d1b      	ldrb	r3, [r3, #20]
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	d106      	bne.n	8017e16 <tcp_output+0x32>
 8017e08:	4b84      	ldr	r3, [pc, #528]	@ (801801c <tcp_output+0x238>)
 8017e0a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8017e0e:	4986      	ldr	r1, [pc, #536]	@ (8018028 <tcp_output+0x244>)
 8017e10:	4884      	ldr	r0, [pc, #528]	@ (8018024 <tcp_output+0x240>)
 8017e12:	f005 fb45 	bl	801d4a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017e16:	4b85      	ldr	r3, [pc, #532]	@ (801802c <tcp_output+0x248>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	687a      	ldr	r2, [r7, #4]
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d101      	bne.n	8017e24 <tcp_output+0x40>
    return ERR_OK;
 8017e20:	2300      	movs	r3, #0
 8017e22:	e1ce      	b.n	80181c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017e30:	4293      	cmp	r3, r2
 8017e32:	bf28      	it	cs
 8017e34:	4613      	movcs	r3, r2
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8017e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d10b      	bne.n	8017e5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	8b5b      	ldrh	r3, [r3, #26]
 8017e4a:	f003 0302 	and.w	r3, r3, #2
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	f000 81aa 	beq.w	80181a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f000 fdcb 	bl	80189f0 <tcp_send_empty_ack>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	e1b1      	b.n	80181c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017e5e:	6879      	ldr	r1, [r7, #4]
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	3304      	adds	r3, #4
 8017e64:	461a      	mov	r2, r3
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f7ff fc7e 	bl	8017768 <tcp_route>
 8017e6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d102      	bne.n	8017e7a <tcp_output+0x96>
    return ERR_RTE;
 8017e74:	f06f 0303 	mvn.w	r3, #3
 8017e78:	e1a3      	b.n	80181c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d003      	beq.n	8017e88 <tcp_output+0xa4>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d111      	bne.n	8017eac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d002      	beq.n	8017e94 <tcp_output+0xb0>
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	3304      	adds	r3, #4
 8017e92:	e000      	b.n	8017e96 <tcp_output+0xb2>
 8017e94:	2300      	movs	r3, #0
 8017e96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d102      	bne.n	8017ea4 <tcp_output+0xc0>
      return ERR_RTE;
 8017e9e:	f06f 0303 	mvn.w	r3, #3
 8017ea2:	e18e      	b.n	80181c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eae:	68db      	ldr	r3, [r3, #12]
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f7f9 ff32 	bl	8011d1c <lwip_htonl>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ebe:	1ad3      	subs	r3, r2, r3
 8017ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ec2:	8912      	ldrh	r2, [r2, #8]
 8017ec4:	4413      	add	r3, r2
 8017ec6:	69ba      	ldr	r2, [r7, #24]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d227      	bcs.n	8017f1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017ed2:	461a      	mov	r2, r3
 8017ed4:	69bb      	ldr	r3, [r7, #24]
 8017ed6:	4293      	cmp	r3, r2
 8017ed8:	d114      	bne.n	8017f04 <tcp_output+0x120>
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d110      	bne.n	8017f04 <tcp_output+0x120>
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d10b      	bne.n	8017f04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2200      	movs	r2, #0
 8017ef0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2201      	movs	r2, #1
 8017ef8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2200      	movs	r2, #0
 8017f00:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	8b5b      	ldrh	r3, [r3, #26]
 8017f08:	f003 0302 	and.w	r3, r3, #2
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f000 814d 	beq.w	80181ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f000 fd6c 	bl	80189f0 <tcp_send_empty_ack>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	e152      	b.n	80181c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2200      	movs	r2, #0
 8017f20:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017f2a:	6a3b      	ldr	r3, [r7, #32]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	f000 811c 	beq.w	801816a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017f32:	e002      	b.n	8017f3a <tcp_output+0x156>
 8017f34:	6a3b      	ldr	r3, [r7, #32]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	623b      	str	r3, [r7, #32]
 8017f3a:	6a3b      	ldr	r3, [r7, #32]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d1f8      	bne.n	8017f34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017f42:	e112      	b.n	801816a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	899b      	ldrh	r3, [r3, #12]
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f7f9 fecf 	bl	8011cf0 <lwip_htons>
 8017f52:	4603      	mov	r3, r0
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	f003 0304 	and.w	r3, r3, #4
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d006      	beq.n	8017f6c <tcp_output+0x188>
 8017f5e:	4b2f      	ldr	r3, [pc, #188]	@ (801801c <tcp_output+0x238>)
 8017f60:	f240 5236 	movw	r2, #1334	@ 0x536
 8017f64:	4932      	ldr	r1, [pc, #200]	@ (8018030 <tcp_output+0x24c>)
 8017f66:	482f      	ldr	r0, [pc, #188]	@ (8018024 <tcp_output+0x240>)
 8017f68:	f005 fa9a 	bl	801d4a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d01f      	beq.n	8017fb4 <tcp_output+0x1d0>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	8b5b      	ldrh	r3, [r3, #26]
 8017f78:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d119      	bne.n	8017fb4 <tcp_output+0x1d0>
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d00b      	beq.n	8017fa0 <tcp_output+0x1bc>
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d110      	bne.n	8017fb4 <tcp_output+0x1d0>
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f96:	891a      	ldrh	r2, [r3, #8]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d209      	bcs.n	8017fb4 <tcp_output+0x1d0>
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d004      	beq.n	8017fb4 <tcp_output+0x1d0>
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017fb0:	2b08      	cmp	r3, #8
 8017fb2:	d901      	bls.n	8017fb8 <tcp_output+0x1d4>
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	e000      	b.n	8017fba <tcp_output+0x1d6>
 8017fb8:	2300      	movs	r3, #0
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d106      	bne.n	8017fcc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	8b5b      	ldrh	r3, [r3, #26]
 8017fc2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	f000 80e4 	beq.w	8018194 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	7d1b      	ldrb	r3, [r3, #20]
 8017fd0:	2b02      	cmp	r3, #2
 8017fd2:	d00d      	beq.n	8017ff0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd6:	68db      	ldr	r3, [r3, #12]
 8017fd8:	899b      	ldrh	r3, [r3, #12]
 8017fda:	b29c      	uxth	r4, r3
 8017fdc:	2010      	movs	r0, #16
 8017fde:	f7f9 fe87 	bl	8011cf0 <lwip_htons>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	461a      	mov	r2, r3
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe8:	68db      	ldr	r3, [r3, #12]
 8017fea:	4322      	orrs	r2, r4
 8017fec:	b292      	uxth	r2, r2
 8017fee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017ff0:	697a      	ldr	r2, [r7, #20]
 8017ff2:	6879      	ldr	r1, [r7, #4]
 8017ff4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ff6:	f000 f909 	bl	801820c <tcp_output_segment>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d016      	beq.n	8018034 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	8b5b      	ldrh	r3, [r3, #26]
 801800a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801800e:	b29a      	uxth	r2, r3
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	835a      	strh	r2, [r3, #26]
      return err;
 8018014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018018:	e0d3      	b.n	80181c2 <tcp_output+0x3de>
 801801a:	bf00      	nop
 801801c:	0801fdfc 	.word	0x0801fdfc
 8018020:	08020340 	.word	0x08020340
 8018024:	0801fe50 	.word	0x0801fe50
 8018028:	08020358 	.word	0x08020358
 801802c:	20027568 	.word	0x20027568
 8018030:	08020380 	.word	0x08020380
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	7d1b      	ldrb	r3, [r3, #20]
 8018040:	2b02      	cmp	r3, #2
 8018042:	d006      	beq.n	8018052 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	8b5b      	ldrh	r3, [r3, #26]
 8018048:	f023 0303 	bic.w	r3, r3, #3
 801804c:	b29a      	uxth	r2, r3
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018054:	68db      	ldr	r3, [r3, #12]
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	4618      	mov	r0, r3
 801805a:	f7f9 fe5f 	bl	8011d1c <lwip_htonl>
 801805e:	4604      	mov	r4, r0
 8018060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018062:	891b      	ldrh	r3, [r3, #8]
 8018064:	461d      	mov	r5, r3
 8018066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018068:	68db      	ldr	r3, [r3, #12]
 801806a:	899b      	ldrh	r3, [r3, #12]
 801806c:	b29b      	uxth	r3, r3
 801806e:	4618      	mov	r0, r3
 8018070:	f7f9 fe3e 	bl	8011cf0 <lwip_htons>
 8018074:	4603      	mov	r3, r0
 8018076:	b2db      	uxtb	r3, r3
 8018078:	f003 0303 	and.w	r3, r3, #3
 801807c:	2b00      	cmp	r3, #0
 801807e:	d001      	beq.n	8018084 <tcp_output+0x2a0>
 8018080:	2301      	movs	r3, #1
 8018082:	e000      	b.n	8018086 <tcp_output+0x2a2>
 8018084:	2300      	movs	r3, #0
 8018086:	442b      	add	r3, r5
 8018088:	4423      	add	r3, r4
 801808a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	1ad3      	subs	r3, r2, r3
 8018094:	2b00      	cmp	r3, #0
 8018096:	da02      	bge.n	801809e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	68ba      	ldr	r2, [r7, #8]
 801809c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a0:	891b      	ldrh	r3, [r3, #8]
 80180a2:	461c      	mov	r4, r3
 80180a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	899b      	ldrh	r3, [r3, #12]
 80180aa:	b29b      	uxth	r3, r3
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7f9 fe1f 	bl	8011cf0 <lwip_htons>
 80180b2:	4603      	mov	r3, r0
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	f003 0303 	and.w	r3, r3, #3
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d001      	beq.n	80180c2 <tcp_output+0x2de>
 80180be:	2301      	movs	r3, #1
 80180c0:	e000      	b.n	80180c4 <tcp_output+0x2e0>
 80180c2:	2300      	movs	r3, #0
 80180c4:	4423      	add	r3, r4
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d049      	beq.n	801815e <tcp_output+0x37a>
      seg->next = NULL;
 80180ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d105      	bne.n	80180e4 <tcp_output+0x300>
        pcb->unacked = seg;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80180dc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80180de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180e0:	623b      	str	r3, [r7, #32]
 80180e2:	e03f      	b.n	8018164 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80180e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180e6:	68db      	ldr	r3, [r3, #12]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7f9 fe16 	bl	8011d1c <lwip_htonl>
 80180f0:	4604      	mov	r4, r0
 80180f2:	6a3b      	ldr	r3, [r7, #32]
 80180f4:	68db      	ldr	r3, [r3, #12]
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	4618      	mov	r0, r3
 80180fa:	f7f9 fe0f 	bl	8011d1c <lwip_htonl>
 80180fe:	4603      	mov	r3, r0
 8018100:	1ae3      	subs	r3, r4, r3
 8018102:	2b00      	cmp	r3, #0
 8018104:	da24      	bge.n	8018150 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	3370      	adds	r3, #112	@ 0x70
 801810a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801810c:	e002      	b.n	8018114 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018114:	69fb      	ldr	r3, [r7, #28]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d011      	beq.n	8018140 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801811c:	69fb      	ldr	r3, [r7, #28]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	68db      	ldr	r3, [r3, #12]
 8018122:	685b      	ldr	r3, [r3, #4]
 8018124:	4618      	mov	r0, r3
 8018126:	f7f9 fdf9 	bl	8011d1c <lwip_htonl>
 801812a:	4604      	mov	r4, r0
 801812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	4618      	mov	r0, r3
 8018134:	f7f9 fdf2 	bl	8011d1c <lwip_htonl>
 8018138:	4603      	mov	r3, r0
 801813a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801813c:	2b00      	cmp	r3, #0
 801813e:	dbe6      	blt.n	801810e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018140:	69fb      	ldr	r3, [r7, #28]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018146:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018148:	69fb      	ldr	r3, [r7, #28]
 801814a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801814c:	601a      	str	r2, [r3, #0]
 801814e:	e009      	b.n	8018164 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018150:	6a3b      	ldr	r3, [r7, #32]
 8018152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018154:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018156:	6a3b      	ldr	r3, [r7, #32]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	623b      	str	r3, [r7, #32]
 801815c:	e002      	b.n	8018164 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801815e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018160:	f7fc fc45 	bl	80149ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018168:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801816c:	2b00      	cmp	r3, #0
 801816e:	d012      	beq.n	8018196 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018172:	68db      	ldr	r3, [r3, #12]
 8018174:	685b      	ldr	r3, [r3, #4]
 8018176:	4618      	mov	r0, r3
 8018178:	f7f9 fdd0 	bl	8011d1c <lwip_htonl>
 801817c:	4602      	mov	r2, r0
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018182:	1ad3      	subs	r3, r2, r3
 8018184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018186:	8912      	ldrh	r2, [r2, #8]
 8018188:	4413      	add	r3, r2
  while (seg != NULL &&
 801818a:	69ba      	ldr	r2, [r7, #24]
 801818c:	429a      	cmp	r2, r3
 801818e:	f4bf aed9 	bcs.w	8017f44 <tcp_output+0x160>
 8018192:	e000      	b.n	8018196 <tcp_output+0x3b2>
      break;
 8018194:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801819a:	2b00      	cmp	r3, #0
 801819c:	d108      	bne.n	80181b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	2200      	movs	r2, #0
 80181a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80181a6:	e004      	b.n	80181b2 <tcp_output+0x3ce>
    goto output_done;
 80181a8:	bf00      	nop
 80181aa:	e002      	b.n	80181b2 <tcp_output+0x3ce>
    goto output_done;
 80181ac:	bf00      	nop
 80181ae:	e000      	b.n	80181b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80181b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	8b5b      	ldrh	r3, [r3, #26]
 80181b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80181ba:	b29a      	uxth	r2, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80181c0:	2300      	movs	r3, #0
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3728      	adds	r7, #40	@ 0x28
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bdb0      	pop	{r4, r5, r7, pc}
 80181ca:	bf00      	nop

080181cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d106      	bne.n	80181e8 <tcp_output_segment_busy+0x1c>
 80181da:	4b09      	ldr	r3, [pc, #36]	@ (8018200 <tcp_output_segment_busy+0x34>)
 80181dc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80181e0:	4908      	ldr	r1, [pc, #32]	@ (8018204 <tcp_output_segment_busy+0x38>)
 80181e2:	4809      	ldr	r0, [pc, #36]	@ (8018208 <tcp_output_segment_busy+0x3c>)
 80181e4:	f005 f95c 	bl	801d4a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	7b9b      	ldrb	r3, [r3, #14]
 80181ee:	2b01      	cmp	r3, #1
 80181f0:	d001      	beq.n	80181f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80181f2:	2301      	movs	r3, #1
 80181f4:	e000      	b.n	80181f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80181f6:	2300      	movs	r3, #0
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	3708      	adds	r7, #8
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	0801fdfc 	.word	0x0801fdfc
 8018204:	08020398 	.word	0x08020398
 8018208:	0801fe50 	.word	0x0801fe50

0801820c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801820c:	b5b0      	push	{r4, r5, r7, lr}
 801820e:	b08c      	sub	sp, #48	@ 0x30
 8018210:	af04      	add	r7, sp, #16
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d106      	bne.n	801822c <tcp_output_segment+0x20>
 801821e:	4b64      	ldr	r3, [pc, #400]	@ (80183b0 <tcp_output_segment+0x1a4>)
 8018220:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018224:	4963      	ldr	r1, [pc, #396]	@ (80183b4 <tcp_output_segment+0x1a8>)
 8018226:	4864      	ldr	r0, [pc, #400]	@ (80183b8 <tcp_output_segment+0x1ac>)
 8018228:	f005 f93a 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d106      	bne.n	8018240 <tcp_output_segment+0x34>
 8018232:	4b5f      	ldr	r3, [pc, #380]	@ (80183b0 <tcp_output_segment+0x1a4>)
 8018234:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018238:	4960      	ldr	r1, [pc, #384]	@ (80183bc <tcp_output_segment+0x1b0>)
 801823a:	485f      	ldr	r0, [pc, #380]	@ (80183b8 <tcp_output_segment+0x1ac>)
 801823c:	f005 f930 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d106      	bne.n	8018254 <tcp_output_segment+0x48>
 8018246:	4b5a      	ldr	r3, [pc, #360]	@ (80183b0 <tcp_output_segment+0x1a4>)
 8018248:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801824c:	495c      	ldr	r1, [pc, #368]	@ (80183c0 <tcp_output_segment+0x1b4>)
 801824e:	485a      	ldr	r0, [pc, #360]	@ (80183b8 <tcp_output_segment+0x1ac>)
 8018250:	f005 f926 	bl	801d4a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018254:	68f8      	ldr	r0, [r7, #12]
 8018256:	f7ff ffb9 	bl	80181cc <tcp_output_segment_busy>
 801825a:	4603      	mov	r3, r0
 801825c:	2b00      	cmp	r3, #0
 801825e:	d001      	beq.n	8018264 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018260:	2300      	movs	r3, #0
 8018262:	e0a1      	b.n	80183a8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	68dc      	ldr	r4, [r3, #12]
 801826c:	4610      	mov	r0, r2
 801826e:	f7f9 fd55 	bl	8011d1c <lwip_htonl>
 8018272:	4603      	mov	r3, r0
 8018274:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	68dc      	ldr	r4, [r3, #12]
 801827e:	4610      	mov	r0, r2
 8018280:	f7f9 fd36 	bl	8011cf0 <lwip_htons>
 8018284:	4603      	mov	r3, r0
 8018286:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801828c:	68ba      	ldr	r2, [r7, #8]
 801828e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018290:	441a      	add	r2, r3
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	68db      	ldr	r3, [r3, #12]
 801829a:	3314      	adds	r3, #20
 801829c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	7a9b      	ldrb	r3, [r3, #10]
 80182a2:	f003 0301 	and.w	r3, r3, #1
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d015      	beq.n	80182d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	3304      	adds	r3, #4
 80182ae:	461a      	mov	r2, r3
 80182b0:	6879      	ldr	r1, [r7, #4]
 80182b2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80182b6:	f7fc fe91 	bl	8014fdc <tcp_eff_send_mss_netif>
 80182ba:	4603      	mov	r3, r0
 80182bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80182be:	8b7b      	ldrh	r3, [r7, #26]
 80182c0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80182c4:	4618      	mov	r0, r3
 80182c6:	f7f9 fd29 	bl	8011d1c <lwip_htonl>
 80182ca:	4602      	mov	r2, r0
 80182cc:	69fb      	ldr	r3, [r7, #28]
 80182ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80182d0:	69fb      	ldr	r3, [r7, #28]
 80182d2:	3304      	adds	r3, #4
 80182d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80182dc:	2b00      	cmp	r3, #0
 80182de:	da02      	bge.n	80182e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	2200      	movs	r2, #0
 80182e4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d10c      	bne.n	8018308 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80182ee:	4b35      	ldr	r3, [pc, #212]	@ (80183c4 <tcp_output_segment+0x1b8>)
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f9 fd0d 	bl	8011d1c <lwip_htonl>
 8018302:	4602      	mov	r2, r0
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	68da      	ldr	r2, [r3, #12]
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	685b      	ldr	r3, [r3, #4]
 8018312:	1ad3      	subs	r3, r2, r3
 8018314:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	685b      	ldr	r3, [r3, #4]
 801831a:	8959      	ldrh	r1, [r3, #10]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	685b      	ldr	r3, [r3, #4]
 8018320:	8b3a      	ldrh	r2, [r7, #24]
 8018322:	1a8a      	subs	r2, r1, r2
 8018324:	b292      	uxth	r2, r2
 8018326:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	685b      	ldr	r3, [r3, #4]
 801832c:	8919      	ldrh	r1, [r3, #8]
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	685b      	ldr	r3, [r3, #4]
 8018332:	8b3a      	ldrh	r2, [r7, #24]
 8018334:	1a8a      	subs	r2, r1, r2
 8018336:	b292      	uxth	r2, r2
 8018338:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	685b      	ldr	r3, [r3, #4]
 801833e:	68fa      	ldr	r2, [r7, #12]
 8018340:	68d2      	ldr	r2, [r2, #12]
 8018342:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	2200      	movs	r2, #0
 801834a:	741a      	strb	r2, [r3, #16]
 801834c:	2200      	movs	r2, #0
 801834e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	68da      	ldr	r2, [r3, #12]
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	7a9b      	ldrb	r3, [r3, #10]
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d001      	beq.n	8018364 <tcp_output_segment+0x158>
 8018360:	2318      	movs	r3, #24
 8018362:	e000      	b.n	8018366 <tcp_output_segment+0x15a>
 8018364:	2314      	movs	r3, #20
 8018366:	4413      	add	r3, r2
 8018368:	69fa      	ldr	r2, [r7, #28]
 801836a:	429a      	cmp	r2, r3
 801836c:	d006      	beq.n	801837c <tcp_output_segment+0x170>
 801836e:	4b10      	ldr	r3, [pc, #64]	@ (80183b0 <tcp_output_segment+0x1a4>)
 8018370:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018374:	4914      	ldr	r1, [pc, #80]	@ (80183c8 <tcp_output_segment+0x1bc>)
 8018376:	4810      	ldr	r0, [pc, #64]	@ (80183b8 <tcp_output_segment+0x1ac>)
 8018378:	f005 f892 	bl	801d4a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	6858      	ldr	r0, [r3, #4]
 8018380:	68b9      	ldr	r1, [r7, #8]
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	1d1c      	adds	r4, r3, #4
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	7add      	ldrb	r5, [r3, #11]
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	7a9b      	ldrb	r3, [r3, #10]
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	9202      	str	r2, [sp, #8]
 8018392:	2206      	movs	r2, #6
 8018394:	9201      	str	r2, [sp, #4]
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	462b      	mov	r3, r5
 801839a:	4622      	mov	r2, r4
 801839c:	f002 fd12 	bl	801adc4 <ip4_output_if>
 80183a0:	4603      	mov	r3, r0
 80183a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80183a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3720      	adds	r7, #32
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bdb0      	pop	{r4, r5, r7, pc}
 80183b0:	0801fdfc 	.word	0x0801fdfc
 80183b4:	080203c0 	.word	0x080203c0
 80183b8:	0801fe50 	.word	0x0801fe50
 80183bc:	080203e0 	.word	0x080203e0
 80183c0:	08020400 	.word	0x08020400
 80183c4:	2002751c 	.word	0x2002751c
 80183c8:	08020424 	.word	0x08020424

080183cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80183cc:	b5b0      	push	{r4, r5, r7, lr}
 80183ce:	b084      	sub	sp, #16
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d106      	bne.n	80183e8 <tcp_rexmit_rto_prepare+0x1c>
 80183da:	4b31      	ldr	r3, [pc, #196]	@ (80184a0 <tcp_rexmit_rto_prepare+0xd4>)
 80183dc:	f240 6263 	movw	r2, #1635	@ 0x663
 80183e0:	4930      	ldr	r1, [pc, #192]	@ (80184a4 <tcp_rexmit_rto_prepare+0xd8>)
 80183e2:	4831      	ldr	r0, [pc, #196]	@ (80184a8 <tcp_rexmit_rto_prepare+0xdc>)
 80183e4:	f005 f85c 	bl	801d4a0 <iprintf>

  if (pcb->unacked == NULL) {
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d102      	bne.n	80183f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80183f0:	f06f 0305 	mvn.w	r3, #5
 80183f4:	e050      	b.n	8018498 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183fa:	60fb      	str	r3, [r7, #12]
 80183fc:	e00b      	b.n	8018416 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80183fe:	68f8      	ldr	r0, [r7, #12]
 8018400:	f7ff fee4 	bl	80181cc <tcp_output_segment_busy>
 8018404:	4603      	mov	r3, r0
 8018406:	2b00      	cmp	r3, #0
 8018408:	d002      	beq.n	8018410 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801840a:	f06f 0305 	mvn.w	r3, #5
 801840e:	e043      	b.n	8018498 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	60fb      	str	r3, [r7, #12]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1ef      	bne.n	80183fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	f7ff fed4 	bl	80181cc <tcp_output_segment_busy>
 8018424:	4603      	mov	r3, r0
 8018426:	2b00      	cmp	r3, #0
 8018428:	d002      	beq.n	8018430 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801842a:	f06f 0305 	mvn.w	r3, #5
 801842e:	e033      	b.n	8018498 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2200      	movs	r2, #0
 8018444:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	8b5b      	ldrh	r3, [r3, #26]
 801844a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801844e:	b29a      	uxth	r2, r3
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	68db      	ldr	r3, [r3, #12]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	4618      	mov	r0, r3
 801845c:	f7f9 fc5e 	bl	8011d1c <lwip_htonl>
 8018460:	4604      	mov	r4, r0
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	891b      	ldrh	r3, [r3, #8]
 8018466:	461d      	mov	r5, r3
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	899b      	ldrh	r3, [r3, #12]
 801846e:	b29b      	uxth	r3, r3
 8018470:	4618      	mov	r0, r3
 8018472:	f7f9 fc3d 	bl	8011cf0 <lwip_htons>
 8018476:	4603      	mov	r3, r0
 8018478:	b2db      	uxtb	r3, r3
 801847a:	f003 0303 	and.w	r3, r3, #3
 801847e:	2b00      	cmp	r3, #0
 8018480:	d001      	beq.n	8018486 <tcp_rexmit_rto_prepare+0xba>
 8018482:	2301      	movs	r3, #1
 8018484:	e000      	b.n	8018488 <tcp_rexmit_rto_prepare+0xbc>
 8018486:	2300      	movs	r3, #0
 8018488:	442b      	add	r3, r5
 801848a:	18e2      	adds	r2, r4, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2200      	movs	r2, #0
 8018494:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3710      	adds	r7, #16
 801849c:	46bd      	mov	sp, r7
 801849e:	bdb0      	pop	{r4, r5, r7, pc}
 80184a0:	0801fdfc 	.word	0x0801fdfc
 80184a4:	08020438 	.word	0x08020438
 80184a8:	0801fe50 	.word	0x0801fe50

080184ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d106      	bne.n	80184c8 <tcp_rexmit_rto_commit+0x1c>
 80184ba:	4b0d      	ldr	r3, [pc, #52]	@ (80184f0 <tcp_rexmit_rto_commit+0x44>)
 80184bc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80184c0:	490c      	ldr	r1, [pc, #48]	@ (80184f4 <tcp_rexmit_rto_commit+0x48>)
 80184c2:	480d      	ldr	r0, [pc, #52]	@ (80184f8 <tcp_rexmit_rto_commit+0x4c>)
 80184c4:	f004 ffec 	bl	801d4a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80184ce:	2bff      	cmp	r3, #255	@ 0xff
 80184d0:	d007      	beq.n	80184e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80184d8:	3301      	adds	r3, #1
 80184da:	b2da      	uxtb	r2, r3
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80184e2:	6878      	ldr	r0, [r7, #4]
 80184e4:	f7ff fc7e 	bl	8017de4 <tcp_output>
}
 80184e8:	bf00      	nop
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	0801fdfc 	.word	0x0801fdfc
 80184f4:	0802045c 	.word	0x0802045c
 80184f8:	0801fe50 	.word	0x0801fe50

080184fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b082      	sub	sp, #8
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <tcp_rexmit_rto+0x1c>
 801850a:	4b0a      	ldr	r3, [pc, #40]	@ (8018534 <tcp_rexmit_rto+0x38>)
 801850c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018510:	4909      	ldr	r1, [pc, #36]	@ (8018538 <tcp_rexmit_rto+0x3c>)
 8018512:	480a      	ldr	r0, [pc, #40]	@ (801853c <tcp_rexmit_rto+0x40>)
 8018514:	f004 ffc4 	bl	801d4a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018518:	6878      	ldr	r0, [r7, #4]
 801851a:	f7ff ff57 	bl	80183cc <tcp_rexmit_rto_prepare>
 801851e:	4603      	mov	r3, r0
 8018520:	2b00      	cmp	r3, #0
 8018522:	d102      	bne.n	801852a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	f7ff ffc1 	bl	80184ac <tcp_rexmit_rto_commit>
  }
}
 801852a:	bf00      	nop
 801852c:	3708      	adds	r7, #8
 801852e:	46bd      	mov	sp, r7
 8018530:	bd80      	pop	{r7, pc}
 8018532:	bf00      	nop
 8018534:	0801fdfc 	.word	0x0801fdfc
 8018538:	08020480 	.word	0x08020480
 801853c:	0801fe50 	.word	0x0801fe50

08018540 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018540:	b590      	push	{r4, r7, lr}
 8018542:	b085      	sub	sp, #20
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d106      	bne.n	801855c <tcp_rexmit+0x1c>
 801854e:	4b2f      	ldr	r3, [pc, #188]	@ (801860c <tcp_rexmit+0xcc>)
 8018550:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018554:	492e      	ldr	r1, [pc, #184]	@ (8018610 <tcp_rexmit+0xd0>)
 8018556:	482f      	ldr	r0, [pc, #188]	@ (8018614 <tcp_rexmit+0xd4>)
 8018558:	f004 ffa2 	bl	801d4a0 <iprintf>

  if (pcb->unacked == NULL) {
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018560:	2b00      	cmp	r3, #0
 8018562:	d102      	bne.n	801856a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018564:	f06f 0305 	mvn.w	r3, #5
 8018568:	e04c      	b.n	8018604 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801856e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018570:	68b8      	ldr	r0, [r7, #8]
 8018572:	f7ff fe2b 	bl	80181cc <tcp_output_segment_busy>
 8018576:	4603      	mov	r3, r0
 8018578:	2b00      	cmp	r3, #0
 801857a:	d002      	beq.n	8018582 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801857c:	f06f 0305 	mvn.w	r3, #5
 8018580:	e040      	b.n	8018604 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	681a      	ldr	r2, [r3, #0]
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	336c      	adds	r3, #108	@ 0x6c
 801858e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018590:	e002      	b.n	8018598 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d011      	beq.n	80185c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	68db      	ldr	r3, [r3, #12]
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7f9 fbb7 	bl	8011d1c <lwip_htonl>
 80185ae:	4604      	mov	r4, r0
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	68db      	ldr	r3, [r3, #12]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7f9 fbb0 	bl	8011d1c <lwip_htonl>
 80185bc:	4603      	mov	r3, r0
 80185be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	dbe6      	blt.n	8018592 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	68ba      	ldr	r2, [r7, #8]
 80185d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d103      	bne.n	80185e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2200      	movs	r2, #0
 80185de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80185e8:	2bff      	cmp	r3, #255	@ 0xff
 80185ea:	d007      	beq.n	80185fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80185f2:	3301      	adds	r3, #1
 80185f4:	b2da      	uxtb	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	2200      	movs	r2, #0
 8018600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018602:	2300      	movs	r3, #0
}
 8018604:	4618      	mov	r0, r3
 8018606:	3714      	adds	r7, #20
 8018608:	46bd      	mov	sp, r7
 801860a:	bd90      	pop	{r4, r7, pc}
 801860c:	0801fdfc 	.word	0x0801fdfc
 8018610:	0802049c 	.word	0x0802049c
 8018614:	0801fe50 	.word	0x0801fe50

08018618 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d106      	bne.n	8018634 <tcp_rexmit_fast+0x1c>
 8018626:	4b2a      	ldr	r3, [pc, #168]	@ (80186d0 <tcp_rexmit_fast+0xb8>)
 8018628:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801862c:	4929      	ldr	r1, [pc, #164]	@ (80186d4 <tcp_rexmit_fast+0xbc>)
 801862e:	482a      	ldr	r0, [pc, #168]	@ (80186d8 <tcp_rexmit_fast+0xc0>)
 8018630:	f004 ff36 	bl	801d4a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018638:	2b00      	cmp	r3, #0
 801863a:	d045      	beq.n	80186c8 <tcp_rexmit_fast+0xb0>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	8b5b      	ldrh	r3, [r3, #26]
 8018640:	f003 0304 	and.w	r3, r3, #4
 8018644:	2b00      	cmp	r3, #0
 8018646:	d13f      	bne.n	80186c8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f7ff ff79 	bl	8018540 <tcp_rexmit>
 801864e:	4603      	mov	r3, r0
 8018650:	2b00      	cmp	r3, #0
 8018652:	d139      	bne.n	80186c8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018660:	4293      	cmp	r3, r2
 8018662:	bf28      	it	cs
 8018664:	4613      	movcs	r3, r2
 8018666:	b29b      	uxth	r3, r3
 8018668:	2b00      	cmp	r3, #0
 801866a:	da00      	bge.n	801866e <tcp_rexmit_fast+0x56>
 801866c:	3301      	adds	r3, #1
 801866e:	105b      	asrs	r3, r3, #1
 8018670:	b29a      	uxth	r2, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801867e:	461a      	mov	r2, r3
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018684:	005b      	lsls	r3, r3, #1
 8018686:	429a      	cmp	r2, r3
 8018688:	d206      	bcs.n	8018698 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801868e:	005b      	lsls	r3, r3, #1
 8018690:	b29a      	uxth	r2, r3
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80186a2:	4619      	mov	r1, r3
 80186a4:	0049      	lsls	r1, r1, #1
 80186a6:	440b      	add	r3, r1
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	4413      	add	r3, r2
 80186ac:	b29a      	uxth	r2, r3
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	8b5b      	ldrh	r3, [r3, #26]
 80186b8:	f043 0304 	orr.w	r3, r3, #4
 80186bc:	b29a      	uxth	r2, r3
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2200      	movs	r2, #0
 80186c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80186c8:	bf00      	nop
 80186ca:	3708      	adds	r7, #8
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}
 80186d0:	0801fdfc 	.word	0x0801fdfc
 80186d4:	080204b4 	.word	0x080204b4
 80186d8:	0801fe50 	.word	0x0801fe50

080186dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b086      	sub	sp, #24
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	607b      	str	r3, [r7, #4]
 80186e6:	460b      	mov	r3, r1
 80186e8:	817b      	strh	r3, [r7, #10]
 80186ea:	4613      	mov	r3, r2
 80186ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80186ee:	897a      	ldrh	r2, [r7, #10]
 80186f0:	893b      	ldrh	r3, [r7, #8]
 80186f2:	4413      	add	r3, r2
 80186f4:	b29b      	uxth	r3, r3
 80186f6:	3314      	adds	r3, #20
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80186fe:	4619      	mov	r1, r3
 8018700:	2022      	movs	r0, #34	@ 0x22
 8018702:	f7fa fbff 	bl	8012f04 <pbuf_alloc>
 8018706:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d04d      	beq.n	80187aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801870e:	897b      	ldrh	r3, [r7, #10]
 8018710:	3313      	adds	r3, #19
 8018712:	697a      	ldr	r2, [r7, #20]
 8018714:	8952      	ldrh	r2, [r2, #10]
 8018716:	4293      	cmp	r3, r2
 8018718:	db06      	blt.n	8018728 <tcp_output_alloc_header_common+0x4c>
 801871a:	4b26      	ldr	r3, [pc, #152]	@ (80187b4 <tcp_output_alloc_header_common+0xd8>)
 801871c:	f240 7223 	movw	r2, #1827	@ 0x723
 8018720:	4925      	ldr	r1, [pc, #148]	@ (80187b8 <tcp_output_alloc_header_common+0xdc>)
 8018722:	4826      	ldr	r0, [pc, #152]	@ (80187bc <tcp_output_alloc_header_common+0xe0>)
 8018724:	f004 febc 	bl	801d4a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801872e:	8c3b      	ldrh	r3, [r7, #32]
 8018730:	4618      	mov	r0, r3
 8018732:	f7f9 fadd 	bl	8011cf0 <lwip_htons>
 8018736:	4603      	mov	r3, r0
 8018738:	461a      	mov	r2, r3
 801873a:	693b      	ldr	r3, [r7, #16]
 801873c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801873e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018740:	4618      	mov	r0, r3
 8018742:	f7f9 fad5 	bl	8011cf0 <lwip_htons>
 8018746:	4603      	mov	r3, r0
 8018748:	461a      	mov	r2, r3
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	687a      	ldr	r2, [r7, #4]
 8018752:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018754:	68f8      	ldr	r0, [r7, #12]
 8018756:	f7f9 fae1 	bl	8011d1c <lwip_htonl>
 801875a:	4602      	mov	r2, r0
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018760:	897b      	ldrh	r3, [r7, #10]
 8018762:	089b      	lsrs	r3, r3, #2
 8018764:	b29b      	uxth	r3, r3
 8018766:	3305      	adds	r3, #5
 8018768:	b29b      	uxth	r3, r3
 801876a:	031b      	lsls	r3, r3, #12
 801876c:	b29a      	uxth	r2, r3
 801876e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018772:	b29b      	uxth	r3, r3
 8018774:	4313      	orrs	r3, r2
 8018776:	b29b      	uxth	r3, r3
 8018778:	4618      	mov	r0, r3
 801877a:	f7f9 fab9 	bl	8011cf0 <lwip_htons>
 801877e:	4603      	mov	r3, r0
 8018780:	461a      	mov	r2, r3
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018786:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018788:	4618      	mov	r0, r3
 801878a:	f7f9 fab1 	bl	8011cf0 <lwip_htons>
 801878e:	4603      	mov	r3, r0
 8018790:	461a      	mov	r2, r3
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	2200      	movs	r2, #0
 801879a:	741a      	strb	r2, [r3, #16]
 801879c:	2200      	movs	r2, #0
 801879e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	2200      	movs	r2, #0
 80187a4:	749a      	strb	r2, [r3, #18]
 80187a6:	2200      	movs	r2, #0
 80187a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80187aa:	697b      	ldr	r3, [r7, #20]
}
 80187ac:	4618      	mov	r0, r3
 80187ae:	3718      	adds	r7, #24
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	0801fdfc 	.word	0x0801fdfc
 80187b8:	080204d4 	.word	0x080204d4
 80187bc:	0801fe50 	.word	0x0801fe50

080187c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80187c0:	b5b0      	push	{r4, r5, r7, lr}
 80187c2:	b08a      	sub	sp, #40	@ 0x28
 80187c4:	af04      	add	r7, sp, #16
 80187c6:	60f8      	str	r0, [r7, #12]
 80187c8:	607b      	str	r3, [r7, #4]
 80187ca:	460b      	mov	r3, r1
 80187cc:	817b      	strh	r3, [r7, #10]
 80187ce:	4613      	mov	r3, r2
 80187d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d106      	bne.n	80187e6 <tcp_output_alloc_header+0x26>
 80187d8:	4b15      	ldr	r3, [pc, #84]	@ (8018830 <tcp_output_alloc_header+0x70>)
 80187da:	f240 7242 	movw	r2, #1858	@ 0x742
 80187de:	4915      	ldr	r1, [pc, #84]	@ (8018834 <tcp_output_alloc_header+0x74>)
 80187e0:	4815      	ldr	r0, [pc, #84]	@ (8018838 <tcp_output_alloc_header+0x78>)
 80187e2:	f004 fe5d 	bl	801d4a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	8adb      	ldrh	r3, [r3, #22]
 80187ee:	68fa      	ldr	r2, [r7, #12]
 80187f0:	8b12      	ldrh	r2, [r2, #24]
 80187f2:	68f9      	ldr	r1, [r7, #12]
 80187f4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80187f6:	893d      	ldrh	r5, [r7, #8]
 80187f8:	897c      	ldrh	r4, [r7, #10]
 80187fa:	9103      	str	r1, [sp, #12]
 80187fc:	2110      	movs	r1, #16
 80187fe:	9102      	str	r1, [sp, #8]
 8018800:	9201      	str	r2, [sp, #4]
 8018802:	9300      	str	r3, [sp, #0]
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	462a      	mov	r2, r5
 8018808:	4621      	mov	r1, r4
 801880a:	f7ff ff67 	bl	80186dc <tcp_output_alloc_header_common>
 801880e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018810:	697b      	ldr	r3, [r7, #20]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d006      	beq.n	8018824 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801881a:	68fa      	ldr	r2, [r7, #12]
 801881c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801881e:	441a      	add	r2, r3
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018824:	697b      	ldr	r3, [r7, #20]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3718      	adds	r7, #24
 801882a:	46bd      	mov	sp, r7
 801882c:	bdb0      	pop	{r4, r5, r7, pc}
 801882e:	bf00      	nop
 8018830:	0801fdfc 	.word	0x0801fdfc
 8018834:	08020504 	.word	0x08020504
 8018838:	0801fe50 	.word	0x0801fe50

0801883c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b088      	sub	sp, #32
 8018840:	af00      	add	r7, sp, #0
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	4611      	mov	r1, r2
 8018848:	461a      	mov	r2, r3
 801884a:	460b      	mov	r3, r1
 801884c:	71fb      	strb	r3, [r7, #7]
 801884e:	4613      	mov	r3, r2
 8018850:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018852:	2300      	movs	r3, #0
 8018854:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d106      	bne.n	801886a <tcp_output_fill_options+0x2e>
 801885c:	4b12      	ldr	r3, [pc, #72]	@ (80188a8 <tcp_output_fill_options+0x6c>)
 801885e:	f240 7256 	movw	r2, #1878	@ 0x756
 8018862:	4912      	ldr	r1, [pc, #72]	@ (80188ac <tcp_output_fill_options+0x70>)
 8018864:	4812      	ldr	r0, [pc, #72]	@ (80188b0 <tcp_output_fill_options+0x74>)
 8018866:	f004 fe1b 	bl	801d4a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018870:	69bb      	ldr	r3, [r7, #24]
 8018872:	3314      	adds	r3, #20
 8018874:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018876:	8bfb      	ldrh	r3, [r7, #30]
 8018878:	009b      	lsls	r3, r3, #2
 801887a:	461a      	mov	r2, r3
 801887c:	79fb      	ldrb	r3, [r7, #7]
 801887e:	009b      	lsls	r3, r3, #2
 8018880:	f003 0304 	and.w	r3, r3, #4
 8018884:	4413      	add	r3, r2
 8018886:	3314      	adds	r3, #20
 8018888:	69ba      	ldr	r2, [r7, #24]
 801888a:	4413      	add	r3, r2
 801888c:	697a      	ldr	r2, [r7, #20]
 801888e:	429a      	cmp	r2, r3
 8018890:	d006      	beq.n	80188a0 <tcp_output_fill_options+0x64>
 8018892:	4b05      	ldr	r3, [pc, #20]	@ (80188a8 <tcp_output_fill_options+0x6c>)
 8018894:	f240 7275 	movw	r2, #1909	@ 0x775
 8018898:	4906      	ldr	r1, [pc, #24]	@ (80188b4 <tcp_output_fill_options+0x78>)
 801889a:	4805      	ldr	r0, [pc, #20]	@ (80188b0 <tcp_output_fill_options+0x74>)
 801889c:	f004 fe00 	bl	801d4a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80188a0:	bf00      	nop
 80188a2:	3720      	adds	r7, #32
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}
 80188a8:	0801fdfc 	.word	0x0801fdfc
 80188ac:	0802052c 	.word	0x0802052c
 80188b0:	0801fe50 	.word	0x0801fe50
 80188b4:	08020424 	.word	0x08020424

080188b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b08a      	sub	sp, #40	@ 0x28
 80188bc:	af04      	add	r7, sp, #16
 80188be:	60f8      	str	r0, [r7, #12]
 80188c0:	60b9      	str	r1, [r7, #8]
 80188c2:	607a      	str	r2, [r7, #4]
 80188c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d106      	bne.n	80188da <tcp_output_control_segment+0x22>
 80188cc:	4b1c      	ldr	r3, [pc, #112]	@ (8018940 <tcp_output_control_segment+0x88>)
 80188ce:	f240 7287 	movw	r2, #1927	@ 0x787
 80188d2:	491c      	ldr	r1, [pc, #112]	@ (8018944 <tcp_output_control_segment+0x8c>)
 80188d4:	481c      	ldr	r0, [pc, #112]	@ (8018948 <tcp_output_control_segment+0x90>)
 80188d6:	f004 fde3 	bl	801d4a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80188da:	683a      	ldr	r2, [r7, #0]
 80188dc:	6879      	ldr	r1, [r7, #4]
 80188de:	68f8      	ldr	r0, [r7, #12]
 80188e0:	f7fe ff42 	bl	8017768 <tcp_route>
 80188e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d102      	bne.n	80188f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80188ec:	23fc      	movs	r3, #252	@ 0xfc
 80188ee:	75fb      	strb	r3, [r7, #23]
 80188f0:	e01c      	b.n	801892c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d006      	beq.n	8018906 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	7adb      	ldrb	r3, [r3, #11]
 80188fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	7a9b      	ldrb	r3, [r3, #10]
 8018902:	757b      	strb	r3, [r7, #21]
 8018904:	e003      	b.n	801890e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018906:	23ff      	movs	r3, #255	@ 0xff
 8018908:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801890a:	2300      	movs	r3, #0
 801890c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801890e:	7dba      	ldrb	r2, [r7, #22]
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	9302      	str	r3, [sp, #8]
 8018914:	2306      	movs	r3, #6
 8018916:	9301      	str	r3, [sp, #4]
 8018918:	7d7b      	ldrb	r3, [r7, #21]
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	4613      	mov	r3, r2
 801891e:	683a      	ldr	r2, [r7, #0]
 8018920:	6879      	ldr	r1, [r7, #4]
 8018922:	68b8      	ldr	r0, [r7, #8]
 8018924:	f002 fa4e 	bl	801adc4 <ip4_output_if>
 8018928:	4603      	mov	r3, r0
 801892a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801892c:	68b8      	ldr	r0, [r7, #8]
 801892e:	f7fa fdcd 	bl	80134cc <pbuf_free>
  return err;
 8018932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018936:	4618      	mov	r0, r3
 8018938:	3718      	adds	r7, #24
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}
 801893e:	bf00      	nop
 8018940:	0801fdfc 	.word	0x0801fdfc
 8018944:	08020554 	.word	0x08020554
 8018948:	0801fe50 	.word	0x0801fe50

0801894c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801894c:	b590      	push	{r4, r7, lr}
 801894e:	b08b      	sub	sp, #44	@ 0x2c
 8018950:	af04      	add	r7, sp, #16
 8018952:	60f8      	str	r0, [r7, #12]
 8018954:	60b9      	str	r1, [r7, #8]
 8018956:	607a      	str	r2, [r7, #4]
 8018958:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d106      	bne.n	801896e <tcp_rst+0x22>
 8018960:	4b1f      	ldr	r3, [pc, #124]	@ (80189e0 <tcp_rst+0x94>)
 8018962:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8018966:	491f      	ldr	r1, [pc, #124]	@ (80189e4 <tcp_rst+0x98>)
 8018968:	481f      	ldr	r0, [pc, #124]	@ (80189e8 <tcp_rst+0x9c>)
 801896a:	f004 fd99 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018970:	2b00      	cmp	r3, #0
 8018972:	d106      	bne.n	8018982 <tcp_rst+0x36>
 8018974:	4b1a      	ldr	r3, [pc, #104]	@ (80189e0 <tcp_rst+0x94>)
 8018976:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801897a:	491c      	ldr	r1, [pc, #112]	@ (80189ec <tcp_rst+0xa0>)
 801897c:	481a      	ldr	r0, [pc, #104]	@ (80189e8 <tcp_rst+0x9c>)
 801897e:	f004 fd8f 	bl	801d4a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018982:	2300      	movs	r3, #0
 8018984:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018986:	f246 0308 	movw	r3, #24584	@ 0x6008
 801898a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801898c:	7dfb      	ldrb	r3, [r7, #23]
 801898e:	b29c      	uxth	r4, r3
 8018990:	68b8      	ldr	r0, [r7, #8]
 8018992:	f7f9 f9c3 	bl	8011d1c <lwip_htonl>
 8018996:	4602      	mov	r2, r0
 8018998:	8abb      	ldrh	r3, [r7, #20]
 801899a:	9303      	str	r3, [sp, #12]
 801899c:	2314      	movs	r3, #20
 801899e:	9302      	str	r3, [sp, #8]
 80189a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80189a2:	9301      	str	r3, [sp, #4]
 80189a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	4613      	mov	r3, r2
 80189aa:	2200      	movs	r2, #0
 80189ac:	4621      	mov	r1, r4
 80189ae:	6878      	ldr	r0, [r7, #4]
 80189b0:	f7ff fe94 	bl	80186dc <tcp_output_alloc_header_common>
 80189b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d00c      	beq.n	80189d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80189bc:	7dfb      	ldrb	r3, [r7, #23]
 80189be:	2200      	movs	r2, #0
 80189c0:	6939      	ldr	r1, [r7, #16]
 80189c2:	68f8      	ldr	r0, [r7, #12]
 80189c4:	f7ff ff3a 	bl	801883c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80189c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189ca:	683a      	ldr	r2, [r7, #0]
 80189cc:	6939      	ldr	r1, [r7, #16]
 80189ce:	68f8      	ldr	r0, [r7, #12]
 80189d0:	f7ff ff72 	bl	80188b8 <tcp_output_control_segment>
 80189d4:	e000      	b.n	80189d8 <tcp_rst+0x8c>
    return;
 80189d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80189d8:	371c      	adds	r7, #28
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd90      	pop	{r4, r7, pc}
 80189de:	bf00      	nop
 80189e0:	0801fdfc 	.word	0x0801fdfc
 80189e4:	08020580 	.word	0x08020580
 80189e8:	0801fe50 	.word	0x0801fe50
 80189ec:	0802059c 	.word	0x0802059c

080189f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80189f0:	b590      	push	{r4, r7, lr}
 80189f2:	b087      	sub	sp, #28
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80189f8:	2300      	movs	r3, #0
 80189fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80189fc:	2300      	movs	r3, #0
 80189fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d106      	bne.n	8018a14 <tcp_send_empty_ack+0x24>
 8018a06:	4b28      	ldr	r3, [pc, #160]	@ (8018aa8 <tcp_send_empty_ack+0xb8>)
 8018a08:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8018a0c:	4927      	ldr	r1, [pc, #156]	@ (8018aac <tcp_send_empty_ack+0xbc>)
 8018a0e:	4828      	ldr	r0, [pc, #160]	@ (8018ab0 <tcp_send_empty_ack+0xc0>)
 8018a10:	f004 fd46 	bl	801d4a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a14:	7dfb      	ldrb	r3, [r7, #23]
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	f003 0304 	and.w	r3, r3, #4
 8018a1e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018a20:	7d7b      	ldrb	r3, [r7, #21]
 8018a22:	b29c      	uxth	r4, r3
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f7f9 f977 	bl	8011d1c <lwip_htonl>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2200      	movs	r2, #0
 8018a32:	4621      	mov	r1, r4
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f7ff fec3 	bl	80187c0 <tcp_output_alloc_header>
 8018a3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d109      	bne.n	8018a56 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	8b5b      	ldrh	r3, [r3, #26]
 8018a46:	f043 0303 	orr.w	r3, r3, #3
 8018a4a:	b29a      	uxth	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018a50:	f06f 0301 	mvn.w	r3, #1
 8018a54:	e023      	b.n	8018a9e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018a56:	7dbb      	ldrb	r3, [r7, #22]
 8018a58:	7dfa      	ldrb	r2, [r7, #23]
 8018a5a:	6939      	ldr	r1, [r7, #16]
 8018a5c:	6878      	ldr	r0, [r7, #4]
 8018a5e:	f7ff feed 	bl	801883c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018a62:	687a      	ldr	r2, [r7, #4]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	3304      	adds	r3, #4
 8018a68:	6939      	ldr	r1, [r7, #16]
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f7ff ff24 	bl	80188b8 <tcp_output_control_segment>
 8018a70:	4603      	mov	r3, r0
 8018a72:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d007      	beq.n	8018a8c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	8b5b      	ldrh	r3, [r3, #26]
 8018a80:	f043 0303 	orr.w	r3, r3, #3
 8018a84:	b29a      	uxth	r2, r3
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	835a      	strh	r2, [r3, #26]
 8018a8a:	e006      	b.n	8018a9a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	8b5b      	ldrh	r3, [r3, #26]
 8018a90:	f023 0303 	bic.w	r3, r3, #3
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	371c      	adds	r7, #28
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd90      	pop	{r4, r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	0801fdfc 	.word	0x0801fdfc
 8018aac:	080205b8 	.word	0x080205b8
 8018ab0:	0801fe50 	.word	0x0801fe50

08018ab4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018ab4:	b590      	push	{r4, r7, lr}
 8018ab6:	b087      	sub	sp, #28
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018abc:	2300      	movs	r3, #0
 8018abe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d106      	bne.n	8018ad4 <tcp_keepalive+0x20>
 8018ac6:	4b18      	ldr	r3, [pc, #96]	@ (8018b28 <tcp_keepalive+0x74>)
 8018ac8:	f640 0224 	movw	r2, #2084	@ 0x824
 8018acc:	4917      	ldr	r1, [pc, #92]	@ (8018b2c <tcp_keepalive+0x78>)
 8018ace:	4818      	ldr	r0, [pc, #96]	@ (8018b30 <tcp_keepalive+0x7c>)
 8018ad0:	f004 fce6 	bl	801d4a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018ad4:	7dfb      	ldrb	r3, [r7, #23]
 8018ad6:	b29c      	uxth	r4, r3
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018adc:	3b01      	subs	r3, #1
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7f9 f91c 	bl	8011d1c <lwip_htonl>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	4621      	mov	r1, r4
 8018aea:	6878      	ldr	r0, [r7, #4]
 8018aec:	f7ff fe68 	bl	80187c0 <tcp_output_alloc_header>
 8018af0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d102      	bne.n	8018afe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018af8:	f04f 33ff 	mov.w	r3, #4294967295
 8018afc:	e010      	b.n	8018b20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018afe:	7dfb      	ldrb	r3, [r7, #23]
 8018b00:	2200      	movs	r2, #0
 8018b02:	6939      	ldr	r1, [r7, #16]
 8018b04:	6878      	ldr	r0, [r7, #4]
 8018b06:	f7ff fe99 	bl	801883c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b0a:	687a      	ldr	r2, [r7, #4]
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	3304      	adds	r3, #4
 8018b10:	6939      	ldr	r1, [r7, #16]
 8018b12:	6878      	ldr	r0, [r7, #4]
 8018b14:	f7ff fed0 	bl	80188b8 <tcp_output_control_segment>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	371c      	adds	r7, #28
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd90      	pop	{r4, r7, pc}
 8018b28:	0801fdfc 	.word	0x0801fdfc
 8018b2c:	080205d8 	.word	0x080205d8
 8018b30:	0801fe50 	.word	0x0801fe50

08018b34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018b34:	b590      	push	{r4, r7, lr}
 8018b36:	b08b      	sub	sp, #44	@ 0x2c
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d106      	bne.n	8018b56 <tcp_zero_window_probe+0x22>
 8018b48:	4b4c      	ldr	r3, [pc, #304]	@ (8018c7c <tcp_zero_window_probe+0x148>)
 8018b4a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8018b4e:	494c      	ldr	r1, [pc, #304]	@ (8018c80 <tcp_zero_window_probe+0x14c>)
 8018b50:	484c      	ldr	r0, [pc, #304]	@ (8018c84 <tcp_zero_window_probe+0x150>)
 8018b52:	f004 fca5 	bl	801d4a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b5a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d101      	bne.n	8018b66 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018b62:	2300      	movs	r3, #0
 8018b64:	e086      	b.n	8018c74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018b6c:	2bff      	cmp	r3, #255	@ 0xff
 8018b6e:	d007      	beq.n	8018b80 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018b76:	3301      	adds	r3, #1
 8018b78:	b2da      	uxtb	r2, r3
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018b80:	6a3b      	ldr	r3, [r7, #32]
 8018b82:	68db      	ldr	r3, [r3, #12]
 8018b84:	899b      	ldrh	r3, [r3, #12]
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7f9 f8b1 	bl	8011cf0 <lwip_htons>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	f003 0301 	and.w	r3, r3, #1
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d005      	beq.n	8018ba6 <tcp_zero_window_probe+0x72>
 8018b9a:	6a3b      	ldr	r3, [r7, #32]
 8018b9c:	891b      	ldrh	r3, [r3, #8]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d101      	bne.n	8018ba6 <tcp_zero_window_probe+0x72>
 8018ba2:	2301      	movs	r3, #1
 8018ba4:	e000      	b.n	8018ba8 <tcp_zero_window_probe+0x74>
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018baa:	7ffb      	ldrb	r3, [r7, #31]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	bf0c      	ite	eq
 8018bb0:	2301      	moveq	r3, #1
 8018bb2:	2300      	movne	r3, #0
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018bbc:	b299      	uxth	r1, r3
 8018bbe:	6a3b      	ldr	r3, [r7, #32]
 8018bc0:	68db      	ldr	r3, [r3, #12]
 8018bc2:	685b      	ldr	r3, [r3, #4]
 8018bc4:	8bba      	ldrh	r2, [r7, #28]
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7ff fdfa 	bl	80187c0 <tcp_output_alloc_header>
 8018bcc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d102      	bne.n	8018bda <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd8:	e04c      	b.n	8018c74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018bda:	69bb      	ldr	r3, [r7, #24]
 8018bdc:	685b      	ldr	r3, [r3, #4]
 8018bde:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018be0:	7ffb      	ldrb	r3, [r7, #31]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d011      	beq.n	8018c0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	899b      	ldrh	r3, [r3, #12]
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	b21b      	sxth	r3, r3
 8018bee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018bf2:	b21c      	sxth	r4, r3
 8018bf4:	2011      	movs	r0, #17
 8018bf6:	f7f9 f87b 	bl	8011cf0 <lwip_htons>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	b21b      	sxth	r3, r3
 8018bfe:	4323      	orrs	r3, r4
 8018c00:	b21b      	sxth	r3, r3
 8018c02:	b29a      	uxth	r2, r3
 8018c04:	697b      	ldr	r3, [r7, #20]
 8018c06:	819a      	strh	r2, [r3, #12]
 8018c08:	e010      	b.n	8018c2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018c0a:	69bb      	ldr	r3, [r7, #24]
 8018c0c:	685b      	ldr	r3, [r3, #4]
 8018c0e:	3314      	adds	r3, #20
 8018c10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018c12:	6a3b      	ldr	r3, [r7, #32]
 8018c14:	6858      	ldr	r0, [r3, #4]
 8018c16:	6a3b      	ldr	r3, [r7, #32]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	891a      	ldrh	r2, [r3, #8]
 8018c1c:	6a3b      	ldr	r3, [r7, #32]
 8018c1e:	891b      	ldrh	r3, [r3, #8]
 8018c20:	1ad3      	subs	r3, r2, r3
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	2201      	movs	r2, #1
 8018c26:	6939      	ldr	r1, [r7, #16]
 8018c28:	f7fa fe56 	bl	80138d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018c2c:	6a3b      	ldr	r3, [r7, #32]
 8018c2e:	68db      	ldr	r3, [r3, #12]
 8018c30:	685b      	ldr	r3, [r3, #4]
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7f9 f872 	bl	8011d1c <lwip_htonl>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	3301      	adds	r3, #1
 8018c3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	1ad3      	subs	r3, r2, r3
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	da02      	bge.n	8018c50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	68fa      	ldr	r2, [r7, #12]
 8018c4e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018c54:	2200      	movs	r2, #0
 8018c56:	69b9      	ldr	r1, [r7, #24]
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7ff fdef 	bl	801883c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018c5e:	687a      	ldr	r2, [r7, #4]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	3304      	adds	r3, #4
 8018c64:	69b9      	ldr	r1, [r7, #24]
 8018c66:	6878      	ldr	r0, [r7, #4]
 8018c68:	f7ff fe26 	bl	80188b8 <tcp_output_control_segment>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018c70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	372c      	adds	r7, #44	@ 0x2c
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd90      	pop	{r4, r7, pc}
 8018c7c:	0801fdfc 	.word	0x0801fdfc
 8018c80:	080205f4 	.word	0x080205f4
 8018c84:	0801fe50 	.word	0x0801fe50

08018c88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018c90:	f7fa ff10 	bl	8013ab4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018c94:	4b0a      	ldr	r3, [pc, #40]	@ (8018cc0 <tcpip_tcp_timer+0x38>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d103      	bne.n	8018ca4 <tcpip_tcp_timer+0x1c>
 8018c9c:	4b09      	ldr	r3, [pc, #36]	@ (8018cc4 <tcpip_tcp_timer+0x3c>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d005      	beq.n	8018cb0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	4908      	ldr	r1, [pc, #32]	@ (8018cc8 <tcpip_tcp_timer+0x40>)
 8018ca8:	20fa      	movs	r0, #250	@ 0xfa
 8018caa:	f000 f8f3 	bl	8018e94 <sys_timeout>
 8018cae:	e003      	b.n	8018cb8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018cb0:	4b06      	ldr	r3, [pc, #24]	@ (8018ccc <tcpip_tcp_timer+0x44>)
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	601a      	str	r2, [r3, #0]
  }
}
 8018cb6:	bf00      	nop
 8018cb8:	bf00      	nop
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	20027528 	.word	0x20027528
 8018cc4:	2002752c 	.word	0x2002752c
 8018cc8:	08018c89 	.word	0x08018c89
 8018ccc:	20027574 	.word	0x20027574

08018cd0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8018d00 <tcp_timer_needed+0x30>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d10f      	bne.n	8018cfc <tcp_timer_needed+0x2c>
 8018cdc:	4b09      	ldr	r3, [pc, #36]	@ (8018d04 <tcp_timer_needed+0x34>)
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d103      	bne.n	8018cec <tcp_timer_needed+0x1c>
 8018ce4:	4b08      	ldr	r3, [pc, #32]	@ (8018d08 <tcp_timer_needed+0x38>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d007      	beq.n	8018cfc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018cec:	4b04      	ldr	r3, [pc, #16]	@ (8018d00 <tcp_timer_needed+0x30>)
 8018cee:	2201      	movs	r2, #1
 8018cf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	4905      	ldr	r1, [pc, #20]	@ (8018d0c <tcp_timer_needed+0x3c>)
 8018cf6:	20fa      	movs	r0, #250	@ 0xfa
 8018cf8:	f000 f8cc 	bl	8018e94 <sys_timeout>
  }
}
 8018cfc:	bf00      	nop
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	20027574 	.word	0x20027574
 8018d04:	20027528 	.word	0x20027528
 8018d08:	2002752c 	.word	0x2002752c
 8018d0c:	08018c89 	.word	0x08018c89

08018d10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b086      	sub	sp, #24
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	60f8      	str	r0, [r7, #12]
 8018d18:	60b9      	str	r1, [r7, #8]
 8018d1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018d1c:	200a      	movs	r0, #10
 8018d1e:	f7f9 fcbb 	bl	8012698 <memp_malloc>
 8018d22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018d24:	693b      	ldr	r3, [r7, #16]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d109      	bne.n	8018d3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d151      	bne.n	8018dd4 <sys_timeout_abs+0xc4>
 8018d30:	4b2a      	ldr	r3, [pc, #168]	@ (8018ddc <sys_timeout_abs+0xcc>)
 8018d32:	22be      	movs	r2, #190	@ 0xbe
 8018d34:	492a      	ldr	r1, [pc, #168]	@ (8018de0 <sys_timeout_abs+0xd0>)
 8018d36:	482b      	ldr	r0, [pc, #172]	@ (8018de4 <sys_timeout_abs+0xd4>)
 8018d38:	f004 fbb2 	bl	801d4a0 <iprintf>
    return;
 8018d3c:	e04a      	b.n	8018dd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018d3e:	693b      	ldr	r3, [r7, #16]
 8018d40:	2200      	movs	r2, #0
 8018d42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018d44:	693b      	ldr	r3, [r7, #16]
 8018d46:	68ba      	ldr	r2, [r7, #8]
 8018d48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018d4a:	693b      	ldr	r3, [r7, #16]
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018d50:	693b      	ldr	r3, [r7, #16]
 8018d52:	68fa      	ldr	r2, [r7, #12]
 8018d54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018d56:	4b24      	ldr	r3, [pc, #144]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d103      	bne.n	8018d66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018d5e:	4a22      	ldr	r2, [pc, #136]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d60:	693b      	ldr	r3, [r7, #16]
 8018d62:	6013      	str	r3, [r2, #0]
    return;
 8018d64:	e037      	b.n	8018dd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018d66:	693b      	ldr	r3, [r7, #16]
 8018d68:	685a      	ldr	r2, [r3, #4]
 8018d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	1ad3      	subs	r3, r2, r3
 8018d72:	0fdb      	lsrs	r3, r3, #31
 8018d74:	f003 0301 	and.w	r3, r3, #1
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d007      	beq.n	8018d8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d80:	681a      	ldr	r2, [r3, #0]
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018d86:	4a18      	ldr	r2, [pc, #96]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	6013      	str	r3, [r2, #0]
 8018d8c:	e023      	b.n	8018dd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018d8e:	4b16      	ldr	r3, [pc, #88]	@ (8018de8 <sys_timeout_abs+0xd8>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	617b      	str	r3, [r7, #20]
 8018d94:	e01a      	b.n	8018dcc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d00b      	beq.n	8018db6 <sys_timeout_abs+0xa6>
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	685a      	ldr	r2, [r3, #4]
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	1ad3      	subs	r3, r2, r3
 8018daa:	0fdb      	lsrs	r3, r3, #31
 8018dac:	f003 0301 	and.w	r3, r3, #1
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d007      	beq.n	8018dc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	693b      	ldr	r3, [r7, #16]
 8018dbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	693a      	ldr	r2, [r7, #16]
 8018dc2:	601a      	str	r2, [r3, #0]
        break;
 8018dc4:	e007      	b.n	8018dd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	617b      	str	r3, [r7, #20]
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d1e1      	bne.n	8018d96 <sys_timeout_abs+0x86>
 8018dd2:	e000      	b.n	8018dd6 <sys_timeout_abs+0xc6>
    return;
 8018dd4:	bf00      	nop
      }
    }
  }
}
 8018dd6:	3718      	adds	r7, #24
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bd80      	pop	{r7, pc}
 8018ddc:	08020618 	.word	0x08020618
 8018de0:	0802064c 	.word	0x0802064c
 8018de4:	0802068c 	.word	0x0802068c
 8018de8:	2002756c 	.word	0x2002756c

08018dec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b086      	sub	sp, #24
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	685b      	ldr	r3, [r3, #4]
 8018dfc:	4798      	blx	r3

  now = sys_now();
 8018dfe:	f7f4 facb 	bl	800d398 <sys_now>
 8018e02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	681a      	ldr	r2, [r3, #0]
 8018e08:	4b0f      	ldr	r3, [pc, #60]	@ (8018e48 <lwip_cyclic_timer+0x5c>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	4413      	add	r3, r2
 8018e0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018e10:	68fa      	ldr	r2, [r7, #12]
 8018e12:	693b      	ldr	r3, [r7, #16]
 8018e14:	1ad3      	subs	r3, r2, r3
 8018e16:	0fdb      	lsrs	r3, r3, #31
 8018e18:	f003 0301 	and.w	r3, r3, #1
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d009      	beq.n	8018e36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	681a      	ldr	r2, [r3, #0]
 8018e26:	693b      	ldr	r3, [r7, #16]
 8018e28:	4413      	add	r3, r2
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	4907      	ldr	r1, [pc, #28]	@ (8018e4c <lwip_cyclic_timer+0x60>)
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7ff ff6e 	bl	8018d10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018e34:	e004      	b.n	8018e40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	4904      	ldr	r1, [pc, #16]	@ (8018e4c <lwip_cyclic_timer+0x60>)
 8018e3a:	68f8      	ldr	r0, [r7, #12]
 8018e3c:	f7ff ff68 	bl	8018d10 <sys_timeout_abs>
}
 8018e40:	bf00      	nop
 8018e42:	3718      	adds	r7, #24
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	20027570 	.word	0x20027570
 8018e4c:	08018ded 	.word	0x08018ded

08018e50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b082      	sub	sp, #8
 8018e54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018e56:	2301      	movs	r3, #1
 8018e58:	607b      	str	r3, [r7, #4]
 8018e5a:	e00e      	b.n	8018e7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8018e8c <sys_timeouts_init+0x3c>)
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	00db      	lsls	r3, r3, #3
 8018e68:	4a08      	ldr	r2, [pc, #32]	@ (8018e8c <sys_timeouts_init+0x3c>)
 8018e6a:	4413      	add	r3, r2
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	4908      	ldr	r1, [pc, #32]	@ (8018e90 <sys_timeouts_init+0x40>)
 8018e70:	f000 f810 	bl	8018e94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	3301      	adds	r3, #1
 8018e78:	607b      	str	r3, [r7, #4]
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	2b02      	cmp	r3, #2
 8018e7e:	d9ed      	bls.n	8018e5c <sys_timeouts_init+0xc>
  }
}
 8018e80:	bf00      	nop
 8018e82:	bf00      	nop
 8018e84:	3708      	adds	r7, #8
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}
 8018e8a:	bf00      	nop
 8018e8c:	08021a8c 	.word	0x08021a8c
 8018e90:	08018ded 	.word	0x08018ded

08018e94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b086      	sub	sp, #24
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	60f8      	str	r0, [r7, #12]
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018ea6:	d306      	bcc.n	8018eb6 <sys_timeout+0x22>
 8018ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8018ed4 <sys_timeout+0x40>)
 8018eaa:	f240 1229 	movw	r2, #297	@ 0x129
 8018eae:	490a      	ldr	r1, [pc, #40]	@ (8018ed8 <sys_timeout+0x44>)
 8018eb0:	480a      	ldr	r0, [pc, #40]	@ (8018edc <sys_timeout+0x48>)
 8018eb2:	f004 faf5 	bl	801d4a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018eb6:	f7f4 fa6f 	bl	800d398 <sys_now>
 8018eba:	4602      	mov	r2, r0
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	4413      	add	r3, r2
 8018ec0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018ec2:	687a      	ldr	r2, [r7, #4]
 8018ec4:	68b9      	ldr	r1, [r7, #8]
 8018ec6:	6978      	ldr	r0, [r7, #20]
 8018ec8:	f7ff ff22 	bl	8018d10 <sys_timeout_abs>
#endif
}
 8018ecc:	bf00      	nop
 8018ece:	3718      	adds	r7, #24
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	08020618 	.word	0x08020618
 8018ed8:	080206b4 	.word	0x080206b4
 8018edc:	0802068c 	.word	0x0802068c

08018ee0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018ee6:	f7f4 fa57 	bl	800d398 <sys_now>
 8018eea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018eec:	4b17      	ldr	r3, [pc, #92]	@ (8018f4c <sys_check_timeouts+0x6c>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d022      	beq.n	8018f3e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	685b      	ldr	r3, [r3, #4]
 8018efc:	68fa      	ldr	r2, [r7, #12]
 8018efe:	1ad3      	subs	r3, r2, r3
 8018f00:	0fdb      	lsrs	r3, r3, #31
 8018f02:	f003 0301 	and.w	r3, r3, #1
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d11a      	bne.n	8018f42 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4a0e      	ldr	r2, [pc, #56]	@ (8018f4c <sys_check_timeouts+0x6c>)
 8018f12:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	689b      	ldr	r3, [r3, #8]
 8018f18:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	68db      	ldr	r3, [r3, #12]
 8018f1e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	685b      	ldr	r3, [r3, #4]
 8018f24:	4a0a      	ldr	r2, [pc, #40]	@ (8018f50 <sys_check_timeouts+0x70>)
 8018f26:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018f28:	68b9      	ldr	r1, [r7, #8]
 8018f2a:	200a      	movs	r0, #10
 8018f2c:	f7f9 fc2a 	bl	8012784 <memp_free>
    if (handler != NULL) {
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d0da      	beq.n	8018eec <sys_check_timeouts+0xc>
      handler(arg);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6838      	ldr	r0, [r7, #0]
 8018f3a:	4798      	blx	r3
  do {
 8018f3c:	e7d6      	b.n	8018eec <sys_check_timeouts+0xc>
      return;
 8018f3e:	bf00      	nop
 8018f40:	e000      	b.n	8018f44 <sys_check_timeouts+0x64>
      return;
 8018f42:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018f44:	3710      	adds	r7, #16
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop
 8018f4c:	2002756c 	.word	0x2002756c
 8018f50:	20027570 	.word	0x20027570

08018f54 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018f5a:	4b16      	ldr	r3, [pc, #88]	@ (8018fb4 <sys_timeouts_sleeptime+0x60>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d102      	bne.n	8018f68 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018f62:	f04f 33ff 	mov.w	r3, #4294967295
 8018f66:	e020      	b.n	8018faa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018f68:	f7f4 fa16 	bl	800d398 <sys_now>
 8018f6c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018f6e:	4b11      	ldr	r3, [pc, #68]	@ (8018fb4 <sys_timeouts_sleeptime+0x60>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	685a      	ldr	r2, [r3, #4]
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	1ad3      	subs	r3, r2, r3
 8018f78:	0fdb      	lsrs	r3, r3, #31
 8018f7a:	f003 0301 	and.w	r3, r3, #1
 8018f7e:	b2db      	uxtb	r3, r3
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d001      	beq.n	8018f88 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018f84:	2300      	movs	r3, #0
 8018f86:	e010      	b.n	8018faa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018f88:	4b0a      	ldr	r3, [pc, #40]	@ (8018fb4 <sys_timeouts_sleeptime+0x60>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	685a      	ldr	r2, [r3, #4]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	1ad3      	subs	r3, r2, r3
 8018f92:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018f94:	683b      	ldr	r3, [r7, #0]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	da06      	bge.n	8018fa8 <sys_timeouts_sleeptime+0x54>
 8018f9a:	4b07      	ldr	r3, [pc, #28]	@ (8018fb8 <sys_timeouts_sleeptime+0x64>)
 8018f9c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018fa0:	4906      	ldr	r1, [pc, #24]	@ (8018fbc <sys_timeouts_sleeptime+0x68>)
 8018fa2:	4807      	ldr	r0, [pc, #28]	@ (8018fc0 <sys_timeouts_sleeptime+0x6c>)
 8018fa4:	f004 fa7c 	bl	801d4a0 <iprintf>
    return ret;
 8018fa8:	683b      	ldr	r3, [r7, #0]
  }
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3708      	adds	r7, #8
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	2002756c 	.word	0x2002756c
 8018fb8:	08020618 	.word	0x08020618
 8018fbc:	080206ec 	.word	0x080206ec
 8018fc0:	0802068c 	.word	0x0802068c

08018fc4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018fc8:	f004 f96a 	bl	801d2a0 <rand>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	b29b      	uxth	r3, r3
 8018fd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018fda:	b29a      	uxth	r2, r3
 8018fdc:	4b01      	ldr	r3, [pc, #4]	@ (8018fe4 <udp_init+0x20>)
 8018fde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018fe0:	bf00      	nop
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	2000002c 	.word	0x2000002c

08018fe8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018fe8:	b480      	push	{r7}
 8018fea:	b083      	sub	sp, #12
 8018fec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018fee:	2300      	movs	r3, #0
 8018ff0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018ff2:	4b17      	ldr	r3, [pc, #92]	@ (8019050 <udp_new_port+0x68>)
 8018ff4:	881b      	ldrh	r3, [r3, #0]
 8018ff6:	1c5a      	adds	r2, r3, #1
 8018ff8:	b291      	uxth	r1, r2
 8018ffa:	4a15      	ldr	r2, [pc, #84]	@ (8019050 <udp_new_port+0x68>)
 8018ffc:	8011      	strh	r1, [r2, #0]
 8018ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019002:	4293      	cmp	r3, r2
 8019004:	d103      	bne.n	801900e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019006:	4b12      	ldr	r3, [pc, #72]	@ (8019050 <udp_new_port+0x68>)
 8019008:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801900c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801900e:	4b11      	ldr	r3, [pc, #68]	@ (8019054 <udp_new_port+0x6c>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	603b      	str	r3, [r7, #0]
 8019014:	e011      	b.n	801903a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	8a5a      	ldrh	r2, [r3, #18]
 801901a:	4b0d      	ldr	r3, [pc, #52]	@ (8019050 <udp_new_port+0x68>)
 801901c:	881b      	ldrh	r3, [r3, #0]
 801901e:	429a      	cmp	r2, r3
 8019020:	d108      	bne.n	8019034 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019022:	88fb      	ldrh	r3, [r7, #6]
 8019024:	3301      	adds	r3, #1
 8019026:	80fb      	strh	r3, [r7, #6]
 8019028:	88fb      	ldrh	r3, [r7, #6]
 801902a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801902e:	d3e0      	bcc.n	8018ff2 <udp_new_port+0xa>
        return 0;
 8019030:	2300      	movs	r3, #0
 8019032:	e007      	b.n	8019044 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	603b      	str	r3, [r7, #0]
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d1ea      	bne.n	8019016 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019040:	4b03      	ldr	r3, [pc, #12]	@ (8019050 <udp_new_port+0x68>)
 8019042:	881b      	ldrh	r3, [r3, #0]
}
 8019044:	4618      	mov	r0, r3
 8019046:	370c      	adds	r7, #12
 8019048:	46bd      	mov	sp, r7
 801904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904e:	4770      	bx	lr
 8019050:	2000002c 	.word	0x2000002c
 8019054:	20027578 	.word	0x20027578

08019058 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b084      	sub	sp, #16
 801905c:	af00      	add	r7, sp, #0
 801905e:	60f8      	str	r0, [r7, #12]
 8019060:	60b9      	str	r1, [r7, #8]
 8019062:	4613      	mov	r3, r2
 8019064:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d105      	bne.n	8019078 <udp_input_local_match+0x20>
 801906c:	4b27      	ldr	r3, [pc, #156]	@ (801910c <udp_input_local_match+0xb4>)
 801906e:	2287      	movs	r2, #135	@ 0x87
 8019070:	4927      	ldr	r1, [pc, #156]	@ (8019110 <udp_input_local_match+0xb8>)
 8019072:	4828      	ldr	r0, [pc, #160]	@ (8019114 <udp_input_local_match+0xbc>)
 8019074:	f004 fa14 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d105      	bne.n	801908a <udp_input_local_match+0x32>
 801907e:	4b23      	ldr	r3, [pc, #140]	@ (801910c <udp_input_local_match+0xb4>)
 8019080:	2288      	movs	r2, #136	@ 0x88
 8019082:	4925      	ldr	r1, [pc, #148]	@ (8019118 <udp_input_local_match+0xc0>)
 8019084:	4823      	ldr	r0, [pc, #140]	@ (8019114 <udp_input_local_match+0xbc>)
 8019086:	f004 fa0b 	bl	801d4a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	7a1b      	ldrb	r3, [r3, #8]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d00b      	beq.n	80190aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	7a1a      	ldrb	r2, [r3, #8]
 8019096:	4b21      	ldr	r3, [pc, #132]	@ (801911c <udp_input_local_match+0xc4>)
 8019098:	685b      	ldr	r3, [r3, #4]
 801909a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801909e:	3301      	adds	r3, #1
 80190a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d001      	beq.n	80190aa <udp_input_local_match+0x52>
    return 0;
 80190a6:	2300      	movs	r3, #0
 80190a8:	e02b      	b.n	8019102 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80190aa:	79fb      	ldrb	r3, [r7, #7]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d018      	beq.n	80190e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d013      	beq.n	80190de <udp_input_local_match+0x86>
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d00f      	beq.n	80190de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80190be:	4b17      	ldr	r3, [pc, #92]	@ (801911c <udp_input_local_match+0xc4>)
 80190c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80190c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190c6:	d00a      	beq.n	80190de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	681a      	ldr	r2, [r3, #0]
 80190cc:	4b13      	ldr	r3, [pc, #76]	@ (801911c <udp_input_local_match+0xc4>)
 80190ce:	695b      	ldr	r3, [r3, #20]
 80190d0:	405a      	eors	r2, r3
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	3308      	adds	r3, #8
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d110      	bne.n	8019100 <udp_input_local_match+0xa8>
          return 1;
 80190de:	2301      	movs	r3, #1
 80190e0:	e00f      	b.n	8019102 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d009      	beq.n	80190fc <udp_input_local_match+0xa4>
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d005      	beq.n	80190fc <udp_input_local_match+0xa4>
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	681a      	ldr	r2, [r3, #0]
 80190f4:	4b09      	ldr	r3, [pc, #36]	@ (801911c <udp_input_local_match+0xc4>)
 80190f6:	695b      	ldr	r3, [r3, #20]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d101      	bne.n	8019100 <udp_input_local_match+0xa8>
        return 1;
 80190fc:	2301      	movs	r3, #1
 80190fe:	e000      	b.n	8019102 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019100:	2300      	movs	r3, #0
}
 8019102:	4618      	mov	r0, r3
 8019104:	3710      	adds	r7, #16
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	08020700 	.word	0x08020700
 8019110:	08020730 	.word	0x08020730
 8019114:	08020754 	.word	0x08020754
 8019118:	0802077c 	.word	0x0802077c
 801911c:	2002441c 	.word	0x2002441c

08019120 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019120:	b590      	push	{r4, r7, lr}
 8019122:	b08d      	sub	sp, #52	@ 0x34
 8019124:	af02      	add	r7, sp, #8
 8019126:	6078      	str	r0, [r7, #4]
 8019128:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801912a:	2300      	movs	r3, #0
 801912c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d105      	bne.n	8019140 <udp_input+0x20>
 8019134:	4b7c      	ldr	r3, [pc, #496]	@ (8019328 <udp_input+0x208>)
 8019136:	22cf      	movs	r2, #207	@ 0xcf
 8019138:	497c      	ldr	r1, [pc, #496]	@ (801932c <udp_input+0x20c>)
 801913a:	487d      	ldr	r0, [pc, #500]	@ (8019330 <udp_input+0x210>)
 801913c:	f004 f9b0 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d105      	bne.n	8019152 <udp_input+0x32>
 8019146:	4b78      	ldr	r3, [pc, #480]	@ (8019328 <udp_input+0x208>)
 8019148:	22d0      	movs	r2, #208	@ 0xd0
 801914a:	497a      	ldr	r1, [pc, #488]	@ (8019334 <udp_input+0x214>)
 801914c:	4878      	ldr	r0, [pc, #480]	@ (8019330 <udp_input+0x210>)
 801914e:	f004 f9a7 	bl	801d4a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	895b      	ldrh	r3, [r3, #10]
 8019156:	2b07      	cmp	r3, #7
 8019158:	d803      	bhi.n	8019162 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801915a:	6878      	ldr	r0, [r7, #4]
 801915c:	f7fa f9b6 	bl	80134cc <pbuf_free>
    goto end;
 8019160:	e0de      	b.n	8019320 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019168:	4b73      	ldr	r3, [pc, #460]	@ (8019338 <udp_input+0x218>)
 801916a:	695b      	ldr	r3, [r3, #20]
 801916c:	4a72      	ldr	r2, [pc, #456]	@ (8019338 <udp_input+0x218>)
 801916e:	6812      	ldr	r2, [r2, #0]
 8019170:	4611      	mov	r1, r2
 8019172:	4618      	mov	r0, r3
 8019174:	f001 fefe 	bl	801af74 <ip4_addr_isbroadcast_u32>
 8019178:	4603      	mov	r3, r0
 801917a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	881b      	ldrh	r3, [r3, #0]
 8019180:	b29b      	uxth	r3, r3
 8019182:	4618      	mov	r0, r3
 8019184:	f7f8 fdb4 	bl	8011cf0 <lwip_htons>
 8019188:	4603      	mov	r3, r0
 801918a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	885b      	ldrh	r3, [r3, #2]
 8019190:	b29b      	uxth	r3, r3
 8019192:	4618      	mov	r0, r3
 8019194:	f7f8 fdac 	bl	8011cf0 <lwip_htons>
 8019198:	4603      	mov	r3, r0
 801919a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801919c:	2300      	movs	r3, #0
 801919e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80191a0:	2300      	movs	r3, #0
 80191a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80191a4:	2300      	movs	r3, #0
 80191a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80191a8:	4b64      	ldr	r3, [pc, #400]	@ (801933c <udp_input+0x21c>)
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80191ae:	e054      	b.n	801925a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80191b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b2:	8a5b      	ldrh	r3, [r3, #18]
 80191b4:	89fa      	ldrh	r2, [r7, #14]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d14a      	bne.n	8019250 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80191ba:	7cfb      	ldrb	r3, [r7, #19]
 80191bc:	461a      	mov	r2, r3
 80191be:	6839      	ldr	r1, [r7, #0]
 80191c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80191c2:	f7ff ff49 	bl	8019058 <udp_input_local_match>
 80191c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d041      	beq.n	8019250 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80191cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ce:	7c1b      	ldrb	r3, [r3, #16]
 80191d0:	f003 0304 	and.w	r3, r3, #4
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d11d      	bne.n	8019214 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80191d8:	69fb      	ldr	r3, [r7, #28]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d102      	bne.n	80191e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80191de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191e0:	61fb      	str	r3, [r7, #28]
 80191e2:	e017      	b.n	8019214 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80191e4:	7cfb      	ldrb	r3, [r7, #19]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d014      	beq.n	8019214 <udp_input+0xf4>
 80191ea:	4b53      	ldr	r3, [pc, #332]	@ (8019338 <udp_input+0x218>)
 80191ec:	695b      	ldr	r3, [r3, #20]
 80191ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191f2:	d10f      	bne.n	8019214 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80191f4:	69fb      	ldr	r3, [r7, #28]
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	3304      	adds	r3, #4
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	429a      	cmp	r2, r3
 8019200:	d008      	beq.n	8019214 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	3304      	adds	r3, #4
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	429a      	cmp	r2, r3
 801920e:	d101      	bne.n	8019214 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019212:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019216:	8a9b      	ldrh	r3, [r3, #20]
 8019218:	8a3a      	ldrh	r2, [r7, #16]
 801921a:	429a      	cmp	r2, r3
 801921c:	d118      	bne.n	8019250 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019220:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019222:	2b00      	cmp	r3, #0
 8019224:	d005      	beq.n	8019232 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019228:	685a      	ldr	r2, [r3, #4]
 801922a:	4b43      	ldr	r3, [pc, #268]	@ (8019338 <udp_input+0x218>)
 801922c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801922e:	429a      	cmp	r2, r3
 8019230:	d10e      	bne.n	8019250 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019232:	6a3b      	ldr	r3, [r7, #32]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d014      	beq.n	8019262 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801923a:	68da      	ldr	r2, [r3, #12]
 801923c:	6a3b      	ldr	r3, [r7, #32]
 801923e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019240:	4b3e      	ldr	r3, [pc, #248]	@ (801933c <udp_input+0x21c>)
 8019242:	681a      	ldr	r2, [r3, #0]
 8019244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019246:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019248:	4a3c      	ldr	r2, [pc, #240]	@ (801933c <udp_input+0x21c>)
 801924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801924c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801924e:	e008      	b.n	8019262 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019252:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	627b      	str	r3, [r7, #36]	@ 0x24
 801925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801925c:	2b00      	cmp	r3, #0
 801925e:	d1a7      	bne.n	80191b0 <udp_input+0x90>
 8019260:	e000      	b.n	8019264 <udp_input+0x144>
        break;
 8019262:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019266:	2b00      	cmp	r3, #0
 8019268:	d101      	bne.n	801926e <udp_input+0x14e>
    pcb = uncon_pcb;
 801926a:	69fb      	ldr	r3, [r7, #28]
 801926c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019270:	2b00      	cmp	r3, #0
 8019272:	d002      	beq.n	801927a <udp_input+0x15a>
    for_us = 1;
 8019274:	2301      	movs	r3, #1
 8019276:	76fb      	strb	r3, [r7, #27]
 8019278:	e00a      	b.n	8019290 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	3304      	adds	r3, #4
 801927e:	681a      	ldr	r2, [r3, #0]
 8019280:	4b2d      	ldr	r3, [pc, #180]	@ (8019338 <udp_input+0x218>)
 8019282:	695b      	ldr	r3, [r3, #20]
 8019284:	429a      	cmp	r2, r3
 8019286:	bf0c      	ite	eq
 8019288:	2301      	moveq	r3, #1
 801928a:	2300      	movne	r3, #0
 801928c:	b2db      	uxtb	r3, r3
 801928e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019290:	7efb      	ldrb	r3, [r7, #27]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d041      	beq.n	801931a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019296:	2108      	movs	r1, #8
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7fa f891 	bl	80133c0 <pbuf_remove_header>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d00a      	beq.n	80192ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80192a4:	4b20      	ldr	r3, [pc, #128]	@ (8019328 <udp_input+0x208>)
 80192a6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80192aa:	4925      	ldr	r1, [pc, #148]	@ (8019340 <udp_input+0x220>)
 80192ac:	4820      	ldr	r0, [pc, #128]	@ (8019330 <udp_input+0x210>)
 80192ae:	f004 f8f7 	bl	801d4a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f7fa f90a 	bl	80134cc <pbuf_free>
      goto end;
 80192b8:	e032      	b.n	8019320 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80192ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d012      	beq.n	80192e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80192c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c2:	699b      	ldr	r3, [r3, #24]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d00a      	beq.n	80192de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80192c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ca:	699c      	ldr	r4, [r3, #24]
 80192cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ce:	69d8      	ldr	r0, [r3, #28]
 80192d0:	8a3b      	ldrh	r3, [r7, #16]
 80192d2:	9300      	str	r3, [sp, #0]
 80192d4:	4b1b      	ldr	r3, [pc, #108]	@ (8019344 <udp_input+0x224>)
 80192d6:	687a      	ldr	r2, [r7, #4]
 80192d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80192da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80192dc:	e021      	b.n	8019322 <udp_input+0x202>
        pbuf_free(p);
 80192de:	6878      	ldr	r0, [r7, #4]
 80192e0:	f7fa f8f4 	bl	80134cc <pbuf_free>
        goto end;
 80192e4:	e01c      	b.n	8019320 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80192e6:	7cfb      	ldrb	r3, [r7, #19]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d112      	bne.n	8019312 <udp_input+0x1f2>
 80192ec:	4b12      	ldr	r3, [pc, #72]	@ (8019338 <udp_input+0x218>)
 80192ee:	695b      	ldr	r3, [r3, #20]
 80192f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80192f4:	2be0      	cmp	r3, #224	@ 0xe0
 80192f6:	d00c      	beq.n	8019312 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80192f8:	4b0f      	ldr	r3, [pc, #60]	@ (8019338 <udp_input+0x218>)
 80192fa:	899b      	ldrh	r3, [r3, #12]
 80192fc:	3308      	adds	r3, #8
 80192fe:	b29b      	uxth	r3, r3
 8019300:	b21b      	sxth	r3, r3
 8019302:	4619      	mov	r1, r3
 8019304:	6878      	ldr	r0, [r7, #4]
 8019306:	f7fa f8ce 	bl	80134a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801930a:	2103      	movs	r1, #3
 801930c:	6878      	ldr	r0, [r7, #4]
 801930e:	f001 fb11 	bl	801a934 <icmp_dest_unreach>
      pbuf_free(p);
 8019312:	6878      	ldr	r0, [r7, #4]
 8019314:	f7fa f8da 	bl	80134cc <pbuf_free>
  return;
 8019318:	e003      	b.n	8019322 <udp_input+0x202>
    pbuf_free(p);
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f7fa f8d6 	bl	80134cc <pbuf_free>
  return;
 8019320:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019322:	372c      	adds	r7, #44	@ 0x2c
 8019324:	46bd      	mov	sp, r7
 8019326:	bd90      	pop	{r4, r7, pc}
 8019328:	08020700 	.word	0x08020700
 801932c:	080207a4 	.word	0x080207a4
 8019330:	08020754 	.word	0x08020754
 8019334:	080207bc 	.word	0x080207bc
 8019338:	2002441c 	.word	0x2002441c
 801933c:	20027578 	.word	0x20027578
 8019340:	080207d8 	.word	0x080207d8
 8019344:	2002442c 	.word	0x2002442c

08019348 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b088      	sub	sp, #32
 801934c:	af02      	add	r7, sp, #8
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	607a      	str	r2, [r7, #4]
 8019354:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d109      	bne.n	8019370 <udp_sendto+0x28>
 801935c:	4b23      	ldr	r3, [pc, #140]	@ (80193ec <udp_sendto+0xa4>)
 801935e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019362:	4923      	ldr	r1, [pc, #140]	@ (80193f0 <udp_sendto+0xa8>)
 8019364:	4823      	ldr	r0, [pc, #140]	@ (80193f4 <udp_sendto+0xac>)
 8019366:	f004 f89b 	bl	801d4a0 <iprintf>
 801936a:	f06f 030f 	mvn.w	r3, #15
 801936e:	e038      	b.n	80193e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019370:	68bb      	ldr	r3, [r7, #8]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d109      	bne.n	801938a <udp_sendto+0x42>
 8019376:	4b1d      	ldr	r3, [pc, #116]	@ (80193ec <udp_sendto+0xa4>)
 8019378:	f240 2219 	movw	r2, #537	@ 0x219
 801937c:	491e      	ldr	r1, [pc, #120]	@ (80193f8 <udp_sendto+0xb0>)
 801937e:	481d      	ldr	r0, [pc, #116]	@ (80193f4 <udp_sendto+0xac>)
 8019380:	f004 f88e 	bl	801d4a0 <iprintf>
 8019384:	f06f 030f 	mvn.w	r3, #15
 8019388:	e02b      	b.n	80193e2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d109      	bne.n	80193a4 <udp_sendto+0x5c>
 8019390:	4b16      	ldr	r3, [pc, #88]	@ (80193ec <udp_sendto+0xa4>)
 8019392:	f240 221a 	movw	r2, #538	@ 0x21a
 8019396:	4919      	ldr	r1, [pc, #100]	@ (80193fc <udp_sendto+0xb4>)
 8019398:	4816      	ldr	r0, [pc, #88]	@ (80193f4 <udp_sendto+0xac>)
 801939a:	f004 f881 	bl	801d4a0 <iprintf>
 801939e:	f06f 030f 	mvn.w	r3, #15
 80193a2:	e01e      	b.n	80193e2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	7a1b      	ldrb	r3, [r3, #8]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d006      	beq.n	80193ba <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	7a1b      	ldrb	r3, [r3, #8]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f7f9 fcfd 	bl	8012db0 <netif_get_by_index>
 80193b6:	6178      	str	r0, [r7, #20]
 80193b8:	e003      	b.n	80193c2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f001 fb44 	bl	801aa48 <ip4_route>
 80193c0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d102      	bne.n	80193ce <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80193c8:	f06f 0303 	mvn.w	r3, #3
 80193cc:	e009      	b.n	80193e2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80193ce:	887a      	ldrh	r2, [r7, #2]
 80193d0:	697b      	ldr	r3, [r7, #20]
 80193d2:	9300      	str	r3, [sp, #0]
 80193d4:	4613      	mov	r3, r2
 80193d6:	687a      	ldr	r2, [r7, #4]
 80193d8:	68b9      	ldr	r1, [r7, #8]
 80193da:	68f8      	ldr	r0, [r7, #12]
 80193dc:	f000 f810 	bl	8019400 <udp_sendto_if>
 80193e0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	3718      	adds	r7, #24
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	08020700 	.word	0x08020700
 80193f0:	08020824 	.word	0x08020824
 80193f4:	08020754 	.word	0x08020754
 80193f8:	0802083c 	.word	0x0802083c
 80193fc:	08020858 	.word	0x08020858

08019400 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b088      	sub	sp, #32
 8019404:	af02      	add	r7, sp, #8
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	607a      	str	r2, [r7, #4]
 801940c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d109      	bne.n	8019428 <udp_sendto_if+0x28>
 8019414:	4b2e      	ldr	r3, [pc, #184]	@ (80194d0 <udp_sendto_if+0xd0>)
 8019416:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801941a:	492e      	ldr	r1, [pc, #184]	@ (80194d4 <udp_sendto_if+0xd4>)
 801941c:	482e      	ldr	r0, [pc, #184]	@ (80194d8 <udp_sendto_if+0xd8>)
 801941e:	f004 f83f 	bl	801d4a0 <iprintf>
 8019422:	f06f 030f 	mvn.w	r3, #15
 8019426:	e04f      	b.n	80194c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019428:	68bb      	ldr	r3, [r7, #8]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d109      	bne.n	8019442 <udp_sendto_if+0x42>
 801942e:	4b28      	ldr	r3, [pc, #160]	@ (80194d0 <udp_sendto_if+0xd0>)
 8019430:	f240 2281 	movw	r2, #641	@ 0x281
 8019434:	4929      	ldr	r1, [pc, #164]	@ (80194dc <udp_sendto_if+0xdc>)
 8019436:	4828      	ldr	r0, [pc, #160]	@ (80194d8 <udp_sendto_if+0xd8>)
 8019438:	f004 f832 	bl	801d4a0 <iprintf>
 801943c:	f06f 030f 	mvn.w	r3, #15
 8019440:	e042      	b.n	80194c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d109      	bne.n	801945c <udp_sendto_if+0x5c>
 8019448:	4b21      	ldr	r3, [pc, #132]	@ (80194d0 <udp_sendto_if+0xd0>)
 801944a:	f240 2282 	movw	r2, #642	@ 0x282
 801944e:	4924      	ldr	r1, [pc, #144]	@ (80194e0 <udp_sendto_if+0xe0>)
 8019450:	4821      	ldr	r0, [pc, #132]	@ (80194d8 <udp_sendto_if+0xd8>)
 8019452:	f004 f825 	bl	801d4a0 <iprintf>
 8019456:	f06f 030f 	mvn.w	r3, #15
 801945a:	e035      	b.n	80194c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801945c:	6a3b      	ldr	r3, [r7, #32]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d109      	bne.n	8019476 <udp_sendto_if+0x76>
 8019462:	4b1b      	ldr	r3, [pc, #108]	@ (80194d0 <udp_sendto_if+0xd0>)
 8019464:	f240 2283 	movw	r2, #643	@ 0x283
 8019468:	491e      	ldr	r1, [pc, #120]	@ (80194e4 <udp_sendto_if+0xe4>)
 801946a:	481b      	ldr	r0, [pc, #108]	@ (80194d8 <udp_sendto_if+0xd8>)
 801946c:	f004 f818 	bl	801d4a0 <iprintf>
 8019470:	f06f 030f 	mvn.w	r3, #15
 8019474:	e028      	b.n	80194c8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d009      	beq.n	8019490 <udp_sendto_if+0x90>
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d005      	beq.n	8019490 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801948c:	2be0      	cmp	r3, #224	@ 0xe0
 801948e:	d103      	bne.n	8019498 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019490:	6a3b      	ldr	r3, [r7, #32]
 8019492:	3304      	adds	r3, #4
 8019494:	617b      	str	r3, [r7, #20]
 8019496:	e00b      	b.n	80194b0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	6a3b      	ldr	r3, [r7, #32]
 801949e:	3304      	adds	r3, #4
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d002      	beq.n	80194ac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80194a6:	f06f 0303 	mvn.w	r3, #3
 80194aa:	e00d      	b.n	80194c8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80194b0:	887a      	ldrh	r2, [r7, #2]
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	9301      	str	r3, [sp, #4]
 80194b6:	6a3b      	ldr	r3, [r7, #32]
 80194b8:	9300      	str	r3, [sp, #0]
 80194ba:	4613      	mov	r3, r2
 80194bc:	687a      	ldr	r2, [r7, #4]
 80194be:	68b9      	ldr	r1, [r7, #8]
 80194c0:	68f8      	ldr	r0, [r7, #12]
 80194c2:	f000 f811 	bl	80194e8 <udp_sendto_if_src>
 80194c6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	3718      	adds	r7, #24
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	08020700 	.word	0x08020700
 80194d4:	08020874 	.word	0x08020874
 80194d8:	08020754 	.word	0x08020754
 80194dc:	08020890 	.word	0x08020890
 80194e0:	080208ac 	.word	0x080208ac
 80194e4:	080208cc 	.word	0x080208cc

080194e8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b08c      	sub	sp, #48	@ 0x30
 80194ec:	af04      	add	r7, sp, #16
 80194ee:	60f8      	str	r0, [r7, #12]
 80194f0:	60b9      	str	r1, [r7, #8]
 80194f2:	607a      	str	r2, [r7, #4]
 80194f4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d109      	bne.n	8019510 <udp_sendto_if_src+0x28>
 80194fc:	4b65      	ldr	r3, [pc, #404]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 80194fe:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019502:	4965      	ldr	r1, [pc, #404]	@ (8019698 <udp_sendto_if_src+0x1b0>)
 8019504:	4865      	ldr	r0, [pc, #404]	@ (801969c <udp_sendto_if_src+0x1b4>)
 8019506:	f003 ffcb 	bl	801d4a0 <iprintf>
 801950a:	f06f 030f 	mvn.w	r3, #15
 801950e:	e0bc      	b.n	801968a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d109      	bne.n	801952a <udp_sendto_if_src+0x42>
 8019516:	4b5f      	ldr	r3, [pc, #380]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 8019518:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801951c:	4960      	ldr	r1, [pc, #384]	@ (80196a0 <udp_sendto_if_src+0x1b8>)
 801951e:	485f      	ldr	r0, [pc, #380]	@ (801969c <udp_sendto_if_src+0x1b4>)
 8019520:	f003 ffbe 	bl	801d4a0 <iprintf>
 8019524:	f06f 030f 	mvn.w	r3, #15
 8019528:	e0af      	b.n	801968a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d109      	bne.n	8019544 <udp_sendto_if_src+0x5c>
 8019530:	4b58      	ldr	r3, [pc, #352]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 8019532:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019536:	495b      	ldr	r1, [pc, #364]	@ (80196a4 <udp_sendto_if_src+0x1bc>)
 8019538:	4858      	ldr	r0, [pc, #352]	@ (801969c <udp_sendto_if_src+0x1b4>)
 801953a:	f003 ffb1 	bl	801d4a0 <iprintf>
 801953e:	f06f 030f 	mvn.w	r3, #15
 8019542:	e0a2      	b.n	801968a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019546:	2b00      	cmp	r3, #0
 8019548:	d109      	bne.n	801955e <udp_sendto_if_src+0x76>
 801954a:	4b52      	ldr	r3, [pc, #328]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 801954c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019550:	4955      	ldr	r1, [pc, #340]	@ (80196a8 <udp_sendto_if_src+0x1c0>)
 8019552:	4852      	ldr	r0, [pc, #328]	@ (801969c <udp_sendto_if_src+0x1b4>)
 8019554:	f003 ffa4 	bl	801d4a0 <iprintf>
 8019558:	f06f 030f 	mvn.w	r3, #15
 801955c:	e095      	b.n	801968a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019560:	2b00      	cmp	r3, #0
 8019562:	d109      	bne.n	8019578 <udp_sendto_if_src+0x90>
 8019564:	4b4b      	ldr	r3, [pc, #300]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 8019566:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801956a:	4950      	ldr	r1, [pc, #320]	@ (80196ac <udp_sendto_if_src+0x1c4>)
 801956c:	484b      	ldr	r0, [pc, #300]	@ (801969c <udp_sendto_if_src+0x1b4>)
 801956e:	f003 ff97 	bl	801d4a0 <iprintf>
 8019572:	f06f 030f 	mvn.w	r3, #15
 8019576:	e088      	b.n	801968a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	8a5b      	ldrh	r3, [r3, #18]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d10f      	bne.n	80195a0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019580:	68f9      	ldr	r1, [r7, #12]
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	8a5b      	ldrh	r3, [r3, #18]
 8019586:	461a      	mov	r2, r3
 8019588:	68f8      	ldr	r0, [r7, #12]
 801958a:	f000 f893 	bl	80196b4 <udp_bind>
 801958e:	4603      	mov	r3, r0
 8019590:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019592:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d002      	beq.n	80195a0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801959a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801959e:	e074      	b.n	801968a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80195a0:	68bb      	ldr	r3, [r7, #8]
 80195a2:	891b      	ldrh	r3, [r3, #8]
 80195a4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80195a8:	4293      	cmp	r3, r2
 80195aa:	d902      	bls.n	80195b2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80195ac:	f04f 33ff 	mov.w	r3, #4294967295
 80195b0:	e06b      	b.n	801968a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80195b2:	2108      	movs	r1, #8
 80195b4:	68b8      	ldr	r0, [r7, #8]
 80195b6:	f7f9 fef3 	bl	80133a0 <pbuf_add_header>
 80195ba:	4603      	mov	r3, r0
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d015      	beq.n	80195ec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80195c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80195c4:	2108      	movs	r1, #8
 80195c6:	2022      	movs	r0, #34	@ 0x22
 80195c8:	f7f9 fc9c 	bl	8012f04 <pbuf_alloc>
 80195cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80195ce:	69fb      	ldr	r3, [r7, #28]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d102      	bne.n	80195da <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80195d4:	f04f 33ff 	mov.w	r3, #4294967295
 80195d8:	e057      	b.n	801968a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80195da:	68bb      	ldr	r3, [r7, #8]
 80195dc:	891b      	ldrh	r3, [r3, #8]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d006      	beq.n	80195f0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80195e2:	68b9      	ldr	r1, [r7, #8]
 80195e4:	69f8      	ldr	r0, [r7, #28]
 80195e6:	f7fa f895 	bl	8013714 <pbuf_chain>
 80195ea:	e001      	b.n	80195f0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	895b      	ldrh	r3, [r3, #10]
 80195f4:	2b07      	cmp	r3, #7
 80195f6:	d806      	bhi.n	8019606 <udp_sendto_if_src+0x11e>
 80195f8:	4b26      	ldr	r3, [pc, #152]	@ (8019694 <udp_sendto_if_src+0x1ac>)
 80195fa:	f240 320d 	movw	r2, #781	@ 0x30d
 80195fe:	492c      	ldr	r1, [pc, #176]	@ (80196b0 <udp_sendto_if_src+0x1c8>)
 8019600:	4826      	ldr	r0, [pc, #152]	@ (801969c <udp_sendto_if_src+0x1b4>)
 8019602:	f003 ff4d 	bl	801d4a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019606:	69fb      	ldr	r3, [r7, #28]
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	8a5b      	ldrh	r3, [r3, #18]
 8019610:	4618      	mov	r0, r3
 8019612:	f7f8 fb6d 	bl	8011cf0 <lwip_htons>
 8019616:	4603      	mov	r3, r0
 8019618:	461a      	mov	r2, r3
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801961e:	887b      	ldrh	r3, [r7, #2]
 8019620:	4618      	mov	r0, r3
 8019622:	f7f8 fb65 	bl	8011cf0 <lwip_htons>
 8019626:	4603      	mov	r3, r0
 8019628:	461a      	mov	r2, r3
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	2200      	movs	r2, #0
 8019632:	719a      	strb	r2, [r3, #6]
 8019634:	2200      	movs	r2, #0
 8019636:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	891b      	ldrh	r3, [r3, #8]
 801963c:	4618      	mov	r0, r3
 801963e:	f7f8 fb57 	bl	8011cf0 <lwip_htons>
 8019642:	4603      	mov	r3, r0
 8019644:	461a      	mov	r2, r3
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801964a:	2311      	movs	r3, #17
 801964c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	7adb      	ldrb	r3, [r3, #11]
 8019652:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	7a9b      	ldrb	r3, [r3, #10]
 8019658:	7cb9      	ldrb	r1, [r7, #18]
 801965a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801965c:	9202      	str	r2, [sp, #8]
 801965e:	7cfa      	ldrb	r2, [r7, #19]
 8019660:	9201      	str	r2, [sp, #4]
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	460b      	mov	r3, r1
 8019666:	687a      	ldr	r2, [r7, #4]
 8019668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801966a:	69f8      	ldr	r0, [r7, #28]
 801966c:	f001 fbd4 	bl	801ae18 <ip4_output_if_src>
 8019670:	4603      	mov	r3, r0
 8019672:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019674:	69fa      	ldr	r2, [r7, #28]
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	429a      	cmp	r2, r3
 801967a:	d004      	beq.n	8019686 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801967c:	69f8      	ldr	r0, [r7, #28]
 801967e:	f7f9 ff25 	bl	80134cc <pbuf_free>
    q = NULL;
 8019682:	2300      	movs	r3, #0
 8019684:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019686:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801968a:	4618      	mov	r0, r3
 801968c:	3720      	adds	r7, #32
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
 8019692:	bf00      	nop
 8019694:	08020700 	.word	0x08020700
 8019698:	080208ec 	.word	0x080208ec
 801969c:	08020754 	.word	0x08020754
 80196a0:	0802090c 	.word	0x0802090c
 80196a4:	0802092c 	.word	0x0802092c
 80196a8:	08020950 	.word	0x08020950
 80196ac:	08020974 	.word	0x08020974
 80196b0:	08020998 	.word	0x08020998

080196b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b086      	sub	sp, #24
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	60b9      	str	r1, [r7, #8]
 80196be:	4613      	mov	r3, r2
 80196c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80196c2:	68bb      	ldr	r3, [r7, #8]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d101      	bne.n	80196cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80196c8:	4b39      	ldr	r3, [pc, #228]	@ (80197b0 <udp_bind+0xfc>)
 80196ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d109      	bne.n	80196e6 <udp_bind+0x32>
 80196d2:	4b38      	ldr	r3, [pc, #224]	@ (80197b4 <udp_bind+0x100>)
 80196d4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80196d8:	4937      	ldr	r1, [pc, #220]	@ (80197b8 <udp_bind+0x104>)
 80196da:	4838      	ldr	r0, [pc, #224]	@ (80197bc <udp_bind+0x108>)
 80196dc:	f003 fee0 	bl	801d4a0 <iprintf>
 80196e0:	f06f 030f 	mvn.w	r3, #15
 80196e4:	e060      	b.n	80197a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80196e6:	2300      	movs	r3, #0
 80196e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80196ea:	4b35      	ldr	r3, [pc, #212]	@ (80197c0 <udp_bind+0x10c>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	617b      	str	r3, [r7, #20]
 80196f0:	e009      	b.n	8019706 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80196f2:	68fa      	ldr	r2, [r7, #12]
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d102      	bne.n	8019700 <udp_bind+0x4c>
      rebind = 1;
 80196fa:	2301      	movs	r3, #1
 80196fc:	74fb      	strb	r3, [r7, #19]
      break;
 80196fe:	e005      	b.n	801970c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	68db      	ldr	r3, [r3, #12]
 8019704:	617b      	str	r3, [r7, #20]
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d1f2      	bne.n	80196f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801970c:	88fb      	ldrh	r3, [r7, #6]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d109      	bne.n	8019726 <udp_bind+0x72>
    port = udp_new_port();
 8019712:	f7ff fc69 	bl	8018fe8 <udp_new_port>
 8019716:	4603      	mov	r3, r0
 8019718:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801971a:	88fb      	ldrh	r3, [r7, #6]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d12c      	bne.n	801977a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019720:	f06f 0307 	mvn.w	r3, #7
 8019724:	e040      	b.n	80197a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019726:	4b26      	ldr	r3, [pc, #152]	@ (80197c0 <udp_bind+0x10c>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	617b      	str	r3, [r7, #20]
 801972c:	e022      	b.n	8019774 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801972e:	68fa      	ldr	r2, [r7, #12]
 8019730:	697b      	ldr	r3, [r7, #20]
 8019732:	429a      	cmp	r2, r3
 8019734:	d01b      	beq.n	801976e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019736:	697b      	ldr	r3, [r7, #20]
 8019738:	8a5b      	ldrh	r3, [r3, #18]
 801973a:	88fa      	ldrh	r2, [r7, #6]
 801973c:	429a      	cmp	r2, r3
 801973e:	d116      	bne.n	801976e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019748:	429a      	cmp	r2, r3
 801974a:	d00d      	beq.n	8019768 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801974c:	68bb      	ldr	r3, [r7, #8]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d00a      	beq.n	8019768 <udp_bind+0xb4>
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d006      	beq.n	8019768 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801975a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801975c:	2b00      	cmp	r3, #0
 801975e:	d003      	beq.n	8019768 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019760:	697b      	ldr	r3, [r7, #20]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d102      	bne.n	801976e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019768:	f06f 0307 	mvn.w	r3, #7
 801976c:	e01c      	b.n	80197a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801976e:	697b      	ldr	r3, [r7, #20]
 8019770:	68db      	ldr	r3, [r3, #12]
 8019772:	617b      	str	r3, [r7, #20]
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d1d9      	bne.n	801972e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d002      	beq.n	8019786 <udp_bind+0xd2>
 8019780:	68bb      	ldr	r3, [r7, #8]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	e000      	b.n	8019788 <udp_bind+0xd4>
 8019786:	2300      	movs	r3, #0
 8019788:	68fa      	ldr	r2, [r7, #12]
 801978a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	88fa      	ldrh	r2, [r7, #6]
 8019790:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019792:	7cfb      	ldrb	r3, [r7, #19]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d106      	bne.n	80197a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019798:	4b09      	ldr	r3, [pc, #36]	@ (80197c0 <udp_bind+0x10c>)
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80197a0:	4a07      	ldr	r2, [pc, #28]	@ (80197c0 <udp_bind+0x10c>)
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80197a6:	2300      	movs	r3, #0
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3718      	adds	r7, #24
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	08021aa4 	.word	0x08021aa4
 80197b4:	08020700 	.word	0x08020700
 80197b8:	080209c8 	.word	0x080209c8
 80197bc:	08020754 	.word	0x08020754
 80197c0:	20027578 	.word	0x20027578

080197c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b084      	sub	sp, #16
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	60f8      	str	r0, [r7, #12]
 80197cc:	60b9      	str	r1, [r7, #8]
 80197ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d107      	bne.n	80197e6 <udp_recv+0x22>
 80197d6:	4b08      	ldr	r3, [pc, #32]	@ (80197f8 <udp_recv+0x34>)
 80197d8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80197dc:	4907      	ldr	r1, [pc, #28]	@ (80197fc <udp_recv+0x38>)
 80197de:	4808      	ldr	r0, [pc, #32]	@ (8019800 <udp_recv+0x3c>)
 80197e0:	f003 fe5e 	bl	801d4a0 <iprintf>
 80197e4:	e005      	b.n	80197f2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	68ba      	ldr	r2, [r7, #8]
 80197ea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	687a      	ldr	r2, [r7, #4]
 80197f0:	61da      	str	r2, [r3, #28]
}
 80197f2:	3710      	adds	r7, #16
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	08020700 	.word	0x08020700
 80197fc:	08020a34 	.word	0x08020a34
 8019800:	08020754 	.word	0x08020754

08019804 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801980a:	2000      	movs	r0, #0
 801980c:	f7f8 ff44 	bl	8012698 <memp_malloc>
 8019810:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d007      	beq.n	8019828 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019818:	2220      	movs	r2, #32
 801981a:	2100      	movs	r1, #0
 801981c:	6878      	ldr	r0, [r7, #4]
 801981e:	f003 fea4 	bl	801d56a <memset>
    pcb->ttl = UDP_TTL;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	22ff      	movs	r2, #255	@ 0xff
 8019826:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019828:	687b      	ldr	r3, [r7, #4]
}
 801982a:	4618      	mov	r0, r3
 801982c:	3708      	adds	r7, #8
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
	...

08019834 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019834:	b480      	push	{r7}
 8019836:	b085      	sub	sp, #20
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
 801983c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d01e      	beq.n	8019882 <udp_netif_ip_addr_changed+0x4e>
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d01a      	beq.n	8019882 <udp_netif_ip_addr_changed+0x4e>
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d017      	beq.n	8019882 <udp_netif_ip_addr_changed+0x4e>
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d013      	beq.n	8019882 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801985a:	4b0d      	ldr	r3, [pc, #52]	@ (8019890 <udp_netif_ip_addr_changed+0x5c>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	60fb      	str	r3, [r7, #12]
 8019860:	e00c      	b.n	801987c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	681a      	ldr	r2, [r3, #0]
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	429a      	cmp	r2, r3
 801986c:	d103      	bne.n	8019876 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801986e:	683b      	ldr	r3, [r7, #0]
 8019870:	681a      	ldr	r2, [r3, #0]
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	60fb      	str	r3, [r7, #12]
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d1ef      	bne.n	8019862 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019882:	bf00      	nop
 8019884:	3714      	adds	r7, #20
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	20027578 	.word	0x20027578

08019894 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b082      	sub	sp, #8
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801989c:	4915      	ldr	r1, [pc, #84]	@ (80198f4 <etharp_free_entry+0x60>)
 801989e:	687a      	ldr	r2, [r7, #4]
 80198a0:	4613      	mov	r3, r2
 80198a2:	005b      	lsls	r3, r3, #1
 80198a4:	4413      	add	r3, r2
 80198a6:	00db      	lsls	r3, r3, #3
 80198a8:	440b      	add	r3, r1
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d013      	beq.n	80198d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80198b0:	4910      	ldr	r1, [pc, #64]	@ (80198f4 <etharp_free_entry+0x60>)
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	4613      	mov	r3, r2
 80198b6:	005b      	lsls	r3, r3, #1
 80198b8:	4413      	add	r3, r2
 80198ba:	00db      	lsls	r3, r3, #3
 80198bc:	440b      	add	r3, r1
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7f9 fe03 	bl	80134cc <pbuf_free>
    arp_table[i].q = NULL;
 80198c6:	490b      	ldr	r1, [pc, #44]	@ (80198f4 <etharp_free_entry+0x60>)
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	4613      	mov	r3, r2
 80198cc:	005b      	lsls	r3, r3, #1
 80198ce:	4413      	add	r3, r2
 80198d0:	00db      	lsls	r3, r3, #3
 80198d2:	440b      	add	r3, r1
 80198d4:	2200      	movs	r2, #0
 80198d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80198d8:	4906      	ldr	r1, [pc, #24]	@ (80198f4 <etharp_free_entry+0x60>)
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	4613      	mov	r3, r2
 80198de:	005b      	lsls	r3, r3, #1
 80198e0:	4413      	add	r3, r2
 80198e2:	00db      	lsls	r3, r3, #3
 80198e4:	440b      	add	r3, r1
 80198e6:	3314      	adds	r3, #20
 80198e8:	2200      	movs	r2, #0
 80198ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80198ec:	bf00      	nop
 80198ee:	3708      	adds	r7, #8
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	2002757c 	.word	0x2002757c

080198f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80198fe:	2300      	movs	r3, #0
 8019900:	607b      	str	r3, [r7, #4]
 8019902:	e096      	b.n	8019a32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019904:	494f      	ldr	r1, [pc, #316]	@ (8019a44 <etharp_tmr+0x14c>)
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	4613      	mov	r3, r2
 801990a:	005b      	lsls	r3, r3, #1
 801990c:	4413      	add	r3, r2
 801990e:	00db      	lsls	r3, r3, #3
 8019910:	440b      	add	r3, r1
 8019912:	3314      	adds	r3, #20
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019918:	78fb      	ldrb	r3, [r7, #3]
 801991a:	2b00      	cmp	r3, #0
 801991c:	f000 8086 	beq.w	8019a2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019920:	4948      	ldr	r1, [pc, #288]	@ (8019a44 <etharp_tmr+0x14c>)
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	4613      	mov	r3, r2
 8019926:	005b      	lsls	r3, r3, #1
 8019928:	4413      	add	r3, r2
 801992a:	00db      	lsls	r3, r3, #3
 801992c:	440b      	add	r3, r1
 801992e:	3312      	adds	r3, #18
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	3301      	adds	r3, #1
 8019934:	b298      	uxth	r0, r3
 8019936:	4943      	ldr	r1, [pc, #268]	@ (8019a44 <etharp_tmr+0x14c>)
 8019938:	687a      	ldr	r2, [r7, #4]
 801993a:	4613      	mov	r3, r2
 801993c:	005b      	lsls	r3, r3, #1
 801993e:	4413      	add	r3, r2
 8019940:	00db      	lsls	r3, r3, #3
 8019942:	440b      	add	r3, r1
 8019944:	3312      	adds	r3, #18
 8019946:	4602      	mov	r2, r0
 8019948:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801994a:	493e      	ldr	r1, [pc, #248]	@ (8019a44 <etharp_tmr+0x14c>)
 801994c:	687a      	ldr	r2, [r7, #4]
 801994e:	4613      	mov	r3, r2
 8019950:	005b      	lsls	r3, r3, #1
 8019952:	4413      	add	r3, r2
 8019954:	00db      	lsls	r3, r3, #3
 8019956:	440b      	add	r3, r1
 8019958:	3312      	adds	r3, #18
 801995a:	881b      	ldrh	r3, [r3, #0]
 801995c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8019960:	d215      	bcs.n	801998e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019962:	4938      	ldr	r1, [pc, #224]	@ (8019a44 <etharp_tmr+0x14c>)
 8019964:	687a      	ldr	r2, [r7, #4]
 8019966:	4613      	mov	r3, r2
 8019968:	005b      	lsls	r3, r3, #1
 801996a:	4413      	add	r3, r2
 801996c:	00db      	lsls	r3, r3, #3
 801996e:	440b      	add	r3, r1
 8019970:	3314      	adds	r3, #20
 8019972:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019974:	2b01      	cmp	r3, #1
 8019976:	d10e      	bne.n	8019996 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019978:	4932      	ldr	r1, [pc, #200]	@ (8019a44 <etharp_tmr+0x14c>)
 801997a:	687a      	ldr	r2, [r7, #4]
 801997c:	4613      	mov	r3, r2
 801997e:	005b      	lsls	r3, r3, #1
 8019980:	4413      	add	r3, r2
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	440b      	add	r3, r1
 8019986:	3312      	adds	r3, #18
 8019988:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801998a:	2b04      	cmp	r3, #4
 801998c:	d903      	bls.n	8019996 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f7ff ff80 	bl	8019894 <etharp_free_entry>
 8019994:	e04a      	b.n	8019a2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019996:	492b      	ldr	r1, [pc, #172]	@ (8019a44 <etharp_tmr+0x14c>)
 8019998:	687a      	ldr	r2, [r7, #4]
 801999a:	4613      	mov	r3, r2
 801999c:	005b      	lsls	r3, r3, #1
 801999e:	4413      	add	r3, r2
 80199a0:	00db      	lsls	r3, r3, #3
 80199a2:	440b      	add	r3, r1
 80199a4:	3314      	adds	r3, #20
 80199a6:	781b      	ldrb	r3, [r3, #0]
 80199a8:	2b03      	cmp	r3, #3
 80199aa:	d10a      	bne.n	80199c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80199ac:	4925      	ldr	r1, [pc, #148]	@ (8019a44 <etharp_tmr+0x14c>)
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	4613      	mov	r3, r2
 80199b2:	005b      	lsls	r3, r3, #1
 80199b4:	4413      	add	r3, r2
 80199b6:	00db      	lsls	r3, r3, #3
 80199b8:	440b      	add	r3, r1
 80199ba:	3314      	adds	r3, #20
 80199bc:	2204      	movs	r2, #4
 80199be:	701a      	strb	r2, [r3, #0]
 80199c0:	e034      	b.n	8019a2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80199c2:	4920      	ldr	r1, [pc, #128]	@ (8019a44 <etharp_tmr+0x14c>)
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	4613      	mov	r3, r2
 80199c8:	005b      	lsls	r3, r3, #1
 80199ca:	4413      	add	r3, r2
 80199cc:	00db      	lsls	r3, r3, #3
 80199ce:	440b      	add	r3, r1
 80199d0:	3314      	adds	r3, #20
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	2b04      	cmp	r3, #4
 80199d6:	d10a      	bne.n	80199ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80199d8:	491a      	ldr	r1, [pc, #104]	@ (8019a44 <etharp_tmr+0x14c>)
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	4613      	mov	r3, r2
 80199de:	005b      	lsls	r3, r3, #1
 80199e0:	4413      	add	r3, r2
 80199e2:	00db      	lsls	r3, r3, #3
 80199e4:	440b      	add	r3, r1
 80199e6:	3314      	adds	r3, #20
 80199e8:	2202      	movs	r2, #2
 80199ea:	701a      	strb	r2, [r3, #0]
 80199ec:	e01e      	b.n	8019a2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80199ee:	4915      	ldr	r1, [pc, #84]	@ (8019a44 <etharp_tmr+0x14c>)
 80199f0:	687a      	ldr	r2, [r7, #4]
 80199f2:	4613      	mov	r3, r2
 80199f4:	005b      	lsls	r3, r3, #1
 80199f6:	4413      	add	r3, r2
 80199f8:	00db      	lsls	r3, r3, #3
 80199fa:	440b      	add	r3, r1
 80199fc:	3314      	adds	r3, #20
 80199fe:	781b      	ldrb	r3, [r3, #0]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d113      	bne.n	8019a2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019a04:	490f      	ldr	r1, [pc, #60]	@ (8019a44 <etharp_tmr+0x14c>)
 8019a06:	687a      	ldr	r2, [r7, #4]
 8019a08:	4613      	mov	r3, r2
 8019a0a:	005b      	lsls	r3, r3, #1
 8019a0c:	4413      	add	r3, r2
 8019a0e:	00db      	lsls	r3, r3, #3
 8019a10:	440b      	add	r3, r1
 8019a12:	3308      	adds	r3, #8
 8019a14:	6818      	ldr	r0, [r3, #0]
 8019a16:	687a      	ldr	r2, [r7, #4]
 8019a18:	4613      	mov	r3, r2
 8019a1a:	005b      	lsls	r3, r3, #1
 8019a1c:	4413      	add	r3, r2
 8019a1e:	00db      	lsls	r3, r3, #3
 8019a20:	4a08      	ldr	r2, [pc, #32]	@ (8019a44 <etharp_tmr+0x14c>)
 8019a22:	4413      	add	r3, r2
 8019a24:	3304      	adds	r3, #4
 8019a26:	4619      	mov	r1, r3
 8019a28:	f000 fe6e 	bl	801a708 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	3301      	adds	r3, #1
 8019a30:	607b      	str	r3, [r7, #4]
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	2b09      	cmp	r3, #9
 8019a36:	f77f af65 	ble.w	8019904 <etharp_tmr+0xc>
      }
    }
  }
}
 8019a3a:	bf00      	nop
 8019a3c:	bf00      	nop
 8019a3e:	3708      	adds	r7, #8
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}
 8019a44:	2002757c 	.word	0x2002757c

08019a48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b08a      	sub	sp, #40	@ 0x28
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	460b      	mov	r3, r1
 8019a52:	607a      	str	r2, [r7, #4]
 8019a54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019a56:	230a      	movs	r3, #10
 8019a58:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019a5a:	230a      	movs	r3, #10
 8019a5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019a5e:	230a      	movs	r3, #10
 8019a60:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8019a62:	2300      	movs	r3, #0
 8019a64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019a66:	230a      	movs	r3, #10
 8019a68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	83bb      	strh	r3, [r7, #28]
 8019a6e:	2300      	movs	r3, #0
 8019a70:	837b      	strh	r3, [r7, #26]
 8019a72:	2300      	movs	r3, #0
 8019a74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019a76:	2300      	movs	r3, #0
 8019a78:	843b      	strh	r3, [r7, #32]
 8019a7a:	e0ae      	b.n	8019bda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019a80:	49a6      	ldr	r1, [pc, #664]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019a82:	4613      	mov	r3, r2
 8019a84:	005b      	lsls	r3, r3, #1
 8019a86:	4413      	add	r3, r2
 8019a88:	00db      	lsls	r3, r3, #3
 8019a8a:	440b      	add	r3, r1
 8019a8c:	3314      	adds	r3, #20
 8019a8e:	781b      	ldrb	r3, [r3, #0]
 8019a90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019a92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019a96:	2b0a      	cmp	r3, #10
 8019a98:	d105      	bne.n	8019aa6 <etharp_find_entry+0x5e>
 8019a9a:	7dfb      	ldrb	r3, [r7, #23]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d102      	bne.n	8019aa6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019aa0:	8c3b      	ldrh	r3, [r7, #32]
 8019aa2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8019aa4:	e095      	b.n	8019bd2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019aa6:	7dfb      	ldrb	r3, [r7, #23]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	f000 8092 	beq.w	8019bd2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019aae:	7dfb      	ldrb	r3, [r7, #23]
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	d009      	beq.n	8019ac8 <etharp_find_entry+0x80>
 8019ab4:	7dfb      	ldrb	r3, [r7, #23]
 8019ab6:	2b01      	cmp	r3, #1
 8019ab8:	d806      	bhi.n	8019ac8 <etharp_find_entry+0x80>
 8019aba:	4b99      	ldr	r3, [pc, #612]	@ (8019d20 <etharp_find_entry+0x2d8>)
 8019abc:	f240 1223 	movw	r2, #291	@ 0x123
 8019ac0:	4998      	ldr	r1, [pc, #608]	@ (8019d24 <etharp_find_entry+0x2dc>)
 8019ac2:	4899      	ldr	r0, [pc, #612]	@ (8019d28 <etharp_find_entry+0x2e0>)
 8019ac4:	f003 fcec 	bl	801d4a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d020      	beq.n	8019b10 <etharp_find_entry+0xc8>
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	6819      	ldr	r1, [r3, #0]
 8019ad2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ad6:	4891      	ldr	r0, [pc, #580]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019ad8:	4613      	mov	r3, r2
 8019ada:	005b      	lsls	r3, r3, #1
 8019adc:	4413      	add	r3, r2
 8019ade:	00db      	lsls	r3, r3, #3
 8019ae0:	4403      	add	r3, r0
 8019ae2:	3304      	adds	r3, #4
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	4299      	cmp	r1, r3
 8019ae8:	d112      	bne.n	8019b10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d00c      	beq.n	8019b0a <etharp_find_entry+0xc2>
 8019af0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019af4:	4989      	ldr	r1, [pc, #548]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019af6:	4613      	mov	r3, r2
 8019af8:	005b      	lsls	r3, r3, #1
 8019afa:	4413      	add	r3, r2
 8019afc:	00db      	lsls	r3, r3, #3
 8019afe:	440b      	add	r3, r1
 8019b00:	3308      	adds	r3, #8
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	d102      	bne.n	8019b10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019b0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019b0e:	e100      	b.n	8019d12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019b10:	7dfb      	ldrb	r3, [r7, #23]
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d140      	bne.n	8019b98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019b16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b1a:	4980      	ldr	r1, [pc, #512]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019b1c:	4613      	mov	r3, r2
 8019b1e:	005b      	lsls	r3, r3, #1
 8019b20:	4413      	add	r3, r2
 8019b22:	00db      	lsls	r3, r3, #3
 8019b24:	440b      	add	r3, r1
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d01a      	beq.n	8019b62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019b2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b30:	497a      	ldr	r1, [pc, #488]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019b32:	4613      	mov	r3, r2
 8019b34:	005b      	lsls	r3, r3, #1
 8019b36:	4413      	add	r3, r2
 8019b38:	00db      	lsls	r3, r3, #3
 8019b3a:	440b      	add	r3, r1
 8019b3c:	3312      	adds	r3, #18
 8019b3e:	881b      	ldrh	r3, [r3, #0]
 8019b40:	8bba      	ldrh	r2, [r7, #28]
 8019b42:	429a      	cmp	r2, r3
 8019b44:	d845      	bhi.n	8019bd2 <etharp_find_entry+0x18a>
            old_queue = i;
 8019b46:	8c3b      	ldrh	r3, [r7, #32]
 8019b48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019b4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b4e:	4973      	ldr	r1, [pc, #460]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019b50:	4613      	mov	r3, r2
 8019b52:	005b      	lsls	r3, r3, #1
 8019b54:	4413      	add	r3, r2
 8019b56:	00db      	lsls	r3, r3, #3
 8019b58:	440b      	add	r3, r1
 8019b5a:	3312      	adds	r3, #18
 8019b5c:	881b      	ldrh	r3, [r3, #0]
 8019b5e:	83bb      	strh	r3, [r7, #28]
 8019b60:	e037      	b.n	8019bd2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019b62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b66:	496d      	ldr	r1, [pc, #436]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019b68:	4613      	mov	r3, r2
 8019b6a:	005b      	lsls	r3, r3, #1
 8019b6c:	4413      	add	r3, r2
 8019b6e:	00db      	lsls	r3, r3, #3
 8019b70:	440b      	add	r3, r1
 8019b72:	3312      	adds	r3, #18
 8019b74:	881b      	ldrh	r3, [r3, #0]
 8019b76:	8b7a      	ldrh	r2, [r7, #26]
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	d82a      	bhi.n	8019bd2 <etharp_find_entry+0x18a>
            old_pending = i;
 8019b7c:	8c3b      	ldrh	r3, [r7, #32]
 8019b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8019b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b84:	4965      	ldr	r1, [pc, #404]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019b86:	4613      	mov	r3, r2
 8019b88:	005b      	lsls	r3, r3, #1
 8019b8a:	4413      	add	r3, r2
 8019b8c:	00db      	lsls	r3, r3, #3
 8019b8e:	440b      	add	r3, r1
 8019b90:	3312      	adds	r3, #18
 8019b92:	881b      	ldrh	r3, [r3, #0]
 8019b94:	837b      	strh	r3, [r7, #26]
 8019b96:	e01c      	b.n	8019bd2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019b98:	7dfb      	ldrb	r3, [r7, #23]
 8019b9a:	2b01      	cmp	r3, #1
 8019b9c:	d919      	bls.n	8019bd2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ba2:	495e      	ldr	r1, [pc, #376]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	005b      	lsls	r3, r3, #1
 8019ba8:	4413      	add	r3, r2
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	440b      	add	r3, r1
 8019bae:	3312      	adds	r3, #18
 8019bb0:	881b      	ldrh	r3, [r3, #0]
 8019bb2:	8b3a      	ldrh	r2, [r7, #24]
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	d80c      	bhi.n	8019bd2 <etharp_find_entry+0x18a>
            old_stable = i;
 8019bb8:	8c3b      	ldrh	r3, [r7, #32]
 8019bba:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8019bbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bc0:	4956      	ldr	r1, [pc, #344]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019bc2:	4613      	mov	r3, r2
 8019bc4:	005b      	lsls	r3, r3, #1
 8019bc6:	4413      	add	r3, r2
 8019bc8:	00db      	lsls	r3, r3, #3
 8019bca:	440b      	add	r3, r1
 8019bcc:	3312      	adds	r3, #18
 8019bce:	881b      	ldrh	r3, [r3, #0]
 8019bd0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019bd2:	8c3b      	ldrh	r3, [r7, #32]
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	843b      	strh	r3, [r7, #32]
 8019bda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019bde:	2b09      	cmp	r3, #9
 8019be0:	f77f af4c 	ble.w	8019a7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019be4:	7afb      	ldrb	r3, [r7, #11]
 8019be6:	f003 0302 	and.w	r3, r3, #2
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d108      	bne.n	8019c00 <etharp_find_entry+0x1b8>
 8019bee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019bf2:	2b0a      	cmp	r3, #10
 8019bf4:	d107      	bne.n	8019c06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019bf6:	7afb      	ldrb	r3, [r7, #11]
 8019bf8:	f003 0301 	and.w	r3, r3, #1
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d102      	bne.n	8019c06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019c00:	f04f 33ff 	mov.w	r3, #4294967295
 8019c04:	e085      	b.n	8019d12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019c06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019c0a:	2b09      	cmp	r3, #9
 8019c0c:	dc02      	bgt.n	8019c14 <etharp_find_entry+0x1cc>
    i = empty;
 8019c0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019c10:	843b      	strh	r3, [r7, #32]
 8019c12:	e039      	b.n	8019c88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019c18:	2b09      	cmp	r3, #9
 8019c1a:	dc14      	bgt.n	8019c46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019c1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019c20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c24:	493d      	ldr	r1, [pc, #244]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019c26:	4613      	mov	r3, r2
 8019c28:	005b      	lsls	r3, r3, #1
 8019c2a:	4413      	add	r3, r2
 8019c2c:	00db      	lsls	r3, r3, #3
 8019c2e:	440b      	add	r3, r1
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d018      	beq.n	8019c68 <etharp_find_entry+0x220>
 8019c36:	4b3a      	ldr	r3, [pc, #232]	@ (8019d20 <etharp_find_entry+0x2d8>)
 8019c38:	f240 126d 	movw	r2, #365	@ 0x16d
 8019c3c:	493b      	ldr	r1, [pc, #236]	@ (8019d2c <etharp_find_entry+0x2e4>)
 8019c3e:	483a      	ldr	r0, [pc, #232]	@ (8019d28 <etharp_find_entry+0x2e0>)
 8019c40:	f003 fc2e 	bl	801d4a0 <iprintf>
 8019c44:	e010      	b.n	8019c68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019c46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019c4a:	2b09      	cmp	r3, #9
 8019c4c:	dc02      	bgt.n	8019c54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019c4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019c50:	843b      	strh	r3, [r7, #32]
 8019c52:	e009      	b.n	8019c68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019c54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019c58:	2b09      	cmp	r3, #9
 8019c5a:	dc02      	bgt.n	8019c62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019c5c:	8bfb      	ldrh	r3, [r7, #30]
 8019c5e:	843b      	strh	r3, [r7, #32]
 8019c60:	e002      	b.n	8019c68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019c62:	f04f 33ff 	mov.w	r3, #4294967295
 8019c66:	e054      	b.n	8019d12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019c68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c6c:	2b09      	cmp	r3, #9
 8019c6e:	dd06      	ble.n	8019c7e <etharp_find_entry+0x236>
 8019c70:	4b2b      	ldr	r3, [pc, #172]	@ (8019d20 <etharp_find_entry+0x2d8>)
 8019c72:	f240 127f 	movw	r2, #383	@ 0x17f
 8019c76:	492e      	ldr	r1, [pc, #184]	@ (8019d30 <etharp_find_entry+0x2e8>)
 8019c78:	482b      	ldr	r0, [pc, #172]	@ (8019d28 <etharp_find_entry+0x2e0>)
 8019c7a:	f003 fc11 	bl	801d4a0 <iprintf>
    etharp_free_entry(i);
 8019c7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c82:	4618      	mov	r0, r3
 8019c84:	f7ff fe06 	bl	8019894 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019c88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c8c:	2b09      	cmp	r3, #9
 8019c8e:	dd06      	ble.n	8019c9e <etharp_find_entry+0x256>
 8019c90:	4b23      	ldr	r3, [pc, #140]	@ (8019d20 <etharp_find_entry+0x2d8>)
 8019c92:	f240 1283 	movw	r2, #387	@ 0x183
 8019c96:	4926      	ldr	r1, [pc, #152]	@ (8019d30 <etharp_find_entry+0x2e8>)
 8019c98:	4823      	ldr	r0, [pc, #140]	@ (8019d28 <etharp_find_entry+0x2e0>)
 8019c9a:	f003 fc01 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ca2:	491e      	ldr	r1, [pc, #120]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	005b      	lsls	r3, r3, #1
 8019ca8:	4413      	add	r3, r2
 8019caa:	00db      	lsls	r3, r3, #3
 8019cac:	440b      	add	r3, r1
 8019cae:	3314      	adds	r3, #20
 8019cb0:	781b      	ldrb	r3, [r3, #0]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d006      	beq.n	8019cc4 <etharp_find_entry+0x27c>
 8019cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8019d20 <etharp_find_entry+0x2d8>)
 8019cb8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8019cbc:	491d      	ldr	r1, [pc, #116]	@ (8019d34 <etharp_find_entry+0x2ec>)
 8019cbe:	481a      	ldr	r0, [pc, #104]	@ (8019d28 <etharp_find_entry+0x2e0>)
 8019cc0:	f003 fbee 	bl	801d4a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d00b      	beq.n	8019ce2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	6819      	ldr	r1, [r3, #0]
 8019cd2:	4812      	ldr	r0, [pc, #72]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	005b      	lsls	r3, r3, #1
 8019cd8:	4413      	add	r3, r2
 8019cda:	00db      	lsls	r3, r3, #3
 8019cdc:	4403      	add	r3, r0
 8019cde:	3304      	adds	r3, #4
 8019ce0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ce6:	490d      	ldr	r1, [pc, #52]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019ce8:	4613      	mov	r3, r2
 8019cea:	005b      	lsls	r3, r3, #1
 8019cec:	4413      	add	r3, r2
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	440b      	add	r3, r1
 8019cf2:	3312      	adds	r3, #18
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cfc:	4907      	ldr	r1, [pc, #28]	@ (8019d1c <etharp_find_entry+0x2d4>)
 8019cfe:	4613      	mov	r3, r2
 8019d00:	005b      	lsls	r3, r3, #1
 8019d02:	4413      	add	r3, r2
 8019d04:	00db      	lsls	r3, r3, #3
 8019d06:	440b      	add	r3, r1
 8019d08:	3308      	adds	r3, #8
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019d0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019d12:	4618      	mov	r0, r3
 8019d14:	3728      	adds	r7, #40	@ 0x28
 8019d16:	46bd      	mov	sp, r7
 8019d18:	bd80      	pop	{r7, pc}
 8019d1a:	bf00      	nop
 8019d1c:	2002757c 	.word	0x2002757c
 8019d20:	08020a64 	.word	0x08020a64
 8019d24:	08020a9c 	.word	0x08020a9c
 8019d28:	08020adc 	.word	0x08020adc
 8019d2c:	08020b04 	.word	0x08020b04
 8019d30:	08020b1c 	.word	0x08020b1c
 8019d34:	08020b30 	.word	0x08020b30

08019d38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b088      	sub	sp, #32
 8019d3c:	af02      	add	r7, sp, #8
 8019d3e:	60f8      	str	r0, [r7, #12]
 8019d40:	60b9      	str	r1, [r7, #8]
 8019d42:	607a      	str	r2, [r7, #4]
 8019d44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019d4c:	2b06      	cmp	r3, #6
 8019d4e:	d006      	beq.n	8019d5e <etharp_update_arp_entry+0x26>
 8019d50:	4b48      	ldr	r3, [pc, #288]	@ (8019e74 <etharp_update_arp_entry+0x13c>)
 8019d52:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8019d56:	4948      	ldr	r1, [pc, #288]	@ (8019e78 <etharp_update_arp_entry+0x140>)
 8019d58:	4848      	ldr	r0, [pc, #288]	@ (8019e7c <etharp_update_arp_entry+0x144>)
 8019d5a:	f003 fba1 	bl	801d4a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019d5e:	68bb      	ldr	r3, [r7, #8]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d012      	beq.n	8019d8a <etharp_update_arp_entry+0x52>
 8019d64:	68bb      	ldr	r3, [r7, #8]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d00e      	beq.n	8019d8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	68f9      	ldr	r1, [r7, #12]
 8019d72:	4618      	mov	r0, r3
 8019d74:	f001 f8fe 	bl	801af74 <ip4_addr_isbroadcast_u32>
 8019d78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d105      	bne.n	8019d8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019d86:	2be0      	cmp	r3, #224	@ 0xe0
 8019d88:	d102      	bne.n	8019d90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019d8a:	f06f 030f 	mvn.w	r3, #15
 8019d8e:	e06c      	b.n	8019e6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019d90:	78fb      	ldrb	r3, [r7, #3]
 8019d92:	68fa      	ldr	r2, [r7, #12]
 8019d94:	4619      	mov	r1, r3
 8019d96:	68b8      	ldr	r0, [r7, #8]
 8019d98:	f7ff fe56 	bl	8019a48 <etharp_find_entry>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019da0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	da02      	bge.n	8019dae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019da8:	8afb      	ldrh	r3, [r7, #22]
 8019daa:	b25b      	sxtb	r3, r3
 8019dac:	e05d      	b.n	8019e6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019dae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019db2:	4933      	ldr	r1, [pc, #204]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019db4:	4613      	mov	r3, r2
 8019db6:	005b      	lsls	r3, r3, #1
 8019db8:	4413      	add	r3, r2
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	440b      	add	r3, r1
 8019dbe:	3314      	adds	r3, #20
 8019dc0:	2202      	movs	r2, #2
 8019dc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019dc8:	492d      	ldr	r1, [pc, #180]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019dca:	4613      	mov	r3, r2
 8019dcc:	005b      	lsls	r3, r3, #1
 8019dce:	4413      	add	r3, r2
 8019dd0:	00db      	lsls	r3, r3, #3
 8019dd2:	440b      	add	r3, r1
 8019dd4:	3308      	adds	r3, #8
 8019dd6:	68fa      	ldr	r2, [r7, #12]
 8019dd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019dda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019dde:	4613      	mov	r3, r2
 8019de0:	005b      	lsls	r3, r3, #1
 8019de2:	4413      	add	r3, r2
 8019de4:	00db      	lsls	r3, r3, #3
 8019de6:	3308      	adds	r3, #8
 8019de8:	4a25      	ldr	r2, [pc, #148]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019dea:	4413      	add	r3, r2
 8019dec:	3304      	adds	r3, #4
 8019dee:	2206      	movs	r2, #6
 8019df0:	6879      	ldr	r1, [r7, #4]
 8019df2:	4618      	mov	r0, r3
 8019df4:	f003 fc8d 	bl	801d712 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019df8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019dfc:	4920      	ldr	r1, [pc, #128]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019dfe:	4613      	mov	r3, r2
 8019e00:	005b      	lsls	r3, r3, #1
 8019e02:	4413      	add	r3, r2
 8019e04:	00db      	lsls	r3, r3, #3
 8019e06:	440b      	add	r3, r1
 8019e08:	3312      	adds	r3, #18
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019e0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e12:	491b      	ldr	r1, [pc, #108]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019e14:	4613      	mov	r3, r2
 8019e16:	005b      	lsls	r3, r3, #1
 8019e18:	4413      	add	r3, r2
 8019e1a:	00db      	lsls	r3, r3, #3
 8019e1c:	440b      	add	r3, r1
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d021      	beq.n	8019e68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019e24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e28:	4915      	ldr	r1, [pc, #84]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019e2a:	4613      	mov	r3, r2
 8019e2c:	005b      	lsls	r3, r3, #1
 8019e2e:	4413      	add	r3, r2
 8019e30:	00db      	lsls	r3, r3, #3
 8019e32:	440b      	add	r3, r1
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e3c:	4910      	ldr	r1, [pc, #64]	@ (8019e80 <etharp_update_arp_entry+0x148>)
 8019e3e:	4613      	mov	r3, r2
 8019e40:	005b      	lsls	r3, r3, #1
 8019e42:	4413      	add	r3, r2
 8019e44:	00db      	lsls	r3, r3, #3
 8019e46:	440b      	add	r3, r1
 8019e48:	2200      	movs	r2, #0
 8019e4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8019e52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019e56:	9300      	str	r3, [sp, #0]
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	6939      	ldr	r1, [r7, #16]
 8019e5c:	68f8      	ldr	r0, [r7, #12]
 8019e5e:	f002 f827 	bl	801beb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019e62:	6938      	ldr	r0, [r7, #16]
 8019e64:	f7f9 fb32 	bl	80134cc <pbuf_free>
  }
  return ERR_OK;
 8019e68:	2300      	movs	r3, #0
}
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	3718      	adds	r7, #24
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	08020a64 	.word	0x08020a64
 8019e78:	08020b5c 	.word	0x08020b5c
 8019e7c:	08020adc 	.word	0x08020adc
 8019e80:	2002757c 	.word	0x2002757c

08019e84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	60fb      	str	r3, [r7, #12]
 8019e90:	e01e      	b.n	8019ed0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019e92:	4913      	ldr	r1, [pc, #76]	@ (8019ee0 <etharp_cleanup_netif+0x5c>)
 8019e94:	68fa      	ldr	r2, [r7, #12]
 8019e96:	4613      	mov	r3, r2
 8019e98:	005b      	lsls	r3, r3, #1
 8019e9a:	4413      	add	r3, r2
 8019e9c:	00db      	lsls	r3, r3, #3
 8019e9e:	440b      	add	r3, r1
 8019ea0:	3314      	adds	r3, #20
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019ea6:	7afb      	ldrb	r3, [r7, #11]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d00e      	beq.n	8019eca <etharp_cleanup_netif+0x46>
 8019eac:	490c      	ldr	r1, [pc, #48]	@ (8019ee0 <etharp_cleanup_netif+0x5c>)
 8019eae:	68fa      	ldr	r2, [r7, #12]
 8019eb0:	4613      	mov	r3, r2
 8019eb2:	005b      	lsls	r3, r3, #1
 8019eb4:	4413      	add	r3, r2
 8019eb6:	00db      	lsls	r3, r3, #3
 8019eb8:	440b      	add	r3, r1
 8019eba:	3308      	adds	r3, #8
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	687a      	ldr	r2, [r7, #4]
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	d102      	bne.n	8019eca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019ec4:	68f8      	ldr	r0, [r7, #12]
 8019ec6:	f7ff fce5 	bl	8019894 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	3301      	adds	r3, #1
 8019ece:	60fb      	str	r3, [r7, #12]
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	2b09      	cmp	r3, #9
 8019ed4:	dddd      	ble.n	8019e92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019ed6:	bf00      	nop
 8019ed8:	bf00      	nop
 8019eda:	3710      	adds	r7, #16
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}
 8019ee0:	2002757c 	.word	0x2002757c

08019ee4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019ee4:	b5b0      	push	{r4, r5, r7, lr}
 8019ee6:	b08a      	sub	sp, #40	@ 0x28
 8019ee8:	af04      	add	r7, sp, #16
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d107      	bne.n	8019f04 <etharp_input+0x20>
 8019ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8019fec <etharp_input+0x108>)
 8019ef6:	f240 228a 	movw	r2, #650	@ 0x28a
 8019efa:	493d      	ldr	r1, [pc, #244]	@ (8019ff0 <etharp_input+0x10c>)
 8019efc:	483d      	ldr	r0, [pc, #244]	@ (8019ff4 <etharp_input+0x110>)
 8019efe:	f003 facf 	bl	801d4a0 <iprintf>
 8019f02:	e06f      	b.n	8019fe4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	685b      	ldr	r3, [r3, #4]
 8019f08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019f0a:	693b      	ldr	r3, [r7, #16]
 8019f0c:	881b      	ldrh	r3, [r3, #0]
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019f14:	d10c      	bne.n	8019f30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019f1a:	2b06      	cmp	r3, #6
 8019f1c:	d108      	bne.n	8019f30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019f22:	2b04      	cmp	r3, #4
 8019f24:	d104      	bne.n	8019f30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019f26:	693b      	ldr	r3, [r7, #16]
 8019f28:	885b      	ldrh	r3, [r3, #2]
 8019f2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019f2c:	2b08      	cmp	r3, #8
 8019f2e:	d003      	beq.n	8019f38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7f9 facb 	bl	80134cc <pbuf_free>
    return;
 8019f36:	e055      	b.n	8019fe4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019f38:	693b      	ldr	r3, [r7, #16]
 8019f3a:	330e      	adds	r3, #14
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019f40:	693b      	ldr	r3, [r7, #16]
 8019f42:	3318      	adds	r3, #24
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	3304      	adds	r3, #4
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d102      	bne.n	8019f58 <etharp_input+0x74>
    for_us = 0;
 8019f52:	2300      	movs	r3, #0
 8019f54:	75fb      	strb	r3, [r7, #23]
 8019f56:	e009      	b.n	8019f6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019f58:	68ba      	ldr	r2, [r7, #8]
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	3304      	adds	r3, #4
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	429a      	cmp	r2, r3
 8019f62:	bf0c      	ite	eq
 8019f64:	2301      	moveq	r3, #1
 8019f66:	2300      	movne	r3, #0
 8019f68:	b2db      	uxtb	r3, r3
 8019f6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019f6c:	693b      	ldr	r3, [r7, #16]
 8019f6e:	f103 0208 	add.w	r2, r3, #8
 8019f72:	7dfb      	ldrb	r3, [r7, #23]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d001      	beq.n	8019f7c <etharp_input+0x98>
 8019f78:	2301      	movs	r3, #1
 8019f7a:	e000      	b.n	8019f7e <etharp_input+0x9a>
 8019f7c:	2302      	movs	r3, #2
 8019f7e:	f107 010c 	add.w	r1, r7, #12
 8019f82:	6838      	ldr	r0, [r7, #0]
 8019f84:	f7ff fed8 	bl	8019d38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	88db      	ldrh	r3, [r3, #6]
 8019f8c:	b29b      	uxth	r3, r3
 8019f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019f92:	d003      	beq.n	8019f9c <etharp_input+0xb8>
 8019f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019f98:	d01e      	beq.n	8019fd8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019f9a:	e020      	b.n	8019fde <etharp_input+0xfa>
      if (for_us) {
 8019f9c:	7dfb      	ldrb	r3, [r7, #23]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d01c      	beq.n	8019fdc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019fa8:	693b      	ldr	r3, [r7, #16]
 8019faa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019fb8:	693a      	ldr	r2, [r7, #16]
 8019fba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019fbc:	2102      	movs	r1, #2
 8019fbe:	9103      	str	r1, [sp, #12]
 8019fc0:	f107 010c 	add.w	r1, r7, #12
 8019fc4:	9102      	str	r1, [sp, #8]
 8019fc6:	9201      	str	r2, [sp, #4]
 8019fc8:	9300      	str	r3, [sp, #0]
 8019fca:	462b      	mov	r3, r5
 8019fcc:	4622      	mov	r2, r4
 8019fce:	4601      	mov	r1, r0
 8019fd0:	6838      	ldr	r0, [r7, #0]
 8019fd2:	f000 faeb 	bl	801a5ac <etharp_raw>
      break;
 8019fd6:	e001      	b.n	8019fdc <etharp_input+0xf8>
      break;
 8019fd8:	bf00      	nop
 8019fda:	e000      	b.n	8019fde <etharp_input+0xfa>
      break;
 8019fdc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019fde:	6878      	ldr	r0, [r7, #4]
 8019fe0:	f7f9 fa74 	bl	80134cc <pbuf_free>
}
 8019fe4:	3718      	adds	r7, #24
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8019fea:	bf00      	nop
 8019fec:	08020a64 	.word	0x08020a64
 8019ff0:	08020bb4 	.word	0x08020bb4
 8019ff4:	08020adc 	.word	0x08020adc

08019ff8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b086      	sub	sp, #24
 8019ffc:	af02      	add	r7, sp, #8
 8019ffe:	60f8      	str	r0, [r7, #12]
 801a000:	60b9      	str	r1, [r7, #8]
 801a002:	4613      	mov	r3, r2
 801a004:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a006:	79fa      	ldrb	r2, [r7, #7]
 801a008:	4944      	ldr	r1, [pc, #272]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a00a:	4613      	mov	r3, r2
 801a00c:	005b      	lsls	r3, r3, #1
 801a00e:	4413      	add	r3, r2
 801a010:	00db      	lsls	r3, r3, #3
 801a012:	440b      	add	r3, r1
 801a014:	3314      	adds	r3, #20
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	2b01      	cmp	r3, #1
 801a01a:	d806      	bhi.n	801a02a <etharp_output_to_arp_index+0x32>
 801a01c:	4b40      	ldr	r3, [pc, #256]	@ (801a120 <etharp_output_to_arp_index+0x128>)
 801a01e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a022:	4940      	ldr	r1, [pc, #256]	@ (801a124 <etharp_output_to_arp_index+0x12c>)
 801a024:	4840      	ldr	r0, [pc, #256]	@ (801a128 <etharp_output_to_arp_index+0x130>)
 801a026:	f003 fa3b 	bl	801d4a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a02a:	79fa      	ldrb	r2, [r7, #7]
 801a02c:	493b      	ldr	r1, [pc, #236]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a02e:	4613      	mov	r3, r2
 801a030:	005b      	lsls	r3, r3, #1
 801a032:	4413      	add	r3, r2
 801a034:	00db      	lsls	r3, r3, #3
 801a036:	440b      	add	r3, r1
 801a038:	3314      	adds	r3, #20
 801a03a:	781b      	ldrb	r3, [r3, #0]
 801a03c:	2b02      	cmp	r3, #2
 801a03e:	d153      	bne.n	801a0e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a040:	79fa      	ldrb	r2, [r7, #7]
 801a042:	4936      	ldr	r1, [pc, #216]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a044:	4613      	mov	r3, r2
 801a046:	005b      	lsls	r3, r3, #1
 801a048:	4413      	add	r3, r2
 801a04a:	00db      	lsls	r3, r3, #3
 801a04c:	440b      	add	r3, r1
 801a04e:	3312      	adds	r3, #18
 801a050:	881b      	ldrh	r3, [r3, #0]
 801a052:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a056:	d919      	bls.n	801a08c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a058:	79fa      	ldrb	r2, [r7, #7]
 801a05a:	4613      	mov	r3, r2
 801a05c:	005b      	lsls	r3, r3, #1
 801a05e:	4413      	add	r3, r2
 801a060:	00db      	lsls	r3, r3, #3
 801a062:	4a2e      	ldr	r2, [pc, #184]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a064:	4413      	add	r3, r2
 801a066:	3304      	adds	r3, #4
 801a068:	4619      	mov	r1, r3
 801a06a:	68f8      	ldr	r0, [r7, #12]
 801a06c:	f000 fb4c 	bl	801a708 <etharp_request>
 801a070:	4603      	mov	r3, r0
 801a072:	2b00      	cmp	r3, #0
 801a074:	d138      	bne.n	801a0e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a076:	79fa      	ldrb	r2, [r7, #7]
 801a078:	4928      	ldr	r1, [pc, #160]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a07a:	4613      	mov	r3, r2
 801a07c:	005b      	lsls	r3, r3, #1
 801a07e:	4413      	add	r3, r2
 801a080:	00db      	lsls	r3, r3, #3
 801a082:	440b      	add	r3, r1
 801a084:	3314      	adds	r3, #20
 801a086:	2203      	movs	r2, #3
 801a088:	701a      	strb	r2, [r3, #0]
 801a08a:	e02d      	b.n	801a0e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a08c:	79fa      	ldrb	r2, [r7, #7]
 801a08e:	4923      	ldr	r1, [pc, #140]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a090:	4613      	mov	r3, r2
 801a092:	005b      	lsls	r3, r3, #1
 801a094:	4413      	add	r3, r2
 801a096:	00db      	lsls	r3, r3, #3
 801a098:	440b      	add	r3, r1
 801a09a:	3312      	adds	r3, #18
 801a09c:	881b      	ldrh	r3, [r3, #0]
 801a09e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a0a2:	d321      	bcc.n	801a0e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a0a4:	79fa      	ldrb	r2, [r7, #7]
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	005b      	lsls	r3, r3, #1
 801a0aa:	4413      	add	r3, r2
 801a0ac:	00db      	lsls	r3, r3, #3
 801a0ae:	4a1b      	ldr	r2, [pc, #108]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a0b0:	4413      	add	r3, r2
 801a0b2:	1d19      	adds	r1, r3, #4
 801a0b4:	79fa      	ldrb	r2, [r7, #7]
 801a0b6:	4613      	mov	r3, r2
 801a0b8:	005b      	lsls	r3, r3, #1
 801a0ba:	4413      	add	r3, r2
 801a0bc:	00db      	lsls	r3, r3, #3
 801a0be:	3308      	adds	r3, #8
 801a0c0:	4a16      	ldr	r2, [pc, #88]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a0c2:	4413      	add	r3, r2
 801a0c4:	3304      	adds	r3, #4
 801a0c6:	461a      	mov	r2, r3
 801a0c8:	68f8      	ldr	r0, [r7, #12]
 801a0ca:	f000 fafb 	bl	801a6c4 <etharp_request_dst>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d109      	bne.n	801a0e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a0d4:	79fa      	ldrb	r2, [r7, #7]
 801a0d6:	4911      	ldr	r1, [pc, #68]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a0d8:	4613      	mov	r3, r2
 801a0da:	005b      	lsls	r3, r3, #1
 801a0dc:	4413      	add	r3, r2
 801a0de:	00db      	lsls	r3, r3, #3
 801a0e0:	440b      	add	r3, r1
 801a0e2:	3314      	adds	r3, #20
 801a0e4:	2203      	movs	r2, #3
 801a0e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a0ee:	79fa      	ldrb	r2, [r7, #7]
 801a0f0:	4613      	mov	r3, r2
 801a0f2:	005b      	lsls	r3, r3, #1
 801a0f4:	4413      	add	r3, r2
 801a0f6:	00db      	lsls	r3, r3, #3
 801a0f8:	3308      	adds	r3, #8
 801a0fa:	4a08      	ldr	r2, [pc, #32]	@ (801a11c <etharp_output_to_arp_index+0x124>)
 801a0fc:	4413      	add	r3, r2
 801a0fe:	3304      	adds	r3, #4
 801a100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a104:	9200      	str	r2, [sp, #0]
 801a106:	460a      	mov	r2, r1
 801a108:	68b9      	ldr	r1, [r7, #8]
 801a10a:	68f8      	ldr	r0, [r7, #12]
 801a10c:	f001 fed0 	bl	801beb0 <ethernet_output>
 801a110:	4603      	mov	r3, r0
}
 801a112:	4618      	mov	r0, r3
 801a114:	3710      	adds	r7, #16
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
 801a11a:	bf00      	nop
 801a11c:	2002757c 	.word	0x2002757c
 801a120:	08020a64 	.word	0x08020a64
 801a124:	08020bd4 	.word	0x08020bd4
 801a128:	08020adc 	.word	0x08020adc

0801a12c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b08a      	sub	sp, #40	@ 0x28
 801a130:	af02      	add	r7, sp, #8
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	60b9      	str	r1, [r7, #8]
 801a136:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d106      	bne.n	801a150 <etharp_output+0x24>
 801a142:	4b73      	ldr	r3, [pc, #460]	@ (801a310 <etharp_output+0x1e4>)
 801a144:	f240 321e 	movw	r2, #798	@ 0x31e
 801a148:	4972      	ldr	r1, [pc, #456]	@ (801a314 <etharp_output+0x1e8>)
 801a14a:	4873      	ldr	r0, [pc, #460]	@ (801a318 <etharp_output+0x1ec>)
 801a14c:	f003 f9a8 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d106      	bne.n	801a164 <etharp_output+0x38>
 801a156:	4b6e      	ldr	r3, [pc, #440]	@ (801a310 <etharp_output+0x1e4>)
 801a158:	f240 321f 	movw	r2, #799	@ 0x31f
 801a15c:	496f      	ldr	r1, [pc, #444]	@ (801a31c <etharp_output+0x1f0>)
 801a15e:	486e      	ldr	r0, [pc, #440]	@ (801a318 <etharp_output+0x1ec>)
 801a160:	f003 f99e 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d106      	bne.n	801a178 <etharp_output+0x4c>
 801a16a:	4b69      	ldr	r3, [pc, #420]	@ (801a310 <etharp_output+0x1e4>)
 801a16c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a170:	496b      	ldr	r1, [pc, #428]	@ (801a320 <etharp_output+0x1f4>)
 801a172:	4869      	ldr	r0, [pc, #420]	@ (801a318 <etharp_output+0x1ec>)
 801a174:	f003 f994 	bl	801d4a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	68f9      	ldr	r1, [r7, #12]
 801a17e:	4618      	mov	r0, r3
 801a180:	f000 fef8 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801a184:	4603      	mov	r3, r0
 801a186:	2b00      	cmp	r3, #0
 801a188:	d002      	beq.n	801a190 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a18a:	4b66      	ldr	r3, [pc, #408]	@ (801a324 <etharp_output+0x1f8>)
 801a18c:	61fb      	str	r3, [r7, #28]
 801a18e:	e0af      	b.n	801a2f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a198:	2be0      	cmp	r3, #224	@ 0xe0
 801a19a:	d118      	bne.n	801a1ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a19c:	2301      	movs	r3, #1
 801a19e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a1a4:	235e      	movs	r3, #94	@ 0x5e
 801a1a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a1b2:	b2db      	uxtb	r3, r3
 801a1b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	3302      	adds	r3, #2
 801a1ba:	781b      	ldrb	r3, [r3, #0]
 801a1bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	3303      	adds	r3, #3
 801a1c2:	781b      	ldrb	r3, [r3, #0]
 801a1c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a1c6:	f107 0310 	add.w	r3, r7, #16
 801a1ca:	61fb      	str	r3, [r7, #28]
 801a1cc:	e090      	b.n	801a2f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	3304      	adds	r3, #4
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	405a      	eors	r2, r3
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	3308      	adds	r3, #8
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	4013      	ands	r3, r2
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d012      	beq.n	801a20c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a1ec:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a1f0:	4293      	cmp	r3, r2
 801a1f2:	d00b      	beq.n	801a20c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	330c      	adds	r3, #12
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d003      	beq.n	801a206 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	330c      	adds	r3, #12
 801a202:	61bb      	str	r3, [r7, #24]
 801a204:	e002      	b.n	801a20c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a206:	f06f 0303 	mvn.w	r3, #3
 801a20a:	e07d      	b.n	801a308 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a20c:	4b46      	ldr	r3, [pc, #280]	@ (801a328 <etharp_output+0x1fc>)
 801a20e:	781b      	ldrb	r3, [r3, #0]
 801a210:	4619      	mov	r1, r3
 801a212:	4a46      	ldr	r2, [pc, #280]	@ (801a32c <etharp_output+0x200>)
 801a214:	460b      	mov	r3, r1
 801a216:	005b      	lsls	r3, r3, #1
 801a218:	440b      	add	r3, r1
 801a21a:	00db      	lsls	r3, r3, #3
 801a21c:	4413      	add	r3, r2
 801a21e:	3314      	adds	r3, #20
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	2b01      	cmp	r3, #1
 801a224:	d925      	bls.n	801a272 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a226:	4b40      	ldr	r3, [pc, #256]	@ (801a328 <etharp_output+0x1fc>)
 801a228:	781b      	ldrb	r3, [r3, #0]
 801a22a:	4619      	mov	r1, r3
 801a22c:	4a3f      	ldr	r2, [pc, #252]	@ (801a32c <etharp_output+0x200>)
 801a22e:	460b      	mov	r3, r1
 801a230:	005b      	lsls	r3, r3, #1
 801a232:	440b      	add	r3, r1
 801a234:	00db      	lsls	r3, r3, #3
 801a236:	4413      	add	r3, r2
 801a238:	3308      	adds	r3, #8
 801a23a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a23c:	68fa      	ldr	r2, [r7, #12]
 801a23e:	429a      	cmp	r2, r3
 801a240:	d117      	bne.n	801a272 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a242:	69bb      	ldr	r3, [r7, #24]
 801a244:	681a      	ldr	r2, [r3, #0]
 801a246:	4b38      	ldr	r3, [pc, #224]	@ (801a328 <etharp_output+0x1fc>)
 801a248:	781b      	ldrb	r3, [r3, #0]
 801a24a:	4618      	mov	r0, r3
 801a24c:	4937      	ldr	r1, [pc, #220]	@ (801a32c <etharp_output+0x200>)
 801a24e:	4603      	mov	r3, r0
 801a250:	005b      	lsls	r3, r3, #1
 801a252:	4403      	add	r3, r0
 801a254:	00db      	lsls	r3, r3, #3
 801a256:	440b      	add	r3, r1
 801a258:	3304      	adds	r3, #4
 801a25a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a25c:	429a      	cmp	r2, r3
 801a25e:	d108      	bne.n	801a272 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a260:	4b31      	ldr	r3, [pc, #196]	@ (801a328 <etharp_output+0x1fc>)
 801a262:	781b      	ldrb	r3, [r3, #0]
 801a264:	461a      	mov	r2, r3
 801a266:	68b9      	ldr	r1, [r7, #8]
 801a268:	68f8      	ldr	r0, [r7, #12]
 801a26a:	f7ff fec5 	bl	8019ff8 <etharp_output_to_arp_index>
 801a26e:	4603      	mov	r3, r0
 801a270:	e04a      	b.n	801a308 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a272:	2300      	movs	r3, #0
 801a274:	75fb      	strb	r3, [r7, #23]
 801a276:	e031      	b.n	801a2dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a278:	7dfa      	ldrb	r2, [r7, #23]
 801a27a:	492c      	ldr	r1, [pc, #176]	@ (801a32c <etharp_output+0x200>)
 801a27c:	4613      	mov	r3, r2
 801a27e:	005b      	lsls	r3, r3, #1
 801a280:	4413      	add	r3, r2
 801a282:	00db      	lsls	r3, r3, #3
 801a284:	440b      	add	r3, r1
 801a286:	3314      	adds	r3, #20
 801a288:	781b      	ldrb	r3, [r3, #0]
 801a28a:	2b01      	cmp	r3, #1
 801a28c:	d923      	bls.n	801a2d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a28e:	7dfa      	ldrb	r2, [r7, #23]
 801a290:	4926      	ldr	r1, [pc, #152]	@ (801a32c <etharp_output+0x200>)
 801a292:	4613      	mov	r3, r2
 801a294:	005b      	lsls	r3, r3, #1
 801a296:	4413      	add	r3, r2
 801a298:	00db      	lsls	r3, r3, #3
 801a29a:	440b      	add	r3, r1
 801a29c:	3308      	adds	r3, #8
 801a29e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a2a0:	68fa      	ldr	r2, [r7, #12]
 801a2a2:	429a      	cmp	r2, r3
 801a2a4:	d117      	bne.n	801a2d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a2a6:	69bb      	ldr	r3, [r7, #24]
 801a2a8:	6819      	ldr	r1, [r3, #0]
 801a2aa:	7dfa      	ldrb	r2, [r7, #23]
 801a2ac:	481f      	ldr	r0, [pc, #124]	@ (801a32c <etharp_output+0x200>)
 801a2ae:	4613      	mov	r3, r2
 801a2b0:	005b      	lsls	r3, r3, #1
 801a2b2:	4413      	add	r3, r2
 801a2b4:	00db      	lsls	r3, r3, #3
 801a2b6:	4403      	add	r3, r0
 801a2b8:	3304      	adds	r3, #4
 801a2ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a2bc:	4299      	cmp	r1, r3
 801a2be:	d10a      	bne.n	801a2d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a2c0:	4a19      	ldr	r2, [pc, #100]	@ (801a328 <etharp_output+0x1fc>)
 801a2c2:	7dfb      	ldrb	r3, [r7, #23]
 801a2c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a2c6:	7dfb      	ldrb	r3, [r7, #23]
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	68b9      	ldr	r1, [r7, #8]
 801a2cc:	68f8      	ldr	r0, [r7, #12]
 801a2ce:	f7ff fe93 	bl	8019ff8 <etharp_output_to_arp_index>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	e018      	b.n	801a308 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a2d6:	7dfb      	ldrb	r3, [r7, #23]
 801a2d8:	3301      	adds	r3, #1
 801a2da:	75fb      	strb	r3, [r7, #23]
 801a2dc:	7dfb      	ldrb	r3, [r7, #23]
 801a2de:	2b09      	cmp	r3, #9
 801a2e0:	d9ca      	bls.n	801a278 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a2e2:	68ba      	ldr	r2, [r7, #8]
 801a2e4:	69b9      	ldr	r1, [r7, #24]
 801a2e6:	68f8      	ldr	r0, [r7, #12]
 801a2e8:	f000 f822 	bl	801a330 <etharp_query>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	e00b      	b.n	801a308 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a2f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a2fa:	9300      	str	r3, [sp, #0]
 801a2fc:	69fb      	ldr	r3, [r7, #28]
 801a2fe:	68b9      	ldr	r1, [r7, #8]
 801a300:	68f8      	ldr	r0, [r7, #12]
 801a302:	f001 fdd5 	bl	801beb0 <ethernet_output>
 801a306:	4603      	mov	r3, r0
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3720      	adds	r7, #32
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	08020a64 	.word	0x08020a64
 801a314:	08020bb4 	.word	0x08020bb4
 801a318:	08020adc 	.word	0x08020adc
 801a31c:	08020c04 	.word	0x08020c04
 801a320:	08020ba4 	.word	0x08020ba4
 801a324:	08021aa8 	.word	0x08021aa8
 801a328:	2002766c 	.word	0x2002766c
 801a32c:	2002757c 	.word	0x2002757c

0801a330 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b08c      	sub	sp, #48	@ 0x30
 801a334:	af02      	add	r7, sp, #8
 801a336:	60f8      	str	r0, [r7, #12]
 801a338:	60b9      	str	r1, [r7, #8]
 801a33a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	3326      	adds	r3, #38	@ 0x26
 801a340:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a342:	23ff      	movs	r3, #255	@ 0xff
 801a344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801a348:	2300      	movs	r3, #0
 801a34a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	68f9      	ldr	r1, [r7, #12]
 801a352:	4618      	mov	r0, r3
 801a354:	f000 fe0e 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d10c      	bne.n	801a378 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a366:	2be0      	cmp	r3, #224	@ 0xe0
 801a368:	d006      	beq.n	801a378 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d003      	beq.n	801a378 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a370:	68bb      	ldr	r3, [r7, #8]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d102      	bne.n	801a37e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a378:	f06f 030f 	mvn.w	r3, #15
 801a37c:	e101      	b.n	801a582 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a37e:	68fa      	ldr	r2, [r7, #12]
 801a380:	2101      	movs	r1, #1
 801a382:	68b8      	ldr	r0, [r7, #8]
 801a384:	f7ff fb60 	bl	8019a48 <etharp_find_entry>
 801a388:	4603      	mov	r3, r0
 801a38a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a38c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a390:	2b00      	cmp	r3, #0
 801a392:	da02      	bge.n	801a39a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a394:	8a7b      	ldrh	r3, [r7, #18]
 801a396:	b25b      	sxtb	r3, r3
 801a398:	e0f3      	b.n	801a582 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a39a:	8a7b      	ldrh	r3, [r7, #18]
 801a39c:	2b7e      	cmp	r3, #126	@ 0x7e
 801a39e:	d906      	bls.n	801a3ae <etharp_query+0x7e>
 801a3a0:	4b7a      	ldr	r3, [pc, #488]	@ (801a58c <etharp_query+0x25c>)
 801a3a2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801a3a6:	497a      	ldr	r1, [pc, #488]	@ (801a590 <etharp_query+0x260>)
 801a3a8:	487a      	ldr	r0, [pc, #488]	@ (801a594 <etharp_query+0x264>)
 801a3aa:	f003 f879 	bl	801d4a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a3ae:	8a7b      	ldrh	r3, [r7, #18]
 801a3b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a3b2:	7c7a      	ldrb	r2, [r7, #17]
 801a3b4:	4978      	ldr	r1, [pc, #480]	@ (801a598 <etharp_query+0x268>)
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	440b      	add	r3, r1
 801a3c0:	3314      	adds	r3, #20
 801a3c2:	781b      	ldrb	r3, [r3, #0]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d115      	bne.n	801a3f4 <etharp_query+0xc4>
    is_new_entry = 1;
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a3cc:	7c7a      	ldrb	r2, [r7, #17]
 801a3ce:	4972      	ldr	r1, [pc, #456]	@ (801a598 <etharp_query+0x268>)
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	4413      	add	r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	440b      	add	r3, r1
 801a3da:	3314      	adds	r3, #20
 801a3dc:	2201      	movs	r2, #1
 801a3de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a3e0:	7c7a      	ldrb	r2, [r7, #17]
 801a3e2:	496d      	ldr	r1, [pc, #436]	@ (801a598 <etharp_query+0x268>)
 801a3e4:	4613      	mov	r3, r2
 801a3e6:	005b      	lsls	r3, r3, #1
 801a3e8:	4413      	add	r3, r2
 801a3ea:	00db      	lsls	r3, r3, #3
 801a3ec:	440b      	add	r3, r1
 801a3ee:	3308      	adds	r3, #8
 801a3f0:	68fa      	ldr	r2, [r7, #12]
 801a3f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a3f4:	7c7a      	ldrb	r2, [r7, #17]
 801a3f6:	4968      	ldr	r1, [pc, #416]	@ (801a598 <etharp_query+0x268>)
 801a3f8:	4613      	mov	r3, r2
 801a3fa:	005b      	lsls	r3, r3, #1
 801a3fc:	4413      	add	r3, r2
 801a3fe:	00db      	lsls	r3, r3, #3
 801a400:	440b      	add	r3, r1
 801a402:	3314      	adds	r3, #20
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	2b01      	cmp	r3, #1
 801a408:	d011      	beq.n	801a42e <etharp_query+0xfe>
 801a40a:	7c7a      	ldrb	r2, [r7, #17]
 801a40c:	4962      	ldr	r1, [pc, #392]	@ (801a598 <etharp_query+0x268>)
 801a40e:	4613      	mov	r3, r2
 801a410:	005b      	lsls	r3, r3, #1
 801a412:	4413      	add	r3, r2
 801a414:	00db      	lsls	r3, r3, #3
 801a416:	440b      	add	r3, r1
 801a418:	3314      	adds	r3, #20
 801a41a:	781b      	ldrb	r3, [r3, #0]
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	d806      	bhi.n	801a42e <etharp_query+0xfe>
 801a420:	4b5a      	ldr	r3, [pc, #360]	@ (801a58c <etharp_query+0x25c>)
 801a422:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801a426:	495d      	ldr	r1, [pc, #372]	@ (801a59c <etharp_query+0x26c>)
 801a428:	485a      	ldr	r0, [pc, #360]	@ (801a594 <etharp_query+0x264>)
 801a42a:	f003 f839 	bl	801d4a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a42e:	6a3b      	ldr	r3, [r7, #32]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d102      	bne.n	801a43a <etharp_query+0x10a>
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d10c      	bne.n	801a454 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a43a:	68b9      	ldr	r1, [r7, #8]
 801a43c:	68f8      	ldr	r0, [r7, #12]
 801a43e:	f000 f963 	bl	801a708 <etharp_request>
 801a442:	4603      	mov	r3, r0
 801a444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d102      	bne.n	801a454 <etharp_query+0x124>
      return result;
 801a44e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a452:	e096      	b.n	801a582 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d106      	bne.n	801a468 <etharp_query+0x138>
 801a45a:	4b4c      	ldr	r3, [pc, #304]	@ (801a58c <etharp_query+0x25c>)
 801a45c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801a460:	494f      	ldr	r1, [pc, #316]	@ (801a5a0 <etharp_query+0x270>)
 801a462:	484c      	ldr	r0, [pc, #304]	@ (801a594 <etharp_query+0x264>)
 801a464:	f003 f81c 	bl	801d4a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a468:	7c7a      	ldrb	r2, [r7, #17]
 801a46a:	494b      	ldr	r1, [pc, #300]	@ (801a598 <etharp_query+0x268>)
 801a46c:	4613      	mov	r3, r2
 801a46e:	005b      	lsls	r3, r3, #1
 801a470:	4413      	add	r3, r2
 801a472:	00db      	lsls	r3, r3, #3
 801a474:	440b      	add	r3, r1
 801a476:	3314      	adds	r3, #20
 801a478:	781b      	ldrb	r3, [r3, #0]
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	d917      	bls.n	801a4ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a47e:	4a49      	ldr	r2, [pc, #292]	@ (801a5a4 <etharp_query+0x274>)
 801a480:	7c7b      	ldrb	r3, [r7, #17]
 801a482:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a484:	7c7a      	ldrb	r2, [r7, #17]
 801a486:	4613      	mov	r3, r2
 801a488:	005b      	lsls	r3, r3, #1
 801a48a:	4413      	add	r3, r2
 801a48c:	00db      	lsls	r3, r3, #3
 801a48e:	3308      	adds	r3, #8
 801a490:	4a41      	ldr	r2, [pc, #260]	@ (801a598 <etharp_query+0x268>)
 801a492:	4413      	add	r3, r2
 801a494:	3304      	adds	r3, #4
 801a496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a49a:	9200      	str	r2, [sp, #0]
 801a49c:	697a      	ldr	r2, [r7, #20]
 801a49e:	6879      	ldr	r1, [r7, #4]
 801a4a0:	68f8      	ldr	r0, [r7, #12]
 801a4a2:	f001 fd05 	bl	801beb0 <ethernet_output>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a4ac:	e067      	b.n	801a57e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a4ae:	7c7a      	ldrb	r2, [r7, #17]
 801a4b0:	4939      	ldr	r1, [pc, #228]	@ (801a598 <etharp_query+0x268>)
 801a4b2:	4613      	mov	r3, r2
 801a4b4:	005b      	lsls	r3, r3, #1
 801a4b6:	4413      	add	r3, r2
 801a4b8:	00db      	lsls	r3, r3, #3
 801a4ba:	440b      	add	r3, r1
 801a4bc:	3314      	adds	r3, #20
 801a4be:	781b      	ldrb	r3, [r3, #0]
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d15c      	bne.n	801a57e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a4cc:	e01c      	b.n	801a508 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a4ce:	69fb      	ldr	r3, [r7, #28]
 801a4d0:	895a      	ldrh	r2, [r3, #10]
 801a4d2:	69fb      	ldr	r3, [r7, #28]
 801a4d4:	891b      	ldrh	r3, [r3, #8]
 801a4d6:	429a      	cmp	r2, r3
 801a4d8:	d10a      	bne.n	801a4f0 <etharp_query+0x1c0>
 801a4da:	69fb      	ldr	r3, [r7, #28]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d006      	beq.n	801a4f0 <etharp_query+0x1c0>
 801a4e2:	4b2a      	ldr	r3, [pc, #168]	@ (801a58c <etharp_query+0x25c>)
 801a4e4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801a4e8:	492f      	ldr	r1, [pc, #188]	@ (801a5a8 <etharp_query+0x278>)
 801a4ea:	482a      	ldr	r0, [pc, #168]	@ (801a594 <etharp_query+0x264>)
 801a4ec:	f002 ffd8 	bl	801d4a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a4f0:	69fb      	ldr	r3, [r7, #28]
 801a4f2:	7b1b      	ldrb	r3, [r3, #12]
 801a4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d002      	beq.n	801a502 <etharp_query+0x1d2>
        copy_needed = 1;
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	61bb      	str	r3, [r7, #24]
        break;
 801a500:	e005      	b.n	801a50e <etharp_query+0x1de>
      }
      p = p->next;
 801a502:	69fb      	ldr	r3, [r7, #28]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d1df      	bne.n	801a4ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a50e:	69bb      	ldr	r3, [r7, #24]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d007      	beq.n	801a524 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801a51a:	200e      	movs	r0, #14
 801a51c:	f7f9 fa4e 	bl	80139bc <pbuf_clone>
 801a520:	61f8      	str	r0, [r7, #28]
 801a522:	e004      	b.n	801a52e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a528:	69f8      	ldr	r0, [r7, #28]
 801a52a:	f7f9 f875 	bl	8013618 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a52e:	69fb      	ldr	r3, [r7, #28]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d021      	beq.n	801a578 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a534:	7c7a      	ldrb	r2, [r7, #17]
 801a536:	4918      	ldr	r1, [pc, #96]	@ (801a598 <etharp_query+0x268>)
 801a538:	4613      	mov	r3, r2
 801a53a:	005b      	lsls	r3, r3, #1
 801a53c:	4413      	add	r3, r2
 801a53e:	00db      	lsls	r3, r3, #3
 801a540:	440b      	add	r3, r1
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d00a      	beq.n	801a55e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a548:	7c7a      	ldrb	r2, [r7, #17]
 801a54a:	4913      	ldr	r1, [pc, #76]	@ (801a598 <etharp_query+0x268>)
 801a54c:	4613      	mov	r3, r2
 801a54e:	005b      	lsls	r3, r3, #1
 801a550:	4413      	add	r3, r2
 801a552:	00db      	lsls	r3, r3, #3
 801a554:	440b      	add	r3, r1
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	4618      	mov	r0, r3
 801a55a:	f7f8 ffb7 	bl	80134cc <pbuf_free>
      }
      arp_table[i].q = p;
 801a55e:	7c7a      	ldrb	r2, [r7, #17]
 801a560:	490d      	ldr	r1, [pc, #52]	@ (801a598 <etharp_query+0x268>)
 801a562:	4613      	mov	r3, r2
 801a564:	005b      	lsls	r3, r3, #1
 801a566:	4413      	add	r3, r2
 801a568:	00db      	lsls	r3, r3, #3
 801a56a:	440b      	add	r3, r1
 801a56c:	69fa      	ldr	r2, [r7, #28]
 801a56e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a570:	2300      	movs	r3, #0
 801a572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a576:	e002      	b.n	801a57e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a578:	23ff      	movs	r3, #255	@ 0xff
 801a57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801a57e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801a582:	4618      	mov	r0, r3
 801a584:	3728      	adds	r7, #40	@ 0x28
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	08020a64 	.word	0x08020a64
 801a590:	08020c10 	.word	0x08020c10
 801a594:	08020adc 	.word	0x08020adc
 801a598:	2002757c 	.word	0x2002757c
 801a59c:	08020c20 	.word	0x08020c20
 801a5a0:	08020c04 	.word	0x08020c04
 801a5a4:	2002766c 	.word	0x2002766c
 801a5a8:	08020c48 	.word	0x08020c48

0801a5ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b08a      	sub	sp, #40	@ 0x28
 801a5b0:	af02      	add	r7, sp, #8
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	607a      	str	r2, [r7, #4]
 801a5b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d106      	bne.n	801a5d2 <etharp_raw+0x26>
 801a5c4:	4b3a      	ldr	r3, [pc, #232]	@ (801a6b0 <etharp_raw+0x104>)
 801a5c6:	f240 4257 	movw	r2, #1111	@ 0x457
 801a5ca:	493a      	ldr	r1, [pc, #232]	@ (801a6b4 <etharp_raw+0x108>)
 801a5cc:	483a      	ldr	r0, [pc, #232]	@ (801a6b8 <etharp_raw+0x10c>)
 801a5ce:	f002 ff67 	bl	801d4a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a5d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a5d6:	211c      	movs	r1, #28
 801a5d8:	200e      	movs	r0, #14
 801a5da:	f7f8 fc93 	bl	8012f04 <pbuf_alloc>
 801a5de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a5e0:	69bb      	ldr	r3, [r7, #24]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d102      	bne.n	801a5ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 801a5ea:	e05d      	b.n	801a6a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a5ec:	69bb      	ldr	r3, [r7, #24]
 801a5ee:	895b      	ldrh	r3, [r3, #10]
 801a5f0:	2b1b      	cmp	r3, #27
 801a5f2:	d806      	bhi.n	801a602 <etharp_raw+0x56>
 801a5f4:	4b2e      	ldr	r3, [pc, #184]	@ (801a6b0 <etharp_raw+0x104>)
 801a5f6:	f240 4262 	movw	r2, #1122	@ 0x462
 801a5fa:	4930      	ldr	r1, [pc, #192]	@ (801a6bc <etharp_raw+0x110>)
 801a5fc:	482e      	ldr	r0, [pc, #184]	@ (801a6b8 <etharp_raw+0x10c>)
 801a5fe:	f002 ff4f 	bl	801d4a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a602:	69bb      	ldr	r3, [r7, #24]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a608:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a60a:	4618      	mov	r0, r3
 801a60c:	f7f7 fb70 	bl	8011cf0 <lwip_htons>
 801a610:	4603      	mov	r3, r0
 801a612:	461a      	mov	r2, r3
 801a614:	697b      	ldr	r3, [r7, #20]
 801a616:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a61e:	2b06      	cmp	r3, #6
 801a620:	d006      	beq.n	801a630 <etharp_raw+0x84>
 801a622:	4b23      	ldr	r3, [pc, #140]	@ (801a6b0 <etharp_raw+0x104>)
 801a624:	f240 4269 	movw	r2, #1129	@ 0x469
 801a628:	4925      	ldr	r1, [pc, #148]	@ (801a6c0 <etharp_raw+0x114>)
 801a62a:	4823      	ldr	r0, [pc, #140]	@ (801a6b8 <etharp_raw+0x10c>)
 801a62c:	f002 ff38 	bl	801d4a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a630:	697b      	ldr	r3, [r7, #20]
 801a632:	3308      	adds	r3, #8
 801a634:	2206      	movs	r2, #6
 801a636:	6839      	ldr	r1, [r7, #0]
 801a638:	4618      	mov	r0, r3
 801a63a:	f003 f86a 	bl	801d712 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	3312      	adds	r3, #18
 801a642:	2206      	movs	r2, #6
 801a644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a646:	4618      	mov	r0, r3
 801a648:	f003 f863 	bl	801d712 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a64c:	697b      	ldr	r3, [r7, #20]
 801a64e:	330e      	adds	r3, #14
 801a650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a652:	6812      	ldr	r2, [r2, #0]
 801a654:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	3318      	adds	r3, #24
 801a65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a65c:	6812      	ldr	r2, [r2, #0]
 801a65e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a660:	697b      	ldr	r3, [r7, #20]
 801a662:	2200      	movs	r2, #0
 801a664:	701a      	strb	r2, [r3, #0]
 801a666:	2200      	movs	r2, #0
 801a668:	f042 0201 	orr.w	r2, r2, #1
 801a66c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a66e:	697b      	ldr	r3, [r7, #20]
 801a670:	2200      	movs	r2, #0
 801a672:	f042 0208 	orr.w	r2, r2, #8
 801a676:	709a      	strb	r2, [r3, #2]
 801a678:	2200      	movs	r2, #0
 801a67a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	2206      	movs	r2, #6
 801a680:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a682:	697b      	ldr	r3, [r7, #20]
 801a684:	2204      	movs	r2, #4
 801a686:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a688:	f640 0306 	movw	r3, #2054	@ 0x806
 801a68c:	9300      	str	r3, [sp, #0]
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	68ba      	ldr	r2, [r7, #8]
 801a692:	69b9      	ldr	r1, [r7, #24]
 801a694:	68f8      	ldr	r0, [r7, #12]
 801a696:	f001 fc0b 	bl	801beb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a69a:	69b8      	ldr	r0, [r7, #24]
 801a69c:	f7f8 ff16 	bl	80134cc <pbuf_free>
  p = NULL;
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a6a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3720      	adds	r7, #32
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	08020a64 	.word	0x08020a64
 801a6b4:	08020bb4 	.word	0x08020bb4
 801a6b8:	08020adc 	.word	0x08020adc
 801a6bc:	08020c64 	.word	0x08020c64
 801a6c0:	08020c98 	.word	0x08020c98

0801a6c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b088      	sub	sp, #32
 801a6c8:	af04      	add	r7, sp, #16
 801a6ca:	60f8      	str	r0, [r7, #12]
 801a6cc:	60b9      	str	r1, [r7, #8]
 801a6ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a6e0:	2201      	movs	r2, #1
 801a6e2:	9203      	str	r2, [sp, #12]
 801a6e4:	68ba      	ldr	r2, [r7, #8]
 801a6e6:	9202      	str	r2, [sp, #8]
 801a6e8:	4a06      	ldr	r2, [pc, #24]	@ (801a704 <etharp_request_dst+0x40>)
 801a6ea:	9201      	str	r2, [sp, #4]
 801a6ec:	9300      	str	r3, [sp, #0]
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	687a      	ldr	r2, [r7, #4]
 801a6f2:	68f8      	ldr	r0, [r7, #12]
 801a6f4:	f7ff ff5a 	bl	801a5ac <etharp_raw>
 801a6f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	3710      	adds	r7, #16
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd80      	pop	{r7, pc}
 801a702:	bf00      	nop
 801a704:	08021ab0 	.word	0x08021ab0

0801a708 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b082      	sub	sp, #8
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	6078      	str	r0, [r7, #4]
 801a710:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a712:	4a05      	ldr	r2, [pc, #20]	@ (801a728 <etharp_request+0x20>)
 801a714:	6839      	ldr	r1, [r7, #0]
 801a716:	6878      	ldr	r0, [r7, #4]
 801a718:	f7ff ffd4 	bl	801a6c4 <etharp_request_dst>
 801a71c:	4603      	mov	r3, r0
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3708      	adds	r7, #8
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	08021aa8 	.word	0x08021aa8

0801a72c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b08e      	sub	sp, #56	@ 0x38
 801a730:	af04      	add	r7, sp, #16
 801a732:	6078      	str	r0, [r7, #4]
 801a734:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a736:	4b79      	ldr	r3, [pc, #484]	@ (801a91c <icmp_input+0x1f0>)
 801a738:	689b      	ldr	r3, [r3, #8]
 801a73a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a73e:	781b      	ldrb	r3, [r3, #0]
 801a740:	f003 030f 	and.w	r3, r3, #15
 801a744:	b2db      	uxtb	r3, r3
 801a746:	009b      	lsls	r3, r3, #2
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801a74c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a74e:	2b13      	cmp	r3, #19
 801a750:	f240 80cd 	bls.w	801a8ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	895b      	ldrh	r3, [r3, #10]
 801a758:	2b03      	cmp	r3, #3
 801a75a:	f240 80ca 	bls.w	801a8f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	685b      	ldr	r3, [r3, #4]
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a768:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	f000 80b7 	beq.w	801a8e0 <icmp_input+0x1b4>
 801a772:	2b08      	cmp	r3, #8
 801a774:	f040 80b7 	bne.w	801a8e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a778:	4b69      	ldr	r3, [pc, #420]	@ (801a920 <icmp_input+0x1f4>)
 801a77a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a77c:	4b67      	ldr	r3, [pc, #412]	@ (801a91c <icmp_input+0x1f0>)
 801a77e:	695b      	ldr	r3, [r3, #20]
 801a780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a784:	2be0      	cmp	r3, #224	@ 0xe0
 801a786:	f000 80bb 	beq.w	801a900 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a78a:	4b64      	ldr	r3, [pc, #400]	@ (801a91c <icmp_input+0x1f0>)
 801a78c:	695b      	ldr	r3, [r3, #20]
 801a78e:	4a63      	ldr	r2, [pc, #396]	@ (801a91c <icmp_input+0x1f0>)
 801a790:	6812      	ldr	r2, [r2, #0]
 801a792:	4611      	mov	r1, r2
 801a794:	4618      	mov	r0, r3
 801a796:	f000 fbed 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801a79a:	4603      	mov	r3, r0
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	f040 80b1 	bne.w	801a904 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	891b      	ldrh	r3, [r3, #8]
 801a7a6:	2b07      	cmp	r3, #7
 801a7a8:	f240 80a5 	bls.w	801a8f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a7ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a7ae:	330e      	adds	r3, #14
 801a7b0:	4619      	mov	r1, r3
 801a7b2:	6878      	ldr	r0, [r7, #4]
 801a7b4:	f7f8 fdf4 	bl	80133a0 <pbuf_add_header>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d04b      	beq.n	801a856 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	891a      	ldrh	r2, [r3, #8]
 801a7c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a7c4:	4413      	add	r3, r2
 801a7c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	891b      	ldrh	r3, [r3, #8]
 801a7cc:	8b7a      	ldrh	r2, [r7, #26]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	f0c0 809a 	bcc.w	801a908 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a7d4:	8b7b      	ldrh	r3, [r7, #26]
 801a7d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a7da:	4619      	mov	r1, r3
 801a7dc:	200e      	movs	r0, #14
 801a7de:	f7f8 fb91 	bl	8012f04 <pbuf_alloc>
 801a7e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	f000 8090 	beq.w	801a90c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	895b      	ldrh	r3, [r3, #10]
 801a7f0:	461a      	mov	r2, r3
 801a7f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a7f4:	3308      	adds	r3, #8
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d203      	bcs.n	801a802 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a7fa:	6978      	ldr	r0, [r7, #20]
 801a7fc:	f7f8 fe66 	bl	80134cc <pbuf_free>
          goto icmperr;
 801a800:	e085      	b.n	801a90e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a802:	697b      	ldr	r3, [r7, #20]
 801a804:	685b      	ldr	r3, [r3, #4]
 801a806:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a808:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a80a:	4618      	mov	r0, r3
 801a80c:	f002 ff81 	bl	801d712 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a810:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a812:	4619      	mov	r1, r3
 801a814:	6978      	ldr	r0, [r7, #20]
 801a816:	f7f8 fdd3 	bl	80133c0 <pbuf_remove_header>
 801a81a:	4603      	mov	r3, r0
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d009      	beq.n	801a834 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a820:	4b40      	ldr	r3, [pc, #256]	@ (801a924 <icmp_input+0x1f8>)
 801a822:	22b6      	movs	r2, #182	@ 0xb6
 801a824:	4940      	ldr	r1, [pc, #256]	@ (801a928 <icmp_input+0x1fc>)
 801a826:	4841      	ldr	r0, [pc, #260]	@ (801a92c <icmp_input+0x200>)
 801a828:	f002 fe3a 	bl	801d4a0 <iprintf>
          pbuf_free(r);
 801a82c:	6978      	ldr	r0, [r7, #20]
 801a82e:	f7f8 fe4d 	bl	80134cc <pbuf_free>
          goto icmperr;
 801a832:	e06c      	b.n	801a90e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a834:	6879      	ldr	r1, [r7, #4]
 801a836:	6978      	ldr	r0, [r7, #20]
 801a838:	f7f8 ff7c 	bl	8013734 <pbuf_copy>
 801a83c:	4603      	mov	r3, r0
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d003      	beq.n	801a84a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a842:	6978      	ldr	r0, [r7, #20]
 801a844:	f7f8 fe42 	bl	80134cc <pbuf_free>
          goto icmperr;
 801a848:	e061      	b.n	801a90e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a84a:	6878      	ldr	r0, [r7, #4]
 801a84c:	f7f8 fe3e 	bl	80134cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	607b      	str	r3, [r7, #4]
 801a854:	e00f      	b.n	801a876 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a856:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a858:	330e      	adds	r3, #14
 801a85a:	4619      	mov	r1, r3
 801a85c:	6878      	ldr	r0, [r7, #4]
 801a85e:	f7f8 fdaf 	bl	80133c0 <pbuf_remove_header>
 801a862:	4603      	mov	r3, r0
 801a864:	2b00      	cmp	r3, #0
 801a866:	d006      	beq.n	801a876 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a868:	4b2e      	ldr	r3, [pc, #184]	@ (801a924 <icmp_input+0x1f8>)
 801a86a:	22c7      	movs	r2, #199	@ 0xc7
 801a86c:	4930      	ldr	r1, [pc, #192]	@ (801a930 <icmp_input+0x204>)
 801a86e:	482f      	ldr	r0, [pc, #188]	@ (801a92c <icmp_input+0x200>)
 801a870:	f002 fe16 	bl	801d4a0 <iprintf>
          goto icmperr;
 801a874:	e04b      	b.n	801a90e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	685b      	ldr	r3, [r3, #4]
 801a87a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a87c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a87e:	4619      	mov	r1, r3
 801a880:	6878      	ldr	r0, [r7, #4]
 801a882:	f7f8 fd8d 	bl	80133a0 <pbuf_add_header>
 801a886:	4603      	mov	r3, r0
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d12b      	bne.n	801a8e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a892:	69fb      	ldr	r3, [r7, #28]
 801a894:	681a      	ldr	r2, [r3, #0]
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a89a:	4b20      	ldr	r3, [pc, #128]	@ (801a91c <icmp_input+0x1f0>)
 801a89c:	691a      	ldr	r2, [r3, #16]
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a8a8:	693b      	ldr	r3, [r7, #16]
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	709a      	strb	r2, [r3, #2]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	22ff      	movs	r2, #255	@ 0xff
 801a8b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	729a      	strb	r2, [r3, #10]
 801a8be:	2200      	movs	r2, #0
 801a8c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a8c2:	683b      	ldr	r3, [r7, #0]
 801a8c4:	9302      	str	r3, [sp, #8]
 801a8c6:	2301      	movs	r3, #1
 801a8c8:	9301      	str	r3, [sp, #4]
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	9300      	str	r3, [sp, #0]
 801a8ce:	23ff      	movs	r3, #255	@ 0xff
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	69f9      	ldr	r1, [r7, #28]
 801a8d4:	6878      	ldr	r0, [r7, #4]
 801a8d6:	f000 fa75 	bl	801adc4 <ip4_output_if>
 801a8da:	4603      	mov	r3, r0
 801a8dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a8de:	e001      	b.n	801a8e4 <icmp_input+0x1b8>
      break;
 801a8e0:	bf00      	nop
 801a8e2:	e000      	b.n	801a8e6 <icmp_input+0x1ba>
      break;
 801a8e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f7f8 fdf0 	bl	80134cc <pbuf_free>
  return;
 801a8ec:	e013      	b.n	801a916 <icmp_input+0x1ea>
    goto lenerr;
 801a8ee:	bf00      	nop
 801a8f0:	e002      	b.n	801a8f8 <icmp_input+0x1cc>
    goto lenerr;
 801a8f2:	bf00      	nop
 801a8f4:	e000      	b.n	801a8f8 <icmp_input+0x1cc>
        goto lenerr;
 801a8f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f7f8 fde7 	bl	80134cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a8fe:	e00a      	b.n	801a916 <icmp_input+0x1ea>
        goto icmperr;
 801a900:	bf00      	nop
 801a902:	e004      	b.n	801a90e <icmp_input+0x1e2>
        goto icmperr;
 801a904:	bf00      	nop
 801a906:	e002      	b.n	801a90e <icmp_input+0x1e2>
          goto icmperr;
 801a908:	bf00      	nop
 801a90a:	e000      	b.n	801a90e <icmp_input+0x1e2>
          goto icmperr;
 801a90c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a90e:	6878      	ldr	r0, [r7, #4]
 801a910:	f7f8 fddc 	bl	80134cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a914:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a916:	3728      	adds	r7, #40	@ 0x28
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd80      	pop	{r7, pc}
 801a91c:	2002441c 	.word	0x2002441c
 801a920:	20024430 	.word	0x20024430
 801a924:	08020cdc 	.word	0x08020cdc
 801a928:	08020d14 	.word	0x08020d14
 801a92c:	08020d4c 	.word	0x08020d4c
 801a930:	08020d74 	.word	0x08020d74

0801a934 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b082      	sub	sp, #8
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
 801a93c:	460b      	mov	r3, r1
 801a93e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a940:	78fb      	ldrb	r3, [r7, #3]
 801a942:	461a      	mov	r2, r3
 801a944:	2103      	movs	r1, #3
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f000 f814 	bl	801a974 <icmp_send_response>
}
 801a94c:	bf00      	nop
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}

0801a954 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
 801a95c:	460b      	mov	r3, r1
 801a95e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a960:	78fb      	ldrb	r3, [r7, #3]
 801a962:	461a      	mov	r2, r3
 801a964:	210b      	movs	r1, #11
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f000 f804 	bl	801a974 <icmp_send_response>
}
 801a96c:	bf00      	nop
 801a96e:	3708      	adds	r7, #8
 801a970:	46bd      	mov	sp, r7
 801a972:	bd80      	pop	{r7, pc}

0801a974 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b08c      	sub	sp, #48	@ 0x30
 801a978:	af04      	add	r7, sp, #16
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	460b      	mov	r3, r1
 801a97e:	70fb      	strb	r3, [r7, #3]
 801a980:	4613      	mov	r3, r2
 801a982:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a984:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a988:	2124      	movs	r1, #36	@ 0x24
 801a98a:	2022      	movs	r0, #34	@ 0x22
 801a98c:	f7f8 faba 	bl	8012f04 <pbuf_alloc>
 801a990:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a992:	69fb      	ldr	r3, [r7, #28]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d04c      	beq.n	801aa32 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a998:	69fb      	ldr	r3, [r7, #28]
 801a99a:	895b      	ldrh	r3, [r3, #10]
 801a99c:	2b23      	cmp	r3, #35	@ 0x23
 801a99e:	d806      	bhi.n	801a9ae <icmp_send_response+0x3a>
 801a9a0:	4b26      	ldr	r3, [pc, #152]	@ (801aa3c <icmp_send_response+0xc8>)
 801a9a2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801a9a6:	4926      	ldr	r1, [pc, #152]	@ (801aa40 <icmp_send_response+0xcc>)
 801a9a8:	4826      	ldr	r0, [pc, #152]	@ (801aa44 <icmp_send_response+0xd0>)
 801a9aa:	f002 fd79 	bl	801d4a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	685b      	ldr	r3, [r3, #4]
 801a9b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a9b4:	69fb      	ldr	r3, [r7, #28]
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a9ba:	697b      	ldr	r3, [r7, #20]
 801a9bc:	78fa      	ldrb	r2, [r7, #3]
 801a9be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a9c0:	697b      	ldr	r3, [r7, #20]
 801a9c2:	78ba      	ldrb	r2, [r7, #2]
 801a9c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a9c6:	697b      	ldr	r3, [r7, #20]
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	711a      	strb	r2, [r3, #4]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	719a      	strb	r2, [r3, #6]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	685b      	ldr	r3, [r3, #4]
 801a9de:	f103 0008 	add.w	r0, r3, #8
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	221c      	movs	r2, #28
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	f002 fe92 	bl	801d712 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a9ee:	69bb      	ldr	r3, [r7, #24]
 801a9f0:	68db      	ldr	r3, [r3, #12]
 801a9f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a9f4:	f107 030c 	add.w	r3, r7, #12
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	f000 f825 	bl	801aa48 <ip4_route>
 801a9fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801aa00:	693b      	ldr	r3, [r7, #16]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d011      	beq.n	801aa2a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aa06:	697b      	ldr	r3, [r7, #20]
 801aa08:	2200      	movs	r2, #0
 801aa0a:	709a      	strb	r2, [r3, #2]
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801aa10:	f107 020c 	add.w	r2, r7, #12
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	9302      	str	r3, [sp, #8]
 801aa18:	2301      	movs	r3, #1
 801aa1a:	9301      	str	r3, [sp, #4]
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	9300      	str	r3, [sp, #0]
 801aa20:	23ff      	movs	r3, #255	@ 0xff
 801aa22:	2100      	movs	r1, #0
 801aa24:	69f8      	ldr	r0, [r7, #28]
 801aa26:	f000 f9cd 	bl	801adc4 <ip4_output_if>
  }
  pbuf_free(q);
 801aa2a:	69f8      	ldr	r0, [r7, #28]
 801aa2c:	f7f8 fd4e 	bl	80134cc <pbuf_free>
 801aa30:	e000      	b.n	801aa34 <icmp_send_response+0xc0>
    return;
 801aa32:	bf00      	nop
}
 801aa34:	3720      	adds	r7, #32
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	08020cdc 	.word	0x08020cdc
 801aa40:	08020da8 	.word	0x08020da8
 801aa44:	08020d4c 	.word	0x08020d4c

0801aa48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801aa48:	b480      	push	{r7}
 801aa4a:	b085      	sub	sp, #20
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801aa50:	4b33      	ldr	r3, [pc, #204]	@ (801ab20 <ip4_route+0xd8>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	60fb      	str	r3, [r7, #12]
 801aa56:	e036      	b.n	801aac6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aa5e:	f003 0301 	and.w	r3, r3, #1
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d02b      	beq.n	801aac0 <ip4_route+0x78>
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aa6e:	089b      	lsrs	r3, r3, #2
 801aa70:	f003 0301 	and.w	r3, r3, #1
 801aa74:	b2db      	uxtb	r3, r3
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d022      	beq.n	801aac0 <ip4_route+0x78>
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	3304      	adds	r3, #4
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d01d      	beq.n	801aac0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681a      	ldr	r2, [r3, #0]
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	3304      	adds	r3, #4
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	405a      	eors	r2, r3
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	3308      	adds	r3, #8
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	4013      	ands	r3, r2
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d101      	bne.n	801aaa0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	e038      	b.n	801ab12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aaa6:	f003 0302 	and.w	r3, r3, #2
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d108      	bne.n	801aac0 <ip4_route+0x78>
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681a      	ldr	r2, [r3, #0]
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	330c      	adds	r3, #12
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d101      	bne.n	801aac0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	e028      	b.n	801ab12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	60fb      	str	r3, [r7, #12]
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d1c5      	bne.n	801aa58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801aacc:	4b15      	ldr	r3, [pc, #84]	@ (801ab24 <ip4_route+0xdc>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d01a      	beq.n	801ab0a <ip4_route+0xc2>
 801aad4:	4b13      	ldr	r3, [pc, #76]	@ (801ab24 <ip4_route+0xdc>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aadc:	f003 0301 	and.w	r3, r3, #1
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d012      	beq.n	801ab0a <ip4_route+0xc2>
 801aae4:	4b0f      	ldr	r3, [pc, #60]	@ (801ab24 <ip4_route+0xdc>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aaec:	f003 0304 	and.w	r3, r3, #4
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d00a      	beq.n	801ab0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801aaf4:	4b0b      	ldr	r3, [pc, #44]	@ (801ab24 <ip4_route+0xdc>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	3304      	adds	r3, #4
 801aafa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d004      	beq.n	801ab0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab08:	d101      	bne.n	801ab0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	e001      	b.n	801ab12 <ip4_route+0xca>
  }

  return netif_default;
 801ab0e:	4b05      	ldr	r3, [pc, #20]	@ (801ab24 <ip4_route+0xdc>)
 801ab10:	681b      	ldr	r3, [r3, #0]
}
 801ab12:	4618      	mov	r0, r3
 801ab14:	3714      	adds	r7, #20
 801ab16:	46bd      	mov	sp, r7
 801ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1c:	4770      	bx	lr
 801ab1e:	bf00      	nop
 801ab20:	20027510 	.word	0x20027510
 801ab24:	20027514 	.word	0x20027514

0801ab28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ab36:	f003 0301 	and.w	r3, r3, #1
 801ab3a:	b2db      	uxtb	r3, r3
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d016      	beq.n	801ab6e <ip4_input_accept+0x46>
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	3304      	adds	r3, #4
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d011      	beq.n	801ab6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ab4a:	4b0b      	ldr	r3, [pc, #44]	@ (801ab78 <ip4_input_accept+0x50>)
 801ab4c:	695a      	ldr	r2, [r3, #20]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	3304      	adds	r3, #4
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	429a      	cmp	r2, r3
 801ab56:	d008      	beq.n	801ab6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ab58:	4b07      	ldr	r3, [pc, #28]	@ (801ab78 <ip4_input_accept+0x50>)
 801ab5a:	695b      	ldr	r3, [r3, #20]
 801ab5c:	6879      	ldr	r1, [r7, #4]
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f000 fa08 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801ab64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d001      	beq.n	801ab6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ab6a:	2301      	movs	r3, #1
 801ab6c:	e000      	b.n	801ab70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ab6e:	2300      	movs	r3, #0
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3708      	adds	r7, #8
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}
 801ab78:	2002441c 	.word	0x2002441c

0801ab7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b086      	sub	sp, #24
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
 801ab84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ab8c:	697b      	ldr	r3, [r7, #20]
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	091b      	lsrs	r3, r3, #4
 801ab92:	b2db      	uxtb	r3, r3
 801ab94:	2b04      	cmp	r3, #4
 801ab96:	d004      	beq.n	801aba2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ab98:	6878      	ldr	r0, [r7, #4]
 801ab9a:	f7f8 fc97 	bl	80134cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	e107      	b.n	801adb2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801aba2:	697b      	ldr	r3, [r7, #20]
 801aba4:	781b      	ldrb	r3, [r3, #0]
 801aba6:	f003 030f 	and.w	r3, r3, #15
 801abaa:	b2db      	uxtb	r3, r3
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	b2db      	uxtb	r3, r3
 801abb0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801abb2:	697b      	ldr	r3, [r7, #20]
 801abb4:	885b      	ldrh	r3, [r3, #2]
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	4618      	mov	r0, r3
 801abba:	f7f7 f899 	bl	8011cf0 <lwip_htons>
 801abbe:	4603      	mov	r3, r0
 801abc0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	891b      	ldrh	r3, [r3, #8]
 801abc6:	89ba      	ldrh	r2, [r7, #12]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d204      	bcs.n	801abd6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801abcc:	89bb      	ldrh	r3, [r7, #12]
 801abce:	4619      	mov	r1, r3
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f7f8 faf5 	bl	80131c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	895b      	ldrh	r3, [r3, #10]
 801abda:	89fa      	ldrh	r2, [r7, #14]
 801abdc:	429a      	cmp	r2, r3
 801abde:	d807      	bhi.n	801abf0 <ip4_input+0x74>
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	891b      	ldrh	r3, [r3, #8]
 801abe4:	89ba      	ldrh	r2, [r7, #12]
 801abe6:	429a      	cmp	r2, r3
 801abe8:	d802      	bhi.n	801abf0 <ip4_input+0x74>
 801abea:	89fb      	ldrh	r3, [r7, #14]
 801abec:	2b13      	cmp	r3, #19
 801abee:	d804      	bhi.n	801abfa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801abf0:	6878      	ldr	r0, [r7, #4]
 801abf2:	f7f8 fc6b 	bl	80134cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801abf6:	2300      	movs	r3, #0
 801abf8:	e0db      	b.n	801adb2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	691b      	ldr	r3, [r3, #16]
 801abfe:	4a6f      	ldr	r2, [pc, #444]	@ (801adbc <ip4_input+0x240>)
 801ac00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	68db      	ldr	r3, [r3, #12]
 801ac06:	4a6d      	ldr	r2, [pc, #436]	@ (801adbc <ip4_input+0x240>)
 801ac08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ac0a:	4b6c      	ldr	r3, [pc, #432]	@ (801adbc <ip4_input+0x240>)
 801ac0c:	695b      	ldr	r3, [r3, #20]
 801ac0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ac12:	2be0      	cmp	r3, #224	@ 0xe0
 801ac14:	d112      	bne.n	801ac3c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ac1c:	f003 0301 	and.w	r3, r3, #1
 801ac20:	b2db      	uxtb	r3, r3
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d007      	beq.n	801ac36 <ip4_input+0xba>
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	3304      	adds	r3, #4
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d002      	beq.n	801ac36 <ip4_input+0xba>
      netif = inp;
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	613b      	str	r3, [r7, #16]
 801ac34:	e02a      	b.n	801ac8c <ip4_input+0x110>
    } else {
      netif = NULL;
 801ac36:	2300      	movs	r3, #0
 801ac38:	613b      	str	r3, [r7, #16]
 801ac3a:	e027      	b.n	801ac8c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ac3c:	6838      	ldr	r0, [r7, #0]
 801ac3e:	f7ff ff73 	bl	801ab28 <ip4_input_accept>
 801ac42:	4603      	mov	r3, r0
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d002      	beq.n	801ac4e <ip4_input+0xd2>
      netif = inp;
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	613b      	str	r3, [r7, #16]
 801ac4c:	e01e      	b.n	801ac8c <ip4_input+0x110>
    } else {
      netif = NULL;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ac52:	4b5a      	ldr	r3, [pc, #360]	@ (801adbc <ip4_input+0x240>)
 801ac54:	695b      	ldr	r3, [r3, #20]
 801ac56:	b2db      	uxtb	r3, r3
 801ac58:	2b7f      	cmp	r3, #127	@ 0x7f
 801ac5a:	d017      	beq.n	801ac8c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ac5c:	4b58      	ldr	r3, [pc, #352]	@ (801adc0 <ip4_input+0x244>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	613b      	str	r3, [r7, #16]
 801ac62:	e00e      	b.n	801ac82 <ip4_input+0x106>
          if (netif == inp) {
 801ac64:	693a      	ldr	r2, [r7, #16]
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d006      	beq.n	801ac7a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ac6c:	6938      	ldr	r0, [r7, #16]
 801ac6e:	f7ff ff5b 	bl	801ab28 <ip4_input_accept>
 801ac72:	4603      	mov	r3, r0
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d108      	bne.n	801ac8a <ip4_input+0x10e>
 801ac78:	e000      	b.n	801ac7c <ip4_input+0x100>
            continue;
 801ac7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	613b      	str	r3, [r7, #16]
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d1ed      	bne.n	801ac64 <ip4_input+0xe8>
 801ac88:	e000      	b.n	801ac8c <ip4_input+0x110>
            break;
 801ac8a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ac8c:	4b4b      	ldr	r3, [pc, #300]	@ (801adbc <ip4_input+0x240>)
 801ac8e:	691b      	ldr	r3, [r3, #16]
 801ac90:	6839      	ldr	r1, [r7, #0]
 801ac92:	4618      	mov	r0, r3
 801ac94:	f000 f96e 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d105      	bne.n	801acaa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ac9e:	4b47      	ldr	r3, [pc, #284]	@ (801adbc <ip4_input+0x240>)
 801aca0:	691b      	ldr	r3, [r3, #16]
 801aca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801aca6:	2be0      	cmp	r3, #224	@ 0xe0
 801aca8:	d104      	bne.n	801acb4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801acaa:	6878      	ldr	r0, [r7, #4]
 801acac:	f7f8 fc0e 	bl	80134cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801acb0:	2300      	movs	r3, #0
 801acb2:	e07e      	b.n	801adb2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d104      	bne.n	801acc4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f7f8 fc06 	bl	80134cc <pbuf_free>
    return ERR_OK;
 801acc0:	2300      	movs	r3, #0
 801acc2:	e076      	b.n	801adb2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801acc4:	697b      	ldr	r3, [r7, #20]
 801acc6:	88db      	ldrh	r3, [r3, #6]
 801acc8:	b29b      	uxth	r3, r3
 801acca:	461a      	mov	r2, r3
 801accc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801acd0:	4013      	ands	r3, r2
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d00b      	beq.n	801acee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	f000 fd22 	bl	801b720 <ip4_reass>
 801acdc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d101      	bne.n	801ace8 <ip4_input+0x16c>
      return ERR_OK;
 801ace4:	2300      	movs	r3, #0
 801ace6:	e064      	b.n	801adb2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	685b      	ldr	r3, [r3, #4]
 801acec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801acee:	4a33      	ldr	r2, [pc, #204]	@ (801adbc <ip4_input+0x240>)
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801acf4:	4a31      	ldr	r2, [pc, #196]	@ (801adbc <ip4_input+0x240>)
 801acf6:	683b      	ldr	r3, [r7, #0]
 801acf8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801acfa:	4a30      	ldr	r2, [pc, #192]	@ (801adbc <ip4_input+0x240>)
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ad00:	697b      	ldr	r3, [r7, #20]
 801ad02:	781b      	ldrb	r3, [r3, #0]
 801ad04:	f003 030f 	and.w	r3, r3, #15
 801ad08:	b2db      	uxtb	r3, r3
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	b2db      	uxtb	r3, r3
 801ad0e:	461a      	mov	r2, r3
 801ad10:	4b2a      	ldr	r3, [pc, #168]	@ (801adbc <ip4_input+0x240>)
 801ad12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ad14:	89fb      	ldrh	r3, [r7, #14]
 801ad16:	4619      	mov	r1, r3
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	f7f8 fb51 	bl	80133c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	7a5b      	ldrb	r3, [r3, #9]
 801ad22:	2b11      	cmp	r3, #17
 801ad24:	d006      	beq.n	801ad34 <ip4_input+0x1b8>
 801ad26:	2b11      	cmp	r3, #17
 801ad28:	dc13      	bgt.n	801ad52 <ip4_input+0x1d6>
 801ad2a:	2b01      	cmp	r3, #1
 801ad2c:	d00c      	beq.n	801ad48 <ip4_input+0x1cc>
 801ad2e:	2b06      	cmp	r3, #6
 801ad30:	d005      	beq.n	801ad3e <ip4_input+0x1c2>
 801ad32:	e00e      	b.n	801ad52 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ad34:	6839      	ldr	r1, [r7, #0]
 801ad36:	6878      	ldr	r0, [r7, #4]
 801ad38:	f7fe f9f2 	bl	8019120 <udp_input>
        break;
 801ad3c:	e026      	b.n	801ad8c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ad3e:	6839      	ldr	r1, [r7, #0]
 801ad40:	6878      	ldr	r0, [r7, #4]
 801ad42:	f7fa fa09 	bl	8015158 <tcp_input>
        break;
 801ad46:	e021      	b.n	801ad8c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ad48:	6839      	ldr	r1, [r7, #0]
 801ad4a:	6878      	ldr	r0, [r7, #4]
 801ad4c:	f7ff fcee 	bl	801a72c <icmp_input>
        break;
 801ad50:	e01c      	b.n	801ad8c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ad52:	4b1a      	ldr	r3, [pc, #104]	@ (801adbc <ip4_input+0x240>)
 801ad54:	695b      	ldr	r3, [r3, #20]
 801ad56:	6939      	ldr	r1, [r7, #16]
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f000 f90b 	bl	801af74 <ip4_addr_isbroadcast_u32>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d10f      	bne.n	801ad84 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ad64:	4b15      	ldr	r3, [pc, #84]	@ (801adbc <ip4_input+0x240>)
 801ad66:	695b      	ldr	r3, [r3, #20]
 801ad68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ad6c:	2be0      	cmp	r3, #224	@ 0xe0
 801ad6e:	d009      	beq.n	801ad84 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ad70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ad74:	4619      	mov	r1, r3
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7f8 fb95 	bl	80134a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ad7c:	2102      	movs	r1, #2
 801ad7e:	6878      	ldr	r0, [r7, #4]
 801ad80:	f7ff fdd8 	bl	801a934 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f7f8 fba1 	bl	80134cc <pbuf_free>
        break;
 801ad8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ad8c:	4b0b      	ldr	r3, [pc, #44]	@ (801adbc <ip4_input+0x240>)
 801ad8e:	2200      	movs	r2, #0
 801ad90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ad92:	4b0a      	ldr	r3, [pc, #40]	@ (801adbc <ip4_input+0x240>)
 801ad94:	2200      	movs	r2, #0
 801ad96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ad98:	4b08      	ldr	r3, [pc, #32]	@ (801adbc <ip4_input+0x240>)
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ad9e:	4b07      	ldr	r3, [pc, #28]	@ (801adbc <ip4_input+0x240>)
 801ada0:	2200      	movs	r2, #0
 801ada2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ada4:	4b05      	ldr	r3, [pc, #20]	@ (801adbc <ip4_input+0x240>)
 801ada6:	2200      	movs	r2, #0
 801ada8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801adaa:	4b04      	ldr	r3, [pc, #16]	@ (801adbc <ip4_input+0x240>)
 801adac:	2200      	movs	r2, #0
 801adae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801adb0:	2300      	movs	r3, #0
}
 801adb2:	4618      	mov	r0, r3
 801adb4:	3718      	adds	r7, #24
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	2002441c 	.word	0x2002441c
 801adc0:	20027510 	.word	0x20027510

0801adc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	b08a      	sub	sp, #40	@ 0x28
 801adc8:	af04      	add	r7, sp, #16
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	60b9      	str	r1, [r7, #8]
 801adce:	607a      	str	r2, [r7, #4]
 801add0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801add2:	68bb      	ldr	r3, [r7, #8]
 801add4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d009      	beq.n	801adf0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d003      	beq.n	801adea <ip4_output_if+0x26>
 801ade2:	68bb      	ldr	r3, [r7, #8]
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d102      	bne.n	801adf0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adec:	3304      	adds	r3, #4
 801adee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801adf0:	78fa      	ldrb	r2, [r7, #3]
 801adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adf4:	9302      	str	r3, [sp, #8]
 801adf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801adfa:	9301      	str	r3, [sp, #4]
 801adfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ae00:	9300      	str	r3, [sp, #0]
 801ae02:	4613      	mov	r3, r2
 801ae04:	687a      	ldr	r2, [r7, #4]
 801ae06:	6979      	ldr	r1, [r7, #20]
 801ae08:	68f8      	ldr	r0, [r7, #12]
 801ae0a:	f000 f805 	bl	801ae18 <ip4_output_if_src>
 801ae0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ae10:	4618      	mov	r0, r3
 801ae12:	3718      	adds	r7, #24
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}

0801ae18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b088      	sub	sp, #32
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	607a      	str	r2, [r7, #4]
 801ae24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	7b9b      	ldrb	r3, [r3, #14]
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d006      	beq.n	801ae3c <ip4_output_if_src+0x24>
 801ae2e:	4b4b      	ldr	r3, [pc, #300]	@ (801af5c <ip4_output_if_src+0x144>)
 801ae30:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801ae34:	494a      	ldr	r1, [pc, #296]	@ (801af60 <ip4_output_if_src+0x148>)
 801ae36:	484b      	ldr	r0, [pc, #300]	@ (801af64 <ip4_output_if_src+0x14c>)
 801ae38:	f002 fb32 	bl	801d4a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d060      	beq.n	801af04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ae42:	2314      	movs	r3, #20
 801ae44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ae46:	2114      	movs	r1, #20
 801ae48:	68f8      	ldr	r0, [r7, #12]
 801ae4a:	f7f8 faa9 	bl	80133a0 <pbuf_add_header>
 801ae4e:	4603      	mov	r3, r0
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d002      	beq.n	801ae5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ae54:	f06f 0301 	mvn.w	r3, #1
 801ae58:	e07c      	b.n	801af54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	895b      	ldrh	r3, [r3, #10]
 801ae64:	2b13      	cmp	r3, #19
 801ae66:	d806      	bhi.n	801ae76 <ip4_output_if_src+0x5e>
 801ae68:	4b3c      	ldr	r3, [pc, #240]	@ (801af5c <ip4_output_if_src+0x144>)
 801ae6a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801ae6e:	493e      	ldr	r1, [pc, #248]	@ (801af68 <ip4_output_if_src+0x150>)
 801ae70:	483c      	ldr	r0, [pc, #240]	@ (801af64 <ip4_output_if_src+0x14c>)
 801ae72:	f002 fb15 	bl	801d4a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ae76:	69fb      	ldr	r3, [r7, #28]
 801ae78:	78fa      	ldrb	r2, [r7, #3]
 801ae7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ae7c:	69fb      	ldr	r3, [r7, #28]
 801ae7e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ae82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681a      	ldr	r2, [r3, #0]
 801ae88:	69fb      	ldr	r3, [r7, #28]
 801ae8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ae8c:	8b7b      	ldrh	r3, [r7, #26]
 801ae8e:	089b      	lsrs	r3, r3, #2
 801ae90:	b29b      	uxth	r3, r3
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae98:	b2da      	uxtb	r2, r3
 801ae9a:	69fb      	ldr	r3, [r7, #28]
 801ae9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ae9e:	69fb      	ldr	r3, [r7, #28]
 801aea0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801aea4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	891b      	ldrh	r3, [r3, #8]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f7f6 ff20 	bl	8011cf0 <lwip_htons>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	461a      	mov	r2, r3
 801aeb4:	69fb      	ldr	r3, [r7, #28]
 801aeb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801aeb8:	69fb      	ldr	r3, [r7, #28]
 801aeba:	2200      	movs	r2, #0
 801aebc:	719a      	strb	r2, [r3, #6]
 801aebe:	2200      	movs	r2, #0
 801aec0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801aec2:	4b2a      	ldr	r3, [pc, #168]	@ (801af6c <ip4_output_if_src+0x154>)
 801aec4:	881b      	ldrh	r3, [r3, #0]
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7f6 ff12 	bl	8011cf0 <lwip_htons>
 801aecc:	4603      	mov	r3, r0
 801aece:	461a      	mov	r2, r3
 801aed0:	69fb      	ldr	r3, [r7, #28]
 801aed2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801aed4:	4b25      	ldr	r3, [pc, #148]	@ (801af6c <ip4_output_if_src+0x154>)
 801aed6:	881b      	ldrh	r3, [r3, #0]
 801aed8:	3301      	adds	r3, #1
 801aeda:	b29a      	uxth	r2, r3
 801aedc:	4b23      	ldr	r3, [pc, #140]	@ (801af6c <ip4_output_if_src+0x154>)
 801aede:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d104      	bne.n	801aef0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801aee6:	4b22      	ldr	r3, [pc, #136]	@ (801af70 <ip4_output_if_src+0x158>)
 801aee8:	681a      	ldr	r2, [r3, #0]
 801aeea:	69fb      	ldr	r3, [r7, #28]
 801aeec:	60da      	str	r2, [r3, #12]
 801aeee:	e003      	b.n	801aef8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	681a      	ldr	r2, [r3, #0]
 801aef4:	69fb      	ldr	r3, [r7, #28]
 801aef6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	2200      	movs	r2, #0
 801aefc:	729a      	strb	r2, [r3, #10]
 801aefe:	2200      	movs	r2, #0
 801af00:	72da      	strb	r2, [r3, #11]
 801af02:	e00f      	b.n	801af24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	895b      	ldrh	r3, [r3, #10]
 801af08:	2b13      	cmp	r3, #19
 801af0a:	d802      	bhi.n	801af12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801af0c:	f06f 0301 	mvn.w	r3, #1
 801af10:	e020      	b.n	801af54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	685b      	ldr	r3, [r3, #4]
 801af16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801af18:	69fb      	ldr	r3, [r7, #28]
 801af1a:	691b      	ldr	r3, [r3, #16]
 801af1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801af1e:	f107 0314 	add.w	r3, r7, #20
 801af22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d00c      	beq.n	801af46 <ip4_output_if_src+0x12e>
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	891a      	ldrh	r2, [r3, #8]
 801af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801af34:	429a      	cmp	r2, r3
 801af36:	d906      	bls.n	801af46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801af38:	687a      	ldr	r2, [r7, #4]
 801af3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801af3c:	68f8      	ldr	r0, [r7, #12]
 801af3e:	f000 fde3 	bl	801bb08 <ip4_frag>
 801af42:	4603      	mov	r3, r0
 801af44:	e006      	b.n	801af54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af48:	695b      	ldr	r3, [r3, #20]
 801af4a:	687a      	ldr	r2, [r7, #4]
 801af4c:	68f9      	ldr	r1, [r7, #12]
 801af4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af50:	4798      	blx	r3
 801af52:	4603      	mov	r3, r0
}
 801af54:	4618      	mov	r0, r3
 801af56:	3720      	adds	r7, #32
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}
 801af5c:	08020dd4 	.word	0x08020dd4
 801af60:	08020e08 	.word	0x08020e08
 801af64:	08020e14 	.word	0x08020e14
 801af68:	08020e3c 	.word	0x08020e3c
 801af6c:	2002766e 	.word	0x2002766e
 801af70:	08021aa4 	.word	0x08021aa4

0801af74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801af74:	b480      	push	{r7}
 801af76:	b085      	sub	sp, #20
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af88:	d002      	beq.n	801af90 <ip4_addr_isbroadcast_u32+0x1c>
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d101      	bne.n	801af94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801af90:	2301      	movs	r3, #1
 801af92:	e02a      	b.n	801afea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801af94:	683b      	ldr	r3, [r7, #0]
 801af96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801af9a:	f003 0302 	and.w	r3, r3, #2
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d101      	bne.n	801afa6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801afa2:	2300      	movs	r3, #0
 801afa4:	e021      	b.n	801afea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	3304      	adds	r3, #4
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	429a      	cmp	r2, r3
 801afb0:	d101      	bne.n	801afb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801afb2:	2300      	movs	r3, #0
 801afb4:	e019      	b.n	801afea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801afb6:	68fa      	ldr	r2, [r7, #12]
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	3304      	adds	r3, #4
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	405a      	eors	r2, r3
 801afc0:	683b      	ldr	r3, [r7, #0]
 801afc2:	3308      	adds	r3, #8
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	4013      	ands	r3, r2
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d10d      	bne.n	801afe8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	3308      	adds	r3, #8
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	43da      	mvns	r2, r3
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	3308      	adds	r3, #8
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801afe0:	429a      	cmp	r2, r3
 801afe2:	d101      	bne.n	801afe8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801afe4:	2301      	movs	r3, #1
 801afe6:	e000      	b.n	801afea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801afe8:	2300      	movs	r3, #0
  }
}
 801afea:	4618      	mov	r0, r3
 801afec:	3714      	adds	r7, #20
 801afee:	46bd      	mov	sp, r7
 801aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff4:	4770      	bx	lr
	...

0801aff8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801b000:	2210      	movs	r2, #16
 801b002:	4904      	ldr	r1, [pc, #16]	@ (801b014 <ip4addr_ntoa+0x1c>)
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	f000 f807 	bl	801b018 <ip4addr_ntoa_r>
 801b00a:	4603      	mov	r3, r0
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	3708      	adds	r7, #8
 801b010:	46bd      	mov	sp, r7
 801b012:	bd80      	pop	{r7, pc}
 801b014:	20027670 	.word	0x20027670

0801b018 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801b018:	b480      	push	{r7}
 801b01a:	b08d      	sub	sp, #52	@ 0x34
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801b024:	2300      	movs	r3, #0
 801b026:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801b02e:	68bb      	ldr	r3, [r7, #8]
 801b030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801b032:	f107 0318 	add.w	r3, r7, #24
 801b036:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b038:	2300      	movs	r3, #0
 801b03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b03e:	e058      	b.n	801b0f2 <ip4addr_ntoa_r+0xda>
    i = 0;
 801b040:	2300      	movs	r3, #0
 801b042:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801b046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b048:	781a      	ldrb	r2, [r3, #0]
 801b04a:	4b32      	ldr	r3, [pc, #200]	@ (801b114 <ip4addr_ntoa_r+0xfc>)
 801b04c:	fba3 1302 	umull	r1, r3, r3, r2
 801b050:	08d9      	lsrs	r1, r3, #3
 801b052:	460b      	mov	r3, r1
 801b054:	009b      	lsls	r3, r3, #2
 801b056:	440b      	add	r3, r1
 801b058:	005b      	lsls	r3, r3, #1
 801b05a:	1ad3      	subs	r3, r2, r3
 801b05c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801b05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	4a2c      	ldr	r2, [pc, #176]	@ (801b114 <ip4addr_ntoa_r+0xfc>)
 801b064:	fba2 2303 	umull	r2, r3, r2, r3
 801b068:	08db      	lsrs	r3, r3, #3
 801b06a:	b2da      	uxtb	r2, r3
 801b06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b06e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801b070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b074:	1c5a      	adds	r2, r3, #1
 801b076:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b07a:	4619      	mov	r1, r3
 801b07c:	7ffb      	ldrb	r3, [r7, #31]
 801b07e:	3330      	adds	r3, #48	@ 0x30
 801b080:	b2da      	uxtb	r2, r3
 801b082:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801b086:	443b      	add	r3, r7
 801b088:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801b08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b08e:	781b      	ldrb	r3, [r3, #0]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d1d8      	bne.n	801b046 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801b094:	e011      	b.n	801b0ba <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801b096:	6a3b      	ldr	r3, [r7, #32]
 801b098:	1c5a      	adds	r2, r3, #1
 801b09a:	623a      	str	r2, [r7, #32]
 801b09c:	687a      	ldr	r2, [r7, #4]
 801b09e:	429a      	cmp	r2, r3
 801b0a0:	dc01      	bgt.n	801b0a6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	e030      	b.n	801b108 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801b0a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0ac:	1c59      	adds	r1, r3, #1
 801b0ae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b0b0:	3230      	adds	r2, #48	@ 0x30
 801b0b2:	443a      	add	r2, r7
 801b0b4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801b0b8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801b0ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b0be:	1e5a      	subs	r2, r3, #1
 801b0c0:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d1e6      	bne.n	801b096 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801b0c8:	6a3b      	ldr	r3, [r7, #32]
 801b0ca:	1c5a      	adds	r2, r3, #1
 801b0cc:	623a      	str	r2, [r7, #32]
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	dc01      	bgt.n	801b0d8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	e017      	b.n	801b108 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0da:	1c5a      	adds	r2, r3, #1
 801b0dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b0de:	222e      	movs	r2, #46	@ 0x2e
 801b0e0:	701a      	strb	r2, [r3, #0]
    ap++;
 801b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e4:	3301      	adds	r3, #1
 801b0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b0ec:	3301      	adds	r3, #1
 801b0ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b0f6:	2b03      	cmp	r3, #3
 801b0f8:	d9a2      	bls.n	801b040 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0fc:	3b01      	subs	r3, #1
 801b0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b102:	2200      	movs	r2, #0
 801b104:	701a      	strb	r2, [r3, #0]
  return buf;
 801b106:	68bb      	ldr	r3, [r7, #8]
}
 801b108:	4618      	mov	r0, r3
 801b10a:	3734      	adds	r7, #52	@ 0x34
 801b10c:	46bd      	mov	sp, r7
 801b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b112:	4770      	bx	lr
 801b114:	cccccccd 	.word	0xcccccccd

0801b118 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	b084      	sub	sp, #16
 801b11c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b11e:	2300      	movs	r3, #0
 801b120:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b122:	4b12      	ldr	r3, [pc, #72]	@ (801b16c <ip_reass_tmr+0x54>)
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b128:	e018      	b.n	801b15c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	7fdb      	ldrb	r3, [r3, #31]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d00b      	beq.n	801b14a <ip_reass_tmr+0x32>
      r->timer--;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	7fdb      	ldrb	r3, [r3, #31]
 801b136:	3b01      	subs	r3, #1
 801b138:	b2da      	uxtb	r2, r3
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	60fb      	str	r3, [r7, #12]
 801b148:	e008      	b.n	801b15c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b154:	68b9      	ldr	r1, [r7, #8]
 801b156:	6878      	ldr	r0, [r7, #4]
 801b158:	f000 f80a 	bl	801b170 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d1e3      	bne.n	801b12a <ip_reass_tmr+0x12>
    }
  }
}
 801b162:	bf00      	nop
 801b164:	bf00      	nop
 801b166:	3710      	adds	r7, #16
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}
 801b16c:	20027680 	.word	0x20027680

0801b170 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b088      	sub	sp, #32
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b17a:	2300      	movs	r3, #0
 801b17c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b17e:	683a      	ldr	r2, [r7, #0]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	429a      	cmp	r2, r3
 801b184:	d105      	bne.n	801b192 <ip_reass_free_complete_datagram+0x22>
 801b186:	4b45      	ldr	r3, [pc, #276]	@ (801b29c <ip_reass_free_complete_datagram+0x12c>)
 801b188:	22ab      	movs	r2, #171	@ 0xab
 801b18a:	4945      	ldr	r1, [pc, #276]	@ (801b2a0 <ip_reass_free_complete_datagram+0x130>)
 801b18c:	4845      	ldr	r0, [pc, #276]	@ (801b2a4 <ip_reass_free_complete_datagram+0x134>)
 801b18e:	f002 f987 	bl	801d4a0 <iprintf>
  if (prev != NULL) {
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d00a      	beq.n	801b1ae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	687a      	ldr	r2, [r7, #4]
 801b19e:	429a      	cmp	r2, r3
 801b1a0:	d005      	beq.n	801b1ae <ip_reass_free_complete_datagram+0x3e>
 801b1a2:	4b3e      	ldr	r3, [pc, #248]	@ (801b29c <ip_reass_free_complete_datagram+0x12c>)
 801b1a4:	22ad      	movs	r2, #173	@ 0xad
 801b1a6:	4940      	ldr	r1, [pc, #256]	@ (801b2a8 <ip_reass_free_complete_datagram+0x138>)
 801b1a8:	483e      	ldr	r0, [pc, #248]	@ (801b2a4 <ip_reass_free_complete_datagram+0x134>)
 801b1aa:	f002 f979 	bl	801d4a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	685b      	ldr	r3, [r3, #4]
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	889b      	ldrh	r3, [r3, #4]
 801b1ba:	b29b      	uxth	r3, r3
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d12a      	bne.n	801b216 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	685b      	ldr	r3, [r3, #4]
 801b1c4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	681a      	ldr	r2, [r3, #0]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b1ce:	69bb      	ldr	r3, [r7, #24]
 801b1d0:	6858      	ldr	r0, [r3, #4]
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	3308      	adds	r3, #8
 801b1d6:	2214      	movs	r2, #20
 801b1d8:	4619      	mov	r1, r3
 801b1da:	f002 fa9a 	bl	801d712 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b1de:	2101      	movs	r1, #1
 801b1e0:	69b8      	ldr	r0, [r7, #24]
 801b1e2:	f7ff fbb7 	bl	801a954 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b1e6:	69b8      	ldr	r0, [r7, #24]
 801b1e8:	f7f8 f9fe 	bl	80135e8 <pbuf_clen>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b1f0:	8bfa      	ldrh	r2, [r7, #30]
 801b1f2:	8a7b      	ldrh	r3, [r7, #18]
 801b1f4:	4413      	add	r3, r2
 801b1f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b1fa:	db05      	blt.n	801b208 <ip_reass_free_complete_datagram+0x98>
 801b1fc:	4b27      	ldr	r3, [pc, #156]	@ (801b29c <ip_reass_free_complete_datagram+0x12c>)
 801b1fe:	22bc      	movs	r2, #188	@ 0xbc
 801b200:	492a      	ldr	r1, [pc, #168]	@ (801b2ac <ip_reass_free_complete_datagram+0x13c>)
 801b202:	4828      	ldr	r0, [pc, #160]	@ (801b2a4 <ip_reass_free_complete_datagram+0x134>)
 801b204:	f002 f94c 	bl	801d4a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b208:	8bfa      	ldrh	r2, [r7, #30]
 801b20a:	8a7b      	ldrh	r3, [r7, #18]
 801b20c:	4413      	add	r3, r2
 801b20e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b210:	69b8      	ldr	r0, [r7, #24]
 801b212:	f7f8 f95b 	bl	80134cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	685b      	ldr	r3, [r3, #4]
 801b21a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b21c:	e01f      	b.n	801b25e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b21e:	69bb      	ldr	r3, [r7, #24]
 801b220:	685b      	ldr	r3, [r3, #4]
 801b222:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b224:	69bb      	ldr	r3, [r7, #24]
 801b226:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b228:	697b      	ldr	r3, [r7, #20]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b22e:	68f8      	ldr	r0, [r7, #12]
 801b230:	f7f8 f9da 	bl	80135e8 <pbuf_clen>
 801b234:	4603      	mov	r3, r0
 801b236:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b238:	8bfa      	ldrh	r2, [r7, #30]
 801b23a:	8a7b      	ldrh	r3, [r7, #18]
 801b23c:	4413      	add	r3, r2
 801b23e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b242:	db05      	blt.n	801b250 <ip_reass_free_complete_datagram+0xe0>
 801b244:	4b15      	ldr	r3, [pc, #84]	@ (801b29c <ip_reass_free_complete_datagram+0x12c>)
 801b246:	22cc      	movs	r2, #204	@ 0xcc
 801b248:	4918      	ldr	r1, [pc, #96]	@ (801b2ac <ip_reass_free_complete_datagram+0x13c>)
 801b24a:	4816      	ldr	r0, [pc, #88]	@ (801b2a4 <ip_reass_free_complete_datagram+0x134>)
 801b24c:	f002 f928 	bl	801d4a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b250:	8bfa      	ldrh	r2, [r7, #30]
 801b252:	8a7b      	ldrh	r3, [r7, #18]
 801b254:	4413      	add	r3, r2
 801b256:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b258:	68f8      	ldr	r0, [r7, #12]
 801b25a:	f7f8 f937 	bl	80134cc <pbuf_free>
  while (p != NULL) {
 801b25e:	69bb      	ldr	r3, [r7, #24]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d1dc      	bne.n	801b21e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b264:	6839      	ldr	r1, [r7, #0]
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	f000 f8c2 	bl	801b3f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b26c:	4b10      	ldr	r3, [pc, #64]	@ (801b2b0 <ip_reass_free_complete_datagram+0x140>)
 801b26e:	881b      	ldrh	r3, [r3, #0]
 801b270:	8bfa      	ldrh	r2, [r7, #30]
 801b272:	429a      	cmp	r2, r3
 801b274:	d905      	bls.n	801b282 <ip_reass_free_complete_datagram+0x112>
 801b276:	4b09      	ldr	r3, [pc, #36]	@ (801b29c <ip_reass_free_complete_datagram+0x12c>)
 801b278:	22d2      	movs	r2, #210	@ 0xd2
 801b27a:	490e      	ldr	r1, [pc, #56]	@ (801b2b4 <ip_reass_free_complete_datagram+0x144>)
 801b27c:	4809      	ldr	r0, [pc, #36]	@ (801b2a4 <ip_reass_free_complete_datagram+0x134>)
 801b27e:	f002 f90f 	bl	801d4a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b282:	4b0b      	ldr	r3, [pc, #44]	@ (801b2b0 <ip_reass_free_complete_datagram+0x140>)
 801b284:	881a      	ldrh	r2, [r3, #0]
 801b286:	8bfb      	ldrh	r3, [r7, #30]
 801b288:	1ad3      	subs	r3, r2, r3
 801b28a:	b29a      	uxth	r2, r3
 801b28c:	4b08      	ldr	r3, [pc, #32]	@ (801b2b0 <ip_reass_free_complete_datagram+0x140>)
 801b28e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b290:	8bfb      	ldrh	r3, [r7, #30]
}
 801b292:	4618      	mov	r0, r3
 801b294:	3720      	adds	r7, #32
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	08020e6c 	.word	0x08020e6c
 801b2a0:	08020ea8 	.word	0x08020ea8
 801b2a4:	08020eb4 	.word	0x08020eb4
 801b2a8:	08020edc 	.word	0x08020edc
 801b2ac:	08020ef0 	.word	0x08020ef0
 801b2b0:	20027684 	.word	0x20027684
 801b2b4:	08020f10 	.word	0x08020f10

0801b2b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b08a      	sub	sp, #40	@ 0x28
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
 801b2c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b2d6:	4b28      	ldr	r3, [pc, #160]	@ (801b378 <ip_reass_remove_oldest_datagram+0xc0>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b2dc:	e030      	b.n	801b340 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e0:	695a      	ldr	r2, [r3, #20]
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	68db      	ldr	r3, [r3, #12]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d10c      	bne.n	801b304 <ip_reass_remove_oldest_datagram+0x4c>
 801b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ec:	699a      	ldr	r2, [r3, #24]
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	691b      	ldr	r3, [r3, #16]
 801b2f2:	429a      	cmp	r2, r3
 801b2f4:	d106      	bne.n	801b304 <ip_reass_remove_oldest_datagram+0x4c>
 801b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2f8:	899a      	ldrh	r2, [r3, #12]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	889b      	ldrh	r3, [r3, #4]
 801b2fe:	b29b      	uxth	r3, r3
 801b300:	429a      	cmp	r2, r3
 801b302:	d014      	beq.n	801b32e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b304:	693b      	ldr	r3, [r7, #16]
 801b306:	3301      	adds	r3, #1
 801b308:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b30a:	6a3b      	ldr	r3, [r7, #32]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d104      	bne.n	801b31a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b312:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b314:	69fb      	ldr	r3, [r7, #28]
 801b316:	61bb      	str	r3, [r7, #24]
 801b318:	e009      	b.n	801b32e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b31c:	7fda      	ldrb	r2, [r3, #31]
 801b31e:	6a3b      	ldr	r3, [r7, #32]
 801b320:	7fdb      	ldrb	r3, [r3, #31]
 801b322:	429a      	cmp	r2, r3
 801b324:	d803      	bhi.n	801b32e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b328:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b32a:	69fb      	ldr	r3, [r7, #28]
 801b32c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d001      	beq.n	801b33a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b338:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b342:	2b00      	cmp	r3, #0
 801b344:	d1cb      	bne.n	801b2de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b346:	6a3b      	ldr	r3, [r7, #32]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d008      	beq.n	801b35e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b34c:	69b9      	ldr	r1, [r7, #24]
 801b34e:	6a38      	ldr	r0, [r7, #32]
 801b350:	f7ff ff0e 	bl	801b170 <ip_reass_free_complete_datagram>
 801b354:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b356:	697a      	ldr	r2, [r7, #20]
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	4413      	add	r3, r2
 801b35c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b35e:	697a      	ldr	r2, [r7, #20]
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	429a      	cmp	r2, r3
 801b364:	da02      	bge.n	801b36c <ip_reass_remove_oldest_datagram+0xb4>
 801b366:	693b      	ldr	r3, [r7, #16]
 801b368:	2b01      	cmp	r3, #1
 801b36a:	dcac      	bgt.n	801b2c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b36c:	697b      	ldr	r3, [r7, #20]
}
 801b36e:	4618      	mov	r0, r3
 801b370:	3728      	adds	r7, #40	@ 0x28
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}
 801b376:	bf00      	nop
 801b378:	20027680 	.word	0x20027680

0801b37c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b084      	sub	sp, #16
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b386:	2004      	movs	r0, #4
 801b388:	f7f7 f986 	bl	8012698 <memp_malloc>
 801b38c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d110      	bne.n	801b3b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b394:	6839      	ldr	r1, [r7, #0]
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	f7ff ff8e 	bl	801b2b8 <ip_reass_remove_oldest_datagram>
 801b39c:	4602      	mov	r2, r0
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	4293      	cmp	r3, r2
 801b3a2:	dc03      	bgt.n	801b3ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b3a4:	2004      	movs	r0, #4
 801b3a6:	f7f7 f977 	bl	8012698 <memp_malloc>
 801b3aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d101      	bne.n	801b3b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	e016      	b.n	801b3e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b3b6:	2220      	movs	r2, #32
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	68f8      	ldr	r0, [r7, #12]
 801b3bc:	f002 f8d5 	bl	801d56a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	220f      	movs	r2, #15
 801b3c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b3c6:	4b09      	ldr	r3, [pc, #36]	@ (801b3ec <ip_reass_enqueue_new_datagram+0x70>)
 801b3c8:	681a      	ldr	r2, [r3, #0]
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b3ce:	4a07      	ldr	r2, [pc, #28]	@ (801b3ec <ip_reass_enqueue_new_datagram+0x70>)
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	3308      	adds	r3, #8
 801b3d8:	2214      	movs	r2, #20
 801b3da:	6879      	ldr	r1, [r7, #4]
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f002 f998 	bl	801d712 <memcpy>
  return ipr;
 801b3e2:	68fb      	ldr	r3, [r7, #12]
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3710      	adds	r7, #16
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}
 801b3ec:	20027680 	.word	0x20027680

0801b3f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
 801b3f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b3fa:	4b10      	ldr	r3, [pc, #64]	@ (801b43c <ip_reass_dequeue_datagram+0x4c>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	687a      	ldr	r2, [r7, #4]
 801b400:	429a      	cmp	r2, r3
 801b402:	d104      	bne.n	801b40e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a0c      	ldr	r2, [pc, #48]	@ (801b43c <ip_reass_dequeue_datagram+0x4c>)
 801b40a:	6013      	str	r3, [r2, #0]
 801b40c:	e00d      	b.n	801b42a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	2b00      	cmp	r3, #0
 801b412:	d106      	bne.n	801b422 <ip_reass_dequeue_datagram+0x32>
 801b414:	4b0a      	ldr	r3, [pc, #40]	@ (801b440 <ip_reass_dequeue_datagram+0x50>)
 801b416:	f240 1245 	movw	r2, #325	@ 0x145
 801b41a:	490a      	ldr	r1, [pc, #40]	@ (801b444 <ip_reass_dequeue_datagram+0x54>)
 801b41c:	480a      	ldr	r0, [pc, #40]	@ (801b448 <ip_reass_dequeue_datagram+0x58>)
 801b41e:	f002 f83f 	bl	801d4a0 <iprintf>
    prev->next = ipr->next;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b42a:	6879      	ldr	r1, [r7, #4]
 801b42c:	2004      	movs	r0, #4
 801b42e:	f7f7 f9a9 	bl	8012784 <memp_free>
}
 801b432:	bf00      	nop
 801b434:	3708      	adds	r7, #8
 801b436:	46bd      	mov	sp, r7
 801b438:	bd80      	pop	{r7, pc}
 801b43a:	bf00      	nop
 801b43c:	20027680 	.word	0x20027680
 801b440:	08020e6c 	.word	0x08020e6c
 801b444:	08020f34 	.word	0x08020f34
 801b448:	08020eb4 	.word	0x08020eb4

0801b44c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b08c      	sub	sp, #48	@ 0x30
 801b450:	af00      	add	r7, sp, #0
 801b452:	60f8      	str	r0, [r7, #12]
 801b454:	60b9      	str	r1, [r7, #8]
 801b456:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b458:	2300      	movs	r3, #0
 801b45a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b45c:	2301      	movs	r3, #1
 801b45e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b460:	68bb      	ldr	r3, [r7, #8]
 801b462:	685b      	ldr	r3, [r3, #4]
 801b464:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b466:	69fb      	ldr	r3, [r7, #28]
 801b468:	885b      	ldrh	r3, [r3, #2]
 801b46a:	b29b      	uxth	r3, r3
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7f6 fc3f 	bl	8011cf0 <lwip_htons>
 801b472:	4603      	mov	r3, r0
 801b474:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b476:	69fb      	ldr	r3, [r7, #28]
 801b478:	781b      	ldrb	r3, [r3, #0]
 801b47a:	f003 030f 	and.w	r3, r3, #15
 801b47e:	b2db      	uxtb	r3, r3
 801b480:	009b      	lsls	r3, r3, #2
 801b482:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b484:	7e7b      	ldrb	r3, [r7, #25]
 801b486:	b29b      	uxth	r3, r3
 801b488:	8b7a      	ldrh	r2, [r7, #26]
 801b48a:	429a      	cmp	r2, r3
 801b48c:	d202      	bcs.n	801b494 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b48e:	f04f 33ff 	mov.w	r3, #4294967295
 801b492:	e135      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b494:	7e7b      	ldrb	r3, [r7, #25]
 801b496:	b29b      	uxth	r3, r3
 801b498:	8b7a      	ldrh	r2, [r7, #26]
 801b49a:	1ad3      	subs	r3, r2, r3
 801b49c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	88db      	ldrh	r3, [r3, #6]
 801b4a2:	b29b      	uxth	r3, r3
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7f6 fc23 	bl	8011cf0 <lwip_htons>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4b0:	b29b      	uxth	r3, r3
 801b4b2:	00db      	lsls	r3, r3, #3
 801b4b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b4b6:	68bb      	ldr	r3, [r7, #8]
 801b4b8:	685b      	ldr	r3, [r3, #4]
 801b4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4be:	2200      	movs	r2, #0
 801b4c0:	701a      	strb	r2, [r3, #0]
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	705a      	strb	r2, [r3, #1]
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	709a      	strb	r2, [r3, #2]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4d0:	8afa      	ldrh	r2, [r7, #22]
 801b4d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b4d4:	8afa      	ldrh	r2, [r7, #22]
 801b4d6:	8b7b      	ldrh	r3, [r7, #26]
 801b4d8:	4413      	add	r3, r2
 801b4da:	b29a      	uxth	r2, r3
 801b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4e2:	88db      	ldrh	r3, [r3, #6]
 801b4e4:	b29b      	uxth	r3, r3
 801b4e6:	8afa      	ldrh	r2, [r7, #22]
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d902      	bls.n	801b4f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b4f0:	e106      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	685b      	ldr	r3, [r3, #4]
 801b4f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4f8:	e068      	b.n	801b5cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b502:	889b      	ldrh	r3, [r3, #4]
 801b504:	b29a      	uxth	r2, r3
 801b506:	693b      	ldr	r3, [r7, #16]
 801b508:	889b      	ldrh	r3, [r3, #4]
 801b50a:	b29b      	uxth	r3, r3
 801b50c:	429a      	cmp	r2, r3
 801b50e:	d235      	bcs.n	801b57c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b514:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d020      	beq.n	801b55e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b51e:	889b      	ldrh	r3, [r3, #4]
 801b520:	b29a      	uxth	r2, r3
 801b522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b524:	88db      	ldrh	r3, [r3, #6]
 801b526:	b29b      	uxth	r3, r3
 801b528:	429a      	cmp	r2, r3
 801b52a:	d307      	bcc.n	801b53c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b52e:	88db      	ldrh	r3, [r3, #6]
 801b530:	b29a      	uxth	r2, r3
 801b532:	693b      	ldr	r3, [r7, #16]
 801b534:	889b      	ldrh	r3, [r3, #4]
 801b536:	b29b      	uxth	r3, r3
 801b538:	429a      	cmp	r2, r3
 801b53a:	d902      	bls.n	801b542 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b53c:	f04f 33ff 	mov.w	r3, #4294967295
 801b540:	e0de      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b544:	68ba      	ldr	r2, [r7, #8]
 801b546:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b54a:	88db      	ldrh	r3, [r3, #6]
 801b54c:	b29a      	uxth	r2, r3
 801b54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b550:	889b      	ldrh	r3, [r3, #4]
 801b552:	b29b      	uxth	r3, r3
 801b554:	429a      	cmp	r2, r3
 801b556:	d03d      	beq.n	801b5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b558:	2300      	movs	r3, #0
 801b55a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b55c:	e03a      	b.n	801b5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b560:	88db      	ldrh	r3, [r3, #6]
 801b562:	b29a      	uxth	r2, r3
 801b564:	693b      	ldr	r3, [r7, #16]
 801b566:	889b      	ldrh	r3, [r3, #4]
 801b568:	b29b      	uxth	r3, r3
 801b56a:	429a      	cmp	r2, r3
 801b56c:	d902      	bls.n	801b574 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b56e:	f04f 33ff 	mov.w	r3, #4294967295
 801b572:	e0c5      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	68ba      	ldr	r2, [r7, #8]
 801b578:	605a      	str	r2, [r3, #4]
      break;
 801b57a:	e02b      	b.n	801b5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b57e:	889b      	ldrh	r3, [r3, #4]
 801b580:	b29a      	uxth	r2, r3
 801b582:	693b      	ldr	r3, [r7, #16]
 801b584:	889b      	ldrh	r3, [r3, #4]
 801b586:	b29b      	uxth	r3, r3
 801b588:	429a      	cmp	r2, r3
 801b58a:	d102      	bne.n	801b592 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b58c:	f04f 33ff 	mov.w	r3, #4294967295
 801b590:	e0b6      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b594:	889b      	ldrh	r3, [r3, #4]
 801b596:	b29a      	uxth	r2, r3
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	88db      	ldrh	r3, [r3, #6]
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	d202      	bcs.n	801b5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b5a6:	e0ab      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d009      	beq.n	801b5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5b0:	88db      	ldrh	r3, [r3, #6]
 801b5b2:	b29a      	uxth	r2, r3
 801b5b4:	693b      	ldr	r3, [r7, #16]
 801b5b6:	889b      	ldrh	r3, [r3, #4]
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	429a      	cmp	r2, r3
 801b5bc:	d001      	beq.n	801b5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b5c2:	693b      	ldr	r3, [r7, #16]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d193      	bne.n	801b4fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b5d2:	e000      	b.n	801b5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b5d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d12d      	bne.n	801b638 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d01c      	beq.n	801b61c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5e4:	88db      	ldrh	r3, [r3, #6]
 801b5e6:	b29a      	uxth	r2, r3
 801b5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ea:	889b      	ldrh	r3, [r3, #4]
 801b5ec:	b29b      	uxth	r3, r3
 801b5ee:	429a      	cmp	r2, r3
 801b5f0:	d906      	bls.n	801b600 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b5f2:	4b45      	ldr	r3, [pc, #276]	@ (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5f4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801b5f8:	4944      	ldr	r1, [pc, #272]	@ (801b70c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b5fa:	4845      	ldr	r0, [pc, #276]	@ (801b710 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5fc:	f001 ff50 	bl	801d4a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b602:	68ba      	ldr	r2, [r7, #8]
 801b604:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b608:	88db      	ldrh	r3, [r3, #6]
 801b60a:	b29a      	uxth	r2, r3
 801b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b60e:	889b      	ldrh	r3, [r3, #4]
 801b610:	b29b      	uxth	r3, r3
 801b612:	429a      	cmp	r2, r3
 801b614:	d010      	beq.n	801b638 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b616:	2300      	movs	r3, #0
 801b618:	623b      	str	r3, [r7, #32]
 801b61a:	e00d      	b.n	801b638 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	685b      	ldr	r3, [r3, #4]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d006      	beq.n	801b632 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b624:	4b38      	ldr	r3, [pc, #224]	@ (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b626:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801b62a:	493a      	ldr	r1, [pc, #232]	@ (801b714 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b62c:	4838      	ldr	r0, [pc, #224]	@ (801b710 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b62e:	f001 ff37 	bl	801d4a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	68ba      	ldr	r2, [r7, #8]
 801b636:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d105      	bne.n	801b64a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	7f9b      	ldrb	r3, [r3, #30]
 801b642:	f003 0301 	and.w	r3, r3, #1
 801b646:	2b00      	cmp	r3, #0
 801b648:	d059      	beq.n	801b6fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b64a:	6a3b      	ldr	r3, [r7, #32]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d04f      	beq.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	685b      	ldr	r3, [r3, #4]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d006      	beq.n	801b666 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	685b      	ldr	r3, [r3, #4]
 801b65c:	685b      	ldr	r3, [r3, #4]
 801b65e:	889b      	ldrh	r3, [r3, #4]
 801b660:	b29b      	uxth	r3, r3
 801b662:	2b00      	cmp	r3, #0
 801b664:	d002      	beq.n	801b66c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b666:	2300      	movs	r3, #0
 801b668:	623b      	str	r3, [r7, #32]
 801b66a:	e041      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b66e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801b670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b676:	e012      	b.n	801b69e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b67a:	685b      	ldr	r3, [r3, #4]
 801b67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801b67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b680:	88db      	ldrh	r3, [r3, #6]
 801b682:	b29a      	uxth	r2, r3
 801b684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b686:	889b      	ldrh	r3, [r3, #4]
 801b688:	b29b      	uxth	r3, r3
 801b68a:	429a      	cmp	r2, r3
 801b68c:	d002      	beq.n	801b694 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b68e:	2300      	movs	r3, #0
 801b690:	623b      	str	r3, [r7, #32]
            break;
 801b692:	e007      	b.n	801b6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b696:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801b698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d1e9      	bne.n	801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b6a4:	6a3b      	ldr	r3, [r7, #32]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d022      	beq.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	685b      	ldr	r3, [r3, #4]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d106      	bne.n	801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b6b2:	4b15      	ldr	r3, [pc, #84]	@ (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6b4:	f240 12df 	movw	r2, #479	@ 0x1df
 801b6b8:	4917      	ldr	r1, [pc, #92]	@ (801b718 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b6ba:	4815      	ldr	r0, [pc, #84]	@ (801b710 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6bc:	f001 fef0 	bl	801d4a0 <iprintf>
          LWIP_ASSERT("sanity check",
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	685b      	ldr	r3, [r3, #4]
 801b6c4:	685b      	ldr	r3, [r3, #4]
 801b6c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b6c8:	429a      	cmp	r2, r3
 801b6ca:	d106      	bne.n	801b6da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b6cc:	4b0e      	ldr	r3, [pc, #56]	@ (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6ce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b6d2:	4911      	ldr	r1, [pc, #68]	@ (801b718 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b6d4:	480e      	ldr	r0, [pc, #56]	@ (801b710 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6d6:	f001 fee3 	bl	801d4a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d006      	beq.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b6e2:	4b09      	ldr	r3, [pc, #36]	@ (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6e4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b6e8:	490c      	ldr	r1, [pc, #48]	@ (801b71c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b6ea:	4809      	ldr	r0, [pc, #36]	@ (801b710 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6ec:	f001 fed8 	bl	801d4a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b6f0:	6a3b      	ldr	r3, [r7, #32]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	bf14      	ite	ne
 801b6f6:	2301      	movne	r3, #1
 801b6f8:	2300      	moveq	r3, #0
 801b6fa:	b2db      	uxtb	r3, r3
 801b6fc:	e000      	b.n	801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b6fe:	2300      	movs	r3, #0
}
 801b700:	4618      	mov	r0, r3
 801b702:	3730      	adds	r7, #48	@ 0x30
 801b704:	46bd      	mov	sp, r7
 801b706:	bd80      	pop	{r7, pc}
 801b708:	08020e6c 	.word	0x08020e6c
 801b70c:	08020f50 	.word	0x08020f50
 801b710:	08020eb4 	.word	0x08020eb4
 801b714:	08020f70 	.word	0x08020f70
 801b718:	08020fa8 	.word	0x08020fa8
 801b71c:	08020fb8 	.word	0x08020fb8

0801b720 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b08e      	sub	sp, #56	@ 0x38
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	685b      	ldr	r3, [r3, #4]
 801b72c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b730:	781b      	ldrb	r3, [r3, #0]
 801b732:	f003 030f 	and.w	r3, r3, #15
 801b736:	b2db      	uxtb	r3, r3
 801b738:	009b      	lsls	r3, r3, #2
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	2b14      	cmp	r3, #20
 801b73e:	f040 8171 	bne.w	801ba24 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b744:	88db      	ldrh	r3, [r3, #6]
 801b746:	b29b      	uxth	r3, r3
 801b748:	4618      	mov	r0, r3
 801b74a:	f7f6 fad1 	bl	8011cf0 <lwip_htons>
 801b74e:	4603      	mov	r3, r0
 801b750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b754:	b29b      	uxth	r3, r3
 801b756:	00db      	lsls	r3, r3, #3
 801b758:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b75c:	885b      	ldrh	r3, [r3, #2]
 801b75e:	b29b      	uxth	r3, r3
 801b760:	4618      	mov	r0, r3
 801b762:	f7f6 fac5 	bl	8011cf0 <lwip_htons>
 801b766:	4603      	mov	r3, r0
 801b768:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b76c:	781b      	ldrb	r3, [r3, #0]
 801b76e:	f003 030f 	and.w	r3, r3, #15
 801b772:	b2db      	uxtb	r3, r3
 801b774:	009b      	lsls	r3, r3, #2
 801b776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b77a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b77e:	b29b      	uxth	r3, r3
 801b780:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b782:	429a      	cmp	r2, r3
 801b784:	f0c0 8150 	bcc.w	801ba28 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b788:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b790:	1ad3      	subs	r3, r2, r3
 801b792:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b794:	6878      	ldr	r0, [r7, #4]
 801b796:	f7f7 ff27 	bl	80135e8 <pbuf_clen>
 801b79a:	4603      	mov	r3, r0
 801b79c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b79e:	4b8c      	ldr	r3, [pc, #560]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b7a0:	881b      	ldrh	r3, [r3, #0]
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	8c3b      	ldrh	r3, [r7, #32]
 801b7a6:	4413      	add	r3, r2
 801b7a8:	2b0a      	cmp	r3, #10
 801b7aa:	dd10      	ble.n	801b7ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b7ac:	8c3b      	ldrh	r3, [r7, #32]
 801b7ae:	4619      	mov	r1, r3
 801b7b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b7b2:	f7ff fd81 	bl	801b2b8 <ip_reass_remove_oldest_datagram>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	f000 8137 	beq.w	801ba2c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b7be:	4b84      	ldr	r3, [pc, #528]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b7c0:	881b      	ldrh	r3, [r3, #0]
 801b7c2:	461a      	mov	r2, r3
 801b7c4:	8c3b      	ldrh	r3, [r7, #32]
 801b7c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b7c8:	2b0a      	cmp	r3, #10
 801b7ca:	f300 812f 	bgt.w	801ba2c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b7ce:	4b81      	ldr	r3, [pc, #516]	@ (801b9d4 <ip4_reass+0x2b4>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	633b      	str	r3, [r7, #48]	@ 0x30
 801b7d4:	e015      	b.n	801b802 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7d8:	695a      	ldr	r2, [r3, #20]
 801b7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7dc:	68db      	ldr	r3, [r3, #12]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	d10c      	bne.n	801b7fc <ip4_reass+0xdc>
 801b7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7e4:	699a      	ldr	r2, [r3, #24]
 801b7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7e8:	691b      	ldr	r3, [r3, #16]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	d106      	bne.n	801b7fc <ip4_reass+0xdc>
 801b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7f0:	899a      	ldrh	r2, [r3, #12]
 801b7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7f4:	889b      	ldrh	r3, [r3, #4]
 801b7f6:	b29b      	uxth	r3, r3
 801b7f8:	429a      	cmp	r2, r3
 801b7fa:	d006      	beq.n	801b80a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	633b      	str	r3, [r7, #48]	@ 0x30
 801b802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b804:	2b00      	cmp	r3, #0
 801b806:	d1e6      	bne.n	801b7d6 <ip4_reass+0xb6>
 801b808:	e000      	b.n	801b80c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b80a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d109      	bne.n	801b826 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b812:	8c3b      	ldrh	r3, [r7, #32]
 801b814:	4619      	mov	r1, r3
 801b816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b818:	f7ff fdb0 	bl	801b37c <ip_reass_enqueue_new_datagram>
 801b81c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b820:	2b00      	cmp	r3, #0
 801b822:	d11c      	bne.n	801b85e <ip4_reass+0x13e>
      goto nullreturn;
 801b824:	e105      	b.n	801ba32 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b828:	88db      	ldrh	r3, [r3, #6]
 801b82a:	b29b      	uxth	r3, r3
 801b82c:	4618      	mov	r0, r3
 801b82e:	f7f6 fa5f 	bl	8011cf0 <lwip_htons>
 801b832:	4603      	mov	r3, r0
 801b834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d110      	bne.n	801b85e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b83e:	89db      	ldrh	r3, [r3, #14]
 801b840:	4618      	mov	r0, r3
 801b842:	f7f6 fa55 	bl	8011cf0 <lwip_htons>
 801b846:	4603      	mov	r3, r0
 801b848:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d006      	beq.n	801b85e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b852:	3308      	adds	r3, #8
 801b854:	2214      	movs	r2, #20
 801b856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b858:	4618      	mov	r0, r3
 801b85a:	f001 ff5a 	bl	801d712 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b860:	88db      	ldrh	r3, [r3, #6]
 801b862:	b29b      	uxth	r3, r3
 801b864:	f003 0320 	and.w	r3, r3, #32
 801b868:	2b00      	cmp	r3, #0
 801b86a:	bf0c      	ite	eq
 801b86c:	2301      	moveq	r3, #1
 801b86e:	2300      	movne	r3, #0
 801b870:	b2db      	uxtb	r3, r3
 801b872:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b874:	69fb      	ldr	r3, [r7, #28]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d00e      	beq.n	801b898 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b87a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b87c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b87e:	4413      	add	r3, r2
 801b880:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b882:	8b7a      	ldrh	r2, [r7, #26]
 801b884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b886:	429a      	cmp	r2, r3
 801b888:	f0c0 80a0 	bcc.w	801b9cc <ip4_reass+0x2ac>
 801b88c:	8b7b      	ldrh	r3, [r7, #26]
 801b88e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801b892:	4293      	cmp	r3, r2
 801b894:	f200 809a 	bhi.w	801b9cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b898:	69fa      	ldr	r2, [r7, #28]
 801b89a:	6879      	ldr	r1, [r7, #4]
 801b89c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b89e:	f7ff fdd5 	bl	801b44c <ip_reass_chain_frag_into_datagram_and_validate>
 801b8a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8aa:	f000 809b 	beq.w	801b9e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b8ae:	4b48      	ldr	r3, [pc, #288]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b8b0:	881a      	ldrh	r2, [r3, #0]
 801b8b2:	8c3b      	ldrh	r3, [r7, #32]
 801b8b4:	4413      	add	r3, r2
 801b8b6:	b29a      	uxth	r2, r3
 801b8b8:	4b45      	ldr	r3, [pc, #276]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b8ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b8bc:	69fb      	ldr	r3, [r7, #28]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d00d      	beq.n	801b8de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b8c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b8c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b8c6:	4413      	add	r3, r2
 801b8c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8cc:	8a7a      	ldrh	r2, [r7, #18]
 801b8ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8d2:	7f9b      	ldrb	r3, [r3, #30]
 801b8d4:	f043 0301 	orr.w	r3, r3, #1
 801b8d8:	b2da      	uxtb	r2, r3
 801b8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b8de:	697b      	ldr	r3, [r7, #20]
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	d171      	bne.n	801b9c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8e6:	8b9b      	ldrh	r3, [r3, #28]
 801b8e8:	3314      	adds	r3, #20
 801b8ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	685b      	ldr	r3, [r3, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8f8:	685b      	ldr	r3, [r3, #4]
 801b8fa:	685b      	ldr	r3, [r3, #4]
 801b8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b900:	3308      	adds	r3, #8
 801b902:	2214      	movs	r2, #20
 801b904:	4619      	mov	r1, r3
 801b906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b908:	f001 ff03 	bl	801d712 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b90c:	8a3b      	ldrh	r3, [r7, #16]
 801b90e:	4618      	mov	r0, r3
 801b910:	f7f6 f9ee 	bl	8011cf0 <lwip_htons>
 801b914:	4603      	mov	r3, r0
 801b916:	461a      	mov	r2, r3
 801b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b91a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b91e:	2200      	movs	r2, #0
 801b920:	719a      	strb	r2, [r3, #6]
 801b922:	2200      	movs	r2, #0
 801b924:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b928:	2200      	movs	r2, #0
 801b92a:	729a      	strb	r2, [r3, #10]
 801b92c:	2200      	movs	r2, #0
 801b92e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b932:	685b      	ldr	r3, [r3, #4]
 801b934:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b936:	e00d      	b.n	801b954 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b93e:	2114      	movs	r1, #20
 801b940:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801b942:	f7f7 fd3d 	bl	80133c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b946:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b948:	6878      	ldr	r0, [r7, #4]
 801b94a:	f7f7 fe8d 	bl	8013668 <pbuf_cat>
      r = iprh->next_pbuf;
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801b954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b956:	2b00      	cmp	r3, #0
 801b958:	d1ee      	bne.n	801b938 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b95a:	4b1e      	ldr	r3, [pc, #120]	@ (801b9d4 <ip4_reass+0x2b4>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b960:	429a      	cmp	r2, r3
 801b962:	d102      	bne.n	801b96a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b964:	2300      	movs	r3, #0
 801b966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b968:	e010      	b.n	801b98c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b96a:	4b1a      	ldr	r3, [pc, #104]	@ (801b9d4 <ip4_reass+0x2b4>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b970:	e007      	b.n	801b982 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b978:	429a      	cmp	r2, r3
 801b97a:	d006      	beq.n	801b98a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b984:	2b00      	cmp	r3, #0
 801b986:	d1f4      	bne.n	801b972 <ip4_reass+0x252>
 801b988:	e000      	b.n	801b98c <ip4_reass+0x26c>
          break;
 801b98a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b98c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b98e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b990:	f7ff fd2e 	bl	801b3f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b994:	6878      	ldr	r0, [r7, #4]
 801b996:	f7f7 fe27 	bl	80135e8 <pbuf_clen>
 801b99a:	4603      	mov	r3, r0
 801b99c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b99e:	4b0c      	ldr	r3, [pc, #48]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b9a0:	881b      	ldrh	r3, [r3, #0]
 801b9a2:	8c3a      	ldrh	r2, [r7, #32]
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d906      	bls.n	801b9b6 <ip4_reass+0x296>
 801b9a8:	4b0b      	ldr	r3, [pc, #44]	@ (801b9d8 <ip4_reass+0x2b8>)
 801b9aa:	f240 229b 	movw	r2, #667	@ 0x29b
 801b9ae:	490b      	ldr	r1, [pc, #44]	@ (801b9dc <ip4_reass+0x2bc>)
 801b9b0:	480b      	ldr	r0, [pc, #44]	@ (801b9e0 <ip4_reass+0x2c0>)
 801b9b2:	f001 fd75 	bl	801d4a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b9b6:	4b06      	ldr	r3, [pc, #24]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b9b8:	881a      	ldrh	r2, [r3, #0]
 801b9ba:	8c3b      	ldrh	r3, [r7, #32]
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	b29a      	uxth	r2, r3
 801b9c0:	4b03      	ldr	r3, [pc, #12]	@ (801b9d0 <ip4_reass+0x2b0>)
 801b9c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	e038      	b.n	801ba3a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	e036      	b.n	801ba3a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b9cc:	bf00      	nop
 801b9ce:	e00a      	b.n	801b9e6 <ip4_reass+0x2c6>
 801b9d0:	20027684 	.word	0x20027684
 801b9d4:	20027680 	.word	0x20027680
 801b9d8:	08020e6c 	.word	0x08020e6c
 801b9dc:	08020fdc 	.word	0x08020fdc
 801b9e0:	08020eb4 	.word	0x08020eb4
    goto nullreturn_ipr;
 801b9e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d106      	bne.n	801b9fa <ip4_reass+0x2da>
 801b9ec:	4b15      	ldr	r3, [pc, #84]	@ (801ba44 <ip4_reass+0x324>)
 801b9ee:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801b9f2:	4915      	ldr	r1, [pc, #84]	@ (801ba48 <ip4_reass+0x328>)
 801b9f4:	4815      	ldr	r0, [pc, #84]	@ (801ba4c <ip4_reass+0x32c>)
 801b9f6:	f001 fd53 	bl	801d4a0 <iprintf>
  if (ipr->p == NULL) {
 801b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9fc:	685b      	ldr	r3, [r3, #4]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d116      	bne.n	801ba30 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ba02:	4b13      	ldr	r3, [pc, #76]	@ (801ba50 <ip4_reass+0x330>)
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d006      	beq.n	801ba1a <ip4_reass+0x2fa>
 801ba0c:	4b0d      	ldr	r3, [pc, #52]	@ (801ba44 <ip4_reass+0x324>)
 801ba0e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ba12:	4910      	ldr	r1, [pc, #64]	@ (801ba54 <ip4_reass+0x334>)
 801ba14:	480d      	ldr	r0, [pc, #52]	@ (801ba4c <ip4_reass+0x32c>)
 801ba16:	f001 fd43 	bl	801d4a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ba1a:	2100      	movs	r1, #0
 801ba1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ba1e:	f7ff fce7 	bl	801b3f0 <ip_reass_dequeue_datagram>
 801ba22:	e006      	b.n	801ba32 <ip4_reass+0x312>
    goto nullreturn;
 801ba24:	bf00      	nop
 801ba26:	e004      	b.n	801ba32 <ip4_reass+0x312>
    goto nullreturn;
 801ba28:	bf00      	nop
 801ba2a:	e002      	b.n	801ba32 <ip4_reass+0x312>
      goto nullreturn;
 801ba2c:	bf00      	nop
 801ba2e:	e000      	b.n	801ba32 <ip4_reass+0x312>
  }

nullreturn:
 801ba30:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ba32:	6878      	ldr	r0, [r7, #4]
 801ba34:	f7f7 fd4a 	bl	80134cc <pbuf_free>
  return NULL;
 801ba38:	2300      	movs	r3, #0
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3738      	adds	r7, #56	@ 0x38
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}
 801ba42:	bf00      	nop
 801ba44:	08020e6c 	.word	0x08020e6c
 801ba48:	08020ff8 	.word	0x08020ff8
 801ba4c:	08020eb4 	.word	0x08020eb4
 801ba50:	20027680 	.word	0x20027680
 801ba54:	08021004 	.word	0x08021004

0801ba58 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ba5c:	2005      	movs	r0, #5
 801ba5e:	f7f6 fe1b 	bl	8012698 <memp_malloc>
 801ba62:	4603      	mov	r3, r0
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	bd80      	pop	{r7, pc}

0801ba68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b082      	sub	sp, #8
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d106      	bne.n	801ba84 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ba76:	4b07      	ldr	r3, [pc, #28]	@ (801ba94 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ba78:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801ba7c:	4906      	ldr	r1, [pc, #24]	@ (801ba98 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ba7e:	4807      	ldr	r0, [pc, #28]	@ (801ba9c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ba80:	f001 fd0e 	bl	801d4a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ba84:	6879      	ldr	r1, [r7, #4]
 801ba86:	2005      	movs	r0, #5
 801ba88:	f7f6 fe7c 	bl	8012784 <memp_free>
}
 801ba8c:	bf00      	nop
 801ba8e:	3708      	adds	r7, #8
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bd80      	pop	{r7, pc}
 801ba94:	08020e6c 	.word	0x08020e6c
 801ba98:	08021024 	.word	0x08021024
 801ba9c:	08020eb4 	.word	0x08020eb4

0801baa0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b084      	sub	sp, #16
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d106      	bne.n	801bac0 <ipfrag_free_pbuf_custom+0x20>
 801bab2:	4b11      	ldr	r3, [pc, #68]	@ (801baf8 <ipfrag_free_pbuf_custom+0x58>)
 801bab4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801bab8:	4910      	ldr	r1, [pc, #64]	@ (801bafc <ipfrag_free_pbuf_custom+0x5c>)
 801baba:	4811      	ldr	r0, [pc, #68]	@ (801bb00 <ipfrag_free_pbuf_custom+0x60>)
 801babc:	f001 fcf0 	bl	801d4a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bac0:	68fa      	ldr	r2, [r7, #12]
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d006      	beq.n	801bad6 <ipfrag_free_pbuf_custom+0x36>
 801bac8:	4b0b      	ldr	r3, [pc, #44]	@ (801baf8 <ipfrag_free_pbuf_custom+0x58>)
 801baca:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801bace:	490d      	ldr	r1, [pc, #52]	@ (801bb04 <ipfrag_free_pbuf_custom+0x64>)
 801bad0:	480b      	ldr	r0, [pc, #44]	@ (801bb00 <ipfrag_free_pbuf_custom+0x60>)
 801bad2:	f001 fce5 	bl	801d4a0 <iprintf>
  if (pcr->original != NULL) {
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	695b      	ldr	r3, [r3, #20]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d004      	beq.n	801bae8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	695b      	ldr	r3, [r3, #20]
 801bae2:	4618      	mov	r0, r3
 801bae4:	f7f7 fcf2 	bl	80134cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801bae8:	68f8      	ldr	r0, [r7, #12]
 801baea:	f7ff ffbd 	bl	801ba68 <ip_frag_free_pbuf_custom_ref>
}
 801baee:	bf00      	nop
 801baf0:	3710      	adds	r7, #16
 801baf2:	46bd      	mov	sp, r7
 801baf4:	bd80      	pop	{r7, pc}
 801baf6:	bf00      	nop
 801baf8:	08020e6c 	.word	0x08020e6c
 801bafc:	08021030 	.word	0x08021030
 801bb00:	08020eb4 	.word	0x08020eb4
 801bb04:	0802103c 	.word	0x0802103c

0801bb08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b094      	sub	sp, #80	@ 0x50
 801bb0c:	af02      	add	r7, sp, #8
 801bb0e:	60f8      	str	r0, [r7, #12]
 801bb10:	60b9      	str	r1, [r7, #8]
 801bb12:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bb14:	2300      	movs	r3, #0
 801bb16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801bb1a:	68bb      	ldr	r3, [r7, #8]
 801bb1c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bb1e:	3b14      	subs	r3, #20
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	da00      	bge.n	801bb26 <ip4_frag+0x1e>
 801bb24:	3307      	adds	r3, #7
 801bb26:	10db      	asrs	r3, r3, #3
 801bb28:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801bb2a:	2314      	movs	r3, #20
 801bb2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	685b      	ldr	r3, [r3, #4]
 801bb32:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801bb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bb36:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb3a:	781b      	ldrb	r3, [r3, #0]
 801bb3c:	f003 030f 	and.w	r3, r3, #15
 801bb40:	b2db      	uxtb	r3, r3
 801bb42:	009b      	lsls	r3, r3, #2
 801bb44:	b2db      	uxtb	r3, r3
 801bb46:	2b14      	cmp	r3, #20
 801bb48:	d002      	beq.n	801bb50 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bb4a:	f06f 0305 	mvn.w	r3, #5
 801bb4e:	e110      	b.n	801bd72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	895b      	ldrh	r3, [r3, #10]
 801bb54:	2b13      	cmp	r3, #19
 801bb56:	d809      	bhi.n	801bb6c <ip4_frag+0x64>
 801bb58:	4b88      	ldr	r3, [pc, #544]	@ (801bd7c <ip4_frag+0x274>)
 801bb5a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801bb5e:	4988      	ldr	r1, [pc, #544]	@ (801bd80 <ip4_frag+0x278>)
 801bb60:	4888      	ldr	r0, [pc, #544]	@ (801bd84 <ip4_frag+0x27c>)
 801bb62:	f001 fc9d 	bl	801d4a0 <iprintf>
 801bb66:	f06f 0305 	mvn.w	r3, #5
 801bb6a:	e102      	b.n	801bd72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bb6e:	88db      	ldrh	r3, [r3, #6]
 801bb70:	b29b      	uxth	r3, r3
 801bb72:	4618      	mov	r0, r3
 801bb74:	f7f6 f8bc 	bl	8011cf0 <lwip_htons>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801bb7c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bb7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bb86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bb88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	891b      	ldrh	r3, [r3, #8]
 801bb92:	3b14      	subs	r3, #20
 801bb94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801bb98:	e0e1      	b.n	801bd5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bb9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bb9c:	00db      	lsls	r3, r3, #3
 801bb9e:	b29b      	uxth	r3, r3
 801bba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bba4:	4293      	cmp	r3, r2
 801bba6:	bf28      	it	cs
 801bba8:	4613      	movcs	r3, r2
 801bbaa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bbac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bbb0:	2114      	movs	r1, #20
 801bbb2:	200e      	movs	r0, #14
 801bbb4:	f7f7 f9a6 	bl	8012f04 <pbuf_alloc>
 801bbb8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f000 80d5 	beq.w	801bd6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc4:	895b      	ldrh	r3, [r3, #10]
 801bbc6:	2b13      	cmp	r3, #19
 801bbc8:	d806      	bhi.n	801bbd8 <ip4_frag+0xd0>
 801bbca:	4b6c      	ldr	r3, [pc, #432]	@ (801bd7c <ip4_frag+0x274>)
 801bbcc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801bbd0:	496d      	ldr	r1, [pc, #436]	@ (801bd88 <ip4_frag+0x280>)
 801bbd2:	486c      	ldr	r0, [pc, #432]	@ (801bd84 <ip4_frag+0x27c>)
 801bbd4:	f001 fc64 	bl	801d4a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbda:	685b      	ldr	r3, [r3, #4]
 801bbdc:	2214      	movs	r2, #20
 801bbde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f001 fd96 	bl	801d712 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe8:	685b      	ldr	r3, [r3, #4]
 801bbea:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801bbec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bbee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801bbf2:	e064      	b.n	801bcbe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	895a      	ldrh	r2, [r3, #10]
 801bbf8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801bbfa:	1ad3      	subs	r3, r2, r3
 801bbfc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	895b      	ldrh	r3, [r3, #10]
 801bc02:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d906      	bls.n	801bc16 <ip4_frag+0x10e>
 801bc08:	4b5c      	ldr	r3, [pc, #368]	@ (801bd7c <ip4_frag+0x274>)
 801bc0a:	f240 322d 	movw	r2, #813	@ 0x32d
 801bc0e:	495f      	ldr	r1, [pc, #380]	@ (801bd8c <ip4_frag+0x284>)
 801bc10:	485c      	ldr	r0, [pc, #368]	@ (801bd84 <ip4_frag+0x27c>)
 801bc12:	f001 fc45 	bl	801d4a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bc16:	8bfa      	ldrh	r2, [r7, #30]
 801bc18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bc1c:	4293      	cmp	r3, r2
 801bc1e:	bf28      	it	cs
 801bc20:	4613      	movcs	r3, r2
 801bc22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bc26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d105      	bne.n	801bc3a <ip4_frag+0x132>
        poff = 0;
 801bc2e:	2300      	movs	r3, #0
 801bc30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	60fb      	str	r3, [r7, #12]
        continue;
 801bc38:	e041      	b.n	801bcbe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bc3a:	f7ff ff0d 	bl	801ba58 <ip_frag_alloc_pbuf_custom_ref>
 801bc3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bc40:	69bb      	ldr	r3, [r7, #24]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d103      	bne.n	801bc4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bc46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc48:	f7f7 fc40 	bl	80134cc <pbuf_free>
        goto memerr;
 801bc4c:	e08f      	b.n	801bd6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bc4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bc54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801bc56:	4413      	add	r3, r2
 801bc58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801bc5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801bc60:	9201      	str	r2, [sp, #4]
 801bc62:	9300      	str	r3, [sp, #0]
 801bc64:	4603      	mov	r3, r0
 801bc66:	2241      	movs	r2, #65	@ 0x41
 801bc68:	2000      	movs	r0, #0
 801bc6a:	f7f7 fa75 	bl	8013158 <pbuf_alloced_custom>
 801bc6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bc70:	697b      	ldr	r3, [r7, #20]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d106      	bne.n	801bc84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bc76:	69b8      	ldr	r0, [r7, #24]
 801bc78:	f7ff fef6 	bl	801ba68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bc7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc7e:	f7f7 fc25 	bl	80134cc <pbuf_free>
        goto memerr;
 801bc82:	e074      	b.n	801bd6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bc84:	68f8      	ldr	r0, [r7, #12]
 801bc86:	f7f7 fcc7 	bl	8013618 <pbuf_ref>
      pcr->original = p;
 801bc8a:	69bb      	ldr	r3, [r7, #24]
 801bc8c:	68fa      	ldr	r2, [r7, #12]
 801bc8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bc90:	69bb      	ldr	r3, [r7, #24]
 801bc92:	4a3f      	ldr	r2, [pc, #252]	@ (801bd90 <ip4_frag+0x288>)
 801bc94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bc96:	6979      	ldr	r1, [r7, #20]
 801bc98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc9a:	f7f7 fce5 	bl	8013668 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bc9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801bca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bca6:	1ad3      	subs	r3, r2, r3
 801bca8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801bcac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d004      	beq.n	801bcbe <ip4_frag+0x1b6>
        poff = 0;
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bcbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d196      	bne.n	801bbf4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bcc6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bcc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bccc:	4413      	add	r3, r2
 801bcce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bcd0:	68bb      	ldr	r3, [r7, #8]
 801bcd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bcd4:	f1a3 0213 	sub.w	r2, r3, #19
 801bcd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bcdc:	429a      	cmp	r2, r3
 801bcde:	bfcc      	ite	gt
 801bce0:	2301      	movgt	r3, #1
 801bce2:	2300      	movle	r3, #0
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bce8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801bcec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bcf0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801bcf2:	6a3b      	ldr	r3, [r7, #32]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d002      	beq.n	801bcfe <ip4_frag+0x1f6>
 801bcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d003      	beq.n	801bd06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bcfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801bd04:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bd06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f7f5 fff1 	bl	8011cf0 <lwip_htons>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	461a      	mov	r2, r3
 801bd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bd16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bd18:	3314      	adds	r3, #20
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f7f5 ffe7 	bl	8011cf0 <lwip_htons>
 801bd22:	4603      	mov	r3, r0
 801bd24:	461a      	mov	r2, r3
 801bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	729a      	strb	r2, [r3, #10]
 801bd30:	2200      	movs	r2, #0
 801bd32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	695b      	ldr	r3, [r3, #20]
 801bd38:	687a      	ldr	r2, [r7, #4]
 801bd3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bd3c:	68b8      	ldr	r0, [r7, #8]
 801bd3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bd40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bd42:	f7f7 fbc3 	bl	80134cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bd46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bd4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bd4c:	1ad3      	subs	r3, r2, r3
 801bd4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801bd52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801bd56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bd58:	4413      	add	r3, r2
 801bd5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801bd5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	f47f af19 	bne.w	801bb9a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bd68:	2300      	movs	r3, #0
 801bd6a:	e002      	b.n	801bd72 <ip4_frag+0x26a>
      goto memerr;
 801bd6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bd6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bd72:	4618      	mov	r0, r3
 801bd74:	3748      	adds	r7, #72	@ 0x48
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}
 801bd7a:	bf00      	nop
 801bd7c:	08020e6c 	.word	0x08020e6c
 801bd80:	08021048 	.word	0x08021048
 801bd84:	08020eb4 	.word	0x08020eb4
 801bd88:	08021064 	.word	0x08021064
 801bd8c:	08021084 	.word	0x08021084
 801bd90:	0801baa1 	.word	0x0801baa1

0801bd94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bd9e:	230e      	movs	r3, #14
 801bda0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	895b      	ldrh	r3, [r3, #10]
 801bda6:	2b0e      	cmp	r3, #14
 801bda8:	d96e      	bls.n	801be88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	7bdb      	ldrb	r3, [r3, #15]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d106      	bne.n	801bdc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bdb2:	683b      	ldr	r3, [r7, #0]
 801bdb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bdb8:	3301      	adds	r3, #1
 801bdba:	b2da      	uxtb	r2, r3
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	685b      	ldr	r3, [r3, #4]
 801bdc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bdc6:	693b      	ldr	r3, [r7, #16]
 801bdc8:	7b1a      	ldrb	r2, [r3, #12]
 801bdca:	7b5b      	ldrb	r3, [r3, #13]
 801bdcc:	021b      	lsls	r3, r3, #8
 801bdce:	4313      	orrs	r3, r2
 801bdd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bdd2:	693b      	ldr	r3, [r7, #16]
 801bdd4:	781b      	ldrb	r3, [r3, #0]
 801bdd6:	f003 0301 	and.w	r3, r3, #1
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d023      	beq.n	801be26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bdde:	693b      	ldr	r3, [r7, #16]
 801bde0:	781b      	ldrb	r3, [r3, #0]
 801bde2:	2b01      	cmp	r3, #1
 801bde4:	d10f      	bne.n	801be06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bde6:	693b      	ldr	r3, [r7, #16]
 801bde8:	785b      	ldrb	r3, [r3, #1]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d11b      	bne.n	801be26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bdee:	693b      	ldr	r3, [r7, #16]
 801bdf0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bdf2:	2b5e      	cmp	r3, #94	@ 0x5e
 801bdf4:	d117      	bne.n	801be26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	7b5b      	ldrb	r3, [r3, #13]
 801bdfa:	f043 0310 	orr.w	r3, r3, #16
 801bdfe:	b2da      	uxtb	r2, r3
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	735a      	strb	r2, [r3, #13]
 801be04:	e00f      	b.n	801be26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801be06:	693b      	ldr	r3, [r7, #16]
 801be08:	2206      	movs	r2, #6
 801be0a:	4928      	ldr	r1, [pc, #160]	@ (801beac <ethernet_input+0x118>)
 801be0c:	4618      	mov	r0, r3
 801be0e:	f001 fb9c 	bl	801d54a <memcmp>
 801be12:	4603      	mov	r3, r0
 801be14:	2b00      	cmp	r3, #0
 801be16:	d106      	bne.n	801be26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	7b5b      	ldrb	r3, [r3, #13]
 801be1c:	f043 0308 	orr.w	r3, r3, #8
 801be20:	b2da      	uxtb	r2, r3
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801be26:	89fb      	ldrh	r3, [r7, #14]
 801be28:	2b08      	cmp	r3, #8
 801be2a:	d003      	beq.n	801be34 <ethernet_input+0xa0>
 801be2c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801be30:	d014      	beq.n	801be5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801be32:	e032      	b.n	801be9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be3a:	f003 0308 	and.w	r3, r3, #8
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d024      	beq.n	801be8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801be42:	8afb      	ldrh	r3, [r7, #22]
 801be44:	4619      	mov	r1, r3
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f7f7 faba 	bl	80133c0 <pbuf_remove_header>
 801be4c:	4603      	mov	r3, r0
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d11e      	bne.n	801be90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801be52:	6839      	ldr	r1, [r7, #0]
 801be54:	6878      	ldr	r0, [r7, #4]
 801be56:	f7fe fe91 	bl	801ab7c <ip4_input>
      break;
 801be5a:	e013      	b.n	801be84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801be5c:	683b      	ldr	r3, [r7, #0]
 801be5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801be62:	f003 0308 	and.w	r3, r3, #8
 801be66:	2b00      	cmp	r3, #0
 801be68:	d014      	beq.n	801be94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801be6a:	8afb      	ldrh	r3, [r7, #22]
 801be6c:	4619      	mov	r1, r3
 801be6e:	6878      	ldr	r0, [r7, #4]
 801be70:	f7f7 faa6 	bl	80133c0 <pbuf_remove_header>
 801be74:	4603      	mov	r3, r0
 801be76:	2b00      	cmp	r3, #0
 801be78:	d10e      	bne.n	801be98 <ethernet_input+0x104>
        etharp_input(p, netif);
 801be7a:	6839      	ldr	r1, [r7, #0]
 801be7c:	6878      	ldr	r0, [r7, #4]
 801be7e:	f7fe f831 	bl	8019ee4 <etharp_input>
      break;
 801be82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801be84:	2300      	movs	r3, #0
 801be86:	e00c      	b.n	801bea2 <ethernet_input+0x10e>
    goto free_and_return;
 801be88:	bf00      	nop
 801be8a:	e006      	b.n	801be9a <ethernet_input+0x106>
        goto free_and_return;
 801be8c:	bf00      	nop
 801be8e:	e004      	b.n	801be9a <ethernet_input+0x106>
        goto free_and_return;
 801be90:	bf00      	nop
 801be92:	e002      	b.n	801be9a <ethernet_input+0x106>
        goto free_and_return;
 801be94:	bf00      	nop
 801be96:	e000      	b.n	801be9a <ethernet_input+0x106>
        goto free_and_return;
 801be98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801be9a:	6878      	ldr	r0, [r7, #4]
 801be9c:	f7f7 fb16 	bl	80134cc <pbuf_free>
  return ERR_OK;
 801bea0:	2300      	movs	r3, #0
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	3718      	adds	r7, #24
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	bf00      	nop
 801beac:	08021aa8 	.word	0x08021aa8

0801beb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b086      	sub	sp, #24
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	60f8      	str	r0, [r7, #12]
 801beb8:	60b9      	str	r1, [r7, #8]
 801beba:	607a      	str	r2, [r7, #4]
 801bebc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801bebe:	8c3b      	ldrh	r3, [r7, #32]
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7f5 ff15 	bl	8011cf0 <lwip_htons>
 801bec6:	4603      	mov	r3, r0
 801bec8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801beca:	210e      	movs	r1, #14
 801becc:	68b8      	ldr	r0, [r7, #8]
 801bece:	f7f7 fa67 	bl	80133a0 <pbuf_add_header>
 801bed2:	4603      	mov	r3, r0
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d125      	bne.n	801bf24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801bed8:	68bb      	ldr	r3, [r7, #8]
 801beda:	685b      	ldr	r3, [r3, #4]
 801bedc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801bede:	693b      	ldr	r3, [r7, #16]
 801bee0:	8afa      	ldrh	r2, [r7, #22]
 801bee2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801bee4:	693b      	ldr	r3, [r7, #16]
 801bee6:	2206      	movs	r2, #6
 801bee8:	6839      	ldr	r1, [r7, #0]
 801beea:	4618      	mov	r0, r3
 801beec:	f001 fc11 	bl	801d712 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801bef0:	693b      	ldr	r3, [r7, #16]
 801bef2:	3306      	adds	r3, #6
 801bef4:	2206      	movs	r2, #6
 801bef6:	6879      	ldr	r1, [r7, #4]
 801bef8:	4618      	mov	r0, r3
 801befa:	f001 fc0a 	bl	801d712 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bf04:	2b06      	cmp	r3, #6
 801bf06:	d006      	beq.n	801bf16 <ethernet_output+0x66>
 801bf08:	4b0a      	ldr	r3, [pc, #40]	@ (801bf34 <ethernet_output+0x84>)
 801bf0a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801bf0e:	490a      	ldr	r1, [pc, #40]	@ (801bf38 <ethernet_output+0x88>)
 801bf10:	480a      	ldr	r0, [pc, #40]	@ (801bf3c <ethernet_output+0x8c>)
 801bf12:	f001 fac5 	bl	801d4a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	699b      	ldr	r3, [r3, #24]
 801bf1a:	68b9      	ldr	r1, [r7, #8]
 801bf1c:	68f8      	ldr	r0, [r7, #12]
 801bf1e:	4798      	blx	r3
 801bf20:	4603      	mov	r3, r0
 801bf22:	e002      	b.n	801bf2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801bf24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801bf26:	f06f 0301 	mvn.w	r3, #1
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	3718      	adds	r7, #24
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	08021094 	.word	0x08021094
 801bf38:	080210cc 	.word	0x080210cc
 801bf3c:	08021100 	.word	0x08021100

0801bf40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b082      	sub	sp, #8
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
 801bf48:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	2104      	movs	r1, #4
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7f2 f859 	bl	800e008 <osMessageQueueNew>
 801bf56:	4602      	mov	r2, r0
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d102      	bne.n	801bf6a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801bf64:	f04f 33ff 	mov.w	r3, #4294967295
 801bf68:	e000      	b.n	801bf6c <sys_mbox_new+0x2c>

  return ERR_OK;
 801bf6a:	2300      	movs	r3, #0
}
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	3708      	adds	r7, #8
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b084      	sub	sp, #16
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	6818      	ldr	r0, [r3, #0]
 801bf82:	4639      	mov	r1, r7
 801bf84:	2300      	movs	r3, #0
 801bf86:	2200      	movs	r2, #0
 801bf88:	f7f2 f8c4 	bl	800e114 <osMessageQueuePut>
 801bf8c:	4603      	mov	r3, r0
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d102      	bne.n	801bf98 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801bf92:	2300      	movs	r3, #0
 801bf94:	73fb      	strb	r3, [r7, #15]
 801bf96:	e001      	b.n	801bf9c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bf98:	23ff      	movs	r3, #255	@ 0xff
 801bf9a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	3710      	adds	r7, #16
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801bfb4:	f7f1 fc8a 	bl	800d8cc <osKernelGetTickCount>
 801bfb8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d013      	beq.n	801bfe8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	6818      	ldr	r0, [r3, #0]
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	68b9      	ldr	r1, [r7, #8]
 801bfca:	f7f2 f917 	bl	800e1fc <osMessageQueueGet>
 801bfce:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801bfd0:	693b      	ldr	r3, [r7, #16]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d105      	bne.n	801bfe2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801bfd6:	f7f1 fc79 	bl	800d8cc <osKernelGetTickCount>
 801bfda:	4602      	mov	r2, r0
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	1ad3      	subs	r3, r2, r3
 801bfe0:	e00f      	b.n	801c002 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bfe2:	f04f 33ff 	mov.w	r3, #4294967295
 801bfe6:	e00c      	b.n	801c002 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	6818      	ldr	r0, [r3, #0]
 801bfec:	f04f 33ff 	mov.w	r3, #4294967295
 801bff0:	2200      	movs	r2, #0
 801bff2:	68b9      	ldr	r1, [r7, #8]
 801bff4:	f7f2 f902 	bl	800e1fc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801bff8:	f7f1 fc68 	bl	800d8cc <osKernelGetTickCount>
 801bffc:	4602      	mov	r2, r0
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c002:	4618      	mov	r0, r3
 801c004:	3718      	adds	r7, #24
 801c006:	46bd      	mov	sp, r7
 801c008:	bd80      	pop	{r7, pc}

0801c00a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c00a:	b480      	push	{r7}
 801c00c:	b083      	sub	sp, #12
 801c00e:	af00      	add	r7, sp, #0
 801c010:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d101      	bne.n	801c01e <sys_mbox_valid+0x14>
    return 0;
 801c01a:	2300      	movs	r3, #0
 801c01c:	e000      	b.n	801c020 <sys_mbox_valid+0x16>
  else
    return 1;
 801c01e:	2301      	movs	r3, #1
}
 801c020:	4618      	mov	r0, r3
 801c022:	370c      	adds	r7, #12
 801c024:	46bd      	mov	sp, r7
 801c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02a:	4770      	bx	lr

0801c02c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c030:	2000      	movs	r0, #0
 801c032:	f7f1 fd47 	bl	800dac4 <osMutexNew>
 801c036:	4603      	mov	r3, r0
 801c038:	4a01      	ldr	r2, [pc, #4]	@ (801c040 <sys_init+0x14>)
 801c03a:	6013      	str	r3, [r2, #0]
#endif
}
 801c03c:	bf00      	nop
 801c03e:	bd80      	pop	{r7, pc}
 801c040:	20027688 	.word	0x20027688

0801c044 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c044:	b580      	push	{r7, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c04c:	2000      	movs	r0, #0
 801c04e:	f7f1 fd39 	bl	800dac4 <osMutexNew>
 801c052:	4602      	mov	r2, r0
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d102      	bne.n	801c066 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c060:	f04f 33ff 	mov.w	r3, #4294967295
 801c064:	e000      	b.n	801c068 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c066:	2300      	movs	r3, #0
}
 801c068:	4618      	mov	r0, r3
 801c06a:	3708      	adds	r7, #8
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}

0801c070 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c070:	b580      	push	{r7, lr}
 801c072:	b082      	sub	sp, #8
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	f04f 31ff 	mov.w	r1, #4294967295
 801c080:	4618      	mov	r0, r3
 801c082:	f7f1 fdb9 	bl	800dbf8 <osMutexAcquire>
#endif
}
 801c086:	bf00      	nop
 801c088:	3708      	adds	r7, #8
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}

0801c08e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c08e:	b580      	push	{r7, lr}
 801c090:	b082      	sub	sp, #8
 801c092:	af00      	add	r7, sp, #0
 801c094:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7f1 fe0a 	bl	800dcb4 <osMutexRelease>
}
 801c0a0:	bf00      	nop
 801c0a2:	3708      	adds	r7, #8
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}

0801c0a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b08e      	sub	sp, #56	@ 0x38
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	60f8      	str	r0, [r7, #12]
 801c0b0:	60b9      	str	r1, [r7, #8]
 801c0b2:	607a      	str	r2, [r7, #4]
 801c0b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c0b6:	f107 0314 	add.w	r3, r7, #20
 801c0ba:	2224      	movs	r2, #36	@ 0x24
 801c0bc:	2100      	movs	r1, #0
 801c0be:	4618      	mov	r0, r3
 801c0c0:	f001 fa53 	bl	801d56a <memset>
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	617b      	str	r3, [r7, #20]
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c0cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c0d0:	f107 0314 	add.w	r3, r7, #20
 801c0d4:	461a      	mov	r2, r3
 801c0d6:	6879      	ldr	r1, [r7, #4]
 801c0d8:	68b8      	ldr	r0, [r7, #8]
 801c0da:	f7f1 fc1f 	bl	800d91c <osThreadNew>
 801c0de:	4603      	mov	r3, r0
#endif
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	3738      	adds	r7, #56	@ 0x38
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}

0801c0e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c0ec:	4b04      	ldr	r3, [pc, #16]	@ (801c100 <sys_arch_protect+0x18>)
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	f04f 31ff 	mov.w	r1, #4294967295
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7f1 fd7f 	bl	800dbf8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c0fa:	2301      	movs	r3, #1
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	bd80      	pop	{r7, pc}
 801c100:	20027688 	.word	0x20027688

0801c104 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b082      	sub	sp, #8
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c10c:	4b04      	ldr	r3, [pc, #16]	@ (801c120 <sys_arch_unprotect+0x1c>)
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	4618      	mov	r0, r3
 801c112:	f7f1 fdcf 	bl	800dcb4 <osMutexRelease>
}
 801c116:	bf00      	nop
 801c118:	3708      	adds	r7, #8
 801c11a:	46bd      	mov	sp, r7
 801c11c:	bd80      	pop	{r7, pc}
 801c11e:	bf00      	nop
 801c120:	20027688 	.word	0x20027688

0801c124 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
result_pro_t adc_testing(test_command_t* command){
 801c124:	b580      	push	{r7, lr}
 801c126:	b08c      	sub	sp, #48	@ 0x30
 801c128:	af00      	add	r7, sp, #0
 801c12a:	60f8      	str	r0, [r7, #12]
 801c12c:	60b9      	str	r1, [r7, #8]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801c12e:	68bb      	ldr	r3, [r7, #8]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d10e      	bne.n	801c152 <adc_testing+0x2e>
        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r");
 801c134:	4887      	ldr	r0, [pc, #540]	@ (801c354 <adc_testing+0x230>)
 801c136:	f001 f9b3 	bl	801d4a0 <iprintf>
        response.test_result = TEST_ERR;
 801c13a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c13e:	833b      	strh	r3, [r7, #24]
        return response;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	461a      	mov	r2, r3
 801c144:	f107 0314 	add.w	r3, r7, #20
 801c148:	6818      	ldr	r0, [r3, #0]
 801c14a:	6010      	str	r0, [r2, #0]
 801c14c:	889b      	ldrh	r3, [r3, #4]
 801c14e:	8093      	strh	r3, [r2, #4]
 801c150:	e0fb      	b.n	801c34a <adc_testing+0x226>
	}
	response.test_id = command->test_id;
 801c152:	68bb      	ldr	r3, [r7, #8]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	617b      	str	r3, [r7, #20]

	uint32_t expected_adc_result = command->bit_pattern[0];
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	79db      	ldrb	r3, [r3, #7]
 801c15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c160:	ee07 3a90 	vmov	s15, r3
 801c164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c168:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 801c358 <adc_testing+0x234>
 801c16c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c174:	ee17 3a90 	vmov	r3, s15
 801c178:	62bb      	str	r3, [r7, #40]	@ 0x28

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801c17a:	2100      	movs	r1, #0
 801c17c:	4877      	ldr	r0, [pc, #476]	@ (801c35c <adc_testing+0x238>)
 801c17e:	f7e7 f95d 	bl	800343c <HAL_DAC_Start>
 801c182:	4603      	mov	r3, r0
 801c184:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (status != HAL_OK) {
 801c188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d013      	beq.n	801c1b8 <adc_testing+0x94>
        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status);
 801c190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c194:	4619      	mov	r1, r3
 801c196:	4872      	ldr	r0, [pc, #456]	@ (801c360 <adc_testing+0x23c>)
 801c198:	f001 f982 	bl	801d4a0 <iprintf>
    	response.test_result = TEST_FAIL;
 801c19c:	23ff      	movs	r3, #255	@ 0xff
 801c19e:	833b      	strh	r3, [r7, #24]
        vPortFree(command);
 801c1a0:	68b8      	ldr	r0, [r7, #8]
 801c1a2:	f7f5 fae7 	bl	8011774 <vPortFree>
        return response;
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	461a      	mov	r2, r3
 801c1aa:	f107 0314 	add.w	r3, r7, #20
 801c1ae:	6818      	ldr	r0, [r3, #0]
 801c1b0:	6010      	str	r0, [r2, #0]
 801c1b2:	889b      	ldrh	r3, [r3, #4]
 801c1b4:	8093      	strh	r3, [r2, #4]
 801c1b6:	e0c8      	b.n	801c34a <adc_testing+0x226>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c1be:	e0b0      	b.n	801c322 <adc_testing+0x1fe>

		if(command->iterations < command->bit_pattern_length){
 801c1c0:	68bb      	ldr	r3, [r7, #8]
 801c1c2:	795a      	ldrb	r2, [r3, #5]
 801c1c4:	68bb      	ldr	r3, [r7, #8]
 801c1c6:	799b      	ldrb	r3, [r3, #6]
 801c1c8:	429a      	cmp	r2, r3
 801c1ca:	d215      	bcs.n	801c1f8 <adc_testing+0xd4>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801c1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c1d0:	68ba      	ldr	r2, [r7, #8]
 801c1d2:	4413      	add	r3, r2
 801c1d4:	79db      	ldrb	r3, [r3, #7]
 801c1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801c1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1da:	ee07 3a90 	vmov	s15, r3
 801c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c1e2:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801c358 <adc_testing+0x234>
 801c1e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c1ee:	edc7 7a01 	vstr	s15, [r7, #4]
 801c1f2:	793b      	ldrb	r3, [r7, #4]
 801c1f4:	b2db      	uxtb	r3, r3
 801c1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801c1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1fa:	2208      	movs	r2, #8
 801c1fc:	2100      	movs	r1, #0
 801c1fe:	4857      	ldr	r0, [pc, #348]	@ (801c35c <adc_testing+0x238>)
 801c200:	f7e7 f9c9 	bl	8003596 <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801c204:	2001      	movs	r0, #1
 801c206:	f7e6 f8d5 	bl	80023b4 <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801c20a:	4856      	ldr	r0, [pc, #344]	@ (801c364 <adc_testing+0x240>)
 801c20c:	f7e6 f96e 	bl	80024ec <HAL_ADC_Start_IT>
 801c210:	4603      	mov	r3, r0
 801c212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	    if (status != HAL_OK) {
 801c216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d016      	beq.n	801c24c <adc_testing+0x128>
	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status);
 801c21e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c222:	4619      	mov	r1, r3
 801c224:	4850      	ldr	r0, [pc, #320]	@ (801c368 <adc_testing+0x244>)
 801c226:	f001 f93b 	bl	801d4a0 <iprintf>
	    	HAL_ADC_Stop(&hadc1);
 801c22a:	484e      	ldr	r0, [pc, #312]	@ (801c364 <adc_testing+0x240>)
 801c22c:	f7e6 f92a 	bl	8002484 <HAL_ADC_Stop>
	    	response.test_result = TEST_FAIL;
 801c230:	23ff      	movs	r3, #255	@ 0xff
 801c232:	833b      	strh	r3, [r7, #24]
	        vPortFree(command);
 801c234:	68b8      	ldr	r0, [r7, #8]
 801c236:	f7f5 fa9d 	bl	8011774 <vPortFree>
	        return response;
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	461a      	mov	r2, r3
 801c23e:	f107 0314 	add.w	r3, r7, #20
 801c242:	6818      	ldr	r0, [r3, #0]
 801c244:	6010      	str	r0, [r2, #0]
 801c246:	889b      	ldrh	r3, [r3, #4]
 801c248:	8093      	strh	r3, [r2, #4]
 801c24a:	e07e      	b.n	801c34a <adc_testing+0x226>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801c24c:	4b47      	ldr	r3, [pc, #284]	@ (801c36c <adc_testing+0x248>)
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	f04f 31ff 	mov.w	r1, #4294967295
 801c254:	4618      	mov	r0, r3
 801c256:	f7f2 fee5 	bl	800f024 <xQueueSemaphoreTake>
 801c25a:	4603      	mov	r3, r0
 801c25c:	2b01      	cmp	r3, #1
 801c25e:	d111      	bne.n	801c284 <adc_testing+0x160>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801c260:	4840      	ldr	r0, [pc, #256]	@ (801c364 <adc_testing+0x240>)
 801c262:	f7e6 fb2b 	bl	80028bc <HAL_ADC_GetValue>
 801c266:	6238      	str	r0, [r7, #32]
	         vPortFree(command);
	         return response;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801c268:	6a3a      	ldr	r2, [r7, #32]
 801c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c26c:	1ad3      	subs	r3, r2, r3
 801c26e:	61fb      	str	r3, [r7, #28]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801c270:	69fb      	ldr	r3, [r7, #28]
 801c272:	2b00      	cmp	r3, #0
 801c274:	bfb8      	it	lt
 801c276:	425b      	neglt	r3, r3
 801c278:	61fb      	str	r3, [r7, #28]

		if (difference <= adc_tolerance) {
 801c27a:	69fb      	ldr	r3, [r7, #28]
 801c27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c27e:	429a      	cmp	r2, r3
 801c280:	d32b      	bcc.n	801c2da <adc_testing+0x1b6>
 801c282:	e013      	b.n	801c2ac <adc_testing+0x188>
	         printf("ADC semaphore acquire failed or timed out\n\r");
 801c284:	483a      	ldr	r0, [pc, #232]	@ (801c370 <adc_testing+0x24c>)
 801c286:	f001 f90b 	bl	801d4a0 <iprintf>
	         HAL_ADC_Stop(&hadc1);
 801c28a:	4836      	ldr	r0, [pc, #216]	@ (801c364 <adc_testing+0x240>)
 801c28c:	f7e6 f8fa 	bl	8002484 <HAL_ADC_Stop>
	         response.test_result = TEST_FAIL;
 801c290:	23ff      	movs	r3, #255	@ 0xff
 801c292:	833b      	strh	r3, [r7, #24]
	         vPortFree(command);
 801c294:	68b8      	ldr	r0, [r7, #8]
 801c296:	f7f5 fa6d 	bl	8011774 <vPortFree>
	         return response;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	461a      	mov	r2, r3
 801c29e:	f107 0314 	add.w	r3, r7, #20
 801c2a2:	6818      	ldr	r0, [r3, #0]
 801c2a4:	6010      	str	r0, [r2, #0]
 801c2a6:	889b      	ldrh	r3, [r3, #4]
 801c2a8:	8093      	strh	r3, [r2, #4]
 801c2aa:	e04e      	b.n	801c34a <adc_testing+0x226>
		  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
 801c2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2b0:	3301      	adds	r3, #1
 801c2b2:	4619      	mov	r1, r3
 801c2b4:	482f      	ldr	r0, [pc, #188]	@ (801c374 <adc_testing+0x250>)
 801c2b6:	f001 f8f3 	bl	801d4a0 <iprintf>
		  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
 801c2ba:	6a3a      	ldr	r2, [r7, #32]
 801c2bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c2be:	482e      	ldr	r0, [pc, #184]	@ (801c378 <adc_testing+0x254>)
 801c2c0:	f001 f8ee 	bl	801d4a0 <iprintf>
		  response.test_result = TEST_FAIL;
		  vPortFree(command);
		  return response;
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801c2c4:	4827      	ldr	r0, [pc, #156]	@ (801c364 <adc_testing+0x240>)
 801c2c6:	f7e6 f8dd 	bl	8002484 <HAL_ADC_Stop>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (status != HAL_OK) {
 801c2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d01f      	beq.n	801c318 <adc_testing+0x1f4>
 801c2d8:	e018      	b.n	801c30c <adc_testing+0x1e8>
		  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value);
 801c2da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2de:	1c59      	adds	r1, r3, #1
 801c2e0:	6a3b      	ldr	r3, [r7, #32]
 801c2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c2e4:	4825      	ldr	r0, [pc, #148]	@ (801c37c <adc_testing+0x258>)
 801c2e6:	f001 f8db 	bl	801d4a0 <iprintf>
		  HAL_ADC_Stop(&hadc1);
 801c2ea:	481e      	ldr	r0, [pc, #120]	@ (801c364 <adc_testing+0x240>)
 801c2ec:	f7e6 f8ca 	bl	8002484 <HAL_ADC_Stop>
		  response.test_result = TEST_FAIL;
 801c2f0:	23ff      	movs	r3, #255	@ 0xff
 801c2f2:	833b      	strh	r3, [r7, #24]
		  vPortFree(command);
 801c2f4:	68b8      	ldr	r0, [r7, #8]
 801c2f6:	f7f5 fa3d 	bl	8011774 <vPortFree>
		  return response;
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	461a      	mov	r2, r3
 801c2fe:	f107 0314 	add.w	r3, r7, #20
 801c302:	6818      	ldr	r0, [r3, #0]
 801c304:	6010      	str	r0, [r2, #0]
 801c306:	889b      	ldrh	r3, [r3, #4]
 801c308:	8093      	strh	r3, [r2, #4]
 801c30a:	e01e      	b.n	801c34a <adc_testing+0x226>
			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status);
 801c30c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c310:	4619      	mov	r1, r3
 801c312:	481b      	ldr	r0, [pc, #108]	@ (801c380 <adc_testing+0x25c>)
 801c314:	f001 f8c4 	bl	801d4a0 <iprintf>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801c318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c31c:	3301      	adds	r3, #1
 801c31e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	795b      	ldrb	r3, [r3, #5]
 801c326:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c32a:	429a      	cmp	r2, r3
 801c32c:	f4ff af48 	bcc.w	801c1c0 <adc_testing+0x9c>
		}
	} // end of iterations


	response.test_result = TEST_PASS;
 801c330:	2301      	movs	r3, #1
 801c332:	833b      	strh	r3, [r7, #24]
	vPortFree(command);
 801c334:	68b8      	ldr	r0, [r7, #8]
 801c336:	f7f5 fa1d 	bl	8011774 <vPortFree>
	return response;
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	461a      	mov	r2, r3
 801c33e:	f107 0314 	add.w	r3, r7, #20
 801c342:	6818      	ldr	r0, [r3, #0]
 801c344:	6010      	str	r0, [r2, #0]
 801c346:	889b      	ldrh	r3, [r3, #4]
 801c348:	8093      	strh	r3, [r2, #4]
}
 801c34a:	68f8      	ldr	r0, [r7, #12]
 801c34c:	3730      	adds	r7, #48	@ 0x30
 801c34e:	46bd      	mov	sp, r7
 801c350:	bd80      	pop	{r7, pc}
 801c352:	bf00      	nop
 801c354:	08021128 	.word	0x08021128
 801c358:	3d4ccccd 	.word	0x3d4ccccd
 801c35c:	2000025c 	.word	0x2000025c
 801c360:	08021160 	.word	0x08021160
 801c364:	200001f0 	.word	0x200001f0
 801c368:	08021194 	.word	0x08021194
 801c36c:	20000b44 	.word	0x20000b44
 801c370:	080211c8 	.word	0x080211c8
 801c374:	080211f4 	.word	0x080211f4
 801c378:	08021228 	.word	0x08021228
 801c37c:	08021250 	.word	0x08021250
 801c380:	08021294 	.word	0x08021294

0801c384 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b084      	sub	sp, #16
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801c38c:	2300      	movs	r3, #0
 801c38e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801c390:	4b0c      	ldr	r3, [pc, #48]	@ (801c3c4 <HAL_ADC_ConvCpltCallback+0x40>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	f107 020c 	add.w	r2, r7, #12
 801c398:	4611      	mov	r1, r2
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7f2 fcc1 	bl	800ed22 <xQueueGiveFromISR>
	printf("ADC complete callback fired and gave a semaphore\n\r");
 801c3a0:	4809      	ldr	r0, [pc, #36]	@ (801c3c8 <HAL_ADC_ConvCpltCallback+0x44>)
 801c3a2:	f001 f87d 	bl	801d4a0 <iprintf>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d007      	beq.n	801c3bc <HAL_ADC_ConvCpltCallback+0x38>
 801c3ac:	4b07      	ldr	r3, [pc, #28]	@ (801c3cc <HAL_ADC_ConvCpltCallback+0x48>)
 801c3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c3b2:	601a      	str	r2, [r3, #0]
 801c3b4:	f3bf 8f4f 	dsb	sy
 801c3b8:	f3bf 8f6f 	isb	sy
}
 801c3bc:	bf00      	nop
 801c3be:	3710      	adds	r7, #16
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	20000b44 	.word	0x20000b44
 801c3c8:	080212cc 	.word	0x080212cc
 801c3cc:	e000ed04 	.word	0xe000ed04

0801c3d0 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4)   // Master
#define I2C_RECEIVER 	(&hi2c1)   // Slave
#define I2C_SLAVE_ADDR  (120 << 1) // left-shifted 7-bit address


result_pro_t i2c_testing(test_command_t* command){
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801c3d6:	af00      	add	r7, sp, #0
 801c3d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c3dc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c3e0:	6018      	str	r0, [r3, #0]
 801c3e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c3e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c3ea:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801c3ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c3f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c3fa:	461a      	mov	r2, r3
 801c3fc:	2100      	movs	r1, #0
 801c3fe:	f001 f8b4 	bl	801d56a <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801c402:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c406:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801c40a:	4618      	mov	r0, r3
 801c40c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c410:	461a      	mov	r2, r3
 801c412:	2100      	movs	r1, #0
 801c414:	f001 f8a9 	bl	801d56a <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801c418:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c41c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d118      	bne.n	801c458 <i2c_testing+0x88>
        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r");
 801c426:	48cc      	ldr	r0, [pc, #816]	@ (801c758 <i2c_testing+0x388>)
 801c428:	f001 f83a 	bl	801d4a0 <iprintf>
        response.test_result = TEST_ERR;
 801c42c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c430:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c438:	809a      	strh	r2, [r3, #4]
        return response;
 801c43a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c43e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c442:	6819      	ldr	r1, [r3, #0]
 801c444:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c448:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c44c:	460b      	mov	r3, r1
 801c44e:	6810      	ldr	r0, [r2, #0]
 801c450:	6018      	str	r0, [r3, #0]
 801c452:	8892      	ldrh	r2, [r2, #4]
 801c454:	809a      	strh	r2, [r3, #4]
 801c456:	e1cc      	b.n	801c7f2 <i2c_testing+0x422>
	}

	response.test_id = command->test_id;
 801c458:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c45c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	681a      	ldr	r2, [r3, #0]
 801c464:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c468:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c46c:	601a      	str	r2, [r3, #0]
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801c46e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c472:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	1dd9      	adds	r1, r3, #7
 801c47a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c47e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	799b      	ldrb	r3, [r3, #6]
 801c486:	461a      	mov	r2, r3
 801c488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801c48c:	4618      	mov	r0, r3
 801c48e:	f001 f940 	bl	801d712 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801c492:	2300      	movs	r3, #0
 801c494:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801c498:	e185      	b.n	801c7a6 <i2c_testing+0x3d6>
	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801c49a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c49e:	1c59      	adds	r1, r3, #1
 801c4a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c4a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	795b      	ldrb	r3, [r3, #5]
 801c4ac:	461a      	mov	r2, r3
 801c4ae:	48ab      	ldr	r0, [pc, #684]	@ (801c75c <i2c_testing+0x38c>)
 801c4b0:	f000 fff6 	bl	801d4a0 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801c4b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c4b8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	799b      	ldrb	r3, [r3, #6]
 801c4c0:	461a      	mov	r2, r3
 801c4c2:	f107 0310 	add.w	r3, r7, #16
 801c4c6:	2100      	movs	r1, #0
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	f001 f84e 	bl	801d56a <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    rx_status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, rx_buffer, command->bit_pattern_length);
 801c4ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c4d2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	799b      	ldrb	r3, [r3, #6]
 801c4da:	461a      	mov	r2, r3
 801c4dc:	f107 0310 	add.w	r3, r7, #16
 801c4e0:	4619      	mov	r1, r3
 801c4e2:	489f      	ldr	r0, [pc, #636]	@ (801c760 <i2c_testing+0x390>)
 801c4e4:	f7e9 fcb2 	bl	8005e4c <HAL_I2C_Slave_Receive_DMA>
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801c4ee:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d021      	beq.n	801c53a <i2c_testing+0x16a>
	        printf("Failed to start slave receive DMA: %d\n\r", rx_status);
 801c4f6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801c4fa:	4619      	mov	r1, r3
 801c4fc:	4899      	ldr	r0, [pc, #612]	@ (801c764 <i2c_testing+0x394>)
 801c4fe:	f000 ffcf 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801c502:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c506:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c50a:	22ff      	movs	r2, #255	@ 0xff
 801c50c:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801c50e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c512:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c516:	6818      	ldr	r0, [r3, #0]
 801c518:	f7f5 f92c 	bl	8011774 <vPortFree>
	        return response;
 801c51c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c520:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c524:	6819      	ldr	r1, [r3, #0]
 801c526:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c52a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c52e:	460b      	mov	r3, r1
 801c530:	6810      	ldr	r0, [r2, #0]
 801c532:	6018      	str	r0, [r3, #0]
 801c534:	8892      	ldrh	r2, [r2, #4]
 801c536:	809a      	strh	r2, [r3, #4]
 801c538:	e15b      	b.n	801c7f2 <i2c_testing+0x422>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    tx_status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801c53a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c53e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	799b      	ldrb	r3, [r3, #6]
 801c546:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801c54a:	21f0      	movs	r1, #240	@ 0xf0
 801c54c:	4886      	ldr	r0, [pc, #536]	@ (801c768 <i2c_testing+0x398>)
 801c54e:	f7e9 fb69 	bl	8005c24 <HAL_I2C_Master_Transmit_DMA>
 801c552:	4603      	mov	r3, r0
 801c554:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801c558:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d027      	beq.n	801c5b0 <i2c_testing+0x1e0>
	        printf("Failed to send DMA on I2C sender: %d\n\r", tx_status);
 801c560:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801c564:	4619      	mov	r1, r3
 801c566:	4881      	ldr	r0, [pc, #516]	@ (801c76c <i2c_testing+0x39c>)
 801c568:	f000 ff9a 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801c56c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c570:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c574:	22ff      	movs	r2, #255	@ 0xff
 801c576:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801c578:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c57c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c580:	6818      	ldr	r0, [r3, #0]
 801c582:	f7f5 f8f7 	bl	8011774 <vPortFree>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801c586:	4878      	ldr	r0, [pc, #480]	@ (801c768 <i2c_testing+0x398>)
 801c588:	f000 f99a 	bl	801c8c0 <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801c58c:	4874      	ldr	r0, [pc, #464]	@ (801c760 <i2c_testing+0x390>)
 801c58e:	f000 f997 	bl	801c8c0 <i2c_reset>
	        return response;
 801c592:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c596:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c59a:	6819      	ldr	r1, [r3, #0]
 801c59c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c5a0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	6810      	ldr	r0, [r2, #0]
 801c5a8:	6018      	str	r0, [r3, #0]
 801c5aa:	8892      	ldrh	r2, [r2, #4]
 801c5ac:	809a      	strh	r2, [r3, #4]
 801c5ae:	e120      	b.n	801c7f2 <i2c_testing+0x422>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801c5b0:	4b6f      	ldr	r3, [pc, #444]	@ (801c770 <i2c_testing+0x3a0>)
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	f7f2 fd33 	bl	800f024 <xQueueSemaphoreTake>
 801c5be:	4603      	mov	r3, r0
 801c5c0:	2b01      	cmp	r3, #1
 801c5c2:	d024      	beq.n	801c60e <i2c_testing+0x23e>
	         printf("Master TX timeout\n\r");
 801c5c4:	486b      	ldr	r0, [pc, #428]	@ (801c774 <i2c_testing+0x3a4>)
 801c5c6:	f000 ff6b 	bl	801d4a0 <iprintf>
	         response.test_result = TEST_FAIL;
 801c5ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c5ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c5d2:	22ff      	movs	r2, #255	@ 0xff
 801c5d4:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801c5d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c5da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c5de:	6818      	ldr	r0, [r3, #0]
 801c5e0:	f7f5 f8c8 	bl	8011774 <vPortFree>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801c5e4:	4860      	ldr	r0, [pc, #384]	@ (801c768 <i2c_testing+0x398>)
 801c5e6:	f000 f96b 	bl	801c8c0 <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801c5ea:	485d      	ldr	r0, [pc, #372]	@ (801c760 <i2c_testing+0x390>)
 801c5ec:	f000 f968 	bl	801c8c0 <i2c_reset>
	         return response;
 801c5f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c5f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c5f8:	6819      	ldr	r1, [r3, #0]
 801c5fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c5fe:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c602:	460b      	mov	r3, r1
 801c604:	6810      	ldr	r0, [r2, #0]
 801c606:	6018      	str	r0, [r3, #0]
 801c608:	8892      	ldrh	r2, [r2, #4]
 801c60a:	809a      	strh	r2, [r3, #4]
 801c60c:	e0f1      	b.n	801c7f2 <i2c_testing+0x422>
	    }

	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801c60e:	4b5a      	ldr	r3, [pc, #360]	@ (801c778 <i2c_testing+0x3a8>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c616:	4618      	mov	r0, r3
 801c618:	f7f2 fd04 	bl	800f024 <xQueueSemaphoreTake>
 801c61c:	4603      	mov	r3, r0
 801c61e:	2b01      	cmp	r3, #1
 801c620:	d012      	beq.n	801c648 <i2c_testing+0x278>
	         printf("Slave RX timeout\n\r");
 801c622:	4856      	ldr	r0, [pc, #344]	@ (801c77c <i2c_testing+0x3ac>)
 801c624:	f000 ff3c 	bl	801d4a0 <iprintf>
	         response.test_result = TEST_FAIL;
 801c628:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c62c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c630:	22ff      	movs	r2, #255	@ 0xff
 801c632:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801c634:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c638:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c63c:	6818      	ldr	r0, [r3, #0]
 801c63e:	f7f5 f899 	bl	8011774 <vPortFree>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution	         return response;
 801c642:	4847      	ldr	r0, [pc, #284]	@ (801c760 <i2c_testing+0x390>)
 801c644:	f000 f93c 	bl	801c8c0 <i2c_reset>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801c648:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c64c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	799b      	ldrb	r3, [r3, #6]
 801c654:	2b64      	cmp	r3, #100	@ 0x64
 801c656:	d948      	bls.n	801c6ea <i2c_testing+0x31a>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801c658:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c65c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	799b      	ldrb	r3, [r3, #6]
 801c664:	461a      	mov	r2, r3
 801c666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801c66a:	4611      	mov	r1, r2
 801c66c:	4618      	mov	r0, r3
 801c66e:	f7e4 fd45 	bl	80010fc <calculate_crc>
 801c672:	4603      	mov	r3, r0
 801c674:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801c678:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c67c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	799b      	ldrb	r3, [r3, #6]
 801c684:	461a      	mov	r2, r3
 801c686:	f107 0310 	add.w	r3, r7, #16
 801c68a:	4611      	mov	r1, r2
 801c68c:	4618      	mov	r0, r3
 801c68e:	f7e4 fd35 	bl	80010fc <calculate_crc>
 801c692:	4603      	mov	r3, r0
 801c694:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801c698:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801c69c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d071      	beq.n	801c788 <i2c_testing+0x3b8>
	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1);
 801c6a4:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c6a8:	3301      	adds	r3, #1
 801c6aa:	4619      	mov	r1, r3
 801c6ac:	4834      	ldr	r0, [pc, #208]	@ (801c780 <i2c_testing+0x3b0>)
 801c6ae:	f000 fef7 	bl	801d4a0 <iprintf>
	            response.test_result = TEST_FAIL;
 801c6b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c6b6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c6ba:	22ff      	movs	r2, #255	@ 0xff
 801c6bc:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801c6be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c6c2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c6c6:	6818      	ldr	r0, [r3, #0]
 801c6c8:	f7f5 f854 	bl	8011774 <vPortFree>
	            return response;
 801c6cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c6d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c6d4:	6819      	ldr	r1, [r3, #0]
 801c6d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c6da:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c6de:	460b      	mov	r3, r1
 801c6e0:	6810      	ldr	r0, [r2, #0]
 801c6e2:	6018      	str	r0, [r3, #0]
 801c6e4:	8892      	ldrh	r2, [r2, #4]
 801c6e6:	809a      	strh	r2, [r3, #4]
 801c6e8:	e083      	b.n	801c7f2 <i2c_testing+0x422>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801c6ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c6ee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	799b      	ldrb	r3, [r3, #6]
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	f107 0110 	add.w	r1, r7, #16
 801c6fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801c700:	4618      	mov	r0, r3
 801c702:	f000 ff22 	bl	801d54a <memcmp>
 801c706:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801c70a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d03a      	beq.n	801c788 <i2c_testing+0x3b8>
	            printf("Data mismatch on iteration %u.\n\r", i + 1);
 801c712:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c716:	3301      	adds	r3, #1
 801c718:	4619      	mov	r1, r3
 801c71a:	481a      	ldr	r0, [pc, #104]	@ (801c784 <i2c_testing+0x3b4>)
 801c71c:	f000 fec0 	bl	801d4a0 <iprintf>
	            response.test_result = TEST_FAIL;
 801c720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c724:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c728:	22ff      	movs	r2, #255	@ 0xff
 801c72a:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801c72c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c730:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c734:	6818      	ldr	r0, [r3, #0]
 801c736:	f7f5 f81d 	bl	8011774 <vPortFree>
	            return response;
 801c73a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c73e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c742:	6819      	ldr	r1, [r3, #0]
 801c744:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c748:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c74c:	460b      	mov	r3, r1
 801c74e:	6810      	ldr	r0, [r2, #0]
 801c750:	6018      	str	r0, [r3, #0]
 801c752:	8892      	ldrh	r2, [r2, #4]
 801c754:	809a      	strh	r2, [r3, #4]
 801c756:	e04c      	b.n	801c7f2 <i2c_testing+0x422>
 801c758:	08021300 	.word	0x08021300
 801c75c:	08021338 	.word	0x08021338
 801c760:	20000270 	.word	0x20000270
 801c764:	08021358 	.word	0x08021358
 801c768:	200002c4 	.word	0x200002c4
 801c76c:	08021380 	.word	0x08021380
 801c770:	20000b38 	.word	0x20000b38
 801c774:	080213a8 	.word	0x080213a8
 801c778:	20000b34 	.word	0x20000b34
 801c77c:	080213bc 	.word	0x080213bc
 801c780:	080213d0 	.word	0x080213d0
 801c784:	080213fc 	.word	0x080213fc
	        }
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1);
 801c788:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c78c:	3301      	adds	r3, #1
 801c78e:	4619      	mov	r1, r3
 801c790:	481c      	ldr	r0, [pc, #112]	@ (801c804 <i2c_testing+0x434>)
 801c792:	f000 fe85 	bl	801d4a0 <iprintf>

        osDelay(10);
 801c796:	200a      	movs	r0, #10
 801c798:	f7f1 f966 	bl	800da68 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801c79c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c7a0:	3301      	adds	r3, #1
 801c7a2:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801c7a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	795b      	ldrb	r3, [r3, #5]
 801c7b2:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	f4ff ae6f 	bcc.w	801c49a <i2c_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801c7bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7c0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c7c4:	2201      	movs	r2, #1
 801c7c6:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801c7c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7cc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c7d0:	6818      	ldr	r0, [r3, #0]
 801c7d2:	f7f4 ffcf 	bl	8011774 <vPortFree>
    return response;
 801c7d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c7de:	6819      	ldr	r1, [r3, #0]
 801c7e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7e4:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	6810      	ldr	r0, [r2, #0]
 801c7ec:	6018      	str	r0, [r3, #0]
 801c7ee:	8892      	ldrh	r2, [r2, #4]
 801c7f0:	809a      	strh	r2, [r3, #4]
}
 801c7f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c7f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c7fa:	6818      	ldr	r0, [r3, #0]
 801c7fc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801c800:	46bd      	mov	sp, r7
 801c802:	bd80      	pop	{r7, pc}
 801c804:	08021420 	.word	0x08021420

0801c808 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b084      	sub	sp, #16
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801c810:	2300      	movs	r3, #0
 801c812:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681a      	ldr	r2, [r3, #0]
 801c818:	4b0e      	ldr	r3, [pc, #56]	@ (801c854 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	429a      	cmp	r2, r3
 801c81e:	d10a      	bne.n	801c836 <HAL_I2C_MasterTxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801c820:	4b0d      	ldr	r3, [pc, #52]	@ (801c858 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f107 020c 	add.w	r2, r7, #12
 801c828:	4611      	mov	r1, r2
 801c82a:	4618      	mov	r0, r3
 801c82c:	f7f2 fa79 	bl	800ed22 <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n\r");
 801c830:	480a      	ldr	r0, [pc, #40]	@ (801c85c <HAL_I2C_MasterTxCpltCallback+0x54>)
 801c832:	f000 fe35 	bl	801d4a0 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d007      	beq.n	801c84c <HAL_I2C_MasterTxCpltCallback+0x44>
 801c83c:	4b08      	ldr	r3, [pc, #32]	@ (801c860 <HAL_I2C_MasterTxCpltCallback+0x58>)
 801c83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c842:	601a      	str	r2, [r3, #0]
 801c844:	f3bf 8f4f 	dsb	sy
 801c848:	f3bf 8f6f 	isb	sy

}
 801c84c:	bf00      	nop
 801c84e:	3710      	adds	r7, #16
 801c850:	46bd      	mov	sp, r7
 801c852:	bd80      	pop	{r7, pc}
 801c854:	200002c4 	.word	0x200002c4
 801c858:	20000b38 	.word	0x20000b38
 801c85c:	08021440 	.word	0x08021440
 801c860:	e000ed04 	.word	0xe000ed04

0801c864 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b084      	sub	sp, #16
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801c86c:	2300      	movs	r3, #0
 801c86e:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_RECEIVER->Instance) // Check the instance of your receiver UART
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681a      	ldr	r2, [r3, #0]
 801c874:	4b0e      	ldr	r3, [pc, #56]	@ (801c8b0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	429a      	cmp	r2, r3
 801c87a:	d10a      	bne.n	801c892 <HAL_I2C_SlaveRxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801c87c:	4b0d      	ldr	r3, [pc, #52]	@ (801c8b4 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	f107 020c 	add.w	r2, r7, #12
 801c884:	4611      	mov	r1, r2
 801c886:	4618      	mov	r0, r3
 801c888:	f7f2 fa4b 	bl	800ed22 <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n\r");
 801c88c:	480a      	ldr	r0, [pc, #40]	@ (801c8b8 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 801c88e:	f000 fe07 	bl	801d4a0 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d007      	beq.n	801c8a8 <HAL_I2C_SlaveRxCpltCallback+0x44>
 801c898:	4b08      	ldr	r3, [pc, #32]	@ (801c8bc <HAL_I2C_SlaveRxCpltCallback+0x58>)
 801c89a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c89e:	601a      	str	r2, [r3, #0]
 801c8a0:	f3bf 8f4f 	dsb	sy
 801c8a4:	f3bf 8f6f 	isb	sy
}
 801c8a8:	bf00      	nop
 801c8aa:	3710      	adds	r7, #16
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd80      	pop	{r7, pc}
 801c8b0:	20000270 	.word	0x20000270
 801c8b4:	20000b34 	.word	0x20000b34
 801c8b8:	0802146c 	.word	0x0802146c
 801c8bc:	e000ed04 	.word	0xe000ed04

0801c8c0 <i2c_reset>:

// Create a function to reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b082      	sub	sp, #8
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f7e9 f97b 	bl	8005bc4 <HAL_I2C_DeInit>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d002      	beq.n	801c8da <i2c_reset+0x1a>
        // Log a fatal error, the peripheral is in an unrecoverable state
        printf("Failed to de-initialize I2C peripheral!\n\r");
 801c8d4:	4807      	ldr	r0, [pc, #28]	@ (801c8f4 <i2c_reset+0x34>)
 801c8d6:	f000 fde3 	bl	801d4a0 <iprintf>
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801c8da:	6878      	ldr	r0, [r7, #4]
 801c8dc:	f7e9 f8d6 	bl	8005a8c <HAL_I2C_Init>
 801c8e0:	4603      	mov	r3, r0
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d002      	beq.n	801c8ec <i2c_reset+0x2c>
        // Log a fatal error
        printf("Failed to re-initialize I2C peripheral!\n\r");
 801c8e6:	4804      	ldr	r0, [pc, #16]	@ (801c8f8 <i2c_reset+0x38>)
 801c8e8:	f000 fdda 	bl	801d4a0 <iprintf>
    }
}
 801c8ec:	bf00      	nop
 801c8ee:	3708      	adds	r7, #8
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	bd80      	pop	{r7, pc}
 801c8f4:	08021498 	.word	0x08021498
 801c8f8:	080214c4 	.word	0x080214c4

0801c8fc <spi_testing>:
 */
#define SPI_SENDER 		(&hspi1) // Master
#define SPI_RECEIVER 	(&hspi2) // Slave


result_pro_t spi_testing(test_command_t* command){
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801c902:	af00      	add	r7, sp, #0
 801c904:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c908:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c90c:	6018      	str	r0, [r3, #0]
 801c90e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c912:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c916:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801c918:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c91c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801c920:	4618      	mov	r0, r3
 801c922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c926:	461a      	mov	r2, r3
 801c928:	2100      	movs	r1, #0
 801c92a:	f000 fe1e 	bl	801d56a <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801c92e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c932:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801c936:	4618      	mov	r0, r3
 801c938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801c93c:	461a      	mov	r2, r3
 801c93e:	2100      	movs	r1, #0
 801c940:	f000 fe13 	bl	801d56a <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801c944:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c948:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d118      	bne.n	801c984 <spi_testing+0x88>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n\r");
 801c952:	48bd      	ldr	r0, [pc, #756]	@ (801cc48 <spi_testing+0x34c>)
 801c954:	f000 fda4 	bl	801d4a0 <iprintf>
        response.test_result = TEST_ERR;
 801c958:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c95c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c964:	809a      	strh	r2, [r3, #4]
        return response;
 801c966:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c96a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801c96e:	6819      	ldr	r1, [r3, #0]
 801c970:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c974:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801c978:	460b      	mov	r3, r1
 801c97a:	6810      	ldr	r0, [r2, #0]
 801c97c:	6018      	str	r0, [r3, #0]
 801c97e:	8892      	ldrh	r2, [r2, #4]
 801c980:	809a      	strh	r2, [r3, #4]
 801c982:	e1aa      	b.n	801ccda <spi_testing+0x3de>
	}

	response.test_id = command->test_id;
 801c984:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c988:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	681a      	ldr	r2, [r3, #0]
 801c990:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c994:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801c998:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801c99a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c99e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	1dd9      	adds	r1, r3, #7
 801c9a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c9aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	799b      	ldrb	r3, [r3, #6]
 801c9b2:	461a      	mov	r2, r3
 801c9b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801c9b8:	4618      	mov	r0, r3
 801c9ba:	f000 feaa 	bl	801d712 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801c9be:	2300      	movs	r3, #0
 801c9c0:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801c9c4:	e163      	b.n	801cc8e <spi_testing+0x392>
	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801c9c6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801c9ca:	1c59      	adds	r1, r3, #1
 801c9cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c9d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	795b      	ldrb	r3, [r3, #5]
 801c9d8:	461a      	mov	r2, r3
 801c9da:	489c      	ldr	r0, [pc, #624]	@ (801cc4c <spi_testing+0x350>)
 801c9dc:	f000 fd60 	bl	801d4a0 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801c9e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c9e4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	799b      	ldrb	r3, [r3, #6]
 801c9ec:	461a      	mov	r2, r3
 801c9ee:	f107 0310 	add.w	r3, r7, #16
 801c9f2:	2100      	movs	r1, #0
 801c9f4:	4618      	mov	r0, r3
 801c9f6:	f000 fdb8 	bl	801d56a <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
		//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	    rx_status = HAL_SPI_Receive_IT(SPI_RECEIVER, rx_buffer, command->bit_pattern_length);
 801c9fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801c9fe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	799b      	ldrb	r3, [r3, #6]
 801ca06:	461a      	mov	r2, r3
 801ca08:	f107 0310 	add.w	r3, r7, #16
 801ca0c:	4619      	mov	r1, r3
 801ca0e:	4890      	ldr	r0, [pc, #576]	@ (801cc50 <spi_testing+0x354>)
 801ca10:	f7ec fcc8 	bl	80093a4 <HAL_SPI_Receive_IT>
 801ca14:	4603      	mov	r3, r0
 801ca16:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801ca1a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d021      	beq.n	801ca66 <spi_testing+0x16a>
	        printf("Failed to start slave receive DMA: %d\n\r", rx_status);
 801ca22:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801ca26:	4619      	mov	r1, r3
 801ca28:	488a      	ldr	r0, [pc, #552]	@ (801cc54 <spi_testing+0x358>)
 801ca2a:	f000 fd39 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801ca2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ca32:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ca36:	22ff      	movs	r2, #255	@ 0xff
 801ca38:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801ca3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ca3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ca42:	6818      	ldr	r0, [r3, #0]
 801ca44:	f7f4 fe96 	bl	8011774 <vPortFree>
	        return response;
 801ca48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ca4c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801ca50:	6819      	ldr	r1, [r3, #0]
 801ca52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ca56:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ca5a:	460b      	mov	r3, r1
 801ca5c:	6810      	ldr	r0, [r2, #0]
 801ca5e:	6018      	str	r0, [r3, #0]
 801ca60:	8892      	ldrh	r2, [r2, #4]
 801ca62:	809a      	strh	r2, [r3, #4]
 801ca64:	e139      	b.n	801ccda <spi_testing+0x3de>
	    }

	    // --- 2. TRANSMIT & RECEIVE a block of data via DMA (MASTER) ---
		//SPI_RECEIVER->Instance->CR1 &= ~SPI_CR1_SSI; // turn ON

	    tx_status = HAL_SPI_Transmit(SPI_SENDER, tx_buffer, command->bit_pattern_length,TIMEOUT);
 801ca66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ca6a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	799b      	ldrb	r3, [r3, #6]
 801ca72:	461a      	mov	r2, r3
 801ca74:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ca78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801ca7c:	4876      	ldr	r0, [pc, #472]	@ (801cc58 <spi_testing+0x35c>)
 801ca7e:	f7ec fb1a 	bl	80090b6 <HAL_SPI_Transmit>
 801ca82:	4603      	mov	r3, r0
 801ca84:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801ca88:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d027      	beq.n	801cae0 <spi_testing+0x1e4>
	        printf("Failed to send DMA on SPI sender: %d\n\r", tx_status);
 801ca90:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801ca94:	4619      	mov	r1, r3
 801ca96:	4871      	ldr	r0, [pc, #452]	@ (801cc5c <spi_testing+0x360>)
 801ca98:	f000 fd02 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801ca9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801caa0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801caa4:	22ff      	movs	r2, #255	@ 0xff
 801caa6:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801caa8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801caac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cab0:	6818      	ldr	r0, [r3, #0]
 801cab2:	f7f4 fe5f 	bl	8011774 <vPortFree>
	        HAL_SPI_Abort_IT(SPI_SENDER); // Stop the stuck sending
 801cab6:	4868      	ldr	r0, [pc, #416]	@ (801cc58 <spi_testing+0x35c>)
 801cab8:	f7ec fdc8 	bl	800964c <HAL_SPI_Abort_IT>
		    HAL_SPI_Abort_IT(SPI_RECEIVER); // Stop the pending receive
 801cabc:	4864      	ldr	r0, [pc, #400]	@ (801cc50 <spi_testing+0x354>)
 801cabe:	f7ec fdc5 	bl	800964c <HAL_SPI_Abort_IT>

			//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	        return response;
 801cac2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cac6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801caca:	6819      	ldr	r1, [r3, #0]
 801cacc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cad0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cad4:	460b      	mov	r3, r1
 801cad6:	6810      	ldr	r0, [r2, #0]
 801cad8:	6018      	str	r0, [r3, #0]
 801cada:	8892      	ldrh	r2, [r2, #4]
 801cadc:	809a      	strh	r2, [r3, #4]
 801cade:	e0fc      	b.n	801ccda <spi_testing+0x3de>
//		     HAL_SPI_Abort_IT(SPI_RECEIVER); // Stop the pending receive
//		     //SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
//	         return response;
//	    }

	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801cae0:	4b5f      	ldr	r3, [pc, #380]	@ (801cc60 <spi_testing+0x364>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801cae8:	4618      	mov	r0, r3
 801caea:	f7f2 fa9b 	bl	800f024 <xQueueSemaphoreTake>
 801caee:	4603      	mov	r3, r0
 801caf0:	2b01      	cmp	r3, #1
 801caf2:	d021      	beq.n	801cb38 <spi_testing+0x23c>
	         printf("Slave RX timeout\n\r");
 801caf4:	485b      	ldr	r0, [pc, #364]	@ (801cc64 <spi_testing+0x368>)
 801caf6:	f000 fcd3 	bl	801d4a0 <iprintf>
	         response.test_result = TEST_FAIL;
 801cafa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cafe:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cb02:	22ff      	movs	r2, #255	@ 0xff
 801cb04:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801cb06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb0a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cb0e:	6818      	ldr	r0, [r3, #0]
 801cb10:	f7f4 fe30 	bl	8011774 <vPortFree>
	         HAL_SPI_Abort_IT(SPI_RECEIVER);
 801cb14:	484e      	ldr	r0, [pc, #312]	@ (801cc50 <spi_testing+0x354>)
 801cb16:	f7ec fd99 	bl	800964c <HAL_SPI_Abort_IT>
		     //SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
	         return response;
 801cb1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb1e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cb22:	6819      	ldr	r1, [r3, #0]
 801cb24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb28:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cb2c:	460b      	mov	r3, r1
 801cb2e:	6810      	ldr	r0, [r2, #0]
 801cb30:	6018      	str	r0, [r3, #0]
 801cb32:	8892      	ldrh	r2, [r2, #4]
 801cb34:	809a      	strh	r2, [r3, #4]
 801cb36:	e0d0      	b.n	801ccda <spi_testing+0x3de>

		//SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF


		// --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801cb38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb3c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	799b      	ldrb	r3, [r3, #6]
 801cb44:	2b64      	cmp	r3, #100	@ 0x64
 801cb46:	d948      	bls.n	801cbda <spi_testing+0x2de>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801cb48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb4c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	799b      	ldrb	r3, [r3, #6]
 801cb54:	461a      	mov	r2, r3
 801cb56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801cb5a:	4611      	mov	r1, r2
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	f7e4 facd 	bl	80010fc <calculate_crc>
 801cb62:	4603      	mov	r3, r0
 801cb64:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801cb68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cb6c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	799b      	ldrb	r3, [r3, #6]
 801cb74:	461a      	mov	r2, r3
 801cb76:	f107 0310 	add.w	r3, r7, #16
 801cb7a:	4611      	mov	r1, r2
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f7e4 fabd 	bl	80010fc <calculate_crc>
 801cb82:	4603      	mov	r3, r0
 801cb84:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801cb88:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801cb8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801cb90:	429a      	cmp	r2, r3
 801cb92:	d06d      	beq.n	801cc70 <spi_testing+0x374>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n\r", i + 1);
 801cb94:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801cb98:	3301      	adds	r3, #1
 801cb9a:	4619      	mov	r1, r3
 801cb9c:	4832      	ldr	r0, [pc, #200]	@ (801cc68 <spi_testing+0x36c>)
 801cb9e:	f000 fc7f 	bl	801d4a0 <iprintf>
	            response.test_result = TEST_FAIL;
 801cba2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cba6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cbaa:	22ff      	movs	r2, #255	@ 0xff
 801cbac:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801cbae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cbb2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cbb6:	6818      	ldr	r0, [r3, #0]
 801cbb8:	f7f4 fddc 	bl	8011774 <vPortFree>
	            return response;
 801cbbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cbc0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cbc4:	6819      	ldr	r1, [r3, #0]
 801cbc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cbca:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cbce:	460b      	mov	r3, r1
 801cbd0:	6810      	ldr	r0, [r2, #0]
 801cbd2:	6018      	str	r0, [r3, #0]
 801cbd4:	8892      	ldrh	r2, [r2, #4]
 801cbd6:	809a      	strh	r2, [r3, #4]
 801cbd8:	e07f      	b.n	801ccda <spi_testing+0x3de>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801cbda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cbde:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	799b      	ldrb	r3, [r3, #6]
 801cbe6:	461a      	mov	r2, r3
 801cbe8:	f107 0110 	add.w	r1, r7, #16
 801cbec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f000 fcaa 	bl	801d54a <memcmp>
 801cbf6:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801cbfa:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d036      	beq.n	801cc70 <spi_testing+0x374>
	            printf("Data mismatch on iteration %u.\n\r", i + 1);
 801cc02:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801cc06:	3301      	adds	r3, #1
 801cc08:	4619      	mov	r1, r3
 801cc0a:	4818      	ldr	r0, [pc, #96]	@ (801cc6c <spi_testing+0x370>)
 801cc0c:	f000 fc48 	bl	801d4a0 <iprintf>
	            response.test_result = TEST_FAIL;
 801cc10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc14:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cc18:	22ff      	movs	r2, #255	@ 0xff
 801cc1a:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801cc1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc20:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cc24:	6818      	ldr	r0, [r3, #0]
 801cc26:	f7f4 fda5 	bl	8011774 <vPortFree>
	            return response;
 801cc2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc2e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cc32:	6819      	ldr	r1, [r3, #0]
 801cc34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc38:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cc3c:	460b      	mov	r3, r1
 801cc3e:	6810      	ldr	r0, [r2, #0]
 801cc40:	6018      	str	r0, [r3, #0]
 801cc42:	8892      	ldrh	r2, [r2, #4]
 801cc44:	809a      	strh	r2, [r3, #4]
 801cc46:	e048      	b.n	801ccda <spi_testing+0x3de>
 801cc48:	080214f0 	.word	0x080214f0
 801cc4c:	08021528 	.word	0x08021528
 801cc50:	2000043c 	.word	0x2000043c
 801cc54:	08021548 	.word	0x08021548
 801cc58:	200003d8 	.word	0x200003d8
 801cc5c:	08021570 	.word	0x08021570
 801cc60:	20000b40 	.word	0x20000b40
 801cc64:	08021598 	.word	0x08021598
 801cc68:	080215ac 	.word	0x080215ac
 801cc6c:	080215d8 	.word	0x080215d8
	        }
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1);
 801cc70:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801cc74:	3301      	adds	r3, #1
 801cc76:	4619      	mov	r1, r3
 801cc78:	481c      	ldr	r0, [pc, #112]	@ (801ccec <spi_testing+0x3f0>)
 801cc7a:	f000 fc11 	bl	801d4a0 <iprintf>

        osDelay(10);
 801cc7e:	200a      	movs	r0, #10
 801cc80:	f7f0 fef2 	bl	800da68 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801cc84:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801cc88:	3301      	adds	r3, #1
 801cc8a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801cc8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc92:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	795b      	ldrb	r3, [r3, #5]
 801cc9a:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801cc9e:	429a      	cmp	r2, r3
 801cca0:	f4ff ae91 	bcc.w	801c9c6 <spi_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801cca4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cca8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ccac:	2201      	movs	r2, #1
 801ccae:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801ccb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccb4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ccb8:	6818      	ldr	r0, [r3, #0]
 801ccba:	f7f4 fd5b 	bl	8011774 <vPortFree>
    return response;
 801ccbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccc2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801ccc6:	6819      	ldr	r1, [r3, #0]
 801ccc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cccc:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ccd0:	460b      	mov	r3, r1
 801ccd2:	6810      	ldr	r0, [r2, #0]
 801ccd4:	6018      	str	r0, [r3, #0]
 801ccd6:	8892      	ldrh	r2, [r2, #4]
 801ccd8:	809a      	strh	r2, [r3, #4]
}
 801ccda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccde:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cce2:	6818      	ldr	r0, [r3, #0]
 801cce4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801cce8:	46bd      	mov	sp, r7
 801ccea:	bd80      	pop	{r7, pc}
 801ccec:	080215fc 	.word	0x080215fc

0801ccf0 <HAL_SPI_RxCpltCallback>:
//		SPI_RECEIVER->Instance->CR1 |= SPI_CR1_SSI; // turn OFF
//    }
//    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b084      	sub	sp, #16
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance) {
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681a      	ldr	r2, [r3, #0]
 801cd00:	4b0e      	ldr	r3, [pc, #56]	@ (801cd3c <HAL_SPI_RxCpltCallback+0x4c>)
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	429a      	cmp	r2, r3
 801cd06:	d10a      	bne.n	801cd1e <HAL_SPI_RxCpltCallback+0x2e>
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801cd08:	4b0d      	ldr	r3, [pc, #52]	@ (801cd40 <HAL_SPI_RxCpltCallback+0x50>)
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	f107 020c 	add.w	r2, r7, #12
 801cd10:	4611      	mov	r1, r2
 801cd12:	4618      	mov	r0, r3
 801cd14:	f7f2 f805 	bl	800ed22 <xQueueGiveFromISR>
        printf("Slave Rx callback fired and gave a semaphore\n\r");
 801cd18:	480a      	ldr	r0, [pc, #40]	@ (801cd44 <HAL_SPI_RxCpltCallback+0x54>)
 801cd1a:	f000 fbc1 	bl	801d4a0 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d007      	beq.n	801cd34 <HAL_SPI_RxCpltCallback+0x44>
 801cd24:	4b08      	ldr	r3, [pc, #32]	@ (801cd48 <HAL_SPI_RxCpltCallback+0x58>)
 801cd26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cd2a:	601a      	str	r2, [r3, #0]
 801cd2c:	f3bf 8f4f 	dsb	sy
 801cd30:	f3bf 8f6f 	isb	sy
}
 801cd34:	bf00      	nop
 801cd36:	3710      	adds	r7, #16
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	bd80      	pop	{r7, pc}
 801cd3c:	2000043c 	.word	0x2000043c
 801cd40:	20000b40 	.word	0x20000b40
 801cd44:	0802161c 	.word	0x0802161c
 801cd48:	e000ed04 	.word	0xe000ed04

0801cd4c <uart_testing>:
 */

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart5)

result_pro_t uart_testing(test_command_t* command){
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801cd52:	af00      	add	r7, sp, #0
 801cd54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd58:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cd5c:	6018      	str	r0, [r3, #0]
 801cd5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd66:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801cd68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cd70:	4618      	mov	r0, r3
 801cd72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801cd76:	461a      	mov	r2, r3
 801cd78:	2100      	movs	r1, #0
 801cd7a:	f000 fbf6 	bl	801d56a <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801cd7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd82:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801cd86:	4618      	mov	r0, r3
 801cd88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801cd8c:	461a      	mov	r2, r3
 801cd8e:	2100      	movs	r1, #0
 801cd90:	f000 fbeb 	bl	801d56a <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801cd94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd98:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d118      	bne.n	801cdd4 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r");
 801cda2:	48b9      	ldr	r0, [pc, #740]	@ (801d088 <uart_testing+0x33c>)
 801cda4:	f000 fb7c 	bl	801d4a0 <iprintf>
        response.test_result = TEST_ERR;
 801cda8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cdb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cdb4:	809a      	strh	r2, [r3, #4]
        return response;
 801cdb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdba:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cdbe:	6819      	ldr	r1, [r3, #0]
 801cdc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdc4:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cdc8:	460b      	mov	r3, r1
 801cdca:	6810      	ldr	r0, [r2, #0]
 801cdcc:	6018      	str	r0, [r3, #0]
 801cdce:	8892      	ldrh	r2, [r2, #4]
 801cdd0:	809a      	strh	r2, [r3, #4]
 801cdd2:	e1f7      	b.n	801d1c4 <uart_testing+0x478>
	}

	response.test_id = command->test_id;
 801cdd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdd8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	681a      	ldr	r2, [r3, #0]
 801cde0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cde4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cde8:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801cdea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	1dd9      	adds	r1, r3, #7
 801cdf6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdfa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	799b      	ldrb	r3, [r3, #6]
 801ce02:	461a      	mov	r2, r3
 801ce04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f000 fc82 	bl	801d712 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801ce0e:	2300      	movs	r3, #0
 801ce10:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801ce14:	e1b0      	b.n	801d178 <uart_testing+0x42c>
	    printf("UART_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801ce16:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801ce1a:	1c59      	adds	r1, r3, #1
 801ce1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce20:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	795b      	ldrb	r3, [r3, #5]
 801ce28:	461a      	mov	r2, r3
 801ce2a:	4898      	ldr	r0, [pc, #608]	@ (801d08c <uart_testing+0x340>)
 801ce2c:	f000 fb38 	bl	801d4a0 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801ce30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce34:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	799b      	ldrb	r3, [r3, #6]
 801ce3c:	461a      	mov	r2, r3
 801ce3e:	f107 0310 	add.w	r3, r7, #16
 801ce42:	2100      	movs	r1, #0
 801ce44:	4618      	mov	r0, r3
 801ce46:	f000 fb90 	bl	801d56a <memset>

	    // --- 1. START RECEIVE DMA ---
	    HAL_StatusTypeDef rx_status = HAL_UART_Receive_IT(UART_RECEIVER, rx_buffer, command->bit_pattern_length);
 801ce4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	799b      	ldrb	r3, [r3, #6]
 801ce56:	461a      	mov	r2, r3
 801ce58:	f107 0310 	add.w	r3, r7, #16
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	488c      	ldr	r0, [pc, #560]	@ (801d090 <uart_testing+0x344>)
 801ce60:	f7ed ffd6 	bl	800ae10 <HAL_UART_Receive_IT>
 801ce64:	4603      	mov	r3, r0
 801ce66:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801ce6a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d021      	beq.n	801ceb6 <uart_testing+0x16a>
	        printf("Failed to start receive: %d\n\r", rx_status);
 801ce72:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801ce76:	4619      	mov	r1, r3
 801ce78:	4886      	ldr	r0, [pc, #536]	@ (801d094 <uart_testing+0x348>)
 801ce7a:	f000 fb11 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801ce7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce82:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ce86:	22ff      	movs	r2, #255	@ 0xff
 801ce88:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801ce8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce8e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce92:	6818      	ldr	r0, [r3, #0]
 801ce94:	f7f4 fc6e 	bl	8011774 <vPortFree>
	        return response;
 801ce98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce9c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cea0:	6819      	ldr	r1, [r3, #0]
 801cea2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cea6:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ceaa:	460b      	mov	r3, r1
 801ceac:	6810      	ldr	r0, [r2, #0]
 801ceae:	6018      	str	r0, [r3, #0]
 801ceb0:	8892      	ldrh	r2, [r2, #4]
 801ceb2:	809a      	strh	r2, [r3, #4]
 801ceb4:	e186      	b.n	801d1c4 <uart_testing+0x478>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_UART_Transmit_IT(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801ceb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ceba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	799b      	ldrb	r3, [r3, #6]
 801cec2:	461a      	mov	r2, r3
 801cec4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801cec8:	4619      	mov	r1, r3
 801ceca:	4873      	ldr	r0, [pc, #460]	@ (801d098 <uart_testing+0x34c>)
 801cecc:	f7ed ff42 	bl	800ad54 <HAL_UART_Transmit_IT>
 801ced0:	4603      	mov	r3, r0
 801ced2:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801ced6:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d024      	beq.n	801cf28 <uart_testing+0x1dc>
	        printf("Failed to send on UART sender: %d\n\r", tx_status);
 801cede:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801cee2:	4619      	mov	r1, r3
 801cee4:	486d      	ldr	r0, [pc, #436]	@ (801d09c <uart_testing+0x350>)
 801cee6:	f000 fadb 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801ceea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ceee:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cef2:	22ff      	movs	r2, #255	@ 0xff
 801cef4:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801cef6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cefa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cefe:	6818      	ldr	r0, [r3, #0]
 801cf00:	f7f4 fc38 	bl	8011774 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 801cf04:	4862      	ldr	r0, [pc, #392]	@ (801d090 <uart_testing+0x344>)
 801cf06:	f7ed ffc7 	bl	800ae98 <HAL_UART_DMAStop>
	        return response;
 801cf0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf0e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cf12:	6819      	ldr	r1, [r3, #0]
 801cf14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf18:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cf1c:	460b      	mov	r3, r1
 801cf1e:	6810      	ldr	r0, [r2, #0]
 801cf20:	6018      	str	r0, [r3, #0]
 801cf22:	8892      	ldrh	r2, [r2, #4]
 801cf24:	809a      	strh	r2, [r3, #4]
 801cf26:	e14d      	b.n	801d1c4 <uart_testing+0x478>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801cf28:	4b5d      	ldr	r3, [pc, #372]	@ (801d0a0 <uart_testing+0x354>)
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7f2 f877 	bl	800f024 <xQueueSemaphoreTake>
 801cf36:	4603      	mov	r3, r0
 801cf38:	2b01      	cmp	r3, #1
 801cf3a:	d021      	beq.n	801cf80 <uart_testing+0x234>
	         printf("fail to get TxSemaphore\n\r");
 801cf3c:	4859      	ldr	r0, [pc, #356]	@ (801d0a4 <uart_testing+0x358>)
 801cf3e:	f000 faaf 	bl	801d4a0 <iprintf>
	         response.test_result = TEST_FAIL;
 801cf42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf46:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cf4a:	22ff      	movs	r2, #255	@ 0xff
 801cf4c:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801cf4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf52:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cf56:	6818      	ldr	r0, [r3, #0]
 801cf58:	f7f4 fc0c 	bl	8011774 <vPortFree>
	         HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 801cf5c:	484c      	ldr	r0, [pc, #304]	@ (801d090 <uart_testing+0x344>)
 801cf5e:	f7ed ff9b 	bl	800ae98 <HAL_UART_DMAStop>
	         return response;
 801cf62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf66:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cf6a:	6819      	ldr	r1, [r3, #0]
 801cf6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf70:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cf74:	460b      	mov	r3, r1
 801cf76:	6810      	ldr	r0, [r2, #0]
 801cf78:	6018      	str	r0, [r3, #0]
 801cf7a:	8892      	ldrh	r2, [r2, #4]
 801cf7c:	809a      	strh	r2, [r3, #4]
 801cf7e:	e121      	b.n	801d1c4 <uart_testing+0x478>
	    }

	    if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801cf80:	4b49      	ldr	r3, [pc, #292]	@ (801d0a8 <uart_testing+0x35c>)
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7f2 f84b 	bl	800f024 <xQueueSemaphoreTake>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	2b01      	cmp	r3, #1
 801cf92:	d021      	beq.n	801cfd8 <uart_testing+0x28c>
	         printf("fail to get RxSemaphore\n\r");
 801cf94:	4845      	ldr	r0, [pc, #276]	@ (801d0ac <uart_testing+0x360>)
 801cf96:	f000 fa83 	bl	801d4a0 <iprintf>
	        response.test_result = TEST_FAIL;
 801cf9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf9e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cfa2:	22ff      	movs	r2, #255	@ 0xff
 801cfa4:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801cfa6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfaa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cfae:	6818      	ldr	r0, [r3, #0]
 801cfb0:	f7f4 fbe0 	bl	8011774 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); //Stop the stuck receive
 801cfb4:	4836      	ldr	r0, [pc, #216]	@ (801d090 <uart_testing+0x344>)
 801cfb6:	f7ed ff6f 	bl	800ae98 <HAL_UART_DMAStop>
	        return response;
 801cfba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfbe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cfc2:	6819      	ldr	r1, [r3, #0]
 801cfc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfc8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cfcc:	460b      	mov	r3, r1
 801cfce:	6810      	ldr	r0, [r2, #0]
 801cfd0:	6018      	str	r0, [r3, #0]
 801cfd2:	8892      	ldrh	r2, [r2, #4]
 801cfd4:	809a      	strh	r2, [r3, #4]
 801cfd6:	e0f5      	b.n	801d1c4 <uart_testing+0x478>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801cfd8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfdc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	799b      	ldrb	r3, [r3, #6]
 801cfe4:	2b64      	cmp	r3, #100	@ 0x64
 801cfe6:	d967      	bls.n	801d0b8 <uart_testing+0x36c>
			printf("bit_pattern_length more than 100\n\r");
 801cfe8:	4831      	ldr	r0, [pc, #196]	@ (801d0b0 <uart_testing+0x364>)
 801cfea:	f000 fa59 	bl	801d4a0 <iprintf>

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801cfee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cff2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	799b      	ldrb	r3, [r3, #6]
 801cffa:	461a      	mov	r2, r3
 801cffc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d000:	4611      	mov	r1, r2
 801d002:	4618      	mov	r0, r3
 801d004:	f7e4 f87a 	bl	80010fc <calculate_crc>
 801d008:	4603      	mov	r3, r0
 801d00a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d00e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d012:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	799b      	ldrb	r3, [r3, #6]
 801d01a:	461a      	mov	r2, r3
 801d01c:	f107 0310 	add.w	r3, r7, #16
 801d020:	4611      	mov	r1, r2
 801d022:	4618      	mov	r0, r3
 801d024:	f7e4 f86a 	bl	80010fc <calculate_crc>
 801d028:	4603      	mov	r3, r0
 801d02a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 801d02e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801d032:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801d036:	429a      	cmp	r2, r3
 801d038:	f000 808f 	beq.w	801d15a <uart_testing+0x40e>
				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
 801d03c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d040:	1c59      	adds	r1, r3, #1
 801d042:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801d046:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801d04a:	481a      	ldr	r0, [pc, #104]	@ (801d0b4 <uart_testing+0x368>)
 801d04c:	f000 fa28 	bl	801d4a0 <iprintf>
					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 801d050:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d054:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d058:	22ff      	movs	r2, #255	@ 0xff
 801d05a:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801d05c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d060:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d064:	6818      	ldr	r0, [r3, #0]
 801d066:	f7f4 fb85 	bl	8011774 <vPortFree>
				return response;
 801d06a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d06e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d072:	6819      	ldr	r1, [r3, #0]
 801d074:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d078:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d07c:	460b      	mov	r3, r1
 801d07e:	6810      	ldr	r0, [r2, #0]
 801d080:	6018      	str	r0, [r3, #0]
 801d082:	8892      	ldrh	r2, [r2, #4]
 801d084:	809a      	strh	r2, [r3, #4]
 801d086:	e09d      	b.n	801d1c4 <uart_testing+0x478>
 801d088:	0802164c 	.word	0x0802164c
 801d08c:	08021684 	.word	0x08021684
 801d090:	200004a0 	.word	0x200004a0
 801d094:	080216a4 	.word	0x080216a4
 801d098:	20000528 	.word	0x20000528
 801d09c:	080216c4 	.word	0x080216c4
 801d0a0:	20000b30 	.word	0x20000b30
 801d0a4:	080216e8 	.word	0x080216e8
 801d0a8:	20000b2c 	.word	0x20000b2c
 801d0ac:	08021704 	.word	0x08021704
 801d0b0:	08021720 	.word	0x08021720
 801d0b4:	08021744 	.word	0x08021744
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d0b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	799b      	ldrb	r3, [r3, #6]
 801d0c4:	461a      	mov	r2, r3
 801d0c6:	f107 0110 	add.w	r1, r7, #16
 801d0ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f000 fa3b 	bl	801d54a <memcmp>
 801d0d4:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 801d0d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d03c      	beq.n	801d15a <uart_testing+0x40e>
				printf("Data mismatch on iteration %u.\n\r", i + 1);
 801d0e0:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	4619      	mov	r1, r3
 801d0e8:	483b      	ldr	r0, [pc, #236]	@ (801d1d8 <uart_testing+0x48c>)
 801d0ea:	f000 f9d9 	bl	801d4a0 <iprintf>
				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
 801d0ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0f2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	799b      	ldrb	r3, [r3, #6]
 801d0fa:	4619      	mov	r1, r3
 801d0fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d100:	461a      	mov	r2, r3
 801d102:	4836      	ldr	r0, [pc, #216]	@ (801d1dc <uart_testing+0x490>)
 801d104:	f000 f9cc 	bl	801d4a0 <iprintf>
				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
 801d108:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d10c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	799b      	ldrb	r3, [r3, #6]
 801d114:	4619      	mov	r1, r3
 801d116:	f107 0310 	add.w	r3, r7, #16
 801d11a:	461a      	mov	r2, r3
 801d11c:	4830      	ldr	r0, [pc, #192]	@ (801d1e0 <uart_testing+0x494>)
 801d11e:	f000 f9bf 	bl	801d4a0 <iprintf>
				response.test_result = TEST_FAIL;
 801d122:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d126:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d12a:	22ff      	movs	r2, #255	@ 0xff
 801d12c:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801d12e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d132:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d136:	6818      	ldr	r0, [r3, #0]
 801d138:	f7f4 fb1c 	bl	8011774 <vPortFree>
				return response;
 801d13c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d140:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d144:	6819      	ldr	r1, [r3, #0]
 801d146:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d14a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d14e:	460b      	mov	r3, r1
 801d150:	6810      	ldr	r0, [r2, #0]
 801d152:	6018      	str	r0, [r3, #0]
 801d154:	8892      	ldrh	r2, [r2, #4]
 801d156:	809a      	strh	r2, [r3, #4]
 801d158:	e034      	b.n	801d1c4 <uart_testing+0x478>
			}
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1);
 801d15a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d15e:	3301      	adds	r3, #1
 801d160:	4619      	mov	r1, r3
 801d162:	4820      	ldr	r0, [pc, #128]	@ (801d1e4 <uart_testing+0x498>)
 801d164:	f000 f99c 	bl	801d4a0 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801d168:	200a      	movs	r0, #10
 801d16a:	f7f0 fc7d 	bl	800da68 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d16e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d172:	3301      	adds	r3, #1
 801d174:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801d178:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d17c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	795b      	ldrb	r3, [r3, #5]
 801d184:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801d188:	429a      	cmp	r2, r3
 801d18a:	f4ff ae44 	bcc.w	801ce16 <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801d18e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d192:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d196:	2201      	movs	r2, #1
 801d198:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801d19a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d19e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d1a2:	6818      	ldr	r0, [r3, #0]
 801d1a4:	f7f4 fae6 	bl	8011774 <vPortFree>
    return response;
 801d1a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d1b0:	6819      	ldr	r1, [r3, #0]
 801d1b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1b6:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d1ba:	460b      	mov	r3, r1
 801d1bc:	6810      	ldr	r0, [r2, #0]
 801d1be:	6018      	str	r0, [r3, #0]
 801d1c0:	8892      	ldrh	r2, [r2, #4]
 801d1c2:	809a      	strh	r2, [r3, #4]
}
 801d1c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d1cc:	6818      	ldr	r0, [r3, #0]
 801d1ce:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801d1d2:	46bd      	mov	sp, r7
 801d1d4:	bd80      	pop	{r7, pc}
 801d1d6:	bf00      	nop
 801d1d8:	08021794 	.word	0x08021794
 801d1dc:	080217b8 	.word	0x080217b8
 801d1e0:	080217c8 	.word	0x080217c8
 801d1e4:	080217d8 	.word	0x080217d8

0801d1e8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b084      	sub	sp, #16
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681a      	ldr	r2, [r3, #0]
 801d1f8:	4b0e      	ldr	r3, [pc, #56]	@ (801d234 <HAL_UART_TxCpltCallback+0x4c>)
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	429a      	cmp	r2, r3
 801d1fe:	d10a      	bne.n	801d216 <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801d200:	4b0d      	ldr	r3, [pc, #52]	@ (801d238 <HAL_UART_TxCpltCallback+0x50>)
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	f107 020c 	add.w	r2, r7, #12
 801d208:	4611      	mov	r1, r2
 801d20a:	4618      	mov	r0, r3
 801d20c:	f7f1 fd89 	bl	800ed22 <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n\r");
 801d210:	480a      	ldr	r0, [pc, #40]	@ (801d23c <HAL_UART_TxCpltCallback+0x54>)
 801d212:	f000 f945 	bl	801d4a0 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d007      	beq.n	801d22c <HAL_UART_TxCpltCallback+0x44>
 801d21c:	4b08      	ldr	r3, [pc, #32]	@ (801d240 <HAL_UART_TxCpltCallback+0x58>)
 801d21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d222:	601a      	str	r2, [r3, #0]
 801d224:	f3bf 8f4f 	dsb	sy
 801d228:	f3bf 8f6f 	isb	sy

}
 801d22c:	bf00      	nop
 801d22e:	3710      	adds	r7, #16
 801d230:	46bd      	mov	sp, r7
 801d232:	bd80      	pop	{r7, pc}
 801d234:	20000528 	.word	0x20000528
 801d238:	20000b30 	.word	0x20000b30
 801d23c:	080217f8 	.word	0x080217f8
 801d240:	e000ed04 	.word	0xe000ed04

0801d244 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b084      	sub	sp, #16
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d24c:	2300      	movs	r3, #0
 801d24e:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	681a      	ldr	r2, [r3, #0]
 801d254:	4b0e      	ldr	r3, [pc, #56]	@ (801d290 <HAL_UART_RxCpltCallback+0x4c>)
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	429a      	cmp	r2, r3
 801d25a:	d10a      	bne.n	801d272 <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801d25c:	4b0d      	ldr	r3, [pc, #52]	@ (801d294 <HAL_UART_RxCpltCallback+0x50>)
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	f107 020c 	add.w	r2, r7, #12
 801d264:	4611      	mov	r1, r2
 801d266:	4618      	mov	r0, r3
 801d268:	f7f1 fd5b 	bl	800ed22 <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n\r");
 801d26c:	480a      	ldr	r0, [pc, #40]	@ (801d298 <HAL_UART_RxCpltCallback+0x54>)
 801d26e:	f000 f917 	bl	801d4a0 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d007      	beq.n	801d288 <HAL_UART_RxCpltCallback+0x44>
 801d278:	4b08      	ldr	r3, [pc, #32]	@ (801d29c <HAL_UART_RxCpltCallback+0x58>)
 801d27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d27e:	601a      	str	r2, [r3, #0]
 801d280:	f3bf 8f4f 	dsb	sy
 801d284:	f3bf 8f6f 	isb	sy
}
 801d288:	bf00      	nop
 801d28a:	3710      	adds	r7, #16
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}
 801d290:	200004a0 	.word	0x200004a0
 801d294:	20000b2c 	.word	0x20000b2c
 801d298:	08021824 	.word	0x08021824
 801d29c:	e000ed04 	.word	0xe000ed04

0801d2a0 <rand>:
 801d2a0:	4b16      	ldr	r3, [pc, #88]	@ (801d2fc <rand+0x5c>)
 801d2a2:	b510      	push	{r4, lr}
 801d2a4:	681c      	ldr	r4, [r3, #0]
 801d2a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d2a8:	b9b3      	cbnz	r3, 801d2d8 <rand+0x38>
 801d2aa:	2018      	movs	r0, #24
 801d2ac:	f000 faa8 	bl	801d800 <malloc>
 801d2b0:	4602      	mov	r2, r0
 801d2b2:	6320      	str	r0, [r4, #48]	@ 0x30
 801d2b4:	b920      	cbnz	r0, 801d2c0 <rand+0x20>
 801d2b6:	4b12      	ldr	r3, [pc, #72]	@ (801d300 <rand+0x60>)
 801d2b8:	4812      	ldr	r0, [pc, #72]	@ (801d304 <rand+0x64>)
 801d2ba:	2152      	movs	r1, #82	@ 0x52
 801d2bc:	f000 fa38 	bl	801d730 <__assert_func>
 801d2c0:	4911      	ldr	r1, [pc, #68]	@ (801d308 <rand+0x68>)
 801d2c2:	4b12      	ldr	r3, [pc, #72]	@ (801d30c <rand+0x6c>)
 801d2c4:	e9c0 1300 	strd	r1, r3, [r0]
 801d2c8:	4b11      	ldr	r3, [pc, #68]	@ (801d310 <rand+0x70>)
 801d2ca:	6083      	str	r3, [r0, #8]
 801d2cc:	230b      	movs	r3, #11
 801d2ce:	8183      	strh	r3, [r0, #12]
 801d2d0:	2100      	movs	r1, #0
 801d2d2:	2001      	movs	r0, #1
 801d2d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d2d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d2da:	480e      	ldr	r0, [pc, #56]	@ (801d314 <rand+0x74>)
 801d2dc:	690b      	ldr	r3, [r1, #16]
 801d2de:	694c      	ldr	r4, [r1, #20]
 801d2e0:	4a0d      	ldr	r2, [pc, #52]	@ (801d318 <rand+0x78>)
 801d2e2:	4358      	muls	r0, r3
 801d2e4:	fb02 0004 	mla	r0, r2, r4, r0
 801d2e8:	fba3 3202 	umull	r3, r2, r3, r2
 801d2ec:	3301      	adds	r3, #1
 801d2ee:	eb40 0002 	adc.w	r0, r0, r2
 801d2f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d2f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d2fa:	bd10      	pop	{r4, pc}
 801d2fc:	2000003c 	.word	0x2000003c
 801d300:	08021ab6 	.word	0x08021ab6
 801d304:	08021acd 	.word	0x08021acd
 801d308:	abcd330e 	.word	0xabcd330e
 801d30c:	e66d1234 	.word	0xe66d1234
 801d310:	0005deec 	.word	0x0005deec
 801d314:	5851f42d 	.word	0x5851f42d
 801d318:	4c957f2d 	.word	0x4c957f2d

0801d31c <std>:
 801d31c:	2300      	movs	r3, #0
 801d31e:	b510      	push	{r4, lr}
 801d320:	4604      	mov	r4, r0
 801d322:	e9c0 3300 	strd	r3, r3, [r0]
 801d326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d32a:	6083      	str	r3, [r0, #8]
 801d32c:	8181      	strh	r1, [r0, #12]
 801d32e:	6643      	str	r3, [r0, #100]	@ 0x64
 801d330:	81c2      	strh	r2, [r0, #14]
 801d332:	6183      	str	r3, [r0, #24]
 801d334:	4619      	mov	r1, r3
 801d336:	2208      	movs	r2, #8
 801d338:	305c      	adds	r0, #92	@ 0x5c
 801d33a:	f000 f916 	bl	801d56a <memset>
 801d33e:	4b0d      	ldr	r3, [pc, #52]	@ (801d374 <std+0x58>)
 801d340:	6263      	str	r3, [r4, #36]	@ 0x24
 801d342:	4b0d      	ldr	r3, [pc, #52]	@ (801d378 <std+0x5c>)
 801d344:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d346:	4b0d      	ldr	r3, [pc, #52]	@ (801d37c <std+0x60>)
 801d348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d34a:	4b0d      	ldr	r3, [pc, #52]	@ (801d380 <std+0x64>)
 801d34c:	6323      	str	r3, [r4, #48]	@ 0x30
 801d34e:	4b0d      	ldr	r3, [pc, #52]	@ (801d384 <std+0x68>)
 801d350:	6224      	str	r4, [r4, #32]
 801d352:	429c      	cmp	r4, r3
 801d354:	d006      	beq.n	801d364 <std+0x48>
 801d356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d35a:	4294      	cmp	r4, r2
 801d35c:	d002      	beq.n	801d364 <std+0x48>
 801d35e:	33d0      	adds	r3, #208	@ 0xd0
 801d360:	429c      	cmp	r4, r3
 801d362:	d105      	bne.n	801d370 <std+0x54>
 801d364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d36c:	f000 b9ce 	b.w	801d70c <__retarget_lock_init_recursive>
 801d370:	bd10      	pop	{r4, pc}
 801d372:	bf00      	nop
 801d374:	0801d4c5 	.word	0x0801d4c5
 801d378:	0801d4e7 	.word	0x0801d4e7
 801d37c:	0801d51f 	.word	0x0801d51f
 801d380:	0801d543 	.word	0x0801d543
 801d384:	2002768c 	.word	0x2002768c

0801d388 <stdio_exit_handler>:
 801d388:	4a02      	ldr	r2, [pc, #8]	@ (801d394 <stdio_exit_handler+0xc>)
 801d38a:	4903      	ldr	r1, [pc, #12]	@ (801d398 <stdio_exit_handler+0x10>)
 801d38c:	4803      	ldr	r0, [pc, #12]	@ (801d39c <stdio_exit_handler+0x14>)
 801d38e:	f000 b869 	b.w	801d464 <_fwalk_sglue>
 801d392:	bf00      	nop
 801d394:	20000030 	.word	0x20000030
 801d398:	0801e011 	.word	0x0801e011
 801d39c:	20000040 	.word	0x20000040

0801d3a0 <cleanup_stdio>:
 801d3a0:	6841      	ldr	r1, [r0, #4]
 801d3a2:	4b0c      	ldr	r3, [pc, #48]	@ (801d3d4 <cleanup_stdio+0x34>)
 801d3a4:	4299      	cmp	r1, r3
 801d3a6:	b510      	push	{r4, lr}
 801d3a8:	4604      	mov	r4, r0
 801d3aa:	d001      	beq.n	801d3b0 <cleanup_stdio+0x10>
 801d3ac:	f000 fe30 	bl	801e010 <_fflush_r>
 801d3b0:	68a1      	ldr	r1, [r4, #8]
 801d3b2:	4b09      	ldr	r3, [pc, #36]	@ (801d3d8 <cleanup_stdio+0x38>)
 801d3b4:	4299      	cmp	r1, r3
 801d3b6:	d002      	beq.n	801d3be <cleanup_stdio+0x1e>
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	f000 fe29 	bl	801e010 <_fflush_r>
 801d3be:	68e1      	ldr	r1, [r4, #12]
 801d3c0:	4b06      	ldr	r3, [pc, #24]	@ (801d3dc <cleanup_stdio+0x3c>)
 801d3c2:	4299      	cmp	r1, r3
 801d3c4:	d004      	beq.n	801d3d0 <cleanup_stdio+0x30>
 801d3c6:	4620      	mov	r0, r4
 801d3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3cc:	f000 be20 	b.w	801e010 <_fflush_r>
 801d3d0:	bd10      	pop	{r4, pc}
 801d3d2:	bf00      	nop
 801d3d4:	2002768c 	.word	0x2002768c
 801d3d8:	200276f4 	.word	0x200276f4
 801d3dc:	2002775c 	.word	0x2002775c

0801d3e0 <global_stdio_init.part.0>:
 801d3e0:	b510      	push	{r4, lr}
 801d3e2:	4b0b      	ldr	r3, [pc, #44]	@ (801d410 <global_stdio_init.part.0+0x30>)
 801d3e4:	4c0b      	ldr	r4, [pc, #44]	@ (801d414 <global_stdio_init.part.0+0x34>)
 801d3e6:	4a0c      	ldr	r2, [pc, #48]	@ (801d418 <global_stdio_init.part.0+0x38>)
 801d3e8:	601a      	str	r2, [r3, #0]
 801d3ea:	4620      	mov	r0, r4
 801d3ec:	2200      	movs	r2, #0
 801d3ee:	2104      	movs	r1, #4
 801d3f0:	f7ff ff94 	bl	801d31c <std>
 801d3f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d3f8:	2201      	movs	r2, #1
 801d3fa:	2109      	movs	r1, #9
 801d3fc:	f7ff ff8e 	bl	801d31c <std>
 801d400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d404:	2202      	movs	r2, #2
 801d406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d40a:	2112      	movs	r1, #18
 801d40c:	f7ff bf86 	b.w	801d31c <std>
 801d410:	200277c4 	.word	0x200277c4
 801d414:	2002768c 	.word	0x2002768c
 801d418:	0801d389 	.word	0x0801d389

0801d41c <__sfp_lock_acquire>:
 801d41c:	4801      	ldr	r0, [pc, #4]	@ (801d424 <__sfp_lock_acquire+0x8>)
 801d41e:	f000 b976 	b.w	801d70e <__retarget_lock_acquire_recursive>
 801d422:	bf00      	nop
 801d424:	200277cd 	.word	0x200277cd

0801d428 <__sfp_lock_release>:
 801d428:	4801      	ldr	r0, [pc, #4]	@ (801d430 <__sfp_lock_release+0x8>)
 801d42a:	f000 b971 	b.w	801d710 <__retarget_lock_release_recursive>
 801d42e:	bf00      	nop
 801d430:	200277cd 	.word	0x200277cd

0801d434 <__sinit>:
 801d434:	b510      	push	{r4, lr}
 801d436:	4604      	mov	r4, r0
 801d438:	f7ff fff0 	bl	801d41c <__sfp_lock_acquire>
 801d43c:	6a23      	ldr	r3, [r4, #32]
 801d43e:	b11b      	cbz	r3, 801d448 <__sinit+0x14>
 801d440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d444:	f7ff bff0 	b.w	801d428 <__sfp_lock_release>
 801d448:	4b04      	ldr	r3, [pc, #16]	@ (801d45c <__sinit+0x28>)
 801d44a:	6223      	str	r3, [r4, #32]
 801d44c:	4b04      	ldr	r3, [pc, #16]	@ (801d460 <__sinit+0x2c>)
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d1f5      	bne.n	801d440 <__sinit+0xc>
 801d454:	f7ff ffc4 	bl	801d3e0 <global_stdio_init.part.0>
 801d458:	e7f2      	b.n	801d440 <__sinit+0xc>
 801d45a:	bf00      	nop
 801d45c:	0801d3a1 	.word	0x0801d3a1
 801d460:	200277c4 	.word	0x200277c4

0801d464 <_fwalk_sglue>:
 801d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d468:	4607      	mov	r7, r0
 801d46a:	4688      	mov	r8, r1
 801d46c:	4614      	mov	r4, r2
 801d46e:	2600      	movs	r6, #0
 801d470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d474:	f1b9 0901 	subs.w	r9, r9, #1
 801d478:	d505      	bpl.n	801d486 <_fwalk_sglue+0x22>
 801d47a:	6824      	ldr	r4, [r4, #0]
 801d47c:	2c00      	cmp	r4, #0
 801d47e:	d1f7      	bne.n	801d470 <_fwalk_sglue+0xc>
 801d480:	4630      	mov	r0, r6
 801d482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d486:	89ab      	ldrh	r3, [r5, #12]
 801d488:	2b01      	cmp	r3, #1
 801d48a:	d907      	bls.n	801d49c <_fwalk_sglue+0x38>
 801d48c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d490:	3301      	adds	r3, #1
 801d492:	d003      	beq.n	801d49c <_fwalk_sglue+0x38>
 801d494:	4629      	mov	r1, r5
 801d496:	4638      	mov	r0, r7
 801d498:	47c0      	blx	r8
 801d49a:	4306      	orrs	r6, r0
 801d49c:	3568      	adds	r5, #104	@ 0x68
 801d49e:	e7e9      	b.n	801d474 <_fwalk_sglue+0x10>

0801d4a0 <iprintf>:
 801d4a0:	b40f      	push	{r0, r1, r2, r3}
 801d4a2:	b507      	push	{r0, r1, r2, lr}
 801d4a4:	4906      	ldr	r1, [pc, #24]	@ (801d4c0 <iprintf+0x20>)
 801d4a6:	ab04      	add	r3, sp, #16
 801d4a8:	6808      	ldr	r0, [r1, #0]
 801d4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4ae:	6881      	ldr	r1, [r0, #8]
 801d4b0:	9301      	str	r3, [sp, #4]
 801d4b2:	f000 fa85 	bl	801d9c0 <_vfiprintf_r>
 801d4b6:	b003      	add	sp, #12
 801d4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4bc:	b004      	add	sp, #16
 801d4be:	4770      	bx	lr
 801d4c0:	2000003c 	.word	0x2000003c

0801d4c4 <__sread>:
 801d4c4:	b510      	push	{r4, lr}
 801d4c6:	460c      	mov	r4, r1
 801d4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4cc:	f000 f8d6 	bl	801d67c <_read_r>
 801d4d0:	2800      	cmp	r0, #0
 801d4d2:	bfab      	itete	ge
 801d4d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d4d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d4d8:	181b      	addge	r3, r3, r0
 801d4da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d4de:	bfac      	ite	ge
 801d4e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d4e2:	81a3      	strhlt	r3, [r4, #12]
 801d4e4:	bd10      	pop	{r4, pc}

0801d4e6 <__swrite>:
 801d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ea:	461f      	mov	r7, r3
 801d4ec:	898b      	ldrh	r3, [r1, #12]
 801d4ee:	05db      	lsls	r3, r3, #23
 801d4f0:	4605      	mov	r5, r0
 801d4f2:	460c      	mov	r4, r1
 801d4f4:	4616      	mov	r6, r2
 801d4f6:	d505      	bpl.n	801d504 <__swrite+0x1e>
 801d4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4fc:	2302      	movs	r3, #2
 801d4fe:	2200      	movs	r2, #0
 801d500:	f000 f8aa 	bl	801d658 <_lseek_r>
 801d504:	89a3      	ldrh	r3, [r4, #12]
 801d506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d50a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d50e:	81a3      	strh	r3, [r4, #12]
 801d510:	4632      	mov	r2, r6
 801d512:	463b      	mov	r3, r7
 801d514:	4628      	mov	r0, r5
 801d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d51a:	f000 b8c1 	b.w	801d6a0 <_write_r>

0801d51e <__sseek>:
 801d51e:	b510      	push	{r4, lr}
 801d520:	460c      	mov	r4, r1
 801d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d526:	f000 f897 	bl	801d658 <_lseek_r>
 801d52a:	1c43      	adds	r3, r0, #1
 801d52c:	89a3      	ldrh	r3, [r4, #12]
 801d52e:	bf15      	itete	ne
 801d530:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d53a:	81a3      	strheq	r3, [r4, #12]
 801d53c:	bf18      	it	ne
 801d53e:	81a3      	strhne	r3, [r4, #12]
 801d540:	bd10      	pop	{r4, pc}

0801d542 <__sclose>:
 801d542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d546:	f000 b819 	b.w	801d57c <_close_r>

0801d54a <memcmp>:
 801d54a:	b510      	push	{r4, lr}
 801d54c:	3901      	subs	r1, #1
 801d54e:	4402      	add	r2, r0
 801d550:	4290      	cmp	r0, r2
 801d552:	d101      	bne.n	801d558 <memcmp+0xe>
 801d554:	2000      	movs	r0, #0
 801d556:	e005      	b.n	801d564 <memcmp+0x1a>
 801d558:	7803      	ldrb	r3, [r0, #0]
 801d55a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d55e:	42a3      	cmp	r3, r4
 801d560:	d001      	beq.n	801d566 <memcmp+0x1c>
 801d562:	1b18      	subs	r0, r3, r4
 801d564:	bd10      	pop	{r4, pc}
 801d566:	3001      	adds	r0, #1
 801d568:	e7f2      	b.n	801d550 <memcmp+0x6>

0801d56a <memset>:
 801d56a:	4402      	add	r2, r0
 801d56c:	4603      	mov	r3, r0
 801d56e:	4293      	cmp	r3, r2
 801d570:	d100      	bne.n	801d574 <memset+0xa>
 801d572:	4770      	bx	lr
 801d574:	f803 1b01 	strb.w	r1, [r3], #1
 801d578:	e7f9      	b.n	801d56e <memset+0x4>
	...

0801d57c <_close_r>:
 801d57c:	b538      	push	{r3, r4, r5, lr}
 801d57e:	4d06      	ldr	r5, [pc, #24]	@ (801d598 <_close_r+0x1c>)
 801d580:	2300      	movs	r3, #0
 801d582:	4604      	mov	r4, r0
 801d584:	4608      	mov	r0, r1
 801d586:	602b      	str	r3, [r5, #0]
 801d588:	f7e4 fd3a 	bl	8002000 <_close>
 801d58c:	1c43      	adds	r3, r0, #1
 801d58e:	d102      	bne.n	801d596 <_close_r+0x1a>
 801d590:	682b      	ldr	r3, [r5, #0]
 801d592:	b103      	cbz	r3, 801d596 <_close_r+0x1a>
 801d594:	6023      	str	r3, [r4, #0]
 801d596:	bd38      	pop	{r3, r4, r5, pc}
 801d598:	200277c8 	.word	0x200277c8

0801d59c <_reclaim_reent>:
 801d59c:	4b2d      	ldr	r3, [pc, #180]	@ (801d654 <_reclaim_reent+0xb8>)
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	4283      	cmp	r3, r0
 801d5a2:	b570      	push	{r4, r5, r6, lr}
 801d5a4:	4604      	mov	r4, r0
 801d5a6:	d053      	beq.n	801d650 <_reclaim_reent+0xb4>
 801d5a8:	69c3      	ldr	r3, [r0, #28]
 801d5aa:	b31b      	cbz	r3, 801d5f4 <_reclaim_reent+0x58>
 801d5ac:	68db      	ldr	r3, [r3, #12]
 801d5ae:	b163      	cbz	r3, 801d5ca <_reclaim_reent+0x2e>
 801d5b0:	2500      	movs	r5, #0
 801d5b2:	69e3      	ldr	r3, [r4, #28]
 801d5b4:	68db      	ldr	r3, [r3, #12]
 801d5b6:	5959      	ldr	r1, [r3, r5]
 801d5b8:	b9b1      	cbnz	r1, 801d5e8 <_reclaim_reent+0x4c>
 801d5ba:	3504      	adds	r5, #4
 801d5bc:	2d80      	cmp	r5, #128	@ 0x80
 801d5be:	d1f8      	bne.n	801d5b2 <_reclaim_reent+0x16>
 801d5c0:	69e3      	ldr	r3, [r4, #28]
 801d5c2:	4620      	mov	r0, r4
 801d5c4:	68d9      	ldr	r1, [r3, #12]
 801d5c6:	f000 f8d1 	bl	801d76c <_free_r>
 801d5ca:	69e3      	ldr	r3, [r4, #28]
 801d5cc:	6819      	ldr	r1, [r3, #0]
 801d5ce:	b111      	cbz	r1, 801d5d6 <_reclaim_reent+0x3a>
 801d5d0:	4620      	mov	r0, r4
 801d5d2:	f000 f8cb 	bl	801d76c <_free_r>
 801d5d6:	69e3      	ldr	r3, [r4, #28]
 801d5d8:	689d      	ldr	r5, [r3, #8]
 801d5da:	b15d      	cbz	r5, 801d5f4 <_reclaim_reent+0x58>
 801d5dc:	4629      	mov	r1, r5
 801d5de:	4620      	mov	r0, r4
 801d5e0:	682d      	ldr	r5, [r5, #0]
 801d5e2:	f000 f8c3 	bl	801d76c <_free_r>
 801d5e6:	e7f8      	b.n	801d5da <_reclaim_reent+0x3e>
 801d5e8:	680e      	ldr	r6, [r1, #0]
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	f000 f8be 	bl	801d76c <_free_r>
 801d5f0:	4631      	mov	r1, r6
 801d5f2:	e7e1      	b.n	801d5b8 <_reclaim_reent+0x1c>
 801d5f4:	6961      	ldr	r1, [r4, #20]
 801d5f6:	b111      	cbz	r1, 801d5fe <_reclaim_reent+0x62>
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	f000 f8b7 	bl	801d76c <_free_r>
 801d5fe:	69e1      	ldr	r1, [r4, #28]
 801d600:	b111      	cbz	r1, 801d608 <_reclaim_reent+0x6c>
 801d602:	4620      	mov	r0, r4
 801d604:	f000 f8b2 	bl	801d76c <_free_r>
 801d608:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d60a:	b111      	cbz	r1, 801d612 <_reclaim_reent+0x76>
 801d60c:	4620      	mov	r0, r4
 801d60e:	f000 f8ad 	bl	801d76c <_free_r>
 801d612:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d614:	b111      	cbz	r1, 801d61c <_reclaim_reent+0x80>
 801d616:	4620      	mov	r0, r4
 801d618:	f000 f8a8 	bl	801d76c <_free_r>
 801d61c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d61e:	b111      	cbz	r1, 801d626 <_reclaim_reent+0x8a>
 801d620:	4620      	mov	r0, r4
 801d622:	f000 f8a3 	bl	801d76c <_free_r>
 801d626:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d628:	b111      	cbz	r1, 801d630 <_reclaim_reent+0x94>
 801d62a:	4620      	mov	r0, r4
 801d62c:	f000 f89e 	bl	801d76c <_free_r>
 801d630:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d632:	b111      	cbz	r1, 801d63a <_reclaim_reent+0x9e>
 801d634:	4620      	mov	r0, r4
 801d636:	f000 f899 	bl	801d76c <_free_r>
 801d63a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d63c:	b111      	cbz	r1, 801d644 <_reclaim_reent+0xa8>
 801d63e:	4620      	mov	r0, r4
 801d640:	f000 f894 	bl	801d76c <_free_r>
 801d644:	6a23      	ldr	r3, [r4, #32]
 801d646:	b11b      	cbz	r3, 801d650 <_reclaim_reent+0xb4>
 801d648:	4620      	mov	r0, r4
 801d64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d64e:	4718      	bx	r3
 801d650:	bd70      	pop	{r4, r5, r6, pc}
 801d652:	bf00      	nop
 801d654:	2000003c 	.word	0x2000003c

0801d658 <_lseek_r>:
 801d658:	b538      	push	{r3, r4, r5, lr}
 801d65a:	4d07      	ldr	r5, [pc, #28]	@ (801d678 <_lseek_r+0x20>)
 801d65c:	4604      	mov	r4, r0
 801d65e:	4608      	mov	r0, r1
 801d660:	4611      	mov	r1, r2
 801d662:	2200      	movs	r2, #0
 801d664:	602a      	str	r2, [r5, #0]
 801d666:	461a      	mov	r2, r3
 801d668:	f7e4 fcf1 	bl	800204e <_lseek>
 801d66c:	1c43      	adds	r3, r0, #1
 801d66e:	d102      	bne.n	801d676 <_lseek_r+0x1e>
 801d670:	682b      	ldr	r3, [r5, #0]
 801d672:	b103      	cbz	r3, 801d676 <_lseek_r+0x1e>
 801d674:	6023      	str	r3, [r4, #0]
 801d676:	bd38      	pop	{r3, r4, r5, pc}
 801d678:	200277c8 	.word	0x200277c8

0801d67c <_read_r>:
 801d67c:	b538      	push	{r3, r4, r5, lr}
 801d67e:	4d07      	ldr	r5, [pc, #28]	@ (801d69c <_read_r+0x20>)
 801d680:	4604      	mov	r4, r0
 801d682:	4608      	mov	r0, r1
 801d684:	4611      	mov	r1, r2
 801d686:	2200      	movs	r2, #0
 801d688:	602a      	str	r2, [r5, #0]
 801d68a:	461a      	mov	r2, r3
 801d68c:	f7e4 fc7f 	bl	8001f8e <_read>
 801d690:	1c43      	adds	r3, r0, #1
 801d692:	d102      	bne.n	801d69a <_read_r+0x1e>
 801d694:	682b      	ldr	r3, [r5, #0]
 801d696:	b103      	cbz	r3, 801d69a <_read_r+0x1e>
 801d698:	6023      	str	r3, [r4, #0]
 801d69a:	bd38      	pop	{r3, r4, r5, pc}
 801d69c:	200277c8 	.word	0x200277c8

0801d6a0 <_write_r>:
 801d6a0:	b538      	push	{r3, r4, r5, lr}
 801d6a2:	4d07      	ldr	r5, [pc, #28]	@ (801d6c0 <_write_r+0x20>)
 801d6a4:	4604      	mov	r4, r0
 801d6a6:	4608      	mov	r0, r1
 801d6a8:	4611      	mov	r1, r2
 801d6aa:	2200      	movs	r2, #0
 801d6ac:	602a      	str	r2, [r5, #0]
 801d6ae:	461a      	mov	r2, r3
 801d6b0:	f7e4 fc8a 	bl	8001fc8 <_write>
 801d6b4:	1c43      	adds	r3, r0, #1
 801d6b6:	d102      	bne.n	801d6be <_write_r+0x1e>
 801d6b8:	682b      	ldr	r3, [r5, #0]
 801d6ba:	b103      	cbz	r3, 801d6be <_write_r+0x1e>
 801d6bc:	6023      	str	r3, [r4, #0]
 801d6be:	bd38      	pop	{r3, r4, r5, pc}
 801d6c0:	200277c8 	.word	0x200277c8

0801d6c4 <__libc_init_array>:
 801d6c4:	b570      	push	{r4, r5, r6, lr}
 801d6c6:	4d0d      	ldr	r5, [pc, #52]	@ (801d6fc <__libc_init_array+0x38>)
 801d6c8:	4c0d      	ldr	r4, [pc, #52]	@ (801d700 <__libc_init_array+0x3c>)
 801d6ca:	1b64      	subs	r4, r4, r5
 801d6cc:	10a4      	asrs	r4, r4, #2
 801d6ce:	2600      	movs	r6, #0
 801d6d0:	42a6      	cmp	r6, r4
 801d6d2:	d109      	bne.n	801d6e8 <__libc_init_array+0x24>
 801d6d4:	4d0b      	ldr	r5, [pc, #44]	@ (801d704 <__libc_init_array+0x40>)
 801d6d6:	4c0c      	ldr	r4, [pc, #48]	@ (801d708 <__libc_init_array+0x44>)
 801d6d8:	f000 fe48 	bl	801e36c <_init>
 801d6dc:	1b64      	subs	r4, r4, r5
 801d6de:	10a4      	asrs	r4, r4, #2
 801d6e0:	2600      	movs	r6, #0
 801d6e2:	42a6      	cmp	r6, r4
 801d6e4:	d105      	bne.n	801d6f2 <__libc_init_array+0x2e>
 801d6e6:	bd70      	pop	{r4, r5, r6, pc}
 801d6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6ec:	4798      	blx	r3
 801d6ee:	3601      	adds	r6, #1
 801d6f0:	e7ee      	b.n	801d6d0 <__libc_init_array+0xc>
 801d6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6f6:	4798      	blx	r3
 801d6f8:	3601      	adds	r6, #1
 801d6fa:	e7f2      	b.n	801d6e2 <__libc_init_array+0x1e>
 801d6fc:	08021b9c 	.word	0x08021b9c
 801d700:	08021b9c 	.word	0x08021b9c
 801d704:	08021b9c 	.word	0x08021b9c
 801d708:	08021ba0 	.word	0x08021ba0

0801d70c <__retarget_lock_init_recursive>:
 801d70c:	4770      	bx	lr

0801d70e <__retarget_lock_acquire_recursive>:
 801d70e:	4770      	bx	lr

0801d710 <__retarget_lock_release_recursive>:
 801d710:	4770      	bx	lr

0801d712 <memcpy>:
 801d712:	440a      	add	r2, r1
 801d714:	4291      	cmp	r1, r2
 801d716:	f100 33ff 	add.w	r3, r0, #4294967295
 801d71a:	d100      	bne.n	801d71e <memcpy+0xc>
 801d71c:	4770      	bx	lr
 801d71e:	b510      	push	{r4, lr}
 801d720:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d724:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d728:	4291      	cmp	r1, r2
 801d72a:	d1f9      	bne.n	801d720 <memcpy+0xe>
 801d72c:	bd10      	pop	{r4, pc}
	...

0801d730 <__assert_func>:
 801d730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d732:	4614      	mov	r4, r2
 801d734:	461a      	mov	r2, r3
 801d736:	4b09      	ldr	r3, [pc, #36]	@ (801d75c <__assert_func+0x2c>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	4605      	mov	r5, r0
 801d73c:	68d8      	ldr	r0, [r3, #12]
 801d73e:	b14c      	cbz	r4, 801d754 <__assert_func+0x24>
 801d740:	4b07      	ldr	r3, [pc, #28]	@ (801d760 <__assert_func+0x30>)
 801d742:	9100      	str	r1, [sp, #0]
 801d744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d748:	4906      	ldr	r1, [pc, #24]	@ (801d764 <__assert_func+0x34>)
 801d74a:	462b      	mov	r3, r5
 801d74c:	f000 fc88 	bl	801e060 <fiprintf>
 801d750:	f000 fd3c 	bl	801e1cc <abort>
 801d754:	4b04      	ldr	r3, [pc, #16]	@ (801d768 <__assert_func+0x38>)
 801d756:	461c      	mov	r4, r3
 801d758:	e7f3      	b.n	801d742 <__assert_func+0x12>
 801d75a:	bf00      	nop
 801d75c:	2000003c 	.word	0x2000003c
 801d760:	08021b25 	.word	0x08021b25
 801d764:	08021b32 	.word	0x08021b32
 801d768:	08021b60 	.word	0x08021b60

0801d76c <_free_r>:
 801d76c:	b538      	push	{r3, r4, r5, lr}
 801d76e:	4605      	mov	r5, r0
 801d770:	2900      	cmp	r1, #0
 801d772:	d041      	beq.n	801d7f8 <_free_r+0x8c>
 801d774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d778:	1f0c      	subs	r4, r1, #4
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	bfb8      	it	lt
 801d77e:	18e4      	addlt	r4, r4, r3
 801d780:	f000 f8e8 	bl	801d954 <__malloc_lock>
 801d784:	4a1d      	ldr	r2, [pc, #116]	@ (801d7fc <_free_r+0x90>)
 801d786:	6813      	ldr	r3, [r2, #0]
 801d788:	b933      	cbnz	r3, 801d798 <_free_r+0x2c>
 801d78a:	6063      	str	r3, [r4, #4]
 801d78c:	6014      	str	r4, [r2, #0]
 801d78e:	4628      	mov	r0, r5
 801d790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d794:	f000 b8e4 	b.w	801d960 <__malloc_unlock>
 801d798:	42a3      	cmp	r3, r4
 801d79a:	d908      	bls.n	801d7ae <_free_r+0x42>
 801d79c:	6820      	ldr	r0, [r4, #0]
 801d79e:	1821      	adds	r1, r4, r0
 801d7a0:	428b      	cmp	r3, r1
 801d7a2:	bf01      	itttt	eq
 801d7a4:	6819      	ldreq	r1, [r3, #0]
 801d7a6:	685b      	ldreq	r3, [r3, #4]
 801d7a8:	1809      	addeq	r1, r1, r0
 801d7aa:	6021      	streq	r1, [r4, #0]
 801d7ac:	e7ed      	b.n	801d78a <_free_r+0x1e>
 801d7ae:	461a      	mov	r2, r3
 801d7b0:	685b      	ldr	r3, [r3, #4]
 801d7b2:	b10b      	cbz	r3, 801d7b8 <_free_r+0x4c>
 801d7b4:	42a3      	cmp	r3, r4
 801d7b6:	d9fa      	bls.n	801d7ae <_free_r+0x42>
 801d7b8:	6811      	ldr	r1, [r2, #0]
 801d7ba:	1850      	adds	r0, r2, r1
 801d7bc:	42a0      	cmp	r0, r4
 801d7be:	d10b      	bne.n	801d7d8 <_free_r+0x6c>
 801d7c0:	6820      	ldr	r0, [r4, #0]
 801d7c2:	4401      	add	r1, r0
 801d7c4:	1850      	adds	r0, r2, r1
 801d7c6:	4283      	cmp	r3, r0
 801d7c8:	6011      	str	r1, [r2, #0]
 801d7ca:	d1e0      	bne.n	801d78e <_free_r+0x22>
 801d7cc:	6818      	ldr	r0, [r3, #0]
 801d7ce:	685b      	ldr	r3, [r3, #4]
 801d7d0:	6053      	str	r3, [r2, #4]
 801d7d2:	4408      	add	r0, r1
 801d7d4:	6010      	str	r0, [r2, #0]
 801d7d6:	e7da      	b.n	801d78e <_free_r+0x22>
 801d7d8:	d902      	bls.n	801d7e0 <_free_r+0x74>
 801d7da:	230c      	movs	r3, #12
 801d7dc:	602b      	str	r3, [r5, #0]
 801d7de:	e7d6      	b.n	801d78e <_free_r+0x22>
 801d7e0:	6820      	ldr	r0, [r4, #0]
 801d7e2:	1821      	adds	r1, r4, r0
 801d7e4:	428b      	cmp	r3, r1
 801d7e6:	bf04      	itt	eq
 801d7e8:	6819      	ldreq	r1, [r3, #0]
 801d7ea:	685b      	ldreq	r3, [r3, #4]
 801d7ec:	6063      	str	r3, [r4, #4]
 801d7ee:	bf04      	itt	eq
 801d7f0:	1809      	addeq	r1, r1, r0
 801d7f2:	6021      	streq	r1, [r4, #0]
 801d7f4:	6054      	str	r4, [r2, #4]
 801d7f6:	e7ca      	b.n	801d78e <_free_r+0x22>
 801d7f8:	bd38      	pop	{r3, r4, r5, pc}
 801d7fa:	bf00      	nop
 801d7fc:	200277d4 	.word	0x200277d4

0801d800 <malloc>:
 801d800:	4b02      	ldr	r3, [pc, #8]	@ (801d80c <malloc+0xc>)
 801d802:	4601      	mov	r1, r0
 801d804:	6818      	ldr	r0, [r3, #0]
 801d806:	f000 b825 	b.w	801d854 <_malloc_r>
 801d80a:	bf00      	nop
 801d80c:	2000003c 	.word	0x2000003c

0801d810 <sbrk_aligned>:
 801d810:	b570      	push	{r4, r5, r6, lr}
 801d812:	4e0f      	ldr	r6, [pc, #60]	@ (801d850 <sbrk_aligned+0x40>)
 801d814:	460c      	mov	r4, r1
 801d816:	6831      	ldr	r1, [r6, #0]
 801d818:	4605      	mov	r5, r0
 801d81a:	b911      	cbnz	r1, 801d822 <sbrk_aligned+0x12>
 801d81c:	f000 fcc6 	bl	801e1ac <_sbrk_r>
 801d820:	6030      	str	r0, [r6, #0]
 801d822:	4621      	mov	r1, r4
 801d824:	4628      	mov	r0, r5
 801d826:	f000 fcc1 	bl	801e1ac <_sbrk_r>
 801d82a:	1c43      	adds	r3, r0, #1
 801d82c:	d103      	bne.n	801d836 <sbrk_aligned+0x26>
 801d82e:	f04f 34ff 	mov.w	r4, #4294967295
 801d832:	4620      	mov	r0, r4
 801d834:	bd70      	pop	{r4, r5, r6, pc}
 801d836:	1cc4      	adds	r4, r0, #3
 801d838:	f024 0403 	bic.w	r4, r4, #3
 801d83c:	42a0      	cmp	r0, r4
 801d83e:	d0f8      	beq.n	801d832 <sbrk_aligned+0x22>
 801d840:	1a21      	subs	r1, r4, r0
 801d842:	4628      	mov	r0, r5
 801d844:	f000 fcb2 	bl	801e1ac <_sbrk_r>
 801d848:	3001      	adds	r0, #1
 801d84a:	d1f2      	bne.n	801d832 <sbrk_aligned+0x22>
 801d84c:	e7ef      	b.n	801d82e <sbrk_aligned+0x1e>
 801d84e:	bf00      	nop
 801d850:	200277d0 	.word	0x200277d0

0801d854 <_malloc_r>:
 801d854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d858:	1ccd      	adds	r5, r1, #3
 801d85a:	f025 0503 	bic.w	r5, r5, #3
 801d85e:	3508      	adds	r5, #8
 801d860:	2d0c      	cmp	r5, #12
 801d862:	bf38      	it	cc
 801d864:	250c      	movcc	r5, #12
 801d866:	2d00      	cmp	r5, #0
 801d868:	4606      	mov	r6, r0
 801d86a:	db01      	blt.n	801d870 <_malloc_r+0x1c>
 801d86c:	42a9      	cmp	r1, r5
 801d86e:	d904      	bls.n	801d87a <_malloc_r+0x26>
 801d870:	230c      	movs	r3, #12
 801d872:	6033      	str	r3, [r6, #0]
 801d874:	2000      	movs	r0, #0
 801d876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d87a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d950 <_malloc_r+0xfc>
 801d87e:	f000 f869 	bl	801d954 <__malloc_lock>
 801d882:	f8d8 3000 	ldr.w	r3, [r8]
 801d886:	461c      	mov	r4, r3
 801d888:	bb44      	cbnz	r4, 801d8dc <_malloc_r+0x88>
 801d88a:	4629      	mov	r1, r5
 801d88c:	4630      	mov	r0, r6
 801d88e:	f7ff ffbf 	bl	801d810 <sbrk_aligned>
 801d892:	1c43      	adds	r3, r0, #1
 801d894:	4604      	mov	r4, r0
 801d896:	d158      	bne.n	801d94a <_malloc_r+0xf6>
 801d898:	f8d8 4000 	ldr.w	r4, [r8]
 801d89c:	4627      	mov	r7, r4
 801d89e:	2f00      	cmp	r7, #0
 801d8a0:	d143      	bne.n	801d92a <_malloc_r+0xd6>
 801d8a2:	2c00      	cmp	r4, #0
 801d8a4:	d04b      	beq.n	801d93e <_malloc_r+0xea>
 801d8a6:	6823      	ldr	r3, [r4, #0]
 801d8a8:	4639      	mov	r1, r7
 801d8aa:	4630      	mov	r0, r6
 801d8ac:	eb04 0903 	add.w	r9, r4, r3
 801d8b0:	f000 fc7c 	bl	801e1ac <_sbrk_r>
 801d8b4:	4581      	cmp	r9, r0
 801d8b6:	d142      	bne.n	801d93e <_malloc_r+0xea>
 801d8b8:	6821      	ldr	r1, [r4, #0]
 801d8ba:	1a6d      	subs	r5, r5, r1
 801d8bc:	4629      	mov	r1, r5
 801d8be:	4630      	mov	r0, r6
 801d8c0:	f7ff ffa6 	bl	801d810 <sbrk_aligned>
 801d8c4:	3001      	adds	r0, #1
 801d8c6:	d03a      	beq.n	801d93e <_malloc_r+0xea>
 801d8c8:	6823      	ldr	r3, [r4, #0]
 801d8ca:	442b      	add	r3, r5
 801d8cc:	6023      	str	r3, [r4, #0]
 801d8ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d8d2:	685a      	ldr	r2, [r3, #4]
 801d8d4:	bb62      	cbnz	r2, 801d930 <_malloc_r+0xdc>
 801d8d6:	f8c8 7000 	str.w	r7, [r8]
 801d8da:	e00f      	b.n	801d8fc <_malloc_r+0xa8>
 801d8dc:	6822      	ldr	r2, [r4, #0]
 801d8de:	1b52      	subs	r2, r2, r5
 801d8e0:	d420      	bmi.n	801d924 <_malloc_r+0xd0>
 801d8e2:	2a0b      	cmp	r2, #11
 801d8e4:	d917      	bls.n	801d916 <_malloc_r+0xc2>
 801d8e6:	1961      	adds	r1, r4, r5
 801d8e8:	42a3      	cmp	r3, r4
 801d8ea:	6025      	str	r5, [r4, #0]
 801d8ec:	bf18      	it	ne
 801d8ee:	6059      	strne	r1, [r3, #4]
 801d8f0:	6863      	ldr	r3, [r4, #4]
 801d8f2:	bf08      	it	eq
 801d8f4:	f8c8 1000 	streq.w	r1, [r8]
 801d8f8:	5162      	str	r2, [r4, r5]
 801d8fa:	604b      	str	r3, [r1, #4]
 801d8fc:	4630      	mov	r0, r6
 801d8fe:	f000 f82f 	bl	801d960 <__malloc_unlock>
 801d902:	f104 000b 	add.w	r0, r4, #11
 801d906:	1d23      	adds	r3, r4, #4
 801d908:	f020 0007 	bic.w	r0, r0, #7
 801d90c:	1ac2      	subs	r2, r0, r3
 801d90e:	bf1c      	itt	ne
 801d910:	1a1b      	subne	r3, r3, r0
 801d912:	50a3      	strne	r3, [r4, r2]
 801d914:	e7af      	b.n	801d876 <_malloc_r+0x22>
 801d916:	6862      	ldr	r2, [r4, #4]
 801d918:	42a3      	cmp	r3, r4
 801d91a:	bf0c      	ite	eq
 801d91c:	f8c8 2000 	streq.w	r2, [r8]
 801d920:	605a      	strne	r2, [r3, #4]
 801d922:	e7eb      	b.n	801d8fc <_malloc_r+0xa8>
 801d924:	4623      	mov	r3, r4
 801d926:	6864      	ldr	r4, [r4, #4]
 801d928:	e7ae      	b.n	801d888 <_malloc_r+0x34>
 801d92a:	463c      	mov	r4, r7
 801d92c:	687f      	ldr	r7, [r7, #4]
 801d92e:	e7b6      	b.n	801d89e <_malloc_r+0x4a>
 801d930:	461a      	mov	r2, r3
 801d932:	685b      	ldr	r3, [r3, #4]
 801d934:	42a3      	cmp	r3, r4
 801d936:	d1fb      	bne.n	801d930 <_malloc_r+0xdc>
 801d938:	2300      	movs	r3, #0
 801d93a:	6053      	str	r3, [r2, #4]
 801d93c:	e7de      	b.n	801d8fc <_malloc_r+0xa8>
 801d93e:	230c      	movs	r3, #12
 801d940:	6033      	str	r3, [r6, #0]
 801d942:	4630      	mov	r0, r6
 801d944:	f000 f80c 	bl	801d960 <__malloc_unlock>
 801d948:	e794      	b.n	801d874 <_malloc_r+0x20>
 801d94a:	6005      	str	r5, [r0, #0]
 801d94c:	e7d6      	b.n	801d8fc <_malloc_r+0xa8>
 801d94e:	bf00      	nop
 801d950:	200277d4 	.word	0x200277d4

0801d954 <__malloc_lock>:
 801d954:	4801      	ldr	r0, [pc, #4]	@ (801d95c <__malloc_lock+0x8>)
 801d956:	f7ff beda 	b.w	801d70e <__retarget_lock_acquire_recursive>
 801d95a:	bf00      	nop
 801d95c:	200277cc 	.word	0x200277cc

0801d960 <__malloc_unlock>:
 801d960:	4801      	ldr	r0, [pc, #4]	@ (801d968 <__malloc_unlock+0x8>)
 801d962:	f7ff bed5 	b.w	801d710 <__retarget_lock_release_recursive>
 801d966:	bf00      	nop
 801d968:	200277cc 	.word	0x200277cc

0801d96c <__sfputc_r>:
 801d96c:	6893      	ldr	r3, [r2, #8]
 801d96e:	3b01      	subs	r3, #1
 801d970:	2b00      	cmp	r3, #0
 801d972:	b410      	push	{r4}
 801d974:	6093      	str	r3, [r2, #8]
 801d976:	da08      	bge.n	801d98a <__sfputc_r+0x1e>
 801d978:	6994      	ldr	r4, [r2, #24]
 801d97a:	42a3      	cmp	r3, r4
 801d97c:	db01      	blt.n	801d982 <__sfputc_r+0x16>
 801d97e:	290a      	cmp	r1, #10
 801d980:	d103      	bne.n	801d98a <__sfputc_r+0x1e>
 801d982:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d986:	f000 bb7d 	b.w	801e084 <__swbuf_r>
 801d98a:	6813      	ldr	r3, [r2, #0]
 801d98c:	1c58      	adds	r0, r3, #1
 801d98e:	6010      	str	r0, [r2, #0]
 801d990:	7019      	strb	r1, [r3, #0]
 801d992:	4608      	mov	r0, r1
 801d994:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d998:	4770      	bx	lr

0801d99a <__sfputs_r>:
 801d99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d99c:	4606      	mov	r6, r0
 801d99e:	460f      	mov	r7, r1
 801d9a0:	4614      	mov	r4, r2
 801d9a2:	18d5      	adds	r5, r2, r3
 801d9a4:	42ac      	cmp	r4, r5
 801d9a6:	d101      	bne.n	801d9ac <__sfputs_r+0x12>
 801d9a8:	2000      	movs	r0, #0
 801d9aa:	e007      	b.n	801d9bc <__sfputs_r+0x22>
 801d9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9b0:	463a      	mov	r2, r7
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	f7ff ffda 	bl	801d96c <__sfputc_r>
 801d9b8:	1c43      	adds	r3, r0, #1
 801d9ba:	d1f3      	bne.n	801d9a4 <__sfputs_r+0xa>
 801d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d9c0 <_vfiprintf_r>:
 801d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c4:	460d      	mov	r5, r1
 801d9c6:	b09d      	sub	sp, #116	@ 0x74
 801d9c8:	4614      	mov	r4, r2
 801d9ca:	4698      	mov	r8, r3
 801d9cc:	4606      	mov	r6, r0
 801d9ce:	b118      	cbz	r0, 801d9d8 <_vfiprintf_r+0x18>
 801d9d0:	6a03      	ldr	r3, [r0, #32]
 801d9d2:	b90b      	cbnz	r3, 801d9d8 <_vfiprintf_r+0x18>
 801d9d4:	f7ff fd2e 	bl	801d434 <__sinit>
 801d9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d9da:	07d9      	lsls	r1, r3, #31
 801d9dc:	d405      	bmi.n	801d9ea <_vfiprintf_r+0x2a>
 801d9de:	89ab      	ldrh	r3, [r5, #12]
 801d9e0:	059a      	lsls	r2, r3, #22
 801d9e2:	d402      	bmi.n	801d9ea <_vfiprintf_r+0x2a>
 801d9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d9e6:	f7ff fe92 	bl	801d70e <__retarget_lock_acquire_recursive>
 801d9ea:	89ab      	ldrh	r3, [r5, #12]
 801d9ec:	071b      	lsls	r3, r3, #28
 801d9ee:	d501      	bpl.n	801d9f4 <_vfiprintf_r+0x34>
 801d9f0:	692b      	ldr	r3, [r5, #16]
 801d9f2:	b99b      	cbnz	r3, 801da1c <_vfiprintf_r+0x5c>
 801d9f4:	4629      	mov	r1, r5
 801d9f6:	4630      	mov	r0, r6
 801d9f8:	f000 fb82 	bl	801e100 <__swsetup_r>
 801d9fc:	b170      	cbz	r0, 801da1c <_vfiprintf_r+0x5c>
 801d9fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da00:	07dc      	lsls	r4, r3, #31
 801da02:	d504      	bpl.n	801da0e <_vfiprintf_r+0x4e>
 801da04:	f04f 30ff 	mov.w	r0, #4294967295
 801da08:	b01d      	add	sp, #116	@ 0x74
 801da0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da0e:	89ab      	ldrh	r3, [r5, #12]
 801da10:	0598      	lsls	r0, r3, #22
 801da12:	d4f7      	bmi.n	801da04 <_vfiprintf_r+0x44>
 801da14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801da16:	f7ff fe7b 	bl	801d710 <__retarget_lock_release_recursive>
 801da1a:	e7f3      	b.n	801da04 <_vfiprintf_r+0x44>
 801da1c:	2300      	movs	r3, #0
 801da1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801da20:	2320      	movs	r3, #32
 801da22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801da26:	f8cd 800c 	str.w	r8, [sp, #12]
 801da2a:	2330      	movs	r3, #48	@ 0x30
 801da2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dbdc <_vfiprintf_r+0x21c>
 801da30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801da34:	f04f 0901 	mov.w	r9, #1
 801da38:	4623      	mov	r3, r4
 801da3a:	469a      	mov	sl, r3
 801da3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da40:	b10a      	cbz	r2, 801da46 <_vfiprintf_r+0x86>
 801da42:	2a25      	cmp	r2, #37	@ 0x25
 801da44:	d1f9      	bne.n	801da3a <_vfiprintf_r+0x7a>
 801da46:	ebba 0b04 	subs.w	fp, sl, r4
 801da4a:	d00b      	beq.n	801da64 <_vfiprintf_r+0xa4>
 801da4c:	465b      	mov	r3, fp
 801da4e:	4622      	mov	r2, r4
 801da50:	4629      	mov	r1, r5
 801da52:	4630      	mov	r0, r6
 801da54:	f7ff ffa1 	bl	801d99a <__sfputs_r>
 801da58:	3001      	adds	r0, #1
 801da5a:	f000 80a7 	beq.w	801dbac <_vfiprintf_r+0x1ec>
 801da5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da60:	445a      	add	r2, fp
 801da62:	9209      	str	r2, [sp, #36]	@ 0x24
 801da64:	f89a 3000 	ldrb.w	r3, [sl]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	f000 809f 	beq.w	801dbac <_vfiprintf_r+0x1ec>
 801da6e:	2300      	movs	r3, #0
 801da70:	f04f 32ff 	mov.w	r2, #4294967295
 801da74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da78:	f10a 0a01 	add.w	sl, sl, #1
 801da7c:	9304      	str	r3, [sp, #16]
 801da7e:	9307      	str	r3, [sp, #28]
 801da80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801da84:	931a      	str	r3, [sp, #104]	@ 0x68
 801da86:	4654      	mov	r4, sl
 801da88:	2205      	movs	r2, #5
 801da8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da8e:	4853      	ldr	r0, [pc, #332]	@ (801dbdc <_vfiprintf_r+0x21c>)
 801da90:	f7e2 fbbe 	bl	8000210 <memchr>
 801da94:	9a04      	ldr	r2, [sp, #16]
 801da96:	b9d8      	cbnz	r0, 801dad0 <_vfiprintf_r+0x110>
 801da98:	06d1      	lsls	r1, r2, #27
 801da9a:	bf44      	itt	mi
 801da9c:	2320      	movmi	r3, #32
 801da9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801daa2:	0713      	lsls	r3, r2, #28
 801daa4:	bf44      	itt	mi
 801daa6:	232b      	movmi	r3, #43	@ 0x2b
 801daa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801daac:	f89a 3000 	ldrb.w	r3, [sl]
 801dab0:	2b2a      	cmp	r3, #42	@ 0x2a
 801dab2:	d015      	beq.n	801dae0 <_vfiprintf_r+0x120>
 801dab4:	9a07      	ldr	r2, [sp, #28]
 801dab6:	4654      	mov	r4, sl
 801dab8:	2000      	movs	r0, #0
 801daba:	f04f 0c0a 	mov.w	ip, #10
 801dabe:	4621      	mov	r1, r4
 801dac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dac4:	3b30      	subs	r3, #48	@ 0x30
 801dac6:	2b09      	cmp	r3, #9
 801dac8:	d94b      	bls.n	801db62 <_vfiprintf_r+0x1a2>
 801daca:	b1b0      	cbz	r0, 801dafa <_vfiprintf_r+0x13a>
 801dacc:	9207      	str	r2, [sp, #28]
 801dace:	e014      	b.n	801dafa <_vfiprintf_r+0x13a>
 801dad0:	eba0 0308 	sub.w	r3, r0, r8
 801dad4:	fa09 f303 	lsl.w	r3, r9, r3
 801dad8:	4313      	orrs	r3, r2
 801dada:	9304      	str	r3, [sp, #16]
 801dadc:	46a2      	mov	sl, r4
 801dade:	e7d2      	b.n	801da86 <_vfiprintf_r+0xc6>
 801dae0:	9b03      	ldr	r3, [sp, #12]
 801dae2:	1d19      	adds	r1, r3, #4
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	9103      	str	r1, [sp, #12]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	bfbb      	ittet	lt
 801daec:	425b      	neglt	r3, r3
 801daee:	f042 0202 	orrlt.w	r2, r2, #2
 801daf2:	9307      	strge	r3, [sp, #28]
 801daf4:	9307      	strlt	r3, [sp, #28]
 801daf6:	bfb8      	it	lt
 801daf8:	9204      	strlt	r2, [sp, #16]
 801dafa:	7823      	ldrb	r3, [r4, #0]
 801dafc:	2b2e      	cmp	r3, #46	@ 0x2e
 801dafe:	d10a      	bne.n	801db16 <_vfiprintf_r+0x156>
 801db00:	7863      	ldrb	r3, [r4, #1]
 801db02:	2b2a      	cmp	r3, #42	@ 0x2a
 801db04:	d132      	bne.n	801db6c <_vfiprintf_r+0x1ac>
 801db06:	9b03      	ldr	r3, [sp, #12]
 801db08:	1d1a      	adds	r2, r3, #4
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	9203      	str	r2, [sp, #12]
 801db0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801db12:	3402      	adds	r4, #2
 801db14:	9305      	str	r3, [sp, #20]
 801db16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dbec <_vfiprintf_r+0x22c>
 801db1a:	7821      	ldrb	r1, [r4, #0]
 801db1c:	2203      	movs	r2, #3
 801db1e:	4650      	mov	r0, sl
 801db20:	f7e2 fb76 	bl	8000210 <memchr>
 801db24:	b138      	cbz	r0, 801db36 <_vfiprintf_r+0x176>
 801db26:	9b04      	ldr	r3, [sp, #16]
 801db28:	eba0 000a 	sub.w	r0, r0, sl
 801db2c:	2240      	movs	r2, #64	@ 0x40
 801db2e:	4082      	lsls	r2, r0
 801db30:	4313      	orrs	r3, r2
 801db32:	3401      	adds	r4, #1
 801db34:	9304      	str	r3, [sp, #16]
 801db36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db3a:	4829      	ldr	r0, [pc, #164]	@ (801dbe0 <_vfiprintf_r+0x220>)
 801db3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801db40:	2206      	movs	r2, #6
 801db42:	f7e2 fb65 	bl	8000210 <memchr>
 801db46:	2800      	cmp	r0, #0
 801db48:	d03f      	beq.n	801dbca <_vfiprintf_r+0x20a>
 801db4a:	4b26      	ldr	r3, [pc, #152]	@ (801dbe4 <_vfiprintf_r+0x224>)
 801db4c:	bb1b      	cbnz	r3, 801db96 <_vfiprintf_r+0x1d6>
 801db4e:	9b03      	ldr	r3, [sp, #12]
 801db50:	3307      	adds	r3, #7
 801db52:	f023 0307 	bic.w	r3, r3, #7
 801db56:	3308      	adds	r3, #8
 801db58:	9303      	str	r3, [sp, #12]
 801db5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db5c:	443b      	add	r3, r7
 801db5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801db60:	e76a      	b.n	801da38 <_vfiprintf_r+0x78>
 801db62:	fb0c 3202 	mla	r2, ip, r2, r3
 801db66:	460c      	mov	r4, r1
 801db68:	2001      	movs	r0, #1
 801db6a:	e7a8      	b.n	801dabe <_vfiprintf_r+0xfe>
 801db6c:	2300      	movs	r3, #0
 801db6e:	3401      	adds	r4, #1
 801db70:	9305      	str	r3, [sp, #20]
 801db72:	4619      	mov	r1, r3
 801db74:	f04f 0c0a 	mov.w	ip, #10
 801db78:	4620      	mov	r0, r4
 801db7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db7e:	3a30      	subs	r2, #48	@ 0x30
 801db80:	2a09      	cmp	r2, #9
 801db82:	d903      	bls.n	801db8c <_vfiprintf_r+0x1cc>
 801db84:	2b00      	cmp	r3, #0
 801db86:	d0c6      	beq.n	801db16 <_vfiprintf_r+0x156>
 801db88:	9105      	str	r1, [sp, #20]
 801db8a:	e7c4      	b.n	801db16 <_vfiprintf_r+0x156>
 801db8c:	fb0c 2101 	mla	r1, ip, r1, r2
 801db90:	4604      	mov	r4, r0
 801db92:	2301      	movs	r3, #1
 801db94:	e7f0      	b.n	801db78 <_vfiprintf_r+0x1b8>
 801db96:	ab03      	add	r3, sp, #12
 801db98:	9300      	str	r3, [sp, #0]
 801db9a:	462a      	mov	r2, r5
 801db9c:	4b12      	ldr	r3, [pc, #72]	@ (801dbe8 <_vfiprintf_r+0x228>)
 801db9e:	a904      	add	r1, sp, #16
 801dba0:	4630      	mov	r0, r6
 801dba2:	f3af 8000 	nop.w
 801dba6:	4607      	mov	r7, r0
 801dba8:	1c78      	adds	r0, r7, #1
 801dbaa:	d1d6      	bne.n	801db5a <_vfiprintf_r+0x19a>
 801dbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dbae:	07d9      	lsls	r1, r3, #31
 801dbb0:	d405      	bmi.n	801dbbe <_vfiprintf_r+0x1fe>
 801dbb2:	89ab      	ldrh	r3, [r5, #12]
 801dbb4:	059a      	lsls	r2, r3, #22
 801dbb6:	d402      	bmi.n	801dbbe <_vfiprintf_r+0x1fe>
 801dbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dbba:	f7ff fda9 	bl	801d710 <__retarget_lock_release_recursive>
 801dbbe:	89ab      	ldrh	r3, [r5, #12]
 801dbc0:	065b      	lsls	r3, r3, #25
 801dbc2:	f53f af1f 	bmi.w	801da04 <_vfiprintf_r+0x44>
 801dbc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dbc8:	e71e      	b.n	801da08 <_vfiprintf_r+0x48>
 801dbca:	ab03      	add	r3, sp, #12
 801dbcc:	9300      	str	r3, [sp, #0]
 801dbce:	462a      	mov	r2, r5
 801dbd0:	4b05      	ldr	r3, [pc, #20]	@ (801dbe8 <_vfiprintf_r+0x228>)
 801dbd2:	a904      	add	r1, sp, #16
 801dbd4:	4630      	mov	r0, r6
 801dbd6:	f000 f879 	bl	801dccc <_printf_i>
 801dbda:	e7e4      	b.n	801dba6 <_vfiprintf_r+0x1e6>
 801dbdc:	08021b61 	.word	0x08021b61
 801dbe0:	08021b6b 	.word	0x08021b6b
 801dbe4:	00000000 	.word	0x00000000
 801dbe8:	0801d99b 	.word	0x0801d99b
 801dbec:	08021b67 	.word	0x08021b67

0801dbf0 <_printf_common>:
 801dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbf4:	4616      	mov	r6, r2
 801dbf6:	4698      	mov	r8, r3
 801dbf8:	688a      	ldr	r2, [r1, #8]
 801dbfa:	690b      	ldr	r3, [r1, #16]
 801dbfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dc00:	4293      	cmp	r3, r2
 801dc02:	bfb8      	it	lt
 801dc04:	4613      	movlt	r3, r2
 801dc06:	6033      	str	r3, [r6, #0]
 801dc08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dc0c:	4607      	mov	r7, r0
 801dc0e:	460c      	mov	r4, r1
 801dc10:	b10a      	cbz	r2, 801dc16 <_printf_common+0x26>
 801dc12:	3301      	adds	r3, #1
 801dc14:	6033      	str	r3, [r6, #0]
 801dc16:	6823      	ldr	r3, [r4, #0]
 801dc18:	0699      	lsls	r1, r3, #26
 801dc1a:	bf42      	ittt	mi
 801dc1c:	6833      	ldrmi	r3, [r6, #0]
 801dc1e:	3302      	addmi	r3, #2
 801dc20:	6033      	strmi	r3, [r6, #0]
 801dc22:	6825      	ldr	r5, [r4, #0]
 801dc24:	f015 0506 	ands.w	r5, r5, #6
 801dc28:	d106      	bne.n	801dc38 <_printf_common+0x48>
 801dc2a:	f104 0a19 	add.w	sl, r4, #25
 801dc2e:	68e3      	ldr	r3, [r4, #12]
 801dc30:	6832      	ldr	r2, [r6, #0]
 801dc32:	1a9b      	subs	r3, r3, r2
 801dc34:	42ab      	cmp	r3, r5
 801dc36:	dc26      	bgt.n	801dc86 <_printf_common+0x96>
 801dc38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dc3c:	6822      	ldr	r2, [r4, #0]
 801dc3e:	3b00      	subs	r3, #0
 801dc40:	bf18      	it	ne
 801dc42:	2301      	movne	r3, #1
 801dc44:	0692      	lsls	r2, r2, #26
 801dc46:	d42b      	bmi.n	801dca0 <_printf_common+0xb0>
 801dc48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dc4c:	4641      	mov	r1, r8
 801dc4e:	4638      	mov	r0, r7
 801dc50:	47c8      	blx	r9
 801dc52:	3001      	adds	r0, #1
 801dc54:	d01e      	beq.n	801dc94 <_printf_common+0xa4>
 801dc56:	6823      	ldr	r3, [r4, #0]
 801dc58:	6922      	ldr	r2, [r4, #16]
 801dc5a:	f003 0306 	and.w	r3, r3, #6
 801dc5e:	2b04      	cmp	r3, #4
 801dc60:	bf02      	ittt	eq
 801dc62:	68e5      	ldreq	r5, [r4, #12]
 801dc64:	6833      	ldreq	r3, [r6, #0]
 801dc66:	1aed      	subeq	r5, r5, r3
 801dc68:	68a3      	ldr	r3, [r4, #8]
 801dc6a:	bf0c      	ite	eq
 801dc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc70:	2500      	movne	r5, #0
 801dc72:	4293      	cmp	r3, r2
 801dc74:	bfc4      	itt	gt
 801dc76:	1a9b      	subgt	r3, r3, r2
 801dc78:	18ed      	addgt	r5, r5, r3
 801dc7a:	2600      	movs	r6, #0
 801dc7c:	341a      	adds	r4, #26
 801dc7e:	42b5      	cmp	r5, r6
 801dc80:	d11a      	bne.n	801dcb8 <_printf_common+0xc8>
 801dc82:	2000      	movs	r0, #0
 801dc84:	e008      	b.n	801dc98 <_printf_common+0xa8>
 801dc86:	2301      	movs	r3, #1
 801dc88:	4652      	mov	r2, sl
 801dc8a:	4641      	mov	r1, r8
 801dc8c:	4638      	mov	r0, r7
 801dc8e:	47c8      	blx	r9
 801dc90:	3001      	adds	r0, #1
 801dc92:	d103      	bne.n	801dc9c <_printf_common+0xac>
 801dc94:	f04f 30ff 	mov.w	r0, #4294967295
 801dc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc9c:	3501      	adds	r5, #1
 801dc9e:	e7c6      	b.n	801dc2e <_printf_common+0x3e>
 801dca0:	18e1      	adds	r1, r4, r3
 801dca2:	1c5a      	adds	r2, r3, #1
 801dca4:	2030      	movs	r0, #48	@ 0x30
 801dca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dcaa:	4422      	add	r2, r4
 801dcac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dcb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dcb4:	3302      	adds	r3, #2
 801dcb6:	e7c7      	b.n	801dc48 <_printf_common+0x58>
 801dcb8:	2301      	movs	r3, #1
 801dcba:	4622      	mov	r2, r4
 801dcbc:	4641      	mov	r1, r8
 801dcbe:	4638      	mov	r0, r7
 801dcc0:	47c8      	blx	r9
 801dcc2:	3001      	adds	r0, #1
 801dcc4:	d0e6      	beq.n	801dc94 <_printf_common+0xa4>
 801dcc6:	3601      	adds	r6, #1
 801dcc8:	e7d9      	b.n	801dc7e <_printf_common+0x8e>
	...

0801dccc <_printf_i>:
 801dccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dcd0:	7e0f      	ldrb	r7, [r1, #24]
 801dcd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dcd4:	2f78      	cmp	r7, #120	@ 0x78
 801dcd6:	4691      	mov	r9, r2
 801dcd8:	4680      	mov	r8, r0
 801dcda:	460c      	mov	r4, r1
 801dcdc:	469a      	mov	sl, r3
 801dcde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dce2:	d807      	bhi.n	801dcf4 <_printf_i+0x28>
 801dce4:	2f62      	cmp	r7, #98	@ 0x62
 801dce6:	d80a      	bhi.n	801dcfe <_printf_i+0x32>
 801dce8:	2f00      	cmp	r7, #0
 801dcea:	f000 80d1 	beq.w	801de90 <_printf_i+0x1c4>
 801dcee:	2f58      	cmp	r7, #88	@ 0x58
 801dcf0:	f000 80b8 	beq.w	801de64 <_printf_i+0x198>
 801dcf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dcf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dcfc:	e03a      	b.n	801dd74 <_printf_i+0xa8>
 801dcfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dd02:	2b15      	cmp	r3, #21
 801dd04:	d8f6      	bhi.n	801dcf4 <_printf_i+0x28>
 801dd06:	a101      	add	r1, pc, #4	@ (adr r1, 801dd0c <_printf_i+0x40>)
 801dd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dd0c:	0801dd65 	.word	0x0801dd65
 801dd10:	0801dd79 	.word	0x0801dd79
 801dd14:	0801dcf5 	.word	0x0801dcf5
 801dd18:	0801dcf5 	.word	0x0801dcf5
 801dd1c:	0801dcf5 	.word	0x0801dcf5
 801dd20:	0801dcf5 	.word	0x0801dcf5
 801dd24:	0801dd79 	.word	0x0801dd79
 801dd28:	0801dcf5 	.word	0x0801dcf5
 801dd2c:	0801dcf5 	.word	0x0801dcf5
 801dd30:	0801dcf5 	.word	0x0801dcf5
 801dd34:	0801dcf5 	.word	0x0801dcf5
 801dd38:	0801de77 	.word	0x0801de77
 801dd3c:	0801dda3 	.word	0x0801dda3
 801dd40:	0801de31 	.word	0x0801de31
 801dd44:	0801dcf5 	.word	0x0801dcf5
 801dd48:	0801dcf5 	.word	0x0801dcf5
 801dd4c:	0801de99 	.word	0x0801de99
 801dd50:	0801dcf5 	.word	0x0801dcf5
 801dd54:	0801dda3 	.word	0x0801dda3
 801dd58:	0801dcf5 	.word	0x0801dcf5
 801dd5c:	0801dcf5 	.word	0x0801dcf5
 801dd60:	0801de39 	.word	0x0801de39
 801dd64:	6833      	ldr	r3, [r6, #0]
 801dd66:	1d1a      	adds	r2, r3, #4
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	6032      	str	r2, [r6, #0]
 801dd6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dd70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dd74:	2301      	movs	r3, #1
 801dd76:	e09c      	b.n	801deb2 <_printf_i+0x1e6>
 801dd78:	6833      	ldr	r3, [r6, #0]
 801dd7a:	6820      	ldr	r0, [r4, #0]
 801dd7c:	1d19      	adds	r1, r3, #4
 801dd7e:	6031      	str	r1, [r6, #0]
 801dd80:	0606      	lsls	r6, r0, #24
 801dd82:	d501      	bpl.n	801dd88 <_printf_i+0xbc>
 801dd84:	681d      	ldr	r5, [r3, #0]
 801dd86:	e003      	b.n	801dd90 <_printf_i+0xc4>
 801dd88:	0645      	lsls	r5, r0, #25
 801dd8a:	d5fb      	bpl.n	801dd84 <_printf_i+0xb8>
 801dd8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dd90:	2d00      	cmp	r5, #0
 801dd92:	da03      	bge.n	801dd9c <_printf_i+0xd0>
 801dd94:	232d      	movs	r3, #45	@ 0x2d
 801dd96:	426d      	negs	r5, r5
 801dd98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dd9c:	4858      	ldr	r0, [pc, #352]	@ (801df00 <_printf_i+0x234>)
 801dd9e:	230a      	movs	r3, #10
 801dda0:	e011      	b.n	801ddc6 <_printf_i+0xfa>
 801dda2:	6821      	ldr	r1, [r4, #0]
 801dda4:	6833      	ldr	r3, [r6, #0]
 801dda6:	0608      	lsls	r0, r1, #24
 801dda8:	f853 5b04 	ldr.w	r5, [r3], #4
 801ddac:	d402      	bmi.n	801ddb4 <_printf_i+0xe8>
 801ddae:	0649      	lsls	r1, r1, #25
 801ddb0:	bf48      	it	mi
 801ddb2:	b2ad      	uxthmi	r5, r5
 801ddb4:	2f6f      	cmp	r7, #111	@ 0x6f
 801ddb6:	4852      	ldr	r0, [pc, #328]	@ (801df00 <_printf_i+0x234>)
 801ddb8:	6033      	str	r3, [r6, #0]
 801ddba:	bf14      	ite	ne
 801ddbc:	230a      	movne	r3, #10
 801ddbe:	2308      	moveq	r3, #8
 801ddc0:	2100      	movs	r1, #0
 801ddc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ddc6:	6866      	ldr	r6, [r4, #4]
 801ddc8:	60a6      	str	r6, [r4, #8]
 801ddca:	2e00      	cmp	r6, #0
 801ddcc:	db05      	blt.n	801ddda <_printf_i+0x10e>
 801ddce:	6821      	ldr	r1, [r4, #0]
 801ddd0:	432e      	orrs	r6, r5
 801ddd2:	f021 0104 	bic.w	r1, r1, #4
 801ddd6:	6021      	str	r1, [r4, #0]
 801ddd8:	d04b      	beq.n	801de72 <_printf_i+0x1a6>
 801ddda:	4616      	mov	r6, r2
 801dddc:	fbb5 f1f3 	udiv	r1, r5, r3
 801dde0:	fb03 5711 	mls	r7, r3, r1, r5
 801dde4:	5dc7      	ldrb	r7, [r0, r7]
 801dde6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ddea:	462f      	mov	r7, r5
 801ddec:	42bb      	cmp	r3, r7
 801ddee:	460d      	mov	r5, r1
 801ddf0:	d9f4      	bls.n	801dddc <_printf_i+0x110>
 801ddf2:	2b08      	cmp	r3, #8
 801ddf4:	d10b      	bne.n	801de0e <_printf_i+0x142>
 801ddf6:	6823      	ldr	r3, [r4, #0]
 801ddf8:	07df      	lsls	r7, r3, #31
 801ddfa:	d508      	bpl.n	801de0e <_printf_i+0x142>
 801ddfc:	6923      	ldr	r3, [r4, #16]
 801ddfe:	6861      	ldr	r1, [r4, #4]
 801de00:	4299      	cmp	r1, r3
 801de02:	bfde      	ittt	le
 801de04:	2330      	movle	r3, #48	@ 0x30
 801de06:	f806 3c01 	strble.w	r3, [r6, #-1]
 801de0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801de0e:	1b92      	subs	r2, r2, r6
 801de10:	6122      	str	r2, [r4, #16]
 801de12:	f8cd a000 	str.w	sl, [sp]
 801de16:	464b      	mov	r3, r9
 801de18:	aa03      	add	r2, sp, #12
 801de1a:	4621      	mov	r1, r4
 801de1c:	4640      	mov	r0, r8
 801de1e:	f7ff fee7 	bl	801dbf0 <_printf_common>
 801de22:	3001      	adds	r0, #1
 801de24:	d14a      	bne.n	801debc <_printf_i+0x1f0>
 801de26:	f04f 30ff 	mov.w	r0, #4294967295
 801de2a:	b004      	add	sp, #16
 801de2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de30:	6823      	ldr	r3, [r4, #0]
 801de32:	f043 0320 	orr.w	r3, r3, #32
 801de36:	6023      	str	r3, [r4, #0]
 801de38:	4832      	ldr	r0, [pc, #200]	@ (801df04 <_printf_i+0x238>)
 801de3a:	2778      	movs	r7, #120	@ 0x78
 801de3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801de40:	6823      	ldr	r3, [r4, #0]
 801de42:	6831      	ldr	r1, [r6, #0]
 801de44:	061f      	lsls	r7, r3, #24
 801de46:	f851 5b04 	ldr.w	r5, [r1], #4
 801de4a:	d402      	bmi.n	801de52 <_printf_i+0x186>
 801de4c:	065f      	lsls	r7, r3, #25
 801de4e:	bf48      	it	mi
 801de50:	b2ad      	uxthmi	r5, r5
 801de52:	6031      	str	r1, [r6, #0]
 801de54:	07d9      	lsls	r1, r3, #31
 801de56:	bf44      	itt	mi
 801de58:	f043 0320 	orrmi.w	r3, r3, #32
 801de5c:	6023      	strmi	r3, [r4, #0]
 801de5e:	b11d      	cbz	r5, 801de68 <_printf_i+0x19c>
 801de60:	2310      	movs	r3, #16
 801de62:	e7ad      	b.n	801ddc0 <_printf_i+0xf4>
 801de64:	4826      	ldr	r0, [pc, #152]	@ (801df00 <_printf_i+0x234>)
 801de66:	e7e9      	b.n	801de3c <_printf_i+0x170>
 801de68:	6823      	ldr	r3, [r4, #0]
 801de6a:	f023 0320 	bic.w	r3, r3, #32
 801de6e:	6023      	str	r3, [r4, #0]
 801de70:	e7f6      	b.n	801de60 <_printf_i+0x194>
 801de72:	4616      	mov	r6, r2
 801de74:	e7bd      	b.n	801ddf2 <_printf_i+0x126>
 801de76:	6833      	ldr	r3, [r6, #0]
 801de78:	6825      	ldr	r5, [r4, #0]
 801de7a:	6961      	ldr	r1, [r4, #20]
 801de7c:	1d18      	adds	r0, r3, #4
 801de7e:	6030      	str	r0, [r6, #0]
 801de80:	062e      	lsls	r6, r5, #24
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	d501      	bpl.n	801de8a <_printf_i+0x1be>
 801de86:	6019      	str	r1, [r3, #0]
 801de88:	e002      	b.n	801de90 <_printf_i+0x1c4>
 801de8a:	0668      	lsls	r0, r5, #25
 801de8c:	d5fb      	bpl.n	801de86 <_printf_i+0x1ba>
 801de8e:	8019      	strh	r1, [r3, #0]
 801de90:	2300      	movs	r3, #0
 801de92:	6123      	str	r3, [r4, #16]
 801de94:	4616      	mov	r6, r2
 801de96:	e7bc      	b.n	801de12 <_printf_i+0x146>
 801de98:	6833      	ldr	r3, [r6, #0]
 801de9a:	1d1a      	adds	r2, r3, #4
 801de9c:	6032      	str	r2, [r6, #0]
 801de9e:	681e      	ldr	r6, [r3, #0]
 801dea0:	6862      	ldr	r2, [r4, #4]
 801dea2:	2100      	movs	r1, #0
 801dea4:	4630      	mov	r0, r6
 801dea6:	f7e2 f9b3 	bl	8000210 <memchr>
 801deaa:	b108      	cbz	r0, 801deb0 <_printf_i+0x1e4>
 801deac:	1b80      	subs	r0, r0, r6
 801deae:	6060      	str	r0, [r4, #4]
 801deb0:	6863      	ldr	r3, [r4, #4]
 801deb2:	6123      	str	r3, [r4, #16]
 801deb4:	2300      	movs	r3, #0
 801deb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801deba:	e7aa      	b.n	801de12 <_printf_i+0x146>
 801debc:	6923      	ldr	r3, [r4, #16]
 801debe:	4632      	mov	r2, r6
 801dec0:	4649      	mov	r1, r9
 801dec2:	4640      	mov	r0, r8
 801dec4:	47d0      	blx	sl
 801dec6:	3001      	adds	r0, #1
 801dec8:	d0ad      	beq.n	801de26 <_printf_i+0x15a>
 801deca:	6823      	ldr	r3, [r4, #0]
 801decc:	079b      	lsls	r3, r3, #30
 801dece:	d413      	bmi.n	801def8 <_printf_i+0x22c>
 801ded0:	68e0      	ldr	r0, [r4, #12]
 801ded2:	9b03      	ldr	r3, [sp, #12]
 801ded4:	4298      	cmp	r0, r3
 801ded6:	bfb8      	it	lt
 801ded8:	4618      	movlt	r0, r3
 801deda:	e7a6      	b.n	801de2a <_printf_i+0x15e>
 801dedc:	2301      	movs	r3, #1
 801dede:	4632      	mov	r2, r6
 801dee0:	4649      	mov	r1, r9
 801dee2:	4640      	mov	r0, r8
 801dee4:	47d0      	blx	sl
 801dee6:	3001      	adds	r0, #1
 801dee8:	d09d      	beq.n	801de26 <_printf_i+0x15a>
 801deea:	3501      	adds	r5, #1
 801deec:	68e3      	ldr	r3, [r4, #12]
 801deee:	9903      	ldr	r1, [sp, #12]
 801def0:	1a5b      	subs	r3, r3, r1
 801def2:	42ab      	cmp	r3, r5
 801def4:	dcf2      	bgt.n	801dedc <_printf_i+0x210>
 801def6:	e7eb      	b.n	801ded0 <_printf_i+0x204>
 801def8:	2500      	movs	r5, #0
 801defa:	f104 0619 	add.w	r6, r4, #25
 801defe:	e7f5      	b.n	801deec <_printf_i+0x220>
 801df00:	08021b72 	.word	0x08021b72
 801df04:	08021b83 	.word	0x08021b83

0801df08 <__sflush_r>:
 801df08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df10:	0716      	lsls	r6, r2, #28
 801df12:	4605      	mov	r5, r0
 801df14:	460c      	mov	r4, r1
 801df16:	d454      	bmi.n	801dfc2 <__sflush_r+0xba>
 801df18:	684b      	ldr	r3, [r1, #4]
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	dc02      	bgt.n	801df24 <__sflush_r+0x1c>
 801df1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801df20:	2b00      	cmp	r3, #0
 801df22:	dd48      	ble.n	801dfb6 <__sflush_r+0xae>
 801df24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801df26:	2e00      	cmp	r6, #0
 801df28:	d045      	beq.n	801dfb6 <__sflush_r+0xae>
 801df2a:	2300      	movs	r3, #0
 801df2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801df30:	682f      	ldr	r7, [r5, #0]
 801df32:	6a21      	ldr	r1, [r4, #32]
 801df34:	602b      	str	r3, [r5, #0]
 801df36:	d030      	beq.n	801df9a <__sflush_r+0x92>
 801df38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801df3a:	89a3      	ldrh	r3, [r4, #12]
 801df3c:	0759      	lsls	r1, r3, #29
 801df3e:	d505      	bpl.n	801df4c <__sflush_r+0x44>
 801df40:	6863      	ldr	r3, [r4, #4]
 801df42:	1ad2      	subs	r2, r2, r3
 801df44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801df46:	b10b      	cbz	r3, 801df4c <__sflush_r+0x44>
 801df48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801df4a:	1ad2      	subs	r2, r2, r3
 801df4c:	2300      	movs	r3, #0
 801df4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801df50:	6a21      	ldr	r1, [r4, #32]
 801df52:	4628      	mov	r0, r5
 801df54:	47b0      	blx	r6
 801df56:	1c43      	adds	r3, r0, #1
 801df58:	89a3      	ldrh	r3, [r4, #12]
 801df5a:	d106      	bne.n	801df6a <__sflush_r+0x62>
 801df5c:	6829      	ldr	r1, [r5, #0]
 801df5e:	291d      	cmp	r1, #29
 801df60:	d82b      	bhi.n	801dfba <__sflush_r+0xb2>
 801df62:	4a2a      	ldr	r2, [pc, #168]	@ (801e00c <__sflush_r+0x104>)
 801df64:	40ca      	lsrs	r2, r1
 801df66:	07d6      	lsls	r6, r2, #31
 801df68:	d527      	bpl.n	801dfba <__sflush_r+0xb2>
 801df6a:	2200      	movs	r2, #0
 801df6c:	6062      	str	r2, [r4, #4]
 801df6e:	04d9      	lsls	r1, r3, #19
 801df70:	6922      	ldr	r2, [r4, #16]
 801df72:	6022      	str	r2, [r4, #0]
 801df74:	d504      	bpl.n	801df80 <__sflush_r+0x78>
 801df76:	1c42      	adds	r2, r0, #1
 801df78:	d101      	bne.n	801df7e <__sflush_r+0x76>
 801df7a:	682b      	ldr	r3, [r5, #0]
 801df7c:	b903      	cbnz	r3, 801df80 <__sflush_r+0x78>
 801df7e:	6560      	str	r0, [r4, #84]	@ 0x54
 801df80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df82:	602f      	str	r7, [r5, #0]
 801df84:	b1b9      	cbz	r1, 801dfb6 <__sflush_r+0xae>
 801df86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df8a:	4299      	cmp	r1, r3
 801df8c:	d002      	beq.n	801df94 <__sflush_r+0x8c>
 801df8e:	4628      	mov	r0, r5
 801df90:	f7ff fbec 	bl	801d76c <_free_r>
 801df94:	2300      	movs	r3, #0
 801df96:	6363      	str	r3, [r4, #52]	@ 0x34
 801df98:	e00d      	b.n	801dfb6 <__sflush_r+0xae>
 801df9a:	2301      	movs	r3, #1
 801df9c:	4628      	mov	r0, r5
 801df9e:	47b0      	blx	r6
 801dfa0:	4602      	mov	r2, r0
 801dfa2:	1c50      	adds	r0, r2, #1
 801dfa4:	d1c9      	bne.n	801df3a <__sflush_r+0x32>
 801dfa6:	682b      	ldr	r3, [r5, #0]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d0c6      	beq.n	801df3a <__sflush_r+0x32>
 801dfac:	2b1d      	cmp	r3, #29
 801dfae:	d001      	beq.n	801dfb4 <__sflush_r+0xac>
 801dfb0:	2b16      	cmp	r3, #22
 801dfb2:	d11e      	bne.n	801dff2 <__sflush_r+0xea>
 801dfb4:	602f      	str	r7, [r5, #0]
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	e022      	b.n	801e000 <__sflush_r+0xf8>
 801dfba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dfbe:	b21b      	sxth	r3, r3
 801dfc0:	e01b      	b.n	801dffa <__sflush_r+0xf2>
 801dfc2:	690f      	ldr	r7, [r1, #16]
 801dfc4:	2f00      	cmp	r7, #0
 801dfc6:	d0f6      	beq.n	801dfb6 <__sflush_r+0xae>
 801dfc8:	0793      	lsls	r3, r2, #30
 801dfca:	680e      	ldr	r6, [r1, #0]
 801dfcc:	bf08      	it	eq
 801dfce:	694b      	ldreq	r3, [r1, #20]
 801dfd0:	600f      	str	r7, [r1, #0]
 801dfd2:	bf18      	it	ne
 801dfd4:	2300      	movne	r3, #0
 801dfd6:	eba6 0807 	sub.w	r8, r6, r7
 801dfda:	608b      	str	r3, [r1, #8]
 801dfdc:	f1b8 0f00 	cmp.w	r8, #0
 801dfe0:	dde9      	ble.n	801dfb6 <__sflush_r+0xae>
 801dfe2:	6a21      	ldr	r1, [r4, #32]
 801dfe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dfe6:	4643      	mov	r3, r8
 801dfe8:	463a      	mov	r2, r7
 801dfea:	4628      	mov	r0, r5
 801dfec:	47b0      	blx	r6
 801dfee:	2800      	cmp	r0, #0
 801dff0:	dc08      	bgt.n	801e004 <__sflush_r+0xfc>
 801dff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dffa:	81a3      	strh	r3, [r4, #12]
 801dffc:	f04f 30ff 	mov.w	r0, #4294967295
 801e000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e004:	4407      	add	r7, r0
 801e006:	eba8 0800 	sub.w	r8, r8, r0
 801e00a:	e7e7      	b.n	801dfdc <__sflush_r+0xd4>
 801e00c:	20400001 	.word	0x20400001

0801e010 <_fflush_r>:
 801e010:	b538      	push	{r3, r4, r5, lr}
 801e012:	690b      	ldr	r3, [r1, #16]
 801e014:	4605      	mov	r5, r0
 801e016:	460c      	mov	r4, r1
 801e018:	b913      	cbnz	r3, 801e020 <_fflush_r+0x10>
 801e01a:	2500      	movs	r5, #0
 801e01c:	4628      	mov	r0, r5
 801e01e:	bd38      	pop	{r3, r4, r5, pc}
 801e020:	b118      	cbz	r0, 801e02a <_fflush_r+0x1a>
 801e022:	6a03      	ldr	r3, [r0, #32]
 801e024:	b90b      	cbnz	r3, 801e02a <_fflush_r+0x1a>
 801e026:	f7ff fa05 	bl	801d434 <__sinit>
 801e02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d0f3      	beq.n	801e01a <_fflush_r+0xa>
 801e032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e034:	07d0      	lsls	r0, r2, #31
 801e036:	d404      	bmi.n	801e042 <_fflush_r+0x32>
 801e038:	0599      	lsls	r1, r3, #22
 801e03a:	d402      	bmi.n	801e042 <_fflush_r+0x32>
 801e03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e03e:	f7ff fb66 	bl	801d70e <__retarget_lock_acquire_recursive>
 801e042:	4628      	mov	r0, r5
 801e044:	4621      	mov	r1, r4
 801e046:	f7ff ff5f 	bl	801df08 <__sflush_r>
 801e04a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e04c:	07da      	lsls	r2, r3, #31
 801e04e:	4605      	mov	r5, r0
 801e050:	d4e4      	bmi.n	801e01c <_fflush_r+0xc>
 801e052:	89a3      	ldrh	r3, [r4, #12]
 801e054:	059b      	lsls	r3, r3, #22
 801e056:	d4e1      	bmi.n	801e01c <_fflush_r+0xc>
 801e058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e05a:	f7ff fb59 	bl	801d710 <__retarget_lock_release_recursive>
 801e05e:	e7dd      	b.n	801e01c <_fflush_r+0xc>

0801e060 <fiprintf>:
 801e060:	b40e      	push	{r1, r2, r3}
 801e062:	b503      	push	{r0, r1, lr}
 801e064:	4601      	mov	r1, r0
 801e066:	ab03      	add	r3, sp, #12
 801e068:	4805      	ldr	r0, [pc, #20]	@ (801e080 <fiprintf+0x20>)
 801e06a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e06e:	6800      	ldr	r0, [r0, #0]
 801e070:	9301      	str	r3, [sp, #4]
 801e072:	f7ff fca5 	bl	801d9c0 <_vfiprintf_r>
 801e076:	b002      	add	sp, #8
 801e078:	f85d eb04 	ldr.w	lr, [sp], #4
 801e07c:	b003      	add	sp, #12
 801e07e:	4770      	bx	lr
 801e080:	2000003c 	.word	0x2000003c

0801e084 <__swbuf_r>:
 801e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e086:	460e      	mov	r6, r1
 801e088:	4614      	mov	r4, r2
 801e08a:	4605      	mov	r5, r0
 801e08c:	b118      	cbz	r0, 801e096 <__swbuf_r+0x12>
 801e08e:	6a03      	ldr	r3, [r0, #32]
 801e090:	b90b      	cbnz	r3, 801e096 <__swbuf_r+0x12>
 801e092:	f7ff f9cf 	bl	801d434 <__sinit>
 801e096:	69a3      	ldr	r3, [r4, #24]
 801e098:	60a3      	str	r3, [r4, #8]
 801e09a:	89a3      	ldrh	r3, [r4, #12]
 801e09c:	071a      	lsls	r2, r3, #28
 801e09e:	d501      	bpl.n	801e0a4 <__swbuf_r+0x20>
 801e0a0:	6923      	ldr	r3, [r4, #16]
 801e0a2:	b943      	cbnz	r3, 801e0b6 <__swbuf_r+0x32>
 801e0a4:	4621      	mov	r1, r4
 801e0a6:	4628      	mov	r0, r5
 801e0a8:	f000 f82a 	bl	801e100 <__swsetup_r>
 801e0ac:	b118      	cbz	r0, 801e0b6 <__swbuf_r+0x32>
 801e0ae:	f04f 37ff 	mov.w	r7, #4294967295
 801e0b2:	4638      	mov	r0, r7
 801e0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0b6:	6823      	ldr	r3, [r4, #0]
 801e0b8:	6922      	ldr	r2, [r4, #16]
 801e0ba:	1a98      	subs	r0, r3, r2
 801e0bc:	6963      	ldr	r3, [r4, #20]
 801e0be:	b2f6      	uxtb	r6, r6
 801e0c0:	4283      	cmp	r3, r0
 801e0c2:	4637      	mov	r7, r6
 801e0c4:	dc05      	bgt.n	801e0d2 <__swbuf_r+0x4e>
 801e0c6:	4621      	mov	r1, r4
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	f7ff ffa1 	bl	801e010 <_fflush_r>
 801e0ce:	2800      	cmp	r0, #0
 801e0d0:	d1ed      	bne.n	801e0ae <__swbuf_r+0x2a>
 801e0d2:	68a3      	ldr	r3, [r4, #8]
 801e0d4:	3b01      	subs	r3, #1
 801e0d6:	60a3      	str	r3, [r4, #8]
 801e0d8:	6823      	ldr	r3, [r4, #0]
 801e0da:	1c5a      	adds	r2, r3, #1
 801e0dc:	6022      	str	r2, [r4, #0]
 801e0de:	701e      	strb	r6, [r3, #0]
 801e0e0:	6962      	ldr	r2, [r4, #20]
 801e0e2:	1c43      	adds	r3, r0, #1
 801e0e4:	429a      	cmp	r2, r3
 801e0e6:	d004      	beq.n	801e0f2 <__swbuf_r+0x6e>
 801e0e8:	89a3      	ldrh	r3, [r4, #12]
 801e0ea:	07db      	lsls	r3, r3, #31
 801e0ec:	d5e1      	bpl.n	801e0b2 <__swbuf_r+0x2e>
 801e0ee:	2e0a      	cmp	r6, #10
 801e0f0:	d1df      	bne.n	801e0b2 <__swbuf_r+0x2e>
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	4628      	mov	r0, r5
 801e0f6:	f7ff ff8b 	bl	801e010 <_fflush_r>
 801e0fa:	2800      	cmp	r0, #0
 801e0fc:	d0d9      	beq.n	801e0b2 <__swbuf_r+0x2e>
 801e0fe:	e7d6      	b.n	801e0ae <__swbuf_r+0x2a>

0801e100 <__swsetup_r>:
 801e100:	b538      	push	{r3, r4, r5, lr}
 801e102:	4b29      	ldr	r3, [pc, #164]	@ (801e1a8 <__swsetup_r+0xa8>)
 801e104:	4605      	mov	r5, r0
 801e106:	6818      	ldr	r0, [r3, #0]
 801e108:	460c      	mov	r4, r1
 801e10a:	b118      	cbz	r0, 801e114 <__swsetup_r+0x14>
 801e10c:	6a03      	ldr	r3, [r0, #32]
 801e10e:	b90b      	cbnz	r3, 801e114 <__swsetup_r+0x14>
 801e110:	f7ff f990 	bl	801d434 <__sinit>
 801e114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e118:	0719      	lsls	r1, r3, #28
 801e11a:	d422      	bmi.n	801e162 <__swsetup_r+0x62>
 801e11c:	06da      	lsls	r2, r3, #27
 801e11e:	d407      	bmi.n	801e130 <__swsetup_r+0x30>
 801e120:	2209      	movs	r2, #9
 801e122:	602a      	str	r2, [r5, #0]
 801e124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e128:	81a3      	strh	r3, [r4, #12]
 801e12a:	f04f 30ff 	mov.w	r0, #4294967295
 801e12e:	e033      	b.n	801e198 <__swsetup_r+0x98>
 801e130:	0758      	lsls	r0, r3, #29
 801e132:	d512      	bpl.n	801e15a <__swsetup_r+0x5a>
 801e134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e136:	b141      	cbz	r1, 801e14a <__swsetup_r+0x4a>
 801e138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e13c:	4299      	cmp	r1, r3
 801e13e:	d002      	beq.n	801e146 <__swsetup_r+0x46>
 801e140:	4628      	mov	r0, r5
 801e142:	f7ff fb13 	bl	801d76c <_free_r>
 801e146:	2300      	movs	r3, #0
 801e148:	6363      	str	r3, [r4, #52]	@ 0x34
 801e14a:	89a3      	ldrh	r3, [r4, #12]
 801e14c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e150:	81a3      	strh	r3, [r4, #12]
 801e152:	2300      	movs	r3, #0
 801e154:	6063      	str	r3, [r4, #4]
 801e156:	6923      	ldr	r3, [r4, #16]
 801e158:	6023      	str	r3, [r4, #0]
 801e15a:	89a3      	ldrh	r3, [r4, #12]
 801e15c:	f043 0308 	orr.w	r3, r3, #8
 801e160:	81a3      	strh	r3, [r4, #12]
 801e162:	6923      	ldr	r3, [r4, #16]
 801e164:	b94b      	cbnz	r3, 801e17a <__swsetup_r+0x7a>
 801e166:	89a3      	ldrh	r3, [r4, #12]
 801e168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e170:	d003      	beq.n	801e17a <__swsetup_r+0x7a>
 801e172:	4621      	mov	r1, r4
 801e174:	4628      	mov	r0, r5
 801e176:	f000 f856 	bl	801e226 <__smakebuf_r>
 801e17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e17e:	f013 0201 	ands.w	r2, r3, #1
 801e182:	d00a      	beq.n	801e19a <__swsetup_r+0x9a>
 801e184:	2200      	movs	r2, #0
 801e186:	60a2      	str	r2, [r4, #8]
 801e188:	6962      	ldr	r2, [r4, #20]
 801e18a:	4252      	negs	r2, r2
 801e18c:	61a2      	str	r2, [r4, #24]
 801e18e:	6922      	ldr	r2, [r4, #16]
 801e190:	b942      	cbnz	r2, 801e1a4 <__swsetup_r+0xa4>
 801e192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e196:	d1c5      	bne.n	801e124 <__swsetup_r+0x24>
 801e198:	bd38      	pop	{r3, r4, r5, pc}
 801e19a:	0799      	lsls	r1, r3, #30
 801e19c:	bf58      	it	pl
 801e19e:	6962      	ldrpl	r2, [r4, #20]
 801e1a0:	60a2      	str	r2, [r4, #8]
 801e1a2:	e7f4      	b.n	801e18e <__swsetup_r+0x8e>
 801e1a4:	2000      	movs	r0, #0
 801e1a6:	e7f7      	b.n	801e198 <__swsetup_r+0x98>
 801e1a8:	2000003c 	.word	0x2000003c

0801e1ac <_sbrk_r>:
 801e1ac:	b538      	push	{r3, r4, r5, lr}
 801e1ae:	4d06      	ldr	r5, [pc, #24]	@ (801e1c8 <_sbrk_r+0x1c>)
 801e1b0:	2300      	movs	r3, #0
 801e1b2:	4604      	mov	r4, r0
 801e1b4:	4608      	mov	r0, r1
 801e1b6:	602b      	str	r3, [r5, #0]
 801e1b8:	f7e3 ff56 	bl	8002068 <_sbrk>
 801e1bc:	1c43      	adds	r3, r0, #1
 801e1be:	d102      	bne.n	801e1c6 <_sbrk_r+0x1a>
 801e1c0:	682b      	ldr	r3, [r5, #0]
 801e1c2:	b103      	cbz	r3, 801e1c6 <_sbrk_r+0x1a>
 801e1c4:	6023      	str	r3, [r4, #0]
 801e1c6:	bd38      	pop	{r3, r4, r5, pc}
 801e1c8:	200277c8 	.word	0x200277c8

0801e1cc <abort>:
 801e1cc:	b508      	push	{r3, lr}
 801e1ce:	2006      	movs	r0, #6
 801e1d0:	f000 f88e 	bl	801e2f0 <raise>
 801e1d4:	2001      	movs	r0, #1
 801e1d6:	f7e3 fecf 	bl	8001f78 <_exit>

0801e1da <__swhatbuf_r>:
 801e1da:	b570      	push	{r4, r5, r6, lr}
 801e1dc:	460c      	mov	r4, r1
 801e1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1e2:	2900      	cmp	r1, #0
 801e1e4:	b096      	sub	sp, #88	@ 0x58
 801e1e6:	4615      	mov	r5, r2
 801e1e8:	461e      	mov	r6, r3
 801e1ea:	da0d      	bge.n	801e208 <__swhatbuf_r+0x2e>
 801e1ec:	89a3      	ldrh	r3, [r4, #12]
 801e1ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e1f2:	f04f 0100 	mov.w	r1, #0
 801e1f6:	bf14      	ite	ne
 801e1f8:	2340      	movne	r3, #64	@ 0x40
 801e1fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e1fe:	2000      	movs	r0, #0
 801e200:	6031      	str	r1, [r6, #0]
 801e202:	602b      	str	r3, [r5, #0]
 801e204:	b016      	add	sp, #88	@ 0x58
 801e206:	bd70      	pop	{r4, r5, r6, pc}
 801e208:	466a      	mov	r2, sp
 801e20a:	f000 f879 	bl	801e300 <_fstat_r>
 801e20e:	2800      	cmp	r0, #0
 801e210:	dbec      	blt.n	801e1ec <__swhatbuf_r+0x12>
 801e212:	9901      	ldr	r1, [sp, #4]
 801e214:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e218:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e21c:	4259      	negs	r1, r3
 801e21e:	4159      	adcs	r1, r3
 801e220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e224:	e7eb      	b.n	801e1fe <__swhatbuf_r+0x24>

0801e226 <__smakebuf_r>:
 801e226:	898b      	ldrh	r3, [r1, #12]
 801e228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e22a:	079d      	lsls	r5, r3, #30
 801e22c:	4606      	mov	r6, r0
 801e22e:	460c      	mov	r4, r1
 801e230:	d507      	bpl.n	801e242 <__smakebuf_r+0x1c>
 801e232:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e236:	6023      	str	r3, [r4, #0]
 801e238:	6123      	str	r3, [r4, #16]
 801e23a:	2301      	movs	r3, #1
 801e23c:	6163      	str	r3, [r4, #20]
 801e23e:	b003      	add	sp, #12
 801e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e242:	ab01      	add	r3, sp, #4
 801e244:	466a      	mov	r2, sp
 801e246:	f7ff ffc8 	bl	801e1da <__swhatbuf_r>
 801e24a:	9f00      	ldr	r7, [sp, #0]
 801e24c:	4605      	mov	r5, r0
 801e24e:	4639      	mov	r1, r7
 801e250:	4630      	mov	r0, r6
 801e252:	f7ff faff 	bl	801d854 <_malloc_r>
 801e256:	b948      	cbnz	r0, 801e26c <__smakebuf_r+0x46>
 801e258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e25c:	059a      	lsls	r2, r3, #22
 801e25e:	d4ee      	bmi.n	801e23e <__smakebuf_r+0x18>
 801e260:	f023 0303 	bic.w	r3, r3, #3
 801e264:	f043 0302 	orr.w	r3, r3, #2
 801e268:	81a3      	strh	r3, [r4, #12]
 801e26a:	e7e2      	b.n	801e232 <__smakebuf_r+0xc>
 801e26c:	89a3      	ldrh	r3, [r4, #12]
 801e26e:	6020      	str	r0, [r4, #0]
 801e270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e274:	81a3      	strh	r3, [r4, #12]
 801e276:	9b01      	ldr	r3, [sp, #4]
 801e278:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e27c:	b15b      	cbz	r3, 801e296 <__smakebuf_r+0x70>
 801e27e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e282:	4630      	mov	r0, r6
 801e284:	f000 f84e 	bl	801e324 <_isatty_r>
 801e288:	b128      	cbz	r0, 801e296 <__smakebuf_r+0x70>
 801e28a:	89a3      	ldrh	r3, [r4, #12]
 801e28c:	f023 0303 	bic.w	r3, r3, #3
 801e290:	f043 0301 	orr.w	r3, r3, #1
 801e294:	81a3      	strh	r3, [r4, #12]
 801e296:	89a3      	ldrh	r3, [r4, #12]
 801e298:	431d      	orrs	r5, r3
 801e29a:	81a5      	strh	r5, [r4, #12]
 801e29c:	e7cf      	b.n	801e23e <__smakebuf_r+0x18>

0801e29e <_raise_r>:
 801e29e:	291f      	cmp	r1, #31
 801e2a0:	b538      	push	{r3, r4, r5, lr}
 801e2a2:	4605      	mov	r5, r0
 801e2a4:	460c      	mov	r4, r1
 801e2a6:	d904      	bls.n	801e2b2 <_raise_r+0x14>
 801e2a8:	2316      	movs	r3, #22
 801e2aa:	6003      	str	r3, [r0, #0]
 801e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e2b0:	bd38      	pop	{r3, r4, r5, pc}
 801e2b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e2b4:	b112      	cbz	r2, 801e2bc <_raise_r+0x1e>
 801e2b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e2ba:	b94b      	cbnz	r3, 801e2d0 <_raise_r+0x32>
 801e2bc:	4628      	mov	r0, r5
 801e2be:	f000 f853 	bl	801e368 <_getpid_r>
 801e2c2:	4622      	mov	r2, r4
 801e2c4:	4601      	mov	r1, r0
 801e2c6:	4628      	mov	r0, r5
 801e2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e2cc:	f000 b83a 	b.w	801e344 <_kill_r>
 801e2d0:	2b01      	cmp	r3, #1
 801e2d2:	d00a      	beq.n	801e2ea <_raise_r+0x4c>
 801e2d4:	1c59      	adds	r1, r3, #1
 801e2d6:	d103      	bne.n	801e2e0 <_raise_r+0x42>
 801e2d8:	2316      	movs	r3, #22
 801e2da:	6003      	str	r3, [r0, #0]
 801e2dc:	2001      	movs	r0, #1
 801e2de:	e7e7      	b.n	801e2b0 <_raise_r+0x12>
 801e2e0:	2100      	movs	r1, #0
 801e2e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	4798      	blx	r3
 801e2ea:	2000      	movs	r0, #0
 801e2ec:	e7e0      	b.n	801e2b0 <_raise_r+0x12>
	...

0801e2f0 <raise>:
 801e2f0:	4b02      	ldr	r3, [pc, #8]	@ (801e2fc <raise+0xc>)
 801e2f2:	4601      	mov	r1, r0
 801e2f4:	6818      	ldr	r0, [r3, #0]
 801e2f6:	f7ff bfd2 	b.w	801e29e <_raise_r>
 801e2fa:	bf00      	nop
 801e2fc:	2000003c 	.word	0x2000003c

0801e300 <_fstat_r>:
 801e300:	b538      	push	{r3, r4, r5, lr}
 801e302:	4d07      	ldr	r5, [pc, #28]	@ (801e320 <_fstat_r+0x20>)
 801e304:	2300      	movs	r3, #0
 801e306:	4604      	mov	r4, r0
 801e308:	4608      	mov	r0, r1
 801e30a:	4611      	mov	r1, r2
 801e30c:	602b      	str	r3, [r5, #0]
 801e30e:	f7e3 fe83 	bl	8002018 <_fstat>
 801e312:	1c43      	adds	r3, r0, #1
 801e314:	d102      	bne.n	801e31c <_fstat_r+0x1c>
 801e316:	682b      	ldr	r3, [r5, #0]
 801e318:	b103      	cbz	r3, 801e31c <_fstat_r+0x1c>
 801e31a:	6023      	str	r3, [r4, #0]
 801e31c:	bd38      	pop	{r3, r4, r5, pc}
 801e31e:	bf00      	nop
 801e320:	200277c8 	.word	0x200277c8

0801e324 <_isatty_r>:
 801e324:	b538      	push	{r3, r4, r5, lr}
 801e326:	4d06      	ldr	r5, [pc, #24]	@ (801e340 <_isatty_r+0x1c>)
 801e328:	2300      	movs	r3, #0
 801e32a:	4604      	mov	r4, r0
 801e32c:	4608      	mov	r0, r1
 801e32e:	602b      	str	r3, [r5, #0]
 801e330:	f7e3 fe82 	bl	8002038 <_isatty>
 801e334:	1c43      	adds	r3, r0, #1
 801e336:	d102      	bne.n	801e33e <_isatty_r+0x1a>
 801e338:	682b      	ldr	r3, [r5, #0]
 801e33a:	b103      	cbz	r3, 801e33e <_isatty_r+0x1a>
 801e33c:	6023      	str	r3, [r4, #0]
 801e33e:	bd38      	pop	{r3, r4, r5, pc}
 801e340:	200277c8 	.word	0x200277c8

0801e344 <_kill_r>:
 801e344:	b538      	push	{r3, r4, r5, lr}
 801e346:	4d07      	ldr	r5, [pc, #28]	@ (801e364 <_kill_r+0x20>)
 801e348:	2300      	movs	r3, #0
 801e34a:	4604      	mov	r4, r0
 801e34c:	4608      	mov	r0, r1
 801e34e:	4611      	mov	r1, r2
 801e350:	602b      	str	r3, [r5, #0]
 801e352:	f7e3 fdff 	bl	8001f54 <_kill>
 801e356:	1c43      	adds	r3, r0, #1
 801e358:	d102      	bne.n	801e360 <_kill_r+0x1c>
 801e35a:	682b      	ldr	r3, [r5, #0]
 801e35c:	b103      	cbz	r3, 801e360 <_kill_r+0x1c>
 801e35e:	6023      	str	r3, [r4, #0]
 801e360:	bd38      	pop	{r3, r4, r5, pc}
 801e362:	bf00      	nop
 801e364:	200277c8 	.word	0x200277c8

0801e368 <_getpid_r>:
 801e368:	f7e3 bdec 	b.w	8001f44 <_getpid>

0801e36c <_init>:
 801e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e36e:	bf00      	nop
 801e370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e372:	bc08      	pop	{r3}
 801e374:	469e      	mov	lr, r3
 801e376:	4770      	bx	lr

0801e378 <_fini>:
 801e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e37a:	bf00      	nop
 801e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e37e:	bc08      	pop	{r3}
 801e380:	469e      	mov	lr, r3
 801e382:	4770      	bx	lr
