
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eda0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003468  0801ef70  0801ef70  0001ff70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080223d8  080223d8  000241cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080223d8  080223d8  000233d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223e0  080223e0  000241cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223e0  080223e0  000233e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080223e4  080223e4  000233e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080223e8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08022474  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08022514  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027c90  200001cc  080225b4  000241cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20027e5c  080225b4  00024e5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043571  00000000  00000000  000241fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009dd3  00000000  00000000  0006776d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031b8  00000000  00000000  00071540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002737  00000000  00000000  000746f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000170a8  00000000  00000000  00076e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e7de  00000000  00000000  0008ded7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127819  00000000  00000000  000dc6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00203ece  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d868  00000000  00000000  00203f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  0021177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ef58 	.word	0x0801ef58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801ef58 	.word	0x0801ef58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 80005e0:	f002 f8fb 	bl	80027da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8d2 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fc24 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fbc0 	bl	8000d70 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb5e 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb8c 	bl	8000d14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fb2a 	bl	8000c54 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 fa08 	bl	8000a18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa46 	bl	8000a98 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fa82 	bl	8000b14 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000610:	f000 f924 	bl	800085c <MX_ADC1_Init>
  MX_DAC_Init();
 8000614:	f000 f996 	bl	8000944 <MX_DAC_Init>
  MX_TIM7_Init();
 8000618:	f000 fab6 	bl	8000b88 <MX_TIM7_Init>
  MX_UART4_Init();
 800061c:	f000 faea 	bl	8000bf4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00e f916 	bl	800e850 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <main+0x130>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00e fbbf 	bl	800edac <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <main+0x134>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000634:	4a37      	ldr	r2, [pc, #220]	@ (8000714 <main+0x138>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00e fbb7 	bl	800edac <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a35      	ldr	r2, [pc, #212]	@ (8000718 <main+0x13c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000644:	4a35      	ldr	r2, [pc, #212]	@ (800071c <main+0x140>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f00e fbaf 	bl	800edac <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a33      	ldr	r2, [pc, #204]	@ (8000720 <main+0x144>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000654:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <main+0x148>)
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00e fba7 	bl	800edac <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	@ (8000728 <main+0x14c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000664:	4a31      	ldr	r2, [pc, #196]	@ (800072c <main+0x150>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f00e fb9f 	bl	800edac <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2f      	ldr	r2, [pc, #188]	@ (8000730 <main+0x154>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000674:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <main+0x158>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f00e fb97 	bl	800edac <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a2d      	ldr	r2, [pc, #180]	@ (8000738 <main+0x15c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of TimSem */
  TimSemHandle = osSemaphoreNew(1, 0, &TimSem_attributes);
 8000684:	4a2d      	ldr	r2, [pc, #180]	@ (800073c <main+0x160>)
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f00e fb8f 	bl	800edac <osSemaphoreNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <main+0x164>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <main+0x168>)
 8000696:	2100      	movs	r1, #0
 8000698:	2001      	movs	r0, #1
 800069a:	f00e fb87 	bl	800edac <osSemaphoreNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <main+0x16c>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* creation of SpiSlaveRx */
  SpiSlaveRxHandle = osSemaphoreNew(1, 0, &SpiSlaveRx_attributes);
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x170>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f00e fb7f 	bl	800edac <osSemaphoreNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <main+0x174>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <main+0x178>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	2010      	movs	r0, #16
 80006ba:	f00e fcd1 	bl	800f060 <osMessageQueueNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <main+0x17c>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006c4:	4a25      	ldr	r2, [pc, #148]	@ (800075c <main+0x180>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4825      	ldr	r0, [pc, #148]	@ (8000760 <main+0x184>)
 80006ca:	f00e f953 	bl	800e974 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <main+0x188>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <main+0x18c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4824      	ldr	r0, [pc, #144]	@ (800076c <main+0x190>)
 80006da:	f00e f94b 	bl	800e974 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <main+0x194>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006e4:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <main+0x198>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <main+0x19c>)
 80006ea:	f00e f943 	bl	800e974 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <main+0x1a0>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <main+0x1a4>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <main+0x1a8>)
 80006fa:	f00e f93b 	bl	800e974 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0x1ac>)
 8000702:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f00e f8d8 	bl	800e8b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x12c>
 800070c:	0802211c 	.word	0x0802211c
 8000710:	20000db0 	.word	0x20000db0
 8000714:	0802212c 	.word	0x0802212c
 8000718:	20000db4 	.word	0x20000db4
 800071c:	0802213c 	.word	0x0802213c
 8000720:	20000db8 	.word	0x20000db8
 8000724:	0802214c 	.word	0x0802214c
 8000728:	20000dbc 	.word	0x20000dbc
 800072c:	0802215c 	.word	0x0802215c
 8000730:	20000dc0 	.word	0x20000dc0
 8000734:	0802216c 	.word	0x0802216c
 8000738:	20000dc4 	.word	0x20000dc4
 800073c:	0802217c 	.word	0x0802217c
 8000740:	20000dc8 	.word	0x20000dc8
 8000744:	0802218c 	.word	0x0802218c
 8000748:	20000dcc 	.word	0x20000dcc
 800074c:	0802219c 	.word	0x0802219c
 8000750:	20000dd0 	.word	0x20000dd0
 8000754:	08022104 	.word	0x08022104
 8000758:	20000dac 	.word	0x20000dac
 800075c:	08022074 	.word	0x08022074
 8000760:	08001221 	.word	0x08001221
 8000764:	20000d9c 	.word	0x20000d9c
 8000768:	08022098 	.word	0x08022098
 800076c:	08001235 	.word	0x08001235
 8000770:	20000da0 	.word	0x20000da0
 8000774:	080220bc 	.word	0x080220bc
 8000778:	08001279 	.word	0x08001279
 800077c:	20000da4 	.word	0x20000da4
 8000780:	080220e0 	.word	0x080220e0
 8000784:	0800128d 	.word	0x0800128d
 8000788:	20000da8 	.word	0x20000da8

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f01d fd70 	bl	801e280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f007 fe1c 	bl	80083ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xc8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000800:	2348      	movs	r3, #72	@ 0x48
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fdfb 	bl	800840c <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fdf6 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f008 f889 	bl	8008954 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f000 fde0 	bl	800140c <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 ffdd 	bl	800287c <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fda0 	bl	800140c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f002 fa4f 	bl	8002d80 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fd90 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_CRC_Init+0x3c>)
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <MX_CRC_Init+0x40>)
 8000908:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_CRC_Init+0x3c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CRC_Init+0x3c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_CRC_Init+0x3c>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_CRC_Init+0x3c>)
 800092a:	f002 fd9b 	bl	8003464 <HAL_CRC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000934:	f000 fd6a 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000230 	.word	0x20000230
 8000940:	40023000 	.word	0x40023000

08000944 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DAC_Init+0x50>)
 8000956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_DAC_Init+0x4c>)
 800095a:	f002 ff8d 	bl	8003878 <HAL_DAC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000964:	f000 fd52 	bl	800140c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000978:	f003 f881 	bl	8003a7e <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fd43 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254
 8000994:	40007400 	.word	0x40007400

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C1_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009d4:	f005 fabe 	bl	8005f54 <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fd15 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009e6:	f007 fb2f 	bl	8008048 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fd0c 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009f8:	f007 fb71 	bl	80080de <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fd03 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000268 	.word	0x20000268
 8000a10:	40005400 	.word	0x40005400
 8000a14:	00808cd2 	.word	0x00808cd2

08000a18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_I2C4_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_I2C4_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a54:	f005 fa7e 	bl	8005f54 <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 fcd5 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a66:	f007 faef 	bl	8008048 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fccc 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a78:	f007 fb31 	bl	80080de <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fcc3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002bc 	.word	0x200002bc
 8000a90:	40006000 	.word	0x40006000
 8000a94:	00808cd2 	.word	0x00808cd2

08000a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_SPI1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ab2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000afa:	f008 fd73 	bl	80095e4 <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fc82 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <MX_SPI2_Init+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b6e:	f008 fd39 	bl	80095e4 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 8000b78:	f000 fc48 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000434 	.word	0x20000434
 8000b84:	40003800 	.word	0x40003800

08000b88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <MX_TIM7_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bae:	2263      	movs	r2, #99	@ 0x63
 8000bb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bba:	f00a f94d 	bl	800ae58 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000bc4:	f000 fc22 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bd6:	f00a fc15 	bl	800b404 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 fc14 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000618 	.word	0x20000618
 8000bf0:	40001400 	.word	0x40001400

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_UART4_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c38:	f00a fc90 	bl	800b55c <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 fbe3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000664 	.word	0x20000664
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f00a fc60 	bl	800b55c <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fbb3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200006ec 	.word	0x200006ec
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f00a fc30 	bl	800b55c <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 fb83 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000774 	.word	0x20000774
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	f007 fa0d 	bl	8008176 <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 fb53 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200008bc 	.word	0x200008bc

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d8e:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2106      	movs	r1, #6
 8000daa:	200b      	movs	r0, #11
 8000dac:	f002 fb22 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db0:	200b      	movs	r0, #11
 8000db2:	f002 fb3b 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2106      	movs	r1, #6
 8000dba:	200d      	movs	r0, #13
 8000dbc:	f002 fb1a 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dc0:	200d      	movs	r0, #13
 8000dc2:	f002 fb33 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	200e      	movs	r0, #14
 8000dcc:	f002 fb12 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dd0:	200e      	movs	r0, #14
 8000dd2:	f002 fb2b 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2106      	movs	r1, #6
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f002 fb0a 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000de0:	200f      	movs	r0, #15
 8000de2:	f002 fb23 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2106      	movs	r1, #6
 8000dea:	2010      	movs	r0, #16
 8000dec:	f002 fb02 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f002 fb1b 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2106      	movs	r1, #6
 8000dfa:	2011      	movs	r0, #17
 8000dfc:	f002 fafa 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e00:	2011      	movs	r0, #17
 8000e02:	f002 fb13 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2038      	movs	r0, #56	@ 0x38
 8000e0c:	f002 faf2 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e10:	2038      	movs	r0, #56	@ 0x38
 8000e12:	f002 fb0b 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2105      	movs	r1, #5
 8000e1a:	203b      	movs	r0, #59	@ 0x3b
 8000e1c:	f002 faea 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e20:	203b      	movs	r0, #59	@ 0x3b
 8000e22:	f002 fb03 	bl	800342c <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a4a      	ldr	r2, [pc, #296]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a44      	ldr	r2, [pc, #272]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b42      	ldr	r3, [pc, #264]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b3f      	ldr	r3, [pc, #252]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a3e      	ldr	r2, [pc, #248]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eaa:	4b39      	ldr	r3, [pc, #228]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a38      	ldr	r2, [pc, #224]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b36      	ldr	r3, [pc, #216]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b33      	ldr	r3, [pc, #204]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a32      	ldr	r2, [pc, #200]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b30      	ldr	r3, [pc, #192]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eda:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a2c      	ldr	r2, [pc, #176]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <MX_GPIO_Init+0x15c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ef8:	4826      	ldr	r0, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0x160>)
 8000efa:	f004 ffd3 	bl	8005ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2140      	movs	r1, #64	@ 0x40
 8000f02:	4825      	ldr	r0, [pc, #148]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000f04:	f004 ffce 	bl	8005ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <MX_GPIO_Init+0x168>)
 8000f20:	f004 fd08 	bl	8005934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f24:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4815      	ldr	r0, [pc, #84]	@ (8000f94 <MX_GPIO_Init+0x160>)
 8000f3e:	f004 fcf9 	bl	8005934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000f5a:	f004 fceb 	bl	8005934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000f72:	f004 fcdf 	bl	8005934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2028      	movs	r0, #40	@ 0x28
 8000f7c:	f002 fa3a 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f80:	2028      	movs	r0, #40	@ 0x28
 8000f82:	f002 fa53 	bl	800342c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f86:	bf00      	nop
 8000f88:	3730      	adds	r7, #48	@ 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <vApplicationStackOverflowHook+0x50>)
 8000fac:	f01d f810 	bl	801dfd0 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <vApplicationStackOverflowHook+0x54>)
 8000fb4:	f01d f80c 	bl	801dfd0 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <vApplicationStackOverflowHook+0x58>)
 8000fbe:	f01d f807 	bl	801dfd0 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fc6:	b672      	cpsid	i
 8000fc8:	f383 8811 	msr	BASEPRI, r3
 8000fcc:	f3bf 8f6f 	isb	sy
 8000fd0:	f3bf 8f4f 	dsb	sy
 8000fd4:	b662      	cpsie	i
 8000fd6:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fd8:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <vApplicationStackOverflowHook+0x5c>)
 8000fe0:	f004 ff79 	bl	8005ed6 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000fe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe8:	f00d fd6a 	bl	800eac0 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fec:	bf00      	nop
 8000fee:	e7f4      	b.n	8000fda <vApplicationStackOverflowHook+0x3a>
 8000ff0:	0801eff8 	.word	0x0801eff8
 8000ff4:	0801f01c 	.word	0x0801f01c
 8000ff8:	0801f028 	.word	0x0801f028
 8000ffc:	40020400 	.word	0x40020400

08001000 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    udp_pcb_handle = udp_new();
 8001004:	f019 fc26 	bl	801a854 <udp_new>
 8001008:	4603      	mov	r3, r0
 800100a:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <udp_receive_init+0x58>)
 800100c:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <udp_receive_init+0x58>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 8001016:	4811      	ldr	r0, [pc, #68]	@ (800105c <udp_receive_init+0x5c>)
 8001018:	f01c ffda 	bl	801dfd0 <iprintf>
        return;
 800101c:	e01a      	b.n	8001054 <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <udp_receive_init+0x58>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f241 328d 	movw	r2, #5005	@ 0x138d
 8001026:	490e      	ldr	r1, [pc, #56]	@ (8001060 <udp_receive_init+0x60>)
 8001028:	4618      	mov	r0, r3
 800102a:	f019 fb6b 	bl	801a704 <udp_bind>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <udp_receive_init+0x64>)
 8001036:	f01c ffcb 	bl	801dfd0 <iprintf>
        return;
 800103a:	e00b      	b.n	8001054 <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <udp_receive_init+0x58>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	4909      	ldr	r1, [pc, #36]	@ (8001068 <udp_receive_init+0x68>)
 8001044:	4618      	mov	r0, r3
 8001046:	f019 fbe5 	bl	801a814 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 800104a:	f241 318d 	movw	r1, #5005	@ 0x138d
 800104e:	4807      	ldr	r0, [pc, #28]	@ (800106c <udp_receive_init+0x6c>)
 8001050:	f01c ffbe 	bl	801dfd0 <iprintf>
}
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000dd4 	.word	0x20000dd4
 800105c:	0801f038 	.word	0x0801f038
 8001060:	080222e8 	.word	0x080222e8
 8001064:	0801f054 	.word	0x0801f054
 8001068:	08001071 	.word	0x08001071
 800106c:	0801f068 	.word	0x0801f068

08001070 <udp_receive_callback>:
 * 1. alters it to a test_command_t struct
 * 2. sends it to execution queue.
 *
 * */
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d05e      	beq.n	8001142 <udp_receive_callback+0xd2>
        // Copy the sender's IP address
        ip_addr_copy(g_server_addr, *addr);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a35      	ldr	r2, [pc, #212]	@ (8001160 <udp_receive_callback+0xf0>)
 800108a:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        g_server_port = port;
 800108c:	4a35      	ldr	r2, [pc, #212]	@ (8001164 <udp_receive_callback+0xf4>)
 800108e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001092:	8013      	strh	r3, [r2, #0]

        if (p->len >= sizeof(test_command_t))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	895b      	ldrh	r3, [r3, #10]
 8001098:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800109c:	d942      	bls.n	8001124 <udp_receive_callback+0xb4>
        {
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 800109e:	f240 1007 	movw	r0, #263	@ 0x107
 80010a2:	f011 fac1 	bl	8012628 <pvPortMalloc>
 80010a6:	4603      	mov	r3, r0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
            if (cmd != NULL)
 80010aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d02a      	beq.n	8001106 <udp_receive_callback+0x96>
            {
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 80010b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f240 1207 	movw	r2, #263	@ 0x107
 80010ba:	4619      	mov	r1, r3
 80010bc:	f01d f9b3 	bl	801e426 <memcpy>

	            // Send the POINTER to the newly allocated and copied* data to the queue
	            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS) // Pass address of pointer
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <udp_receive_callback+0xf8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80010c8:	2300      	movs	r3, #0
 80010ca:	2201      	movs	r2, #1
 80010cc:	f00e fca8 	bl	800fa20 <xQueueGenericSend>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d00f      	beq.n	80010f6 <udp_receive_callback+0x86>
	            {
	            	result_pro_t response={NULL, TEST_ERR};
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	863b      	strh	r3, [r7, #48]	@ 0x30
	            	send_response(response);
 80010e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010e8:	f000 f844 	bl	8001174 <send_response>
	                vPortFree(cmd); // If send fails, free the allocated memory
 80010ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ee:	4618      	mov	r0, r3
 80010f0:	f011 fb68 	bl	80127c4 <vPortFree>
 80010f4:	e021      	b.n	800113a <udp_receive_callback+0xca>
	            } else {
	                // notify if successfully sent to queue
	                xTaskNotifyGive(performing_taskHandle);
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <udp_receive_callback+0xfc>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	2202      	movs	r2, #2
 80010fe:	2100      	movs	r1, #0
 8001100:	f010 fbd2 	bl	80118a8 <xTaskGenericNotify>
 8001104:	e019      	b.n	800113a <udp_receive_callback+0xca>
	            }
            }
            else{
            	result_pro_t response={NULL, TEST_ERR};
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
 800110a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110e:	853b      	strh	r3, [r7, #40]	@ 0x28
            	send_response(response);
 8001110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001114:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001118:	f000 f82c 	bl	8001174 <send_response>
                printf("Failed to allocate memory for test_command_t!\n\r"); // Debug printf
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <udp_receive_callback+0x100>)
 800111e:	f01c ff57 	bl	801dfd0 <iprintf>
 8001122:	e00a      	b.n	800113a <udp_receive_callback+0xca>
            }
        } else {
        	result_pro_t response={NULL, TEST_ERR};
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112c:	843b      	strh	r3, [r7, #32]
        	send_response(response);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001136:	f000 f81d 	bl	8001174 <send_response>
        }
        pbuf_free(p);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f013 f9ee 	bl	801451c <pbuf_free>
    }
    else{
    	result_pro_t response={NULL, TEST_ERR};
    	send_response(response);
    }
}
 8001140:	e00a      	b.n	8001158 <udp_receive_callback+0xe8>
    	result_pro_t response={NULL, TEST_ERR};
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800114a:	833b      	strh	r3, [r7, #24]
    	send_response(response);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001154:	f000 f80e 	bl	8001174 <send_response>
}
 8001158:	bf00      	nop
 800115a:	3738      	adds	r7, #56	@ 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000dd8 	.word	0x20000dd8
 8001164:	20000ddc 	.word	0x20000ddc
 8001168:	20000dac 	.word	0x20000dac
 800116c:	20000da8 	.word	0x20000da8
 8001170:	0801f08c 	.word	0x0801f08c

08001174 <send_response>:

int send_response(result_pro_t result)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	463b      	mov	r3, r7
 800117c:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&g_server_addr) == 0)
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <send_response+0x74>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d029      	beq.n	80011dc <send_response+0x68>
    {
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8001188:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800118c:	2106      	movs	r1, #6
 800118e:	2036      	movs	r0, #54	@ 0x36
 8001190:	f012 fee0 	bl	8013f54 <pbuf_alloc>
 8001194:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <send_response+0x62>
        {
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	461a      	mov	r2, r3
 80011a2:	463b      	mov	r3, r7
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	6010      	str	r0, [r2, #0]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &g_server_addr, g_server_port) != ERR_OK)
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <send_response+0x78>)
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <send_response+0x7c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <send_response+0x74>)
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	f019 f8ee 	bl	801a398 <udp_sendto>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <send_response+0x5a>
            {
                pbuf_free(p);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f013 f9aa 	bl	801451c <pbuf_free>
            	return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	e008      	b.n	80011e0 <send_response+0x6c>
            }
            // Free the pbuf
            pbuf_free(p);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f013 f9a4 	bl	801451c <pbuf_free>
        }
    }
    else{
    	return -1;
    }
}
 80011d4:	e004      	b.n	80011e0 <send_response+0x6c>
        	return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e001      	b.n	80011e0 <send_response+0x6c>
    	return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000dd8 	.word	0x20000dd8
 80011ec:	20000dd4 	.word	0x20000dd4
 80011f0:	20000ddc 	.word	0x20000ddc

080011f4 <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3303      	adds	r3, #3
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <calculate_crc+0x28>)
 800120c:	f002 f98e 	bl	800352c <HAL_CRC_Calculate>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000230 	.word	0x20000230

08001220 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001228:	f00c fcb2 	bl	800db90 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f00d fc47 	bl	800eac0 <osDelay>
 8001232:	e7fb      	b.n	800122c <lwip_initiation+0xc>

08001234 <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	4804      	ldr	r0, [pc, #16]	@ (8001250 <blinking_blue+0x1c>)
 8001240:	f004 fe49 	bl	8005ed6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001244:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001248:	f00d fc3a 	bl	800eac0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800124c:	bf00      	nop
 800124e:	e7f5      	b.n	800123c <blinking_blue+0x8>
 8001250:	40020400 	.word	0x40020400

08001254 <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800125c:	1d39      	adds	r1, r7, #4
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <__io_putchar+0x20>)
 8001266:	f00a f9c7 	bl	800b5f8 <HAL_UART_Transmit>
    return ch;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000774 	.word	0x20000774

08001278 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001280:	f7ff febe 	bl	8001000 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f00d fc1b 	bl	800eac0 <osDelay>
 800128a:	e7fb      	b.n	8001284 <udp_function+0xc>

0800128c <perform_tests>:
* @param argument: Not used (using queue instead)
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	2001      	movs	r0, #1
 800129a:	f010 fab9 	bl	8011810 <ulTaskNotifyTake>

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 800129e:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <perform_tests+0x114>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f107 0114 	add.w	r1, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00e fdff 	bl	800feac <xQueueReceive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d003      	beq.n	80012bc <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 80012b4:	483b      	ldr	r0, [pc, #236]	@ (80013a4 <perform_tests+0x118>)
 80012b6:	f01c fe8b 	bl	801dfd0 <iprintf>
 80012ba:	e7eb      	b.n	8001294 <perform_tests+0x8>
		continue;
	}
	result_pro_t response;

	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations < 1){
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <perform_tests+0x40>
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	795b      	ldrb	r3, [r3, #5]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <perform_tests+0x52>
		response.test_result =TEST_ERR;
 80012cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d0:	823b      	strh	r3, [r7, #16]
		send_response(response);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012da:	f7ff ff4b 	bl	8001174 <send_response>
	}
	response.test_id = cmd->test_id;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]

	switch (cmd->peripheral){
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	d845      	bhi.n	800137a <perform_tests+0xee>
 80012ee:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <perform_tests+0x68>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001335 	.word	0x08001335
 80012f8:	08001343 	.word	0x08001343
 80012fc:	0800137b 	.word	0x0800137b
 8001300:	08001351 	.word	0x08001351
 8001304:	0800137b 	.word	0x0800137b
 8001308:	0800137b 	.word	0x0800137b
 800130c:	0800137b 	.word	0x0800137b
 8001310:	0800135f 	.word	0x0800135f
 8001314:	0800137b 	.word	0x0800137b
 8001318:	0800137b 	.word	0x0800137b
 800131c:	0800137b 	.word	0x0800137b
 8001320:	0800137b 	.word	0x0800137b
 8001324:	0800137b 	.word	0x0800137b
 8001328:	0800137b 	.word	0x0800137b
 800132c:	0800137b 	.word	0x0800137b
 8001330:	0800136d 	.word	0x0800136d
	case TIMER:
		response.test_result = timer_testing(cmd);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4618      	mov	r0, r3
 8001338:	f01c fb50 	bl	801d9dc <timer_testing>
 800133c:	4603      	mov	r3, r0
 800133e:	823b      	strh	r3, [r7, #16]
		break;
 8001340:	e01f      	b.n	8001382 <perform_tests+0xf6>
	case UART:
		response.test_result = uart_testing(cmd);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4618      	mov	r0, r3
 8001346:	f01c fb7f 	bl	801da48 <uart_testing>
 800134a:	4603      	mov	r3, r0
 800134c:	823b      	strh	r3, [r7, #16]
		break;
 800134e:	e018      	b.n	8001382 <perform_tests+0xf6>
	case SPI:
		response.test_result = spi_testing(cmd);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4618      	mov	r0, r3
 8001354:	f01c f922 	bl	801d59c <spi_testing>
 8001358:	4603      	mov	r3, r0
 800135a:	823b      	strh	r3, [r7, #16]
		break;
 800135c:	e011      	b.n	8001382 <perform_tests+0xf6>
	case I2C:
		response.test_result = i2c_testing(cmd);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4618      	mov	r0, r3
 8001362:	f01b ff37 	bl	801d1d4 <i2c_testing>
 8001366:	4603      	mov	r3, r0
 8001368:	823b      	strh	r3, [r7, #16]
		break;
 800136a:	e00a      	b.n	8001382 <perform_tests+0xf6>
	case ADC_P:
		response.test_result = adc_testing(cmd);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	4618      	mov	r0, r3
 8001370:	f01b fe70 	bl	801d054 <adc_testing>
 8001374:	4603      	mov	r3, r0
 8001376:	823b      	strh	r3, [r7, #16]
		break;
 8001378:	e003      	b.n	8001382 <perform_tests+0xf6>
	default:
		response.test_result = TEST_ERR;
 800137a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137e:	823b      	strh	r3, [r7, #16]
        break;
 8001380:	bf00      	nop
	}
    vPortFree(cmd);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4618      	mov	r0, r3
 8001386:	f011 fa1d 	bl	80127c4 <vPortFree>
    osDelay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f00d fb98 	bl	800eac0 <osDelay>
    send_response(response);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001398:	f7ff feec 	bl	8001174 <send_response>
  {
 800139c:	e77a      	b.n	8001294 <perform_tests+0x8>
 800139e:	bf00      	nop
 80013a0:	20000dac 	.word	0x20000dac
 80013a4:	0801f0bc 	.word	0x0801f0bc

080013a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013ba:	f001 fa1b 	bl	80027f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d114      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

	    // Use the ISR-safe function to give the semaphore
	    xSemaphoreGiveFromISR(TimSemHandle, &xHigherPriorityTaskWoken);
 80013cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00e fccf 	bl	800fd7a <xQueueGiveFromISR>

	    // Call this if a higher priority task was unblocked
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001000 	.word	0x40001000
 8001400:	40001400 	.word	0x40001400
 8001404:	20000dc8 	.word	0x20000dc8
 8001408:	e000ed04 	.word	0xe000ed04

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_MspInit+0x6c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <HAL_MspInit+0x6c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_MspInit+0x6c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_MspInit+0x6c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_MspInit+0x6c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_MspInit+0x6c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	210f      	movs	r1, #15
 8001452:	f06f 0001 	mvn.w	r0, #1
 8001456:	f001 ffcd 	bl	80033f4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2105      	movs	r1, #5
 800145e:	2005      	movs	r0, #5
 8001460:	f001 ffc8 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001464:	2005      	movs	r0, #5
 8001466:	f001 ffe1 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	2051      	movs	r0, #81	@ 0x51
 8001470:	f001 ffc0 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001474:	2051      	movs	r0, #81	@ 0x51
 8001476:	f001 ffd9 	bl	800342c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_ADC_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12b      	bne.n	8001502 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_ADC_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4809      	ldr	r0, [pc, #36]	@ (8001514 <HAL_ADC_MspInit+0x8c>)
 80014ee:	f004 fa21 	bl	8005934 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	2012      	movs	r0, #18
 80014f8:	f001 ff7c 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014fc:	2012      	movs	r0, #18
 80014fe:	f001 ff95 	bl	800342c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	@ 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012000 	.word	0x40012000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800

08001518 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_CRC_MspInit+0x38>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10b      	bne.n	8001542 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_CRC_MspInit+0x3c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <HAL_CRC_MspInit+0x3c>)
 8001530:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_CRC_MspInit+0x3c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023000 	.word	0x40023000
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_DAC_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12b      	bne.n	80015d2 <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 8001580:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_DAC_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015aa:	2310      	movs	r3, #16
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <HAL_DAC_MspInit+0x8c>)
 80015be:	f004 f9b9 	bl	8005934 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	2036      	movs	r0, #54	@ 0x36
 80015c8:	f001 ff14 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015cc:	2036      	movs	r0, #54	@ 0x36
 80015ce:	f001 ff2d 	bl	800342c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40007400 	.word	0x40007400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0ac      	sub	sp, #176	@ 0xb0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2284      	movs	r2, #132	@ 0x84
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f01c fe39 	bl	801e280 <memset>
  if(hi2c->Instance==I2C1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a82      	ldr	r2, [pc, #520]	@ (800181c <HAL_I2C_MspInit+0x234>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d17b      	bne.n	8001710 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001618:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800161c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800161e:	2300      	movs	r3, #0
 8001620:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fbec 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001632:	f7ff feeb 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a79      	ldr	r2, [pc, #484]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b77      	ldr	r3, [pc, #476]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	2312      	movs	r3, #18
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	486b      	ldr	r0, [pc, #428]	@ (8001824 <HAL_I2C_MspInit+0x23c>)
 8001676:	f004 f95d 	bl	8005934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	4b69      	ldr	r3, [pc, #420]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001692:	4b65      	ldr	r3, [pc, #404]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_I2C_MspInit+0x244>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001698:	4b63      	ldr	r3, [pc, #396]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 800169a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b60      	ldr	r3, [pc, #384]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016c0:	4b59      	ldr	r3, [pc, #356]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c6:	4b58      	ldr	r3, [pc, #352]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016cc:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016d2:	4855      	ldr	r0, [pc, #340]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016d4:	f002 fa36 	bl	8003b44 <HAL_DMA_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80016de:	f7ff fe95 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a50      	ldr	r2, [pc, #320]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_I2C_MspInit+0x240>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	201f      	movs	r0, #31
 80016f4:	f001 fe7e 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016f8:	201f      	movs	r0, #31
 80016fa:	f001 fe97 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2105      	movs	r1, #5
 8001702:	2020      	movs	r0, #32
 8001704:	f001 fe76 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001708:	2020      	movs	r0, #32
 800170a:	f001 fe8f 	bl	800342c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800170e:	e080      	b.n	8001812 <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a46      	ldr	r2, [pc, #280]	@ (8001830 <HAL_I2C_MspInit+0x248>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d17b      	bne.n	8001812 <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800171a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4618      	mov	r0, r3
 800172c:	f007 fb6a 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_MspInit+0x152>
      Error_Handler();
 8001736:	f7ff fe69 	bl	800140c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001752:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800176c:	2304      	movs	r3, #4
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001772:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001776:	4619      	mov	r1, r3
 8001778:	482e      	ldr	r0, [pc, #184]	@ (8001834 <HAL_I2C_MspInit+0x24c>)
 800177a:	f004 f8db 	bl	8005934 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 8001784:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_I2C_MspInit+0x238>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 8001796:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 8001798:	4a28      	ldr	r2, [pc, #160]	@ (800183c <HAL_I2C_MspInit+0x254>)
 800179a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 800179c:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 800179e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017a2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017a6:	2240      	movs	r2, #64	@ 0x40
 80017a8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017d8:	f002 f9b4 	bl	8003b44 <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 80017e2:	f7ff fe13 	bl	800140c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_I2C_MspInit+0x250>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	205f      	movs	r0, #95	@ 0x5f
 80017f8:	f001 fdfc 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80017fc:	205f      	movs	r0, #95	@ 0x5f
 80017fe:	f001 fe15 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2060      	movs	r0, #96	@ 0x60
 8001808:	f001 fdf4 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800180c:	2060      	movs	r0, #96	@ 0x60
 800180e:	f001 fe0d 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	37b0      	adds	r7, #176	@ 0xb0
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400
 8001828:	20000310 	.word	0x20000310
 800182c:	40026010 	.word	0x40026010
 8001830:	40006000 	.word	0x40006000
 8001834:	40021400 	.word	0x40021400
 8001838:	20000370 	.word	0x20000370
 800183c:	40026088 	.word	0x40026088

08001840 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <HAL_I2C_MspDeInit+0x94>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11b      	bne.n	800188a <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_I2C_MspDeInit+0x98>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_I2C_MspDeInit+0x98>)
 8001858:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800185e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001862:	481e      	ldr	r0, [pc, #120]	@ (80018dc <HAL_I2C_MspDeInit+0x9c>)
 8001864:	f004 fa12 	bl	8005c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186c:	481b      	ldr	r0, [pc, #108]	@ (80018dc <HAL_I2C_MspDeInit+0x9c>)
 800186e:	f004 fa0d 	bl	8005c8c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fa12 	bl	8003ca0 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800187c:	201f      	movs	r0, #31
 800187e:	f001 fde3 	bl	8003448 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001882:	2020      	movs	r0, #32
 8001884:	f001 fde0 	bl	8003448 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001888:	e01f      	b.n	80018ca <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <HAL_I2C_MspDeInit+0xa0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d11a      	bne.n	80018ca <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_I2C_MspDeInit+0x98>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <HAL_I2C_MspDeInit+0x98>)
 800189a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 80018a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a4:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <HAL_I2C_MspDeInit+0xa4>)
 80018a6:	f004 f9f1 	bl	8005c8c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <HAL_I2C_MspDeInit+0xa4>)
 80018b0:	f004 f9ec 	bl	8005c8c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f9f1 	bl	8003ca0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80018be:	205f      	movs	r0, #95	@ 0x5f
 80018c0:	f001 fdc2 	bl	8003448 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80018c4:	2060      	movs	r0, #96	@ 0x60
 80018c6:	f001 fdbf 	bl	8003448 <HAL_NVIC_DisableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40006000 	.word	0x40006000
 80018e4:	40021400 	.word	0x40021400

080018e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	@ 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	@ (8001a60 <HAL_SPI_MspInit+0x178>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 80ba 	bne.w	8001a80 <HAL_SPI_MspInit+0x198>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	4a54      	ldr	r2, [pc, #336]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 8001912:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001916:	6453      	str	r3, [r2, #68]	@ 0x44
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	4a4e      	ldr	r2, [pc, #312]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001930:	4b4c      	ldr	r3, [pc, #304]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a48      	ldr	r2, [pc, #288]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b46      	ldr	r3, [pc, #280]	@ (8001a64 <HAL_SPI_MspInit+0x17c>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001954:	2360      	movs	r3, #96	@ 0x60
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001964:	2305      	movs	r3, #5
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	483e      	ldr	r0, [pc, #248]	@ (8001a68 <HAL_SPI_MspInit+0x180>)
 8001970:	f003 ffe0 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001974:	2320      	movs	r3, #32
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001984:	2305      	movs	r3, #5
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	4837      	ldr	r0, [pc, #220]	@ (8001a6c <HAL_SPI_MspInit+0x184>)
 8001990:	f003 ffd0 	bl	8005934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001994:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 8001996:	4a37      	ldr	r2, [pc, #220]	@ (8001a74 <HAL_SPI_MspInit+0x18c>)
 8001998:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800199a:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 800199c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c8:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ce:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019d4:	4826      	ldr	r0, [pc, #152]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019d6:	f002 f8b5 	bl	8003b44 <HAL_DMA_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80019e0:	f7ff fd14 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_SPI_MspInit+0x188>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 80019f2:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <HAL_SPI_MspInit+0x194>)
 80019f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 80019f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a00:	2240      	movs	r2, #64	@ 0x40
 8001a02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a30:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a32:	f002 f887 	bl	8003b44 <HAL_DMA_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001a3c:	f7ff fce6 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a44:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a46:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <HAL_SPI_MspInit+0x190>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 6, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2023      	movs	r0, #35	@ 0x23
 8001a52:	f001 fccf 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a56:	2023      	movs	r0, #35	@ 0x23
 8001a58:	f001 fce8 	bl	800342c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a5c:	e0bd      	b.n	8001bda <HAL_SPI_MspInit+0x2f2>
 8001a5e:	bf00      	nop
 8001a60:	40013000 	.word	0x40013000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	20000498 	.word	0x20000498
 8001a74:	40026410 	.word	0x40026410
 8001a78:	200004f8 	.word	0x200004f8
 8001a7c:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a57      	ldr	r2, [pc, #348]	@ (8001be4 <HAL_SPI_MspInit+0x2fc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 80a7 	bne.w	8001bda <HAL_SPI_MspInit+0x2f2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a8c:	4b56      	ldr	r3, [pc, #344]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a55      	ldr	r2, [pc, #340]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a98:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac8:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_SPI_MspInit+0x300>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	483f      	ldr	r0, [pc, #252]	@ (8001bec <HAL_SPI_MspInit+0x304>)
 8001af0:	f003 ff20 	bl	8005934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b06:	2305      	movs	r3, #5
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4837      	ldr	r0, [pc, #220]	@ (8001bf0 <HAL_SPI_MspInit+0x308>)
 8001b12:	f003 ff0f 	bl	8005934 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b18:	4a37      	ldr	r2, [pc, #220]	@ (8001bf8 <HAL_SPI_MspInit+0x310>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b24:	2240      	movs	r2, #64	@ 0x40
 8001b26:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b54:	4827      	ldr	r0, [pc, #156]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b56:	f001 fff5 	bl	8003b44 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 8001b60:	f7ff fc54 	bl	800140c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a23      	ldr	r2, [pc, #140]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b6a:	4a22      	ldr	r2, [pc, #136]	@ (8001bf4 <HAL_SPI_MspInit+0x30c>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	@ (8001c00 <HAL_SPI_MspInit+0x318>)
 8001b74:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b76:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001bae:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001bb0:	f001 ffc8 	bl	8003b44 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_SPI_MspInit+0x2d6>
      Error_Handler();
 8001bba:	f7ff fc27 	bl	800140c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_SPI_MspInit+0x314>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2106      	movs	r1, #6
 8001bce:	2024      	movs	r0, #36	@ 0x24
 8001bd0:	f001 fc10 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bd4:	2024      	movs	r0, #36	@ 0x24
 8001bd6:	f001 fc29 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3738      	adds	r7, #56	@ 0x38
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40003800 	.word	0x40003800
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	20000558 	.word	0x20000558
 8001bf8:	40026070 	.word	0x40026070
 8001bfc:	200005b8 	.word	0x200005b8
 8001c00:	40026058 	.word	0x40026058

08001c04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <HAL_TIM_Base_MspInit+0x44>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d113      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	2037      	movs	r0, #55	@ 0x37
 8001c34:	f001 fbde 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c38:	2037      	movs	r0, #55	@ 0x37
 8001c3a:	f001 fbf7 	bl	800342c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40001400 	.word	0x40001400
 8001c4c:	40023800 	.word	0x40023800

08001c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0b0      	sub	sp, #192	@ 0xc0
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6c:	2284      	movs	r2, #132	@ 0x84
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f01c fb05 	bl	801e280 <memset>
  if(huart->Instance==UART4)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4aaf      	ldr	r2, [pc, #700]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	f040 8095 	bne.w	8001dac <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001c88:	2340      	movs	r3, #64	@ 0x40
 8001c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c90:	4618      	mov	r0, r3
 8001c92:	f007 f8b7 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c9c:	f7ff fbb6 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ca0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	4aa5      	ldr	r2, [pc, #660]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ca6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cac:	4ba3      	ldr	r3, [pc, #652]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4ba0      	ldr	r3, [pc, #640]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	4a9f      	ldr	r2, [pc, #636]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	4a99      	ldr	r2, [pc, #612]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cdc:	4b97      	ldr	r3, [pc, #604]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d00:	2308      	movs	r3, #8
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	488c      	ldr	r0, [pc, #560]	@ (8001f40 <HAL_UART_MspInit+0x2f0>)
 8001d0e:	f003 fe11 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d36:	4619      	mov	r1, r3
 8001d38:	4882      	ldr	r0, [pc, #520]	@ (8001f44 <HAL_UART_MspInit+0x2f4>)
 8001d3a:	f003 fdfb 	bl	8005934 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001d3e:	4b82      	ldr	r3, [pc, #520]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d40:	4a82      	ldr	r2, [pc, #520]	@ (8001f4c <HAL_UART_MspInit+0x2fc>)
 8001d42:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001d44:	4b80      	ldr	r3, [pc, #512]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d52:	4b7d      	ldr	r3, [pc, #500]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d58:	4b7b      	ldr	r3, [pc, #492]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d60:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d66:	4b78      	ldr	r3, [pc, #480]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001d6c:	4b76      	ldr	r3, [pc, #472]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d72:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d78:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d7e:	4872      	ldr	r0, [pc, #456]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d80:	f001 fee0 	bl	8003b44 <HAL_DMA_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001d8a:	f7ff fb3f 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a6d      	ldr	r2, [pc, #436]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d92:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d94:	4a6c      	ldr	r2, [pc, #432]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2106      	movs	r1, #6
 8001d9e:	2034      	movs	r0, #52	@ 0x34
 8001da0:	f001 fb28 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001da4:	2034      	movs	r0, #52	@ 0x34
 8001da6:	f001 fb41 	bl	800342c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001daa:	e0c0      	b.n	8001f2e <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	@ (8001f50 <HAL_UART_MspInit+0x300>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d171      	bne.n	8001e9a <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f007 f81e 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001dce:	f7ff fb1d 	bl	800140c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a59      	ldr	r2, [pc, #356]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b57      	ldr	r3, [pc, #348]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b54      	ldr	r3, [pc, #336]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a53      	ldr	r2, [pc, #332]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b51      	ldr	r3, [pc, #324]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e02:	2360      	movs	r3, #96	@ 0x60
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e24:	4619      	mov	r1, r3
 8001e26:	484b      	ldr	r0, [pc, #300]	@ (8001f54 <HAL_UART_MspInit+0x304>)
 8001e28:	f003 fd84 	bl	8005934 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f5c <HAL_UART_MspInit+0x30c>)
 8001e30:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e32:	4b49      	ldr	r3, [pc, #292]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e3c:	2240      	movs	r2, #64	@ 0x40
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	4b45      	ldr	r3, [pc, #276]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e54:	4b40      	ldr	r3, [pc, #256]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e66:	4b3c      	ldr	r3, [pc, #240]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e6c:	483a      	ldr	r0, [pc, #232]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e6e:	f001 fe69 	bl	8003b44 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001e78:	f7ff fac8 	bl	800140c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a36      	ldr	r2, [pc, #216]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e80:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e82:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <HAL_UART_MspInit+0x308>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2106      	movs	r1, #6
 8001e8c:	2026      	movs	r0, #38	@ 0x26
 8001e8e:	f001 fab1 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e92:	2026      	movs	r0, #38	@ 0x26
 8001e94:	f001 faca 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8001e98:	e049      	b.n	8001f2e <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a30      	ldr	r2, [pc, #192]	@ (8001f60 <HAL_UART_MspInit+0x310>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d144      	bne.n	8001f2e <HAL_UART_MspInit+0x2de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f006 ffa6 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001ebe:	f7ff faa5 	bl	800140c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ef2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f16:	4619      	mov	r1, r3
 8001f18:	480e      	ldr	r0, [pc, #56]	@ (8001f54 <HAL_UART_MspInit+0x304>)
 8001f1a:	f003 fd0b 	bl	8005934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2105      	movs	r1, #5
 8001f22:	2027      	movs	r0, #39	@ 0x27
 8001f24:	f001 fa66 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f28:	2027      	movs	r0, #39	@ 0x27
 8001f2a:	f001 fa7f 	bl	800342c <HAL_NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	37c0      	adds	r7, #192	@ 0xc0
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40004c00 	.word	0x40004c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020800 	.word	0x40020800
 8001f48:	200007fc 	.word	0x200007fc
 8001f4c:	40026040 	.word	0x40026040
 8001f50:	40004400 	.word	0x40004400
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	2000085c 	.word	0x2000085c
 8001f5c:	400260a0 	.word	0x400260a0
 8001f60:	40004800 	.word	0x40004800

08001f64 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0ac      	sub	sp, #176	@ 0xb0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	2284      	movs	r2, #132	@ 0x84
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f01c f97b 	bl	801e280 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f92:	d159      	bne.n	8002048 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f006 ff2d 	bl	8008e04 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fb0:	f7ff fa2c 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fcc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4818      	ldr	r0, [pc, #96]	@ (8002054 <HAL_PCD_MspInit+0xf0>)
 8001ff4:	f003 fc9e 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002010:	4619      	mov	r1, r3
 8002012:	4810      	ldr	r0, [pc, #64]	@ (8002054 <HAL_PCD_MspInit+0xf0>)
 8002014:	f003 fc8e 	bl	8005934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	4a0c      	ldr	r2, [pc, #48]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 800201e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002022:	6353      	str	r3, [r2, #52]	@ 0x34
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	4a06      	ldr	r2, [pc, #24]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 8002036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203a:	6453      	str	r3, [r2, #68]	@ 0x44
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <HAL_PCD_MspInit+0xec>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002048:	bf00      	nop
 800204a:	37b0      	adds	r7, #176	@ 0xb0
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	@ 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_InitTick+0xe0>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a32      	ldr	r2, [pc, #200]	@ (8002138 <HAL_InitTick+0xe0>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <HAL_InitTick+0xe0>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002080:	f107 0210 	add.w	r2, r7, #16
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f006 fe88 	bl	8008da0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800209a:	f006 fe59 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800209e:	6378      	str	r0, [r7, #52]	@ 0x34
 80020a0:	e004      	b.n	80020ac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020a2:	f006 fe55 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 80020a6:	4603      	mov	r3, r0
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <HAL_InitTick+0xe4>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	3b01      	subs	r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_InitTick+0xe8>)
 80020bc:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_InitTick+0xec>)
 80020be:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_InitTick+0xe8>)
 80020c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_InitTick+0xe8>)
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <HAL_InitTick+0xe8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_InitTick+0xe8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_InitTick+0xe8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020e0:	4817      	ldr	r0, [pc, #92]	@ (8002140 <HAL_InitTick+0xe8>)
 80020e2:	f008 feb9 	bl	800ae58 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11b      	bne.n	800212c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <HAL_InitTick+0xe8>)
 80020f6:	f008 ff07 	bl	800af08 <HAL_TIM_Base_Start_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002108:	2036      	movs	r0, #54	@ 0x36
 800210a:	f001 f98f 	bl	800342c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d808      	bhi.n	8002126 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	2036      	movs	r0, #54	@ 0x36
 800211a:	f001 f96b 	bl	80033f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_InitTick+0xf0>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e002      	b.n	800212c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800212c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002130:	4618      	mov	r0, r3
 8002132:	3738      	adds	r7, #56	@ 0x38
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	431bde83 	.word	0x431bde83
 8002140:	20000de0 	.word	0x20000de0
 8002144:	40001000 	.word	0x40001000
 8002148:	20000004 	.word	0x20000004

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 800215a:	4809      	ldr	r0, [pc, #36]	@ (8002180 <HardFault_Handler+0x2c>)
 800215c:	f01b ff38 	bl	801dfd0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002160:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002164:	4807      	ldr	r0, [pc, #28]	@ (8002184 <HardFault_Handler+0x30>)
 8002166:	f003 feb6 	bl	8005ed6 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	e002      	b.n	8002176 <HardFault_Handler+0x22>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3301      	adds	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a03      	ldr	r2, [pc, #12]	@ (8002188 <HardFault_Handler+0x34>)
 800217a:	4293      	cmp	r3, r2
 800217c:	ddf8      	ble.n	8002170 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800217e:	e7ef      	b.n	8002160 <HardFault_Handler+0xc>
 8002180:	0801f0e8 	.word	0x0801f0e8
 8002184:	40020400 	.word	0x40020400
 8002188:	000f423f 	.word	0x000f423f

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <MemManage_Handler+0x10>)
 8002192:	f01b ff1d 	bl	801dfd0 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002196:	bf00      	nop
 8002198:	e7fd      	b.n	8002196 <MemManage_Handler+0xa>
 800219a:	bf00      	nop
 800219c:	0801f0e8 	.word	0x0801f0e8

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <BusFault_Handler+0x10>)
 80021a6:	f01b ff13 	bl	801dfd0 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	bf00      	nop
 80021ac:	e7fd      	b.n	80021aa <BusFault_Handler+0xa>
 80021ae:	bf00      	nop
 80021b0:	0801f0e8 	.word	0x0801f0e8

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <UsageFault_Handler+0x4>

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <DMA1_Stream0_IRQHandler+0x10>)
 80021de:	f001 feaf 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000310 	.word	0x20000310

080021ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <DMA1_Stream2_IRQHandler+0x10>)
 80021f2:	f001 fea5 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200007fc 	.word	0x200007fc

08002200 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <DMA1_Stream3_IRQHandler+0x10>)
 8002206:	f001 fe9b 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200005b8 	.word	0x200005b8

08002214 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <DMA1_Stream4_IRQHandler+0x10>)
 800221a:	f001 fe91 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000558 	.word	0x20000558

08002228 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <DMA1_Stream5_IRQHandler+0x10>)
 800222e:	f001 fe87 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000370 	.word	0x20000370

0800223c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <DMA1_Stream6_IRQHandler+0x10>)
 8002242:	f001 fe7d 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000085c 	.word	0x2000085c

08002250 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <ADC_IRQHandler+0x10>)
 8002256:	f000 fc61 	bl	8002b1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200001e8 	.word	0x200001e8

08002264 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <I2C1_EV_IRQHandler+0x10>)
 800226a:	f004 f9e7 	bl	800663c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000268 	.word	0x20000268

08002278 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <I2C1_ER_IRQHandler+0x10>)
 800227e:	f004 f9f7 	bl	8006670 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000268 	.word	0x20000268

0800228c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <SPI1_IRQHandler+0x10>)
 8002292:	f007 ffad 	bl	800a1f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200003d0 	.word	0x200003d0

080022a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <SPI2_IRQHandler+0x10>)
 80022a6:	f007 ffa3 	bl	800a1f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000434 	.word	0x20000434

080022b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <USART2_IRQHandler+0x10>)
 80022ba:	f009 fc83 	bl	800bbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200006ec 	.word	0x200006ec

080022c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <USART3_IRQHandler+0x10>)
 80022ce:	f009 fc79 	bl	800bbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000774 	.word	0x20000774

080022dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80022e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022e4:	f003 fe12 	bl	8005f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <UART4_IRQHandler+0x10>)
 80022f2:	f009 fc67 	bl	800bbc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000664 	.word	0x20000664

08002300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <TIM6_DAC_IRQHandler+0x20>)
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <TIM6_DAC_IRQHandler+0x20>)
 8002310:	f001 fb2b 	bl	800396a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002314:	4803      	ldr	r0, [pc, #12]	@ (8002324 <TIM6_DAC_IRQHandler+0x24>)
 8002316:	f008 fe9f 	bl	800b058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000254 	.word	0x20000254
 8002324:	20000de0 	.word	0x20000de0

08002328 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <TIM7_IRQHandler+0x10>)
 800232e:	f008 fe93 	bl	800b058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000618 	.word	0x20000618

0800233c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA2_Stream0_IRQHandler+0x10>)
 8002342:	f001 fdfd 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000498 	.word	0x20000498

08002350 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA2_Stream3_IRQHandler+0x10>)
 8002356:	f001 fdf3 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004f8 	.word	0x200004f8

08002364 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <ETH_IRQHandler+0x10>)
 800236a:	f002 fbfb 	bl	8004b64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000a1b8 	.word	0x2000a1b8

08002378 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <ETH_WKUP_IRQHandler+0x10>)
 800237e:	f002 fbf1 	bl	8004b64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000a1b8 	.word	0x2000a1b8

0800238c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <I2C4_EV_IRQHandler+0x10>)
 80023a2:	f004 f94b 	bl	800663c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002bc 	.word	0x200002bc

080023b0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <I2C4_ER_IRQHandler+0x10>)
 80023b6:	f004 f95b 	bl	8006670 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200002bc 	.word	0x200002bc

080023c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return 1;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_kill>:

int _kill(int pid, int sig)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <_kill+0x20>)
 80023e0:	2216      	movs	r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20027e4c 	.word	0x20027e4c

080023f8 <_exit>:

void _exit (int status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffe5 	bl	80023d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800240a:	bf00      	nop
 800240c:	e7fd      	b.n	800240a <_exit+0x12>

0800240e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e00a      	b.n	8002436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002420:	f3af 8000 	nop.w
 8002424:	4601      	mov	r1, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf0      	blt.n	8002420 <_read+0x12>
  }

  return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e009      	b.n	800246e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	60ba      	str	r2, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fef6 	bl	8001254 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbf1      	blt.n	800245a <_write+0x12>
  }
  return len;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_close>:

int _close(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024a8:	605a      	str	r2, [r3, #4]
  return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_isatty>:

int _isatty(int file)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c0:	2301      	movs	r3, #1
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d205      	bcs.n	8002524 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <_sbrk+0x6c>)
 800251a:	220c      	movs	r2, #12
 800251c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e009      	b.n	8002538 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	4a06      	ldr	r2, [pc, #24]	@ (800254c <_sbrk+0x64>)
 8002534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20050000 	.word	0x20050000
 8002548:	00000400 	.word	0x00000400
 800254c:	20000e2c 	.word	0x20000e2c
 8002550:	20027e60 	.word	0x20027e60
 8002554:	20027e4c 	.word	0x20027e4c

08002558 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <SystemInit+0x20>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <SystemInit+0x20>)
 8002564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800257c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002580:	f7ff ffea 	bl	8002558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002586:	490d      	ldr	r1, [pc, #52]	@ (80025bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800258c:	e002      	b.n	8002594 <LoopCopyDataInit>

0800258e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002592:	3304      	adds	r3, #4

08002594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002598:	d3f9      	bcc.n	800258e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800259c:	4c0a      	ldr	r4, [pc, #40]	@ (80025c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a0:	e001      	b.n	80025a6 <LoopFillZerobss>

080025a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a4:	3204      	adds	r2, #4

080025a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a8:	d3fb      	bcc.n	80025a2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80025aa:	f01b ff15 	bl	801e3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ae:	f7fe f815 	bl	80005dc <main>
  bx  lr    
 80025b2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80025b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80025c0:	080223e8 	.word	0x080223e8
  ldr r2, =_sbss
 80025c4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80025c8:	20027e5c 	.word	0x20027e5c

080025cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025cc:	e7fe      	b.n	80025cc <CAN1_RX0_IRQHandler>

080025ce <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <LAN8742_RegisterBusIO+0x28>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <LAN8742_RegisterBusIO+0x28>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <LAN8742_RegisterBusIO+0x28>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e014      	b.n	8002626 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d139      	bne.n	80026c2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e01c      	b.n	80026a2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f107 020c 	add.w	r2, r7, #12
 8002670:	2112      	movs	r1, #18
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	4798      	blx	r3
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	da03      	bge.n	8002684 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800267c:	f06f 0304 	mvn.w	r3, #4
 8002680:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002682:	e00b      	b.n	800269c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d105      	bne.n	800269c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
         break;
 800269a:	e005      	b.n	80026a8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b1f      	cmp	r3, #31
 80026a6:	d9df      	bls.n	8002668 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b1f      	cmp	r3, #31
 80026ae:	d902      	bls.n	80026b6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80026b0:	f06f 0302 	mvn.w	r3, #2
 80026b4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80026c2:	693b      	ldr	r3, [r7, #16]
 }
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6810      	ldr	r0, [r2, #0]
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	2101      	movs	r1, #1
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da02      	bge.n	80026f4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026ee:	f06f 0304 	mvn.w	r3, #4
 80026f2:	e06e      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6810      	ldr	r0, [r2, #0]
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	2101      	movs	r1, #1
 8002702:	4798      	blx	r3
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	da02      	bge.n	8002710 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800270a:	f06f 0304 	mvn.w	r3, #4
 800270e:	e060      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800271a:	2301      	movs	r3, #1
 800271c:	e059      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6810      	ldr	r0, [r2, #0]
 8002726:	f107 020c 	add.w	r2, r7, #12
 800272a:	2100      	movs	r1, #0
 800272c:	4798      	blx	r3
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	da02      	bge.n	800273a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002734:	f06f 0304 	mvn.w	r3, #4
 8002738:	e04b      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11b      	bne.n	800277c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <LAN8742_GetLinkState+0x90>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002758:	2302      	movs	r3, #2
 800275a:	e03a      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002766:	2303      	movs	r3, #3
 8002768:	e033      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002774:	2304      	movs	r3, #4
 8002776:	e02c      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002778:	2305      	movs	r3, #5
 800277a:	e02a      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6810      	ldr	r0, [r2, #0]
 8002784:	f107 020c 	add.w	r2, r7, #12
 8002788:	211f      	movs	r1, #31
 800278a:	4798      	blx	r3
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	da02      	bge.n	8002798 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002792:	f06f 0304 	mvn.w	r3, #4
 8002796:	e01c      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80027a2:	2306      	movs	r3, #6
 80027a4:	e015      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 031c 	and.w	r3, r3, #28
 80027ac:	2b18      	cmp	r3, #24
 80027ae:	d101      	bne.n	80027b4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027b0:	2302      	movs	r3, #2
 80027b2:	e00e      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 031c 	and.w	r3, r3, #28
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d101      	bne.n	80027c2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027be:	2303      	movs	r3, #3
 80027c0:	e007      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 031c 	and.w	r3, r3, #28
 80027c8:	2b14      	cmp	r3, #20
 80027ca:	d101      	bne.n	80027d0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027cc:	2304      	movs	r3, #4
 80027ce:	e000      	b.n	80027d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027d0:	2305      	movs	r3, #5
    }
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027de:	2003      	movs	r0, #3
 80027e0:	f000 fdfd 	bl	80033de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e4:	2005      	movs	r0, #5
 80027e6:	f7ff fc37 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ea:	f7fe fe15 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x20>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_IncTick+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <HAL_IncTick+0x24>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000008 	.word	0x20000008
 8002818:	20000e30 	.word	0x20000e30

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000e30 	.word	0x20000e30

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff ffee 	bl	800281c <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d005      	beq.n	800285a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_Delay+0x44>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285a:	bf00      	nop
 800285c:	f7ff ffde 	bl	800281c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d8f7      	bhi.n	800285c <HAL_Delay+0x28>
  {
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000008 	.word	0x20000008

0800287c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e031      	b.n	80028f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fdf4 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_ADC_Init+0x84>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	f043 0202 	orr.w	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fbb2 	bl	8003034 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80028e6:	e001      	b.n	80028ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	ffffeefd 	.word	0xffffeefd

08002904 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADC_Stop+0x16>
 8002916:	2302      	movs	r3, #2
 8002918:	e01f      	b.n	800295a <HAL_ADC_Stop+0x56>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_ADC_Stop+0x64>)
 8002946:	4013      	ands	r3, r2
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	ffffeefe 	.word	0xffffeefe

0800296c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_ADC_Start_IT+0x1a>
 8002982:	2302      	movs	r3, #2
 8002984:	e0b5      	b.n	8002af2 <HAL_ADC_Start_IT+0x186>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d018      	beq.n	80029ce <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029ac:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <HAL_ADC_Start_IT+0x194>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a54      	ldr	r2, [pc, #336]	@ (8002b04 <HAL_ADC_Start_IT+0x198>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9a      	lsrs	r2, r3, #18
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d17d      	bne.n	8002ad8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e0:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <HAL_ADC_Start_IT+0x19c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a16:	d106      	bne.n	8002a26 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f023 0206 	bic.w	r2, r3, #6
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a3c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_ADC_Start_IT+0x1a0>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a4e:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <HAL_ADC_Start_IT+0x1a4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d143      	bne.n	8002af0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e03a      	b.n	8002af0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <HAL_ADC_Start_IT+0x1a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10e      	bne.n	8002aa2 <HAL_ADC_Start_IT+0x136>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aa0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_ADC_Start_IT+0x1a4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d120      	bne.n	8002af0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a19      	ldr	r2, [pc, #100]	@ (8002b18 <HAL_ADC_Start_IT+0x1ac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_ADC_Start_IT+0x184>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d114      	bne.n	8002af0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	e00b      	b.n	8002af0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f043 0210 	orr.w	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000
 8002b04:	431bde83 	.word	0x431bde83
 8002b08:	fffff8fe 	.word	0xfffff8fe
 8002b0c:	04000020 	.word	0x04000020
 8002b10:	40012300 	.word	0x40012300
 8002b14:	40012000 	.word	0x40012000
 8002b18:	40012200 	.word	0x40012200

08002b1c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d049      	beq.n	8002be6 <HAL_ADC_IRQHandler+0xca>
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d046      	beq.n	8002be6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d12b      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d127      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0220 	bic.w	r2, r2, #32
 8002bb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f01a fada 	bl	801d190 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0212 	mvn.w	r2, #18
 8002be4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d057      	beq.n	8002cac <HAL_ADC_IRQHandler+0x190>
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d054      	beq.n	8002cac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d139      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d12b      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d124      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d119      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fac3 	bl	8003228 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 020c 	mvn.w	r2, #12
 8002caa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d014      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f837 	bl	8002d56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d00:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x218>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0220 	mvn.w	r2, #32
 8002d22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f820 	bl	8002d6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0220 	mvn.w	r2, #32
 8002d32:	601a      	str	r2, [r3, #0]
  }
}
 8002d34:	bf00      	nop
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e13a      	b.n	8003012 <HAL_ADC_ConfigChannel+0x292>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	d93a      	bls.n	8002e22 <HAL_ADC_ConfigChannel+0xa2>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002db4:	d035      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68d9      	ldr	r1, [r3, #12]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b1e      	subs	r3, #30
 8002dcc:	2207      	movs	r2, #7
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	400a      	ands	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a8f      	ldr	r2, [pc, #572]	@ (8003020 <HAL_ADC_ConfigChannel+0x2a0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10a      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68d9      	ldr	r1, [r3, #12]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	061a      	lsls	r2, r3, #24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfa:	e039      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4403      	add	r3, r0
 8002e14:	3b1e      	subs	r3, #30
 8002e16:	409a      	lsls	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e20:	e026      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6919      	ldr	r1, [r3, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43da      	mvns	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	400a      	ands	r2, r1
 8002e48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4403      	add	r3, r0
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	409a      	lsls	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d824      	bhi.n	8002ec2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b05      	subs	r3, #5
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b05      	subs	r3, #5
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ec0:	e04c      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d824      	bhi.n	8002f14 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b23      	subs	r3, #35	@ 0x23
 8002edc:	221f      	movs	r2, #31
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b23      	subs	r3, #35	@ 0x23
 8002f06:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f12:	e023      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b41      	subs	r3, #65	@ 0x41
 8002f26:	221f      	movs	r2, #31
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	400a      	ands	r2, r1
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b41      	subs	r3, #65	@ 0x41
 8002f50:	fa00 f203 	lsl.w	r2, r0, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10a      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1fc>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f70:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f76:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10f      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x226>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f8e:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f98:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a22      	ldr	r2, [pc, #136]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_ADC_ConfigChannel+0x2a4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d12b      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x288>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x242>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b11      	cmp	r3, #17
 8002fc0:	d122      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fc8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002fcc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fce:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a15      	ldr	r2, [pc, #84]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fd8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d111      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_ADC_ConfigChannel+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a11      	ldr	r2, [pc, #68]	@ (8003030 <HAL_ADC_ConfigChannel+0x2b0>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9a      	lsrs	r2, r3, #18
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	10000012 	.word	0x10000012
 8003024:	40012000 	.word	0x40012000
 8003028:	40012300 	.word	0x40012300
 800302c:	20000000 	.word	0x20000000
 8003030:	431bde83 	.word	0x431bde83

08003034 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800303c:	4b78      	ldr	r3, [pc, #480]	@ (8003220 <ADC_Init+0x1ec>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a77      	ldr	r2, [pc, #476]	@ (8003220 <ADC_Init+0x1ec>)
 8003042:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003046:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003048:	4b75      	ldr	r3, [pc, #468]	@ (8003220 <ADC_Init+0x1ec>)
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4973      	ldr	r1, [pc, #460]	@ (8003220 <ADC_Init+0x1ec>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	021a      	lsls	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	4a58      	ldr	r2, [pc, #352]	@ (8003224 <ADC_Init+0x1f0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e00f      	b.n	800312e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800311c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800312c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0202 	bic.w	r2, r2, #2
 800313c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	005a      	lsls	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800317a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	3b01      	subs	r3, #1
 8003188:	035a      	lsls	r2, r3, #13
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e007      	b.n	80031a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	3b01      	subs	r3, #1
 80031c0:	051a      	lsls	r2, r3, #20
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031e6:	025a      	lsls	r2, r3, #9
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	029a      	lsls	r2, r3, #10
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012300 	.word	0x40012300
 8003224:	0f000001 	.word	0x0f000001

08003228 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <__NVIC_SetPriorityGrouping+0x40>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003264:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	4313      	orrs	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <__NVIC_SetPriorityGrouping+0x40>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00
 8003280:	05fa0000 	.word	0x05fa0000

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db0b      	blt.n	80032ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4907      	ldr	r1, [pc, #28]	@ (80032d8 <__NVIC_EnableIRQ+0x38>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db12      	blt.n	8003314 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	490a      	ldr	r1, [pc, #40]	@ (8003320 <__NVIC_DisableIRQ+0x44>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	3320      	adds	r3, #32
 8003304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003308:	f3bf 8f4f 	dsb	sy
}
 800330c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800330e:	f3bf 8f6f 	isb	sy
}
 8003312:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	@ (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	@ (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff28 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003406:	f7ff ff3d 	bl	8003284 <__NVIC_GetPriorityGrouping>
 800340a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f7ff ffb1 	bl	8003378 <NVIC_EncodePriority>
 8003416:	4602      	mov	r2, r0
 8003418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff80 	bl	8003324 <__NVIC_SetPriority>
}
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff30 	bl	80032a0 <__NVIC_EnableIRQ>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff40 	bl	80032dc <__NVIC_DisableIRQ>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e054      	b.n	8003520 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7f5b      	ldrb	r3, [r3, #29]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f846 	bl	8001518 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	791b      	ldrb	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10c      	bne.n	80034b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_CRC_Init+0xc4>)
 80034a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0218 	bic.w	r2, r2, #24
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	e00c      	b.n	80034ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	461a      	mov	r2, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f94c 	bl	800375c <HAL_CRCEx_Polynomial_Set>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e028      	b.n	8003520 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	795b      	ldrb	r3, [r3, #5]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	611a      	str	r2, [r3, #16]
 80034e0:	e004      	b.n	80034ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6912      	ldr	r2, [r2, #16]
 80034ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	04c11db7 	.word	0x04c11db7

0800352c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2202      	movs	r2, #2
 8003540:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d006      	beq.n	8003568 <HAL_CRC_Calculate+0x3c>
 800355a:	2b03      	cmp	r3, #3
 800355c:	d829      	bhi.n	80035b2 <HAL_CRC_Calculate+0x86>
 800355e:	2b01      	cmp	r3, #1
 8003560:	d019      	beq.n	8003596 <HAL_CRC_Calculate+0x6a>
 8003562:	2b02      	cmp	r3, #2
 8003564:	d01e      	beq.n	80035a4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003566:	e024      	b.n	80035b2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e00a      	b.n	8003584 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	441a      	add	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3301      	adds	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3f0      	bcc.n	800356e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
      break;
 8003594:	e00e      	b.n	80035b4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f812 	bl	80035c4 <CRC_Handle_8>
 80035a0:	6138      	str	r0, [r7, #16]
      break;
 80035a2:	e007      	b.n	80035b4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f89d 	bl	80036e8 <CRC_Handle_16>
 80035ae:	6138      	str	r0, [r7, #16]
      break;
 80035b0:	e000      	b.n	80035b4 <HAL_CRC_Calculate+0x88>
      break;
 80035b2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80035ba:	693b      	ldr	r3, [r7, #16]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	e023      	b.n	800361e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3301      	adds	r3, #1
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	440b      	add	r3, r1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035f0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	440b      	add	r3, r1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003600:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3303      	adds	r3, #3
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	440b      	add	r3, r1
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003614:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3301      	adds	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3d6      	bcc.n	80035d6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d051      	beq.n	80036d6 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d108      	bne.n	800364e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4413      	add	r3, r2
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	7013      	strb	r3, [r2, #0]
 800364c:	e043      	b.n	80036d6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d118      	bne.n	800368a <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	4413      	add	r3, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b21b      	sxth	r3, r3
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	b21a      	sxth	r2, r3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3301      	adds	r3, #1
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	440b      	add	r3, r1
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b21b      	sxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b21b      	sxth	r3, r3
 800367a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	8b7a      	ldrh	r2, [r7, #26]
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	e025      	b.n	80036d6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d120      	bne.n	80036d6 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b21b      	sxth	r3, r3
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	3301      	adds	r3, #1
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	440b      	add	r3, r1
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	8b7a      	ldrh	r2, [r7, #26]
 80036c2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4413      	add	r3, r2
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3724      	adds	r7, #36	@ 0x24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e013      	b.n	8003722 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	440b      	add	r3, r1
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	4619      	mov	r1, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	429a      	cmp	r2, r3
 800372a:	d3e6      	bcc.n	80036fa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	4413      	add	r3, r2
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800376c:	231f      	movs	r3, #31
 800376e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
 800377e:	e063      	b.n	8003848 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003780:	bf00      	nop
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1e5a      	subs	r2, r3, #1
 8003786:	613a      	str	r2, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_CRCEx_Polynomial_Set+0x44>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b18      	cmp	r3, #24
 80037a4:	d846      	bhi.n	8003834 <HAL_CRCEx_Polynomial_Set+0xd8>
 80037a6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <HAL_CRCEx_Polynomial_Set+0x50>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	0800383b 	.word	0x0800383b
 80037b0:	08003835 	.word	0x08003835
 80037b4:	08003835 	.word	0x08003835
 80037b8:	08003835 	.word	0x08003835
 80037bc:	08003835 	.word	0x08003835
 80037c0:	08003835 	.word	0x08003835
 80037c4:	08003835 	.word	0x08003835
 80037c8:	08003835 	.word	0x08003835
 80037cc:	08003829 	.word	0x08003829
 80037d0:	08003835 	.word	0x08003835
 80037d4:	08003835 	.word	0x08003835
 80037d8:	08003835 	.word	0x08003835
 80037dc:	08003835 	.word	0x08003835
 80037e0:	08003835 	.word	0x08003835
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003835 	.word	0x08003835
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	08003835 	.word	0x08003835
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003835 	.word	0x08003835
 8003804:	08003835 	.word	0x08003835
 8003808:	08003835 	.word	0x08003835
 800380c:	08003811 	.word	0x08003811
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b06      	cmp	r3, #6
 8003814:	d913      	bls.n	800383e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800381a:	e010      	b.n	800383e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b07      	cmp	r3, #7
 8003820:	d90f      	bls.n	8003842 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003826:	e00c      	b.n	8003842 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	d90b      	bls.n	8003846 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003832:	e008      	b.n	8003846 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
        break;
 8003838:	e006      	b.n	8003848 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003846:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 0118 	bic.w	r1, r3, #24
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e014      	b.n	80038b4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	791b      	ldrb	r3, [r3, #4]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fe5c 	bl	8001558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e046      	b.n	800395e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	795b      	ldrb	r3, [r3, #5]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_DAC_Start+0x20>
 80038d8:	2302      	movs	r3, #2
 80038da:	e040      	b.n	800395e <HAL_DAC_Start+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003910:	2b3c      	cmp	r3, #60	@ 0x3c
 8003912:	d11d      	bne.n	8003950 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	e014      	b.n	8003950 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	213c      	movs	r1, #60	@ 0x3c
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0202 	orr.w	r2, r2, #2
 800394e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01d      	beq.n	80039c8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f851 	bl	8003a6a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01d      	beq.n	8003a0e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d018      	beq.n	8003a0e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2204      	movs	r2, #4
 80039e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f891 	bl	8003b30 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e015      	b.n	8003a5e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3308      	adds	r3, #8
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e004      	b.n	8003a54 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3314      	adds	r3, #20
 8003a52:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	461a      	mov	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b089      	sub	sp, #36	@ 0x24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_DAC_ConfigChannel+0x1c>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e042      	b.n	8003b24 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	795b      	ldrb	r3, [r3, #5]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_DAC_ConfigChannel+0x2c>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e03c      	b.n	8003b24 <HAL_DAC_ConfigChannel+0xa6>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	22c0      	movs	r2, #192	@ 0xc0
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	400a      	ands	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3724      	adds	r7, #36	@ 0x24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7fe fe64 	bl	800281c <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e099      	b.n	8003c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b80:	e00f      	b.n	8003ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b82:	f7fe fe4b 	bl	800281c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d908      	bls.n	8003ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e078      	b.n	8003c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e8      	bne.n	8003b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4b38      	ldr	r3, [pc, #224]	@ (8003c9c <HAL_DMA_Init+0x158>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d107      	bne.n	8003c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	4313      	orrs	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0307 	bic.w	r3, r3, #7
 8003c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d117      	bne.n	8003c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb81 	bl	8004350 <DMA_CheckFifoParam>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2240      	movs	r2, #64	@ 0x40
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c62:	2301      	movs	r3, #1
 8003c64:	e016      	b.n	8003c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fb38 	bl	80042e4 <DMA_CalcBaseAndBitshift>
 8003c74:	4603      	mov	r3, r0
 8003c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7c:	223f      	movs	r2, #63	@ 0x3f
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	f010803f 	.word	0xf010803f

08003ca0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e050      	b.n	8003d54 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e048      	b.n	8003d54 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2221      	movs	r2, #33	@ 0x21
 8003d00:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 faee 	bl	80042e4 <DMA_CalcBaseAndBitshift>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	223f      	movs	r2, #63	@ 0x3f
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_Start_IT+0x26>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e048      	b.n	8003e14 <HAL_DMA_Start_IT+0xb8>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d137      	bne.n	8003e06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa6c 	bl	8004288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	223f      	movs	r2, #63	@ 0x3f
 8003db6:	409a      	lsls	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0216 	orr.w	r2, r2, #22
 8003dca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dda:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e005      	b.n	8003e12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7fe fcf7 	bl	800281c <HAL_GetTick>
 8003e2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d008      	beq.n	8003e4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e052      	b.n	8003ef4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0216 	bic.w	r2, r2, #22
 8003e5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_DMA_Abort+0x62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0208 	bic.w	r2, r2, #8
 8003e8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9e:	e013      	b.n	8003ec8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea0:	f7fe fcbc 	bl	800281c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d90c      	bls.n	8003ec8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e015      	b.n	8003ef4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e4      	bne.n	8003ea0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eda:	223f      	movs	r2, #63	@ 0x3f
 8003edc:	409a      	lsls	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d004      	beq.n	8003f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00c      	b.n	8003f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004188 <HAL_DMA_IRQHandler+0x248>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a8e      	ldr	r2, [pc, #568]	@ (800418c <HAL_DMA_IRQHandler+0x24c>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01a      	beq.n	8003fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0204 	bic.w	r2, r2, #4
 8003f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	2208      	movs	r2, #8
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0201 	orr.w	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d012      	beq.n	8004018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	2204      	movs	r2, #4
 8004006:	409a      	lsls	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	2210      	movs	r2, #16
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d043      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03c      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	2210      	movs	r2, #16
 800403c:	409a      	lsls	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d018      	beq.n	8004082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d024      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	e01f      	b.n	80040b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01b      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
 8004080:	e016      	b.n	80040b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0208 	bic.w	r2, r2, #8
 800409e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	2220      	movs	r2, #32
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 808f 	beq.w	80041e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8087 	beq.w	80041e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	2220      	movs	r2, #32
 80040d8:	409a      	lsls	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d136      	bne.n	8004158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0216 	bic.w	r2, r2, #22
 80040f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <HAL_DMA_IRQHandler+0x1da>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0208 	bic.w	r2, r2, #8
 8004128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	223f      	movs	r2, #63	@ 0x3f
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d07e      	beq.n	800424c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
        }
        return;
 8004156:	e079      	b.n	800424c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01d      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004178:	2b00      	cmp	r3, #0
 800417a:	d031      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
 8004184:	e02c      	b.n	80041e0 <HAL_DMA_IRQHandler+0x2a0>
 8004186:	bf00      	nop
 8004188:	20000000 	.word	0x20000000
 800418c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d023      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
 80041a0:	e01e      	b.n	80041e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10f      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0210 	bic.w	r2, r2, #16
 80041be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d032      	beq.n	800424e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d022      	beq.n	800423a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2205      	movs	r2, #5
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	3301      	adds	r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	d307      	bcc.n	8004228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f2      	bne.n	800420c <HAL_DMA_IRQHandler+0x2cc>
 8004226:	e000      	b.n	800422a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004228:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
 800424a:	e000      	b.n	800424e <HAL_DMA_IRQHandler+0x30e>
        return;
 800424c:	bf00      	nop
    }
  }
}
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004262:	b2db      	uxtb	r3, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b40      	cmp	r3, #64	@ 0x40
 80042b4:	d108      	bne.n	80042c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042c6:	e007      	b.n	80042d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	3b10      	subs	r3, #16
 80042f4:	4a13      	ldr	r2, [pc, #76]	@ (8004344 <DMA_CalcBaseAndBitshift+0x60>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <DMA_CalcBaseAndBitshift+0x64>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d908      	bls.n	8004324 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <DMA_CalcBaseAndBitshift+0x68>)
 800431a:	4013      	ands	r3, r2
 800431c:	1d1a      	adds	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	659a      	str	r2, [r3, #88]	@ 0x58
 8004322:	e006      	b.n	8004332 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <DMA_CalcBaseAndBitshift+0x68>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	aaaaaaab 	.word	0xaaaaaaab
 8004348:	080221c4 	.word	0x080221c4
 800434c:	fffffc00 	.word	0xfffffc00

08004350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11f      	bne.n	80043aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d856      	bhi.n	800441e <DMA_CheckFifoParam+0xce>
 8004370:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <DMA_CheckFifoParam+0x28>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004389 	.word	0x08004389
 800437c:	0800439b 	.word	0x0800439b
 8004380:	08004389 	.word	0x08004389
 8004384:	0800441f 	.word	0x0800441f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d046      	beq.n	8004422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004398:	e043      	b.n	8004422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043a2:	d140      	bne.n	8004426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a8:	e03d      	b.n	8004426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b2:	d121      	bne.n	80043f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d837      	bhi.n	800442a <DMA_CheckFifoParam+0xda>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <DMA_CheckFifoParam+0x70>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043d7 	.word	0x080043d7
 80043c8:	080043d1 	.word	0x080043d1
 80043cc:	080043e9 	.word	0x080043e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      break;
 80043d4:	e030      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d025      	beq.n	800442e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e6:	e022      	b.n	800442e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043f0:	d11f      	bne.n	8004432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043f6:	e01c      	b.n	8004432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d903      	bls.n	8004406 <DMA_CheckFifoParam+0xb6>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d003      	beq.n	800440c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004404:	e018      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
      break;
 800440a:	e015      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00e      	beq.n	8004436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e00b      	b.n	8004436 <DMA_CheckFifoParam+0xe6>
      break;
 800441e:	bf00      	nop
 8004420:	e00a      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;
 8004422:	bf00      	nop
 8004424:	e008      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;
 8004426:	bf00      	nop
 8004428:	e006      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;
 800442a:	bf00      	nop
 800442c:	e004      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;
 800442e:	bf00      	nop
 8004430:	e002      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;   
 8004432:	bf00      	nop
 8004434:	e000      	b.n	8004438 <DMA_CheckFifoParam+0xe8>
      break;
 8004436:	bf00      	nop
    }
  } 
  
  return status; 
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e086      	b.n	8004568 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f009 ffc7 	bl	800e400 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <HAL_ETH_Init+0x128>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <HAL_ETH_Init+0x128>)
 8004478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800447c:	6453      	str	r3, [r2, #68]	@ 0x44
 800447e:	4b3c      	ldr	r3, [pc, #240]	@ (8004570 <HAL_ETH_Init+0x128>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800448a:	4b3a      	ldr	r3, [pc, #232]	@ (8004574 <HAL_ETH_Init+0x12c>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a39      	ldr	r2, [pc, #228]	@ (8004574 <HAL_ETH_Init+0x12c>)
 8004490:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004494:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004496:	4b37      	ldr	r3, [pc, #220]	@ (8004574 <HAL_ETH_Init+0x12c>)
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	4935      	ldr	r1, [pc, #212]	@ (8004574 <HAL_ETH_Init+0x12c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80044a4:	4b33      	ldr	r3, [pc, #204]	@ (8004574 <HAL_ETH_Init+0x12c>)
 80044a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c0:	f7fe f9ac 	bl	800281c <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044c6:	e011      	b.n	80044ec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80044c8:	f7fe f9a8 	bl	800281c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80044d6:	d909      	bls.n	80044ec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2204      	movs	r2, #4
 80044dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	22e0      	movs	r2, #224	@ 0xe0
 80044e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e03d      	b.n	8004568 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e4      	bne.n	80044c8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff5c 	bl	80053bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f807 	bl	8005518 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f001 f85d 	bl	80055ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	461a      	mov	r2, r3
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 ffc5 	bl	80054a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800452c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <HAL_ETH_Init+0x130>)
 800453c:	430b      	orrs	r3, r1
 800453e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004552:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2210      	movs	r2, #16
 8004562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	40013800 	.word	0x40013800
 8004578:	00020060 	.word	0x00020060

0800457c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458a:	2b10      	cmp	r3, #16
 800458c:	d15f      	bne.n	800464e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2204      	movs	r2, #4
 80045a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9f6 	bl	8004994 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fe f93f 	bl	8002834 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045d4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045ec:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fd80 	bl	80050f4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800460c:	2001      	movs	r0, #1
 800460e:	f7fe f911 	bl	8002834 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0204 	orr.w	r2, r2, #4
 8004628:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004632:	69d9      	ldr	r1, [r3, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <HAL_ETH_Start_IT+0xdc>)
 800463a:	430b      	orrs	r3, r1
 800463c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004640:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2240      	movs	r2, #64	@ 0x40
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	0001a0c1 	.word	0x0001a0c1

0800465c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466a:	2b40      	cmp	r3, #64	@ 0x40
 800466c:	d16e      	bne.n	800474c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b34      	ldr	r3, [pc, #208]	@ (8004758 <HAL_ETH_Stop_IT+0xfc>)
 8004686:	400b      	ands	r3, r1
 8004688:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800468c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046a4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	f023 0302 	bic.w	r3, r3, #2
 80046b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046bc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0204 	bic.w	r2, r2, #4
 80046cc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046d6:	2001      	movs	r0, #1
 80046d8:	f7fe f8ac 	bl	8002834 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fd05 	bl	80050f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0208 	bic.w	r2, r2, #8
 80046f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004702:	2001      	movs	r0, #1
 8004704:	f7fe f896 	bl	8002834 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e00e      	b.n	8004734 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	3212      	adds	r2, #18
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	3301      	adds	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d9ed      	bls.n	8004716 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2210      	movs	r2, #16
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	fffe5f3e 	.word	0xfffe5f3e

0800475c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e045      	b.n	800480c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d13f      	bne.n	800480a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004792:	2201      	movs	r2, #1
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 ff86 	bl	80056a8 <ETH_Prepare_Tx_Descriptors>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f043 0202 	orr.w	r2, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e02a      	b.n	800480c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80047b6:	f3bf 8f4f 	dsb	sy
}
 80047ba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d904      	bls.n	80047d8 <HAL_ETH_Transmit_IT+0x7c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	1f1a      	subs	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f2:	461a      	mov	r2, r3
 80047f4:	2304      	movs	r3, #4
 80047f6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0a4      	b.n	800498a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004846:	2b40      	cmp	r3, #64	@ 0x40
 8004848:	d001      	beq.n	800484e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e09d      	b.n	800498a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	3212      	adds	r2, #18
 800485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004864:	f1c3 0304 	rsb	r3, r3, #4
 8004868:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800486a:	e066      	b.n	800493a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <HAL_ETH_ReadData+0x88>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03c      	beq.n	8004916 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80048be:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f009 ff57 	bl	800e7a8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2200      	movs	r2, #0
 8004914:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3301      	adds	r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d902      	bls.n	8004928 <HAL_ETH_ReadData+0x114>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3b04      	subs	r3, #4
 8004926:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	3212      	adds	r2, #18
 800492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004932:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3301      	adds	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800493e:	2b00      	cmp	r3, #0
 8004940:	db06      	blt.n	8004950 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d202      	bcs.n	8004950 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d08d      	beq.n	800486c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f815 	bl	8004994 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80049a0:	2301      	movs	r3, #1
 80049a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	3212      	adds	r2, #18
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80049bc:	e042      	b.n	8004a44 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d112      	bne.n	80049ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f009 febc 	bl	800e748 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	74fb      	strb	r3, [r7, #19]
 80049da:	e007      	b.n	80049ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	461a      	mov	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	461a      	mov	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	4b26      	ldr	r3, [pc, #152]	@ (8004a98 <ETH_UpdateDescriptor+0x104>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	6053      	str	r3, [r2, #4]
 8004a06:	e005      	b.n	8004a14 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d902      	bls.n	8004a32 <ETH_UpdateDescriptor+0x9e>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	3212      	adds	r2, #18
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	617b      	str	r3, [r7, #20]
      desccount--;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <ETH_UpdateDescriptor+0xbc>
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1b6      	bne.n	80049be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d01a      	beq.n	8004a90 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3303      	adds	r3, #3
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004a64:	f3bf 8f5f 	dmb	sy
}
 8004a68:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6919      	ldr	r1, [r3, #16]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	18ca      	adds	r2, r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a82:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004a90:	bf00      	nop
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	80004000 	.word	0x80004000

08004a9c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004aba:	e047      	b.n	8004b4c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3304      	adds	r3, #4
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d902      	bls.n	8004ae8 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004aec:	7bbb      	ldrb	r3, [r7, #14]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02c      	beq.n	8004b4c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68d9      	ldr	r1, [r3, #12]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	440b      	add	r3, r1
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db1f      	blt.n	8004b48 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f009 fe89 	bl	800e82c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d902      	bls.n	8004b3a <HAL_ETH_ReleaseTxPacket+0x9e>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3b04      	subs	r3, #4
 8004b38:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b46:	e001      	b.n	8004b4c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1b1      	bne.n	8004abc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <HAL_ETH_IRQHandler+0x158>)
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00e      	beq.n	8004bba <HAL_ETH_IRQHandler+0x56>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_ETH_IRQHandler+0x15c>)
 8004bb2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f009 f963 	bl	800de80 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00f      	beq.n	8004be4 <HAL_ETH_IRQHandler+0x80>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004bdc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f009 f95e 	bl	800dea0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d042      	beq.n	8004c74 <HAL_ETH_IRQHandler+0x110>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03d      	beq.n	8004c74 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfe:	f043 0208 	orr.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01a      	beq.n	8004c48 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <HAL_ETH_IRQHandler+0x160>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c3c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	22e0      	movs	r2, #224	@ 0xe0
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004c46:	e012      	b.n	8004c6e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c56:	4013      	ands	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c66:	461a      	mov	r2, r3
 8004c68:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c6c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f009 f926 	bl	800dec0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00e      	beq.n	8004c9c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f81a 	bl	8004cc8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_ETH_IRQHandler+0x158>)
 8004ca8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004cac:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f814 	bl	8004cdc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40013c00 	.word	0x40013c00
 8004cc0:	00010040 	.word	0x00010040
 8004cc4:	007e2000 	.word	0x007e2000

08004cc8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f003 031c 	and.w	r3, r3, #28
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	02db      	lsls	r3, r3, #11
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0302 	bic.w	r3, r3, #2
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004d40:	f7fd fd6c 	bl	800281c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d46:	e00d      	b.n	8004d64 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004d48:	f7fd fd68 	bl	800281c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d56:	d301      	bcc.n	8004d5c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e010      	b.n	8004d7e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ec      	bne.n	8004d48 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 031c 	and.w	r3, r3, #28
 8004da2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	02db      	lsls	r3, r3, #11
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f043 0302 	orr.w	r3, r3, #2
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de0:	f7fd fd1c 	bl	800281c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004de6:	e00d      	b.n	8004e04 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004de8:	f7fd fd18 	bl	800281c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df6:	d301      	bcc.n	8004dfc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e009      	b.n	8004e10 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ec      	bne.n	8004de8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0e6      	b.n	8004ffa <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e00b      	b.n	8005032 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005020:	2b10      	cmp	r3, #16
 8005022:	d105      	bne.n	8005030 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f88a 	bl	8005140 <ETH_SetMACConfig>

    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 031c 	bic.w	r3, r3, #28
 8005052:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005054:	f003 fe70 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8005058:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a14      	ldr	r2, [pc, #80]	@ (80050b0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d804      	bhi.n	800506c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e019      	b.n	80050a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d204      	bcs.n	800507e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f043 030c 	orr.w	r3, r3, #12
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e010      	b.n	80050a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d90c      	bls.n	80050a0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <HAL_ETH_SetMDIOClockRange+0x80>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d804      	bhi.n	8005098 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e003      	b.n	80050a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f043 0310 	orr.w	r3, r3, #16
 800509e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	611a      	str	r2, [r3, #16]
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	02160ebf 	.word	0x02160ebf
 80050b4:	03938700 	.word	0x03938700
 80050b8:	05f5e0ff 	.word	0x05f5e0ff
 80050bc:	08f0d17f 	.word	0x08f0d17f

080050c0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005112:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005116:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005124:	2001      	movs	r0, #1
 8005126:	f7fd fb85 	bl	8002834 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005134:	6193      	str	r3, [r2, #24]
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <ETH_SetMACConfig+0x164>)
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	7b9b      	ldrb	r3, [r3, #14]
 800515e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	7c12      	ldrb	r2, [r2, #16]
 8005164:	2a00      	cmp	r2, #0
 8005166:	d102      	bne.n	800516e <ETH_SetMACConfig+0x2e>
 8005168:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800516c:	e000      	b.n	8005170 <ETH_SetMACConfig+0x30>
 800516e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005170:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	7c52      	ldrb	r2, [r2, #17]
 8005176:	2a00      	cmp	r2, #0
 8005178:	d102      	bne.n	8005180 <ETH_SetMACConfig+0x40>
 800517a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800517e:	e000      	b.n	8005182 <ETH_SetMACConfig+0x42>
 8005180:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005182:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	7fdb      	ldrb	r3, [r3, #31]
 800518e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005190:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	7f92      	ldrb	r2, [r2, #30]
 800519c:	2a00      	cmp	r2, #0
 800519e:	d102      	bne.n	80051a6 <ETH_SetMACConfig+0x66>
 80051a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051a4:	e000      	b.n	80051a8 <ETH_SetMACConfig+0x68>
 80051a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80051a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	7f1b      	ldrb	r3, [r3, #28]
 80051ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	791b      	ldrb	r3, [r3, #4]
 80051bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80051be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d102      	bne.n	80051d0 <ETH_SetMACConfig+0x90>
 80051ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ce:	e000      	b.n	80051d2 <ETH_SetMACConfig+0x92>
 80051d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7bdb      	ldrb	r3, [r3, #15]
 80051d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051ea:	4313      	orrs	r3, r2
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005202:	2001      	movs	r0, #1
 8005204:	f7fd fb16 	bl	8002834 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005226:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800522e:	2a00      	cmp	r2, #0
 8005230:	d101      	bne.n	8005236 <ETH_SetMACConfig+0xf6>
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	e000      	b.n	8005238 <ETH_SetMACConfig+0xf8>
 8005236:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005238:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800523e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005246:	2a01      	cmp	r2, #1
 8005248:	d101      	bne.n	800524e <ETH_SetMACConfig+0x10e>
 800524a:	2208      	movs	r2, #8
 800524c:	e000      	b.n	8005250 <ETH_SetMACConfig+0x110>
 800524e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005250:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005258:	2a01      	cmp	r2, #1
 800525a:	d101      	bne.n	8005260 <ETH_SetMACConfig+0x120>
 800525c:	2204      	movs	r2, #4
 800525e:	e000      	b.n	8005262 <ETH_SetMACConfig+0x122>
 8005260:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800526a:	2a01      	cmp	r2, #1
 800526c:	d101      	bne.n	8005272 <ETH_SetMACConfig+0x132>
 800526e:	2202      	movs	r2, #2
 8005270:	e000      	b.n	8005274 <ETH_SetMACConfig+0x134>
 8005272:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005274:	4313      	orrs	r3, r2
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800528c:	2001      	movs	r0, #1
 800528e:	f7fd fad1 	bl	8002834 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	619a      	str	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	fd20810f 	.word	0xfd20810f

080052a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <ETH_SetDMAConfig+0x110>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	7b1b      	ldrb	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <ETH_SetDMAConfig+0x2c>
 80052ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80052d2:	e000      	b.n	80052d6 <ETH_SetDMAConfig+0x2e>
 80052d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	7b5b      	ldrb	r3, [r3, #13]
 80052da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	7f52      	ldrb	r2, [r2, #29]
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d102      	bne.n	80052ec <ETH_SetDMAConfig+0x44>
 80052e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052ea:	e000      	b.n	80052ee <ETH_SetDMAConfig+0x46>
 80052ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7b9b      	ldrb	r3, [r3, #14]
 80052f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	7f1b      	ldrb	r3, [r3, #28]
 8005302:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	7f9b      	ldrb	r3, [r3, #30]
 800530a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800530c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005312:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800531a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800531c:	4313      	orrs	r3, r2
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532c:	461a      	mov	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800533e:	2001      	movs	r0, #1
 8005340:	f7fd fa78 	bl	8002834 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534c:	461a      	mov	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	791b      	ldrb	r3, [r3, #4]
 8005356:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800535c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005362:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005368:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005370:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005372:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800537a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005380:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800538a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800538e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800539c:	2001      	movs	r0, #1
 800539e:	f7fd fa49 	bl	8002834 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6013      	str	r3, [r2, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	f8de3f23 	.word	0xf8de3f23

080053bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b0a6      	sub	sp, #152	@ 0x98
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053fe:	2300      	movs	r3, #0
 8005400:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005402:	2300      	movs	r3, #0
 8005404:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005408:	2300      	movs	r3, #0
 800540a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005424:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005428:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800542a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005436:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff fe7f 	bl	8005140 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005442:	2301      	movs	r3, #1
 8005444:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005446:	2301      	movs	r3, #1
 8005448:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005450:	2301      	movs	r3, #1
 8005452:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005454:	2300      	movs	r3, #0
 8005456:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005464:	2300      	movs	r3, #0
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800546e:	2301      	movs	r3, #1
 8005470:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005476:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800547c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800547e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005482:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800548a:	2300      	movs	r3, #0
 800548c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff05 	bl	80052a8 <ETH_SetDMAConfig>
}
 800549e:	bf00      	nop
 80054a0:	3798      	adds	r7, #152	@ 0x98
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3305      	adds	r3, #5
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	3204      	adds	r2, #4
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <ETH_MACAddressConfig+0x68>)
 80054ca:	4413      	add	r3, r2
 80054cc:	461a      	mov	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3303      	adds	r3, #3
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	061a      	lsls	r2, r3, #24
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3302      	adds	r3, #2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3301      	adds	r3, #1
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	4313      	orrs	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <ETH_MACAddressConfig+0x6c>)
 80054fa:	4413      	add	r3, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6013      	str	r3, [r2, #0]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40028040 	.word	0x40028040
 8005514:	40028044 	.word	0x40028044

08005518 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e03e      	b.n	80055a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2200      	movs	r2, #0
 8005542:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	3206      	adds	r2, #6
 8005558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d80c      	bhi.n	8005588 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	440b      	add	r3, r1
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	e004      	b.n	8005592 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	461a      	mov	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d9bd      	bls.n	8005526 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055bc:	611a      	str	r2, [r3, #16]
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e048      	b.n	800566a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6919      	ldr	r1, [r3, #16]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	440b      	add	r3, r1
 80055e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005614:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	3212      	adds	r2, #18
 8005636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d80c      	bhi.n	800565a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6919      	ldr	r1, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	440b      	add	r3, r1
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e004      	b.n	8005664 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d9b3      	bls.n	80055d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800569a:	60da      	str	r2, [r3, #12]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b091      	sub	sp, #68	@ 0x44
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3318      	adds	r3, #24
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ea:	d007      	beq.n	80056fc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80056ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f0:	3304      	adds	r3, #4
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e111      	b.n	8005924 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	3301      	adds	r3, #1
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b86      	ldr	r3, [pc, #536]	@ (8005930 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005716:	4013      	ands	r3, r2
 8005718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571a:	6852      	ldr	r2, [r2, #4]
 800571c:	431a      	orrs	r2, r3
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	431a      	orrs	r2, r3
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	431a      	orrs	r2, r3
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005782:	e082      	b.n	800588a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	e005      	b.n	80057b0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80057a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b2:	3301      	adds	r3, #1
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d902      	bls.n	80057c2 <ETH_Prepare_Tx_Descriptors+0x11a>
 80057bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057be:	3b04      	subs	r3, #4
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d8:	d007      	beq.n	80057ea <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057de:	3304      	adds	r3, #4
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d029      	beq.n	800583e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057fc:	e019      	b.n	8005832 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80057fe:	f3bf 8f5f 	dmb	sy
}
 8005802:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005812:	3301      	adds	r3, #1
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005818:	2b03      	cmp	r3, #3
 800581a:	d902      	bls.n	8005822 <ETH_Prepare_Tx_Descriptors+0x17a>
 800581c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581e:	3b04      	subs	r3, #4
 8005820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	3301      	adds	r3, #1
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005832:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	429a      	cmp	r2, r3
 8005838:	d3e1      	bcc.n	80057fe <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	e072      	b.n	8005924 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800584a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584c:	3301      	adds	r3, #1
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	4b32      	ldr	r3, [pc, #200]	@ (8005930 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005866:	4013      	ands	r3, r2
 8005868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	431a      	orrs	r2, r3
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	3301      	adds	r3, #1
 8005876:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005878:	f3bf 8f5f 	dmb	sy
}
 800587c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f47f af78 	bne.w	8005784 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e005      	b.n	80058b4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	6a3a      	ldr	r2, [r7, #32]
 80058c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80058ca:	f3bf 8f5f 	dmb	sy
}
 80058ce:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e4:	3304      	adds	r3, #4
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058f0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f2:	f3ef 8310 	mrs	r3, PRIMASK
 80058f6:	613b      	str	r3, [r7, #16]
  return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	2301      	movs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f383 8810 	msr	PRIMASK, r3
}
 8005906:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	4413      	add	r3, r2
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	629a      	str	r2, [r3, #40]	@ 0x28
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3744      	adds	r7, #68	@ 0x44
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	ffffe000 	.word	0xffffe000

08005934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005934:	b480      	push	{r7}
 8005936:	b089      	sub	sp, #36	@ 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e175      	b.n	8005c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005954:	2201      	movs	r2, #1
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4013      	ands	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	429a      	cmp	r2, r3
 800596e:	f040 8164 	bne.w	8005c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b01      	cmp	r3, #1
 800597c:	d005      	beq.n	800598a <HAL_GPIO_Init+0x56>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d130      	bne.n	80059ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	2203      	movs	r2, #3
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4013      	ands	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059c0:	2201      	movs	r2, #1
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 0201 	and.w	r2, r3, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d017      	beq.n	8005a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	2203      	movs	r2, #3
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d123      	bne.n	8005a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	08da      	lsrs	r2, r3, #3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3208      	adds	r2, #8
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	220f      	movs	r2, #15
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	08da      	lsrs	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3208      	adds	r2, #8
 8005a76:	69b9      	ldr	r1, [r7, #24]
 8005a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	2203      	movs	r2, #3
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0203 	and.w	r2, r3, #3
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80be 	beq.w	8005c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abe:	4b66      	ldr	r3, [pc, #408]	@ (8005c58 <HAL_GPIO_Init+0x324>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	4a65      	ldr	r2, [pc, #404]	@ (8005c58 <HAL_GPIO_Init+0x324>)
 8005ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aca:	4b63      	ldr	r3, [pc, #396]	@ (8005c58 <HAL_GPIO_Init+0x324>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ad6:	4a61      	ldr	r2, [pc, #388]	@ (8005c5c <HAL_GPIO_Init+0x328>)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	3302      	adds	r3, #2
 8005ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	220f      	movs	r2, #15
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a58      	ldr	r2, [pc, #352]	@ (8005c60 <HAL_GPIO_Init+0x32c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d037      	beq.n	8005b72 <HAL_GPIO_Init+0x23e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a57      	ldr	r2, [pc, #348]	@ (8005c64 <HAL_GPIO_Init+0x330>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d031      	beq.n	8005b6e <HAL_GPIO_Init+0x23a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a56      	ldr	r2, [pc, #344]	@ (8005c68 <HAL_GPIO_Init+0x334>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d02b      	beq.n	8005b6a <HAL_GPIO_Init+0x236>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a55      	ldr	r2, [pc, #340]	@ (8005c6c <HAL_GPIO_Init+0x338>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d025      	beq.n	8005b66 <HAL_GPIO_Init+0x232>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a54      	ldr	r2, [pc, #336]	@ (8005c70 <HAL_GPIO_Init+0x33c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01f      	beq.n	8005b62 <HAL_GPIO_Init+0x22e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a53      	ldr	r2, [pc, #332]	@ (8005c74 <HAL_GPIO_Init+0x340>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d019      	beq.n	8005b5e <HAL_GPIO_Init+0x22a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	@ (8005c78 <HAL_GPIO_Init+0x344>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_GPIO_Init+0x226>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a51      	ldr	r2, [pc, #324]	@ (8005c7c <HAL_GPIO_Init+0x348>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00d      	beq.n	8005b56 <HAL_GPIO_Init+0x222>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a50      	ldr	r2, [pc, #320]	@ (8005c80 <HAL_GPIO_Init+0x34c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <HAL_GPIO_Init+0x21e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a4f      	ldr	r2, [pc, #316]	@ (8005c84 <HAL_GPIO_Init+0x350>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d101      	bne.n	8005b4e <HAL_GPIO_Init+0x21a>
 8005b4a:	2309      	movs	r3, #9
 8005b4c:	e012      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b4e:	230a      	movs	r3, #10
 8005b50:	e010      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b52:	2308      	movs	r3, #8
 8005b54:	e00e      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b56:	2307      	movs	r3, #7
 8005b58:	e00c      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b5a:	2306      	movs	r3, #6
 8005b5c:	e00a      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b5e:	2305      	movs	r3, #5
 8005b60:	e008      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b62:	2304      	movs	r3, #4
 8005b64:	e006      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b66:	2303      	movs	r3, #3
 8005b68:	e004      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e002      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_GPIO_Init+0x240>
 8005b72:	2300      	movs	r3, #0
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	f002 0203 	and.w	r2, r2, #3
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	4093      	lsls	r3, r2
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b84:	4935      	ldr	r1, [pc, #212]	@ (8005c5c <HAL_GPIO_Init+0x328>)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b92:	4b3d      	ldr	r3, [pc, #244]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bb6:	4a34      	ldr	r2, [pc, #208]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bbc:	4b32      	ldr	r3, [pc, #200]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be0:	4a29      	ldr	r2, [pc, #164]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005be6:	4b28      	ldr	r3, [pc, #160]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c34:	4a14      	ldr	r2, [pc, #80]	@ (8005c88 <HAL_GPIO_Init+0x354>)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	f67f ae86 	bls.w	8005954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3724      	adds	r7, #36	@ 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40013800 	.word	0x40013800
 8005c60:	40020000 	.word	0x40020000
 8005c64:	40020400 	.word	0x40020400
 8005c68:	40020800 	.word	0x40020800
 8005c6c:	40020c00 	.word	0x40020c00
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40021400 	.word	0x40021400
 8005c78:	40021800 	.word	0x40021800
 8005c7c:	40021c00 	.word	0x40021c00
 8005c80:	40022000 	.word	0x40022000
 8005c84:	40022400 	.word	0x40022400
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e0d9      	b.n	8005e5c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ca8:	2201      	movs	r2, #1
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	f040 80c9 	bne.w	8005e56 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e74 <HAL_GPIO_DeInit+0x1e8>)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	089b      	lsrs	r3, r3, #2
 8005cca:	3302      	adds	r3, #2
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	220f      	movs	r2, #15
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a63      	ldr	r2, [pc, #396]	@ (8005e78 <HAL_GPIO_DeInit+0x1ec>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d037      	beq.n	8005d5e <HAL_GPIO_DeInit+0xd2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a62      	ldr	r2, [pc, #392]	@ (8005e7c <HAL_GPIO_DeInit+0x1f0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d031      	beq.n	8005d5a <HAL_GPIO_DeInit+0xce>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a61      	ldr	r2, [pc, #388]	@ (8005e80 <HAL_GPIO_DeInit+0x1f4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02b      	beq.n	8005d56 <HAL_GPIO_DeInit+0xca>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a60      	ldr	r2, [pc, #384]	@ (8005e84 <HAL_GPIO_DeInit+0x1f8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d025      	beq.n	8005d52 <HAL_GPIO_DeInit+0xc6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a5f      	ldr	r2, [pc, #380]	@ (8005e88 <HAL_GPIO_DeInit+0x1fc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <HAL_GPIO_DeInit+0xc2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a5e      	ldr	r2, [pc, #376]	@ (8005e8c <HAL_GPIO_DeInit+0x200>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d019      	beq.n	8005d4a <HAL_GPIO_DeInit+0xbe>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a5d      	ldr	r2, [pc, #372]	@ (8005e90 <HAL_GPIO_DeInit+0x204>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_GPIO_DeInit+0xba>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a5c      	ldr	r2, [pc, #368]	@ (8005e94 <HAL_GPIO_DeInit+0x208>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00d      	beq.n	8005d42 <HAL_GPIO_DeInit+0xb6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a5b      	ldr	r2, [pc, #364]	@ (8005e98 <HAL_GPIO_DeInit+0x20c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <HAL_GPIO_DeInit+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a5a      	ldr	r2, [pc, #360]	@ (8005e9c <HAL_GPIO_DeInit+0x210>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_GPIO_DeInit+0xae>
 8005d36:	2309      	movs	r3, #9
 8005d38:	e012      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	e010      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	e00e      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d42:	2307      	movs	r3, #7
 8005d44:	e00c      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d46:	2306      	movs	r3, #6
 8005d48:	e00a      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d4a:	2305      	movs	r3, #5
 8005d4c:	e008      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e006      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d52:	2303      	movs	r3, #3
 8005d54:	e004      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e002      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_GPIO_DeInit+0xd4>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	f002 0203 	and.w	r2, r2, #3
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	4093      	lsls	r3, r2
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d132      	bne.n	8005dd6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d70:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	4949      	ldr	r1, [pc, #292]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d7e:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4946      	ldr	r1, [pc, #280]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d8c:	4b44      	ldr	r3, [pc, #272]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	43db      	mvns	r3, r3
 8005d94:	4942      	ldr	r1, [pc, #264]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d9a:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	493f      	ldr	r1, [pc, #252]	@ (8005ea0 <HAL_GPIO_DeInit+0x214>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_GPIO_DeInit+0x1e8>)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	482a      	ldr	r0, [pc, #168]	@ (8005e74 <HAL_GPIO_DeInit+0x1e8>)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	400a      	ands	r2, r1
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2103      	movs	r1, #3
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	08da      	lsrs	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3208      	adds	r2, #8
 8005df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	220f      	movs	r2, #15
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	08d2      	lsrs	r2, r2, #3
 8005e0c:	4019      	ands	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3208      	adds	r2, #8
 8005e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	2103      	movs	r1, #3
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	2101      	movs	r1, #1
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	2103      	movs	r1, #3
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	401a      	ands	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	f67f af22 	bls.w	8005ca8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40013800 	.word	0x40013800
 8005e78:	40020000 	.word	0x40020000
 8005e7c:	40020400 	.word	0x40020400
 8005e80:	40020800 	.word	0x40020800
 8005e84:	40020c00 	.word	0x40020c00
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40021400 	.word	0x40021400
 8005e90:	40021800 	.word	0x40021800
 8005e94:	40021c00 	.word	0x40021c00
 8005e98:	40022000 	.word	0x40022000
 8005e9c:	40022400 	.word	0x40022400
 8005ea0:	40013c00 	.word	0x40013c00

08005ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	807b      	strh	r3, [r7, #2]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005eb4:	787b      	ldrb	r3, [r7, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eba:	887a      	ldrh	r2, [r7, #2]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ec0:	e003      	b.n	8005eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	041a      	lsls	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	619a      	str	r2, [r3, #24]
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ee8:	887a      	ldrh	r2, [r7, #2]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4013      	ands	r3, r2
 8005eee:	041a      	lsls	r2, r3, #16
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	43d9      	mvns	r1, r3
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	619a      	str	r2, [r3, #24]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f16:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f22:	4a05      	ldr	r2, [pc, #20]	@ (8005f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f806 	bl	8005f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40013c00 	.word	0x40013c00

08005f3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e08b      	b.n	800607e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb fb34 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	@ 0x24
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d107      	bne.n	8005fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e006      	b.n	8005fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d108      	bne.n	8005ff6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ff2:	605a      	str	r2, [r3, #4]
 8005ff4:	e007      	b.n	8006006 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <HAL_I2C_Init+0x134>)
 8006012:	430b      	orrs	r3, r1
 8006014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69d9      	ldr	r1, [r3, #28]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	02008000 	.word	0x02008000

0800608c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e021      	b.n	80060e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	@ 0x24
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb fbc2 	bl	8001840 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	461a      	mov	r2, r3
 80060f8:	460b      	mov	r3, r1
 80060fa:	817b      	strh	r3, [r7, #10]
 80060fc:	4613      	mov	r3, r2
 80060fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b20      	cmp	r3, #32
 800610a:	d153      	bne.n	80061b4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800611a:	d101      	bne.n	8006120 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
 800611e:	e04a      	b.n	80061b6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_I2C_Master_Receive_IT+0x42>
 800612a:	2302      	movs	r3, #2
 800612c:	e043      	b.n	80061b6 <HAL_I2C_Master_Receive_IT+0xca>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2222      	movs	r2, #34	@ 0x22
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2210      	movs	r2, #16
 8006142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	893a      	ldrh	r2, [r7, #8]
 8006156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a19      	ldr	r2, [pc, #100]	@ (80061c0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800615c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a18      	ldr	r2, [pc, #96]	@ (80061c4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2bff      	cmp	r3, #255	@ 0xff
 800616c:	d906      	bls.n	800617c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006174:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e007      	b.n	800618c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006186:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800618a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	8979      	ldrh	r1, [r7, #10]
 8006194:	4b0c      	ldr	r3, [pc, #48]	@ (80061c8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f001 fe40 	bl	8007e20 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061a8:	2102      	movs	r1, #2
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f001 fe6a 	bl	8007e84 <I2C_Enable_IRQ>

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	ffff0000 	.word	0xffff0000
 80061c4:	080067db 	.word	0x080067db
 80061c8:	80002400 	.word	0x80002400

080061cc <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d156      	bne.n	8006294 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_I2C_Slave_Transmit_IT+0x28>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e050      	b.n	8006296 <HAL_I2C_Slave_Transmit_IT+0xca>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2221      	movs	r2, #33	@ 0x21
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006220:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a19      	ldr	r2, [pc, #100]	@ (80062a0 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 800623c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a18      	ldr	r2, [pc, #96]	@ (80062a4 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8006242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624c:	d117      	bne.n	800627e <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006286:	f248 0101 	movw	r1, #32769	@ 0x8001
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f001 fdfa 	bl	8007e84 <I2C_Enable_IRQ>

    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	ffff0000 	.word	0xffff0000
 80062a4:	08006a5f 	.word	0x08006a5f

080062a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	817b      	strh	r3, [r7, #10]
 80062b8:	4613      	mov	r3, r2
 80062ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	f040 80ef 	bne.w	80064ac <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062dc:	d101      	bne.n	80062e2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	e0e5      	b.n	80064ae <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_I2C_Master_Transmit_DMA+0x48>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0de      	b.n	80064ae <HAL_I2C_Master_Transmit_DMA+0x206>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2221      	movs	r2, #33	@ 0x21
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2210      	movs	r2, #16
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	893a      	ldrh	r2, [r7, #8]
 8006318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a66      	ldr	r2, [pc, #408]	@ (80064b8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800631e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a66      	ldr	r2, [pc, #408]	@ (80064bc <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006324:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2bff      	cmp	r3, #255	@ 0xff
 800632e:	d906      	bls.n	800633e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	22ff      	movs	r2, #255	@ 0xff
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006336:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e007      	b.n	800634e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006348:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800634c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006370:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d074      	beq.n	800647e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006398:	2b00      	cmp	r3, #0
 800639a:	d022      	beq.n	80063e2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	4a47      	ldr	r2, [pc, #284]	@ (80064c0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80063a2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	4a46      	ldr	r2, [pc, #280]	@ (80064c4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80063aa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	2200      	movs	r2, #0
 80063b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	2200      	movs	r2, #0
 80063ba:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063cc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063d2:	f7fd fcc3 	bl	8003d5c <HAL_DMA_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d13a      	bne.n	8006456 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80063e0:	e013      	b.n	800640a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e051      	b.n	80064ae <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640e:	b2db      	uxtb	r3, r3
 8006410:	3301      	adds	r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	8979      	ldrh	r1, [r7, #10]
 8006416:	4b2c      	ldr	r3, [pc, #176]	@ (80064c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f001 fcff 	bl	8007e20 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800643c:	2110      	movs	r1, #16
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f001 fd20 	bl	8007e84 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e028      	b.n	80064a8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	f043 0210 	orr.w	r2, r3, #16
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e017      	b.n	80064ae <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a12      	ldr	r2, [pc, #72]	@ (80064cc <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006482:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	4b0f      	ldr	r3, [pc, #60]	@ (80064c8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 fcc4 	bl	8007e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a0:	2101      	movs	r1, #1
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f001 fcee 	bl	8007e84 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e000      	b.n	80064ae <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	08006c67 	.word	0x08006c67
 80064c0:	08007c93 	.word	0x08007c93
 80064c4:	08007d6f 	.word	0x08007d6f
 80064c8:	80002000 	.word	0x80002000
 80064cc:	080067db 	.word	0x080067db

080064d0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	f040 809b 	bne.w	8006622 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2C_Slave_Receive_DMA+0x28>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e08f      	b.n	8006624 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_I2C_Slave_Receive_DMA+0x42>
 800650e:	2302      	movs	r3, #2
 8006510:	e088      	b.n	8006624 <HAL_I2C_Slave_Receive_DMA+0x154>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2222      	movs	r2, #34	@ 0x22
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a38      	ldr	r2, [pc, #224]	@ (800662c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4a38      	ldr	r2, [pc, #224]	@ (8006630 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8006550:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	4a35      	ldr	r2, [pc, #212]	@ (8006634 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8006560:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006566:	4a34      	ldr	r2, [pc, #208]	@ (8006638 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8006568:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2200      	movs	r2, #0
 8006578:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3324      	adds	r3, #36	@ 0x24
 8006584:	4619      	mov	r1, r3
 8006586:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800658c:	f7fd fbe6 	bl	8003d5c <HAL_DMA_Start_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d12f      	bne.n	80065fa <HAL_I2C_Slave_Receive_DMA+0x12a>
 800659a:	e013      	b.n	80065c4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2228      	movs	r2, #40	@ 0x28
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02f      	b.n	8006624 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f001 fc4f 	bl	8007e84 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065f4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e014      	b.n	8006624 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2228      	movs	r2, #40	@ 0x28
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f043 0210 	orr.w	r2, r3, #16
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8006622:	2302      	movs	r3, #2
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	ffff0000 	.word	0xffff0000
 8006630:	08007109 	.word	0x08007109
 8006634:	08007d29 	.word	0x08007d29
 8006638:	08007d6f 	.word	0x08007d6f

0800663c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
  }
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d010      	beq.n	80066b6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	09db      	lsrs	r3, r3, #7
 8006698:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a4:	f043 0201 	orr.w	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	0a9b      	lsrs	r3, r3, #10
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f043 0208 	orr.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	0a5b      	lsrs	r3, r3, #9
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	09db      	lsrs	r3, r3, #7
 80066f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006710:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006716:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 030b 	and.w	r3, r3, #11
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f979 	bl	8007a1c <I2C_ITError>
  }
}
 800672a:	bf00      	nop
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
 8006766:	4613      	mov	r3, r2
 8006768:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af02      	add	r7, sp, #8
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <I2C_Master_ISR_IT+0x1e>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e12e      	b.n	8006a56 <I2C_Master_ISR_IT+0x27c>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2210      	movs	r2, #16
 800681e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f001 fa0c 	bl	8007c4a <I2C_Flush_TXDR>
 8006832:	e0fb      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d023      	beq.n	8006888 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01d      	beq.n	8006888 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0304 	bic.w	r3, r3, #4
 8006852:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006886:	e0d1      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	099b      	lsrs	r3, r3, #6
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d12a      	bne.n	80068ea <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800689c:	2b00      	cmp	r3, #0
 800689e:	d024      	beq.n	80068ea <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01e      	beq.n	80068ea <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80ba 	beq.w	8006a2c <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80068e8:	e0a0      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	09db      	lsrs	r3, r3, #7
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d06b      	beq.n	80069ce <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	099b      	lsrs	r3, r3, #6
 80068fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d065      	beq.n	80069ce <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d04e      	beq.n	80069aa <I2C_Master_ISR_IT+0x1d0>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d14a      	bne.n	80069aa <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006920:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	2bff      	cmp	r3, #255	@ 0xff
 800692a:	d91c      	bls.n	8006966 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d103      	bne.n	8006948 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006946:	e002      	b.n	800694e <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	22ff      	movs	r2, #255	@ 0xff
 800694c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006952:	b2da      	uxtb	r2, r3
 8006954:	8a79      	ldrh	r1, [r7, #18]
 8006956:	2300      	movs	r3, #0
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 fa5e 	bl	8007e20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006964:	e032      	b.n	80069cc <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006978:	d00b      	beq.n	8006992 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006984:	8a79      	ldrh	r1, [r7, #18]
 8006986:	2000      	movs	r0, #0
 8006988:	9000      	str	r0, [sp, #0]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f001 fa48 	bl	8007e20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006990:	e01c      	b.n	80069cc <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006996:	b2da      	uxtb	r2, r3
 8006998:	8a79      	ldrh	r1, [r7, #18]
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 fa3c 	bl	8007e20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a8:	e010      	b.n	80069cc <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069b8:	d003      	beq.n	80069c2 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fd09 	bl	80073d2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069c0:	e034      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069c2:	2140      	movs	r1, #64	@ 0x40
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 f829 	bl	8007a1c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069ca:	e02f      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
 80069cc:	e02e      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	099b      	lsrs	r3, r3, #6
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d028      	beq.n	8006a2c <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d022      	beq.n	8006a2c <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d119      	bne.n	8006a24 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069fe:	d015      	beq.n	8006a2c <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a08:	d108      	bne.n	8006a1c <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	e007      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fcd8 	bl	80073d2 <I2C_ITMasterSeqCplt>
 8006a22:	e003      	b.n	8006a2c <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a24:	2140      	movs	r1, #64	@ 0x40
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fff8 	bl	8007a1c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fd5e 	bl	8007508 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <I2C_Slave_ISR_IT+0x24>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0ed      	b.n	8006c5e <I2C_Slave_ISR_IT+0x200>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006aa2:	6939      	ldr	r1, [r7, #16]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fdf9 	bl	800769c <I2C_ITSlaveCplt>
 8006aaa:	e0d3      	b.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04d      	beq.n	8006b54 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d047      	beq.n	8006b54 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d128      	bne.n	8006b20 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b28      	cmp	r3, #40	@ 0x28
 8006ad8:	d108      	bne.n	8006aec <I2C_Slave_ISR_IT+0x8e>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ae0:	d104      	bne.n	8006aec <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ae2:	6939      	ldr	r1, [r7, #16]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 ff43 	bl	8007970 <I2C_ITListenCplt>
 8006aea:	e032      	b.n	8006b52 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b29      	cmp	r3, #41	@ 0x29
 8006af6:	d10e      	bne.n	8006b16 <I2C_Slave_ISR_IT+0xb8>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006afe:	d00a      	beq.n	8006b16 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2210      	movs	r2, #16
 8006b06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 f89e 	bl	8007c4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fc9c 	bl	800744c <I2C_ITSlaveSeqCplt>
 8006b14:	e01d      	b.n	8006b52 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b1e:	e096      	b.n	8006c4e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2210      	movs	r2, #16
 8006b26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2c:	f043 0204 	orr.w	r2, r3, #4
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <I2C_Slave_ISR_IT+0xe6>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b40:	f040 8085 	bne.w	8006c4e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b48:	4619      	mov	r1, r3
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 ff66 	bl	8007a1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b50:	e07d      	b.n	8006c4e <I2C_Slave_ISR_IT+0x1f0>
 8006b52:	e07c      	b.n	8006c4e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d030      	beq.n	8006bc2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02a      	beq.n	8006bc2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d018      	beq.n	8006ba8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d14f      	bne.n	8006c52 <I2C_Slave_ISR_IT+0x1f4>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bb8:	d04b      	beq.n	8006c52 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fc46 	bl	800744c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006bc0:	e047      	b.n	8006c52 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d004      	beq.n	8006be4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006bda:	6939      	ldr	r1, [r7, #16]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fb74 	bl	80072ca <I2C_ITAddrCplt>
 8006be2:	e037      	b.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d031      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02b      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c36:	e00d      	b.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c3e:	d002      	beq.n	8006c46 <I2C_Slave_ISR_IT+0x1e8>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fc00 	bl	800744c <I2C_ITSlaveSeqCplt>
 8006c4c:	e002      	b.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006c52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b088      	sub	sp, #32
 8006c6a:	af02      	add	r7, sp, #8
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <I2C_Master_ISR_DMA+0x1a>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0f0      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1fc>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d017      	beq.n	8006cc4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d011      	beq.n	8006cc4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cac:	f043 0204 	orr.w	r2, r3, #4
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006cb4:	2120      	movs	r1, #32
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f8e4 	bl	8007e84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 ffc4 	bl	8007c4a <I2C_Flush_TXDR>
 8006cc2:	e0c9      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	09db      	lsrs	r3, r3, #7
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8081 	beq.w	8006dd4 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d07a      	beq.n	8006dd4 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d04:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2bff      	cmp	r3, #255	@ 0xff
 8006d0e:	d914      	bls.n	8006d3a <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d103      	bne.n	8006d2c <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d2a:	e002      	b.n	8006d32 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22ff      	movs	r2, #255	@ 0xff
 8006d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e010      	b.n	8006d5c <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d4c:	d003      	beq.n	8006d56 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e002      	b.n	8006d5c <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006d56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d5a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	8a79      	ldrh	r1, [r7, #18]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f001 f858 	bl	8007e20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b22      	cmp	r3, #34	@ 0x22
 8006d8c:	d108      	bne.n	8006da0 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d9e:	e05b      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006db0:	e052      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc0:	d003      	beq.n	8006dca <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fb05 	bl	80073d2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006dc8:	e046      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006dca:	2140      	movs	r1, #64	@ 0x40
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fe25 	bl	8007a1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006dd2:	e041      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d029      	beq.n	8006e34 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d023      	beq.n	8006e34 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d119      	bne.n	8006e2a <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e04:	d027      	beq.n	8006e56 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e0e:	d108      	bne.n	8006e22 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e1e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e20:	e019      	b.n	8006e56 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fad5 	bl	80073d2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e28:	e015      	b.n	8006e56 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e2a:	2140      	movs	r1, #64	@ 0x40
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fdf5 	bl	8007a1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e32:	e010      	b.n	8006e56 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fb5a 	bl	8007508 <I2C_ITMasterCplt>
 8006e54:	e000      	b.n	8006e58 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006e56:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006e78:	4b94      	ldr	r3, [pc, #592]	@ (80070cc <I2C_Mem_ISR_DMA+0x260>)
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <I2C_Mem_ISR_DMA+0x1e>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e139      	b.n	80070fe <I2C_Mem_ISR_DMA+0x292>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d017      	beq.n	8006ece <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d011      	beq.n	8006ece <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ebe:	2120      	movs	r1, #32
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 ffdf 	bl	8007e84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 febf 	bl	8007c4a <I2C_Flush_TXDR>
 8006ecc:	e112      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00f      	beq.n	8006efa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ef8:	e0fc      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	09db      	lsrs	r3, r3, #7
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d06e      	beq.n	8006fe4 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d068      	beq.n	8006fe4 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f12:	2101      	movs	r1, #1
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 f839 	bl	8007f8c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 ffb1 	bl	8007e84 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d056      	beq.n	8006fda <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2bff      	cmp	r3, #255	@ 0xff
 8006f34:	d91e      	bls.n	8006f74 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d103      	bne.n	8006f52 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f50:	e002      	b.n	8006f58 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	22ff      	movs	r2, #255	@ 0xff
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 ff57 	bl	8007e20 <I2C_TransferConfig>
 8006f72:	e011      	b.n	8006f98 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f82:	b299      	uxth	r1, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 ff44 	bl	8007e20 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b22      	cmp	r3, #34	@ 0x22
 8006fb4:	d108      	bne.n	8006fc8 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fc4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fc6:	e095      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fd6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fd8:	e08c      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fda:	2140      	movs	r1, #64	@ 0x40
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fd1d 	bl	8007a1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006fe2:	e087      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d071      	beq.n	80070d4 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d06b      	beq.n	80070d4 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 ffc4 	bl	8007f8c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007004:	2110      	movs	r1, #16
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 ff3c 	bl	8007e84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b22      	cmp	r3, #34	@ 0x22
 8007016:	d101      	bne.n	800701c <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8007018:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <I2C_Mem_ISR_DMA+0x264>)
 800701a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	2bff      	cmp	r3, #255	@ 0xff
 8007024:	d91e      	bls.n	8007064 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	d103      	bne.n	8007042 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007040:	e002      	b.n	8007048 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	22ff      	movs	r2, #255	@ 0xff
 8007046:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704c:	b299      	uxth	r1, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	b2da      	uxtb	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fedf 	bl	8007e20 <I2C_TransferConfig>
 8007062:	e011      	b.n	8007088 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007072:	b299      	uxth	r1, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007078:	b2da      	uxtb	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fecc 	bl	8007e20 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b22      	cmp	r3, #34	@ 0x22
 80070a4:	d108      	bne.n	80070b8 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070b4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070b6:	e01d      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070c6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070c8:	e014      	b.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
 80070ca:	bf00      	nop
 80070cc:	80002000 	.word	0x80002000
 80070d0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fa0a 	bl	8007508 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop

08007108 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <I2C_Slave_ISR_DMA+0x24>
 8007128:	2302      	movs	r3, #2
 800712a:	e0ca      	b.n	80072c2 <I2C_Slave_ISR_DMA+0x1ba>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 faa4 	bl	800769c <I2C_ITSlaveCplt>
 8007154:	e0b0      	b.n	80072b8 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 809a 	beq.w	8007298 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8093 	beq.w	8007298 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0b9b      	lsrs	r3, r3, #14
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0bdb      	lsrs	r3, r3, #15
 8007182:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007186:	2b00      	cmp	r3, #0
 8007188:	d07f      	beq.n	800728a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0bdb      	lsrs	r3, r3, #15
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0b9b      	lsrs	r3, r3, #14
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d128      	bne.n	800722a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b28      	cmp	r3, #40	@ 0x28
 80071e2:	d108      	bne.n	80071f6 <I2C_Slave_ISR_DMA+0xee>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ea:	d104      	bne.n	80071f6 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fbbe 	bl	8007970 <I2C_ITListenCplt>
 80071f4:	e048      	b.n	8007288 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b29      	cmp	r3, #41	@ 0x29
 8007200:	d10e      	bne.n	8007220 <I2C_Slave_ISR_DMA+0x118>
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007208:	d00a      	beq.n	8007220 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2210      	movs	r2, #16
 8007210:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fd19 	bl	8007c4a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f917 	bl	800744c <I2C_ITSlaveSeqCplt>
 800721e:	e033      	b.n	8007288 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2210      	movs	r2, #16
 8007226:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007228:	e034      	b.n	8007294 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2210      	movs	r2, #16
 8007230:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f043 0204 	orr.w	r2, r3, #4
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007244:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <I2C_Slave_ISR_DMA+0x14c>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007252:	d11f      	bne.n	8007294 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b21      	cmp	r3, #33	@ 0x21
 8007258:	d002      	beq.n	8007260 <I2C_Slave_ISR_DMA+0x158>
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b29      	cmp	r3, #41	@ 0x29
 800725e:	d103      	bne.n	8007268 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2221      	movs	r2, #33	@ 0x21
 8007264:	631a      	str	r2, [r3, #48]	@ 0x30
 8007266:	e008      	b.n	800727a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b22      	cmp	r3, #34	@ 0x22
 800726c:	d002      	beq.n	8007274 <I2C_Slave_ISR_DMA+0x16c>
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b2a      	cmp	r3, #42	@ 0x2a
 8007272:	d102      	bne.n	800727a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2222      	movs	r2, #34	@ 0x22
 8007278:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727e:	4619      	mov	r1, r3
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fbcb 	bl	8007a1c <I2C_ITError>
      if (treatdmanack == 1U)
 8007286:	e005      	b.n	8007294 <I2C_Slave_ISR_DMA+0x18c>
 8007288:	e004      	b.n	8007294 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2210      	movs	r2, #16
 8007290:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007292:	e011      	b.n	80072b8 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8007294:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007296:	e00f      	b.n	80072b8 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	08db      	lsrs	r3, r3, #3
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d009      	beq.n	80072b8 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f809 	bl	80072ca <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072e0:	2b28      	cmp	r3, #40	@ 0x28
 80072e2:	d16a      	bne.n	80073ba <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007302:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007310:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800731e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d138      	bne.n	800739a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007328:	897b      	ldrh	r3, [r7, #10]
 800732a:	09db      	lsrs	r3, r3, #7
 800732c:	b29a      	uxth	r2, r3
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	4053      	eors	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	f003 0306 	and.w	r3, r3, #6
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11c      	bne.n	8007376 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800733c:	897b      	ldrh	r3, [r7, #10]
 800733e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734e:	2b02      	cmp	r3, #2
 8007350:	d13b      	bne.n	80073ca <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2208      	movs	r2, #8
 800735e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007368:	89ba      	ldrh	r2, [r7, #12]
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff f9f3 	bl	800675a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007374:	e029      	b.n	80073ca <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007376:	893b      	ldrh	r3, [r7, #8]
 8007378:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800737a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fe04 	bl	8007f8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800738c:	89ba      	ldrh	r2, [r7, #12]
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff f9e1 	bl	800675a <HAL_I2C_AddrCallback>
}
 8007398:	e017      	b.n	80073ca <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800739a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fdf4 	bl	8007f8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073ac:	89ba      	ldrh	r2, [r7, #12]
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff f9d1 	bl	800675a <HAL_I2C_AddrCallback>
}
 80073b8:	e007      	b.n	80073ca <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2208      	movs	r2, #8
 80073c0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b21      	cmp	r3, #33	@ 0x21
 80073ec:	d115      	bne.n	800741a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2211      	movs	r2, #17
 80073fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007402:	2101      	movs	r1, #1
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fdc1 	bl	8007f8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f016 f856 	bl	801d4c4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007418:	e014      	b.n	8007444 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2212      	movs	r2, #18
 8007426:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800742e:	2102      	movs	r1, #2
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fdab 	bl	8007f8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f016 f86a 	bl	801d518 <HAL_I2C_MasterRxCpltCallback>
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	0b9b      	lsrs	r3, r3, #14
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e00d      	b.n	800749e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	0bdb      	lsrs	r3, r3, #15
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800749c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b29      	cmp	r3, #41	@ 0x29
 80074a8:	d112      	bne.n	80074d0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2228      	movs	r2, #40	@ 0x28
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2221      	movs	r2, #33	@ 0x21
 80074b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074b8:	2101      	movs	r1, #1
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fd66 	bl	8007f8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff f932 	bl	8006732 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074ce:	e017      	b.n	8007500 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074da:	d111      	bne.n	8007500 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2228      	movs	r2, #40	@ 0x28
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2222      	movs	r2, #34	@ 0x22
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074ea:	2102      	movs	r1, #2
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fd4d 	bl	8007f8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff f923 	bl	8006746 <HAL_I2C_SlaveRxCpltCallback>
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2220      	movs	r2, #32
 800751c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b21      	cmp	r3, #33	@ 0x21
 8007528:	d107      	bne.n	800753a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800752a:	2101      	movs	r1, #1
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fd2d 	bl	8007f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2211      	movs	r2, #17
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30
 8007538:	e00c      	b.n	8007554 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b22      	cmp	r3, #34	@ 0x22
 8007544:	d106      	bne.n	8007554 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007546:	2102      	movs	r1, #2
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fd1f 	bl	8007f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2212      	movs	r2, #18
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b4d      	ldr	r3, [pc, #308]	@ (8007694 <I2C_ITMasterCplt+0x18c>)
 8007560:	400b      	ands	r3, r1
 8007562:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a4a      	ldr	r2, [pc, #296]	@ (8007698 <I2C_ITMasterCplt+0x190>)
 800756e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	091b      	lsrs	r3, r3, #4
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2210      	movs	r2, #16
 8007582:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007588:	f043 0204 	orr.w	r2, r3, #4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b60      	cmp	r3, #96	@ 0x60
 800759a:	d10b      	bne.n	80075b4 <I2C_ITMasterCplt+0xac>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80075b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb48 	bl	8007c4a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b60      	cmp	r3, #96	@ 0x60
 80075ca:	d002      	beq.n	80075d2 <I2C_ITMasterCplt+0xca>
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa1f 	bl	8007a1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80075de:	e054      	b.n	800768a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b21      	cmp	r3, #33	@ 0x21
 80075ea:	d124      	bne.n	8007636 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	d10b      	bne.n	800761e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff f8b7 	bl	800678a <HAL_I2C_MemTxCpltCallback>
}
 800761c:	e035      	b.n	800768a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f015 ff48 	bl	801d4c4 <HAL_I2C_MasterTxCpltCallback>
}
 8007634:	e029      	b.n	800768a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b22      	cmp	r3, #34	@ 0x22
 8007640:	d123      	bne.n	800768a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	d10b      	bne.n	8007674 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff f896 	bl	800679e <HAL_I2C_MemRxCpltCallback>
}
 8007672:	e00a      	b.n	800768a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f015 ff47 	bl	801d518 <HAL_I2C_MasterRxCpltCallback>
}
 800768a:	bf00      	nop
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	fe00e800 	.word	0xfe00e800
 8007698:	ffff0000 	.word	0xffff0000

0800769c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076be:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2220      	movs	r2, #32
 80076c6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076c8:	7afb      	ldrb	r3, [r7, #11]
 80076ca:	2b21      	cmp	r3, #33	@ 0x21
 80076cc:	d002      	beq.n	80076d4 <I2C_ITSlaveCplt+0x38>
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	2b29      	cmp	r3, #41	@ 0x29
 80076d2:	d108      	bne.n	80076e6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80076d4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc57 	bl	8007f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2221      	movs	r2, #33	@ 0x21
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80076e4:	e019      	b.n	800771a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	2b22      	cmp	r3, #34	@ 0x22
 80076ea:	d002      	beq.n	80076f2 <I2C_ITSlaveCplt+0x56>
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f0:	d108      	bne.n	8007704 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80076f2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc48 	bl	8007f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2222      	movs	r2, #34	@ 0x22
 8007700:	631a      	str	r2, [r3, #48]	@ 0x30
 8007702:	e00a      	b.n	800771a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	2b28      	cmp	r3, #40	@ 0x28
 8007708:	d107      	bne.n	800771a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800770a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc3c 	bl	8007f8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007728:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6859      	ldr	r1, [r3, #4]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	4b8c      	ldr	r3, [pc, #560]	@ (8007968 <I2C_ITSlaveCplt+0x2cc>)
 8007736:	400b      	ands	r3, r1
 8007738:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa85 	bl	8007c4a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	0b9b      	lsrs	r3, r3, #14
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800775a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d020      	beq.n	80077a6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007772:	e018      	b.n	80077a6 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	0bdb      	lsrs	r3, r3, #15
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d012      	beq.n	80077a6 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800778e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	089b      	lsrs	r3, r3, #2
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d020      	beq.n	80077f4 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f023 0304 	bic.w	r3, r3, #4
 80077b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00c      	beq.n	80077f4 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007802:	f043 0204 	orr.w	r2, r3, #4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d04a      	beq.n	80078ac <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800781e:	2b00      	cmp	r3, #0
 8007820:	d044      	beq.n	80078ac <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d128      	bne.n	800787e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b28      	cmp	r3, #40	@ 0x28
 8007836:	d108      	bne.n	800784a <I2C_ITSlaveCplt+0x1ae>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783e:	d104      	bne.n	800784a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007840:	6979      	ldr	r1, [r7, #20]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f894 	bl	8007970 <I2C_ITListenCplt>
 8007848:	e030      	b.n	80078ac <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b29      	cmp	r3, #41	@ 0x29
 8007854:	d10e      	bne.n	8007874 <I2C_ITSlaveCplt+0x1d8>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800785c:	d00a      	beq.n	8007874 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2210      	movs	r2, #16
 8007864:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9ef 	bl	8007c4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fded 	bl	800744c <I2C_ITSlaveSeqCplt>
 8007872:	e01b      	b.n	80078ac <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2210      	movs	r2, #16
 800787a:	61da      	str	r2, [r3, #28]
 800787c:	e016      	b.n	80078ac <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788a:	f043 0204 	orr.w	r2, r3, #4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <I2C_ITSlaveCplt+0x204>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800789e:	d105      	bne.n	80078ac <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8b8 	bl	8007a1c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f8a7 	bl	8007a1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b28      	cmp	r3, #40	@ 0x28
 80078d8:	d141      	bne.n	800795e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80078da:	6979      	ldr	r1, [r7, #20]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f847 	bl	8007970 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078e2:	e03c      	b.n	800795e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078ec:	d014      	beq.n	8007918 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fdac 	bl	800744c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a1d      	ldr	r2, [pc, #116]	@ (800796c <I2C_ITSlaveCplt+0x2d0>)
 80078f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fe ff30 	bl	8006776 <HAL_I2C_ListenCpltCallback>
}
 8007916:	e022      	b.n	800795e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b22      	cmp	r3, #34	@ 0x22
 8007922:	d10e      	bne.n	8007942 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe ff03 	bl	8006746 <HAL_I2C_SlaveRxCpltCallback>
}
 8007940:	e00d      	b.n	800795e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fe feea 	bl	8006732 <HAL_I2C_SlaveTxCpltCallback>
}
 800795e:	bf00      	nop
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	fe00e800 	.word	0xfe00e800
 800796c:	ffff0000 	.word	0xffff0000

08007970 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a26      	ldr	r2, [pc, #152]	@ (8007a18 <I2C_ITListenCplt+0xa8>)
 800797e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	089b      	lsrs	r3, r3, #2
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d022      	beq.n	80079ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f043 0204 	orr.w	r2, r3, #4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079ee:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 faca 	bl	8007f8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2210      	movs	r2, #16
 80079fe:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fe feb4 	bl	8006776 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	ffff0000 	.word	0xffff0000

08007a1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a2c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf0 <I2C_ITError+0x1d4>)
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	2b28      	cmp	r3, #40	@ 0x28
 8007a52:	d005      	beq.n	8007a60 <I2C_ITError+0x44>
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b29      	cmp	r3, #41	@ 0x29
 8007a58:	d002      	beq.n	8007a60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a5e:	d10b      	bne.n	8007a78 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a60:	2103      	movs	r1, #3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa92 	bl	8007f8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2228      	movs	r2, #40	@ 0x28
 8007a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a60      	ldr	r2, [pc, #384]	@ (8007bf4 <I2C_ITError+0x1d8>)
 8007a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a76:	e030      	b.n	8007ada <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a78:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa85 	bl	8007f8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8e1 	bl	8007c4a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b60      	cmp	r3, #96	@ 0x60
 8007a92:	d01f      	beq.n	8007ad4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d114      	bne.n	8007ad4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d109      	bne.n	8007acc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2210      	movs	r2, #16
 8007abe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac4:	f043 0204 	orr.w	r2, r3, #4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d039      	beq.n	8007b5c <I2C_ITError+0x140>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b11      	cmp	r3, #17
 8007aec:	d002      	beq.n	8007af4 <I2C_ITError+0xd8>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b21      	cmp	r3, #33	@ 0x21
 8007af2:	d133      	bne.n	8007b5c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b02:	d107      	bne.n	8007b14 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fc fb9b 	bl	8004254 <HAL_DMA_GetState>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d017      	beq.n	8007b54 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	4a33      	ldr	r2, [pc, #204]	@ (8007bf8 <I2C_ITError+0x1dc>)
 8007b2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fc f9df 	bl	8003efc <HAL_DMA_Abort_IT>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d04d      	beq.n	8007be0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b52:	e045      	b.n	8007be0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f851 	bl	8007bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b5a:	e041      	b.n	8007be0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d039      	beq.n	8007bd8 <I2C_ITError+0x1bc>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b12      	cmp	r3, #18
 8007b68:	d002      	beq.n	8007b70 <I2C_ITError+0x154>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b22      	cmp	r3, #34	@ 0x22
 8007b6e:	d133      	bne.n	8007bd8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b7e:	d107      	bne.n	8007b90 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fc fb5d 	bl	8004254 <HAL_DMA_GetState>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d017      	beq.n	8007bd0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba4:	4a14      	ldr	r2, [pc, #80]	@ (8007bf8 <I2C_ITError+0x1dc>)
 8007ba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fc f9a1 	bl	8003efc <HAL_DMA_Abort_IT>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bce:	e009      	b.n	8007be4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f813 	bl	8007bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bd6:	e005      	b.n	8007be4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f80f 	bl	8007bfc <I2C_TreatErrorCallback>
  }
}
 8007bde:	e002      	b.n	8007be6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007be4:	bf00      	nop
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	ffff0000 	.word	0xffff0000
 8007bf4:	08006a5f 	.word	0x08006a5f
 8007bf8:	08007de3 	.word	0x08007de3

08007bfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b60      	cmp	r3, #96	@ 0x60
 8007c0e:	d10e      	bne.n	8007c2e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fe fdcd 	bl	80067c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c2c:	e009      	b.n	8007c42 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7fe fdb8 	bl	80067b2 <HAL_I2C_ErrorCallback>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d103      	bne.n	8007c68 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2200      	movs	r2, #0
 8007c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d007      	beq.n	8007c86 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	619a      	str	r2, [r3, #24]
  }
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007cae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007cba:	2120      	movs	r1, #32
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f8e1 	bl	8007e84 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007cc2:	e02d      	b.n	8007d20 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007ccc:	441a      	add	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2bff      	cmp	r3, #255	@ 0xff
 8007cda:	d903      	bls.n	8007ce4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	22ff      	movs	r2, #255	@ 0xff
 8007ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007ce2:	e004      	b.n	8007cee <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3328      	adds	r3, #40	@ 0x28
 8007cfe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007d04:	f7fc f82a 	bl	8003d5c <HAL_DMA_Start_IT>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007d0e:	2110      	movs	r1, #16
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fe83 	bl	8007a1c <I2C_ITError>
}
 8007d16:	e003      	b.n	8007d20 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007d18:	2140      	movs	r1, #64	@ 0x40
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f8b2 	bl	8007e84 <I2C_Enable_IRQ>
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10e      	bne.n	8007d66 <I2C_DMASlaveReceiveCplt+0x3e>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d4e:	d00a      	beq.n	8007d66 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d5e:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fb73 	bl	800744c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d007      	beq.n	8007db0 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007dac:	2301      	movs	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fc fa5d 	bl	8004270 <HAL_DMA_GetError>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d00e      	beq.n	8007dda <I2C_DMAError+0x6c>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dd0:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007dd2:	2110      	movs	r1, #16
 8007dd4:	68b8      	ldr	r0, [r7, #8]
 8007dd6:	f7ff fe21 	bl	8007a1c <I2C_ITError>
  }
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fef3 	bl	8007bfc <I2C_TreatErrorCallback>
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	817b      	strh	r3, [r7, #10]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e38:	7a7b      	ldrb	r3, [r7, #9]
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e40:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e4e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	0d5b      	lsrs	r3, r3, #21
 8007e5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e5e:	4b08      	ldr	r3, [pc, #32]	@ (8007e80 <I2C_TransferConfig+0x60>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	43db      	mvns	r3, r3
 8007e64:	ea02 0103 	and.w	r1, r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	03ff63ff 	.word	0x03ff63ff

08007e84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e98:	4a39      	ldr	r2, [pc, #228]	@ (8007f80 <I2C_Enable_IRQ+0xfc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d032      	beq.n	8007f04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007ea2:	4a38      	ldr	r2, [pc, #224]	@ (8007f84 <I2C_Enable_IRQ+0x100>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d02d      	beq.n	8007f04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007eac:	4a36      	ldr	r2, [pc, #216]	@ (8007f88 <I2C_Enable_IRQ+0x104>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d028      	beq.n	8007f04 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007eb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da03      	bge.n	8007ec2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ec0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ec2:	887b      	ldrh	r3, [r7, #2]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007ed2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ed4:	887b      	ldrh	r3, [r7, #2]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007ee4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ee6:	887b      	ldrh	r3, [r7, #2]
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d103      	bne.n	8007ef4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007ef2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ef4:	887b      	ldrh	r3, [r7, #2]
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d133      	bne.n	8007f62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f043 0320 	orr.w	r3, r3, #32
 8007f00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f02:	e02e      	b.n	8007f62 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da03      	bge.n	8007f14 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007f12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007f24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f26:	887b      	ldrh	r3, [r7, #2]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007f36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f38:	887b      	ldrh	r3, [r7, #2]
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d103      	bne.n	8007f46 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f46:	887b      	ldrh	r3, [r7, #2]
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d103      	bne.n	8007f54 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f54:	887b      	ldrh	r3, [r7, #2]
 8007f56:	2b40      	cmp	r3, #64	@ 0x40
 8007f58:	d103      	bne.n	8007f62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6819      	ldr	r1, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	08006c67 	.word	0x08006c67
 8007f84:	08007109 	.word	0x08007109
 8007f88:	08006e6d 	.word	0x08006e6d

08007f8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f9c:	887b      	ldrh	r3, [r7, #2]
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007fac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fba:	2b28      	cmp	r3, #40	@ 0x28
 8007fbc:	d003      	beq.n	8007fc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007fc6:	887b      	ldrh	r3, [r7, #2]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00f      	beq.n	8007ff0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007fd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fe4:	2b28      	cmp	r3, #40	@ 0x28
 8007fe6:	d003      	beq.n	8007ff0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da03      	bge.n	8008000 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	2b10      	cmp	r3, #16
 8008004:	d103      	bne.n	800800e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800800c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800800e:	887b      	ldrh	r3, [r7, #2]
 8008010:	2b20      	cmp	r3, #32
 8008012:	d103      	bne.n	800801c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f043 0320 	orr.w	r3, r3, #32
 800801a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800801c:	887b      	ldrh	r3, [r7, #2]
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	d103      	bne.n	800802a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008028:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	43da      	mvns	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	400a      	ands	r2, r1
 800803a:	601a      	str	r2, [r3, #0]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b20      	cmp	r3, #32
 800805c:	d138      	bne.n	80080d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008068:	2302      	movs	r3, #2
 800806a:	e032      	b.n	80080d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	@ 0x24
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800809a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0201 	orr.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	e000      	b.n	80080d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080d0:	2302      	movs	r3, #2
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d139      	bne.n	8008168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080fe:	2302      	movs	r3, #2
 8008100:	e033      	b.n	800816a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2224      	movs	r2, #36	@ 0x24
 800810e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	021b      	lsls	r3, r3, #8
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	e000      	b.n	800816a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008168:	2302      	movs	r3, #2
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af02      	add	r7, sp, #8
 800817c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e108      	b.n	800839a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7f9 fede 	bl	8001f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2203      	movs	r2, #3
 80081ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081b6:	d102      	bne.n	80081be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f005 fa48 	bl	800d658 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7c1a      	ldrb	r2, [r3, #16]
 80081d0:	f88d 2000 	strb.w	r2, [sp]
 80081d4:	3304      	adds	r3, #4
 80081d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081d8:	f005 f9e4 	bl	800d5a4 <USB_CoreInit>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e0d5      	b.n	800839a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f005 fa40 	bl	800d67a <USB_SetCurrentMode>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0c6      	b.n	800839a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e04a      	b.n	80082a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008212:	7bfa      	ldrb	r2, [r7, #15]
 8008214:	6879      	ldr	r1, [r7, #4]
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	3315      	adds	r3, #21
 8008222:	2201      	movs	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008226:	7bfa      	ldrb	r2, [r7, #15]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3314      	adds	r3, #20
 8008236:	7bfa      	ldrb	r2, [r7, #15]
 8008238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800823a:	7bfa      	ldrb	r2, [r7, #15]
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	b298      	uxth	r0, r3
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	332e      	adds	r3, #46	@ 0x2e
 800824e:	4602      	mov	r2, r0
 8008250:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	3318      	adds	r3, #24
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008266:	7bfa      	ldrb	r2, [r7, #15]
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	331c      	adds	r3, #28
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3320      	adds	r3, #32
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	3324      	adds	r3, #36	@ 0x24
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	3301      	adds	r3, #1
 80082a6:	73fb      	strb	r3, [r7, #15]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	791b      	ldrb	r3, [r3, #4]
 80082ac:	7bfa      	ldrb	r2, [r7, #15]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d3af      	bcc.n	8008212 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
 80082b6:	e044      	b.n	8008342 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082b8:	7bfa      	ldrb	r2, [r7, #15]
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4613      	mov	r3, r2
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082ce:	7bfa      	ldrb	r2, [r7, #15]
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80082e0:	7bfa      	ldrb	r2, [r7, #15]
 80082e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082e4:	7bfa      	ldrb	r2, [r7, #15]
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80082f6:	2200      	movs	r2, #0
 80082f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008326:	7bfa      	ldrb	r2, [r7, #15]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	3301      	adds	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	7bfa      	ldrb	r2, [r7, #15]
 8008348:	429a      	cmp	r2, r3
 800834a:	d3b5      	bcc.n	80082b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7c1a      	ldrb	r2, [r3, #16]
 8008354:	f88d 2000 	strb.w	r2, [sp]
 8008358:	3304      	adds	r3, #4
 800835a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800835c:	f005 f9da 	bl	800d714 <USB_DevInit>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e013      	b.n	800839a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7b1b      	ldrb	r3, [r3, #12]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d102      	bne.n	800838e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f80b 	bl	80083a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f005 fb95 	bl	800dac2 <USB_DevDisconnect>

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083d2:	4b05      	ldr	r3, [pc, #20]	@ (80083e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	10000003 	.word	0x10000003

080083ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083fa:	6013      	str	r3, [r2, #0]
}
 80083fc:	bf00      	nop
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40007000 	.word	0x40007000

0800840c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e291      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8087 	beq.w	800853e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008430:	4b96      	ldr	r3, [pc, #600]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 030c 	and.w	r3, r3, #12
 8008438:	2b04      	cmp	r3, #4
 800843a:	d00c      	beq.n	8008456 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800843c:	4b93      	ldr	r3, [pc, #588]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 030c 	and.w	r3, r3, #12
 8008444:	2b08      	cmp	r3, #8
 8008446:	d112      	bne.n	800846e <HAL_RCC_OscConfig+0x62>
 8008448:	4b90      	ldr	r3, [pc, #576]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008454:	d10b      	bne.n	800846e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008456:	4b8d      	ldr	r3, [pc, #564]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d06c      	beq.n	800853c <HAL_RCC_OscConfig+0x130>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d168      	bne.n	800853c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e26b      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008476:	d106      	bne.n	8008486 <HAL_RCC_OscConfig+0x7a>
 8008478:	4b84      	ldr	r3, [pc, #528]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a83      	ldr	r2, [pc, #524]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800847e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e02e      	b.n	80084e4 <HAL_RCC_OscConfig+0xd8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10c      	bne.n	80084a8 <HAL_RCC_OscConfig+0x9c>
 800848e:	4b7f      	ldr	r3, [pc, #508]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a7e      	ldr	r2, [pc, #504]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	4b7c      	ldr	r3, [pc, #496]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a7b      	ldr	r2, [pc, #492]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	e01d      	b.n	80084e4 <HAL_RCC_OscConfig+0xd8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084b0:	d10c      	bne.n	80084cc <HAL_RCC_OscConfig+0xc0>
 80084b2:	4b76      	ldr	r3, [pc, #472]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a75      	ldr	r2, [pc, #468]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	4b73      	ldr	r3, [pc, #460]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a72      	ldr	r2, [pc, #456]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	e00b      	b.n	80084e4 <HAL_RCC_OscConfig+0xd8>
 80084cc:	4b6f      	ldr	r3, [pc, #444]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a6e      	ldr	r2, [pc, #440]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	4b6c      	ldr	r3, [pc, #432]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a6b      	ldr	r2, [pc, #428]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80084de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d013      	beq.n	8008514 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fa f996 	bl	800281c <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084f4:	f7fa f992 	bl	800281c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b64      	cmp	r3, #100	@ 0x64
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e21f      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008506:	4b61      	ldr	r3, [pc, #388]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCC_OscConfig+0xe8>
 8008512:	e014      	b.n	800853e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008514:	f7fa f982 	bl	800281c <HAL_GetTick>
 8008518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800851c:	f7fa f97e 	bl	800281c <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b64      	cmp	r3, #100	@ 0x64
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e20b      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800852e:	4b57      	ldr	r3, [pc, #348]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1f0      	bne.n	800851c <HAL_RCC_OscConfig+0x110>
 800853a:	e000      	b.n	800853e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800853c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d069      	beq.n	800861e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800854a:	4b50      	ldr	r3, [pc, #320]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 030c 	and.w	r3, r3, #12
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00b      	beq.n	800856e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008556:	4b4d      	ldr	r3, [pc, #308]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 030c 	and.w	r3, r3, #12
 800855e:	2b08      	cmp	r3, #8
 8008560:	d11c      	bne.n	800859c <HAL_RCC_OscConfig+0x190>
 8008562:	4b4a      	ldr	r3, [pc, #296]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d116      	bne.n	800859c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800856e:	4b47      	ldr	r3, [pc, #284]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <HAL_RCC_OscConfig+0x17a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d001      	beq.n	8008586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e1df      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008586:	4b41      	ldr	r3, [pc, #260]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	493d      	ldr	r1, [pc, #244]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008596:	4313      	orrs	r3, r2
 8008598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800859a:	e040      	b.n	800861e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d023      	beq.n	80085ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085a4:	4b39      	ldr	r3, [pc, #228]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a38      	ldr	r2, [pc, #224]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fa f934 	bl	800281c <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b8:	f7fa f930 	bl	800281c <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e1bd      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ca:	4b30      	ldr	r3, [pc, #192]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d6:	4b2d      	ldr	r3, [pc, #180]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4929      	ldr	r1, [pc, #164]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	600b      	str	r3, [r1, #0]
 80085ea:	e018      	b.n	800861e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ec:	4b27      	ldr	r3, [pc, #156]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a26      	ldr	r2, [pc, #152]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f8:	f7fa f910 	bl	800281c <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008600:	f7fa f90c 	bl	800281c <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b02      	cmp	r3, #2
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e199      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008612:	4b1e      	ldr	r3, [pc, #120]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f0      	bne.n	8008600 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d038      	beq.n	800869c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d019      	beq.n	8008666 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008632:	4b16      	ldr	r3, [pc, #88]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008636:	4a15      	ldr	r2, [pc, #84]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863e:	f7fa f8ed 	bl	800281c <HAL_GetTick>
 8008642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008644:	e008      	b.n	8008658 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008646:	f7fa f8e9 	bl	800281c <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e176      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008658:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800865a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0f0      	beq.n	8008646 <HAL_RCC_OscConfig+0x23a>
 8008664:	e01a      	b.n	800869c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 8008668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800866a:	4a08      	ldr	r2, [pc, #32]	@ (800868c <HAL_RCC_OscConfig+0x280>)
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008672:	f7fa f8d3 	bl	800281c <HAL_GetTick>
 8008676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008678:	e00a      	b.n	8008690 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800867a:	f7fa f8cf 	bl	800281c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d903      	bls.n	8008690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e15c      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
 800868c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008690:	4b91      	ldr	r3, [pc, #580]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ee      	bne.n	800867a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80a4 	beq.w	80087f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086aa:	4b8b      	ldr	r3, [pc, #556]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10d      	bne.n	80086d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80086b6:	4b88      	ldr	r3, [pc, #544]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	4a87      	ldr	r2, [pc, #540]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80086bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80086c2:	4b85      	ldr	r3, [pc, #532]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ca:	60bb      	str	r3, [r7, #8]
 80086cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086d2:	4b82      	ldr	r3, [pc, #520]	@ (80088dc <HAL_RCC_OscConfig+0x4d0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d118      	bne.n	8008710 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086de:	4b7f      	ldr	r3, [pc, #508]	@ (80088dc <HAL_RCC_OscConfig+0x4d0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a7e      	ldr	r2, [pc, #504]	@ (80088dc <HAL_RCC_OscConfig+0x4d0>)
 80086e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086ea:	f7fa f897 	bl	800281c <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086f0:	e008      	b.n	8008704 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086f2:	f7fa f893 	bl	800281c <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b64      	cmp	r3, #100	@ 0x64
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e120      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008704:	4b75      	ldr	r3, [pc, #468]	@ (80088dc <HAL_RCC_OscConfig+0x4d0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f0      	beq.n	80086f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d106      	bne.n	8008726 <HAL_RCC_OscConfig+0x31a>
 8008718:	4b6f      	ldr	r3, [pc, #444]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800871a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871c:	4a6e      	ldr	r2, [pc, #440]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	6713      	str	r3, [r2, #112]	@ 0x70
 8008724:	e02d      	b.n	8008782 <HAL_RCC_OscConfig+0x376>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10c      	bne.n	8008748 <HAL_RCC_OscConfig+0x33c>
 800872e:	4b6a      	ldr	r3, [pc, #424]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008732:	4a69      	ldr	r2, [pc, #420]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	6713      	str	r3, [r2, #112]	@ 0x70
 800873a:	4b67      	ldr	r3, [pc, #412]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800873c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873e:	4a66      	ldr	r2, [pc, #408]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008740:	f023 0304 	bic.w	r3, r3, #4
 8008744:	6713      	str	r3, [r2, #112]	@ 0x70
 8008746:	e01c      	b.n	8008782 <HAL_RCC_OscConfig+0x376>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	2b05      	cmp	r3, #5
 800874e:	d10c      	bne.n	800876a <HAL_RCC_OscConfig+0x35e>
 8008750:	4b61      	ldr	r3, [pc, #388]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008754:	4a60      	ldr	r2, [pc, #384]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008756:	f043 0304 	orr.w	r3, r3, #4
 800875a:	6713      	str	r3, [r2, #112]	@ 0x70
 800875c:	4b5e      	ldr	r3, [pc, #376]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800875e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008760:	4a5d      	ldr	r2, [pc, #372]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	6713      	str	r3, [r2, #112]	@ 0x70
 8008768:	e00b      	b.n	8008782 <HAL_RCC_OscConfig+0x376>
 800876a:	4b5b      	ldr	r3, [pc, #364]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800876c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876e:	4a5a      	ldr	r2, [pc, #360]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008770:	f023 0301 	bic.w	r3, r3, #1
 8008774:	6713      	str	r3, [r2, #112]	@ 0x70
 8008776:	4b58      	ldr	r3, [pc, #352]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877a:	4a57      	ldr	r2, [pc, #348]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800877c:	f023 0304 	bic.w	r3, r3, #4
 8008780:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d015      	beq.n	80087b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878a:	f7fa f847 	bl	800281c <HAL_GetTick>
 800878e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008790:	e00a      	b.n	80087a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f7fa f843 	bl	800281c <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0ce      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a8:	4b4b      	ldr	r3, [pc, #300]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0ee      	beq.n	8008792 <HAL_RCC_OscConfig+0x386>
 80087b4:	e014      	b.n	80087e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b6:	f7fa f831 	bl	800281c <HAL_GetTick>
 80087ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087bc:	e00a      	b.n	80087d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087be:	f7fa f82d 	bl	800281c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e0b8      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087d4:	4b40      	ldr	r3, [pc, #256]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1ee      	bne.n	80087be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d105      	bne.n	80087f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087e6:	4b3c      	ldr	r3, [pc, #240]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	4a3b      	ldr	r2, [pc, #236]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80087ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80a4 	beq.w	8008944 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087fc:	4b36      	ldr	r3, [pc, #216]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f003 030c 	and.w	r3, r3, #12
 8008804:	2b08      	cmp	r3, #8
 8008806:	d06b      	beq.n	80088e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d149      	bne.n	80088a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008810:	4b31      	ldr	r3, [pc, #196]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a30      	ldr	r2, [pc, #192]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800881a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7f9 fffe 	bl	800281c <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7f9 fffa 	bl	800281c <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e087      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008836:	4b28      	ldr	r3, [pc, #160]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	3b01      	subs	r3, #1
 800885c:	041b      	lsls	r3, r3, #16
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	061b      	lsls	r3, r3, #24
 8008866:	4313      	orrs	r3, r2
 8008868:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 800886a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800886e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008870:	4b19      	ldr	r3, [pc, #100]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800887a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7f9 ffce 	bl	800281c <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008884:	f7f9 ffca 	bl	800281c <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e057      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008896:	4b10      	ldr	r3, [pc, #64]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0f0      	beq.n	8008884 <HAL_RCC_OscConfig+0x478>
 80088a2:	e04f      	b.n	8008944 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a4:	4b0c      	ldr	r3, [pc, #48]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a0b      	ldr	r2, [pc, #44]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80088aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b0:	f7f9 ffb4 	bl	800281c <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b8:	f7f9 ffb0 	bl	800281c <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e03d      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ca:	4b03      	ldr	r3, [pc, #12]	@ (80088d8 <HAL_RCC_OscConfig+0x4cc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f0      	bne.n	80088b8 <HAL_RCC_OscConfig+0x4ac>
 80088d6:	e035      	b.n	8008944 <HAL_RCC_OscConfig+0x538>
 80088d8:	40023800 	.word	0x40023800
 80088dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <HAL_RCC_OscConfig+0x544>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d028      	beq.n	8008940 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d121      	bne.n	8008940 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d11a      	bne.n	8008940 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008910:	4013      	ands	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008916:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008918:	4293      	cmp	r3, r2
 800891a:	d111      	bne.n	8008940 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	3b01      	subs	r3, #1
 800892a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800892c:	429a      	cmp	r2, r3
 800892e:	d107      	bne.n	8008940 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800893c:	429a      	cmp	r2, r3
 800893e:	d001      	beq.n	8008944 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40023800 	.word	0x40023800

08008954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e0d0      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800896c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d910      	bls.n	800899c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897a:	4b67      	ldr	r3, [pc, #412]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f023 020f 	bic.w	r2, r3, #15
 8008982:	4965      	ldr	r1, [pc, #404]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800898a:	4b63      	ldr	r3, [pc, #396]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0b8      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d020      	beq.n	80089ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089b4:	4b59      	ldr	r3, [pc, #356]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4a58      	ldr	r2, [pc, #352]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089cc:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4a52      	ldr	r2, [pc, #328]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089d8:	4b50      	ldr	r3, [pc, #320]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	494d      	ldr	r1, [pc, #308]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d040      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d107      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089fe:	4b47      	ldr	r3, [pc, #284]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d115      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e07f      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d107      	bne.n	8008a26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a16:	4b41      	ldr	r3, [pc, #260]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e073      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a26:	4b3d      	ldr	r3, [pc, #244]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e06b      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a36:	4b39      	ldr	r3, [pc, #228]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f023 0203 	bic.w	r2, r3, #3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	4936      	ldr	r1, [pc, #216]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a48:	f7f9 fee8 	bl	800281c <HAL_GetTick>
 8008a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a4e:	e00a      	b.n	8008a66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a50:	f7f9 fee4 	bl	800281c <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e053      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a66:	4b2d      	ldr	r3, [pc, #180]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 020c 	and.w	r2, r3, #12
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d1eb      	bne.n	8008a50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a78:	4b27      	ldr	r3, [pc, #156]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d210      	bcs.n	8008aa8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a86:	4b24      	ldr	r3, [pc, #144]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f023 020f 	bic.w	r2, r3, #15
 8008a8e:	4922      	ldr	r1, [pc, #136]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a96:	4b20      	ldr	r3, [pc, #128]	@ (8008b18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d001      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e032      	b.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d008      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ab4:	4b19      	ldr	r3, [pc, #100]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	4916      	ldr	r1, [pc, #88]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	490e      	ldr	r1, [pc, #56]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ae6:	f000 f821 	bl	8008b2c <HAL_RCC_GetSysClockFreq>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <HAL_RCC_ClockConfig+0x1c8>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	490a      	ldr	r1, [pc, #40]	@ (8008b20 <HAL_RCC_ClockConfig+0x1cc>)
 8008af8:	5ccb      	ldrb	r3, [r1, r3]
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	4a09      	ldr	r2, [pc, #36]	@ (8008b24 <HAL_RCC_ClockConfig+0x1d0>)
 8008b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <HAL_RCC_ClockConfig+0x1d4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7f9 faa6 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	40023c00 	.word	0x40023c00
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	080221ac 	.word	0x080221ac
 8008b24:	20000000 	.word	0x20000000
 8008b28:	20000004 	.word	0x20000004

08008b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b094      	sub	sp, #80	@ 0x50
 8008b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b38:	2300      	movs	r3, #0
 8008b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b44:	4b79      	ldr	r3, [pc, #484]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 030c 	and.w	r3, r3, #12
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d00d      	beq.n	8008b6c <HAL_RCC_GetSysClockFreq+0x40>
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	f200 80e1 	bhi.w	8008d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_RCC_GetSysClockFreq+0x34>
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d003      	beq.n	8008b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b5e:	e0db      	b.n	8008d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b60:	4b73      	ldr	r3, [pc, #460]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b64:	e0db      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b66:	4b73      	ldr	r3, [pc, #460]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b6a:	e0d8      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b76:	4b6d      	ldr	r3, [pc, #436]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d063      	beq.n	8008c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b82:	4b6a      	ldr	r3, [pc, #424]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	2200      	movs	r2, #0
 8008b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b96:	2300      	movs	r3, #0
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	f04f 0000 	mov.w	r0, #0
 8008ba6:	f04f 0100 	mov.w	r1, #0
 8008baa:	0159      	lsls	r1, r3, #5
 8008bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bb0:	0150      	lsls	r0, r2, #5
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	1a51      	subs	r1, r2, r1
 8008bba:	6139      	str	r1, [r7, #16]
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	018b      	lsls	r3, r1, #6
 8008bd4:	4651      	mov	r1, sl
 8008bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bda:	4651      	mov	r1, sl
 8008bdc:	018a      	lsls	r2, r1, #6
 8008bde:	4651      	mov	r1, sl
 8008be0:	ebb2 0801 	subs.w	r8, r2, r1
 8008be4:	4659      	mov	r1, fp
 8008be6:	eb63 0901 	sbc.w	r9, r3, r1
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bfe:	4690      	mov	r8, r2
 8008c00:	4699      	mov	r9, r3
 8008c02:	4623      	mov	r3, r4
 8008c04:	eb18 0303 	adds.w	r3, r8, r3
 8008c08:	60bb      	str	r3, [r7, #8]
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	eb49 0303 	adc.w	r3, r9, r3
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c1e:	4629      	mov	r1, r5
 8008c20:	024b      	lsls	r3, r1, #9
 8008c22:	4621      	mov	r1, r4
 8008c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c28:	4621      	mov	r1, r4
 8008c2a:	024a      	lsls	r2, r1, #9
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c32:	2200      	movs	r2, #0
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c3c:	f7f7 fb38 	bl	80002b0 <__aeabi_uldivmod>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4613      	mov	r3, r2
 8008c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c48:	e058      	b.n	8008cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c4a:	4b38      	ldr	r3, [pc, #224]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	099b      	lsrs	r3, r3, #6
 8008c50:	2200      	movs	r2, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	4611      	mov	r1, r2
 8008c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c5a:	623b      	str	r3, [r7, #32]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	f04f 0000 	mov.w	r0, #0
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	0159      	lsls	r1, r3, #5
 8008c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c76:	0150      	lsls	r0, r2, #5
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c82:	4649      	mov	r1, r9
 8008c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8008ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	00eb      	lsls	r3, r5, #3
 8008cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cb2:	00e2      	lsls	r2, r4, #3
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	4643      	mov	r3, r8
 8008cba:	18e3      	adds	r3, r4, r3
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	eb45 0303 	adc.w	r3, r5, r3
 8008cc4:	607b      	str	r3, [r7, #4]
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	028b      	lsls	r3, r1, #10
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cdc:	4621      	mov	r1, r4
 8008cde:	028a      	lsls	r2, r1, #10
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	61fa      	str	r2, [r7, #28]
 8008cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf0:	f7f7 fade 	bl	80002b0 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	3301      	adds	r3, #1
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d16:	e002      	b.n	8008d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3750      	adds	r7, #80	@ 0x50
 8008d24:	46bd      	mov	sp, r7
 8008d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	00f42400 	.word	0x00f42400
 8008d34:	007a1200 	.word	0x007a1200

08008d38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	@ (8008d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000000 	.word	0x20000000

08008d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d54:	f7ff fff0 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	0a9b      	lsrs	r3, r3, #10
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	4903      	ldr	r1, [pc, #12]	@ (8008d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40023800 	.word	0x40023800
 8008d74:	080221bc 	.word	0x080221bc

08008d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d7c:	f7ff ffdc 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	0b5b      	lsrs	r3, r3, #13
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	4903      	ldr	r1, [pc, #12]	@ (8008d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d8e:	5ccb      	ldrb	r3, [r1, r3]
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	080221bc 	.word	0x080221bc

08008da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	220f      	movs	r2, #15
 8008dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008db0:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <HAL_RCC_GetClockConfig+0x5c>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 0203 	and.w	r2, r3, #3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <HAL_RCC_GetClockConfig+0x5c>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <HAL_RCC_GetClockConfig+0x5c>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008dd4:	4b09      	ldr	r3, [pc, #36]	@ (8008dfc <HAL_RCC_GetClockConfig+0x5c>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008de2:	4b07      	ldr	r3, [pc, #28]	@ (8008e00 <HAL_RCC_GetClockConfig+0x60>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 020f 	and.w	r2, r3, #15
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	601a      	str	r2, [r3, #0]
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40023c00 	.word	0x40023c00

08008e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d012      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e2c:	4b69      	ldr	r3, [pc, #420]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	4a68      	ldr	r2, [pc, #416]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e36:	6093      	str	r3, [r2, #8]
 8008e38:	4b66      	ldr	r3, [pc, #408]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e40:	4964      	ldr	r1, [pc, #400]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d017      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6c:	4959      	ldr	r1, [pc, #356]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e7c:	d101      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d017      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ea0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	494a      	ldr	r1, [pc, #296]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eb8:	d101      	bne.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 808b 	beq.w	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eec:	4a39      	ldr	r2, [pc, #228]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ef4:	4b37      	ldr	r3, [pc, #220]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f00:	4b35      	ldr	r3, [pc, #212]	@ (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a34      	ldr	r2, [pc, #208]	@ (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0c:	f7f9 fc86 	bl	800281c <HAL_GetTick>
 8008f10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f14:	f7f9 fc82 	bl	800281c <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b64      	cmp	r3, #100	@ 0x64
 8008f20:	d901      	bls.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e357      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f26:	4b2c      	ldr	r3, [pc, #176]	@ (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f32:	4b28      	ldr	r3, [pc, #160]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d035      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d02e      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f50:	4b20      	ldr	r3, [pc, #128]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f66:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008f72:	4a18      	ldr	r2, [pc, #96]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f78:	4b16      	ldr	r3, [pc, #88]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d114      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f84:	f7f9 fc4a 	bl	800281c <HAL_GetTick>
 8008f88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f8a:	e00a      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f8c:	f7f9 fc46 	bl	800281c <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e319      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0ee      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fba:	d111      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008fc8:	4b04      	ldr	r3, [pc, #16]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fca:	400b      	ands	r3, r1
 8008fcc:	4901      	ldr	r1, [pc, #4]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	608b      	str	r3, [r1, #8]
 8008fd2:	e00b      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008fd4:	40023800 	.word	0x40023800
 8008fd8:	40007000 	.word	0x40007000
 8008fdc:	0ffffcff 	.word	0x0ffffcff
 8008fe0:	4baa      	ldr	r3, [pc, #680]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	4aa9      	ldr	r2, [pc, #676]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fe6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008fea:	6093      	str	r3, [r2, #8]
 8008fec:	4ba7      	ldr	r3, [pc, #668]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff8:	49a4      	ldr	r1, [pc, #656]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0310 	and.w	r3, r3, #16
 8009006:	2b00      	cmp	r3, #0
 8009008:	d010      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800900a:	4ba0      	ldr	r3, [pc, #640]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800900c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009010:	4a9e      	ldr	r2, [pc, #632]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009016:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800901a:	4b9c      	ldr	r3, [pc, #624]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	4999      	ldr	r1, [pc, #612]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00a      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009038:	4b94      	ldr	r3, [pc, #592]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800903a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800903e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009046:	4991      	ldr	r1, [pc, #580]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009048:	4313      	orrs	r3, r2
 800904a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800905a:	4b8c      	ldr	r3, [pc, #560]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800905c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009060:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009068:	4988      	ldr	r1, [pc, #544]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800906a:	4313      	orrs	r3, r2
 800906c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00a      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800907c:	4b83      	ldr	r3, [pc, #524]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009082:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800908a:	4980      	ldr	r1, [pc, #512]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800908c:	4313      	orrs	r3, r2
 800908e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800909e:	4b7b      	ldr	r3, [pc, #492]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ac:	4977      	ldr	r1, [pc, #476]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090c0:	4b72      	ldr	r3, [pc, #456]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c6:	f023 0203 	bic.w	r2, r3, #3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ce:	496f      	ldr	r1, [pc, #444]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090e2:	4b6a      	ldr	r3, [pc, #424]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e8:	f023 020c 	bic.w	r2, r3, #12
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090f0:	4966      	ldr	r1, [pc, #408]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00a      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009104:	4b61      	ldr	r3, [pc, #388]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009112:	495e      	ldr	r1, [pc, #376]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009114:	4313      	orrs	r3, r2
 8009116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009126:	4b59      	ldr	r3, [pc, #356]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800912c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	4955      	ldr	r1, [pc, #340]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009136:	4313      	orrs	r3, r2
 8009138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00a      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009148:	4b50      	ldr	r3, [pc, #320]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800914a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800914e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009156:	494d      	ldr	r1, [pc, #308]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009158:	4313      	orrs	r3, r2
 800915a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800916a:	4b48      	ldr	r3, [pc, #288]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009170:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009178:	4944      	ldr	r1, [pc, #272]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917a:	4313      	orrs	r3, r2
 800917c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800918c:	4b3f      	ldr	r3, [pc, #252]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009192:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800919a:	493c      	ldr	r1, [pc, #240]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800919c:	4313      	orrs	r3, r2
 800919e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80091ae:	4b37      	ldr	r3, [pc, #220]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091bc:	4933      	ldr	r1, [pc, #204]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091d0:	4b2e      	ldr	r3, [pc, #184]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091de:	492b      	ldr	r1, [pc, #172]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d011      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091f2:	4b26      	ldr	r3, [pc, #152]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009200:	4922      	ldr	r1, [pc, #136]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800920c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009210:	d101      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009212:	2301      	movs	r3, #1
 8009214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009232:	4b16      	ldr	r3, [pc, #88]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009238:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009240:	4912      	ldr	r1, [pc, #72]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009254:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009264:	4909      	ldr	r1, [pc, #36]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009266:	4313      	orrs	r3, r2
 8009268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d006      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80d9 	beq.w	8009432 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009280:	4b02      	ldr	r3, [pc, #8]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a01      	ldr	r2, [pc, #4]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009286:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800928a:	e001      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800928c:	40023800 	.word	0x40023800
 8009290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009292:	f7f9 fac3 	bl	800281c <HAL_GetTick>
 8009296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009298:	e008      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800929a:	f7f9 fabf 	bl	800281c <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b64      	cmp	r3, #100	@ 0x64
 80092a6:	d901      	bls.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e194      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1f0      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d021      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11d      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092cc:	4b64      	ldr	r3, [pc, #400]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092d2:	0c1b      	lsrs	r3, r3, #16
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092da:	4b61      	ldr	r3, [pc, #388]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092e0:	0e1b      	lsrs	r3, r3, #24
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	019a      	lsls	r2, r3, #6
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	431a      	orrs	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	061b      	lsls	r3, r3, #24
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	071b      	lsls	r3, r3, #28
 8009300:	4957      	ldr	r1, [pc, #348]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800931c:	d00a      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009326:	2b00      	cmp	r3, #0
 8009328:	d02e      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009332:	d129      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009334:	4b4a      	ldr	r3, [pc, #296]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800933a:	0c1b      	lsrs	r3, r3, #16
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009342:	4b47      	ldr	r3, [pc, #284]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009348:	0f1b      	lsrs	r3, r3, #28
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	019a      	lsls	r2, r3, #6
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	431a      	orrs	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	071b      	lsls	r3, r3, #28
 8009368:	493d      	ldr	r1, [pc, #244]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800936a:	4313      	orrs	r3, r2
 800936c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009370:	4b3b      	ldr	r3, [pc, #236]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009376:	f023 021f 	bic.w	r2, r3, #31
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937e:	3b01      	subs	r3, #1
 8009380:	4937      	ldr	r1, [pc, #220]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01d      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009394:	4b32      	ldr	r3, [pc, #200]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800939a:	0e1b      	lsrs	r3, r3, #24
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a8:	0f1b      	lsrs	r3, r3, #28
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	019a      	lsls	r2, r3, #6
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	431a      	orrs	r2, r3
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	061b      	lsls	r3, r3, #24
 80093c2:	431a      	orrs	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	071b      	lsls	r3, r3, #28
 80093c8:	4925      	ldr	r1, [pc, #148]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d011      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	019a      	lsls	r2, r3, #6
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	431a      	orrs	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	061b      	lsls	r3, r3, #24
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	071b      	lsls	r3, r3, #28
 80093f8:	4919      	ldr	r1, [pc, #100]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009400:	4b17      	ldr	r3, [pc, #92]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a16      	ldr	r2, [pc, #88]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800940a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940c:	f7f9 fa06 	bl	800281c <HAL_GetTick>
 8009410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009412:	e008      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009414:	f7f9 fa02 	bl	800281c <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b64      	cmp	r3, #100	@ 0x64
 8009420:	d901      	bls.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e0d7      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009426:	4b0e      	ldr	r3, [pc, #56]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	2b01      	cmp	r3, #1
 8009436:	f040 80cd 	bne.w	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800943a:	4b09      	ldr	r3, [pc, #36]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a08      	ldr	r2, [pc, #32]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009446:	f7f9 f9e9 	bl	800281c <HAL_GetTick>
 800944a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800944c:	e00a      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800944e:	f7f9 f9e5 	bl	800281c <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	2b64      	cmp	r3, #100	@ 0x64
 800945a:	d903      	bls.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e0ba      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009460:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009464:	4b5e      	ldr	r3, [pc, #376]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800946c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009470:	d0ed      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800948e:	2b00      	cmp	r3, #0
 8009490:	d02e      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d12a      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800949a:	4b51      	ldr	r3, [pc, #324]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800949c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	f003 0303 	and.w	r3, r3, #3
 80094a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094a8:	4b4d      	ldr	r3, [pc, #308]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ae:	0f1b      	lsrs	r3, r3, #28
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	019a      	lsls	r2, r3, #6
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	041b      	lsls	r3, r3, #16
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	061b      	lsls	r3, r3, #24
 80094c8:	431a      	orrs	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	071b      	lsls	r3, r3, #28
 80094ce:	4944      	ldr	r1, [pc, #272]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80094d6:	4b42      	ldr	r3, [pc, #264]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e4:	3b01      	subs	r3, #1
 80094e6:	021b      	lsls	r3, r3, #8
 80094e8:	493d      	ldr	r1, [pc, #244]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d022      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009504:	d11d      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009506:	4b36      	ldr	r3, [pc, #216]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950c:	0e1b      	lsrs	r3, r3, #24
 800950e:	f003 030f 	and.w	r3, r3, #15
 8009512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009514:	4b32      	ldr	r3, [pc, #200]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800951a:	0f1b      	lsrs	r3, r3, #28
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	019a      	lsls	r2, r3, #6
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	041b      	lsls	r3, r3, #16
 800952e:	431a      	orrs	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	061b      	lsls	r3, r3, #24
 8009534:	431a      	orrs	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	071b      	lsls	r3, r3, #28
 800953a:	4929      	ldr	r1, [pc, #164]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800953c:	4313      	orrs	r3, r2
 800953e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d028      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800954e:	4b24      	ldr	r3, [pc, #144]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009554:	0e1b      	lsrs	r3, r3, #24
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800955c:	4b20      	ldr	r3, [pc, #128]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	019a      	lsls	r2, r3, #6
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	041b      	lsls	r3, r3, #16
 8009574:	431a      	orrs	r2, r3
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	071b      	lsls	r3, r3, #28
 8009582:	4917      	ldr	r1, [pc, #92]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009584:	4313      	orrs	r3, r2
 8009586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800958a:	4b15      	ldr	r3, [pc, #84]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800958c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009590:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	4911      	ldr	r1, [pc, #68]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800959a:	4313      	orrs	r3, r2
 800959c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095a0:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a0e      	ldr	r2, [pc, #56]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ac:	f7f9 f936 	bl	800281c <HAL_GetTick>
 80095b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095b2:	e008      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095b4:	f7f9 f932 	bl	800281c <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b64      	cmp	r3, #100	@ 0x64
 80095c0:	d901      	bls.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e007      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d2:	d1ef      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40023800 	.word	0x40023800

080095e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e0c6      	b.n	8009784 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d108      	bne.n	8009610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009606:	d009      	beq.n	800961c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	61da      	str	r2, [r3, #28]
 800960e:	e005      	b.n	800961c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7f8 f959 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800964c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009656:	d902      	bls.n	800965e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e002      	b.n	8009664 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800965e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009662:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800966c:	d007      	beq.n	800967e <HAL_SPI_Init+0x9a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009676:	d002      	beq.n	800967e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	431a      	orrs	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c0:	ea42 0103 	orr.w	r1, r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096dc:	d11b      	bne.n	8009716 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10b      	bne.n	80096fe <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096ee:	d903      	bls.n	80096f8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80096f6:	e002      	b.n	80096fe <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009702:	2b02      	cmp	r3, #2
 8009704:	d107      	bne.n	8009716 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009714:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	0c1b      	lsrs	r3, r3, #16
 800971c:	f003 0204 	and.w	r2, r3, #4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972e:	f003 0308 	and.w	r3, r3, #8
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800973c:	ea42 0103 	orr.w	r1, r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009756:	d105      	bne.n	8009764 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	b292      	uxth	r2, r2
 8009762:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69da      	ldr	r2, [r3, #28]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d001      	beq.n	80097aa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80097a6:	2302      	movs	r3, #2
 80097a8:	e0e9      	b.n	800997e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <HAL_SPI_Transmit_DMA+0x2a>
 80097b0:	88fb      	ldrh	r3, [r7, #6]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e0e1      	b.n	800997e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_SPI_Transmit_DMA+0x3c>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e0da      	b.n	800997e <HAL_SPI_Transmit_DMA+0x1f2>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2203      	movs	r2, #3
 80097d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800981a:	d10f      	bne.n	800983c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800982a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800983a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009844:	d10f      	bne.n	8009866 <HAL_SPI_Transmit_DMA+0xda>
  {
    SPI_RESET_CRC(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009864:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986a:	4a47      	ldr	r2, [pc, #284]	@ (8009988 <HAL_SPI_Transmit_DMA+0x1fc>)
 800986c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009872:	4a46      	ldr	r2, [pc, #280]	@ (800998c <HAL_SPI_Transmit_DMA+0x200>)
 8009874:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987a:	4a45      	ldr	r2, [pc, #276]	@ (8009990 <HAL_SPI_Transmit_DMA+0x204>)
 800987c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009882:	2200      	movs	r2, #0
 8009884:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009894:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800989e:	d82d      	bhi.n	80098fc <HAL_SPI_Transmit_DMA+0x170>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098aa:	d127      	bne.n	80098fc <HAL_SPI_Transmit_DMA+0x170>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10f      	bne.n	80098da <HAL_SPI_Transmit_DMA+0x14e>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098c8:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098d8:	e010      	b.n	80098fc <HAL_SPI_Transmit_DMA+0x170>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098e8:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	085b      	lsrs	r3, r3, #1
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3301      	adds	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009904:	4619      	mov	r1, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	330c      	adds	r3, #12
 800990c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009912:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009914:	f7fa fa22 	bl	8003d5c <HAL_DMA_Start_IT>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <HAL_SPI_Transmit_DMA+0x1aa>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009922:	f043 0210 	orr.w	r2, r3, #16
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e023      	b.n	800997e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	d007      	beq.n	8009954 <HAL_SPI_Transmit_DMA+0x1c8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009952:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0220 	orr.w	r2, r2, #32
 800996a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0202 	orr.w	r2, r2, #2
 800997a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	0800a78f 	.word	0x0800a78f
 800998c:	0800a441 	.word	0x0800a441
 8009990:	0800a7e3 	.word	0x0800a7e3

08009994 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d001      	beq.n	80099b2 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80099ae:	2302      	movs	r3, #2
 80099b0:	e11a      	b.n	8009be8 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_SPI_Receive_DMA+0x2a>
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e112      	b.n	8009be8 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d110      	bne.n	80099ec <HAL_SPI_Receive_DMA+0x58>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099d2:	d10b      	bne.n	80099ec <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2204      	movs	r2, #4
 80099d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f90a 	bl	8009bfc <HAL_SPI_TransmitReceive_DMA>
 80099e8:	4603      	mov	r3, r0
 80099ea:	e0fd      	b.n	8009be8 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_SPI_Receive_DMA+0x66>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e0f6      	b.n	8009be8 <HAL_SPI_Receive_DMA+0x254>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2204      	movs	r2, #4
 8009a06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	88fa      	ldrh	r2, [r7, #6]
 8009a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a46:	d10f      	bne.n	8009a68 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a66:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a70:	d10f      	bne.n	8009a92 <HAL_SPI_Receive_DMA+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a90:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009aa0:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009aaa:	d908      	bls.n	8009abe <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009aba:	605a      	str	r2, [r3, #4]
 8009abc:	e042      	b.n	8009b44 <HAL_SPI_Receive_DMA+0x1b0>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009acc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad8:	d134      	bne.n	8009b44 <HAL_SPI_Receive_DMA+0x1b0>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ae8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d111      	bne.n	8009b1e <HAL_SPI_Receive_DMA+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b08:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009b1c:	e012      	b.n	8009b44 <HAL_SPI_Receive_DMA+0x1b0>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b2c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b48:	4a29      	ldr	r2, [pc, #164]	@ (8009bf0 <HAL_SPI_Receive_DMA+0x25c>)
 8009b4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b50:	4a28      	ldr	r2, [pc, #160]	@ (8009bf4 <HAL_SPI_Receive_DMA+0x260>)
 8009b52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b58:	4a27      	ldr	r2, [pc, #156]	@ (8009bf8 <HAL_SPI_Receive_DMA+0x264>)
 8009b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b60:	2200      	movs	r2, #0
 8009b62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	4619      	mov	r1, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b74:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b7e:	f7fa f8ed 	bl	8003d5c <HAL_DMA_Start_IT>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <HAL_SPI_Receive_DMA+0x20c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b8c:	f043 0210 	orr.w	r2, r3, #16
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e023      	b.n	8009be8 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009baa:	2b40      	cmp	r3, #64	@ 0x40
 8009bac:	d007      	beq.n	8009bbe <HAL_SPI_Receive_DMA+0x22a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bbc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0220 	orr.w	r2, r2, #32
 8009bd4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f042 0201 	orr.w	r2, r2, #1
 8009be4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	0800a7ab 	.word	0x0800a7ab
 8009bf4:	0800a4e9 	.word	0x0800a4e9
 8009bf8:	0800a7e3 	.word	0x0800a7e3

08009bfc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c10:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d00c      	beq.n	8009c38 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c24:	d106      	bne.n	8009c34 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_SPI_TransmitReceive_DMA+0x38>
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d001      	beq.n	8009c38 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c34:	2302      	movs	r3, #2
 8009c36:	e16d      	b.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c44:	887b      	ldrh	r3, [r7, #2]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e162      	b.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_SPI_TransmitReceive_DMA+0x60>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e15b      	b.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x318>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d003      	beq.n	8009c78 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2205      	movs	r2, #5
 8009c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	887a      	ldrh	r2, [r7, #2]
 8009c88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	887a      	ldrh	r2, [r7, #2]
 8009c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	887a      	ldrh	r2, [r7, #2]
 8009c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	887a      	ldrh	r2, [r7, #2]
 8009ca2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cba:	d10f      	bne.n	8009cdc <HAL_SPI_TransmitReceive_DMA+0xe0>
  {
    SPI_RESET_CRC(hspi);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009cda:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009cea:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cf4:	d908      	bls.n	8009d08 <HAL_SPI_TransmitReceive_DMA+0x10c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d04:	605a      	str	r2, [r3, #4]
 8009d06:	e06f      	b.n	8009de8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d16:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d22:	d126      	bne.n	8009d72 <HAL_SPI_TransmitReceive_DMA+0x176>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10f      	bne.n	8009d50 <HAL_SPI_TransmitReceive_DMA+0x154>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d3e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d4e:	e010      	b.n	8009d72 <HAL_SPI_TransmitReceive_DMA+0x176>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d5e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	085b      	lsrs	r3, r3, #1
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d7c:	d134      	bne.n	8009de8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d8c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d111      	bne.n	8009dc2 <HAL_SPI_TransmitReceive_DMA+0x1c6>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009dac:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009dc0:	e012      	b.n	8009de8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dd0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	085b      	lsrs	r3, r3, #1
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3301      	adds	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d108      	bne.n	8009e06 <HAL_SPI_TransmitReceive_DMA+0x20a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df8:	4a48      	ldr	r2, [pc, #288]	@ (8009f1c <HAL_SPI_TransmitReceive_DMA+0x320>)
 8009dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e00:	4a47      	ldr	r2, [pc, #284]	@ (8009f20 <HAL_SPI_TransmitReceive_DMA+0x324>)
 8009e02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009e04:	e007      	b.n	8009e16 <HAL_SPI_TransmitReceive_DMA+0x21a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0a:	4a46      	ldr	r2, [pc, #280]	@ (8009f24 <HAL_SPI_TransmitReceive_DMA+0x328>)
 8009e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e12:	4a45      	ldr	r2, [pc, #276]	@ (8009f28 <HAL_SPI_TransmitReceive_DMA+0x32c>)
 8009e14:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1a:	4a44      	ldr	r2, [pc, #272]	@ (8009f2c <HAL_SPI_TransmitReceive_DMA+0x330>)
 8009e1c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e22:	2200      	movs	r2, #0
 8009e24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	330c      	adds	r3, #12
 8009e30:	4619      	mov	r1, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e36:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e40:	f7f9 ff8c 	bl	8003d5c <HAL_DMA_Start_IT>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00b      	beq.n	8009e62 <HAL_SPI_TransmitReceive_DMA+0x266>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e4e:	f043 0210 	orr.w	r2, r3, #16
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e058      	b.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0201 	orr.w	r2, r2, #1
 8009e70:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e76:	2200      	movs	r2, #0
 8009e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7e:	2200      	movs	r2, #0
 8009e80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e86:	2200      	movs	r2, #0
 8009e88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8e:	2200      	movs	r2, #0
 8009e90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009eaa:	f7f9 ff57 	bl	8003d5c <HAL_DMA_Start_IT>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00b      	beq.n	8009ecc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eb8:	f043 0210 	orr.w	r2, r3, #16
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e023      	b.n	8009f14 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed6:	2b40      	cmp	r3, #64	@ 0x40
 8009ed8:	d007      	beq.n	8009eea <HAL_SPI_TransmitReceive_DMA+0x2ee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ee8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0220 	orr.w	r2, r2, #32
 8009f00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0202 	orr.w	r2, r2, #2
 8009f10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	0800a7ab 	.word	0x0800a7ab
 8009f20:	0800a4e9 	.word	0x0800a4e9
 8009f24:	0800a7c7 	.word	0x0800a7c7
 8009f28:	0800a649 	.word	0x0800a649
 8009f2c:	0800a7e3 	.word	0x0800a7e3

08009f30 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	@ 0x28
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009f3c:	4b88      	ldr	r3, [pc, #544]	@ (800a160 <HAL_SPI_Abort+0x230>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a88      	ldr	r2, [pc, #544]	@ (800a164 <HAL_SPI_Abort+0x234>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	0a5b      	lsrs	r3, r3, #9
 8009f48:	2264      	movs	r2, #100	@ 0x64
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 0220 	bic.w	r2, r2, #32
 8009f62:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f6e:	2b80      	cmp	r3, #128	@ 0x80
 8009f70:	d117      	bne.n	8009fa2 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a7c      	ldr	r2, [pc, #496]	@ (800a168 <HAL_SPI_Abort+0x238>)
 8009f76:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d106      	bne.n	8009f8c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009f8a:	e008      	b.n	8009f9e <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b07      	cmp	r3, #7
 8009f9c:	d1ec      	bne.n	8009f78 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fac:	2b40      	cmp	r3, #64	@ 0x40
 8009fae:	d117      	bne.n	8009fe0 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800a16c <HAL_SPI_Abort+0x23c>)
 8009fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fc8:	e008      	b.n	8009fdc <HAL_SPI_Abort+0xac>
      }
      count--;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b07      	cmp	r3, #7
 8009fda:	d1ec      	bne.n	8009fb6 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d141      	bne.n	800a072 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d03d      	beq.n	800a072 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a002:	4618      	mov	r0, r3
 800a004:	f7f9 ff0a 	bl	8003e1c <HAL_DMA_Abort>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2240      	movs	r2, #64	@ 0x40
 800a012:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0202 	bic.w	r2, r2, #2
 800a022:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a024:	f7f8 fbfa 	bl	800281c <HAL_GetTick>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	2164      	movs	r1, #100	@ 0x64
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fda6 	bl	800ab80 <SPI_EndRxTxTransaction>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2240      	movs	r2, #64	@ 0x40
 800a03e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a04e:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a050:	f7f8 fbe4 	bl	800281c <HAL_GetTick>
 800a054:	4603      	mov	r3, r0
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	2364      	movs	r3, #100	@ 0x64
 800a05a:	2200      	movs	r2, #0
 800a05c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc7b 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2240      	movs	r2, #64	@ 0x40
 800a070:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d143      	bne.n	800a108 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a084:	2b00      	cmp	r3, #0
 800a086:	d03f      	beq.n	800a108 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08c:	2200      	movs	r2, #0
 800a08e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a094:	4618      	mov	r0, r3
 800a096:	f7f9 fec1 	bl	8003e1c <HAL_DMA_Abort>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2240      	movs	r2, #64	@ 0x40
 800a0a4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0b4:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a0b6:	f7f8 fbb1 	bl	800281c <HAL_GetTick>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2364      	movs	r3, #100	@ 0x64
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	2180      	movs	r1, #128	@ 0x80
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fbc1 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2240      	movs	r2, #64	@ 0x40
 800a0d4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a0d6:	f7f8 fba1 	bl	800281c <HAL_GetTick>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	2364      	movs	r3, #100	@ 0x64
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fc38 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2240      	movs	r2, #64	@ 0x40
 800a0f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a11a:	2b40      	cmp	r3, #64	@ 0x40
 800a11c:	d102      	bne.n	800a124 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	77fb      	strb	r3, [r7, #31]
 800a122:	e002      	b.n	800a12a <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a12a:	2300      	movs	r3, #0
 800a12c:	613b      	str	r3, [r7, #16]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	613b      	str	r3, [r7, #16]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800a156:	7ffb      	ldrb	r3, [r7, #31]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3720      	adds	r7, #32
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000000 	.word	0x20000000
 800a164:	057619f1 	.word	0x057619f1
 800a168:	0800ad15 	.word	0x0800ad15
 800a16c:	0800ac55 	.word	0x0800ac55

0800a170 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00f      	beq.n	800a1a4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a188:	4618      	mov	r0, r3
 800a18a:	f7f9 fe47 	bl	8003e1c <HAL_DMA_Abort>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a198:	f043 0210 	orr.w	r2, r3, #16
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00f      	beq.n	800a1cc <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7f9 fe33 	bl	8003e1c <HAL_DMA_Abort>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c0:	f043 0210 	orr.w	r2, r3, #16
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0203 	bic.w	r2, r2, #3
 800a1da:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	099b      	lsrs	r3, r3, #6
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10f      	bne.n	800a234 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	099b      	lsrs	r3, r3, #6
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
    return;
 800a232:	e0d7      	b.n	800a3e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	085b      	lsrs	r3, r3, #1
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <HAL_SPI_IRQHandler+0x66>
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	09db      	lsrs	r3, r3, #7
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	4798      	blx	r3
    return;
 800a254:	e0c6      	b.n	800a3e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10c      	bne.n	800a27c <HAL_SPI_IRQHandler+0x8c>
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	099b      	lsrs	r3, r3, #6
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	0a1b      	lsrs	r3, r3, #8
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80b4 	beq.w	800a3e4 <HAL_SPI_IRQHandler+0x1f4>
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 80ad 	beq.w	800a3e4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	099b      	lsrs	r3, r3, #6
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d023      	beq.n	800a2de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d011      	beq.n	800a2c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a6:	f043 0204 	orr.w	r2, r3, #4
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	e00b      	b.n	800a2de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	693b      	ldr	r3, [r7, #16]
        return;
 800a2dc:	e082      	b.n	800a3e4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	095b      	lsrs	r3, r3, #5
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d014      	beq.n	800a314 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ee:	f043 0201 	orr.w	r2, r3, #1
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00c      	beq.n	800a33a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a324:	f043 0208 	orr.w	r2, r3, #8
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a32c:	2300      	movs	r3, #0
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d04f      	beq.n	800a3e2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a350:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <HAL_SPI_IRQHandler+0x17e>
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d034      	beq.n	800a3d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0203 	bic.w	r2, r2, #3
 800a37c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a382:	2b00      	cmp	r3, #0
 800a384:	d011      	beq.n	800a3aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38a:	4a18      	ldr	r2, [pc, #96]	@ (800a3ec <HAL_SPI_IRQHandler+0x1fc>)
 800a38c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a392:	4618      	mov	r0, r3
 800a394:	f7f9 fdb2 	bl	8003efc <HAL_DMA_Abort_IT>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d005      	beq.n	800a3aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d016      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a3ec <HAL_SPI_IRQHandler+0x1fc>)
 800a3b8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f9 fd9c 	bl	8003efc <HAL_DMA_Abort_IT>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a3d6:	e003      	b.n	800a3e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f827 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a3de:	e000      	b.n	800a3e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a3e0:	bf00      	nop
    return;
 800a3e2:	bf00      	nop
  }
}
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800a823 	.word	0x0800a823

0800a3f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a44e:	f7f8 f9e5 	bl	800281c <HAL_GetTick>
 800a452:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a462:	d03b      	beq.n	800a4dc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0220 	bic.w	r2, r2, #32
 800a472:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0202 	bic.w	r2, r2, #2
 800a482:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	2164      	movs	r1, #100	@ 0x64
 800a488:	6978      	ldr	r0, [r7, #20]
 800a48a:	f000 fb79 	bl	800ab80 <SPI_EndRxTxTransaction>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a498:	f043 0220 	orr.w	r2, r3, #32
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f7ff ffa9 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a4da:	e002      	b.n	800a4e2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a4dc:	6978      	ldr	r0, [r7, #20]
 800a4de:	f013 f9a9 	bl	801d834 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08a      	sub	sp, #40	@ 0x28
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f4:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4fe:	f7f8 f98d 	bl	800281c <HAL_GetTick>
 800a502:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a512:	f000 8093 	beq.w	800a63c <SPI_DMAReceiveCplt+0x154>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0220 	bic.w	r2, r2, #32
 800a524:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a52e:	d13e      	bne.n	800a5ae <SPI_DMAReceiveCplt+0xc6>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	2364      	movs	r3, #100	@ 0x64
 800a536:	2201      	movs	r2, #1
 800a538:	2101      	movs	r1, #1
 800a53a:	69f8      	ldr	r0, [r7, #28]
 800a53c:	f000 f986 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <SPI_DMAReceiveCplt+0x6a>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a54a:	f043 0202 	orr.w	r2, r3, #2
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      /* Read CRC */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a55a:	d905      	bls.n	800a568 <SPI_DMAReceiveCplt+0x80>
      {
        /* Read 16bit CRC */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	e022      	b.n	800a5ae <SPI_DMAReceiveCplt+0xc6>
      }
      else
      {
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a578:	7bfb      	ldrb	r3, [r7, #15]

        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d115      	bne.n	800a5ae <SPI_DMAReceiveCplt+0xc6>
        {
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	2364      	movs	r3, #100	@ 0x64
 800a588:	2201      	movs	r2, #1
 800a58a:	2101      	movs	r1, #1
 800a58c:	69f8      	ldr	r0, [r7, #28]
 800a58e:	f000 f95d 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <SPI_DMAReceiveCplt+0xbc>
          {
            /* Error on the CRC reception */
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a59c:	f043 0202 	orr.w	r2, r3, #2
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
          tmpreg8 = *ptmpreg8;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	73fb      	strb	r3, [r7, #15]
          /* To avoid GCC warning */
          UNUSED(tmpreg8);
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10d      	bne.n	800a5d2 <SPI_DMAReceiveCplt+0xea>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5be:	d108      	bne.n	800a5d2 <SPI_DMAReceiveCplt+0xea>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0203 	bic.w	r2, r2, #3
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	e007      	b.n	800a5e2 <SPI_DMAReceiveCplt+0xfa>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0201 	bic.w	r2, r2, #1
 800a5e0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	2164      	movs	r1, #100	@ 0x64
 800a5e6:	69f8      	ldr	r0, [r7, #28]
 800a5e8:	f000 fa4e 	bl	800aa88 <SPI_EndRxTransaction>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <SPI_DMAReceiveCplt+0x110>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b10      	cmp	r3, #16
 800a614:	d10a      	bne.n	800a62c <SPI_DMAReceiveCplt+0x144>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a61a:	f043 0202 	orr.w	r2, r3, #2
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a62a:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <SPI_DMAReceiveCplt+0x154>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a634:	69f8      	ldr	r0, [r7, #28]
 800a636:	f7ff fef9 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a63a:	e002      	b.n	800a642 <SPI_DMAReceiveCplt+0x15a>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a63c:	69f8      	ldr	r0, [r7, #28]
 800a63e:	f013 f935 	bl	801d8ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08a      	sub	sp, #40	@ 0x28
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a654:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a65e:	f7f8 f8dd 	bl	800281c <HAL_GetTick>
 800a662:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a672:	f000 8086 	beq.w	800a782 <SPI_DMATransmitReceiveCplt+0x13a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0220 	bic.w	r2, r2, #32
 800a684:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68e:	d13d      	bne.n	800a70c <SPI_DMATransmitReceiveCplt+0xc4>
    {
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a698:	d120      	bne.n	800a6dc <SPI_DMATransmitReceiveCplt+0x94>
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d11c      	bne.n	800a6dc <SPI_DMATransmitReceiveCplt+0x94>
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	2364      	movs	r3, #100	@ 0x64
 800a6a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a6b0:	69f8      	ldr	r0, [r7, #28]
 800a6b2:	f000 f953 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <SPI_DMATransmitReceiveCplt+0x80>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c0:	f043 0202 	orr.w	r2, r3, #2
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	330c      	adds	r3, #12
 800a6ce:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	e017      	b.n	800a70c <SPI_DMATransmitReceiveCplt+0xc4>
      }
      else
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT,
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2364      	movs	r3, #100	@ 0x64
 800a6e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a6e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a6ea:	69f8      	ldr	r0, [r7, #28]
 800a6ec:	f000 f936 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <SPI_DMATransmitReceiveCplt+0xba>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6fa:	f043 0202 	orr.w	r2, r3, #2
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Read CRC to Flush DR and RXNE flag */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a70a:	693b      	ldr	r3, [r7, #16]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	2164      	movs	r1, #100	@ 0x64
 800a710:	69f8      	ldr	r0, [r7, #28]
 800a712:	f000 fa35 	bl	800ab80 <SPI_EndRxTxTransaction>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <SPI_DMATransmitReceiveCplt+0xe0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a720:	f043 0220 	orr.w	r2, r3, #32
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0203 	bic.w	r2, r2, #3
 800a736:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	2200      	movs	r2, #0
 800a742:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d10a      	bne.n	800a772 <SPI_DMATransmitReceiveCplt+0x12a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a760:	f043 0202 	orr.w	r2, r3, #2
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a770:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <SPI_DMATransmitReceiveCplt+0x13a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a77a:	69f8      	ldr	r0, [r7, #28]
 800a77c:	f7ff fe56 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a780:	e002      	b.n	800a788 <SPI_DMATransmitReceiveCplt+0x140>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a782:	69f8      	ldr	r0, [r7, #28]
 800a784:	f013 f8d8 	bl	801d938 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fe27 	bl	800a3f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7ff fe23 	bl	800a404 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7ff fe1f 	bl	800a418 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0203 	bic.w	r2, r2, #3
 800a7fe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a804:	f043 0210 	orr.w	r2, r3, #16
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f7ff fe09 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7ff fdf4 	bl	800a42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	4613      	mov	r3, r2
 800a85a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a85c:	f7f7 ffde 	bl	800281c <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	4413      	add	r3, r2
 800a86a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a86c:	f7f7 ffd6 	bl	800281c <HAL_GetTick>
 800a870:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a872:	4b39      	ldr	r3, [pc, #228]	@ (800a958 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	015b      	lsls	r3, r3, #5
 800a878:	0d1b      	lsrs	r3, r3, #20
 800a87a:	69fa      	ldr	r2, [r7, #28]
 800a87c:	fb02 f303 	mul.w	r3, r2, r3
 800a880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a882:	e055      	b.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d051      	beq.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a88c:	f7f7 ffc6 	bl	800281c <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d902      	bls.n	800a8a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d13d      	bne.n	800a91e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8ba:	d111      	bne.n	800a8e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8c4:	d004      	beq.n	800a8d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ce:	d107      	bne.n	800a8e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e8:	d10f      	bne.n	800a90a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e018      	b.n	800a950 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	e002      	b.n	800a930 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	4013      	ands	r3, r2
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	bf0c      	ite	eq
 800a940:	2301      	moveq	r3, #1
 800a942:	2300      	movne	r3, #0
 800a944:	b2db      	uxtb	r3, r3
 800a946:	461a      	mov	r2, r3
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d19a      	bne.n	800a884 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20000000 	.word	0x20000000

0800a95c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08a      	sub	sp, #40	@ 0x28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a96e:	f7f7 ff55 	bl	800281c <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	1a9b      	subs	r3, r3, r2
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	4413      	add	r3, r2
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a97e:	f7f7 ff4d 	bl	800281c <HAL_GetTick>
 800a982:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a98c:	4b3d      	ldr	r3, [pc, #244]	@ (800aa84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	00da      	lsls	r2, r3, #3
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	0d1b      	lsrs	r3, r3, #20
 800a99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a99e:	fb02 f303 	mul.w	r3, r2, r3
 800a9a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a9a4:	e061      	b.n	800aa6a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9ac:	d107      	bne.n	800a9be <SPI_WaitFifoStateUntilTimeout+0x62>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d051      	beq.n	800aa6a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9c6:	f7f7 ff29 	bl	800281c <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d902      	bls.n	800a9dc <SPI_WaitFifoStateUntilTimeout+0x80>
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d13d      	bne.n	800aa58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a9ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9f4:	d111      	bne.n	800aa1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9fe:	d004      	beq.n	800aa0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa08:	d107      	bne.n	800aa1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa22:	d10f      	bne.n	800aa44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e011      	b.n	800aa7c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa62:	e002      	b.n	800aa6a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	4013      	ands	r3, r2
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d195      	bne.n	800a9a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3728      	adds	r7, #40	@ 0x28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20000000 	.word	0x20000000

0800aa88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af02      	add	r7, sp, #8
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa9c:	d111      	bne.n	800aac2 <SPI_EndRxTransaction+0x3a>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaa6:	d004      	beq.n	800aab2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aab0:	d107      	bne.n	800aac2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aac0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aaca:	d112      	bne.n	800aaf2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2200      	movs	r2, #0
 800aad4:	2180      	movs	r1, #128	@ 0x80
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff feb8 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d021      	beq.n	800ab26 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aae6:	f043 0220 	orr.w	r2, r3, #32
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e03d      	b.n	800ab6e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aaf2:	4b21      	ldr	r3, [pc, #132]	@ (800ab78 <SPI_EndRxTransaction+0xf0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a21      	ldr	r2, [pc, #132]	@ (800ab7c <SPI_EndRxTransaction+0xf4>)
 800aaf8:	fba2 2303 	umull	r2, r3, r2, r3
 800aafc:	0d5b      	lsrs	r3, r3, #21
 800aafe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
 800ab06:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab1e:	2b80      	cmp	r3, #128	@ 0x80
 800ab20:	d0f2      	beq.n	800ab08 <SPI_EndRxTransaction+0x80>
 800ab22:	e000      	b.n	800ab26 <SPI_EndRxTransaction+0x9e>
        break;
 800ab24:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab2e:	d11d      	bne.n	800ab6c <SPI_EndRxTransaction+0xe4>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab38:	d004      	beq.n	800ab44 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab42:	d113      	bne.n	800ab6c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff ff03 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d007      	beq.n	800ab6c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab60:	f043 0220 	orr.w	r2, r3, #32
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e000      	b.n	800ab6e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20000000 	.word	0x20000000
 800ab7c:	165e9f81 	.word	0x165e9f81

0800ab80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fedf 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aba8:	f043 0220 	orr.w	r2, r3, #32
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e046      	b.n	800ac42 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800abb4:	4b25      	ldr	r3, [pc, #148]	@ (800ac4c <SPI_EndRxTxTransaction+0xcc>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a25      	ldr	r2, [pc, #148]	@ (800ac50 <SPI_EndRxTxTransaction+0xd0>)
 800abba:	fba2 2303 	umull	r2, r3, r2, r3
 800abbe:	0d5b      	lsrs	r3, r3, #21
 800abc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800abc4:	fb02 f303 	mul.w	r3, r2, r3
 800abc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abd2:	d112      	bne.n	800abfa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	2180      	movs	r1, #128	@ 0x80
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f7ff fe34 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d016      	beq.n	800ac18 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abee:	f043 0220 	orr.w	r2, r3, #32
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e023      	b.n	800ac42 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00a      	beq.n	800ac16 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac10:	2b80      	cmp	r3, #128	@ 0x80
 800ac12:	d0f2      	beq.n	800abfa <SPI_EndRxTxTransaction+0x7a>
 800ac14:	e000      	b.n	800ac18 <SPI_EndRxTxTransaction+0x98>
        break;
 800ac16:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7ff fe99 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac34:	f043 0220 	orr.w	r2, r3, #32
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e000      	b.n	800ac42 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000000 	.word	0x20000000
 800ac50:	165e9f81 	.word	0x165e9f81

0800ac54 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af02      	add	r7, sp, #8
 800ac5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac6a:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ac6c:	4b27      	ldr	r3, [pc, #156]	@ (800ad0c <SPI_AbortRx_ISR+0xb8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a27      	ldr	r2, [pc, #156]	@ (800ad10 <SPI_AbortRx_ISR+0xbc>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	0a5b      	lsrs	r3, r3, #9
 800ac78:	2264      	movs	r2, #100	@ 0x64
 800ac7a:	fb02 f303 	mul.w	r3, r2, r3
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac8e:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800aca2:	e009      	b.n	800acb8 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb4:	2b40      	cmp	r3, #64	@ 0x40
 800acb6:	d0eb      	beq.n	800ac90 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800acb8:	f7f7 fdb0 	bl	800281c <HAL_GetTick>
 800acbc:	4603      	mov	r3, r0
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	2364      	movs	r3, #100	@ 0x64
 800acc2:	2200      	movs	r2, #0
 800acc4:	2180      	movs	r1, #128	@ 0x80
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fdc0 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2240      	movs	r2, #64	@ 0x40
 800acd6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800acd8:	f7f7 fda0 	bl	800281c <HAL_GetTick>
 800acdc:	4603      	mov	r3, r0
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	2364      	movs	r3, #100	@ 0x64
 800ace2:	2200      	movs	r2, #0
 800ace4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff fe37 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2240      	movs	r2, #64	@ 0x40
 800acf8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2207      	movs	r2, #7
 800acfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000000 	.word	0x20000000
 800ad10:	057619f1 	.word	0x057619f1

0800ad14 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ad1c:	4b4c      	ldr	r3, [pc, #304]	@ (800ae50 <SPI_AbortTx_ISR+0x13c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a4c      	ldr	r2, [pc, #304]	@ (800ae54 <SPI_AbortTx_ISR+0x140>)
 800ad22:	fba2 2303 	umull	r2, r3, r2, r3
 800ad26:	0a5b      	lsrs	r3, r3, #9
 800ad28:	2264      	movs	r2, #100	@ 0x64
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad3e:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800ad52:	e009      	b.n	800ad68 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad64:	2b80      	cmp	r3, #128	@ 0x80
 800ad66:	d0eb      	beq.n	800ad40 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ad68:	f7f7 fd58 	bl	800281c <HAL_GetTick>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	2164      	movs	r1, #100	@ 0x64
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff ff04 	bl	800ab80 <SPI_EndRxTxTransaction>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2240      	movs	r2, #64	@ 0x40
 800ad82:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad92:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ad94:	f7f7 fd42 	bl	800281c <HAL_GetTick>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2364      	movs	r3, #100	@ 0x64
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7ff fdd9 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2240      	movs	r2, #64	@ 0x40
 800adb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc0:	2b40      	cmp	r3, #64	@ 0x40
 800adc2:	d13c      	bne.n	800ae3e <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800add2:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ade6:	e009      	b.n	800adfc <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3b01      	subs	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf8:	2b40      	cmp	r3, #64	@ 0x40
 800adfa:	d0eb      	beq.n	800add4 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800adfc:	f7f7 fd0e 	bl	800281c <HAL_GetTick>
 800ae00:	4603      	mov	r3, r0
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	2364      	movs	r3, #100	@ 0x64
 800ae06:	2200      	movs	r2, #0
 800ae08:	2180      	movs	r1, #128	@ 0x80
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fd1e 	bl	800a84c <SPI_WaitFlagStateUntilTimeout>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2240      	movs	r2, #64	@ 0x40
 800ae1a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ae1c:	f7f7 fcfe 	bl	800281c <HAL_GetTick>
 800ae20:	4603      	mov	r3, r0
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	2364      	movs	r3, #100	@ 0x64
 800ae26:	2200      	movs	r2, #0
 800ae28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fd95 	bl	800a95c <SPI_WaitFifoStateUntilTimeout>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2240      	movs	r2, #64	@ 0x40
 800ae3c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2207      	movs	r2, #7
 800ae42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000000 	.word	0x20000000
 800ae54:	057619f1 	.word	0x057619f1

0800ae58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e049      	b.n	800aefe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d106      	bne.n	800ae84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7f6 fec0 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3304      	adds	r3, #4
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f000 fa0e 	bl	800b2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d001      	beq.n	800af20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e054      	b.n	800afca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a26      	ldr	r2, [pc, #152]	@ (800afd8 <HAL_TIM_Base_Start_IT+0xd0>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d022      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af4a:	d01d      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a22      	ldr	r2, [pc, #136]	@ (800afdc <HAL_TIM_Base_Start_IT+0xd4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d018      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a21      	ldr	r2, [pc, #132]	@ (800afe0 <HAL_TIM_Base_Start_IT+0xd8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d013      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a1f      	ldr	r2, [pc, #124]	@ (800afe4 <HAL_TIM_Base_Start_IT+0xdc>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d00e      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a1e      	ldr	r2, [pc, #120]	@ (800afe8 <HAL_TIM_Base_Start_IT+0xe0>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d009      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a1c      	ldr	r2, [pc, #112]	@ (800afec <HAL_TIM_Base_Start_IT+0xe4>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d004      	beq.n	800af88 <HAL_TIM_Base_Start_IT+0x80>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a1b      	ldr	r2, [pc, #108]	@ (800aff0 <HAL_TIM_Base_Start_IT+0xe8>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d115      	bne.n	800afb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689a      	ldr	r2, [r3, #8]
 800af8e:	4b19      	ldr	r3, [pc, #100]	@ (800aff4 <HAL_TIM_Base_Start_IT+0xec>)
 800af90:	4013      	ands	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b06      	cmp	r3, #6
 800af98:	d015      	beq.n	800afc6 <HAL_TIM_Base_Start_IT+0xbe>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afa0:	d011      	beq.n	800afc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0201 	orr.w	r2, r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afb2:	e008      	b.n	800afc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0201 	orr.w	r2, r2, #1
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	e000      	b.n	800afc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40000400 	.word	0x40000400
 800afe0:	40000800 	.word	0x40000800
 800afe4:	40000c00 	.word	0x40000c00
 800afe8:	40010400 	.word	0x40010400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40001800 	.word	0x40001800
 800aff4:	00010007 	.word	0x00010007

0800aff8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0201 	bic.w	r2, r2, #1
 800b00e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6a1a      	ldr	r2, [r3, #32]
 800b016:	4b0f      	ldr	r3, [pc, #60]	@ (800b054 <HAL_TIM_Base_Stop_IT+0x5c>)
 800b018:	4013      	ands	r3, r2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10f      	bne.n	800b03e <HAL_TIM_Base_Stop_IT+0x46>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6a1a      	ldr	r2, [r3, #32]
 800b024:	f240 4344 	movw	r3, #1092	@ 0x444
 800b028:	4013      	ands	r3, r2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d107      	bne.n	800b03e <HAL_TIM_Base_Stop_IT+0x46>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0201 	bic.w	r2, r2, #1
 800b03c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	00111111 	.word	0x00111111

0800b058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d020      	beq.n	800b0bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f003 0302 	and.w	r3, r3, #2
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01b      	beq.n	800b0bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0202 	mvn.w	r2, #2
 800b08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f003 0303 	and.w	r3, r3, #3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f8e9 	bl	800b27a <HAL_TIM_IC_CaptureCallback>
 800b0a8:	e005      	b.n	800b0b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8db 	bl	800b266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f8ec 	bl	800b28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d020      	beq.n	800b108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01b      	beq.n	800b108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f06f 0204 	mvn.w	r2, #4
 800b0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f8c3 	bl	800b27a <HAL_TIM_IC_CaptureCallback>
 800b0f4:	e005      	b.n	800b102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f8b5 	bl	800b266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f8c6 	bl	800b28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f003 0308 	and.w	r3, r3, #8
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d020      	beq.n	800b154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f003 0308 	and.w	r3, r3, #8
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01b      	beq.n	800b154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f06f 0208 	mvn.w	r2, #8
 800b124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2204      	movs	r2, #4
 800b12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f89d 	bl	800b27a <HAL_TIM_IC_CaptureCallback>
 800b140:	e005      	b.n	800b14e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f88f 	bl	800b266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f8a0 	bl	800b28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d020      	beq.n	800b1a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01b      	beq.n	800b1a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f06f 0210 	mvn.w	r2, #16
 800b170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2208      	movs	r2, #8
 800b176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f877 	bl	800b27a <HAL_TIM_IC_CaptureCallback>
 800b18c:	e005      	b.n	800b19a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f869 	bl	800b266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f87a 	bl	800b28e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00c      	beq.n	800b1c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d007      	beq.n	800b1c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f06f 0201 	mvn.w	r2, #1
 800b1bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7f6 f8f2 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d104      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00c      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f9a1 	bl	800b534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f999 	bl	800b548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00c      	beq.n	800b23a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d007      	beq.n	800b23a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f834 	bl	800b2a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	f003 0320 	and.w	r3, r3, #32
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00c      	beq.n	800b25e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0320 	and.w	r3, r3, #32
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d007      	beq.n	800b25e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f06f 0220 	mvn.w	r2, #32
 800b256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f961 	bl	800b520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b296:	bf00      	nop
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2aa:	bf00      	nop
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
	...

0800b2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a43      	ldr	r2, [pc, #268]	@ (800b3d8 <TIM_Base_SetConfig+0x120>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d013      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d6:	d00f      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a40      	ldr	r2, [pc, #256]	@ (800b3dc <TIM_Base_SetConfig+0x124>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3f      	ldr	r2, [pc, #252]	@ (800b3e0 <TIM_Base_SetConfig+0x128>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a3e      	ldr	r2, [pc, #248]	@ (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3d      	ldr	r2, [pc, #244]	@ (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d108      	bne.n	800b30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a32      	ldr	r2, [pc, #200]	@ (800b3d8 <TIM_Base_SetConfig+0x120>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d02b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b318:	d027      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a2f      	ldr	r2, [pc, #188]	@ (800b3dc <TIM_Base_SetConfig+0x124>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d023      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a2e      	ldr	r2, [pc, #184]	@ (800b3e0 <TIM_Base_SetConfig+0x128>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01f      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a2d      	ldr	r2, [pc, #180]	@ (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d01b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a2c      	ldr	r2, [pc, #176]	@ (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d017      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2b      	ldr	r2, [pc, #172]	@ (800b3ec <TIM_Base_SetConfig+0x134>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d013      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2a      	ldr	r2, [pc, #168]	@ (800b3f0 <TIM_Base_SetConfig+0x138>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d00f      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a29      	ldr	r2, [pc, #164]	@ (800b3f4 <TIM_Base_SetConfig+0x13c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a28      	ldr	r2, [pc, #160]	@ (800b3f8 <TIM_Base_SetConfig+0x140>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d007      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a27      	ldr	r2, [pc, #156]	@ (800b3fc <TIM_Base_SetConfig+0x144>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d003      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a26      	ldr	r2, [pc, #152]	@ (800b400 <TIM_Base_SetConfig+0x148>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d108      	bne.n	800b37c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a0e      	ldr	r2, [pc, #56]	@ (800b3d8 <TIM_Base_SetConfig+0x120>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d003      	beq.n	800b3aa <TIM_Base_SetConfig+0xf2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a10      	ldr	r2, [pc, #64]	@ (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d103      	bne.n	800b3b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f043 0204 	orr.w	r2, r3, #4
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	40010000 	.word	0x40010000
 800b3dc:	40000400 	.word	0x40000400
 800b3e0:	40000800 	.word	0x40000800
 800b3e4:	40000c00 	.word	0x40000c00
 800b3e8:	40010400 	.word	0x40010400
 800b3ec:	40014000 	.word	0x40014000
 800b3f0:	40014400 	.word	0x40014400
 800b3f4:	40014800 	.word	0x40014800
 800b3f8:	40001800 	.word	0x40001800
 800b3fc:	40001c00 	.word	0x40001c00
 800b400:	40002000 	.word	0x40002000

0800b404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b418:	2302      	movs	r3, #2
 800b41a:	e06d      	b.n	800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a30      	ldr	r2, [pc, #192]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d004      	beq.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a2f      	ldr	r2, [pc, #188]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d108      	bne.n	800b462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b468:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4313      	orrs	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a20      	ldr	r2, [pc, #128]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d022      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b48e:	d01d      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a1d      	ldr	r2, [pc, #116]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d018      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a1c      	ldr	r2, [pc, #112]	@ (800b510 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d013      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b514 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00e      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a15      	ldr	r2, [pc, #84]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d009      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a16      	ldr	r2, [pc, #88]	@ (800b518 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d004      	beq.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a15      	ldr	r2, [pc, #84]	@ (800b51c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d10c      	bne.n	800b4e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	40010000 	.word	0x40010000
 800b508:	40010400 	.word	0x40010400
 800b50c:	40000400 	.word	0x40000400
 800b510:	40000800 	.word	0x40000800
 800b514:	40000c00 	.word	0x40000c00
 800b518:	40014000 	.word	0x40014000
 800b51c:	40001800 	.word	0x40001800

0800b520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e040      	b.n	800b5f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7f6 fb66 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2224      	movs	r2, #36	@ 0x24
 800b588:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f022 0201 	bic.w	r2, r2, #1
 800b598:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 f888 	bl	800c6b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fe21 	bl	800c1f0 <UART_SetConfig>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e01b      	b.n	800b5f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b5c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f042 0201 	orr.w	r2, r2, #1
 800b5e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 f907 	bl	800c7fc <UART_CheckIdleState>
 800b5ee:	4603      	mov	r3, r0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4613      	mov	r3, r2
 800b606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b60c:	2b20      	cmp	r3, #32
 800b60e:	d177      	bne.n	800b700 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <HAL_UART_Transmit+0x24>
 800b616:	88fb      	ldrh	r3, [r7, #6]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e070      	b.n	800b702 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2221      	movs	r2, #33	@ 0x21
 800b62c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b62e:	f7f7 f8f5 	bl	800281c <HAL_GetTick>
 800b632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	88fa      	ldrh	r2, [r7, #6]
 800b638:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b64c:	d108      	bne.n	800b660 <HAL_UART_Transmit+0x68>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d104      	bne.n	800b660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	e003      	b.n	800b668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b664:	2300      	movs	r3, #0
 800b666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b668:	e02f      	b.n	800b6ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2200      	movs	r2, #0
 800b672:	2180      	movs	r1, #128	@ 0x80
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f001 f918 	bl	800c8aa <UART_WaitOnFlagUntilTimeout>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2220      	movs	r2, #32
 800b684:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e03b      	b.n	800b702 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10b      	bne.n	800b6a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b69e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	3302      	adds	r3, #2
 800b6a4:	61bb      	str	r3, [r7, #24]
 800b6a6:	e007      	b.n	800b6b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	781a      	ldrb	r2, [r3, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1c9      	bne.n	800b66a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2140      	movs	r1, #64	@ 0x40
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f001 f8e2 	bl	800c8aa <UART_WaitOnFlagUntilTimeout>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d004      	beq.n	800b6f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e005      	b.n	800b702 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	e000      	b.n	800b702 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b700:	2302      	movs	r3, #2
  }
}
 800b702:	4618      	mov	r0, r3
 800b704:	3720      	adds	r7, #32
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b08b      	sub	sp, #44	@ 0x2c
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b71e:	2b20      	cmp	r3, #32
 800b720:	d147      	bne.n	800b7b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <HAL_UART_Transmit_IT+0x22>
 800b728:	88fb      	ldrh	r3, [r7, #6]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e040      	b.n	800b7b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	88fa      	ldrh	r2, [r7, #6]
 800b73c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2221      	movs	r2, #33	@ 0x21
 800b75a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b764:	d107      	bne.n	800b776 <HAL_UART_Transmit_IT+0x6a>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4a13      	ldr	r2, [pc, #76]	@ (800b7c0 <HAL_UART_Transmit_IT+0xb4>)
 800b772:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b774:	e002      	b.n	800b77c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4a12      	ldr	r2, [pc, #72]	@ (800b7c4 <HAL_UART_Transmit_IT+0xb8>)
 800b77a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	613b      	str	r3, [r7, #16]
   return(result);
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b790:	627b      	str	r3, [r7, #36]	@ 0x24
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79a:	623b      	str	r3, [r7, #32]
 800b79c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	69f9      	ldr	r1, [r7, #28]
 800b7a0:	6a3a      	ldr	r2, [r7, #32]
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e6      	bne.n	800b77c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e000      	b.n	800b7b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b7b2:	2302      	movs	r3, #2
  }
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	372c      	adds	r7, #44	@ 0x2c
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	0800d13f 	.word	0x0800d13f
 800b7c4:	0800d089 	.word	0x0800d089

0800b7c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	@ 0x28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7dc:	2b20      	cmp	r3, #32
 800b7de:	d132      	bne.n	800b846 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <HAL_UART_Receive_IT+0x24>
 800b7e6:	88fb      	ldrh	r3, [r7, #6]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e02b      	b.n	800b848 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d018      	beq.n	800b836 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	e853 3f00 	ldrex	r3, [r3]
 800b810:	613b      	str	r3, [r7, #16]
   return(result);
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b818:	627b      	str	r3, [r7, #36]	@ 0x24
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b822:	623b      	str	r3, [r7, #32]
 800b824:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b826:	69f9      	ldr	r1, [r7, #28]
 800b828:	6a3a      	ldr	r2, [r7, #32]
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1e6      	bne.n	800b804 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b836:	88fb      	ldrh	r3, [r7, #6]
 800b838:	461a      	mov	r2, r3
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f001 f8a1 	bl	800c984 <UART_Start_Receive_IT>
 800b842:	4603      	mov	r3, r0
 800b844:	e000      	b.n	800b848 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b846:	2302      	movs	r3, #2
  }
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3728      	adds	r7, #40	@ 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	@ 0x28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	4613      	mov	r3, r2
 800b85c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b862:	2b20      	cmp	r3, #32
 800b864:	d165      	bne.n	800b932 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <HAL_UART_Transmit_DMA+0x22>
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e05e      	b.n	800b934 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	88fa      	ldrh	r2, [r7, #6]
 800b880:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	88fa      	ldrh	r2, [r7, #6]
 800b888:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2221      	movs	r2, #33	@ 0x21
 800b898:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d027      	beq.n	800b8f2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a6:	4a25      	ldr	r2, [pc, #148]	@ (800b93c <HAL_UART_Transmit_DMA+0xec>)
 800b8a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8ae:	4a24      	ldr	r2, [pc, #144]	@ (800b940 <HAL_UART_Transmit_DMA+0xf0>)
 800b8b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8b6:	4a23      	ldr	r2, [pc, #140]	@ (800b944 <HAL_UART_Transmit_DMA+0xf4>)
 800b8b8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8be:	2200      	movs	r2, #0
 800b8c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3328      	adds	r3, #40	@ 0x28
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	88fb      	ldrh	r3, [r7, #6]
 800b8d6:	f7f8 fa41 	bl	8003d5c <HAL_DMA_Start_IT>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2210      	movs	r2, #16
 800b8e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2220      	movs	r2, #32
 800b8ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e020      	b.n	800b934 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2240      	movs	r2, #64	@ 0x40
 800b8f8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3308      	adds	r3, #8
 800b900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	613b      	str	r3, [r7, #16]
   return(result);
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b910:	627b      	str	r3, [r7, #36]	@ 0x24
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b91a:	623a      	str	r2, [r7, #32]
 800b91c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	69f9      	ldr	r1, [r7, #28]
 800b920:	6a3a      	ldr	r2, [r7, #32]
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	61bb      	str	r3, [r7, #24]
   return(result);
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e5      	bne.n	800b8fa <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	e000      	b.n	800b934 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b932:	2302      	movs	r3, #2
  }
}
 800b934:	4618      	mov	r0, r3
 800b936:	3728      	adds	r7, #40	@ 0x28
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	0800cd65 	.word	0x0800cd65
 800b940:	0800cdfb 	.word	0x0800cdfb
 800b944:	0800cfe7 	.word	0x0800cfe7

0800b948 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08a      	sub	sp, #40	@ 0x28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	4613      	mov	r3, r2
 800b954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b95c:	2b20      	cmp	r3, #32
 800b95e:	d132      	bne.n	800b9c6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <HAL_UART_Receive_DMA+0x24>
 800b966:	88fb      	ldrh	r3, [r7, #6]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e02b      	b.n	800b9c8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d018      	beq.n	800b9b6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	613b      	str	r3, [r7, #16]
   return(result);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b998:	627b      	str	r3, [r7, #36]	@ 0x24
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	623b      	str	r3, [r7, #32]
 800b9a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	69f9      	ldr	r1, [r7, #28]
 800b9a8:	6a3a      	ldr	r2, [r7, #32]
 800b9aa:	e841 2300 	strex	r3, r2, [r1]
 800b9ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1e6      	bne.n	800b984 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b9b6:	88fb      	ldrh	r3, [r7, #6]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68b9      	ldr	r1, [r7, #8]
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f001 f8a7 	bl	800cb10 <UART_Start_Receive_DMA>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	e000      	b.n	800b9c8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b9c6:	2302      	movs	r3, #2
  }
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3728      	adds	r7, #40	@ 0x28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b0a0      	sub	sp, #128	@ 0x80
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b9e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9e8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800b9ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9f8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b9fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ba04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e6      	bne.n	800b9d8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba14:	e853 3f00 	ldrex	r3, [r3]
 800ba18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba1c:	f023 0301 	bic.w	r3, r3, #1
 800ba20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ba2a:	657a      	str	r2, [r7, #84]	@ 0x54
 800ba2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba32:	e841 2300 	strex	r3, r2, [r1]
 800ba36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e5      	bne.n	800ba0a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d118      	bne.n	800ba78 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	f023 0310 	bic.w	r3, r3, #16
 800ba5a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e6      	bne.n	800ba46 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba82:	2b80      	cmp	r3, #128	@ 0x80
 800ba84:	d137      	bne.n	800baf6 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	e853 3f00 	ldrex	r3, [r3]
 800ba94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba9c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800baa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800baa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800baac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e5      	bne.n	800ba86 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d019      	beq.n	800baf6 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bac6:	2200      	movs	r2, #0
 800bac8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f8 f9a4 	bl	8003e1c <HAL_DMA_Abort>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00d      	beq.n	800baf6 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f8 fbc6 	bl	8004270 <HAL_DMA_GetError>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d105      	bne.n	800baf6 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2210      	movs	r2, #16
 800baee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e061      	b.n	800bbba <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb00:	2b40      	cmp	r3, #64	@ 0x40
 800bb02:	d137      	bne.n	800bb74 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3308      	adds	r3, #8
 800bb0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3308      	adds	r3, #8
 800bb22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bb24:	61ba      	str	r2, [r7, #24]
 800bb26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	6979      	ldr	r1, [r7, #20]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	613b      	str	r3, [r7, #16]
   return(result);
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e5      	bne.n	800bb04 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d019      	beq.n	800bb74 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb44:	2200      	movs	r2, #0
 800bb46:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7f8 f965 	bl	8003e1c <HAL_DMA_Abort>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00d      	beq.n	800bb74 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f8 fb87 	bl	8004270 <HAL_DMA_GetError>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b20      	cmp	r3, #32
 800bb66:	d105      	bne.n	800bb74 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2210      	movs	r2, #16
 800bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e022      	b.n	800bbba <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	220f      	movs	r2, #15
 800bb8a:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699a      	ldr	r2, [r3, #24]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0208 	orr.w	r2, r2, #8
 800bb9a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3780      	adds	r7, #128	@ 0x80
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b0ba      	sub	sp, #232	@ 0xe8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bbee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bbf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d115      	bne.n	800bc2c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00f      	beq.n	800bc2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 82b1 	beq.w	800c184 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
      }
      return;
 800bc2a:	e2ab      	b.n	800c184 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 8117 	beq.w	800be64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bc36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bc42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bc46:	4b85      	ldr	r3, [pc, #532]	@ (800be5c <HAL_UART_IRQHandler+0x298>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 810a 	beq.w	800be64 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d011      	beq.n	800bc80 <HAL_UART_IRQHandler+0xbc>
 800bc5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00b      	beq.n	800bc80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc76:	f043 0201 	orr.w	r2, r3, #1
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d011      	beq.n	800bcb0 <HAL_UART_IRQHandler+0xec>
 800bc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bca6:	f043 0204 	orr.w	r2, r3, #4
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d011      	beq.n	800bce0 <HAL_UART_IRQHandler+0x11c>
 800bcbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2204      	movs	r2, #4
 800bcce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcd6:	f043 0202 	orr.w	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bce4:	f003 0308 	and.w	r3, r3, #8
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d017      	beq.n	800bd1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bcec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcf0:	f003 0320 	and.w	r3, r3, #32
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d105      	bne.n	800bd04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bcf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00b      	beq.n	800bd1c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2208      	movs	r2, #8
 800bd0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd12:	f043 0208 	orr.w	r2, r3, #8
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d012      	beq.n	800bd4e <HAL_UART_IRQHandler+0x18a>
 800bd28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00c      	beq.n	800bd4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd44:	f043 0220 	orr.w	r2, r3, #32
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8217 	beq.w	800c188 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00d      	beq.n	800bd82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d007      	beq.n	800bd82 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd96:	2b40      	cmp	r3, #64	@ 0x40
 800bd98:	d005      	beq.n	800bda6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d04f      	beq.n	800be46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 ff78 	bl	800cc9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb6:	2b40      	cmp	r3, #64	@ 0x40
 800bdb8:	d141      	bne.n	800be3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3308      	adds	r3, #8
 800bdc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bdd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3308      	adds	r3, #8
 800bde2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bde6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bdea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bdf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bdf6:	e841 2300 	strex	r3, r2, [r1]
 800bdfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bdfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1d9      	bne.n	800bdba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d013      	beq.n	800be36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be12:	4a13      	ldr	r2, [pc, #76]	@ (800be60 <HAL_UART_IRQHandler+0x29c>)
 800be14:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f8 f86e 	bl	8003efc <HAL_DMA_Abort_IT>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d017      	beq.n	800be56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800be30:	4610      	mov	r0, r2
 800be32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be34:	e00f      	b.n	800be56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9c4 	bl	800c1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be3c:	e00b      	b.n	800be56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f9c0 	bl	800c1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be44:	e007      	b.n	800be56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9bc 	bl	800c1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800be54:	e198      	b.n	800c188 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be56:	bf00      	nop
    return;
 800be58:	e196      	b.n	800c188 <HAL_UART_IRQHandler+0x5c4>
 800be5a:	bf00      	nop
 800be5c:	04000120 	.word	0x04000120
 800be60:	0800d065 	.word	0x0800d065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be68:	2b01      	cmp	r3, #1
 800be6a:	f040 8166 	bne.w	800c13a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be72:	f003 0310 	and.w	r3, r3, #16
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 815f 	beq.w	800c13a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be80:	f003 0310 	and.w	r3, r3, #16
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 8158 	beq.w	800c13a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2210      	movs	r2, #16
 800be90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be9c:	2b40      	cmp	r3, #64	@ 0x40
 800be9e:	f040 80d0 	bne.w	800c042 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800beae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f000 80ab 	beq.w	800c00e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f080 80a3 	bcs.w	800c00e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bece:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bedc:	f000 8086 	beq.w	800bfec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800befc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bf0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bf0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bf16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bf22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1da      	bne.n	800bee0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bf3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bf4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bf52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bf56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bf60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e1      	bne.n	800bf2a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3308      	adds	r3, #8
 800bf86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf92:	e841 2300 	strex	r3, r2, [r1]
 800bf96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1e3      	bne.n	800bf66 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2220      	movs	r2, #32
 800bfa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bfba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfbc:	f023 0310 	bic.w	r3, r3, #16
 800bfc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bfd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfd6:	e841 2300 	strex	r3, r2, [r1]
 800bfda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bfdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1e4      	bne.n	800bfac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f7 ff18 	bl	8003e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bffe:	b29b      	uxth	r3, r3
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	b29b      	uxth	r3, r3
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f8e6 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c00c:	e0be      	b.n	800c18c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c018:	429a      	cmp	r2, r3
 800c01a:	f040 80b7 	bne.w	800c18c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c028:	f040 80b0 	bne.w	800c18c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f8cc 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
      return;
 800c040:	e0a4      	b.n	800c18c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c04e:	b29b      	uxth	r3, r3
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8096 	beq.w	800c190 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800c064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8091 	beq.w	800c190 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c076:	e853 3f00 	ldrex	r3, [r3]
 800c07a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c07e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c090:	647b      	str	r3, [r7, #68]	@ 0x44
 800c092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c098:	e841 2300 	strex	r3, r2, [r1]
 800c09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e4      	bne.n	800c06e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3308      	adds	r3, #8
 800c0aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	623b      	str	r3, [r7, #32]
   return(result);
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	f023 0301 	bic.w	r3, r3, #1
 800c0ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c0c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800c0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0d0:	e841 2300 	strex	r3, r2, [r1]
 800c0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1e3      	bne.n	800c0a4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2220      	movs	r2, #32
 800c0e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f023 0310 	bic.w	r3, r3, #16
 800c104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c112:	61fb      	str	r3, [r7, #28]
 800c114:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c116:	69b9      	ldr	r1, [r7, #24]
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	617b      	str	r3, [r7, #20]
   return(result);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1e4      	bne.n	800c0f0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2202      	movs	r2, #2
 800c12a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c12c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f850 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c138:	e02a      	b.n	800c190 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00e      	beq.n	800c164 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d008      	beq.n	800c164 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01c      	beq.n	800c194 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	4798      	blx	r3
    }
    return;
 800c162:	e017      	b.n	800c194 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d012      	beq.n	800c196 <HAL_UART_IRQHandler+0x5d2>
 800c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00c      	beq.n	800c196 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f001 f83e 	bl	800d1fe <UART_EndTransmit_IT>
    return;
 800c182:	e008      	b.n	800c196 <HAL_UART_IRQHandler+0x5d2>
      return;
 800c184:	bf00      	nop
 800c186:	e006      	b.n	800c196 <HAL_UART_IRQHandler+0x5d2>
    return;
 800c188:	bf00      	nop
 800c18a:	e004      	b.n	800c196 <HAL_UART_IRQHandler+0x5d2>
      return;
 800c18c:	bf00      	nop
 800c18e:	e002      	b.n	800c196 <HAL_UART_IRQHandler+0x5d2>
      return;
 800c190:	bf00      	nop
 800c192:	e000      	b.n	800c196 <HAL_UART_IRQHandler+0x5d2>
    return;
 800c194:	bf00      	nop
  }

}
 800c196:	37e8      	adds	r7, #232	@ 0xe8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	431a      	orrs	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	69db      	ldr	r3, [r3, #28]
 800c210:	4313      	orrs	r3, r2
 800c212:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	4ba6      	ldr	r3, [pc, #664]	@ (800c4b4 <UART_SetConfig+0x2c4>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6812      	ldr	r2, [r2, #0]
 800c222:	6979      	ldr	r1, [r7, #20]
 800c224:	430b      	orrs	r3, r1
 800c226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	430a      	orrs	r2, r1
 800c260:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a94      	ldr	r2, [pc, #592]	@ (800c4b8 <UART_SetConfig+0x2c8>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d120      	bne.n	800c2ae <UART_SetConfig+0xbe>
 800c26c:	4b93      	ldr	r3, [pc, #588]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b03      	cmp	r3, #3
 800c278:	d816      	bhi.n	800c2a8 <UART_SetConfig+0xb8>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <UART_SetConfig+0x90>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c29d 	.word	0x0800c29d
 800c288:	0800c297 	.word	0x0800c297
 800c28c:	0800c2a3 	.word	0x0800c2a3
 800c290:	2301      	movs	r3, #1
 800c292:	77fb      	strb	r3, [r7, #31]
 800c294:	e150      	b.n	800c538 <UART_SetConfig+0x348>
 800c296:	2302      	movs	r3, #2
 800c298:	77fb      	strb	r3, [r7, #31]
 800c29a:	e14d      	b.n	800c538 <UART_SetConfig+0x348>
 800c29c:	2304      	movs	r3, #4
 800c29e:	77fb      	strb	r3, [r7, #31]
 800c2a0:	e14a      	b.n	800c538 <UART_SetConfig+0x348>
 800c2a2:	2308      	movs	r3, #8
 800c2a4:	77fb      	strb	r3, [r7, #31]
 800c2a6:	e147      	b.n	800c538 <UART_SetConfig+0x348>
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	77fb      	strb	r3, [r7, #31]
 800c2ac:	e144      	b.n	800c538 <UART_SetConfig+0x348>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a83      	ldr	r2, [pc, #524]	@ (800c4c0 <UART_SetConfig+0x2d0>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d132      	bne.n	800c31e <UART_SetConfig+0x12e>
 800c2b8:	4b80      	ldr	r3, [pc, #512]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2be:	f003 030c 	and.w	r3, r3, #12
 800c2c2:	2b0c      	cmp	r3, #12
 800c2c4:	d828      	bhi.n	800c318 <UART_SetConfig+0x128>
 800c2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2cc <UART_SetConfig+0xdc>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c301 	.word	0x0800c301
 800c2d0:	0800c319 	.word	0x0800c319
 800c2d4:	0800c319 	.word	0x0800c319
 800c2d8:	0800c319 	.word	0x0800c319
 800c2dc:	0800c30d 	.word	0x0800c30d
 800c2e0:	0800c319 	.word	0x0800c319
 800c2e4:	0800c319 	.word	0x0800c319
 800c2e8:	0800c319 	.word	0x0800c319
 800c2ec:	0800c307 	.word	0x0800c307
 800c2f0:	0800c319 	.word	0x0800c319
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c319 	.word	0x0800c319
 800c2fc:	0800c313 	.word	0x0800c313
 800c300:	2300      	movs	r3, #0
 800c302:	77fb      	strb	r3, [r7, #31]
 800c304:	e118      	b.n	800c538 <UART_SetConfig+0x348>
 800c306:	2302      	movs	r3, #2
 800c308:	77fb      	strb	r3, [r7, #31]
 800c30a:	e115      	b.n	800c538 <UART_SetConfig+0x348>
 800c30c:	2304      	movs	r3, #4
 800c30e:	77fb      	strb	r3, [r7, #31]
 800c310:	e112      	b.n	800c538 <UART_SetConfig+0x348>
 800c312:	2308      	movs	r3, #8
 800c314:	77fb      	strb	r3, [r7, #31]
 800c316:	e10f      	b.n	800c538 <UART_SetConfig+0x348>
 800c318:	2310      	movs	r3, #16
 800c31a:	77fb      	strb	r3, [r7, #31]
 800c31c:	e10c      	b.n	800c538 <UART_SetConfig+0x348>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a68      	ldr	r2, [pc, #416]	@ (800c4c4 <UART_SetConfig+0x2d4>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d120      	bne.n	800c36a <UART_SetConfig+0x17a>
 800c328:	4b64      	ldr	r3, [pc, #400]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c32e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c332:	2b30      	cmp	r3, #48	@ 0x30
 800c334:	d013      	beq.n	800c35e <UART_SetConfig+0x16e>
 800c336:	2b30      	cmp	r3, #48	@ 0x30
 800c338:	d814      	bhi.n	800c364 <UART_SetConfig+0x174>
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	d009      	beq.n	800c352 <UART_SetConfig+0x162>
 800c33e:	2b20      	cmp	r3, #32
 800c340:	d810      	bhi.n	800c364 <UART_SetConfig+0x174>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <UART_SetConfig+0x15c>
 800c346:	2b10      	cmp	r3, #16
 800c348:	d006      	beq.n	800c358 <UART_SetConfig+0x168>
 800c34a:	e00b      	b.n	800c364 <UART_SetConfig+0x174>
 800c34c:	2300      	movs	r3, #0
 800c34e:	77fb      	strb	r3, [r7, #31]
 800c350:	e0f2      	b.n	800c538 <UART_SetConfig+0x348>
 800c352:	2302      	movs	r3, #2
 800c354:	77fb      	strb	r3, [r7, #31]
 800c356:	e0ef      	b.n	800c538 <UART_SetConfig+0x348>
 800c358:	2304      	movs	r3, #4
 800c35a:	77fb      	strb	r3, [r7, #31]
 800c35c:	e0ec      	b.n	800c538 <UART_SetConfig+0x348>
 800c35e:	2308      	movs	r3, #8
 800c360:	77fb      	strb	r3, [r7, #31]
 800c362:	e0e9      	b.n	800c538 <UART_SetConfig+0x348>
 800c364:	2310      	movs	r3, #16
 800c366:	77fb      	strb	r3, [r7, #31]
 800c368:	e0e6      	b.n	800c538 <UART_SetConfig+0x348>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a56      	ldr	r2, [pc, #344]	@ (800c4c8 <UART_SetConfig+0x2d8>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d120      	bne.n	800c3b6 <UART_SetConfig+0x1c6>
 800c374:	4b51      	ldr	r3, [pc, #324]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c37a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c37e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c380:	d013      	beq.n	800c3aa <UART_SetConfig+0x1ba>
 800c382:	2bc0      	cmp	r3, #192	@ 0xc0
 800c384:	d814      	bhi.n	800c3b0 <UART_SetConfig+0x1c0>
 800c386:	2b80      	cmp	r3, #128	@ 0x80
 800c388:	d009      	beq.n	800c39e <UART_SetConfig+0x1ae>
 800c38a:	2b80      	cmp	r3, #128	@ 0x80
 800c38c:	d810      	bhi.n	800c3b0 <UART_SetConfig+0x1c0>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <UART_SetConfig+0x1a8>
 800c392:	2b40      	cmp	r3, #64	@ 0x40
 800c394:	d006      	beq.n	800c3a4 <UART_SetConfig+0x1b4>
 800c396:	e00b      	b.n	800c3b0 <UART_SetConfig+0x1c0>
 800c398:	2300      	movs	r3, #0
 800c39a:	77fb      	strb	r3, [r7, #31]
 800c39c:	e0cc      	b.n	800c538 <UART_SetConfig+0x348>
 800c39e:	2302      	movs	r3, #2
 800c3a0:	77fb      	strb	r3, [r7, #31]
 800c3a2:	e0c9      	b.n	800c538 <UART_SetConfig+0x348>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	77fb      	strb	r3, [r7, #31]
 800c3a8:	e0c6      	b.n	800c538 <UART_SetConfig+0x348>
 800c3aa:	2308      	movs	r3, #8
 800c3ac:	77fb      	strb	r3, [r7, #31]
 800c3ae:	e0c3      	b.n	800c538 <UART_SetConfig+0x348>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	77fb      	strb	r3, [r7, #31]
 800c3b4:	e0c0      	b.n	800c538 <UART_SetConfig+0x348>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a44      	ldr	r2, [pc, #272]	@ (800c4cc <UART_SetConfig+0x2dc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d125      	bne.n	800c40c <UART_SetConfig+0x21c>
 800c3c0:	4b3e      	ldr	r3, [pc, #248]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3ce:	d017      	beq.n	800c400 <UART_SetConfig+0x210>
 800c3d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3d4:	d817      	bhi.n	800c406 <UART_SetConfig+0x216>
 800c3d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3da:	d00b      	beq.n	800c3f4 <UART_SetConfig+0x204>
 800c3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3e0:	d811      	bhi.n	800c406 <UART_SetConfig+0x216>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <UART_SetConfig+0x1fe>
 800c3e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3ea:	d006      	beq.n	800c3fa <UART_SetConfig+0x20a>
 800c3ec:	e00b      	b.n	800c406 <UART_SetConfig+0x216>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	77fb      	strb	r3, [r7, #31]
 800c3f2:	e0a1      	b.n	800c538 <UART_SetConfig+0x348>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	77fb      	strb	r3, [r7, #31]
 800c3f8:	e09e      	b.n	800c538 <UART_SetConfig+0x348>
 800c3fa:	2304      	movs	r3, #4
 800c3fc:	77fb      	strb	r3, [r7, #31]
 800c3fe:	e09b      	b.n	800c538 <UART_SetConfig+0x348>
 800c400:	2308      	movs	r3, #8
 800c402:	77fb      	strb	r3, [r7, #31]
 800c404:	e098      	b.n	800c538 <UART_SetConfig+0x348>
 800c406:	2310      	movs	r3, #16
 800c408:	77fb      	strb	r3, [r7, #31]
 800c40a:	e095      	b.n	800c538 <UART_SetConfig+0x348>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a2f      	ldr	r2, [pc, #188]	@ (800c4d0 <UART_SetConfig+0x2e0>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d125      	bne.n	800c462 <UART_SetConfig+0x272>
 800c416:	4b29      	ldr	r3, [pc, #164]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c41c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c424:	d017      	beq.n	800c456 <UART_SetConfig+0x266>
 800c426:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c42a:	d817      	bhi.n	800c45c <UART_SetConfig+0x26c>
 800c42c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c430:	d00b      	beq.n	800c44a <UART_SetConfig+0x25a>
 800c432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c436:	d811      	bhi.n	800c45c <UART_SetConfig+0x26c>
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <UART_SetConfig+0x254>
 800c43c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c440:	d006      	beq.n	800c450 <UART_SetConfig+0x260>
 800c442:	e00b      	b.n	800c45c <UART_SetConfig+0x26c>
 800c444:	2301      	movs	r3, #1
 800c446:	77fb      	strb	r3, [r7, #31]
 800c448:	e076      	b.n	800c538 <UART_SetConfig+0x348>
 800c44a:	2302      	movs	r3, #2
 800c44c:	77fb      	strb	r3, [r7, #31]
 800c44e:	e073      	b.n	800c538 <UART_SetConfig+0x348>
 800c450:	2304      	movs	r3, #4
 800c452:	77fb      	strb	r3, [r7, #31]
 800c454:	e070      	b.n	800c538 <UART_SetConfig+0x348>
 800c456:	2308      	movs	r3, #8
 800c458:	77fb      	strb	r3, [r7, #31]
 800c45a:	e06d      	b.n	800c538 <UART_SetConfig+0x348>
 800c45c:	2310      	movs	r3, #16
 800c45e:	77fb      	strb	r3, [r7, #31]
 800c460:	e06a      	b.n	800c538 <UART_SetConfig+0x348>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a1b      	ldr	r2, [pc, #108]	@ (800c4d4 <UART_SetConfig+0x2e4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d138      	bne.n	800c4de <UART_SetConfig+0x2ee>
 800c46c:	4b13      	ldr	r3, [pc, #76]	@ (800c4bc <UART_SetConfig+0x2cc>)
 800c46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c472:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c47a:	d017      	beq.n	800c4ac <UART_SetConfig+0x2bc>
 800c47c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c480:	d82a      	bhi.n	800c4d8 <UART_SetConfig+0x2e8>
 800c482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c486:	d00b      	beq.n	800c4a0 <UART_SetConfig+0x2b0>
 800c488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c48c:	d824      	bhi.n	800c4d8 <UART_SetConfig+0x2e8>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <UART_SetConfig+0x2aa>
 800c492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c496:	d006      	beq.n	800c4a6 <UART_SetConfig+0x2b6>
 800c498:	e01e      	b.n	800c4d8 <UART_SetConfig+0x2e8>
 800c49a:	2300      	movs	r3, #0
 800c49c:	77fb      	strb	r3, [r7, #31]
 800c49e:	e04b      	b.n	800c538 <UART_SetConfig+0x348>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	77fb      	strb	r3, [r7, #31]
 800c4a4:	e048      	b.n	800c538 <UART_SetConfig+0x348>
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	77fb      	strb	r3, [r7, #31]
 800c4aa:	e045      	b.n	800c538 <UART_SetConfig+0x348>
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	77fb      	strb	r3, [r7, #31]
 800c4b0:	e042      	b.n	800c538 <UART_SetConfig+0x348>
 800c4b2:	bf00      	nop
 800c4b4:	efff69f3 	.word	0xefff69f3
 800c4b8:	40011000 	.word	0x40011000
 800c4bc:	40023800 	.word	0x40023800
 800c4c0:	40004400 	.word	0x40004400
 800c4c4:	40004800 	.word	0x40004800
 800c4c8:	40004c00 	.word	0x40004c00
 800c4cc:	40005000 	.word	0x40005000
 800c4d0:	40011400 	.word	0x40011400
 800c4d4:	40007800 	.word	0x40007800
 800c4d8:	2310      	movs	r3, #16
 800c4da:	77fb      	strb	r3, [r7, #31]
 800c4dc:	e02c      	b.n	800c538 <UART_SetConfig+0x348>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a72      	ldr	r2, [pc, #456]	@ (800c6ac <UART_SetConfig+0x4bc>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d125      	bne.n	800c534 <UART_SetConfig+0x344>
 800c4e8:	4b71      	ldr	r3, [pc, #452]	@ (800c6b0 <UART_SetConfig+0x4c0>)
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c4f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4f6:	d017      	beq.n	800c528 <UART_SetConfig+0x338>
 800c4f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4fc:	d817      	bhi.n	800c52e <UART_SetConfig+0x33e>
 800c4fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c502:	d00b      	beq.n	800c51c <UART_SetConfig+0x32c>
 800c504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c508:	d811      	bhi.n	800c52e <UART_SetConfig+0x33e>
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <UART_SetConfig+0x326>
 800c50e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c512:	d006      	beq.n	800c522 <UART_SetConfig+0x332>
 800c514:	e00b      	b.n	800c52e <UART_SetConfig+0x33e>
 800c516:	2300      	movs	r3, #0
 800c518:	77fb      	strb	r3, [r7, #31]
 800c51a:	e00d      	b.n	800c538 <UART_SetConfig+0x348>
 800c51c:	2302      	movs	r3, #2
 800c51e:	77fb      	strb	r3, [r7, #31]
 800c520:	e00a      	b.n	800c538 <UART_SetConfig+0x348>
 800c522:	2304      	movs	r3, #4
 800c524:	77fb      	strb	r3, [r7, #31]
 800c526:	e007      	b.n	800c538 <UART_SetConfig+0x348>
 800c528:	2308      	movs	r3, #8
 800c52a:	77fb      	strb	r3, [r7, #31]
 800c52c:	e004      	b.n	800c538 <UART_SetConfig+0x348>
 800c52e:	2310      	movs	r3, #16
 800c530:	77fb      	strb	r3, [r7, #31]
 800c532:	e001      	b.n	800c538 <UART_SetConfig+0x348>
 800c534:	2310      	movs	r3, #16
 800c536:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c540:	d15b      	bne.n	800c5fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c542:	7ffb      	ldrb	r3, [r7, #31]
 800c544:	2b08      	cmp	r3, #8
 800c546:	d828      	bhi.n	800c59a <UART_SetConfig+0x3aa>
 800c548:	a201      	add	r2, pc, #4	@ (adr r2, 800c550 <UART_SetConfig+0x360>)
 800c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54e:	bf00      	nop
 800c550:	0800c575 	.word	0x0800c575
 800c554:	0800c57d 	.word	0x0800c57d
 800c558:	0800c585 	.word	0x0800c585
 800c55c:	0800c59b 	.word	0x0800c59b
 800c560:	0800c58b 	.word	0x0800c58b
 800c564:	0800c59b 	.word	0x0800c59b
 800c568:	0800c59b 	.word	0x0800c59b
 800c56c:	0800c59b 	.word	0x0800c59b
 800c570:	0800c593 	.word	0x0800c593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c574:	f7fc fbec 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800c578:	61b8      	str	r0, [r7, #24]
        break;
 800c57a:	e013      	b.n	800c5a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c57c:	f7fc fbfc 	bl	8008d78 <HAL_RCC_GetPCLK2Freq>
 800c580:	61b8      	str	r0, [r7, #24]
        break;
 800c582:	e00f      	b.n	800c5a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c584:	4b4b      	ldr	r3, [pc, #300]	@ (800c6b4 <UART_SetConfig+0x4c4>)
 800c586:	61bb      	str	r3, [r7, #24]
        break;
 800c588:	e00c      	b.n	800c5a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c58a:	f7fc facf 	bl	8008b2c <HAL_RCC_GetSysClockFreq>
 800c58e:	61b8      	str	r0, [r7, #24]
        break;
 800c590:	e008      	b.n	800c5a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c596:	61bb      	str	r3, [r7, #24]
        break;
 800c598:	e004      	b.n	800c5a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	77bb      	strb	r3, [r7, #30]
        break;
 800c5a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d074      	beq.n	800c694 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	005a      	lsls	r2, r3, #1
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	085b      	lsrs	r3, r3, #1
 800c5b4:	441a      	add	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	2b0f      	cmp	r3, #15
 800c5c4:	d916      	bls.n	800c5f4 <UART_SetConfig+0x404>
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5cc:	d212      	bcs.n	800c5f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f023 030f 	bic.w	r3, r3, #15
 800c5d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	085b      	lsrs	r3, r3, #1
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	89fa      	ldrh	r2, [r7, #14]
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	e04f      	b.n	800c694 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	77bb      	strb	r3, [r7, #30]
 800c5f8:	e04c      	b.n	800c694 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5fa:	7ffb      	ldrb	r3, [r7, #31]
 800c5fc:	2b08      	cmp	r3, #8
 800c5fe:	d828      	bhi.n	800c652 <UART_SetConfig+0x462>
 800c600:	a201      	add	r2, pc, #4	@ (adr r2, 800c608 <UART_SetConfig+0x418>)
 800c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c606:	bf00      	nop
 800c608:	0800c62d 	.word	0x0800c62d
 800c60c:	0800c635 	.word	0x0800c635
 800c610:	0800c63d 	.word	0x0800c63d
 800c614:	0800c653 	.word	0x0800c653
 800c618:	0800c643 	.word	0x0800c643
 800c61c:	0800c653 	.word	0x0800c653
 800c620:	0800c653 	.word	0x0800c653
 800c624:	0800c653 	.word	0x0800c653
 800c628:	0800c64b 	.word	0x0800c64b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c62c:	f7fc fb90 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800c630:	61b8      	str	r0, [r7, #24]
        break;
 800c632:	e013      	b.n	800c65c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c634:	f7fc fba0 	bl	8008d78 <HAL_RCC_GetPCLK2Freq>
 800c638:	61b8      	str	r0, [r7, #24]
        break;
 800c63a:	e00f      	b.n	800c65c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c63c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6b4 <UART_SetConfig+0x4c4>)
 800c63e:	61bb      	str	r3, [r7, #24]
        break;
 800c640:	e00c      	b.n	800c65c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c642:	f7fc fa73 	bl	8008b2c <HAL_RCC_GetSysClockFreq>
 800c646:	61b8      	str	r0, [r7, #24]
        break;
 800c648:	e008      	b.n	800c65c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c64a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c64e:	61bb      	str	r3, [r7, #24]
        break;
 800c650:	e004      	b.n	800c65c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	77bb      	strb	r3, [r7, #30]
        break;
 800c65a:	bf00      	nop
    }

    if (pclk != 0U)
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d018      	beq.n	800c694 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	085a      	lsrs	r2, r3, #1
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	441a      	add	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	fbb2 f3f3 	udiv	r3, r2, r3
 800c674:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d909      	bls.n	800c690 <UART_SetConfig+0x4a0>
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c682:	d205      	bcs.n	800c690 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	b29a      	uxth	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60da      	str	r2, [r3, #12]
 800c68e:	e001      	b.n	800c694 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c6a0:	7fbb      	ldrb	r3, [r7, #30]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	40007c00 	.word	0x40007c00
 800c6b0:	40023800 	.word	0x40023800
 800c6b4:	00f42400 	.word	0x00f42400

0800c6b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c4:	f003 0308 	and.w	r3, r3, #8
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00a      	beq.n	800c6e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00a      	beq.n	800c704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00a      	beq.n	800c726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	430a      	orrs	r2, r1
 800c724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	430a      	orrs	r2, r1
 800c746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74c:	f003 0310 	and.w	r3, r3, #16
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c76e:	f003 0320 	and.w	r3, r3, #32
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01a      	beq.n	800c7ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7b6:	d10a      	bne.n	800c7ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	430a      	orrs	r2, r1
 800c7ee:	605a      	str	r2, [r3, #4]
  }
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08c      	sub	sp, #48	@ 0x30
 800c800:	af02      	add	r7, sp, #8
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c80c:	f7f6 f806 	bl	800281c <HAL_GetTick>
 800c810:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 0308 	and.w	r3, r3, #8
 800c81c:	2b08      	cmp	r3, #8
 800c81e:	d12e      	bne.n	800c87e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	2200      	movs	r2, #0
 800c82a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f83b 	bl	800c8aa <UART_WaitOnFlagUntilTimeout>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d021      	beq.n	800c87e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	e853 3f00 	ldrex	r3, [r3]
 800c846:	60fb      	str	r3, [r7, #12]
   return(result);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c84e:	623b      	str	r3, [r7, #32]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	461a      	mov	r2, r3
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	61fb      	str	r3, [r7, #28]
 800c85a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85c:	69b9      	ldr	r1, [r7, #24]
 800c85e:	69fa      	ldr	r2, [r7, #28]
 800c860:	e841 2300 	strex	r3, r2, [r1]
 800c864:	617b      	str	r3, [r7, #20]
   return(result);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1e6      	bne.n	800c83a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2220      	movs	r2, #32
 800c870:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e011      	b.n	800c8a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2220      	movs	r2, #32
 800c882:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2220      	movs	r2, #32
 800c888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3728      	adds	r7, #40	@ 0x28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	603b      	str	r3, [r7, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8ba:	e04f      	b.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c2:	d04b      	beq.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8c4:	f7f5 ffaa 	bl	800281c <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d302      	bcc.n	800c8da <UART_WaitOnFlagUntilTimeout+0x30>
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e04e      	b.n	800c97c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0304 	and.w	r3, r3, #4
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d037      	beq.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b80      	cmp	r3, #128	@ 0x80
 800c8f0:	d034      	beq.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b40      	cmp	r3, #64	@ 0x40
 800c8f6:	d031      	beq.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	69db      	ldr	r3, [r3, #28]
 800c8fe:	f003 0308 	and.w	r3, r3, #8
 800c902:	2b08      	cmp	r3, #8
 800c904:	d110      	bne.n	800c928 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2208      	movs	r2, #8
 800c90c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 f9c4 	bl	800cc9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2208      	movs	r2, #8
 800c918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e029      	b.n	800c97c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c936:	d111      	bne.n	800c95c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c940:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 f9aa 	bl	800cc9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e00f      	b.n	800c97c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	69da      	ldr	r2, [r3, #28]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	4013      	ands	r3, r2
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	429a      	cmp	r2, r3
 800c96a:	bf0c      	ite	eq
 800c96c:	2301      	moveq	r3, #1
 800c96e:	2300      	movne	r3, #0
 800c970:	b2db      	uxtb	r3, r3
 800c972:	461a      	mov	r2, r3
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	429a      	cmp	r2, r3
 800c978:	d0a0      	beq.n	800c8bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c984:	b480      	push	{r7}
 800c986:	b097      	sub	sp, #92	@ 0x5c
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	4613      	mov	r3, r2
 800c990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	88fa      	ldrh	r2, [r7, #6]
 800c99c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	88fa      	ldrh	r2, [r7, #6]
 800c9a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9b6:	d10e      	bne.n	800c9d6 <UART_Start_Receive_IT+0x52>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d105      	bne.n	800c9cc <UART_Start_Receive_IT+0x48>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c9c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9ca:	e02d      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	22ff      	movs	r2, #255	@ 0xff
 800c9d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9d4:	e028      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10d      	bne.n	800c9fa <UART_Start_Receive_IT+0x76>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <UART_Start_Receive_IT+0x6c>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	22ff      	movs	r2, #255	@ 0xff
 800c9ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9ee:	e01b      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	227f      	movs	r2, #127	@ 0x7f
 800c9f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9f8:	e016      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca02:	d10d      	bne.n	800ca20 <UART_Start_Receive_IT+0x9c>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d104      	bne.n	800ca16 <UART_Start_Receive_IT+0x92>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	227f      	movs	r2, #127	@ 0x7f
 800ca10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ca14:	e008      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	223f      	movs	r2, #63	@ 0x3f
 800ca1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ca1e:	e003      	b.n	800ca28 <UART_Start_Receive_IT+0xa4>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2222      	movs	r2, #34	@ 0x22
 800ca34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca42:	e853 3f00 	ldrex	r3, [r3]
 800ca46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4a:	f043 0301 	orr.w	r3, r3, #1
 800ca4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3308      	adds	r3, #8
 800ca56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca58:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ca5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca60:	e841 2300 	strex	r3, r2, [r1]
 800ca64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ca66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1e5      	bne.n	800ca38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca74:	d107      	bne.n	800ca86 <UART_Start_Receive_IT+0x102>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d103      	bne.n	800ca86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4a21      	ldr	r2, [pc, #132]	@ (800cb08 <UART_Start_Receive_IT+0x184>)
 800ca82:	669a      	str	r2, [r3, #104]	@ 0x68
 800ca84:	e002      	b.n	800ca8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4a20      	ldr	r2, [pc, #128]	@ (800cb0c <UART_Start_Receive_IT+0x188>)
 800ca8a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d019      	beq.n	800cac8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800caa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cab8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e6      	bne.n	800ca94 <UART_Start_Receive_IT+0x110>
 800cac6:	e018      	b.n	800cafa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	613b      	str	r3, [r7, #16]
   return(result);
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	f043 0320 	orr.w	r3, r3, #32
 800cadc:	653b      	str	r3, [r7, #80]	@ 0x50
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cae6:	623b      	str	r3, [r7, #32]
 800cae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	69f9      	ldr	r1, [r7, #28]
 800caec:	6a3a      	ldr	r2, [r7, #32]
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e6      	bne.n	800cac8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	375c      	adds	r7, #92	@ 0x5c
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	0800d3fb 	.word	0x0800d3fb
 800cb0c:	0800d253 	.word	0x0800d253

0800cb10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b096      	sub	sp, #88	@ 0x58
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	88fa      	ldrh	r2, [r7, #6]
 800cb28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2222      	movs	r2, #34	@ 0x22
 800cb38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d028      	beq.n	800cb96 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb48:	4a3e      	ldr	r2, [pc, #248]	@ (800cc44 <UART_Start_Receive_DMA+0x134>)
 800cb4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb50:	4a3d      	ldr	r2, [pc, #244]	@ (800cc48 <UART_Start_Receive_DMA+0x138>)
 800cb52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb58:	4a3c      	ldr	r2, [pc, #240]	@ (800cc4c <UART_Start_Receive_DMA+0x13c>)
 800cb5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb60:	2200      	movs	r2, #0
 800cb62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3324      	adds	r3, #36	@ 0x24
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb74:	461a      	mov	r2, r3
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	f7f7 f8f0 	bl	8003d5c <HAL_DMA_Start_IT>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2210      	movs	r2, #16
 800cb86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e051      	b.n	800cc3a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d018      	beq.n	800cbd0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cbc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cbca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e6      	bne.n	800cb9e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbda:	e853 3f00 	ldrex	r3, [r3]
 800cbde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	f043 0301 	orr.w	r3, r3, #1
 800cbe6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbf0:	637a      	str	r2, [r7, #52]	@ 0x34
 800cbf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbf8:	e841 2300 	strex	r3, r2, [r1]
 800cbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1e5      	bne.n	800cbd0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3308      	adds	r3, #8
 800cc0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	e853 3f00 	ldrex	r3, [r3]
 800cc12:	613b      	str	r3, [r7, #16]
   return(result);
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc24:	623a      	str	r2, [r7, #32]
 800cc26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc28:	69f9      	ldr	r1, [r7, #28]
 800cc2a:	6a3a      	ldr	r2, [r7, #32]
 800cc2c:	e841 2300 	strex	r3, r2, [r1]
 800cc30:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1e5      	bne.n	800cc04 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3758      	adds	r7, #88	@ 0x58
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	0800ce17 	.word	0x0800ce17
 800cc48:	0800cf75 	.word	0x0800cf75
 800cc4c:	0800cfe7 	.word	0x0800cfe7

0800cc50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b089      	sub	sp, #36	@ 0x24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	e853 3f00 	ldrex	r3, [r3]
 800cc64:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	61bb      	str	r3, [r7, #24]
 800cc78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7a:	6979      	ldr	r1, [r7, #20]
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	e841 2300 	strex	r3, r2, [r1]
 800cc82:	613b      	str	r3, [r7, #16]
   return(result);
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1e6      	bne.n	800cc58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2220      	movs	r2, #32
 800cc8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800cc90:	bf00      	nop
 800cc92:	3724      	adds	r7, #36	@ 0x24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b095      	sub	sp, #84	@ 0x54
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccac:	e853 3f00 	ldrex	r3, [r3]
 800ccb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ccc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccca:	e841 2300 	strex	r3, r2, [r1]
 800ccce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1e6      	bne.n	800cca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3308      	adds	r3, #8
 800ccdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	e853 3f00 	ldrex	r3, [r3]
 800cce4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	f023 0301 	bic.w	r3, r3, #1
 800ccec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccfe:	e841 2300 	strex	r3, r2, [r1]
 800cd02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e5      	bne.n	800ccd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d118      	bne.n	800cd44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	e853 3f00 	ldrex	r3, [r3]
 800cd1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f023 0310 	bic.w	r3, r3, #16
 800cd26:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd30:	61bb      	str	r3, [r7, #24]
 800cd32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd34:	6979      	ldr	r1, [r7, #20]
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	e841 2300 	strex	r3, r2, [r1]
 800cd3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1e6      	bne.n	800cd12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2220      	movs	r2, #32
 800cd48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cd58:	bf00      	nop
 800cd5a:	3754      	adds	r7, #84	@ 0x54
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b090      	sub	sp, #64	@ 0x40
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd70:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd7a:	d037      	beq.n	800cdec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	e853 3f00 	ldrex	r3, [r3]
 800cd92:	623b      	str	r3, [r7, #32]
   return(result);
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3308      	adds	r3, #8
 800cda2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cda4:	633a      	str	r2, [r7, #48]	@ 0x30
 800cda6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdac:	e841 2300 	strex	r3, r2, [r1]
 800cdb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e5      	bne.n	800cd84 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	e853 3f00 	ldrex	r3, [r3]
 800cdc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd6:	61fb      	str	r3, [r7, #28]
 800cdd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	69b9      	ldr	r1, [r7, #24]
 800cddc:	69fa      	ldr	r2, [r7, #28]
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	617b      	str	r3, [r7, #20]
   return(result);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e6      	bne.n	800cdb8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdea:	e002      	b.n	800cdf2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cdec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cdee:	f010 ff93 	bl	801dd18 <HAL_UART_TxCpltCallback>
}
 800cdf2:	bf00      	nop
 800cdf4:	3740      	adds	r7, #64	@ 0x40
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7ff f9c7 	bl	800c19c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b09c      	sub	sp, #112	@ 0x70
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce22:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2c:	d071      	beq.n	800cf12 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ce2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce3e:	e853 3f00 	ldrex	r3, [r3]
 800ce42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	461a      	mov	r2, r3
 800ce52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce54:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce56:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce5c:	e841 2300 	strex	r3, r2, [r1]
 800ce60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e6      	bne.n	800ce36 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3308      	adds	r3, #8
 800ce6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce72:	e853 3f00 	ldrex	r3, [r3]
 800ce76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3308      	adds	r3, #8
 800ce86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce88:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce90:	e841 2300 	strex	r3, r2, [r1]
 800ce94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e5      	bne.n	800ce68 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3308      	adds	r3, #8
 800cea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	e853 3f00 	ldrex	r3, [r3]
 800ceaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ceb2:	663b      	str	r3, [r7, #96]	@ 0x60
 800ceb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cec4:	e841 2300 	strex	r3, r2, [r1]
 800cec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1e5      	bne.n	800ce9c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ced0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d118      	bne.n	800cf12 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	e853 3f00 	ldrex	r3, [r3]
 800ceec:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	f023 0310 	bic.w	r3, r3, #16
 800cef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cefe:	61bb      	str	r3, [r7, #24]
 800cf00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	6979      	ldr	r1, [r7, #20]
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	e841 2300 	strex	r3, r2, [r1]
 800cf0a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1e6      	bne.n	800cee0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf14:	2200      	movs	r2, #0
 800cf16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d122      	bne.n	800cf66 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800cf20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800cf32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf38:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d204      	bcs.n	800cf4a <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cf40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf42:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cf46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cf50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf60:	f7ff f93a 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf64:	e002      	b.n	800cf6c <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800cf66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf68:	f010 fef6 	bl	801dd58 <HAL_UART_RxCpltCallback>
}
 800cf6c:	bf00      	nop
 800cf6e:	3770      	adds	r7, #112	@ 0x70
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf80:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d123      	bne.n	800cfd8 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf96:	085b      	lsrs	r3, r3, #1
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cfae:	897a      	ldrh	r2, [r7, #10]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d803      	bhi.n	800cfbc <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	897a      	ldrh	r2, [r7, #10]
 800cfb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	4619      	mov	r1, r3
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff f901 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cfd6:	e002      	b.n	800cfde <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7ff f8e9 	bl	800c1b0 <HAL_UART_RxHalfCpltCallback>
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b086      	sub	sp, #24
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cff8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d00c:	2b80      	cmp	r3, #128	@ 0x80
 800d00e:	d109      	bne.n	800d024 <UART_DMAError+0x3e>
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	2b21      	cmp	r3, #33	@ 0x21
 800d014:	d106      	bne.n	800d024 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d01e:	6978      	ldr	r0, [r7, #20]
 800d020:	f7ff fe16 	bl	800cc50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d02e:	2b40      	cmp	r3, #64	@ 0x40
 800d030:	d109      	bne.n	800d046 <UART_DMAError+0x60>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b22      	cmp	r3, #34	@ 0x22
 800d036:	d106      	bne.n	800d046 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d040:	6978      	ldr	r0, [r7, #20]
 800d042:	f7ff fe2b 	bl	800cc9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d04c:	f043 0210 	orr.w	r2, r3, #16
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d056:	6978      	ldr	r0, [r7, #20]
 800d058:	f7ff f8b4 	bl	800c1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d05c:	bf00      	nop
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f7ff f8a2 	bl	800c1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d088:	b480      	push	{r7}
 800d08a:	b08f      	sub	sp, #60	@ 0x3c
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d094:	2b21      	cmp	r3, #33	@ 0x21
 800d096:	d14c      	bne.n	800d132 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d132      	bne.n	800d10a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0ca:	e841 2300 	strex	r3, r2, [r1]
 800d0ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e6      	bne.n	800d0a4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f8:	6979      	ldr	r1, [r7, #20]
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	e841 2300 	strex	r3, r2, [r1]
 800d100:	613b      	str	r3, [r7, #16]
   return(result);
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1e6      	bne.n	800d0d6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d108:	e013      	b.n	800d132 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d126:	b29b      	uxth	r3, r3
 800d128:	3b01      	subs	r3, #1
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d132:	bf00      	nop
 800d134:	373c      	adds	r7, #60	@ 0x3c
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d13e:	b480      	push	{r7}
 800d140:	b091      	sub	sp, #68	@ 0x44
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d14a:	2b21      	cmp	r3, #33	@ 0x21
 800d14c:	d151      	bne.n	800d1f2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d154:	b29b      	uxth	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d132      	bne.n	800d1c0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	e853 3f00 	ldrex	r3, [r3]
 800d166:	623b      	str	r3, [r7, #32]
   return(result);
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d16e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	461a      	mov	r2, r3
 800d176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d178:	633b      	str	r3, [r7, #48]	@ 0x30
 800d17a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d17e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d180:	e841 2300 	strex	r3, r2, [r1]
 800d184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e6      	bne.n	800d15a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	e853 3f00 	ldrex	r3, [r3]
 800d198:	60fb      	str	r3, [r7, #12]
   return(result);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	61fb      	str	r3, [r7, #28]
 800d1ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ae:	69b9      	ldr	r1, [r7, #24]
 800d1b0:	69fa      	ldr	r2, [r7, #28]
 800d1b2:	e841 2300 	strex	r3, r2, [r1]
 800d1b6:	617b      	str	r3, [r7, #20]
   return(result);
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1e6      	bne.n	800d18c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d1be:	e018      	b.n	800d1f2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1d4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1da:	1c9a      	adds	r2, r3, #2
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d1f2:	bf00      	nop
 800d1f4:	3744      	adds	r7, #68	@ 0x44
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b088      	sub	sp, #32
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	e853 3f00 	ldrex	r3, [r3]
 800d212:	60bb      	str	r3, [r7, #8]
   return(result);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d21a:	61fb      	str	r3, [r7, #28]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	461a      	mov	r2, r3
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d228:	6979      	ldr	r1, [r7, #20]
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	e841 2300 	strex	r3, r2, [r1]
 800d230:	613b      	str	r3, [r7, #16]
   return(result);
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1e6      	bne.n	800d206 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2220      	movs	r2, #32
 800d23c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f010 fd67 	bl	801dd18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d24a:	bf00      	nop
 800d24c:	3720      	adds	r7, #32
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b09c      	sub	sp, #112	@ 0x70
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d260:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d26a:	2b22      	cmp	r3, #34	@ 0x22
 800d26c:	f040 80b9 	bne.w	800d3e2 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d276:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d27a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d27e:	b2d9      	uxtb	r1, r3
 800d280:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d284:	b2da      	uxtb	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d28a:	400a      	ands	r2, r1
 800d28c:	b2d2      	uxtb	r2, r2
 800d28e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f040 809c 	bne.w	800d3f2 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c2:	e853 3f00 	ldrex	r3, [r3]
 800d2c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d2c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e6      	bne.n	800d2ba <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	3308      	adds	r3, #8
 800d2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f6:	e853 3f00 	ldrex	r3, [r3]
 800d2fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	667b      	str	r3, [r7, #100]	@ 0x64
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3308      	adds	r3, #8
 800d30a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d30c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d30e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e5      	bne.n	800d2ec <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2220      	movs	r2, #32
 800d324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d018      	beq.n	800d374 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	e853 3f00 	ldrex	r3, [r3]
 800d34e:	623b      	str	r3, [r7, #32]
   return(result);
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d356:	663b      	str	r3, [r7, #96]	@ 0x60
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	461a      	mov	r2, r3
 800d35e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d360:	633b      	str	r3, [r7, #48]	@ 0x30
 800d362:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e6      	bne.n	800d342 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d12e      	bne.n	800d3da <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	e853 3f00 	ldrex	r3, [r3]
 800d38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f023 0310 	bic.w	r3, r3, #16
 800d396:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3a0:	61fb      	str	r3, [r7, #28]
 800d3a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a4:	69b9      	ldr	r1, [r7, #24]
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	e841 2300 	strex	r3, r2, [r1]
 800d3ac:	617b      	str	r3, [r7, #20]
   return(result);
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1e6      	bne.n	800d382 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	f003 0310 	and.w	r3, r3, #16
 800d3be:	2b10      	cmp	r3, #16
 800d3c0:	d103      	bne.n	800d3ca <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2210      	movs	r2, #16
 800d3c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7fe ff00 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3d8:	e00b      	b.n	800d3f2 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f010 fcbc 	bl	801dd58 <HAL_UART_RxCpltCallback>
}
 800d3e0:	e007      	b.n	800d3f2 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	699a      	ldr	r2, [r3, #24]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f042 0208 	orr.w	r2, r2, #8
 800d3f0:	619a      	str	r2, [r3, #24]
}
 800d3f2:	bf00      	nop
 800d3f4:	3770      	adds	r7, #112	@ 0x70
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b09c      	sub	sp, #112	@ 0x70
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d408:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d412:	2b22      	cmp	r3, #34	@ 0x22
 800d414:	f040 80b9 	bne.w	800d58a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d41e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d426:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d428:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d42c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d430:	4013      	ands	r3, r2
 800d432:	b29a      	uxth	r2, r3
 800d434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d436:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d43c:	1c9a      	adds	r2, r3, #2
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d448:	b29b      	uxth	r3, r3
 800d44a:	3b01      	subs	r3, #1
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f040 809c 	bne.w	800d59a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d46a:	e853 3f00 	ldrex	r3, [r3]
 800d46e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d476:	667b      	str	r3, [r7, #100]	@ 0x64
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d480:	657b      	str	r3, [r7, #84]	@ 0x54
 800d482:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d484:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d486:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d488:	e841 2300 	strex	r3, r2, [r1]
 800d48c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e6      	bne.n	800d462 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3308      	adds	r3, #8
 800d49a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d49e:	e853 3f00 	ldrex	r3, [r3]
 800d4a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a6:	f023 0301 	bic.w	r3, r3, #1
 800d4aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d4b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800d4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4bc:	e841 2300 	strex	r3, r2, [r1]
 800d4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1e5      	bne.n	800d494 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d018      	beq.n	800d51c <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	e853 3f00 	ldrex	r3, [r3]
 800d4f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	461a      	mov	r2, r3
 800d506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d50a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d50e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d510:	e841 2300 	strex	r3, r2, [r1]
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e6      	bne.n	800d4ea <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d520:	2b01      	cmp	r3, #1
 800d522:	d12e      	bne.n	800d582 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	e853 3f00 	ldrex	r3, [r3]
 800d536:	60bb      	str	r3, [r7, #8]
   return(result);
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f023 0310 	bic.w	r3, r3, #16
 800d53e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	6979      	ldr	r1, [r7, #20]
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	613b      	str	r3, [r7, #16]
   return(result);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e6      	bne.n	800d52a <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	f003 0310 	and.w	r3, r3, #16
 800d566:	2b10      	cmp	r3, #16
 800d568:	d103      	bne.n	800d572 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2210      	movs	r2, #16
 800d570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7fe fe2c 	bl	800c1d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d580:	e00b      	b.n	800d59a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f010 fbe8 	bl	801dd58 <HAL_UART_RxCpltCallback>
}
 800d588:	e007      	b.n	800d59a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f042 0208 	orr.w	r2, r2, #8
 800d598:	619a      	str	r2, [r3, #24]
}
 800d59a:	bf00      	nop
 800d59c:	3770      	adds	r7, #112	@ 0x70
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	f107 001c 	add.w	r0, r7, #28
 800d5b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d121      	bne.n	800d602 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68da      	ldr	r2, [r3, #12]
 800d5ce:	4b21      	ldr	r3, [pc, #132]	@ (800d654 <USB_CoreInit+0xb0>)
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d105      	bne.n	800d5f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa92 	bl	800db20 <USB_CoreReset>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
 800d600:	e010      	b.n	800d624 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fa86 	bl	800db20 <USB_CoreReset>
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d624:	7fbb      	ldrb	r3, [r7, #30]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d10b      	bne.n	800d642 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f043 0206 	orr.w	r2, r3, #6
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f043 0220 	orr.w	r2, r3, #32
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d64e:	b004      	add	sp, #16
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	ffbdffbf 	.word	0xffbdffbf

0800d658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	f023 0201 	bic.w	r2, r3, #1
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d696:	78fb      	ldrb	r3, [r7, #3]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d115      	bne.n	800d6c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d6a8:	200a      	movs	r0, #10
 800d6aa:	f7f5 f8c3 	bl	8002834 <HAL_Delay>
      ms += 10U;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	330a      	adds	r3, #10
 800d6b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fa25 	bl	800db04 <USB_GetMode>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d01e      	beq.n	800d6fe <USB_SetCurrentMode+0x84>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d6c4:	d9f0      	bls.n	800d6a8 <USB_SetCurrentMode+0x2e>
 800d6c6:	e01a      	b.n	800d6fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d115      	bne.n	800d6fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d6da:	200a      	movs	r0, #10
 800d6dc:	f7f5 f8aa 	bl	8002834 <HAL_Delay>
      ms += 10U;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	330a      	adds	r3, #10
 800d6e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fa0c 	bl	800db04 <USB_GetMode>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <USB_SetCurrentMode+0x84>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d6f6:	d9f0      	bls.n	800d6da <USB_SetCurrentMode+0x60>
 800d6f8:	e001      	b.n	800d6fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e005      	b.n	800d70a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2bc8      	cmp	r3, #200	@ 0xc8
 800d702:	d101      	bne.n	800d708 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
	...

0800d714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d714:	b084      	sub	sp, #16
 800d716:	b580      	push	{r7, lr}
 800d718:	b086      	sub	sp, #24
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d72e:	2300      	movs	r3, #0
 800d730:	613b      	str	r3, [r7, #16]
 800d732:	e009      	b.n	800d748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	3340      	adds	r3, #64	@ 0x40
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	4413      	add	r3, r2
 800d73e:	2200      	movs	r2, #0
 800d740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	3301      	adds	r3, #1
 800d746:	613b      	str	r3, [r7, #16]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b0e      	cmp	r3, #14
 800d74c:	d9f2      	bls.n	800d734 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d74e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11c      	bne.n	800d790 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d764:	f043 0302 	orr.w	r3, r3, #2
 800d768:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d76e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	e005      	b.n	800d79c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d794:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d7a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d10d      	bne.n	800d7cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d104      	bne.n	800d7c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f968 	bl	800da90 <USB_SetDevSpeed>
 800d7c0:	e008      	b.n	800d7d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f963 	bl	800da90 <USB_SetDevSpeed>
 800d7ca:	e003      	b.n	800d7d4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d7cc:	2103      	movs	r1, #3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f95e 	bl	800da90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d7d4:	2110      	movs	r1, #16
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f8fa 	bl	800d9d0 <USB_FlushTxFifo>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f924 	bl	800da34 <USB_FlushRxFifo>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	2300      	movs	r3, #0
 800d800:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d808:	461a      	mov	r2, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d814:	461a      	mov	r2, r3
 800d816:	2300      	movs	r3, #0
 800d818:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d81a:	2300      	movs	r3, #0
 800d81c:	613b      	str	r3, [r7, #16]
 800d81e:	e043      	b.n	800d8a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d836:	d118      	bne.n	800d86a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10a      	bne.n	800d854 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	015a      	lsls	r2, r3, #5
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	4413      	add	r3, r2
 800d846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d84a:	461a      	mov	r2, r3
 800d84c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d850:	6013      	str	r3, [r2, #0]
 800d852:	e013      	b.n	800d87c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	015a      	lsls	r2, r3, #5
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d860:	461a      	mov	r2, r3
 800d862:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	e008      	b.n	800d87c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	015a      	lsls	r2, r3, #5
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4413      	add	r3, r2
 800d872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d876:	461a      	mov	r2, r3
 800d878:	2300      	movs	r3, #0
 800d87a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d888:	461a      	mov	r2, r3
 800d88a:	2300      	movs	r3, #0
 800d88c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d89a:	461a      	mov	r2, r3
 800d89c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	613b      	str	r3, [r7, #16]
 800d8a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d3b5      	bcc.n	800d820 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	613b      	str	r3, [r7, #16]
 800d8b8:	e043      	b.n	800d942 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	015a      	lsls	r2, r3, #5
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d8cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d8d0:	d118      	bne.n	800d904 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10a      	bne.n	800d8ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	015a      	lsls	r2, r3, #5
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	4413      	add	r3, r2
 800d8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	e013      	b.n	800d916 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	015a      	lsls	r2, r3, #5
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	e008      	b.n	800d916 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d910:	461a      	mov	r2, r3
 800d912:	2300      	movs	r3, #0
 800d914:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d922:	461a      	mov	r2, r3
 800d924:	2300      	movs	r3, #0
 800d926:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d934:	461a      	mov	r2, r3
 800d936:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d93a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	3301      	adds	r3, #1
 800d940:	613b      	str	r3, [r7, #16]
 800d942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d946:	461a      	mov	r2, r3
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d3b5      	bcc.n	800d8ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d95c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d960:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d96e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d970:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d974:	2b00      	cmp	r3, #0
 800d976:	d105      	bne.n	800d984 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	f043 0210 	orr.w	r2, r3, #16
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699a      	ldr	r2, [r3, #24]
 800d988:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c8 <USB_DevInit+0x2b4>)
 800d98a:	4313      	orrs	r3, r2
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d990:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d994:	2b00      	cmp	r3, #0
 800d996:	d005      	beq.n	800d9a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	f043 0208 	orr.w	r2, r3, #8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d9a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d105      	bne.n	800d9b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	699a      	ldr	r2, [r3, #24]
 800d9b0:	4b06      	ldr	r3, [pc, #24]	@ (800d9cc <USB_DevInit+0x2b8>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9c4:	b004      	add	sp, #16
 800d9c6:	4770      	bx	lr
 800d9c8:	803c3800 	.word	0x803c3800
 800d9cc:	40000004 	.word	0x40000004

0800d9d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9ea:	d901      	bls.n	800d9f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e01b      	b.n	800da28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	daf2      	bge.n	800d9de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	019b      	lsls	r3, r3, #6
 800da00:	f043 0220 	orr.w	r2, r3, #32
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	3301      	adds	r3, #1
 800da0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da14:	d901      	bls.n	800da1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e006      	b.n	800da28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f003 0320 	and.w	r3, r3, #32
 800da22:	2b20      	cmp	r3, #32
 800da24:	d0f0      	beq.n	800da08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3301      	adds	r3, #1
 800da44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da4c:	d901      	bls.n	800da52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e018      	b.n	800da84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	daf2      	bge.n	800da40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2210      	movs	r2, #16
 800da62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3301      	adds	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da70:	d901      	bls.n	800da76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da72:	2303      	movs	r3, #3
 800da74:	e006      	b.n	800da84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	f003 0310 	and.w	r3, r3, #16
 800da7e:	2b10      	cmp	r3, #16
 800da80:	d0f0      	beq.n	800da64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	460b      	mov	r3, r1
 800da9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	78fb      	ldrb	r3, [r7, #3]
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dab0:	4313      	orrs	r3, r2
 800dab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b085      	sub	sp, #20
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dadc:	f023 0303 	bic.w	r3, r3, #3
 800dae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800daf0:	f043 0302 	orr.w	r3, r3, #2
 800daf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3714      	adds	r7, #20
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	695b      	ldr	r3, [r3, #20]
 800db10:	f003 0301 	and.w	r3, r3, #1
}
 800db14:	4618      	mov	r0, r3
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3301      	adds	r3, #1
 800db30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db38:	d901      	bls.n	800db3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e022      	b.n	800db84 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	daf2      	bge.n	800db2c <USB_CoreReset+0xc>

  count = 10U;
 800db46:	230a      	movs	r3, #10
 800db48:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800db4a:	e002      	b.n	800db52 <USB_CoreReset+0x32>
  {
    count--;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	3b01      	subs	r3, #1
 800db50:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1f9      	bne.n	800db4c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	f043 0201 	orr.w	r2, r3, #1
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3301      	adds	r3, #1
 800db68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db70:	d901      	bls.n	800db76 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800db72:	2303      	movs	r3, #3
 800db74:	e006      	b.n	800db84 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d0f0      	beq.n	800db64 <USB_CoreReset+0x44>

  return HAL_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3714      	adds	r7, #20
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800db96:	4b92      	ldr	r3, [pc, #584]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800db98:	22c0      	movs	r2, #192	@ 0xc0
 800db9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800db9c:	4b90      	ldr	r3, [pc, #576]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800db9e:	22a8      	movs	r2, #168	@ 0xa8
 800dba0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800dba2:	4b8f      	ldr	r3, [pc, #572]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800dba8:	4b8d      	ldr	r3, [pc, #564]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dbaa:	22a8      	movs	r2, #168	@ 0xa8
 800dbac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800dbae:	4b8d      	ldr	r3, [pc, #564]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dbb0:	22ff      	movs	r2, #255	@ 0xff
 800dbb2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800dbb4:	4b8b      	ldr	r3, [pc, #556]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dbb6:	22ff      	movs	r2, #255	@ 0xff
 800dbb8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800dbba:	4b8a      	ldr	r3, [pc, #552]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dbbc:	22ff      	movs	r2, #255	@ 0xff
 800dbbe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800dbc0:	4b88      	ldr	r3, [pc, #544]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800dbc6:	4b88      	ldr	r3, [pc, #544]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800dbcc:	4b86      	ldr	r3, [pc, #536]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800dbd2:	4b85      	ldr	r3, [pc, #532]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800dbd8:	4b83      	ldr	r3, [pc, #524]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800dbde:	2100      	movs	r1, #0
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	f005 f863 	bl	8012cac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800dbe6:	4b7e      	ldr	r3, [pc, #504]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	061a      	lsls	r2, r3, #24
 800dbec:	4b7c      	ldr	r3, [pc, #496]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dbee:	785b      	ldrb	r3, [r3, #1]
 800dbf0:	041b      	lsls	r3, r3, #16
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	4b7a      	ldr	r3, [pc, #488]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dbf6:	789b      	ldrb	r3, [r3, #2]
 800dbf8:	021b      	lsls	r3, r3, #8
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	4a78      	ldr	r2, [pc, #480]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dbfe:	78d2      	ldrb	r2, [r2, #3]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	061a      	lsls	r2, r3, #24
 800dc04:	4b76      	ldr	r3, [pc, #472]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	0619      	lsls	r1, r3, #24
 800dc0a:	4b75      	ldr	r3, [pc, #468]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc0c:	785b      	ldrb	r3, [r3, #1]
 800dc0e:	041b      	lsls	r3, r3, #16
 800dc10:	4319      	orrs	r1, r3
 800dc12:	4b73      	ldr	r3, [pc, #460]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc14:	789b      	ldrb	r3, [r3, #2]
 800dc16:	021b      	lsls	r3, r3, #8
 800dc18:	430b      	orrs	r3, r1
 800dc1a:	4971      	ldr	r1, [pc, #452]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc1c:	78c9      	ldrb	r1, [r1, #3]
 800dc1e:	430b      	orrs	r3, r1
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc26:	431a      	orrs	r2, r3
 800dc28:	4b6d      	ldr	r3, [pc, #436]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	0619      	lsls	r1, r3, #24
 800dc2e:	4b6c      	ldr	r3, [pc, #432]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc30:	785b      	ldrb	r3, [r3, #1]
 800dc32:	041b      	lsls	r3, r3, #16
 800dc34:	4319      	orrs	r1, r3
 800dc36:	4b6a      	ldr	r3, [pc, #424]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc38:	789b      	ldrb	r3, [r3, #2]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	430b      	orrs	r3, r1
 800dc3e:	4968      	ldr	r1, [pc, #416]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc40:	78c9      	ldrb	r1, [r1, #3]
 800dc42:	430b      	orrs	r3, r1
 800dc44:	0a1b      	lsrs	r3, r3, #8
 800dc46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc4a:	431a      	orrs	r2, r3
 800dc4c:	4b64      	ldr	r3, [pc, #400]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	0619      	lsls	r1, r3, #24
 800dc52:	4b63      	ldr	r3, [pc, #396]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	041b      	lsls	r3, r3, #16
 800dc58:	4319      	orrs	r1, r3
 800dc5a:	4b61      	ldr	r3, [pc, #388]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc5c:	789b      	ldrb	r3, [r3, #2]
 800dc5e:	021b      	lsls	r3, r3, #8
 800dc60:	430b      	orrs	r3, r1
 800dc62:	495f      	ldr	r1, [pc, #380]	@ (800dde0 <MX_LWIP_Init+0x250>)
 800dc64:	78c9      	ldrb	r1, [r1, #3]
 800dc66:	430b      	orrs	r3, r1
 800dc68:	0e1b      	lsrs	r3, r3, #24
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	4a5f      	ldr	r2, [pc, #380]	@ (800ddec <MX_LWIP_Init+0x25c>)
 800dc6e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dc70:	4b5c      	ldr	r3, [pc, #368]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	061a      	lsls	r2, r3, #24
 800dc76:	4b5b      	ldr	r3, [pc, #364]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc78:	785b      	ldrb	r3, [r3, #1]
 800dc7a:	041b      	lsls	r3, r3, #16
 800dc7c:	431a      	orrs	r2, r3
 800dc7e:	4b59      	ldr	r3, [pc, #356]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc80:	789b      	ldrb	r3, [r3, #2]
 800dc82:	021b      	lsls	r3, r3, #8
 800dc84:	4313      	orrs	r3, r2
 800dc86:	4a57      	ldr	r2, [pc, #348]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc88:	78d2      	ldrb	r2, [r2, #3]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	061a      	lsls	r2, r3, #24
 800dc8e:	4b55      	ldr	r3, [pc, #340]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	0619      	lsls	r1, r3, #24
 800dc94:	4b53      	ldr	r3, [pc, #332]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc96:	785b      	ldrb	r3, [r3, #1]
 800dc98:	041b      	lsls	r3, r3, #16
 800dc9a:	4319      	orrs	r1, r3
 800dc9c:	4b51      	ldr	r3, [pc, #324]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dc9e:	789b      	ldrb	r3, [r3, #2]
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	430b      	orrs	r3, r1
 800dca4:	494f      	ldr	r1, [pc, #316]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dca6:	78c9      	ldrb	r1, [r1, #3]
 800dca8:	430b      	orrs	r3, r1
 800dcaa:	021b      	lsls	r3, r3, #8
 800dcac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dcb0:	431a      	orrs	r2, r3
 800dcb2:	4b4c      	ldr	r3, [pc, #304]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	0619      	lsls	r1, r3, #24
 800dcb8:	4b4a      	ldr	r3, [pc, #296]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcba:	785b      	ldrb	r3, [r3, #1]
 800dcbc:	041b      	lsls	r3, r3, #16
 800dcbe:	4319      	orrs	r1, r3
 800dcc0:	4b48      	ldr	r3, [pc, #288]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcc2:	789b      	ldrb	r3, [r3, #2]
 800dcc4:	021b      	lsls	r3, r3, #8
 800dcc6:	430b      	orrs	r3, r1
 800dcc8:	4946      	ldr	r1, [pc, #280]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcca:	78c9      	ldrb	r1, [r1, #3]
 800dccc:	430b      	orrs	r3, r1
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dcd4:	431a      	orrs	r2, r3
 800dcd6:	4b43      	ldr	r3, [pc, #268]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	0619      	lsls	r1, r3, #24
 800dcdc:	4b41      	ldr	r3, [pc, #260]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	041b      	lsls	r3, r3, #16
 800dce2:	4319      	orrs	r1, r3
 800dce4:	4b3f      	ldr	r3, [pc, #252]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dce6:	789b      	ldrb	r3, [r3, #2]
 800dce8:	021b      	lsls	r3, r3, #8
 800dcea:	430b      	orrs	r3, r1
 800dcec:	493d      	ldr	r1, [pc, #244]	@ (800dde4 <MX_LWIP_Init+0x254>)
 800dcee:	78c9      	ldrb	r1, [r1, #3]
 800dcf0:	430b      	orrs	r3, r1
 800dcf2:	0e1b      	lsrs	r3, r3, #24
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	4a3e      	ldr	r2, [pc, #248]	@ (800ddf0 <MX_LWIP_Init+0x260>)
 800dcf8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dcfa:	4b3b      	ldr	r3, [pc, #236]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	061a      	lsls	r2, r3, #24
 800dd00:	4b39      	ldr	r3, [pc, #228]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd02:	785b      	ldrb	r3, [r3, #1]
 800dd04:	041b      	lsls	r3, r3, #16
 800dd06:	431a      	orrs	r2, r3
 800dd08:	4b37      	ldr	r3, [pc, #220]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd0a:	789b      	ldrb	r3, [r3, #2]
 800dd0c:	021b      	lsls	r3, r3, #8
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	4a35      	ldr	r2, [pc, #212]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd12:	78d2      	ldrb	r2, [r2, #3]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	061a      	lsls	r2, r3, #24
 800dd18:	4b33      	ldr	r3, [pc, #204]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	0619      	lsls	r1, r3, #24
 800dd1e:	4b32      	ldr	r3, [pc, #200]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd20:	785b      	ldrb	r3, [r3, #1]
 800dd22:	041b      	lsls	r3, r3, #16
 800dd24:	4319      	orrs	r1, r3
 800dd26:	4b30      	ldr	r3, [pc, #192]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd28:	789b      	ldrb	r3, [r3, #2]
 800dd2a:	021b      	lsls	r3, r3, #8
 800dd2c:	430b      	orrs	r3, r1
 800dd2e:	492e      	ldr	r1, [pc, #184]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd30:	78c9      	ldrb	r1, [r1, #3]
 800dd32:	430b      	orrs	r3, r1
 800dd34:	021b      	lsls	r3, r3, #8
 800dd36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	0619      	lsls	r1, r3, #24
 800dd42:	4b29      	ldr	r3, [pc, #164]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd44:	785b      	ldrb	r3, [r3, #1]
 800dd46:	041b      	lsls	r3, r3, #16
 800dd48:	4319      	orrs	r1, r3
 800dd4a:	4b27      	ldr	r3, [pc, #156]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd4c:	789b      	ldrb	r3, [r3, #2]
 800dd4e:	021b      	lsls	r3, r3, #8
 800dd50:	430b      	orrs	r3, r1
 800dd52:	4925      	ldr	r1, [pc, #148]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd54:	78c9      	ldrb	r1, [r1, #3]
 800dd56:	430b      	orrs	r3, r1
 800dd58:	0a1b      	lsrs	r3, r3, #8
 800dd5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd5e:	431a      	orrs	r2, r3
 800dd60:	4b21      	ldr	r3, [pc, #132]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	0619      	lsls	r1, r3, #24
 800dd66:	4b20      	ldr	r3, [pc, #128]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	041b      	lsls	r3, r3, #16
 800dd6c:	4319      	orrs	r1, r3
 800dd6e:	4b1e      	ldr	r3, [pc, #120]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd70:	789b      	ldrb	r3, [r3, #2]
 800dd72:	021b      	lsls	r3, r3, #8
 800dd74:	430b      	orrs	r3, r1
 800dd76:	491c      	ldr	r1, [pc, #112]	@ (800dde8 <MX_LWIP_Init+0x258>)
 800dd78:	78c9      	ldrb	r1, [r1, #3]
 800dd7a:	430b      	orrs	r3, r1
 800dd7c:	0e1b      	lsrs	r3, r3, #24
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	4a1c      	ldr	r2, [pc, #112]	@ (800ddf4 <MX_LWIP_Init+0x264>)
 800dd82:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800dd84:	4b1c      	ldr	r3, [pc, #112]	@ (800ddf8 <MX_LWIP_Init+0x268>)
 800dd86:	9302      	str	r3, [sp, #8]
 800dd88:	4b1c      	ldr	r3, [pc, #112]	@ (800ddfc <MX_LWIP_Init+0x26c>)
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4b18      	ldr	r3, [pc, #96]	@ (800ddf4 <MX_LWIP_Init+0x264>)
 800dd92:	4a17      	ldr	r2, [pc, #92]	@ (800ddf0 <MX_LWIP_Init+0x260>)
 800dd94:	4915      	ldr	r1, [pc, #84]	@ (800ddec <MX_LWIP_Init+0x25c>)
 800dd96:	481a      	ldr	r0, [pc, #104]	@ (800de00 <MX_LWIP_Init+0x270>)
 800dd98:	f005 fd4e 	bl	8013838 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dd9c:	4818      	ldr	r0, [pc, #96]	@ (800de00 <MX_LWIP_Init+0x270>)
 800dd9e:	f005 fefd 	bl	8013b9c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800dda2:	4817      	ldr	r0, [pc, #92]	@ (800de00 <MX_LWIP_Init+0x270>)
 800dda4:	f005 ff0a 	bl	8013bbc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800dda8:	4916      	ldr	r1, [pc, #88]	@ (800de04 <MX_LWIP_Init+0x274>)
 800ddaa:	4815      	ldr	r0, [pc, #84]	@ (800de00 <MX_LWIP_Init+0x270>)
 800ddac:	f006 f808 	bl	8013dc0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800ddb0:	2224      	movs	r2, #36	@ 0x24
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	4814      	ldr	r0, [pc, #80]	@ (800de08 <MX_LWIP_Init+0x278>)
 800ddb6:	f010 fa63 	bl	801e280 <memset>
  attributes.name = "EthLink";
 800ddba:	4b13      	ldr	r3, [pc, #76]	@ (800de08 <MX_LWIP_Init+0x278>)
 800ddbc:	4a13      	ldr	r2, [pc, #76]	@ (800de0c <MX_LWIP_Init+0x27c>)
 800ddbe:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ddc0:	4b11      	ldr	r3, [pc, #68]	@ (800de08 <MX_LWIP_Init+0x278>)
 800ddc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ddc6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800ddc8:	4b0f      	ldr	r3, [pc, #60]	@ (800de08 <MX_LWIP_Init+0x278>)
 800ddca:	2210      	movs	r2, #16
 800ddcc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800ddce:	4a0e      	ldr	r2, [pc, #56]	@ (800de08 <MX_LWIP_Init+0x278>)
 800ddd0:	490b      	ldr	r1, [pc, #44]	@ (800de00 <MX_LWIP_Init+0x270>)
 800ddd2:	480f      	ldr	r0, [pc, #60]	@ (800de10 <MX_LWIP_Init+0x280>)
 800ddd4:	f000 fdce 	bl	800e974 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  // printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
/* USER CODE END 3 */
}
 800ddd8:	bf00      	nop
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	20000e74 	.word	0x20000e74
 800dde4:	20000e78 	.word	0x20000e78
 800dde8:	20000e7c 	.word	0x20000e7c
 800ddec:	20000e68 	.word	0x20000e68
 800ddf0:	20000e6c 	.word	0x20000e6c
 800ddf4:	20000e70 	.word	0x20000e70
 800ddf8:	08012be9 	.word	0x08012be9
 800ddfc:	0800e355 	.word	0x0800e355
 800de00:	20000e34 	.word	0x20000e34
 800de04:	0800de15 	.word	0x0800de15
 800de08:	20000e80 	.word	0x20000e80
 800de0c:	0801f108 	.word	0x0801f108
 800de10:	0800e62d 	.word	0x0800e62d

0800de14 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800de3a:	2320      	movs	r3, #32
 800de3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800de3e:	f3bf 8f4f 	dsb	sy
}
 800de42:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800de44:	e00b      	b.n	800de5e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800de46:	4a0d      	ldr	r2, [pc, #52]	@ (800de7c <SCB_InvalidateDCache_by_Addr+0x54>)
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	693a      	ldr	r2, [r7, #16]
 800de52:	4413      	add	r3, r2
 800de54:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dcf0      	bgt.n	800de46 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800de64:	f3bf 8f4f 	dsb	sy
}
 800de68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800de6a:	f3bf 8f6f 	isb	sy
}
 800de6e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800de70:	bf00      	nop
 800de72:	371c      	adds	r7, #28
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	e000ed00 	.word	0xe000ed00

0800de80 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800de88:	4b04      	ldr	r3, [pc, #16]	@ (800de9c <HAL_ETH_RxCpltCallback+0x1c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f001 f88f 	bl	800efb0 <osSemaphoreRelease>
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	2000a1b0 	.word	0x2000a1b0

0800dea0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800dea8:	4b04      	ldr	r3, [pc, #16]	@ (800debc <HAL_ETH_TxCpltCallback+0x1c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	f001 f87f 	bl	800efb0 <osSemaphoreRelease>
}
 800deb2:	bf00      	nop
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	2000a1b4 	.word	0x2000a1b4

0800dec0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f7 f906 	bl	80050da <HAL_ETH_GetDMAError>
 800dece:	4603      	mov	r3, r0
 800ded0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ded4:	2b80      	cmp	r3, #128	@ 0x80
 800ded6:	d104      	bne.n	800dee2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800ded8:	4b04      	ldr	r3, [pc, #16]	@ (800deec <HAL_ETH_ErrorCallback+0x2c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f001 f867 	bl	800efb0 <osSemaphoreRelease>
  }
}
 800dee2:	bf00      	nop
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	2000a1b0 	.word	0x2000a1b0

0800def0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b0aa      	sub	sp, #168	@ 0xa8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800df0a:	f107 0310 	add.w	r3, r7, #16
 800df0e:	2264      	movs	r2, #100	@ 0x64
 800df10:	2100      	movs	r1, #0
 800df12:	4618      	mov	r0, r3
 800df14:	f010 f9b4 	bl	801e280 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800df18:	4b89      	ldr	r3, [pc, #548]	@ (800e140 <low_level_init+0x250>)
 800df1a:	4a8a      	ldr	r2, [pc, #552]	@ (800e144 <low_level_init+0x254>)
 800df1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800df1e:	2300      	movs	r3, #0
 800df20:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800df22:	2380      	movs	r3, #128	@ 0x80
 800df24:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800df26:	23e1      	movs	r3, #225	@ 0xe1
 800df28:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800df2a:	2300      	movs	r3, #0
 800df2c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800df2e:	2300      	movs	r3, #0
 800df30:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800df32:	2300      	movs	r3, #0
 800df34:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800df36:	4a82      	ldr	r2, [pc, #520]	@ (800e140 <low_level_init+0x250>)
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800df3e:	4b80      	ldr	r3, [pc, #512]	@ (800e140 <low_level_init+0x250>)
 800df40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800df44:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800df46:	4b7e      	ldr	r3, [pc, #504]	@ (800e140 <low_level_init+0x250>)
 800df48:	4a7f      	ldr	r2, [pc, #508]	@ (800e148 <low_level_init+0x258>)
 800df4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800df4c:	4b7c      	ldr	r3, [pc, #496]	@ (800e140 <low_level_init+0x250>)
 800df4e:	4a7f      	ldr	r2, [pc, #508]	@ (800e14c <low_level_init+0x25c>)
 800df50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800df52:	4b7b      	ldr	r3, [pc, #492]	@ (800e140 <low_level_init+0x250>)
 800df54:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800df58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800df5a:	4879      	ldr	r0, [pc, #484]	@ (800e140 <low_level_init+0x250>)
 800df5c:	f7f6 fa74 	bl	8004448 <HAL_ETH_Init>
 800df60:	4603      	mov	r3, r0
 800df62:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800df66:	2238      	movs	r2, #56	@ 0x38
 800df68:	2100      	movs	r1, #0
 800df6a:	4879      	ldr	r0, [pc, #484]	@ (800e150 <low_level_init+0x260>)
 800df6c:	f010 f988 	bl	801e280 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800df70:	4b77      	ldr	r3, [pc, #476]	@ (800e150 <low_level_init+0x260>)
 800df72:	2221      	movs	r2, #33	@ 0x21
 800df74:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800df76:	4b76      	ldr	r3, [pc, #472]	@ (800e150 <low_level_init+0x260>)
 800df78:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800df7c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800df7e:	4b74      	ldr	r3, [pc, #464]	@ (800e150 <low_level_init+0x260>)
 800df80:	2200      	movs	r2, #0
 800df82:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800df84:	4873      	ldr	r0, [pc, #460]	@ (800e154 <low_level_init+0x264>)
 800df86:	f005 fb11 	bl	80135ac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2206      	movs	r2, #6
 800df8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800df92:	4b6b      	ldr	r3, [pc, #428]	@ (800e140 <low_level_init+0x250>)
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800df9e:	4b68      	ldr	r3, [pc, #416]	@ (800e140 <low_level_init+0x250>)
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	785a      	ldrb	r2, [r3, #1]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dfaa:	4b65      	ldr	r3, [pc, #404]	@ (800e140 <low_level_init+0x250>)
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	789a      	ldrb	r2, [r3, #2]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dfb6:	4b62      	ldr	r3, [pc, #392]	@ (800e140 <low_level_init+0x250>)
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	78da      	ldrb	r2, [r3, #3]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800dfc2:	4b5f      	ldr	r3, [pc, #380]	@ (800e140 <low_level_init+0x250>)
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	791a      	ldrb	r2, [r3, #4]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800dfce:	4b5c      	ldr	r3, [pc, #368]	@ (800e140 <low_level_init+0x250>)
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	795a      	ldrb	r2, [r3, #5]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800dfe0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dfe8:	f043 030a 	orr.w	r3, r3, #10
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800dff4:	2200      	movs	r2, #0
 800dff6:	2100      	movs	r1, #0
 800dff8:	2001      	movs	r0, #1
 800dffa:	f000 fed7 	bl	800edac <osSemaphoreNew>
 800dffe:	4603      	mov	r3, r0
 800e000:	4a55      	ldr	r2, [pc, #340]	@ (800e158 <low_level_init+0x268>)
 800e002:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800e004:	2200      	movs	r2, #0
 800e006:	2100      	movs	r1, #0
 800e008:	2001      	movs	r0, #1
 800e00a:	f000 fecf 	bl	800edac <osSemaphoreNew>
 800e00e:	4603      	mov	r3, r0
 800e010:	4a52      	ldr	r2, [pc, #328]	@ (800e15c <low_level_init+0x26c>)
 800e012:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800e014:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e018:	2224      	movs	r2, #36	@ 0x24
 800e01a:	2100      	movs	r1, #0
 800e01c:	4618      	mov	r0, r3
 800e01e:	f010 f92f 	bl	801e280 <memset>
  attributes.name = "EthIf";
 800e022:	4b4f      	ldr	r3, [pc, #316]	@ (800e160 <low_level_init+0x270>)
 800e024:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800e026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e02a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800e02e:	2330      	movs	r3, #48	@ 0x30
 800e030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800e034:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e038:	461a      	mov	r2, r3
 800e03a:	6879      	ldr	r1, [r7, #4]
 800e03c:	4849      	ldr	r0, [pc, #292]	@ (800e164 <low_level_init+0x274>)
 800e03e:	f000 fc99 	bl	800e974 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e042:	4949      	ldr	r1, [pc, #292]	@ (800e168 <low_level_init+0x278>)
 800e044:	4849      	ldr	r0, [pc, #292]	@ (800e16c <low_level_init+0x27c>)
 800e046:	f7f4 fac2 	bl	80025ce <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800e04a:	4848      	ldr	r0, [pc, #288]	@ (800e16c <low_level_init+0x27c>)
 800e04c:	f7f4 faf1 	bl	8002632 <LAN8742_Init>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d006      	beq.n	800e064 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f005 fe82 	bl	8013d60 <netif_set_link_down>
    netif_set_down(netif);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f005 fe19 	bl	8013c94 <netif_set_down>
 800e062:	e06a      	b.n	800e13a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800e064:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d164      	bne.n	800e136 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e06c:	483f      	ldr	r0, [pc, #252]	@ (800e16c <low_level_init+0x27c>)
 800e06e:	f7f4 fb2d 	bl	80026cc <LAN8742_GetLinkState>
 800e072:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	dc06      	bgt.n	800e08c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f005 fe6e 	bl	8013d60 <netif_set_link_down>
      netif_set_down(netif);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f005 fe05 	bl	8013c94 <netif_set_down>
 800e08a:	e056      	b.n	800e13a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800e08c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e090:	3b02      	subs	r3, #2
 800e092:	2b03      	cmp	r3, #3
 800e094:	d82a      	bhi.n	800e0ec <low_level_init+0x1fc>
 800e096:	a201      	add	r2, pc, #4	@ (adr r2, 800e09c <low_level_init+0x1ac>)
 800e098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09c:	0800e0ad 	.word	0x0800e0ad
 800e0a0:	0800e0bf 	.word	0x0800e0bf
 800e0a4:	0800e0cf 	.word	0x0800e0cf
 800e0a8:	0800e0df 	.word	0x0800e0df
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e0ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e0b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0bc:	e01f      	b.n	800e0fe <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e0c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0cc:	e017      	b.n	800e0fe <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e0ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0dc:	e00f      	b.n	800e0fe <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0ea:	e008      	b.n	800e0fe <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800e0ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e0f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0fc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	4619      	mov	r1, r3
 800e104:	480e      	ldr	r0, [pc, #56]	@ (800e140 <low_level_init+0x250>)
 800e106:	f7f6 fe87 	bl	8004e18 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e10a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e10e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800e110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e116:	f107 0310 	add.w	r3, r7, #16
 800e11a:	4619      	mov	r1, r3
 800e11c:	4808      	ldr	r0, [pc, #32]	@ (800e140 <low_level_init+0x250>)
 800e11e:	f7f6 ff72 	bl	8005006 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800e122:	4807      	ldr	r0, [pc, #28]	@ (800e140 <low_level_init+0x250>)
 800e124:	f7f6 fa2a 	bl	800457c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f005 fd47 	bl	8013bbc <netif_set_up>
    netif_set_link_up(netif);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f005 fde2 	bl	8013cf8 <netif_set_link_up>
 800e134:	e001      	b.n	800e13a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800e136:	f7f3 f969 	bl	800140c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800e13a:	37a8      	adds	r7, #168	@ 0xa8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	2000a1b8 	.word	0x2000a1b8
 800e144:	40028000 	.word	0x40028000
 800e148:	2000012c 	.word	0x2000012c
 800e14c:	2000008c 	.word	0x2000008c
 800e150:	2000a268 	.word	0x2000a268
 800e154:	080221cc 	.word	0x080221cc
 800e158:	2000a1b0 	.word	0x2000a1b0
 800e15c:	2000a1b4 	.word	0x2000a1b4
 800e160:	0801f110 	.word	0x0801f110
 800e164:	0800e301 	.word	0x0800e301
 800e168:	2000000c 	.word	0x2000000c
 800e16c:	2000a2a0 	.word	0x2000a2a0

0800e170 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b092      	sub	sp, #72	@ 0x48
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e188:	f107 030c 	add.w	r3, r7, #12
 800e18c:	2230      	movs	r2, #48	@ 0x30
 800e18e:	2100      	movs	r1, #0
 800e190:	4618      	mov	r0, r3
 800e192:	f010 f875 	bl	801e280 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e196:	f107 030c 	add.w	r3, r7, #12
 800e19a:	2230      	movs	r2, #48	@ 0x30
 800e19c:	2100      	movs	r1, #0
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f010 f86e 	bl	801e280 <memset>

  for(q = p; q != NULL; q = q->next)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1a8:	e045      	b.n	800e236 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d902      	bls.n	800e1b6 <low_level_output+0x46>
      return ERR_IF;
 800e1b0:	f06f 030b 	mvn.w	r3, #11
 800e1b4:	e07f      	b.n	800e2b6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800e1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1b8:	6859      	ldr	r1, [r3, #4]
 800e1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1bc:	4613      	mov	r3, r2
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	3348      	adds	r3, #72	@ 0x48
 800e1c6:	443b      	add	r3, r7
 800e1c8:	3b3c      	subs	r3, #60	@ 0x3c
 800e1ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e1cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1ce:	895b      	ldrh	r3, [r3, #10]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	005b      	lsls	r3, r3, #1
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	3348      	adds	r3, #72	@ 0x48
 800e1de:	443b      	add	r3, r7
 800e1e0:	3b38      	subs	r3, #56	@ 0x38
 800e1e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d011      	beq.n	800e20e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e1ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ec:	1e5a      	subs	r2, r3, #1
 800e1ee:	f107 000c 	add.w	r0, r7, #12
 800e1f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	440b      	add	r3, r1
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	18c1      	adds	r1, r0, r3
 800e1fe:	4613      	mov	r3, r2
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	3348      	adds	r3, #72	@ 0x48
 800e208:	443b      	add	r3, r7
 800e20a:	3b34      	subs	r3, #52	@ 0x34
 800e20c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e20e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d109      	bne.n	800e22a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e218:	4613      	mov	r3, r2
 800e21a:	005b      	lsls	r3, r3, #1
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	3348      	adds	r3, #72	@ 0x48
 800e222:	443b      	add	r3, r7
 800e224:	3b34      	subs	r3, #52	@ 0x34
 800e226:	2200      	movs	r2, #0
 800e228:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e22a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e22c:	3301      	adds	r3, #1
 800e22e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800e230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	643b      	str	r3, [r7, #64]	@ 0x40
 800e236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1b6      	bne.n	800e1aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	891b      	ldrh	r3, [r3, #8]
 800e240:	461a      	mov	r2, r3
 800e242:	4b1f      	ldr	r3, [pc, #124]	@ (800e2c0 <low_level_output+0x150>)
 800e244:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e246:	4a1e      	ldr	r2, [pc, #120]	@ (800e2c0 <low_level_output+0x150>)
 800e248:	f107 030c 	add.w	r3, r7, #12
 800e24c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e24e:	4a1c      	ldr	r2, [pc, #112]	@ (800e2c0 <low_level_output+0x150>)
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f006 fa07 	bl	8014668 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800e25a:	4919      	ldr	r1, [pc, #100]	@ (800e2c0 <low_level_output+0x150>)
 800e25c:	4819      	ldr	r0, [pc, #100]	@ (800e2c4 <low_level_output+0x154>)
 800e25e:	f7f6 fa7d 	bl	800475c <HAL_ETH_Transmit_IT>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d103      	bne.n	800e270 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e26e:	e01b      	b.n	800e2a8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800e270:	4814      	ldr	r0, [pc, #80]	@ (800e2c4 <low_level_output+0x154>)
 800e272:	f7f6 ff25 	bl	80050c0 <HAL_ETH_GetError>
 800e276:	4603      	mov	r3, r0
 800e278:	f003 0302 	and.w	r3, r3, #2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00d      	beq.n	800e29c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800e280:	4b11      	ldr	r3, [pc, #68]	@ (800e2c8 <low_level_output+0x158>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 fe2b 	bl	800eee4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800e28e:	480d      	ldr	r0, [pc, #52]	@ (800e2c4 <low_level_output+0x154>)
 800e290:	f7f6 fc04 	bl	8004a9c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800e294:	23fe      	movs	r3, #254	@ 0xfe
 800e296:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e29a:	e005      	b.n	800e2a8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800e29c:	6838      	ldr	r0, [r7, #0]
 800e29e:	f006 f93d 	bl	801451c <pbuf_free>
        errval =  ERR_IF;
 800e2a2:	23f4      	movs	r3, #244	@ 0xf4
 800e2a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800e2a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e2ac:	f113 0f02 	cmn.w	r3, #2
 800e2b0:	d0d3      	beq.n	800e25a <low_level_output+0xea>

  return errval;
 800e2b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3748      	adds	r7, #72	@ 0x48
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	2000a268 	.word	0x2000a268
 800e2c4:	2000a1b8 	.word	0x2000a1b8
 800e2c8:	2000a1b4 	.word	0x2000a1b4

0800e2cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e2d8:	4b07      	ldr	r3, [pc, #28]	@ (800e2f8 <low_level_input+0x2c>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d105      	bne.n	800e2ec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e2e0:	f107 030c 	add.w	r3, r7, #12
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4805      	ldr	r0, [pc, #20]	@ (800e2fc <low_level_input+0x30>)
 800e2e8:	f7f6 fa94 	bl	8004814 <HAL_ETH_ReadData>
  }

  return p;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	2000a1ac 	.word	0x2000a1ac
 800e2fc:	2000a1b8 	.word	0x2000a1b8

0800e300 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e308:	2300      	movs	r3, #0
 800e30a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e310:	4b0f      	ldr	r3, [pc, #60]	@ (800e350 <ethernetif_input+0x50>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f04f 31ff 	mov.w	r1, #4294967295
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 fde3 	bl	800eee4 <osSemaphoreAcquire>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1f5      	bne.n	800e310 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800e324:	68b8      	ldr	r0, [r7, #8]
 800e326:	f7ff ffd1 	bl	800e2cc <low_level_input>
 800e32a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	68b9      	ldr	r1, [r7, #8]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	4798      	blx	r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f006 f8ea 	bl	801451c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1ea      	bne.n	800e324 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e34e:	e7df      	b.n	800e310 <ethernetif_input+0x10>
 800e350:	2000a1b0 	.word	0x2000a1b0

0800e354 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <ethernetif_init+0x1c>
 800e362:	4b0e      	ldr	r3, [pc, #56]	@ (800e39c <ethernetif_init+0x48>)
 800e364:	f240 220d 	movw	r2, #525	@ 0x20d
 800e368:	490d      	ldr	r1, [pc, #52]	@ (800e3a0 <ethernetif_init+0x4c>)
 800e36a:	480e      	ldr	r0, [pc, #56]	@ (800e3a4 <ethernetif_init+0x50>)
 800e36c:	f00f fe30 	bl	801dfd0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2273      	movs	r2, #115	@ 0x73
 800e374:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2274      	movs	r2, #116	@ 0x74
 800e37c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a09      	ldr	r2, [pc, #36]	@ (800e3a8 <ethernetif_init+0x54>)
 800e384:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a08      	ldr	r2, [pc, #32]	@ (800e3ac <ethernetif_init+0x58>)
 800e38a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7ff fdaf 	bl	800def0 <low_level_init>

  return ERR_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	0801f118 	.word	0x0801f118
 800e3a0:	0801f134 	.word	0x0801f134
 800e3a4:	0801f144 	.word	0x0801f144
 800e3a8:	0801b17d 	.word	0x0801b17d
 800e3ac:	0800e171 	.word	0x0800e171

0800e3b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e3bc:	68f9      	ldr	r1, [r7, #12]
 800e3be:	4809      	ldr	r0, [pc, #36]	@ (800e3e4 <pbuf_free_custom+0x34>)
 800e3c0:	f005 f9e4 	bl	801378c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e3c4:	4b08      	ldr	r3, [pc, #32]	@ (800e3e8 <pbuf_free_custom+0x38>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d107      	bne.n	800e3dc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e3cc:	4b06      	ldr	r3, [pc, #24]	@ (800e3e8 <pbuf_free_custom+0x38>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800e3d2:	4b06      	ldr	r3, [pc, #24]	@ (800e3ec <pbuf_free_custom+0x3c>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f000 fdea 	bl	800efb0 <osSemaphoreRelease>
  }
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	080221cc 	.word	0x080221cc
 800e3e8:	2000a1ac 	.word	0x2000a1ac
 800e3ec:	2000a1b0 	.word	0x2000a1b0

0800e3f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e3f4:	f7f4 fa12 	bl	800281c <HAL_GetTick>
 800e3f8:	4603      	mov	r3, r0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08e      	sub	sp, #56	@ 0x38
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e40c:	2200      	movs	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	605a      	str	r2, [r3, #4]
 800e412:	609a      	str	r2, [r3, #8]
 800e414:	60da      	str	r2, [r3, #12]
 800e416:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a56      	ldr	r2, [pc, #344]	@ (800e578 <HAL_ETH_MspInit+0x178>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	f040 80a6 	bne.w	800e570 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e424:	4b55      	ldr	r3, [pc, #340]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e428:	4a54      	ldr	r2, [pc, #336]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e42a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e42e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e430:	4b52      	ldr	r3, [pc, #328]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	4b4f      	ldr	r3, [pc, #316]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e440:	4a4e      	ldr	r2, [pc, #312]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e446:	6313      	str	r3, [r2, #48]	@ 0x30
 800e448:	4b4c      	ldr	r3, [pc, #304]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e44c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e450:	61fb      	str	r3, [r7, #28]
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	4b49      	ldr	r3, [pc, #292]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e458:	4a48      	ldr	r2, [pc, #288]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e45a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e45e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e460:	4b46      	ldr	r3, [pc, #280]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e468:	61bb      	str	r3, [r7, #24]
 800e46a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e46c:	4b43      	ldr	r3, [pc, #268]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e470:	4a42      	ldr	r2, [pc, #264]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e472:	f043 0304 	orr.w	r3, r3, #4
 800e476:	6313      	str	r3, [r2, #48]	@ 0x30
 800e478:	4b40      	ldr	r3, [pc, #256]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	617b      	str	r3, [r7, #20]
 800e482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e484:	4b3d      	ldr	r3, [pc, #244]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e488:	4a3c      	ldr	r2, [pc, #240]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e48a:	f043 0301 	orr.w	r3, r3, #1
 800e48e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e490:	4b3a      	ldr	r3, [pc, #232]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e494:	f003 0301 	and.w	r3, r3, #1
 800e498:	613b      	str	r3, [r7, #16]
 800e49a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e49c:	4b37      	ldr	r3, [pc, #220]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a0:	4a36      	ldr	r2, [pc, #216]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e4a2:	f043 0302 	orr.w	r3, r3, #2
 800e4a6:	6313      	str	r3, [r2, #48]	@ 0x30
 800e4a8:	4b34      	ldr	r3, [pc, #208]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4ac:	f003 0302 	and.w	r3, r3, #2
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e4b4:	4b31      	ldr	r3, [pc, #196]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4b8:	4a30      	ldr	r2, [pc, #192]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4be:	6313      	str	r3, [r2, #48]	@ 0x30
 800e4c0:	4b2e      	ldr	r3, [pc, #184]	@ (800e57c <HAL_ETH_MspInit+0x17c>)
 800e4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c8:	60bb      	str	r3, [r7, #8]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e4cc:	2332      	movs	r3, #50	@ 0x32
 800e4ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4dc:	230b      	movs	r3, #11
 800e4de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4826      	ldr	r0, [pc, #152]	@ (800e580 <HAL_ETH_MspInit+0x180>)
 800e4e8:	f7f7 fa24 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e4ec:	2386      	movs	r3, #134	@ 0x86
 800e4ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4fc:	230b      	movs	r3, #11
 800e4fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e504:	4619      	mov	r1, r3
 800e506:	481f      	ldr	r0, [pc, #124]	@ (800e584 <HAL_ETH_MspInit+0x184>)
 800e508:	f7f7 fa14 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e50c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e512:	2302      	movs	r3, #2
 800e514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e516:	2300      	movs	r3, #0
 800e518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e51a:	2303      	movs	r3, #3
 800e51c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e51e:	230b      	movs	r3, #11
 800e520:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e526:	4619      	mov	r1, r3
 800e528:	4817      	ldr	r0, [pc, #92]	@ (800e588 <HAL_ETH_MspInit+0x188>)
 800e52a:	f7f7 fa03 	bl	8005934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e52e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800e532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e534:	2302      	movs	r3, #2
 800e536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e53c:	2303      	movs	r3, #3
 800e53e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e540:	230b      	movs	r3, #11
 800e542:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e548:	4619      	mov	r1, r3
 800e54a:	4810      	ldr	r0, [pc, #64]	@ (800e58c <HAL_ETH_MspInit+0x18c>)
 800e54c:	f7f7 f9f2 	bl	8005934 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e550:	2200      	movs	r2, #0
 800e552:	2105      	movs	r1, #5
 800e554:	203d      	movs	r0, #61	@ 0x3d
 800e556:	f7f4 ff4d 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e55a:	203d      	movs	r0, #61	@ 0x3d
 800e55c:	f7f4 ff66 	bl	800342c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800e560:	2200      	movs	r2, #0
 800e562:	2105      	movs	r1, #5
 800e564:	203e      	movs	r0, #62	@ 0x3e
 800e566:	f7f4 ff45 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800e56a:	203e      	movs	r0, #62	@ 0x3e
 800e56c:	f7f4 ff5e 	bl	800342c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e570:	bf00      	nop
 800e572:	3738      	adds	r7, #56	@ 0x38
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	40028000 	.word	0x40028000
 800e57c:	40023800 	.word	0x40023800
 800e580:	40020800 	.word	0x40020800
 800e584:	40020000 	.word	0x40020000
 800e588:	40020400 	.word	0x40020400
 800e58c:	40021800 	.word	0x40021800

0800e590 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e594:	4802      	ldr	r0, [pc, #8]	@ (800e5a0 <ETH_PHY_IO_Init+0x10>)
 800e596:	f7f6 fd51 	bl	800503c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	2000a1b8 	.word	0x2000a1b8

0800e5a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	af00      	add	r7, sp, #0
  return 0;
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	68f9      	ldr	r1, [r7, #12]
 800e5c6:	4807      	ldr	r0, [pc, #28]	@ (800e5e4 <ETH_PHY_IO_ReadReg+0x30>)
 800e5c8:	f7f6 fb92 	bl	8004cf0 <HAL_ETH_ReadPHYRegister>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d6:	e000      	b.n	800e5da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	2000a1b8 	.word	0x2000a1b8

0800e5e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	4807      	ldr	r0, [pc, #28]	@ (800e618 <ETH_PHY_IO_WriteReg+0x30>)
 800e5fc:	f7f6 fbc3 	bl	8004d86 <HAL_ETH_WritePHYRegister>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e606:	f04f 33ff 	mov.w	r3, #4294967295
 800e60a:	e000      	b.n	800e60e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	2000a1b8 	.word	0x2000a1b8

0800e61c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e620:	f7f4 f8fc 	bl	800281c <HAL_GetTick>
 800e624:	4603      	mov	r3, r0
}
 800e626:	4618      	mov	r0, r3
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b0a0      	sub	sp, #128	@ 0x80
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e634:	f107 0308 	add.w	r3, r7, #8
 800e638:	2264      	movs	r2, #100	@ 0x64
 800e63a:	2100      	movs	r1, #0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f00f fe1f 	bl	801e280 <memset>
  int32_t PHYLinkState = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e646:	2300      	movs	r3, #0
 800e648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e64a:	2300      	movs	r3, #0
 800e64c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e64e:	2300      	movs	r3, #0
 800e650:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e656:	483a      	ldr	r0, [pc, #232]	@ (800e740 <ethernet_link_thread+0x114>)
 800e658:	f7f4 f838 	bl	80026cc <LAN8742_GetLinkState>
 800e65c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e65e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e660:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e664:	089b      	lsrs	r3, r3, #2
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00c      	beq.n	800e68a <ethernet_link_thread+0x5e>
 800e670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e672:	2b01      	cmp	r3, #1
 800e674:	dc09      	bgt.n	800e68a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e676:	4833      	ldr	r0, [pc, #204]	@ (800e744 <ethernet_link_thread+0x118>)
 800e678:	f7f5 fff0 	bl	800465c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e67c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e67e:	f005 fb09 	bl	8013c94 <netif_set_down>
    netif_set_link_down(netif);
 800e682:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e684:	f005 fb6c 	bl	8013d60 <netif_set_link_down>
 800e688:	e055      	b.n	800e736 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e68c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e690:	f003 0304 	and.w	r3, r3, #4
 800e694:	2b00      	cmp	r3, #0
 800e696:	d14e      	bne.n	800e736 <ethernet_link_thread+0x10a>
 800e698:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	dd4b      	ble.n	800e736 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e69e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6a0:	3b02      	subs	r3, #2
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d82a      	bhi.n	800e6fc <ethernet_link_thread+0xd0>
 800e6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6ac <ethernet_link_thread+0x80>)
 800e6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ac:	0800e6bd 	.word	0x0800e6bd
 800e6b0:	0800e6cf 	.word	0x0800e6cf
 800e6b4:	0800e6df 	.word	0x0800e6df
 800e6b8:	0800e6ef 	.word	0x0800e6ef
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e6bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e6c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e6c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e6c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6cc:	e017      	b.n	800e6fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e6d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e6d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6dc:	e00f      	b.n	800e6fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e6de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e6e2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6ec:	e007      	b.n	800e6fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6fa:	e000      	b.n	800e6fe <ethernet_link_thread+0xd2>
    default:
      break;
 800e6fc:	bf00      	nop
    }

    if(linkchanged)
 800e6fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d018      	beq.n	800e736 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e704:	f107 0308 	add.w	r3, r7, #8
 800e708:	4619      	mov	r1, r3
 800e70a:	480e      	ldr	r0, [pc, #56]	@ (800e744 <ethernet_link_thread+0x118>)
 800e70c:	f7f6 fb84 	bl	8004e18 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e712:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e716:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e718:	f107 0308 	add.w	r3, r7, #8
 800e71c:	4619      	mov	r1, r3
 800e71e:	4809      	ldr	r0, [pc, #36]	@ (800e744 <ethernet_link_thread+0x118>)
 800e720:	f7f6 fc71 	bl	8005006 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e724:	4807      	ldr	r0, [pc, #28]	@ (800e744 <ethernet_link_thread+0x118>)
 800e726:	f7f5 ff29 	bl	800457c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e72a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e72c:	f005 fa46 	bl	8013bbc <netif_set_up>
      netif_set_link_up(netif);
 800e730:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e732:	f005 fae1 	bl	8013cf8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e736:	2064      	movs	r0, #100	@ 0x64
 800e738:	f000 f9c2 	bl	800eac0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e73c:	e78b      	b.n	800e656 <ethernet_link_thread+0x2a>
 800e73e:	bf00      	nop
 800e740:	2000a2a0 	.word	0x2000a2a0
 800e744:	2000a1b8 	.word	0x2000a1b8

0800e748 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e750:	4812      	ldr	r0, [pc, #72]	@ (800e79c <HAL_ETH_RxAllocateCallback+0x54>)
 800e752:	f004 ffa7 	bl	80136a4 <memp_malloc_pool>
 800e756:	60f8      	str	r0, [r7, #12]
  if (p)
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d014      	beq.n	800e788 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f103 0220 	add.w	r2, r3, #32
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4a0d      	ldr	r2, [pc, #52]	@ (800e7a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800e76c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e776:	9201      	str	r2, [sp, #4]
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2241      	movs	r2, #65	@ 0x41
 800e77e:	2100      	movs	r1, #0
 800e780:	2000      	movs	r0, #0
 800e782:	f005 fd11 	bl	80141a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e786:	e005      	b.n	800e794 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e788:	4b06      	ldr	r3, [pc, #24]	@ (800e7a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]
}
 800e794:	bf00      	nop
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	080221cc 	.word	0x080221cc
 800e7a0:	0800e3b1 	.word	0x0800e3b1
 800e7a4:	2000a1ac 	.word	0x2000a1ac

0800e7a8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
 800e7b4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3b20      	subs	r3, #32
 800e7c6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	887a      	ldrh	r2, [r7, #2]
 800e7d8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d103      	bne.n	800e7ea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	69fa      	ldr	r2, [r7, #28]
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	e003      	b.n	800e7f2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	69fa      	ldr	r2, [r7, #28]
 800e7f0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	69fa      	ldr	r2, [r7, #28]
 800e7f6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	61fb      	str	r3, [r7, #28]
 800e7fe:	e009      	b.n	800e814 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	891a      	ldrh	r2, [r3, #8]
 800e804:	887b      	ldrh	r3, [r7, #2]
 800e806:	4413      	add	r3, r2
 800e808:	b29a      	uxth	r2, r3
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	61fb      	str	r3, [r7, #28]
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1f2      	bne.n	800e800 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e81a:	887b      	ldrh	r3, [r7, #2]
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7ff fb02 	bl	800de28 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e824:	bf00      	nop
 800e826:	3720      	adds	r7, #32
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f005 fe71 	bl	801451c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e83a:	bf00      	nop
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e842:	b480      	push	{r7}
 800e844:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e846:	bf00      	nop
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e856:	f3ef 8305 	mrs	r3, IPSR
 800e85a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e85c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10f      	bne.n	800e882 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e862:	f3ef 8310 	mrs	r3, PRIMASK
 800e866:	607b      	str	r3, [r7, #4]
  return(result);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d105      	bne.n	800e87a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e86e:	f3ef 8311 	mrs	r3, BASEPRI
 800e872:	603b      	str	r3, [r7, #0]
  return(result);
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d007      	beq.n	800e88a <osKernelInitialize+0x3a>
 800e87a:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b4 <osKernelInitialize+0x64>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d103      	bne.n	800e88a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e882:	f06f 0305 	mvn.w	r3, #5
 800e886:	60fb      	str	r3, [r7, #12]
 800e888:	e00c      	b.n	800e8a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e88a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b4 <osKernelInitialize+0x64>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d105      	bne.n	800e89e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e892:	4b08      	ldr	r3, [pc, #32]	@ (800e8b4 <osKernelInitialize+0x64>)
 800e894:	2201      	movs	r2, #1
 800e896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	e002      	b.n	800e8a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e89e:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	2000a2c0 	.word	0x2000a2c0

0800e8b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10f      	bne.n	800e8ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800e8ce:	607b      	str	r3, [r7, #4]
  return(result);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d105      	bne.n	800e8e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8d6:	f3ef 8311 	mrs	r3, BASEPRI
 800e8da:	603b      	str	r3, [r7, #0]
  return(result);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d007      	beq.n	800e8f2 <osKernelStart+0x3a>
 800e8e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e920 <osKernelStart+0x68>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d103      	bne.n	800e8f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e8ea:	f06f 0305 	mvn.w	r3, #5
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e010      	b.n	800e914 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e920 <osKernelStart+0x68>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d109      	bne.n	800e90e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8fa:	f7ff ffa2 	bl	800e842 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8fe:	4b08      	ldr	r3, [pc, #32]	@ (800e920 <osKernelStart+0x68>)
 800e900:	2202      	movs	r2, #2
 800e902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e904:	f002 f92e 	bl	8010b64 <vTaskStartScheduler>
      stat = osOK;
 800e908:	2300      	movs	r3, #0
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	e002      	b.n	800e914 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e90e:	f04f 33ff 	mov.w	r3, #4294967295
 800e912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e914:	68fb      	ldr	r3, [r7, #12]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	2000a2c0 	.word	0x2000a2c0

0800e924 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e92a:	f3ef 8305 	mrs	r3, IPSR
 800e92e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e930:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e932:	2b00      	cmp	r3, #0
 800e934:	d10f      	bne.n	800e956 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e936:	f3ef 8310 	mrs	r3, PRIMASK
 800e93a:	607b      	str	r3, [r7, #4]
  return(result);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e942:	f3ef 8311 	mrs	r3, BASEPRI
 800e946:	603b      	str	r3, [r7, #0]
  return(result);
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d007      	beq.n	800e95e <osKernelGetTickCount+0x3a>
 800e94e:	4b08      	ldr	r3, [pc, #32]	@ (800e970 <osKernelGetTickCount+0x4c>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d103      	bne.n	800e95e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e956:	f002 fa37 	bl	8010dc8 <xTaskGetTickCountFromISR>
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	e002      	b.n	800e964 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e95e:	f002 fa23 	bl	8010da8 <xTaskGetTickCount>
 800e962:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e964:	68fb      	ldr	r3, [r7, #12]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	2000a2c0 	.word	0x2000a2c0

0800e974 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b090      	sub	sp, #64	@ 0x40
 800e978:	af04      	add	r7, sp, #16
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e980:	2300      	movs	r3, #0
 800e982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e984:	f3ef 8305 	mrs	r3, IPSR
 800e988:	61fb      	str	r3, [r7, #28]
  return(result);
 800e98a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 8090 	bne.w	800eab2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e992:	f3ef 8310 	mrs	r3, PRIMASK
 800e996:	61bb      	str	r3, [r7, #24]
  return(result);
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d105      	bne.n	800e9aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e99e:	f3ef 8311 	mrs	r3, BASEPRI
 800e9a2:	617b      	str	r3, [r7, #20]
  return(result);
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <osThreadNew+0x3e>
 800e9aa:	4b44      	ldr	r3, [pc, #272]	@ (800eabc <osThreadNew+0x148>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d07f      	beq.n	800eab2 <osThreadNew+0x13e>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d07c      	beq.n	800eab2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e9b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e9be:	2318      	movs	r3, #24
 800e9c0:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800e9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ca:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d045      	beq.n	800ea5e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <osThreadNew+0x6c>
        name = attr->name;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	699b      	ldr	r3, [r3, #24]
 800e9ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d008      	beq.n	800ea06 <osThreadNew+0x92>
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f6:	2b38      	cmp	r3, #56	@ 0x38
 800e9f8:	d805      	bhi.n	800ea06 <osThreadNew+0x92>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <osThreadNew+0x96>
        return (NULL);
 800ea06:	2300      	movs	r3, #0
 800ea08:	e054      	b.n	800eab4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d003      	beq.n	800ea1a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	695b      	ldr	r3, [r3, #20]
 800ea16:	089b      	lsrs	r3, r3, #2
 800ea18:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00e      	beq.n	800ea40 <osThreadNew+0xcc>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2ba7      	cmp	r3, #167	@ 0xa7
 800ea28:	d90a      	bls.n	800ea40 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d006      	beq.n	800ea40 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	695b      	ldr	r3, [r3, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <osThreadNew+0xcc>
        mem = 1;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	623b      	str	r3, [r7, #32]
 800ea3e:	e010      	b.n	800ea62 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10c      	bne.n	800ea62 <osThreadNew+0xee>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d108      	bne.n	800ea62 <osThreadNew+0xee>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d104      	bne.n	800ea62 <osThreadNew+0xee>
          mem = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	623b      	str	r3, [r7, #32]
 800ea5c:	e001      	b.n	800ea62 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d110      	bne.n	800ea8a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea70:	9202      	str	r2, [sp, #8]
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f001 fe72 	bl	8010768 <xTaskCreateStatic>
 800ea84:	4603      	mov	r3, r0
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	e013      	b.n	800eab2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d110      	bne.n	800eab2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	f107 0310 	add.w	r3, r7, #16
 800ea98:	9301      	str	r3, [sp, #4]
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f001 fec6 	bl	8010834 <xTaskCreate>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d001      	beq.n	800eab2 <osThreadNew+0x13e>
          hTask = NULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eab2:	693b      	ldr	r3, [r7, #16]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3730      	adds	r7, #48	@ 0x30
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	2000a2c0 	.word	0x2000a2c0

0800eac0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac8:	f3ef 8305 	mrs	r3, IPSR
 800eacc:	613b      	str	r3, [r7, #16]
  return(result);
 800eace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10f      	bne.n	800eaf4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ead4:	f3ef 8310 	mrs	r3, PRIMASK
 800ead8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d105      	bne.n	800eaec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eae0:	f3ef 8311 	mrs	r3, BASEPRI
 800eae4:	60bb      	str	r3, [r7, #8]
  return(result);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <osDelay+0x3c>
 800eaec:	4b0a      	ldr	r3, [pc, #40]	@ (800eb18 <osDelay+0x58>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d103      	bne.n	800eafc <osDelay+0x3c>
    stat = osErrorISR;
 800eaf4:	f06f 0305 	mvn.w	r3, #5
 800eaf8:	617b      	str	r3, [r7, #20]
 800eafa:	e007      	b.n	800eb0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <osDelay+0x4c>
      vTaskDelay(ticks);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f001 fff4 	bl	8010af4 <vTaskDelay>
    }
  }

  return (stat);
 800eb0c:	697b      	ldr	r3, [r7, #20]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3718      	adds	r7, #24
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	2000a2c0 	.word	0x2000a2c0

0800eb1c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08a      	sub	sp, #40	@ 0x28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800eb24:	2300      	movs	r3, #0
 800eb26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb28:	f3ef 8305 	mrs	r3, IPSR
 800eb2c:	613b      	str	r3, [r7, #16]
  return(result);
 800eb2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f040 8085 	bne.w	800ec40 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb36:	f3ef 8310 	mrs	r3, PRIMASK
 800eb3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d105      	bne.n	800eb4e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb42:	f3ef 8311 	mrs	r3, BASEPRI
 800eb46:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <osMutexNew+0x3a>
 800eb4e:	4b3f      	ldr	r3, [pc, #252]	@ (800ec4c <osMutexNew+0x130>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d074      	beq.n	800ec40 <osMutexNew+0x124>
    if (attr != NULL) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <osMutexNew+0x48>
      type = attr->attr_bits;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	623b      	str	r3, [r7, #32]
 800eb62:	e001      	b.n	800eb68 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800eb64:	2300      	movs	r3, #0
 800eb66:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800eb68:	6a3b      	ldr	r3, [r7, #32]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d002      	beq.n	800eb78 <osMutexNew+0x5c>
      rmtx = 1U;
 800eb72:	2301      	movs	r3, #1
 800eb74:	61fb      	str	r3, [r7, #28]
 800eb76:	e001      	b.n	800eb7c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800eb7c:	6a3b      	ldr	r3, [r7, #32]
 800eb7e:	f003 0308 	and.w	r3, r3, #8
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d15c      	bne.n	800ec40 <osMutexNew+0x124>
      mem = -1;
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d015      	beq.n	800ebbe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d006      	beq.n	800eba8 <osMutexNew+0x8c>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	2b4f      	cmp	r3, #79	@ 0x4f
 800eba0:	d902      	bls.n	800eba8 <osMutexNew+0x8c>
          mem = 1;
 800eba2:	2301      	movs	r3, #1
 800eba4:	61bb      	str	r3, [r7, #24]
 800eba6:	e00c      	b.n	800ebc2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d108      	bne.n	800ebc2 <osMutexNew+0xa6>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d104      	bne.n	800ebc2 <osMutexNew+0xa6>
            mem = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61bb      	str	r3, [r7, #24]
 800ebbc:	e001      	b.n	800ebc2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d112      	bne.n	800ebee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d007      	beq.n	800ebde <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	2004      	movs	r0, #4
 800ebd6:	f000 fe22 	bl	800f81e <xQueueCreateMutexStatic>
 800ebda:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebdc:	e016      	b.n	800ec0c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	f000 fe1a 	bl	800f81e <xQueueCreateMutexStatic>
 800ebea:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebec:	e00e      	b.n	800ec0c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10b      	bne.n	800ec0c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d004      	beq.n	800ec04 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ebfa:	2004      	movs	r0, #4
 800ebfc:	f000 fdf7 	bl	800f7ee <xQueueCreateMutex>
 800ec00:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec02:	e003      	b.n	800ec0c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ec04:	2001      	movs	r0, #1
 800ec06:	f000 fdf2 	bl	800f7ee <xQueueCreateMutex>
 800ec0a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00c      	beq.n	800ec2c <osMutexNew+0x110>
        if (attr != NULL) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <osMutexNew+0x104>
          name = attr->name;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	e001      	b.n	800ec24 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ec24:	6979      	ldr	r1, [r7, #20]
 800ec26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec28:	f001 fd16 	bl	8010658 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d006      	beq.n	800ec40 <osMutexNew+0x124>
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d003      	beq.n	800ec40 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ec38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3a:	f043 0301 	orr.w	r3, r3, #1
 800ec3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ec40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3728      	adds	r7, #40	@ 0x28
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000a2c0 	.word	0x2000a2c0

0800ec50 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f023 0301 	bic.w	r3, r3, #1
 800ec60:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6e:	f3ef 8305 	mrs	r3, IPSR
 800ec72:	613b      	str	r3, [r7, #16]
  return(result);
 800ec74:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10f      	bne.n	800ec9a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d105      	bne.n	800ec92 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec86:	f3ef 8311 	mrs	r3, BASEPRI
 800ec8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d007      	beq.n	800eca2 <osMutexAcquire+0x52>
 800ec92:	4b1d      	ldr	r3, [pc, #116]	@ (800ed08 <osMutexAcquire+0xb8>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	d103      	bne.n	800eca2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ec9a:	f06f 0305 	mvn.w	r3, #5
 800ec9e:	61fb      	str	r3, [r7, #28]
 800eca0:	e02c      	b.n	800ecfc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800eca8:	f06f 0303 	mvn.w	r3, #3
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e025      	b.n	800ecfc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d011      	beq.n	800ecda <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	69b8      	ldr	r0, [r7, #24]
 800ecba:	f000 fe02 	bl	800f8c2 <xQueueTakeMutexRecursive>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d01b      	beq.n	800ecfc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d003      	beq.n	800ecd2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ecca:	f06f 0301 	mvn.w	r3, #1
 800ecce:	61fb      	str	r3, [r7, #28]
 800ecd0:	e014      	b.n	800ecfc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ecd2:	f06f 0302 	mvn.w	r3, #2
 800ecd6:	61fb      	str	r3, [r7, #28]
 800ecd8:	e010      	b.n	800ecfc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	69b8      	ldr	r0, [r7, #24]
 800ecde:	f001 f9cd 	bl	801007c <xQueueSemaphoreTake>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d009      	beq.n	800ecfc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d003      	beq.n	800ecf6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ecee:	f06f 0301 	mvn.w	r3, #1
 800ecf2:	61fb      	str	r3, [r7, #28]
 800ecf4:	e002      	b.n	800ecfc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ecf6:	f06f 0302 	mvn.w	r3, #2
 800ecfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ecfc:	69fb      	ldr	r3, [r7, #28]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3720      	adds	r7, #32
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	2000a2c0 	.word	0x2000a2c0

0800ed0c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f023 0301 	bic.w	r3, r3, #1
 800ed1a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f003 0301 	and.w	r3, r3, #1
 800ed22:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed28:	f3ef 8305 	mrs	r3, IPSR
 800ed2c:	613b      	str	r3, [r7, #16]
  return(result);
 800ed2e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10f      	bne.n	800ed54 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed34:	f3ef 8310 	mrs	r3, PRIMASK
 800ed38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d105      	bne.n	800ed4c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed40:	f3ef 8311 	mrs	r3, BASEPRI
 800ed44:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d007      	beq.n	800ed5c <osMutexRelease+0x50>
 800ed4c:	4b16      	ldr	r3, [pc, #88]	@ (800eda8 <osMutexRelease+0x9c>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d103      	bne.n	800ed5c <osMutexRelease+0x50>
    stat = osErrorISR;
 800ed54:	f06f 0305 	mvn.w	r3, #5
 800ed58:	61fb      	str	r3, [r7, #28]
 800ed5a:	e01f      	b.n	800ed9c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d103      	bne.n	800ed6a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ed62:	f06f 0303 	mvn.w	r3, #3
 800ed66:	61fb      	str	r3, [r7, #28]
 800ed68:	e018      	b.n	800ed9c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ed70:	69b8      	ldr	r0, [r7, #24]
 800ed72:	f000 fd6f 	bl	800f854 <xQueueGiveMutexRecursive>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d00f      	beq.n	800ed9c <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed7c:	f06f 0302 	mvn.w	r3, #2
 800ed80:	61fb      	str	r3, [r7, #28]
 800ed82:	e00b      	b.n	800ed9c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ed84:	2300      	movs	r3, #0
 800ed86:	2200      	movs	r2, #0
 800ed88:	2100      	movs	r1, #0
 800ed8a:	69b8      	ldr	r0, [r7, #24]
 800ed8c:	f000 fe48 	bl	800fa20 <xQueueGenericSend>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d002      	beq.n	800ed9c <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed96:	f06f 0302 	mvn.w	r3, #2
 800ed9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ed9c:	69fb      	ldr	r3, [r7, #28]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3720      	adds	r7, #32
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	2000a2c0 	.word	0x2000a2c0

0800edac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800edac:	b580      	push	{r7, lr}
 800edae:	b08c      	sub	sp, #48	@ 0x30
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800edb8:	2300      	movs	r3, #0
 800edba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edbc:	f3ef 8305 	mrs	r3, IPSR
 800edc0:	61bb      	str	r3, [r7, #24]
  return(result);
 800edc2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 8086 	bne.w	800eed6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edca:	f3ef 8310 	mrs	r3, PRIMASK
 800edce:	617b      	str	r3, [r7, #20]
  return(result);
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d105      	bne.n	800ede2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edd6:	f3ef 8311 	mrs	r3, BASEPRI
 800edda:	613b      	str	r3, [r7, #16]
  return(result);
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d003      	beq.n	800edea <osSemaphoreNew+0x3e>
 800ede2:	4b3f      	ldr	r3, [pc, #252]	@ (800eee0 <osSemaphoreNew+0x134>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d075      	beq.n	800eed6 <osSemaphoreNew+0x12a>
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d072      	beq.n	800eed6 <osSemaphoreNew+0x12a>
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d86e      	bhi.n	800eed6 <osSemaphoreNew+0x12a>
    mem = -1;
 800edf8:	f04f 33ff 	mov.w	r3, #4294967295
 800edfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d015      	beq.n	800ee30 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d006      	beq.n	800ee1a <osSemaphoreNew+0x6e>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	2b4f      	cmp	r3, #79	@ 0x4f
 800ee12:	d902      	bls.n	800ee1a <osSemaphoreNew+0x6e>
        mem = 1;
 800ee14:	2301      	movs	r3, #1
 800ee16:	623b      	str	r3, [r7, #32]
 800ee18:	e00c      	b.n	800ee34 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d108      	bne.n	800ee34 <osSemaphoreNew+0x88>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d104      	bne.n	800ee34 <osSemaphoreNew+0x88>
          mem = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	623b      	str	r3, [r7, #32]
 800ee2e:	e001      	b.n	800ee34 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3a:	d04c      	beq.n	800eed6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d128      	bne.n	800ee94 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ee42:	6a3b      	ldr	r3, [r7, #32]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d10a      	bne.n	800ee5e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	9200      	str	r2, [sp, #0]
 800ee50:	2200      	movs	r2, #0
 800ee52:	2100      	movs	r1, #0
 800ee54:	2001      	movs	r0, #1
 800ee56:	f000 fbc3 	bl	800f5e0 <xQueueGenericCreateStatic>
 800ee5a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee5c:	e005      	b.n	800ee6a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ee5e:	2203      	movs	r2, #3
 800ee60:	2100      	movs	r1, #0
 800ee62:	2001      	movs	r0, #1
 800ee64:	f000 fc43 	bl	800f6ee <xQueueGenericCreate>
 800ee68:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d022      	beq.n	800eeb6 <osSemaphoreNew+0x10a>
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d01f      	beq.n	800eeb6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee76:	2300      	movs	r3, #0
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee7e:	f000 fdcf 	bl	800fa20 <xQueueGenericSend>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d016      	beq.n	800eeb6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ee88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee8a:	f001 fa97 	bl	80103bc <vQueueDelete>
            hSemaphore = NULL;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee92:	e010      	b.n	800eeb6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d108      	bne.n	800eeac <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 fd46 	bl	800f934 <xQueueCreateCountingSemaphoreStatic>
 800eea8:	6278      	str	r0, [r7, #36]	@ 0x24
 800eeaa:	e004      	b.n	800eeb6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800eeac:	68b9      	ldr	r1, [r7, #8]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f000 fd7d 	bl	800f9ae <xQueueCreateCountingSemaphore>
 800eeb4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00c      	beq.n	800eed6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <osSemaphoreNew+0x11e>
          name = attr->name;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	61fb      	str	r3, [r7, #28]
 800eec8:	e001      	b.n	800eece <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800eece:	69f9      	ldr	r1, [r7, #28]
 800eed0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eed2:	f001 fbc1 	bl	8010658 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800eed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3728      	adds	r7, #40	@ 0x28
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	2000a2c0 	.word	0x2000a2c0

0800eee4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b088      	sub	sp, #32
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d103      	bne.n	800ef04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eefc:	f06f 0303 	mvn.w	r3, #3
 800ef00:	61fb      	str	r3, [r7, #28]
 800ef02:	e04b      	b.n	800ef9c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef04:	f3ef 8305 	mrs	r3, IPSR
 800ef08:	617b      	str	r3, [r7, #20]
  return(result);
 800ef0a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10f      	bne.n	800ef30 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef10:	f3ef 8310 	mrs	r3, PRIMASK
 800ef14:	613b      	str	r3, [r7, #16]
  return(result);
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d105      	bne.n	800ef28 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef1c:	f3ef 8311 	mrs	r3, BASEPRI
 800ef20:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d026      	beq.n	800ef76 <osSemaphoreAcquire+0x92>
 800ef28:	4b1f      	ldr	r3, [pc, #124]	@ (800efa8 <osSemaphoreAcquire+0xc4>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d122      	bne.n	800ef76 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ef36:	f06f 0303 	mvn.w	r3, #3
 800ef3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ef3c:	e02d      	b.n	800ef9a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ef42:	f107 0308 	add.w	r3, r7, #8
 800ef46:	461a      	mov	r2, r3
 800ef48:	2100      	movs	r1, #0
 800ef4a:	69b8      	ldr	r0, [r7, #24]
 800ef4c:	f001 f9ae 	bl	80102ac <xQueueReceiveFromISR>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d003      	beq.n	800ef5e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ef56:	f06f 0302 	mvn.w	r3, #2
 800ef5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ef5c:	e01d      	b.n	800ef9a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d01a      	beq.n	800ef9a <osSemaphoreAcquire+0xb6>
 800ef64:	4b11      	ldr	r3, [pc, #68]	@ (800efac <osSemaphoreAcquire+0xc8>)
 800ef66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ef74:	e011      	b.n	800ef9a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	69b8      	ldr	r0, [r7, #24]
 800ef7a:	f001 f87f 	bl	801007c <xQueueSemaphoreTake>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d00b      	beq.n	800ef9c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ef8a:	f06f 0301 	mvn.w	r3, #1
 800ef8e:	61fb      	str	r3, [r7, #28]
 800ef90:	e004      	b.n	800ef9c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ef92:	f06f 0302 	mvn.w	r3, #2
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	e000      	b.n	800ef9c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ef9a:	bf00      	nop
      }
    }
  }

  return (stat);
 800ef9c:	69fb      	ldr	r3, [r7, #28]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3720      	adds	r7, #32
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	2000a2c0 	.word	0x2000a2c0
 800efac:	e000ed04 	.word	0xe000ed04

0800efb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d103      	bne.n	800efce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800efc6:	f06f 0303 	mvn.w	r3, #3
 800efca:	61fb      	str	r3, [r7, #28]
 800efcc:	e03e      	b.n	800f04c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efce:	f3ef 8305 	mrs	r3, IPSR
 800efd2:	617b      	str	r3, [r7, #20]
  return(result);
 800efd4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10f      	bne.n	800effa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efda:	f3ef 8310 	mrs	r3, PRIMASK
 800efde:	613b      	str	r3, [r7, #16]
  return(result);
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d105      	bne.n	800eff2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efe6:	f3ef 8311 	mrs	r3, BASEPRI
 800efea:	60fb      	str	r3, [r7, #12]
  return(result);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d01e      	beq.n	800f030 <osSemaphoreRelease+0x80>
 800eff2:	4b19      	ldr	r3, [pc, #100]	@ (800f058 <osSemaphoreRelease+0xa8>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d11a      	bne.n	800f030 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800effa:	2300      	movs	r3, #0
 800effc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800effe:	f107 0308 	add.w	r3, r7, #8
 800f002:	4619      	mov	r1, r3
 800f004:	69b8      	ldr	r0, [r7, #24]
 800f006:	f000 feb8 	bl	800fd7a <xQueueGiveFromISR>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d003      	beq.n	800f018 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f010:	f06f 0302 	mvn.w	r3, #2
 800f014:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f016:	e018      	b.n	800f04a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d015      	beq.n	800f04a <osSemaphoreRelease+0x9a>
 800f01e:	4b0f      	ldr	r3, [pc, #60]	@ (800f05c <osSemaphoreRelease+0xac>)
 800f020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f02e:	e00c      	b.n	800f04a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f030:	2300      	movs	r3, #0
 800f032:	2200      	movs	r2, #0
 800f034:	2100      	movs	r1, #0
 800f036:	69b8      	ldr	r0, [r7, #24]
 800f038:	f000 fcf2 	bl	800fa20 <xQueueGenericSend>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d004      	beq.n	800f04c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f042:	f06f 0302 	mvn.w	r3, #2
 800f046:	61fb      	str	r3, [r7, #28]
 800f048:	e000      	b.n	800f04c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f04a:	bf00      	nop
    }
  }

  return (stat);
 800f04c:	69fb      	ldr	r3, [r7, #28]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3720      	adds	r7, #32
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	2000a2c0 	.word	0x2000a2c0
 800f05c:	e000ed04 	.word	0xe000ed04

0800f060 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f060:	b580      	push	{r7, lr}
 800f062:	b08c      	sub	sp, #48	@ 0x30
 800f064:	af02      	add	r7, sp, #8
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f070:	f3ef 8305 	mrs	r3, IPSR
 800f074:	61bb      	str	r3, [r7, #24]
  return(result);
 800f076:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d16f      	bne.n	800f15c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f07c:	f3ef 8310 	mrs	r3, PRIMASK
 800f080:	617b      	str	r3, [r7, #20]
  return(result);
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d105      	bne.n	800f094 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f088:	f3ef 8311 	mrs	r3, BASEPRI
 800f08c:	613b      	str	r3, [r7, #16]
  return(result);
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d003      	beq.n	800f09c <osMessageQueueNew+0x3c>
 800f094:	4b34      	ldr	r3, [pc, #208]	@ (800f168 <osMessageQueueNew+0x108>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d05f      	beq.n	800f15c <osMessageQueueNew+0xfc>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d05c      	beq.n	800f15c <osMessageQueueNew+0xfc>
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d059      	beq.n	800f15c <osMessageQueueNew+0xfc>
    mem = -1;
 800f0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d029      	beq.n	800f108 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d012      	beq.n	800f0e2 <osMessageQueueNew+0x82>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b4f      	cmp	r3, #79	@ 0x4f
 800f0c2:	d90e      	bls.n	800f0e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	695a      	ldr	r2, [r3, #20]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	68b9      	ldr	r1, [r7, #8]
 800f0d4:	fb01 f303 	mul.w	r3, r1, r3
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d302      	bcc.n	800f0e2 <osMessageQueueNew+0x82>
        mem = 1;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	623b      	str	r3, [r7, #32]
 800f0e0:	e014      	b.n	800f10c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d110      	bne.n	800f10c <osMessageQueueNew+0xac>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10c      	bne.n	800f10c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d108      	bne.n	800f10c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	695b      	ldr	r3, [r3, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d104      	bne.n	800f10c <osMessageQueueNew+0xac>
          mem = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	623b      	str	r3, [r7, #32]
 800f106:	e001      	b.n	800f10c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d10b      	bne.n	800f12a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	691a      	ldr	r2, [r3, #16]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	2100      	movs	r1, #0
 800f11c:	9100      	str	r1, [sp, #0]
 800f11e:	68b9      	ldr	r1, [r7, #8]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 fa5d 	bl	800f5e0 <xQueueGenericCreateStatic>
 800f126:	6278      	str	r0, [r7, #36]	@ 0x24
 800f128:	e008      	b.n	800f13c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d105      	bne.n	800f13c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f130:	2200      	movs	r2, #0
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 fada 	bl	800f6ee <xQueueGenericCreate>
 800f13a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00c      	beq.n	800f15c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d003      	beq.n	800f150 <osMessageQueueNew+0xf0>
        name = attr->name;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	61fb      	str	r3, [r7, #28]
 800f14e:	e001      	b.n	800f154 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800f150:	2300      	movs	r3, #0
 800f152:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f154:	69f9      	ldr	r1, [r7, #28]
 800f156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f158:	f001 fa7e 	bl	8010658 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3728      	adds	r7, #40	@ 0x28
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	2000a2c0 	.word	0x2000a2c0

0800f16c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	@ 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	4613      	mov	r3, r2
 800f17a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f180:	2300      	movs	r3, #0
 800f182:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f184:	f3ef 8305 	mrs	r3, IPSR
 800f188:	61fb      	str	r3, [r7, #28]
  return(result);
 800f18a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10f      	bne.n	800f1b0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f190:	f3ef 8310 	mrs	r3, PRIMASK
 800f194:	61bb      	str	r3, [r7, #24]
  return(result);
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d105      	bne.n	800f1a8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f19c:	f3ef 8311 	mrs	r3, BASEPRI
 800f1a0:	617b      	str	r3, [r7, #20]
  return(result);
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d02c      	beq.n	800f202 <osMessageQueuePut+0x96>
 800f1a8:	4b28      	ldr	r3, [pc, #160]	@ (800f24c <osMessageQueuePut+0xe0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d128      	bne.n	800f202 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d005      	beq.n	800f1c2 <osMessageQueuePut+0x56>
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d002      	beq.n	800f1c2 <osMessageQueuePut+0x56>
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d003      	beq.n	800f1ca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f1c2:	f06f 0303 	mvn.w	r3, #3
 800f1c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1c8:	e039      	b.n	800f23e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f1ce:	f107 0210 	add.w	r2, r7, #16
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	6a38      	ldr	r0, [r7, #32]
 800f1d8:	f000 fd2c 	bl	800fc34 <xQueueGenericSendFromISR>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d003      	beq.n	800f1ea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f1e2:	f06f 0302 	mvn.w	r3, #2
 800f1e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1e8:	e029      	b.n	800f23e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d026      	beq.n	800f23e <osMessageQueuePut+0xd2>
 800f1f0:	4b17      	ldr	r3, [pc, #92]	@ (800f250 <osMessageQueuePut+0xe4>)
 800f1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1f6:	601a      	str	r2, [r3, #0]
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f200:	e01d      	b.n	800f23e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <osMessageQueuePut+0xa2>
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d103      	bne.n	800f216 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f20e:	f06f 0303 	mvn.w	r3, #3
 800f212:	627b      	str	r3, [r7, #36]	@ 0x24
 800f214:	e014      	b.n	800f240 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f216:	2300      	movs	r3, #0
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	6a38      	ldr	r0, [r7, #32]
 800f21e:	f000 fbff 	bl	800fa20 <xQueueGenericSend>
 800f222:	4603      	mov	r3, r0
 800f224:	2b01      	cmp	r3, #1
 800f226:	d00b      	beq.n	800f240 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d003      	beq.n	800f236 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f22e:	f06f 0301 	mvn.w	r3, #1
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
 800f234:	e004      	b.n	800f240 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f236:	f06f 0302 	mvn.w	r3, #2
 800f23a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f23c:	e000      	b.n	800f240 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f23e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f242:	4618      	mov	r0, r3
 800f244:	3728      	adds	r7, #40	@ 0x28
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	2000a2c0 	.word	0x2000a2c0
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f254:	b580      	push	{r7, lr}
 800f256:	b08a      	sub	sp, #40	@ 0x28
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f266:	2300      	movs	r3, #0
 800f268:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f26a:	f3ef 8305 	mrs	r3, IPSR
 800f26e:	61fb      	str	r3, [r7, #28]
  return(result);
 800f270:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10f      	bne.n	800f296 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f276:	f3ef 8310 	mrs	r3, PRIMASK
 800f27a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d105      	bne.n	800f28e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f282:	f3ef 8311 	mrs	r3, BASEPRI
 800f286:	617b      	str	r3, [r7, #20]
  return(result);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d02c      	beq.n	800f2e8 <osMessageQueueGet+0x94>
 800f28e:	4b28      	ldr	r3, [pc, #160]	@ (800f330 <osMessageQueueGet+0xdc>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d128      	bne.n	800f2e8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f296:	6a3b      	ldr	r3, [r7, #32]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <osMessageQueueGet+0x54>
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <osMessageQueueGet+0x54>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d003      	beq.n	800f2b0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f2a8:	f06f 0303 	mvn.w	r3, #3
 800f2ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2ae:	e038      	b.n	800f322 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f2b4:	f107 0310 	add.w	r3, r7, #16
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	68b9      	ldr	r1, [r7, #8]
 800f2bc:	6a38      	ldr	r0, [r7, #32]
 800f2be:	f000 fff5 	bl	80102ac <xQueueReceiveFromISR>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d003      	beq.n	800f2d0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f2c8:	f06f 0302 	mvn.w	r3, #2
 800f2cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2ce:	e028      	b.n	800f322 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d025      	beq.n	800f322 <osMessageQueueGet+0xce>
 800f2d6:	4b17      	ldr	r3, [pc, #92]	@ (800f334 <osMessageQueueGet+0xe0>)
 800f2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2e6:	e01c      	b.n	800f322 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f2e8:	6a3b      	ldr	r3, [r7, #32]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <osMessageQueueGet+0xa0>
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f2f4:	f06f 0303 	mvn.w	r3, #3
 800f2f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2fa:	e013      	b.n	800f324 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f2fc:	683a      	ldr	r2, [r7, #0]
 800f2fe:	68b9      	ldr	r1, [r7, #8]
 800f300:	6a38      	ldr	r0, [r7, #32]
 800f302:	f000 fdd3 	bl	800feac <xQueueReceive>
 800f306:	4603      	mov	r3, r0
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d00b      	beq.n	800f324 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f312:	f06f 0301 	mvn.w	r3, #1
 800f316:	627b      	str	r3, [r7, #36]	@ 0x24
 800f318:	e004      	b.n	800f324 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f31a:	f06f 0302 	mvn.w	r3, #2
 800f31e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f320:	e000      	b.n	800f324 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f322:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f326:	4618      	mov	r0, r3
 800f328:	3728      	adds	r7, #40	@ 0x28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	2000a2c0 	.word	0x2000a2c0
 800f334:	e000ed04 	.word	0xe000ed04

0800f338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	4a07      	ldr	r2, [pc, #28]	@ (800f364 <vApplicationGetIdleTaskMemory+0x2c>)
 800f348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	4a06      	ldr	r2, [pc, #24]	@ (800f368 <vApplicationGetIdleTaskMemory+0x30>)
 800f34e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f356:	601a      	str	r2, [r3, #0]
}
 800f358:	bf00      	nop
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	2000a2c4 	.word	0x2000a2c4
 800f368:	2000a36c 	.word	0x2000a36c

0800f36c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	4a07      	ldr	r2, [pc, #28]	@ (800f398 <vApplicationGetTimerTaskMemory+0x2c>)
 800f37c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	4a06      	ldr	r2, [pc, #24]	@ (800f39c <vApplicationGetTimerTaskMemory+0x30>)
 800f382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f38a:	601a      	str	r2, [r3, #0]
}
 800f38c:	bf00      	nop
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	2000a76c 	.word	0x2000a76c
 800f39c:	2000a814 	.word	0x2000a814

0800f3a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f103 0208 	add.w	r2, r3, #8
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f103 0208 	add.w	r2, r3, #8
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f103 0208 	add.w	r2, r3, #8
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3d4:	bf00      	nop
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3ee:	bf00      	nop
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b085      	sub	sp, #20
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	689a      	ldr	r2, [r3, #8]
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	683a      	ldr	r2, [r7, #0]
 800f41e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	601a      	str	r2, [r3, #0]
}
 800f436:	bf00      	nop
 800f438:	3714      	adds	r7, #20
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f442:	b480      	push	{r7}
 800f444:	b085      	sub	sp, #20
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f458:	d103      	bne.n	800f462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	60fb      	str	r3, [r7, #12]
 800f460:	e00c      	b.n	800f47c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	3308      	adds	r3, #8
 800f466:	60fb      	str	r3, [r7, #12]
 800f468:	e002      	b.n	800f470 <vListInsert+0x2e>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	60fb      	str	r3, [r7, #12]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	68ba      	ldr	r2, [r7, #8]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d2f6      	bcs.n	800f46a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	685a      	ldr	r2, [r3, #4]
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	1c5a      	adds	r2, r3, #1
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	601a      	str	r2, [r3, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	3714      	adds	r7, #20
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	6892      	ldr	r2, [r2, #8]
 800f4ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	6852      	ldr	r2, [r2, #4]
 800f4d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d103      	bne.n	800f4e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	689a      	ldr	r2, [r3, #8]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1e5a      	subs	r2, r3, #1
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10d      	bne.n	800f538 <xQueueGenericReset+0x30>
	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f520:	b672      	cpsid	i
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	b662      	cpsie	i
 800f530:	60bb      	str	r3, [r7, #8]
}
 800f532:	bf00      	nop
 800f534:	bf00      	nop
 800f536:	e7fd      	b.n	800f534 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f538:	f002 ff48 	bl	80123cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f544:	68f9      	ldr	r1, [r7, #12]
 800f546:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f548:	fb01 f303 	mul.w	r3, r1, r3
 800f54c:	441a      	add	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f568:	3b01      	subs	r3, #1
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f56e:	fb01 f303 	mul.w	r3, r1, r3
 800f572:	441a      	add	r2, r3
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	22ff      	movs	r2, #255	@ 0xff
 800f57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	22ff      	movs	r2, #255	@ 0xff
 800f584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d114      	bne.n	800f5b8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d01a      	beq.n	800f5cc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3310      	adds	r3, #16
 800f59a:	4618      	mov	r0, r3
 800f59c:	f001 fdc4 	bl	8011128 <xTaskRemoveFromEventList>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d012      	beq.n	800f5cc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <xQueueGenericReset+0xd4>)
 800f5a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ac:	601a      	str	r2, [r3, #0]
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	e009      	b.n	800f5cc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3310      	adds	r3, #16
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff feef 	bl	800f3a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	3324      	adds	r3, #36	@ 0x24
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff feea 	bl	800f3a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f5cc:	f002 ff34 	bl	8012438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f5d0:	2301      	movs	r3, #1
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	e000ed04 	.word	0xe000ed04

0800f5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b08e      	sub	sp, #56	@ 0x38
 800f5e4:	af02      	add	r7, sp, #8
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10d      	bne.n	800f610 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f8:	b672      	cpsid	i
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	b662      	cpsie	i
 800f608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f60a:	bf00      	nop
 800f60c:	bf00      	nop
 800f60e:	e7fd      	b.n	800f60c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d10d      	bne.n	800f632 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f61a:	b672      	cpsid	i
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	b662      	cpsie	i
 800f62a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	e7fd      	b.n	800f62e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <xQueueGenericCreateStatic+0x5e>
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d001      	beq.n	800f642 <xQueueGenericCreateStatic+0x62>
 800f63e:	2301      	movs	r3, #1
 800f640:	e000      	b.n	800f644 <xQueueGenericCreateStatic+0x64>
 800f642:	2300      	movs	r3, #0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10d      	bne.n	800f664 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64c:	b672      	cpsid	i
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	b662      	cpsie	i
 800f65c:	623b      	str	r3, [r7, #32]
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	e7fd      	b.n	800f660 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d102      	bne.n	800f670 <xQueueGenericCreateStatic+0x90>
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d101      	bne.n	800f674 <xQueueGenericCreateStatic+0x94>
 800f670:	2301      	movs	r3, #1
 800f672:	e000      	b.n	800f676 <xQueueGenericCreateStatic+0x96>
 800f674:	2300      	movs	r3, #0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d10d      	bne.n	800f696 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67e:	b672      	cpsid	i
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	b662      	cpsie	i
 800f68e:	61fb      	str	r3, [r7, #28]
}
 800f690:	bf00      	nop
 800f692:	bf00      	nop
 800f694:	e7fd      	b.n	800f692 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f696:	2350      	movs	r3, #80	@ 0x50
 800f698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	2b50      	cmp	r3, #80	@ 0x50
 800f69e:	d00d      	beq.n	800f6bc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a4:	b672      	cpsid	i
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	b662      	cpsie	i
 800f6b4:	61bb      	str	r3, [r7, #24]
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	e7fd      	b.n	800f6b8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f6bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00d      	beq.n	800f6e4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f6d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f000 f848 	bl	800f774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3730      	adds	r7, #48	@ 0x30
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b08a      	sub	sp, #40	@ 0x28
 800f6f2:	af02      	add	r7, sp, #8
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	4613      	mov	r3, r2
 800f6fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10d      	bne.n	800f71e <xQueueGenericCreate+0x30>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f706:	b672      	cpsid	i
 800f708:	f383 8811 	msr	BASEPRI, r3
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	b662      	cpsie	i
 800f716:	613b      	str	r3, [r7, #16]
}
 800f718:	bf00      	nop
 800f71a:	bf00      	nop
 800f71c:	e7fd      	b.n	800f71a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f724:	2300      	movs	r3, #0
 800f726:	61fb      	str	r3, [r7, #28]
 800f728:	e004      	b.n	800f734 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	fb02 f303 	mul.w	r3, r2, r3
 800f732:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	3350      	adds	r3, #80	@ 0x50
 800f738:	4618      	mov	r0, r3
 800f73a:	f002 ff75 	bl	8012628 <pvPortMalloc>
 800f73e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d011      	beq.n	800f76a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	3350      	adds	r3, #80	@ 0x50
 800f74e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f758:	79fa      	ldrb	r2, [r7, #7]
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4613      	mov	r3, r2
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	68b9      	ldr	r1, [r7, #8]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 f805 	bl	800f774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f76a:	69bb      	ldr	r3, [r7, #24]
	}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3720      	adds	r7, #32
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
 800f780:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d103      	bne.n	800f790 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	69ba      	ldr	r2, [r7, #24]
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	e002      	b.n	800f796 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	69b8      	ldr	r0, [r7, #24]
 800f7a6:	f7ff feaf 	bl	800f508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	78fa      	ldrb	r2, [r7, #3]
 800f7ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f7b2:	bf00      	nop
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00e      	beq.n	800f7e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f7da:	2300      	movs	r3, #0
 800f7dc:	2200      	movs	r2, #0
 800f7de:	2100      	movs	r1, #0
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 f91d 	bl	800fa20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f7e6:	bf00      	nop
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b086      	sub	sp, #24
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	617b      	str	r3, [r7, #20]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	461a      	mov	r2, r3
 800f804:	6939      	ldr	r1, [r7, #16]
 800f806:	6978      	ldr	r0, [r7, #20]
 800f808:	f7ff ff71 	bl	800f6ee <xQueueGenericCreate>
 800f80c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7ff ffd3 	bl	800f7ba <prvInitialiseMutex>

		return xNewQueue;
 800f814:	68fb      	ldr	r3, [r7, #12]
	}
 800f816:	4618      	mov	r0, r3
 800f818:	3718      	adds	r7, #24
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f81e:	b580      	push	{r7, lr}
 800f820:	b088      	sub	sp, #32
 800f822:	af02      	add	r7, sp, #8
 800f824:	4603      	mov	r3, r0
 800f826:	6039      	str	r1, [r7, #0]
 800f828:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f82a:	2301      	movs	r3, #1
 800f82c:	617b      	str	r3, [r7, #20]
 800f82e:	2300      	movs	r3, #0
 800f830:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f832:	79fb      	ldrb	r3, [r7, #7]
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2200      	movs	r2, #0
 800f83a:	6939      	ldr	r1, [r7, #16]
 800f83c:	6978      	ldr	r0, [r7, #20]
 800f83e:	f7ff fecf 	bl	800f5e0 <xQueueGenericCreateStatic>
 800f842:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f7ff ffb8 	bl	800f7ba <prvInitialiseMutex>

		return xNewQueue;
 800f84a:	68fb      	ldr	r3, [r7, #12]
	}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f854:	b590      	push	{r4, r7, lr}
 800f856:	b087      	sub	sp, #28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10d      	bne.n	800f882 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800f866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f86a:	b672      	cpsid	i
 800f86c:	f383 8811 	msr	BASEPRI, r3
 800f870:	f3bf 8f6f 	isb	sy
 800f874:	f3bf 8f4f 	dsb	sy
 800f878:	b662      	cpsie	i
 800f87a:	60fb      	str	r3, [r7, #12]
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	e7fd      	b.n	800f87e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	689c      	ldr	r4, [r3, #8]
 800f886:	f001 fe1d 	bl	80114c4 <xTaskGetCurrentTaskHandle>
 800f88a:	4603      	mov	r3, r0
 800f88c:	429c      	cmp	r4, r3
 800f88e:	d111      	bne.n	800f8b4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	1e5a      	subs	r2, r3, #1
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d105      	bne.n	800f8ae <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	6938      	ldr	r0, [r7, #16]
 800f8aa:	f000 f8b9 	bl	800fa20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	e001      	b.n	800f8b8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f8b8:	697b      	ldr	r3, [r7, #20]
	}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	371c      	adds	r7, #28
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd90      	pop	{r4, r7, pc}

0800f8c2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f8c2:	b590      	push	{r4, r7, lr}
 800f8c4:	b087      	sub	sp, #28
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10d      	bne.n	800f8f2 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	b672      	cpsid	i
 800f8dc:	f383 8811 	msr	BASEPRI, r3
 800f8e0:	f3bf 8f6f 	isb	sy
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	b662      	cpsie	i
 800f8ea:	60fb      	str	r3, [r7, #12]
}
 800f8ec:	bf00      	nop
 800f8ee:	bf00      	nop
 800f8f0:	e7fd      	b.n	800f8ee <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	689c      	ldr	r4, [r3, #8]
 800f8f6:	f001 fde5 	bl	80114c4 <xTaskGetCurrentTaskHandle>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	429c      	cmp	r4, r3
 800f8fe:	d107      	bne.n	800f910 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f90a:	2301      	movs	r3, #1
 800f90c:	617b      	str	r3, [r7, #20]
 800f90e:	e00c      	b.n	800f92a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f000 fbb2 	bl	801007c <xQueueSemaphoreTake>
 800f918:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d004      	beq.n	800f92a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f92a:	697b      	ldr	r3, [r7, #20]
	}
 800f92c:	4618      	mov	r0, r3
 800f92e:	371c      	adds	r7, #28
 800f930:	46bd      	mov	sp, r7
 800f932:	bd90      	pop	{r4, r7, pc}

0800f934 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f934:	b580      	push	{r7, lr}
 800f936:	b08a      	sub	sp, #40	@ 0x28
 800f938:	af02      	add	r7, sp, #8
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10d      	bne.n	800f962 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800f946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94a:	b672      	cpsid	i
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	b662      	cpsie	i
 800f95a:	61bb      	str	r3, [r7, #24]
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	e7fd      	b.n	800f95e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f962:	68ba      	ldr	r2, [r7, #8]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	429a      	cmp	r2, r3
 800f968:	d90d      	bls.n	800f986 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800f96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f96e:	b672      	cpsid	i
 800f970:	f383 8811 	msr	BASEPRI, r3
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	b662      	cpsie	i
 800f97e:	617b      	str	r3, [r7, #20]
}
 800f980:	bf00      	nop
 800f982:	bf00      	nop
 800f984:	e7fd      	b.n	800f982 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f986:	2302      	movs	r3, #2
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	2100      	movs	r1, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f7ff fe25 	bl	800f5e0 <xQueueGenericCreateStatic>
 800f996:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	68ba      	ldr	r2, [r7, #8]
 800f9a2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f9a4:	69fb      	ldr	r3, [r7, #28]
	}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3720      	adds	r7, #32
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b086      	sub	sp, #24
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d10d      	bne.n	800f9da <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800f9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c2:	b672      	cpsid	i
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	b662      	cpsie	i
 800f9d2:	613b      	str	r3, [r7, #16]
}
 800f9d4:	bf00      	nop
 800f9d6:	bf00      	nop
 800f9d8:	e7fd      	b.n	800f9d6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f9da:	683a      	ldr	r2, [r7, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d90d      	bls.n	800f9fe <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800f9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e6:	b672      	cpsid	i
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	b662      	cpsie	i
 800f9f6:	60fb      	str	r3, [r7, #12]
}
 800f9f8:	bf00      	nop
 800f9fa:	bf00      	nop
 800f9fc:	e7fd      	b.n	800f9fa <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f9fe:	2202      	movs	r2, #2
 800fa00:	2100      	movs	r1, #0
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7ff fe73 	bl	800f6ee <xQueueGenericCreate>
 800fa08:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fa16:	697b      	ldr	r3, [r7, #20]
	}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3718      	adds	r7, #24
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b08e      	sub	sp, #56	@ 0x38
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10d      	bne.n	800fa58 <xQueueGenericSend+0x38>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa40:	b672      	cpsid	i
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	b662      	cpsie	i
 800fa50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	e7fd      	b.n	800fa54 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d103      	bne.n	800fa66 <xQueueGenericSend+0x46>
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <xQueueGenericSend+0x4a>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e000      	b.n	800fa6c <xQueueGenericSend+0x4c>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10d      	bne.n	800fa8c <xQueueGenericSend+0x6c>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	b672      	cpsid	i
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	b662      	cpsie	i
 800fa84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa86:	bf00      	nop
 800fa88:	bf00      	nop
 800fa8a:	e7fd      	b.n	800fa88 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d103      	bne.n	800fa9a <xQueueGenericSend+0x7a>
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d101      	bne.n	800fa9e <xQueueGenericSend+0x7e>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e000      	b.n	800faa0 <xQueueGenericSend+0x80>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10d      	bne.n	800fac0 <xQueueGenericSend+0xa0>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa8:	b672      	cpsid	i
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	b662      	cpsie	i
 800fab8:	623b      	str	r3, [r7, #32]
}
 800faba:	bf00      	nop
 800fabc:	bf00      	nop
 800fabe:	e7fd      	b.n	800fabc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fac0:	f001 fd10 	bl	80114e4 <xTaskGetSchedulerState>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d102      	bne.n	800fad0 <xQueueGenericSend+0xb0>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <xQueueGenericSend+0xb4>
 800fad0:	2301      	movs	r3, #1
 800fad2:	e000      	b.n	800fad6 <xQueueGenericSend+0xb6>
 800fad4:	2300      	movs	r3, #0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d10d      	bne.n	800faf6 <xQueueGenericSend+0xd6>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fade:	b672      	cpsid	i
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	b662      	cpsie	i
 800faee:	61fb      	str	r3, [r7, #28]
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	e7fd      	b.n	800faf2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faf6:	f002 fc69 	bl	80123cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d302      	bcc.n	800fb0c <xQueueGenericSend+0xec>
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	2b02      	cmp	r3, #2
 800fb0a:	d129      	bne.n	800fb60 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb0c:	683a      	ldr	r2, [r7, #0]
 800fb0e:	68b9      	ldr	r1, [r7, #8]
 800fb10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb12:	f000 fc91 	bl	8010438 <prvCopyDataToQueue>
 800fb16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d010      	beq.n	800fb42 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb22:	3324      	adds	r3, #36	@ 0x24
 800fb24:	4618      	mov	r0, r3
 800fb26:	f001 faff 	bl	8011128 <xTaskRemoveFromEventList>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d013      	beq.n	800fb58 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb30:	4b3f      	ldr	r3, [pc, #252]	@ (800fc30 <xQueueGenericSend+0x210>)
 800fb32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb36:	601a      	str	r2, [r3, #0]
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	e00a      	b.n	800fb58 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d007      	beq.n	800fb58 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb48:	4b39      	ldr	r3, [pc, #228]	@ (800fc30 <xQueueGenericSend+0x210>)
 800fb4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb58:	f002 fc6e 	bl	8012438 <vPortExitCritical>
				return pdPASS;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e063      	b.n	800fc28 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d103      	bne.n	800fb6e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb66:	f002 fc67 	bl	8012438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e05c      	b.n	800fc28 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d106      	bne.n	800fb82 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb74:	f107 0314 	add.w	r3, r7, #20
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f001 fb3b 	bl	80111f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb82:	f002 fc59 	bl	8012438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb86:	f001 f861 	bl	8010c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb8a:	f002 fc1f 	bl	80123cc <vPortEnterCritical>
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb94:	b25b      	sxtb	r3, r3
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9a:	d103      	bne.n	800fba4 <xQueueGenericSend+0x184>
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbaa:	b25b      	sxtb	r3, r3
 800fbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb0:	d103      	bne.n	800fbba <xQueueGenericSend+0x19a>
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbba:	f002 fc3d 	bl	8012438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbbe:	1d3a      	adds	r2, r7, #4
 800fbc0:	f107 0314 	add.w	r3, r7, #20
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f001 fb2a 	bl	8011220 <xTaskCheckForTimeOut>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d124      	bne.n	800fc1c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fbd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbd4:	f000 fd28 	bl	8010628 <prvIsQueueFull>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d018      	beq.n	800fc10 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe0:	3310      	adds	r3, #16
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f001 fa48 	bl	801107c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fbec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbee:	f000 fcb3 	bl	8010558 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fbf2:	f001 f839 	bl	8010c68 <xTaskResumeAll>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f47f af7c 	bne.w	800faf6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <xQueueGenericSend+0x210>)
 800fc00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc04:	601a      	str	r2, [r3, #0]
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	e772      	b.n	800faf6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc12:	f000 fca1 	bl	8010558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc16:	f001 f827 	bl	8010c68 <xTaskResumeAll>
 800fc1a:	e76c      	b.n	800faf6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc1e:	f000 fc9b 	bl	8010558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc22:	f001 f821 	bl	8010c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3738      	adds	r7, #56	@ 0x38
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	e000ed04 	.word	0xe000ed04

0800fc34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b08e      	sub	sp, #56	@ 0x38
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
 800fc40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10d      	bne.n	800fc68 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800fc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc50:	b672      	cpsid	i
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	b662      	cpsie	i
 800fc60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	e7fd      	b.n	800fc64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d103      	bne.n	800fc76 <xQueueGenericSendFromISR+0x42>
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d101      	bne.n	800fc7a <xQueueGenericSendFromISR+0x46>
 800fc76:	2301      	movs	r3, #1
 800fc78:	e000      	b.n	800fc7c <xQueueGenericSendFromISR+0x48>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10d      	bne.n	800fc9c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc84:	b672      	cpsid	i
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	b662      	cpsie	i
 800fc94:	623b      	str	r3, [r7, #32]
}
 800fc96:	bf00      	nop
 800fc98:	bf00      	nop
 800fc9a:	e7fd      	b.n	800fc98 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d103      	bne.n	800fcaa <xQueueGenericSendFromISR+0x76>
 800fca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <xQueueGenericSendFromISR+0x7a>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e000      	b.n	800fcb0 <xQueueGenericSendFromISR+0x7c>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10d      	bne.n	800fcd0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb8:	b672      	cpsid	i
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	b662      	cpsie	i
 800fcc8:	61fb      	str	r3, [r7, #28]
}
 800fcca:	bf00      	nop
 800fccc:	bf00      	nop
 800fcce:	e7fd      	b.n	800fccc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcd0:	f002 fc64 	bl	801259c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fcd4:	f3ef 8211 	mrs	r2, BASEPRI
 800fcd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcdc:	b672      	cpsid	i
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	b662      	cpsie	i
 800fcec:	61ba      	str	r2, [r7, #24]
 800fcee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fcf0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d302      	bcc.n	800fd06 <xQueueGenericSendFromISR+0xd2>
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d12c      	bne.n	800fd60 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	68b9      	ldr	r1, [r7, #8]
 800fd14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd16:	f000 fb8f 	bl	8010438 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd1a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd22:	d112      	bne.n	800fd4a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d016      	beq.n	800fd5a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2e:	3324      	adds	r3, #36	@ 0x24
 800fd30:	4618      	mov	r0, r3
 800fd32:	f001 f9f9 	bl	8011128 <xTaskRemoveFromEventList>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00e      	beq.n	800fd5a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00b      	beq.n	800fd5a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2201      	movs	r2, #1
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	e007      	b.n	800fd5a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fd4e:	3301      	adds	r3, #1
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	b25a      	sxtb	r2, r3
 800fd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800fd5e:	e001      	b.n	800fd64 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd60:	2300      	movs	r3, #0
 800fd62:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd66:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fd6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3738      	adds	r7, #56	@ 0x38
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b08e      	sub	sp, #56	@ 0x38
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10d      	bne.n	800fdaa <xQueueGiveFromISR+0x30>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	b672      	cpsid	i
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	b662      	cpsie	i
 800fda2:	623b      	str	r3, [r7, #32]
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	e7fd      	b.n	800fda6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00d      	beq.n	800fdce <xQueueGiveFromISR+0x54>
	__asm volatile
 800fdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb6:	b672      	cpsid	i
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	b662      	cpsie	i
 800fdc6:	61fb      	str	r3, [r7, #28]
}
 800fdc8:	bf00      	nop
 800fdca:	bf00      	nop
 800fdcc:	e7fd      	b.n	800fdca <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d103      	bne.n	800fdde <xQueueGiveFromISR+0x64>
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d101      	bne.n	800fde2 <xQueueGiveFromISR+0x68>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e000      	b.n	800fde4 <xQueueGiveFromISR+0x6a>
 800fde2:	2300      	movs	r3, #0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d10d      	bne.n	800fe04 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdec:	b672      	cpsid	i
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	b662      	cpsie	i
 800fdfc:	61bb      	str	r3, [r7, #24]
}
 800fdfe:	bf00      	nop
 800fe00:	bf00      	nop
 800fe02:	e7fd      	b.n	800fe00 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe04:	f002 fbca 	bl	801259c <vPortValidateInterruptPriority>
	__asm volatile
 800fe08:	f3ef 8211 	mrs	r2, BASEPRI
 800fe0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe10:	b672      	cpsid	i
 800fe12:	f383 8811 	msr	BASEPRI, r3
 800fe16:	f3bf 8f6f 	isb	sy
 800fe1a:	f3bf 8f4f 	dsb	sy
 800fe1e:	b662      	cpsie	i
 800fe20:	617a      	str	r2, [r7, #20]
 800fe22:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fe24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe2c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d22b      	bcs.n	800fe90 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fe3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe48:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fe4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe52:	d112      	bne.n	800fe7a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d016      	beq.n	800fe8a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5e:	3324      	adds	r3, #36	@ 0x24
 800fe60:	4618      	mov	r0, r3
 800fe62:	f001 f961 	bl	8011128 <xTaskRemoveFromEventList>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00e      	beq.n	800fe8a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00b      	beq.n	800fe8a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	2201      	movs	r2, #1
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	e007      	b.n	800fe8a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe7e:	3301      	adds	r3, #1
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	b25a      	sxtb	r2, r3
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe8e:	e001      	b.n	800fe94 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe90:	2300      	movs	r3, #0
 800fe92:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f383 8811 	msr	BASEPRI, r3
}
 800fe9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3738      	adds	r7, #56	@ 0x38
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
	...

0800feac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b08c      	sub	sp, #48	@ 0x30
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800feb8:	2300      	movs	r3, #0
 800feba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d10d      	bne.n	800fee2 <xQueueReceive+0x36>
	__asm volatile
 800fec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feca:	b672      	cpsid	i
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	b662      	cpsie	i
 800feda:	623b      	str	r3, [r7, #32]
}
 800fedc:	bf00      	nop
 800fede:	bf00      	nop
 800fee0:	e7fd      	b.n	800fede <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d103      	bne.n	800fef0 <xQueueReceive+0x44>
 800fee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <xQueueReceive+0x48>
 800fef0:	2301      	movs	r3, #1
 800fef2:	e000      	b.n	800fef6 <xQueueReceive+0x4a>
 800fef4:	2300      	movs	r3, #0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d10d      	bne.n	800ff16 <xQueueReceive+0x6a>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefe:	b672      	cpsid	i
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	b662      	cpsie	i
 800ff0e:	61fb      	str	r3, [r7, #28]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff16:	f001 fae5 	bl	80114e4 <xTaskGetSchedulerState>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d102      	bne.n	800ff26 <xQueueReceive+0x7a>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d101      	bne.n	800ff2a <xQueueReceive+0x7e>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <xQueueReceive+0x80>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10d      	bne.n	800ff4c <xQueueReceive+0xa0>
	__asm volatile
 800ff30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff34:	b672      	cpsid	i
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	b662      	cpsie	i
 800ff44:	61bb      	str	r3, [r7, #24]
}
 800ff46:	bf00      	nop
 800ff48:	bf00      	nop
 800ff4a:	e7fd      	b.n	800ff48 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff4c:	f002 fa3e 	bl	80123cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d01f      	beq.n	800ff9c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff5c:	68b9      	ldr	r1, [r7, #8]
 800ff5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff60:	f000 fad4 	bl	801050c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff66:	1e5a      	subs	r2, r3, #1
 800ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6e:	691b      	ldr	r3, [r3, #16]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00f      	beq.n	800ff94 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff76:	3310      	adds	r3, #16
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f001 f8d5 	bl	8011128 <xTaskRemoveFromEventList>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d007      	beq.n	800ff94 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff84:	4b3c      	ldr	r3, [pc, #240]	@ (8010078 <xQueueReceive+0x1cc>)
 800ff86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff94:	f002 fa50 	bl	8012438 <vPortExitCritical>
				return pdPASS;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e069      	b.n	8010070 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d103      	bne.n	800ffaa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ffa2:	f002 fa49 	bl	8012438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e062      	b.n	8010070 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ffaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d106      	bne.n	800ffbe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ffb0:	f107 0310 	add.w	r3, r7, #16
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f001 f91d 	bl	80111f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ffbe:	f002 fa3b 	bl	8012438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ffc2:	f000 fe43 	bl	8010c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffc6:	f002 fa01 	bl	80123cc <vPortEnterCritical>
 800ffca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ffd0:	b25b      	sxtb	r3, r3
 800ffd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd6:	d103      	bne.n	800ffe0 <xQueueReceive+0x134>
 800ffd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffe6:	b25b      	sxtb	r3, r3
 800ffe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffec:	d103      	bne.n	800fff6 <xQueueReceive+0x14a>
 800ffee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fff6:	f002 fa1f 	bl	8012438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fffa:	1d3a      	adds	r2, r7, #4
 800fffc:	f107 0310 	add.w	r3, r7, #16
 8010000:	4611      	mov	r1, r2
 8010002:	4618      	mov	r0, r3
 8010004:	f001 f90c 	bl	8011220 <xTaskCheckForTimeOut>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d123      	bne.n	8010056 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801000e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010010:	f000 faf4 	bl	80105fc <prvIsQueueEmpty>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d017      	beq.n	801004a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801001a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001c:	3324      	adds	r3, #36	@ 0x24
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	4611      	mov	r1, r2
 8010022:	4618      	mov	r0, r3
 8010024:	f001 f82a 	bl	801107c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801002a:	f000 fa95 	bl	8010558 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801002e:	f000 fe1b 	bl	8010c68 <xTaskResumeAll>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d189      	bne.n	800ff4c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8010038:	4b0f      	ldr	r3, [pc, #60]	@ (8010078 <xQueueReceive+0x1cc>)
 801003a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801003e:	601a      	str	r2, [r3, #0]
 8010040:	f3bf 8f4f 	dsb	sy
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	e780      	b.n	800ff4c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801004a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801004c:	f000 fa84 	bl	8010558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010050:	f000 fe0a 	bl	8010c68 <xTaskResumeAll>
 8010054:	e77a      	b.n	800ff4c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010058:	f000 fa7e 	bl	8010558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801005c:	f000 fe04 	bl	8010c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010062:	f000 facb 	bl	80105fc <prvIsQueueEmpty>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	f43f af6f 	beq.w	800ff4c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801006e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010070:	4618      	mov	r0, r3
 8010072:	3730      	adds	r7, #48	@ 0x30
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	e000ed04 	.word	0xe000ed04

0801007c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08e      	sub	sp, #56	@ 0x38
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010086:	2300      	movs	r3, #0
 8010088:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801008e:	2300      	movs	r3, #0
 8010090:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010094:	2b00      	cmp	r3, #0
 8010096:	d10d      	bne.n	80100b4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8010098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009c:	b672      	cpsid	i
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	b662      	cpsie	i
 80100ac:	623b      	str	r3, [r7, #32]
}
 80100ae:	bf00      	nop
 80100b0:	bf00      	nop
 80100b2:	e7fd      	b.n	80100b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80100b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00d      	beq.n	80100d8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80100bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c0:	b672      	cpsid	i
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	b662      	cpsie	i
 80100d0:	61fb      	str	r3, [r7, #28]
}
 80100d2:	bf00      	nop
 80100d4:	bf00      	nop
 80100d6:	e7fd      	b.n	80100d4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100d8:	f001 fa04 	bl	80114e4 <xTaskGetSchedulerState>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d102      	bne.n	80100e8 <xQueueSemaphoreTake+0x6c>
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d101      	bne.n	80100ec <xQueueSemaphoreTake+0x70>
 80100e8:	2301      	movs	r3, #1
 80100ea:	e000      	b.n	80100ee <xQueueSemaphoreTake+0x72>
 80100ec:	2300      	movs	r3, #0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10d      	bne.n	801010e <xQueueSemaphoreTake+0x92>
	__asm volatile
 80100f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f6:	b672      	cpsid	i
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	b662      	cpsie	i
 8010106:	61bb      	str	r3, [r7, #24]
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	e7fd      	b.n	801010a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801010e:	f002 f95d 	bl	80123cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010116:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801011a:	2b00      	cmp	r3, #0
 801011c:	d024      	beq.n	8010168 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801011e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010120:	1e5a      	subs	r2, r3, #1
 8010122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010124:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d104      	bne.n	8010138 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801012e:	f001 fb5b 	bl	80117e8 <pvTaskIncrementMutexHeldCount>
 8010132:	4602      	mov	r2, r0
 8010134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010136:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00f      	beq.n	8010160 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010142:	3310      	adds	r3, #16
 8010144:	4618      	mov	r0, r3
 8010146:	f000 ffef 	bl	8011128 <xTaskRemoveFromEventList>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d007      	beq.n	8010160 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010150:	4b55      	ldr	r3, [pc, #340]	@ (80102a8 <xQueueSemaphoreTake+0x22c>)
 8010152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	f3bf 8f4f 	dsb	sy
 801015c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010160:	f002 f96a 	bl	8012438 <vPortExitCritical>
				return pdPASS;
 8010164:	2301      	movs	r3, #1
 8010166:	e09a      	b.n	801029e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d114      	bne.n	8010198 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801016e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00d      	beq.n	8010190 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	b672      	cpsid	i
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	b662      	cpsie	i
 8010188:	617b      	str	r3, [r7, #20]
}
 801018a:	bf00      	nop
 801018c:	bf00      	nop
 801018e:	e7fd      	b.n	801018c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010190:	f002 f952 	bl	8012438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010194:	2300      	movs	r3, #0
 8010196:	e082      	b.n	801029e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801019a:	2b00      	cmp	r3, #0
 801019c:	d106      	bne.n	80101ac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801019e:	f107 030c 	add.w	r3, r7, #12
 80101a2:	4618      	mov	r0, r3
 80101a4:	f001 f826 	bl	80111f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101a8:	2301      	movs	r3, #1
 80101aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101ac:	f002 f944 	bl	8012438 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101b0:	f000 fd4c 	bl	8010c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101b4:	f002 f90a 	bl	80123cc <vPortEnterCritical>
 80101b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101be:	b25b      	sxtb	r3, r3
 80101c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c4:	d103      	bne.n	80101ce <xQueueSemaphoreTake+0x152>
 80101c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c8:	2200      	movs	r2, #0
 80101ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80101ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80101d4:	b25b      	sxtb	r3, r3
 80101d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101da:	d103      	bne.n	80101e4 <xQueueSemaphoreTake+0x168>
 80101dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80101e4:	f002 f928 	bl	8012438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101e8:	463a      	mov	r2, r7
 80101ea:	f107 030c 	add.w	r3, r7, #12
 80101ee:	4611      	mov	r1, r2
 80101f0:	4618      	mov	r0, r3
 80101f2:	f001 f815 	bl	8011220 <xTaskCheckForTimeOut>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d132      	bne.n	8010262 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101fe:	f000 f9fd 	bl	80105fc <prvIsQueueEmpty>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d026      	beq.n	8010256 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d109      	bne.n	8010224 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8010210:	f002 f8dc 	bl	80123cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	4618      	mov	r0, r3
 801021a:	f001 f981 	bl	8011520 <xTaskPriorityInherit>
 801021e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010220:	f002 f90a 	bl	8012438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010226:	3324      	adds	r3, #36	@ 0x24
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	4611      	mov	r1, r2
 801022c:	4618      	mov	r0, r3
 801022e:	f000 ff25 	bl	801107c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010234:	f000 f990 	bl	8010558 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010238:	f000 fd16 	bl	8010c68 <xTaskResumeAll>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	f47f af65 	bne.w	801010e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8010244:	4b18      	ldr	r3, [pc, #96]	@ (80102a8 <xQueueSemaphoreTake+0x22c>)
 8010246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	f3bf 8f6f 	isb	sy
 8010254:	e75b      	b.n	801010e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010256:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010258:	f000 f97e 	bl	8010558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801025c:	f000 fd04 	bl	8010c68 <xTaskResumeAll>
 8010260:	e755      	b.n	801010e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010262:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010264:	f000 f978 	bl	8010558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010268:	f000 fcfe 	bl	8010c68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801026c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801026e:	f000 f9c5 	bl	80105fc <prvIsQueueEmpty>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	f43f af4a 	beq.w	801010e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801027a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00d      	beq.n	801029c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010280:	f002 f8a4 	bl	80123cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010286:	f000 f8bf 	bl	8010408 <prvGetDisinheritPriorityAfterTimeout>
 801028a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801028c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010292:	4618      	mov	r0, r3
 8010294:	f001 fa20 	bl	80116d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010298:	f002 f8ce 	bl	8012438 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801029c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3738      	adds	r7, #56	@ 0x38
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	e000ed04 	.word	0xe000ed04

080102ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08e      	sub	sp, #56	@ 0x38
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80102bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10d      	bne.n	80102de <xQueueReceiveFromISR+0x32>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c6:	b672      	cpsid	i
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	b662      	cpsie	i
 80102d6:	623b      	str	r3, [r7, #32]
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	e7fd      	b.n	80102da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d103      	bne.n	80102ec <xQueueReceiveFromISR+0x40>
 80102e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <xQueueReceiveFromISR+0x44>
 80102ec:	2301      	movs	r3, #1
 80102ee:	e000      	b.n	80102f2 <xQueueReceiveFromISR+0x46>
 80102f0:	2300      	movs	r3, #0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10d      	bne.n	8010312 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fa:	b672      	cpsid	i
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	b662      	cpsie	i
 801030a:	61fb      	str	r3, [r7, #28]
}
 801030c:	bf00      	nop
 801030e:	bf00      	nop
 8010310:	e7fd      	b.n	801030e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010312:	f002 f943 	bl	801259c <vPortValidateInterruptPriority>
	__asm volatile
 8010316:	f3ef 8211 	mrs	r2, BASEPRI
 801031a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801031e:	b672      	cpsid	i
 8010320:	f383 8811 	msr	BASEPRI, r3
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	b662      	cpsie	i
 801032e:	61ba      	str	r2, [r7, #24]
 8010330:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010332:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010334:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033e:	2b00      	cmp	r3, #0
 8010340:	d02f      	beq.n	80103a2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801034c:	68b9      	ldr	r1, [r7, #8]
 801034e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010350:	f000 f8dc 	bl	801050c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010356:	1e5a      	subs	r2, r3, #1
 8010358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801035c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010364:	d112      	bne.n	801038c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d016      	beq.n	801039c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801036e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010370:	3310      	adds	r3, #16
 8010372:	4618      	mov	r0, r3
 8010374:	f000 fed8 	bl	8011128 <xTaskRemoveFromEventList>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00e      	beq.n	801039c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00b      	beq.n	801039c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2201      	movs	r2, #1
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e007      	b.n	801039c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801038c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010390:	3301      	adds	r3, #1
 8010392:	b2db      	uxtb	r3, r3
 8010394:	b25a      	sxtb	r2, r3
 8010396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801039c:	2301      	movs	r3, #1
 801039e:	637b      	str	r3, [r7, #52]	@ 0x34
 80103a0:	e001      	b.n	80103a6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80103a2:	2300      	movs	r3, #0
 80103a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80103a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	f383 8811 	msr	BASEPRI, r3
}
 80103b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80103b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3738      	adds	r7, #56	@ 0x38
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d10d      	bne.n	80103ea <vQueueDelete+0x2e>
	__asm volatile
 80103ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d2:	b672      	cpsid	i
 80103d4:	f383 8811 	msr	BASEPRI, r3
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	f3bf 8f4f 	dsb	sy
 80103e0:	b662      	cpsie	i
 80103e2:	60bb      	str	r3, [r7, #8]
}
 80103e4:	bf00      	nop
 80103e6:	bf00      	nop
 80103e8:	e7fd      	b.n	80103e6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f000 f95e 	bl	80106ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d102      	bne.n	8010400 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f002 f9e2 	bl	80127c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010400:	bf00      	nop
 8010402:	3710      	adds	r7, #16
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010414:	2b00      	cmp	r3, #0
 8010416:	d006      	beq.n	8010426 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	e001      	b.n	801042a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010426:	2300      	movs	r3, #0
 8010428:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801042a:	68fb      	ldr	r3, [r7, #12]
	}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010444:	2300      	movs	r3, #0
 8010446:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801044c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010452:	2b00      	cmp	r3, #0
 8010454:	d10d      	bne.n	8010472 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d14d      	bne.n	80104fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	4618      	mov	r0, r3
 8010464:	f001 f8c4 	bl	80115f0 <xTaskPriorityDisinherit>
 8010468:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	609a      	str	r2, [r3, #8]
 8010470:	e043      	b.n	80104fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d119      	bne.n	80104ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6858      	ldr	r0, [r3, #4]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010480:	461a      	mov	r2, r3
 8010482:	68b9      	ldr	r1, [r7, #8]
 8010484:	f00d ffcf 	bl	801e426 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	685a      	ldr	r2, [r3, #4]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010490:	441a      	add	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d32b      	bcc.n	80104fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	605a      	str	r2, [r3, #4]
 80104aa:	e026      	b.n	80104fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	68d8      	ldr	r0, [r3, #12]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104b4:	461a      	mov	r2, r3
 80104b6:	68b9      	ldr	r1, [r7, #8]
 80104b8:	f00d ffb5 	bl	801e426 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	68da      	ldr	r2, [r3, #12]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104c4:	425b      	negs	r3, r3
 80104c6:	441a      	add	r2, r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	68da      	ldr	r2, [r3, #12]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d207      	bcs.n	80104e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	689a      	ldr	r2, [r3, #8]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104e0:	425b      	negs	r3, r3
 80104e2:	441a      	add	r2, r3
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d105      	bne.n	80104fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d002      	beq.n	80104fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	1c5a      	adds	r2, r3, #1
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010502:	697b      	ldr	r3, [r7, #20]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801051a:	2b00      	cmp	r3, #0
 801051c:	d018      	beq.n	8010550 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	68da      	ldr	r2, [r3, #12]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010526:	441a      	add	r2, r3
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68da      	ldr	r2, [r3, #12]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	429a      	cmp	r2, r3
 8010536:	d303      	bcc.n	8010540 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	68d9      	ldr	r1, [r3, #12]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010548:	461a      	mov	r2, r3
 801054a:	6838      	ldr	r0, [r7, #0]
 801054c:	f00d ff6b 	bl	801e426 <memcpy>
	}
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010560:	f001 ff34 	bl	80123cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801056a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801056c:	e011      	b.n	8010592 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010572:	2b00      	cmp	r3, #0
 8010574:	d012      	beq.n	801059c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	3324      	adds	r3, #36	@ 0x24
 801057a:	4618      	mov	r0, r3
 801057c:	f000 fdd4 	bl	8011128 <xTaskRemoveFromEventList>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d001      	beq.n	801058a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010586:	f000 feb3 	bl	80112f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801058a:	7bfb      	ldrb	r3, [r7, #15]
 801058c:	3b01      	subs	r3, #1
 801058e:	b2db      	uxtb	r3, r3
 8010590:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010596:	2b00      	cmp	r3, #0
 8010598:	dce9      	bgt.n	801056e <prvUnlockQueue+0x16>
 801059a:	e000      	b.n	801059e <prvUnlockQueue+0x46>
					break;
 801059c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	22ff      	movs	r2, #255	@ 0xff
 80105a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80105a6:	f001 ff47 	bl	8012438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105aa:	f001 ff0f 	bl	80123cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80105b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105b6:	e011      	b.n	80105dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d012      	beq.n	80105e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	3310      	adds	r3, #16
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 fdaf 	bl	8011128 <xTaskRemoveFromEventList>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80105d0:	f000 fe8e 	bl	80112f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80105d4:	7bbb      	ldrb	r3, [r7, #14]
 80105d6:	3b01      	subs	r3, #1
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	dce9      	bgt.n	80105b8 <prvUnlockQueue+0x60>
 80105e4:	e000      	b.n	80105e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80105e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	22ff      	movs	r2, #255	@ 0xff
 80105ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80105f0:	f001 ff22 	bl	8012438 <vPortExitCritical>
}
 80105f4:	bf00      	nop
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010604:	f001 fee2 	bl	80123cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801060c:	2b00      	cmp	r3, #0
 801060e:	d102      	bne.n	8010616 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010610:	2301      	movs	r3, #1
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e001      	b.n	801061a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010616:	2300      	movs	r3, #0
 8010618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801061a:	f001 ff0d 	bl	8012438 <vPortExitCritical>

	return xReturn;
 801061e:	68fb      	ldr	r3, [r7, #12]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010630:	f001 fecc 	bl	80123cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801063c:	429a      	cmp	r2, r3
 801063e:	d102      	bne.n	8010646 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010640:	2301      	movs	r3, #1
 8010642:	60fb      	str	r3, [r7, #12]
 8010644:	e001      	b.n	801064a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010646:	2300      	movs	r3, #0
 8010648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801064a:	f001 fef5 	bl	8012438 <vPortExitCritical>

	return xReturn;
 801064e:	68fb      	ldr	r3, [r7, #12]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010662:	2300      	movs	r3, #0
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e014      	b.n	8010692 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010668:	4a0f      	ldr	r2, [pc, #60]	@ (80106a8 <vQueueAddToRegistry+0x50>)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10b      	bne.n	801068c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010674:	490c      	ldr	r1, [pc, #48]	@ (80106a8 <vQueueAddToRegistry+0x50>)
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	683a      	ldr	r2, [r7, #0]
 801067a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801067e:	4a0a      	ldr	r2, [pc, #40]	@ (80106a8 <vQueueAddToRegistry+0x50>)
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	4413      	add	r3, r2
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801068a:	e006      	b.n	801069a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3301      	adds	r3, #1
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2b07      	cmp	r3, #7
 8010696:	d9e7      	bls.n	8010668 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010698:	bf00      	nop
 801069a:	bf00      	nop
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	2000b014 	.word	0x2000b014

080106ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106b4:	2300      	movs	r3, #0
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	e016      	b.n	80106e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80106ba:	4a10      	ldr	r2, [pc, #64]	@ (80106fc <vQueueUnregisterQueue+0x50>)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	00db      	lsls	r3, r3, #3
 80106c0:	4413      	add	r3, r2
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d10b      	bne.n	80106e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80106ca:	4a0c      	ldr	r2, [pc, #48]	@ (80106fc <vQueueUnregisterQueue+0x50>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2100      	movs	r1, #0
 80106d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80106d4:	4a09      	ldr	r2, [pc, #36]	@ (80106fc <vQueueUnregisterQueue+0x50>)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	4413      	add	r3, r2
 80106dc:	2200      	movs	r2, #0
 80106de:	605a      	str	r2, [r3, #4]
				break;
 80106e0:	e006      	b.n	80106f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3301      	adds	r3, #1
 80106e6:	60fb      	str	r3, [r7, #12]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b07      	cmp	r3, #7
 80106ec:	d9e5      	bls.n	80106ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80106ee:	bf00      	nop
 80106f0:	bf00      	nop
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	2000b014 	.word	0x2000b014

08010700 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010710:	f001 fe5c 	bl	80123cc <vPortEnterCritical>
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801071a:	b25b      	sxtb	r3, r3
 801071c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010720:	d103      	bne.n	801072a <vQueueWaitForMessageRestricted+0x2a>
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010730:	b25b      	sxtb	r3, r3
 8010732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010736:	d103      	bne.n	8010740 <vQueueWaitForMessageRestricted+0x40>
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010740:	f001 fe7a 	bl	8012438 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	3324      	adds	r3, #36	@ 0x24
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	68b9      	ldr	r1, [r7, #8]
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fcb9 	bl	80110cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801075a:	6978      	ldr	r0, [r7, #20]
 801075c:	f7ff fefc 	bl	8010558 <prvUnlockQueue>
	}
 8010760:	bf00      	nop
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08e      	sub	sp, #56	@ 0x38
 801076c:	af04      	add	r7, sp, #16
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10d      	bne.n	8010798 <xTaskCreateStatic+0x30>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010780:	b672      	cpsid	i
 8010782:	f383 8811 	msr	BASEPRI, r3
 8010786:	f3bf 8f6f 	isb	sy
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	b662      	cpsie	i
 8010790:	623b      	str	r3, [r7, #32]
}
 8010792:	bf00      	nop
 8010794:	bf00      	nop
 8010796:	e7fd      	b.n	8010794 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10d      	bne.n	80107ba <xTaskCreateStatic+0x52>
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a2:	b672      	cpsid	i
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	b662      	cpsie	i
 80107b2:	61fb      	str	r3, [r7, #28]
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop
 80107b8:	e7fd      	b.n	80107b6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80107ba:	23a8      	movs	r3, #168	@ 0xa8
 80107bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80107c2:	d00d      	beq.n	80107e0 <xTaskCreateStatic+0x78>
	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c8:	b672      	cpsid	i
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	b662      	cpsie	i
 80107d8:	61bb      	str	r3, [r7, #24]
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	e7fd      	b.n	80107dc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80107e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80107e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01e      	beq.n	8010826 <xTaskCreateStatic+0xbe>
 80107e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d01b      	beq.n	8010826 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80107f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80107f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107fa:	2202      	movs	r2, #2
 80107fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010800:	2300      	movs	r3, #0
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010806:	9302      	str	r3, [sp, #8]
 8010808:	f107 0314 	add.w	r3, r7, #20
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010810:	9300      	str	r3, [sp, #0]
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	68b9      	ldr	r1, [r7, #8]
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f000 f851 	bl	80108c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801081e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010820:	f000 f8f8 	bl	8010a14 <prvAddNewTaskToReadyList>
 8010824:	e001      	b.n	801082a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8010826:	2300      	movs	r3, #0
 8010828:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801082a:	697b      	ldr	r3, [r7, #20]
	}
 801082c:	4618      	mov	r0, r3
 801082e:	3728      	adds	r7, #40	@ 0x28
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08c      	sub	sp, #48	@ 0x30
 8010838:	af04      	add	r7, sp, #16
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010844:	88fb      	ldrh	r3, [r7, #6]
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	4618      	mov	r0, r3
 801084a:	f001 feed 	bl	8012628 <pvPortMalloc>
 801084e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00e      	beq.n	8010874 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010856:	20a8      	movs	r0, #168	@ 0xa8
 8010858:	f001 fee6 	bl	8012628 <pvPortMalloc>
 801085c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d003      	beq.n	801086c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	697a      	ldr	r2, [r7, #20]
 8010868:	631a      	str	r2, [r3, #48]	@ 0x30
 801086a:	e005      	b.n	8010878 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801086c:	6978      	ldr	r0, [r7, #20]
 801086e:	f001 ffa9 	bl	80127c4 <vPortFree>
 8010872:	e001      	b.n	8010878 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010874:	2300      	movs	r3, #0
 8010876:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d017      	beq.n	80108ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	2200      	movs	r2, #0
 8010882:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010886:	88fa      	ldrh	r2, [r7, #6]
 8010888:	2300      	movs	r3, #0
 801088a:	9303      	str	r3, [sp, #12]
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	9302      	str	r3, [sp, #8]
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	9301      	str	r3, [sp, #4]
 8010894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	68b9      	ldr	r1, [r7, #8]
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f80f 	bl	80108c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80108a2:	69f8      	ldr	r0, [r7, #28]
 80108a4:	f000 f8b6 	bl	8010a14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80108a8:	2301      	movs	r3, #1
 80108aa:	61bb      	str	r3, [r7, #24]
 80108ac:	e002      	b.n	80108b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80108ae:	f04f 33ff 	mov.w	r3, #4294967295
 80108b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80108b4:	69bb      	ldr	r3, [r7, #24]
	}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3720      	adds	r7, #32
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
	...

080108c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80108ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	461a      	mov	r2, r3
 80108d8:	21a5      	movs	r1, #165	@ 0xa5
 80108da:	f00d fcd1 	bl	801e280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80108de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108e2:	6879      	ldr	r1, [r7, #4]
 80108e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80108e8:	440b      	add	r3, r1
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4413      	add	r3, r2
 80108ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	f023 0307 	bic.w	r3, r3, #7
 80108f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00d      	beq.n	801091e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8010902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010906:	b672      	cpsid	i
 8010908:	f383 8811 	msr	BASEPRI, r3
 801090c:	f3bf 8f6f 	isb	sy
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	b662      	cpsie	i
 8010916:	617b      	str	r3, [r7, #20]
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	e7fd      	b.n	801091a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01f      	beq.n	8010964 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010924:	2300      	movs	r3, #0
 8010926:	61fb      	str	r3, [r7, #28]
 8010928:	e012      	b.n	8010950 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801092a:	68ba      	ldr	r2, [r7, #8]
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	4413      	add	r3, r2
 8010930:	7819      	ldrb	r1, [r3, #0]
 8010932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	4413      	add	r3, r2
 8010938:	3334      	adds	r3, #52	@ 0x34
 801093a:	460a      	mov	r2, r1
 801093c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	4413      	add	r3, r2
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d006      	beq.n	8010958 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	3301      	adds	r3, #1
 801094e:	61fb      	str	r3, [r7, #28]
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	2b0f      	cmp	r3, #15
 8010954:	d9e9      	bls.n	801092a <prvInitialiseNewTask+0x6a>
 8010956:	e000      	b.n	801095a <prvInitialiseNewTask+0x9a>
			{
				break;
 8010958:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801095a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010962:	e003      	b.n	801096c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010966:	2200      	movs	r2, #0
 8010968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801096c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801096e:	2b37      	cmp	r3, #55	@ 0x37
 8010970:	d901      	bls.n	8010976 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010972:	2337      	movs	r3, #55	@ 0x37
 8010974:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801097a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801097c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801097e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010980:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010984:	2200      	movs	r2, #0
 8010986:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098a:	3304      	adds	r3, #4
 801098c:	4618      	mov	r0, r3
 801098e:	f7fe fd27 	bl	800f3e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010994:	3318      	adds	r3, #24
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe fd22 	bl	800f3e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801099e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80109a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80109ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80109b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b4:	2200      	movs	r2, #0
 80109b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80109c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c4:	3354      	adds	r3, #84	@ 0x54
 80109c6:	224c      	movs	r2, #76	@ 0x4c
 80109c8:	2100      	movs	r1, #0
 80109ca:	4618      	mov	r0, r3
 80109cc:	f00d fc58 	bl	801e280 <memset>
 80109d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d2:	4a0d      	ldr	r2, [pc, #52]	@ (8010a08 <prvInitialiseNewTask+0x148>)
 80109d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80109d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d8:	4a0c      	ldr	r2, [pc, #48]	@ (8010a0c <prvInitialiseNewTask+0x14c>)
 80109da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80109dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109de:	4a0c      	ldr	r2, [pc, #48]	@ (8010a10 <prvInitialiseNewTask+0x150>)
 80109e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	68f9      	ldr	r1, [r7, #12]
 80109e6:	69b8      	ldr	r0, [r7, #24]
 80109e8:	f001 fbe2 	bl	80121b0 <pxPortInitialiseStack>
 80109ec:	4602      	mov	r2, r0
 80109ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80109f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80109f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109fe:	bf00      	nop
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20027d10 	.word	0x20027d10
 8010a0c:	20027d78 	.word	0x20027d78
 8010a10:	20027de0 	.word	0x20027de0

08010a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a1c:	f001 fcd6 	bl	80123cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a20:	4b2d      	ldr	r3, [pc, #180]	@ (8010ad8 <prvAddNewTaskToReadyList+0xc4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	3301      	adds	r3, #1
 8010a26:	4a2c      	ldr	r2, [pc, #176]	@ (8010ad8 <prvAddNewTaskToReadyList+0xc4>)
 8010a28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8010adc <prvAddNewTaskToReadyList+0xc8>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d109      	bne.n	8010a46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a32:	4a2a      	ldr	r2, [pc, #168]	@ (8010adc <prvAddNewTaskToReadyList+0xc8>)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a38:	4b27      	ldr	r3, [pc, #156]	@ (8010ad8 <prvAddNewTaskToReadyList+0xc4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d110      	bne.n	8010a62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a40:	f000 fc7a 	bl	8011338 <prvInitialiseTaskLists>
 8010a44:	e00d      	b.n	8010a62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a46:	4b26      	ldr	r3, [pc, #152]	@ (8010ae0 <prvAddNewTaskToReadyList+0xcc>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d109      	bne.n	8010a62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a4e:	4b23      	ldr	r3, [pc, #140]	@ (8010adc <prvAddNewTaskToReadyList+0xc8>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d802      	bhi.n	8010a62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8010adc <prvAddNewTaskToReadyList+0xc8>)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a62:	4b20      	ldr	r3, [pc, #128]	@ (8010ae4 <prvAddNewTaskToReadyList+0xd0>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	4a1e      	ldr	r2, [pc, #120]	@ (8010ae4 <prvAddNewTaskToReadyList+0xd0>)
 8010a6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ae4 <prvAddNewTaskToReadyList+0xd0>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a78:	4b1b      	ldr	r3, [pc, #108]	@ (8010ae8 <prvAddNewTaskToReadyList+0xd4>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d903      	bls.n	8010a88 <prvAddNewTaskToReadyList+0x74>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a84:	4a18      	ldr	r2, [pc, #96]	@ (8010ae8 <prvAddNewTaskToReadyList+0xd4>)
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	4413      	add	r3, r2
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4a15      	ldr	r2, [pc, #84]	@ (8010aec <prvAddNewTaskToReadyList+0xd8>)
 8010a96:	441a      	add	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f7fe fcab 	bl	800f3fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010aa4:	f001 fcc8 	bl	8012438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8010ae0 <prvAddNewTaskToReadyList+0xcc>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00e      	beq.n	8010ace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8010adc <prvAddNewTaskToReadyList+0xc8>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d207      	bcs.n	8010ace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010abe:	4b0c      	ldr	r3, [pc, #48]	@ (8010af0 <prvAddNewTaskToReadyList+0xdc>)
 8010ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	f3bf 8f4f 	dsb	sy
 8010aca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ace:	bf00      	nop
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	2000b528 	.word	0x2000b528
 8010adc:	2000b054 	.word	0x2000b054
 8010ae0:	2000b534 	.word	0x2000b534
 8010ae4:	2000b544 	.word	0x2000b544
 8010ae8:	2000b530 	.word	0x2000b530
 8010aec:	2000b058 	.word	0x2000b058
 8010af0:	e000ed04 	.word	0xe000ed04

08010af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010afc:	2300      	movs	r3, #0
 8010afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d01a      	beq.n	8010b3c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b06:	4b15      	ldr	r3, [pc, #84]	@ (8010b5c <vTaskDelay+0x68>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00d      	beq.n	8010b2a <vTaskDelay+0x36>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b12:	b672      	cpsid	i
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	b662      	cpsie	i
 8010b22:	60bb      	str	r3, [r7, #8]
}
 8010b24:	bf00      	nop
 8010b26:	bf00      	nop
 8010b28:	e7fd      	b.n	8010b26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010b2a:	f000 f88f 	bl	8010c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b2e:	2100      	movs	r1, #0
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 ff81 	bl	8011a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b36:	f000 f897 	bl	8010c68 <xTaskResumeAll>
 8010b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d107      	bne.n	8010b52 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010b42:	4b07      	ldr	r3, [pc, #28]	@ (8010b60 <vTaskDelay+0x6c>)
 8010b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b52:	bf00      	nop
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	2000b550 	.word	0x2000b550
 8010b60:	e000ed04 	.word	0xe000ed04

08010b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08a      	sub	sp, #40	@ 0x28
 8010b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b72:	463a      	mov	r2, r7
 8010b74:	1d39      	adds	r1, r7, #4
 8010b76:	f107 0308 	add.w	r3, r7, #8
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fbdc 	bl	800f338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b80:	6839      	ldr	r1, [r7, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	9202      	str	r2, [sp, #8]
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	460a      	mov	r2, r1
 8010b92:	4926      	ldr	r1, [pc, #152]	@ (8010c2c <vTaskStartScheduler+0xc8>)
 8010b94:	4826      	ldr	r0, [pc, #152]	@ (8010c30 <vTaskStartScheduler+0xcc>)
 8010b96:	f7ff fde7 	bl	8010768 <xTaskCreateStatic>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	4a25      	ldr	r2, [pc, #148]	@ (8010c34 <vTaskStartScheduler+0xd0>)
 8010b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ba0:	4b24      	ldr	r3, [pc, #144]	@ (8010c34 <vTaskStartScheduler+0xd0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	e001      	b.n	8010bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d102      	bne.n	8010bbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010bb8:	f000 ff92 	bl	8011ae0 <xTimerCreateTimerTask>
 8010bbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d11d      	bne.n	8010c00 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc8:	b672      	cpsid	i
 8010bca:	f383 8811 	msr	BASEPRI, r3
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	f3bf 8f4f 	dsb	sy
 8010bd6:	b662      	cpsie	i
 8010bd8:	613b      	str	r3, [r7, #16]
}
 8010bda:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010bdc:	4b16      	ldr	r3, [pc, #88]	@ (8010c38 <vTaskStartScheduler+0xd4>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	3354      	adds	r3, #84	@ 0x54
 8010be2:	4a16      	ldr	r2, [pc, #88]	@ (8010c3c <vTaskStartScheduler+0xd8>)
 8010be4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010be6:	4b16      	ldr	r3, [pc, #88]	@ (8010c40 <vTaskStartScheduler+0xdc>)
 8010be8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010bee:	4b15      	ldr	r3, [pc, #84]	@ (8010c44 <vTaskStartScheduler+0xe0>)
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010bf4:	4b14      	ldr	r3, [pc, #80]	@ (8010c48 <vTaskStartScheduler+0xe4>)
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010bfa:	f001 fb69 	bl	80122d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010bfe:	e011      	b.n	8010c24 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d10d      	bne.n	8010c24 <vTaskStartScheduler+0xc0>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0c:	b672      	cpsid	i
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	b662      	cpsie	i
 8010c1c:	60fb      	str	r3, [r7, #12]
}
 8010c1e:	bf00      	nop
 8010c20:	bf00      	nop
 8010c22:	e7fd      	b.n	8010c20 <vTaskStartScheduler+0xbc>
}
 8010c24:	bf00      	nop
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	0801f16c 	.word	0x0801f16c
 8010c30:	08011309 	.word	0x08011309
 8010c34:	2000b54c 	.word	0x2000b54c
 8010c38:	2000b054 	.word	0x2000b054
 8010c3c:	2000003c 	.word	0x2000003c
 8010c40:	2000b548 	.word	0x2000b548
 8010c44:	2000b534 	.word	0x2000b534
 8010c48:	2000b52c 	.word	0x2000b52c

08010c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010c50:	4b04      	ldr	r3, [pc, #16]	@ (8010c64 <vTaskSuspendAll+0x18>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	4a03      	ldr	r2, [pc, #12]	@ (8010c64 <vTaskSuspendAll+0x18>)
 8010c58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010c5a:	bf00      	nop
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr
 8010c64:	2000b550 	.word	0x2000b550

08010c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c72:	2300      	movs	r3, #0
 8010c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c76:	4b43      	ldr	r3, [pc, #268]	@ (8010d84 <xTaskResumeAll+0x11c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10d      	bne.n	8010c9a <xTaskResumeAll+0x32>
	__asm volatile
 8010c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c82:	b672      	cpsid	i
 8010c84:	f383 8811 	msr	BASEPRI, r3
 8010c88:	f3bf 8f6f 	isb	sy
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	b662      	cpsie	i
 8010c92:	603b      	str	r3, [r7, #0]
}
 8010c94:	bf00      	nop
 8010c96:	bf00      	nop
 8010c98:	e7fd      	b.n	8010c96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c9a:	f001 fb97 	bl	80123cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c9e:	4b39      	ldr	r3, [pc, #228]	@ (8010d84 <xTaskResumeAll+0x11c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	3b01      	subs	r3, #1
 8010ca4:	4a37      	ldr	r2, [pc, #220]	@ (8010d84 <xTaskResumeAll+0x11c>)
 8010ca6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ca8:	4b36      	ldr	r3, [pc, #216]	@ (8010d84 <xTaskResumeAll+0x11c>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d162      	bne.n	8010d76 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010cb0:	4b35      	ldr	r3, [pc, #212]	@ (8010d88 <xTaskResumeAll+0x120>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d05e      	beq.n	8010d76 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cb8:	e02f      	b.n	8010d1a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cba:	4b34      	ldr	r3, [pc, #208]	@ (8010d8c <xTaskResumeAll+0x124>)
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	3318      	adds	r3, #24
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fe fbf4 	bl	800f4b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	3304      	adds	r3, #4
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fe fbef 	bl	800f4b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cda:	4b2d      	ldr	r3, [pc, #180]	@ (8010d90 <xTaskResumeAll+0x128>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d903      	bls.n	8010cea <xTaskResumeAll+0x82>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8010d90 <xTaskResumeAll+0x128>)
 8010ce8:	6013      	str	r3, [r2, #0]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cee:	4613      	mov	r3, r2
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	4413      	add	r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4a27      	ldr	r2, [pc, #156]	@ (8010d94 <xTaskResumeAll+0x12c>)
 8010cf8:	441a      	add	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	4619      	mov	r1, r3
 8010d00:	4610      	mov	r0, r2
 8010d02:	f7fe fb7a 	bl	800f3fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d0a:	4b23      	ldr	r3, [pc, #140]	@ (8010d98 <xTaskResumeAll+0x130>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d302      	bcc.n	8010d1a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8010d14:	4b21      	ldr	r3, [pc, #132]	@ (8010d9c <xTaskResumeAll+0x134>)
 8010d16:	2201      	movs	r2, #1
 8010d18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8010d8c <xTaskResumeAll+0x124>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1cb      	bne.n	8010cba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d28:	f000 fbac 	bl	8011484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8010da0 <xTaskResumeAll+0x138>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d010      	beq.n	8010d5a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d38:	f000 f858 	bl	8010dec <xTaskIncrementTick>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8010d42:	4b16      	ldr	r3, [pc, #88]	@ (8010d9c <xTaskResumeAll+0x134>)
 8010d44:	2201      	movs	r2, #1
 8010d46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1f1      	bne.n	8010d38 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8010d54:	4b12      	ldr	r3, [pc, #72]	@ (8010da0 <xTaskResumeAll+0x138>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d5a:	4b10      	ldr	r3, [pc, #64]	@ (8010d9c <xTaskResumeAll+0x134>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d009      	beq.n	8010d76 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d62:	2301      	movs	r3, #1
 8010d64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d66:	4b0f      	ldr	r3, [pc, #60]	@ (8010da4 <xTaskResumeAll+0x13c>)
 8010d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d76:	f001 fb5f 	bl	8012438 <vPortExitCritical>

	return xAlreadyYielded;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	2000b550 	.word	0x2000b550
 8010d88:	2000b528 	.word	0x2000b528
 8010d8c:	2000b4e8 	.word	0x2000b4e8
 8010d90:	2000b530 	.word	0x2000b530
 8010d94:	2000b058 	.word	0x2000b058
 8010d98:	2000b054 	.word	0x2000b054
 8010d9c:	2000b53c 	.word	0x2000b53c
 8010da0:	2000b538 	.word	0x2000b538
 8010da4:	e000ed04 	.word	0xe000ed04

08010da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010dae:	4b05      	ldr	r3, [pc, #20]	@ (8010dc4 <xTaskGetTickCount+0x1c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010db4:	687b      	ldr	r3, [r7, #4]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	370c      	adds	r7, #12
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	2000b52c 	.word	0x2000b52c

08010dc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dce:	f001 fbe5 	bl	801259c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010dd6:	4b04      	ldr	r3, [pc, #16]	@ (8010de8 <xTaskGetTickCountFromISR+0x20>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ddc:	683b      	ldr	r3, [r7, #0]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	2000b52c 	.word	0x2000b52c

08010dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b086      	sub	sp, #24
 8010df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010df2:	2300      	movs	r3, #0
 8010df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010df6:	4b50      	ldr	r3, [pc, #320]	@ (8010f38 <xTaskIncrementTick+0x14c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f040 808c 	bne.w	8010f18 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e00:	4b4e      	ldr	r3, [pc, #312]	@ (8010f3c <xTaskIncrementTick+0x150>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	3301      	adds	r3, #1
 8010e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e08:	4a4c      	ldr	r2, [pc, #304]	@ (8010f3c <xTaskIncrementTick+0x150>)
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d123      	bne.n	8010e5c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e14:	4b4a      	ldr	r3, [pc, #296]	@ (8010f40 <xTaskIncrementTick+0x154>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00d      	beq.n	8010e3a <xTaskIncrementTick+0x4e>
	__asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e22:	b672      	cpsid	i
 8010e24:	f383 8811 	msr	BASEPRI, r3
 8010e28:	f3bf 8f6f 	isb	sy
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	b662      	cpsie	i
 8010e32:	603b      	str	r3, [r7, #0]
}
 8010e34:	bf00      	nop
 8010e36:	bf00      	nop
 8010e38:	e7fd      	b.n	8010e36 <xTaskIncrementTick+0x4a>
 8010e3a:	4b41      	ldr	r3, [pc, #260]	@ (8010f40 <xTaskIncrementTick+0x154>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	60fb      	str	r3, [r7, #12]
 8010e40:	4b40      	ldr	r3, [pc, #256]	@ (8010f44 <xTaskIncrementTick+0x158>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a3e      	ldr	r2, [pc, #248]	@ (8010f40 <xTaskIncrementTick+0x154>)
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	4a3e      	ldr	r2, [pc, #248]	@ (8010f44 <xTaskIncrementTick+0x158>)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6013      	str	r3, [r2, #0]
 8010e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f48 <xTaskIncrementTick+0x15c>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	3301      	adds	r3, #1
 8010e54:	4a3c      	ldr	r2, [pc, #240]	@ (8010f48 <xTaskIncrementTick+0x15c>)
 8010e56:	6013      	str	r3, [r2, #0]
 8010e58:	f000 fb14 	bl	8011484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8010f4c <xTaskIncrementTick+0x160>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d349      	bcc.n	8010efa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e66:	4b36      	ldr	r3, [pc, #216]	@ (8010f40 <xTaskIncrementTick+0x154>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d104      	bne.n	8010e7a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e70:	4b36      	ldr	r3, [pc, #216]	@ (8010f4c <xTaskIncrementTick+0x160>)
 8010e72:	f04f 32ff 	mov.w	r2, #4294967295
 8010e76:	601a      	str	r2, [r3, #0]
					break;
 8010e78:	e03f      	b.n	8010efa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e7a:	4b31      	ldr	r3, [pc, #196]	@ (8010f40 <xTaskIncrementTick+0x154>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e8a:	693a      	ldr	r2, [r7, #16]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d203      	bcs.n	8010e9a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e92:	4a2e      	ldr	r2, [pc, #184]	@ (8010f4c <xTaskIncrementTick+0x160>)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e98:	e02f      	b.n	8010efa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fb08 	bl	800f4b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d004      	beq.n	8010eb6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	3318      	adds	r3, #24
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fe faff 	bl	800f4b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eba:	4b25      	ldr	r3, [pc, #148]	@ (8010f50 <xTaskIncrementTick+0x164>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d903      	bls.n	8010eca <xTaskIncrementTick+0xde>
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec6:	4a22      	ldr	r2, [pc, #136]	@ (8010f50 <xTaskIncrementTick+0x164>)
 8010ec8:	6013      	str	r3, [r2, #0]
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ece:	4613      	mov	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4413      	add	r3, r2
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8010f54 <xTaskIncrementTick+0x168>)
 8010ed8:	441a      	add	r2, r3
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	3304      	adds	r3, #4
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7fe fa8a 	bl	800f3fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eea:	4b1b      	ldr	r3, [pc, #108]	@ (8010f58 <xTaskIncrementTick+0x16c>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d3b8      	bcc.n	8010e66 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ef8:	e7b5      	b.n	8010e66 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010efa:	4b17      	ldr	r3, [pc, #92]	@ (8010f58 <xTaskIncrementTick+0x16c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f00:	4914      	ldr	r1, [pc, #80]	@ (8010f54 <xTaskIncrementTick+0x168>)
 8010f02:	4613      	mov	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4413      	add	r3, r2
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	440b      	add	r3, r1
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d907      	bls.n	8010f22 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010f12:	2301      	movs	r3, #1
 8010f14:	617b      	str	r3, [r7, #20]
 8010f16:	e004      	b.n	8010f22 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010f18:	4b10      	ldr	r3, [pc, #64]	@ (8010f5c <xTaskIncrementTick+0x170>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8010f5c <xTaskIncrementTick+0x170>)
 8010f20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010f22:	4b0f      	ldr	r3, [pc, #60]	@ (8010f60 <xTaskIncrementTick+0x174>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010f2e:	697b      	ldr	r3, [r7, #20]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3718      	adds	r7, #24
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	2000b550 	.word	0x2000b550
 8010f3c:	2000b52c 	.word	0x2000b52c
 8010f40:	2000b4e0 	.word	0x2000b4e0
 8010f44:	2000b4e4 	.word	0x2000b4e4
 8010f48:	2000b540 	.word	0x2000b540
 8010f4c:	2000b548 	.word	0x2000b548
 8010f50:	2000b530 	.word	0x2000b530
 8010f54:	2000b058 	.word	0x2000b058
 8010f58:	2000b054 	.word	0x2000b054
 8010f5c:	2000b538 	.word	0x2000b538
 8010f60:	2000b53c 	.word	0x2000b53c

08010f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8011064 <vTaskSwitchContext+0x100>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d003      	beq.n	8010f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f72:	4b3d      	ldr	r3, [pc, #244]	@ (8011068 <vTaskSwitchContext+0x104>)
 8010f74:	2201      	movs	r2, #1
 8010f76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f78:	e070      	b.n	801105c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8010f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8011068 <vTaskSwitchContext+0x104>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010f80:	4b3a      	ldr	r3, [pc, #232]	@ (801106c <vTaskSwitchContext+0x108>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f86:	613b      	str	r3, [r7, #16]
 8010f88:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010f8c:	60fb      	str	r3, [r7, #12]
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d111      	bne.n	8010fbc <vTaskSwitchContext+0x58>
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d10b      	bne.n	8010fbc <vTaskSwitchContext+0x58>
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	3308      	adds	r3, #8
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d105      	bne.n	8010fbc <vTaskSwitchContext+0x58>
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	330c      	adds	r3, #12
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d008      	beq.n	8010fce <vTaskSwitchContext+0x6a>
 8010fbc:	4b2b      	ldr	r3, [pc, #172]	@ (801106c <vTaskSwitchContext+0x108>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	4b2a      	ldr	r3, [pc, #168]	@ (801106c <vTaskSwitchContext+0x108>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3334      	adds	r3, #52	@ 0x34
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4610      	mov	r0, r2
 8010fca:	f7ef ffe9 	bl	8000fa0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fce:	4b28      	ldr	r3, [pc, #160]	@ (8011070 <vTaskSwitchContext+0x10c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	617b      	str	r3, [r7, #20]
 8010fd4:	e013      	b.n	8010ffe <vTaskSwitchContext+0x9a>
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10d      	bne.n	8010ff8 <vTaskSwitchContext+0x94>
	__asm volatile
 8010fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe0:	b672      	cpsid	i
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	b662      	cpsie	i
 8010ff0:	607b      	str	r3, [r7, #4]
}
 8010ff2:	bf00      	nop
 8010ff4:	bf00      	nop
 8010ff6:	e7fd      	b.n	8010ff4 <vTaskSwitchContext+0x90>
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	617b      	str	r3, [r7, #20]
 8010ffe:	491d      	ldr	r1, [pc, #116]	@ (8011074 <vTaskSwitchContext+0x110>)
 8011000:	697a      	ldr	r2, [r7, #20]
 8011002:	4613      	mov	r3, r2
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	440b      	add	r3, r1
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d0e1      	beq.n	8010fd6 <vTaskSwitchContext+0x72>
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	4613      	mov	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4a15      	ldr	r2, [pc, #84]	@ (8011074 <vTaskSwitchContext+0x110>)
 801101e:	4413      	add	r3, r2
 8011020:	60bb      	str	r3, [r7, #8]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	605a      	str	r2, [r3, #4]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	3308      	adds	r3, #8
 8011034:	429a      	cmp	r2, r3
 8011036:	d104      	bne.n	8011042 <vTaskSwitchContext+0xde>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	685a      	ldr	r2, [r3, #4]
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	605a      	str	r2, [r3, #4]
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	4a08      	ldr	r2, [pc, #32]	@ (801106c <vTaskSwitchContext+0x108>)
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	4a08      	ldr	r2, [pc, #32]	@ (8011070 <vTaskSwitchContext+0x10c>)
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011052:	4b06      	ldr	r3, [pc, #24]	@ (801106c <vTaskSwitchContext+0x108>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3354      	adds	r3, #84	@ 0x54
 8011058:	4a07      	ldr	r2, [pc, #28]	@ (8011078 <vTaskSwitchContext+0x114>)
 801105a:	6013      	str	r3, [r2, #0]
}
 801105c:	bf00      	nop
 801105e:	3718      	adds	r7, #24
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	2000b550 	.word	0x2000b550
 8011068:	2000b53c 	.word	0x2000b53c
 801106c:	2000b054 	.word	0x2000b054
 8011070:	2000b530 	.word	0x2000b530
 8011074:	2000b058 	.word	0x2000b058
 8011078:	2000003c 	.word	0x2000003c

0801107c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d10d      	bne.n	80110a8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801108c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011090:	b672      	cpsid	i
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	b662      	cpsie	i
 80110a0:	60fb      	str	r3, [r7, #12]
}
 80110a2:	bf00      	nop
 80110a4:	bf00      	nop
 80110a6:	e7fd      	b.n	80110a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110a8:	4b07      	ldr	r3, [pc, #28]	@ (80110c8 <vTaskPlaceOnEventList+0x4c>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	3318      	adds	r3, #24
 80110ae:	4619      	mov	r1, r3
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fe f9c6 	bl	800f442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110b6:	2101      	movs	r1, #1
 80110b8:	6838      	ldr	r0, [r7, #0]
 80110ba:	f000 fcbd 	bl	8011a38 <prvAddCurrentTaskToDelayedList>
}
 80110be:	bf00      	nop
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	2000b054 	.word	0x2000b054

080110cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10d      	bne.n	80110fa <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e2:	b672      	cpsid	i
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	b662      	cpsie	i
 80110f2:	617b      	str	r3, [r7, #20]
}
 80110f4:	bf00      	nop
 80110f6:	bf00      	nop
 80110f8:	e7fd      	b.n	80110f6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011124 <vTaskPlaceOnEventListRestricted+0x58>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	3318      	adds	r3, #24
 8011100:	4619      	mov	r1, r3
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f7fe f979 	bl	800f3fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d002      	beq.n	8011114 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 801110e:	f04f 33ff 	mov.w	r3, #4294967295
 8011112:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011114:	6879      	ldr	r1, [r7, #4]
 8011116:	68b8      	ldr	r0, [r7, #8]
 8011118:	f000 fc8e 	bl	8011a38 <prvAddCurrentTaskToDelayedList>
	}
 801111c:	bf00      	nop
 801111e:	3718      	adds	r7, #24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	2000b054 	.word	0x2000b054

08011128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10d      	bne.n	801115a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011142:	b672      	cpsid	i
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	b662      	cpsie	i
 8011152:	60fb      	str	r3, [r7, #12]
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop
 8011158:	e7fd      	b.n	8011156 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	3318      	adds	r3, #24
 801115e:	4618      	mov	r0, r3
 8011160:	f7fe f9a8 	bl	800f4b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011164:	4b1d      	ldr	r3, [pc, #116]	@ (80111dc <xTaskRemoveFromEventList+0xb4>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d11d      	bne.n	80111a8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	3304      	adds	r3, #4
 8011170:	4618      	mov	r0, r3
 8011172:	f7fe f99f 	bl	800f4b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801117a:	4b19      	ldr	r3, [pc, #100]	@ (80111e0 <xTaskRemoveFromEventList+0xb8>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d903      	bls.n	801118a <xTaskRemoveFromEventList+0x62>
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011186:	4a16      	ldr	r2, [pc, #88]	@ (80111e0 <xTaskRemoveFromEventList+0xb8>)
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801118e:	4613      	mov	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	4a13      	ldr	r2, [pc, #76]	@ (80111e4 <xTaskRemoveFromEventList+0xbc>)
 8011198:	441a      	add	r2, r3
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	3304      	adds	r3, #4
 801119e:	4619      	mov	r1, r3
 80111a0:	4610      	mov	r0, r2
 80111a2:	f7fe f92a 	bl	800f3fa <vListInsertEnd>
 80111a6:	e005      	b.n	80111b4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	3318      	adds	r3, #24
 80111ac:	4619      	mov	r1, r3
 80111ae:	480e      	ldr	r0, [pc, #56]	@ (80111e8 <xTaskRemoveFromEventList+0xc0>)
 80111b0:	f7fe f923 	bl	800f3fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111b8:	4b0c      	ldr	r3, [pc, #48]	@ (80111ec <xTaskRemoveFromEventList+0xc4>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111be:	429a      	cmp	r2, r3
 80111c0:	d905      	bls.n	80111ce <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80111c2:	2301      	movs	r3, #1
 80111c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80111c6:	4b0a      	ldr	r3, [pc, #40]	@ (80111f0 <xTaskRemoveFromEventList+0xc8>)
 80111c8:	2201      	movs	r2, #1
 80111ca:	601a      	str	r2, [r3, #0]
 80111cc:	e001      	b.n	80111d2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80111ce:	2300      	movs	r3, #0
 80111d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111d2:	697b      	ldr	r3, [r7, #20]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	2000b550 	.word	0x2000b550
 80111e0:	2000b530 	.word	0x2000b530
 80111e4:	2000b058 	.word	0x2000b058
 80111e8:	2000b4e8 	.word	0x2000b4e8
 80111ec:	2000b054 	.word	0x2000b054
 80111f0:	2000b53c 	.word	0x2000b53c

080111f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111fc:	4b06      	ldr	r3, [pc, #24]	@ (8011218 <vTaskInternalSetTimeOutState+0x24>)
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011204:	4b05      	ldr	r3, [pc, #20]	@ (801121c <vTaskInternalSetTimeOutState+0x28>)
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	605a      	str	r2, [r3, #4]
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	2000b540 	.word	0x2000b540
 801121c:	2000b52c 	.word	0x2000b52c

08011220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10d      	bne.n	801124c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8011230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011234:	b672      	cpsid	i
 8011236:	f383 8811 	msr	BASEPRI, r3
 801123a:	f3bf 8f6f 	isb	sy
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	b662      	cpsie	i
 8011244:	613b      	str	r3, [r7, #16]
}
 8011246:	bf00      	nop
 8011248:	bf00      	nop
 801124a:	e7fd      	b.n	8011248 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d10d      	bne.n	801126e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011256:	b672      	cpsid	i
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	b662      	cpsie	i
 8011266:	60fb      	str	r3, [r7, #12]
}
 8011268:	bf00      	nop
 801126a:	bf00      	nop
 801126c:	e7fd      	b.n	801126a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801126e:	f001 f8ad 	bl	80123cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011272:	4b1d      	ldr	r3, [pc, #116]	@ (80112e8 <xTaskCheckForTimeOut+0xc8>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	69ba      	ldr	r2, [r7, #24]
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128a:	d102      	bne.n	8011292 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801128c:	2300      	movs	r3, #0
 801128e:	61fb      	str	r3, [r7, #28]
 8011290:	e023      	b.n	80112da <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	4b15      	ldr	r3, [pc, #84]	@ (80112ec <xTaskCheckForTimeOut+0xcc>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	429a      	cmp	r2, r3
 801129c:	d007      	beq.n	80112ae <xTaskCheckForTimeOut+0x8e>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	69ba      	ldr	r2, [r7, #24]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d302      	bcc.n	80112ae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112a8:	2301      	movs	r3, #1
 80112aa:	61fb      	str	r3, [r7, #28]
 80112ac:	e015      	b.n	80112da <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d20b      	bcs.n	80112d0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	1ad2      	subs	r2, r2, r3
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7ff ff95 	bl	80111f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112ca:	2300      	movs	r3, #0
 80112cc:	61fb      	str	r3, [r7, #28]
 80112ce:	e004      	b.n	80112da <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80112d6:	2301      	movs	r3, #1
 80112d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80112da:	f001 f8ad 	bl	8012438 <vPortExitCritical>

	return xReturn;
 80112de:	69fb      	ldr	r3, [r7, #28]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3720      	adds	r7, #32
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	2000b52c 	.word	0x2000b52c
 80112ec:	2000b540 	.word	0x2000b540

080112f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112f0:	b480      	push	{r7}
 80112f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112f4:	4b03      	ldr	r3, [pc, #12]	@ (8011304 <vTaskMissedYield+0x14>)
 80112f6:	2201      	movs	r2, #1
 80112f8:	601a      	str	r2, [r3, #0]
}
 80112fa:	bf00      	nop
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	2000b53c 	.word	0x2000b53c

08011308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011310:	f000 f852 	bl	80113b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011314:	4b06      	ldr	r3, [pc, #24]	@ (8011330 <prvIdleTask+0x28>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2b01      	cmp	r3, #1
 801131a:	d9f9      	bls.n	8011310 <prvIdleTask+0x8>
			{
				taskYIELD();
 801131c:	4b05      	ldr	r3, [pc, #20]	@ (8011334 <prvIdleTask+0x2c>)
 801131e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011322:	601a      	str	r2, [r3, #0]
 8011324:	f3bf 8f4f 	dsb	sy
 8011328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801132c:	e7f0      	b.n	8011310 <prvIdleTask+0x8>
 801132e:	bf00      	nop
 8011330:	2000b058 	.word	0x2000b058
 8011334:	e000ed04 	.word	0xe000ed04

08011338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801133e:	2300      	movs	r3, #0
 8011340:	607b      	str	r3, [r7, #4]
 8011342:	e00c      	b.n	801135e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4a12      	ldr	r2, [pc, #72]	@ (8011398 <prvInitialiseTaskLists+0x60>)
 8011350:	4413      	add	r3, r2
 8011352:	4618      	mov	r0, r3
 8011354:	f7fe f824 	bl	800f3a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3301      	adds	r3, #1
 801135c:	607b      	str	r3, [r7, #4]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b37      	cmp	r3, #55	@ 0x37
 8011362:	d9ef      	bls.n	8011344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011364:	480d      	ldr	r0, [pc, #52]	@ (801139c <prvInitialiseTaskLists+0x64>)
 8011366:	f7fe f81b 	bl	800f3a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801136a:	480d      	ldr	r0, [pc, #52]	@ (80113a0 <prvInitialiseTaskLists+0x68>)
 801136c:	f7fe f818 	bl	800f3a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011370:	480c      	ldr	r0, [pc, #48]	@ (80113a4 <prvInitialiseTaskLists+0x6c>)
 8011372:	f7fe f815 	bl	800f3a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011376:	480c      	ldr	r0, [pc, #48]	@ (80113a8 <prvInitialiseTaskLists+0x70>)
 8011378:	f7fe f812 	bl	800f3a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801137c:	480b      	ldr	r0, [pc, #44]	@ (80113ac <prvInitialiseTaskLists+0x74>)
 801137e:	f7fe f80f 	bl	800f3a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011382:	4b0b      	ldr	r3, [pc, #44]	@ (80113b0 <prvInitialiseTaskLists+0x78>)
 8011384:	4a05      	ldr	r2, [pc, #20]	@ (801139c <prvInitialiseTaskLists+0x64>)
 8011386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011388:	4b0a      	ldr	r3, [pc, #40]	@ (80113b4 <prvInitialiseTaskLists+0x7c>)
 801138a:	4a05      	ldr	r2, [pc, #20]	@ (80113a0 <prvInitialiseTaskLists+0x68>)
 801138c:	601a      	str	r2, [r3, #0]
}
 801138e:	bf00      	nop
 8011390:	3708      	adds	r7, #8
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	2000b058 	.word	0x2000b058
 801139c:	2000b4b8 	.word	0x2000b4b8
 80113a0:	2000b4cc 	.word	0x2000b4cc
 80113a4:	2000b4e8 	.word	0x2000b4e8
 80113a8:	2000b4fc 	.word	0x2000b4fc
 80113ac:	2000b514 	.word	0x2000b514
 80113b0:	2000b4e0 	.word	0x2000b4e0
 80113b4:	2000b4e4 	.word	0x2000b4e4

080113b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113be:	e019      	b.n	80113f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113c0:	f001 f804 	bl	80123cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113c4:	4b10      	ldr	r3, [pc, #64]	@ (8011408 <prvCheckTasksWaitingTermination+0x50>)
 80113c6:	68db      	ldr	r3, [r3, #12]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3304      	adds	r3, #4
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fe f86f 	bl	800f4b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80113d6:	4b0d      	ldr	r3, [pc, #52]	@ (801140c <prvCheckTasksWaitingTermination+0x54>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	3b01      	subs	r3, #1
 80113dc:	4a0b      	ldr	r2, [pc, #44]	@ (801140c <prvCheckTasksWaitingTermination+0x54>)
 80113de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80113e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011410 <prvCheckTasksWaitingTermination+0x58>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	4a0a      	ldr	r2, [pc, #40]	@ (8011410 <prvCheckTasksWaitingTermination+0x58>)
 80113e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113ea:	f001 f825 	bl	8012438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 f810 	bl	8011414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113f4:	4b06      	ldr	r3, [pc, #24]	@ (8011410 <prvCheckTasksWaitingTermination+0x58>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d1e1      	bne.n	80113c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113fc:	bf00      	nop
 80113fe:	bf00      	nop
 8011400:	3708      	adds	r7, #8
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	2000b4fc 	.word	0x2000b4fc
 801140c:	2000b528 	.word	0x2000b528
 8011410:	2000b510 	.word	0x2000b510

08011414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	3354      	adds	r3, #84	@ 0x54
 8011420:	4618      	mov	r0, r3
 8011422:	f00c ff45 	bl	801e2b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801142c:	2b00      	cmp	r3, #0
 801142e:	d108      	bne.n	8011442 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011434:	4618      	mov	r0, r3
 8011436:	f001 f9c5 	bl	80127c4 <vPortFree>
				vPortFree( pxTCB );
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f001 f9c2 	bl	80127c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011440:	e01b      	b.n	801147a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011448:	2b01      	cmp	r3, #1
 801144a:	d103      	bne.n	8011454 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f001 f9b9 	bl	80127c4 <vPortFree>
	}
 8011452:	e012      	b.n	801147a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801145a:	2b02      	cmp	r3, #2
 801145c:	d00d      	beq.n	801147a <prvDeleteTCB+0x66>
	__asm volatile
 801145e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011462:	b672      	cpsid	i
 8011464:	f383 8811 	msr	BASEPRI, r3
 8011468:	f3bf 8f6f 	isb	sy
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	b662      	cpsie	i
 8011472:	60fb      	str	r3, [r7, #12]
}
 8011474:	bf00      	nop
 8011476:	bf00      	nop
 8011478:	e7fd      	b.n	8011476 <prvDeleteTCB+0x62>
	}
 801147a:	bf00      	nop
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801148a:	4b0c      	ldr	r3, [pc, #48]	@ (80114bc <prvResetNextTaskUnblockTime+0x38>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d104      	bne.n	801149e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011494:	4b0a      	ldr	r3, [pc, #40]	@ (80114c0 <prvResetNextTaskUnblockTime+0x3c>)
 8011496:	f04f 32ff 	mov.w	r2, #4294967295
 801149a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801149c:	e008      	b.n	80114b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801149e:	4b07      	ldr	r3, [pc, #28]	@ (80114bc <prvResetNextTaskUnblockTime+0x38>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	4a04      	ldr	r2, [pc, #16]	@ (80114c0 <prvResetNextTaskUnblockTime+0x3c>)
 80114ae:	6013      	str	r3, [r2, #0]
}
 80114b0:	bf00      	nop
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	2000b4e0 	.word	0x2000b4e0
 80114c0:	2000b548 	.word	0x2000b548

080114c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80114ca:	4b05      	ldr	r3, [pc, #20]	@ (80114e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80114d0:	687b      	ldr	r3, [r7, #4]
	}
 80114d2:	4618      	mov	r0, r3
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	2000b054 	.word	0x2000b054

080114e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114ea:	4b0b      	ldr	r3, [pc, #44]	@ (8011518 <xTaskGetSchedulerState+0x34>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d102      	bne.n	80114f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114f2:	2301      	movs	r3, #1
 80114f4:	607b      	str	r3, [r7, #4]
 80114f6:	e008      	b.n	801150a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114f8:	4b08      	ldr	r3, [pc, #32]	@ (801151c <xTaskGetSchedulerState+0x38>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d102      	bne.n	8011506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011500:	2302      	movs	r3, #2
 8011502:	607b      	str	r3, [r7, #4]
 8011504:	e001      	b.n	801150a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011506:	2300      	movs	r3, #0
 8011508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801150a:	687b      	ldr	r3, [r7, #4]
	}
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	2000b534 	.word	0x2000b534
 801151c:	2000b550 	.word	0x2000b550

08011520 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801152c:	2300      	movs	r3, #0
 801152e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d051      	beq.n	80115da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801153a:	4b2a      	ldr	r3, [pc, #168]	@ (80115e4 <xTaskPriorityInherit+0xc4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011540:	429a      	cmp	r2, r3
 8011542:	d241      	bcs.n	80115c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	2b00      	cmp	r3, #0
 801154a:	db06      	blt.n	801155a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801154c:	4b25      	ldr	r3, [pc, #148]	@ (80115e4 <xTaskPriorityInherit+0xc4>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011552:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	6959      	ldr	r1, [r3, #20]
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4a1f      	ldr	r2, [pc, #124]	@ (80115e8 <xTaskPriorityInherit+0xc8>)
 801156c:	4413      	add	r3, r2
 801156e:	4299      	cmp	r1, r3
 8011570:	d122      	bne.n	80115b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	3304      	adds	r3, #4
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd ff9c 	bl	800f4b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801157c:	4b19      	ldr	r3, [pc, #100]	@ (80115e4 <xTaskPriorityInherit+0xc4>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801158a:	4b18      	ldr	r3, [pc, #96]	@ (80115ec <xTaskPriorityInherit+0xcc>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d903      	bls.n	801159a <xTaskPriorityInherit+0x7a>
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011596:	4a15      	ldr	r2, [pc, #84]	@ (80115ec <xTaskPriorityInherit+0xcc>)
 8011598:	6013      	str	r3, [r2, #0]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801159e:	4613      	mov	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	4a10      	ldr	r2, [pc, #64]	@ (80115e8 <xTaskPriorityInherit+0xc8>)
 80115a8:	441a      	add	r2, r3
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	3304      	adds	r3, #4
 80115ae:	4619      	mov	r1, r3
 80115b0:	4610      	mov	r0, r2
 80115b2:	f7fd ff22 	bl	800f3fa <vListInsertEnd>
 80115b6:	e004      	b.n	80115c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80115b8:	4b0a      	ldr	r3, [pc, #40]	@ (80115e4 <xTaskPriorityInherit+0xc4>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80115c2:	2301      	movs	r3, #1
 80115c4:	60fb      	str	r3, [r7, #12]
 80115c6:	e008      	b.n	80115da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115cc:	4b05      	ldr	r3, [pc, #20]	@ (80115e4 <xTaskPriorityInherit+0xc4>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d201      	bcs.n	80115da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80115d6:	2301      	movs	r3, #1
 80115d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115da:	68fb      	ldr	r3, [r7, #12]
	}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	2000b054 	.word	0x2000b054
 80115e8:	2000b058 	.word	0x2000b058
 80115ec:	2000b530 	.word	0x2000b530

080115f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115fc:	2300      	movs	r3, #0
 80115fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d05c      	beq.n	80116c0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011606:	4b31      	ldr	r3, [pc, #196]	@ (80116cc <xTaskPriorityDisinherit+0xdc>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	693a      	ldr	r2, [r7, #16]
 801160c:	429a      	cmp	r2, r3
 801160e:	d00d      	beq.n	801162c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8011610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011614:	b672      	cpsid	i
 8011616:	f383 8811 	msr	BASEPRI, r3
 801161a:	f3bf 8f6f 	isb	sy
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	b662      	cpsie	i
 8011624:	60fb      	str	r3, [r7, #12]
}
 8011626:	bf00      	nop
 8011628:	bf00      	nop
 801162a:	e7fd      	b.n	8011628 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011630:	2b00      	cmp	r3, #0
 8011632:	d10d      	bne.n	8011650 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8011634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011638:	b672      	cpsid	i
 801163a:	f383 8811 	msr	BASEPRI, r3
 801163e:	f3bf 8f6f 	isb	sy
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	b662      	cpsie	i
 8011648:	60bb      	str	r3, [r7, #8]
}
 801164a:	bf00      	nop
 801164c:	bf00      	nop
 801164e:	e7fd      	b.n	801164c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011654:	1e5a      	subs	r2, r3, #1
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011662:	429a      	cmp	r2, r3
 8011664:	d02c      	beq.n	80116c0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801166a:	2b00      	cmp	r3, #0
 801166c:	d128      	bne.n	80116c0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	3304      	adds	r3, #4
 8011672:	4618      	mov	r0, r3
 8011674:	f7fd ff1e 	bl	800f4b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011684:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011690:	4b0f      	ldr	r3, [pc, #60]	@ (80116d0 <xTaskPriorityDisinherit+0xe0>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	429a      	cmp	r2, r3
 8011696:	d903      	bls.n	80116a0 <xTaskPriorityDisinherit+0xb0>
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801169c:	4a0c      	ldr	r2, [pc, #48]	@ (80116d0 <xTaskPriorityDisinherit+0xe0>)
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116a4:	4613      	mov	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4a09      	ldr	r2, [pc, #36]	@ (80116d4 <xTaskPriorityDisinherit+0xe4>)
 80116ae:	441a      	add	r2, r3
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	3304      	adds	r3, #4
 80116b4:	4619      	mov	r1, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	f7fd fe9f 	bl	800f3fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80116bc:	2301      	movs	r3, #1
 80116be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80116c0:	697b      	ldr	r3, [r7, #20]
	}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3718      	adds	r7, #24
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	2000b054 	.word	0x2000b054
 80116d0:	2000b530 	.word	0x2000b530
 80116d4:	2000b058 	.word	0x2000b058

080116d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b088      	sub	sp, #32
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80116e6:	2301      	movs	r3, #1
 80116e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d070      	beq.n	80117d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10d      	bne.n	8011714 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80116f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fc:	b672      	cpsid	i
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	b662      	cpsie	i
 801170c:	60fb      	str	r3, [r7, #12]
}
 801170e:	bf00      	nop
 8011710:	bf00      	nop
 8011712:	e7fd      	b.n	8011710 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	429a      	cmp	r2, r3
 801171c:	d902      	bls.n	8011724 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	61fb      	str	r3, [r7, #28]
 8011722:	e002      	b.n	801172a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011728:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172e:	69fa      	ldr	r2, [r7, #28]
 8011730:	429a      	cmp	r2, r3
 8011732:	d04e      	beq.n	80117d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	429a      	cmp	r2, r3
 801173c:	d149      	bne.n	80117d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801173e:	4b27      	ldr	r3, [pc, #156]	@ (80117dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	69ba      	ldr	r2, [r7, #24]
 8011744:	429a      	cmp	r2, r3
 8011746:	d10d      	bne.n	8011764 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8011748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801174c:	b672      	cpsid	i
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	b662      	cpsie	i
 801175c:	60bb      	str	r3, [r7, #8]
}
 801175e:	bf00      	nop
 8011760:	bf00      	nop
 8011762:	e7fd      	b.n	8011760 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011768:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	69fa      	ldr	r2, [r7, #28]
 801176e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	2b00      	cmp	r3, #0
 8011776:	db04      	blt.n	8011782 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	6959      	ldr	r1, [r3, #20]
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	4613      	mov	r3, r2
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	4413      	add	r3, r2
 801178e:	009b      	lsls	r3, r3, #2
 8011790:	4a13      	ldr	r2, [pc, #76]	@ (80117e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011792:	4413      	add	r3, r2
 8011794:	4299      	cmp	r1, r3
 8011796:	d11c      	bne.n	80117d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	3304      	adds	r3, #4
 801179c:	4618      	mov	r0, r3
 801179e:	f7fd fe89 	bl	800f4b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117a6:	4b0f      	ldr	r3, [pc, #60]	@ (80117e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d903      	bls.n	80117b6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b2:	4a0c      	ldr	r2, [pc, #48]	@ (80117e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117ba:	4613      	mov	r3, r2
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	4413      	add	r3, r2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4a07      	ldr	r2, [pc, #28]	@ (80117e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80117c4:	441a      	add	r2, r3
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	3304      	adds	r3, #4
 80117ca:	4619      	mov	r1, r3
 80117cc:	4610      	mov	r0, r2
 80117ce:	f7fd fe14 	bl	800f3fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117d2:	bf00      	nop
 80117d4:	3720      	adds	r7, #32
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	2000b054 	.word	0x2000b054
 80117e0:	2000b058 	.word	0x2000b058
 80117e4:	2000b530 	.word	0x2000b530

080117e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80117e8:	b480      	push	{r7}
 80117ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80117ec:	4b07      	ldr	r3, [pc, #28]	@ (801180c <pvTaskIncrementMutexHeldCount+0x24>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d004      	beq.n	80117fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80117f4:	4b05      	ldr	r3, [pc, #20]	@ (801180c <pvTaskIncrementMutexHeldCount+0x24>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80117fa:	3201      	adds	r2, #1
 80117fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80117fe:	4b03      	ldr	r3, [pc, #12]	@ (801180c <pvTaskIncrementMutexHeldCount+0x24>)
 8011800:	681b      	ldr	r3, [r3, #0]
	}
 8011802:	4618      	mov	r0, r3
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	2000b054 	.word	0x2000b054

08011810 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801181a:	f000 fdd7 	bl	80123cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801181e:	4b20      	ldr	r3, [pc, #128]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d113      	bne.n	8011852 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801182a:	4b1d      	ldr	r3, [pc, #116]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2201      	movs	r2, #1
 8011830:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d00b      	beq.n	8011852 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801183a:	2101      	movs	r1, #1
 801183c:	6838      	ldr	r0, [r7, #0]
 801183e:	f000 f8fb 	bl	8011a38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011842:	4b18      	ldr	r3, [pc, #96]	@ (80118a4 <ulTaskNotifyTake+0x94>)
 8011844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011848:	601a      	str	r2, [r3, #0]
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011852:	f000 fdf1 	bl	8012438 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011856:	f000 fdb9 	bl	80123cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801185a:	4b11      	ldr	r3, [pc, #68]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011862:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00e      	beq.n	8011888 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d005      	beq.n	801187c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011870:	4b0b      	ldr	r3, [pc, #44]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2200      	movs	r2, #0
 8011876:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801187a:	e005      	b.n	8011888 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801187c:	4b08      	ldr	r3, [pc, #32]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	3a01      	subs	r2, #1
 8011884:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011888:	4b05      	ldr	r3, [pc, #20]	@ (80118a0 <ulTaskNotifyTake+0x90>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2200      	movs	r2, #0
 801188e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8011892:	f000 fdd1 	bl	8012438 <vPortExitCritical>

		return ulReturn;
 8011896:	68fb      	ldr	r3, [r7, #12]
	}
 8011898:	4618      	mov	r0, r3
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	2000b054 	.word	0x2000b054
 80118a4:	e000ed04 	.word	0xe000ed04

080118a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08a      	sub	sp, #40	@ 0x28
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	603b      	str	r3, [r7, #0]
 80118b4:	4613      	mov	r3, r2
 80118b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80118b8:	2301      	movs	r3, #1
 80118ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10d      	bne.n	80118de <xTaskGenericNotify+0x36>
	__asm volatile
 80118c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c6:	b672      	cpsid	i
 80118c8:	f383 8811 	msr	BASEPRI, r3
 80118cc:	f3bf 8f6f 	isb	sy
 80118d0:	f3bf 8f4f 	dsb	sy
 80118d4:	b662      	cpsie	i
 80118d6:	61bb      	str	r3, [r7, #24]
}
 80118d8:	bf00      	nop
 80118da:	bf00      	nop
 80118dc:	e7fd      	b.n	80118da <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80118e2:	f000 fd73 	bl	80123cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d004      	beq.n	80118f6 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80118ec:	6a3b      	ldr	r3, [r7, #32]
 80118ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80118fc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80118fe:	6a3b      	ldr	r3, [r7, #32]
 8011900:	2202      	movs	r2, #2
 8011902:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	2b04      	cmp	r3, #4
 801190a:	d82e      	bhi.n	801196a <xTaskGenericNotify+0xc2>
 801190c:	a201      	add	r2, pc, #4	@ (adr r2, 8011914 <xTaskGenericNotify+0x6c>)
 801190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011912:	bf00      	nop
 8011914:	08011993 	.word	0x08011993
 8011918:	08011929 	.word	0x08011929
 801191c:	0801193b 	.word	0x0801193b
 8011920:	0801194b 	.word	0x0801194b
 8011924:	08011955 	.word	0x08011955
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	431a      	orrs	r2, r3
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011938:	e02e      	b.n	8011998 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011940:	1c5a      	adds	r2, r3, #1
 8011942:	6a3b      	ldr	r3, [r7, #32]
 8011944:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011948:	e026      	b.n	8011998 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801194a:	6a3b      	ldr	r3, [r7, #32]
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011952:	e021      	b.n	8011998 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011954:	7ffb      	ldrb	r3, [r7, #31]
 8011956:	2b02      	cmp	r3, #2
 8011958:	d004      	beq.n	8011964 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011962:	e019      	b.n	8011998 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8011964:	2300      	movs	r3, #0
 8011966:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011968:	e016      	b.n	8011998 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011974:	d00f      	beq.n	8011996 <xTaskGenericNotify+0xee>
	__asm volatile
 8011976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197a:	b672      	cpsid	i
 801197c:	f383 8811 	msr	BASEPRI, r3
 8011980:	f3bf 8f6f 	isb	sy
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	b662      	cpsie	i
 801198a:	617b      	str	r3, [r7, #20]
}
 801198c:	bf00      	nop
 801198e:	bf00      	nop
 8011990:	e7fd      	b.n	801198e <xTaskGenericNotify+0xe6>
					break;
 8011992:	bf00      	nop
 8011994:	e000      	b.n	8011998 <xTaskGenericNotify+0xf0>

					break;
 8011996:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011998:	7ffb      	ldrb	r3, [r7, #31]
 801199a:	2b01      	cmp	r3, #1
 801199c:	d13d      	bne.n	8011a1a <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	3304      	adds	r3, #4
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fd fd86 	bl	800f4b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80119a8:	6a3b      	ldr	r3, [r7, #32]
 80119aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119ac:	4b1e      	ldr	r3, [pc, #120]	@ (8011a28 <xTaskGenericNotify+0x180>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d903      	bls.n	80119bc <xTaskGenericNotify+0x114>
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011a28 <xTaskGenericNotify+0x180>)
 80119ba:	6013      	str	r3, [r2, #0]
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	4a18      	ldr	r2, [pc, #96]	@ (8011a2c <xTaskGenericNotify+0x184>)
 80119ca:	441a      	add	r2, r3
 80119cc:	6a3b      	ldr	r3, [r7, #32]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4619      	mov	r1, r3
 80119d2:	4610      	mov	r0, r2
 80119d4:	f7fd fd11 	bl	800f3fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00d      	beq.n	80119fc <xTaskGenericNotify+0x154>
	__asm volatile
 80119e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e4:	b672      	cpsid	i
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	b662      	cpsie	i
 80119f4:	613b      	str	r3, [r7, #16]
}
 80119f6:	bf00      	nop
 80119f8:	bf00      	nop
 80119fa:	e7fd      	b.n	80119f8 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a00:	4b0b      	ldr	r3, [pc, #44]	@ (8011a30 <xTaskGenericNotify+0x188>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d907      	bls.n	8011a1a <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a34 <xTaskGenericNotify+0x18c>)
 8011a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011a1a:	f000 fd0d 	bl	8012438 <vPortExitCritical>

		return xReturn;
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3728      	adds	r7, #40	@ 0x28
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	2000b530 	.word	0x2000b530
 8011a2c:	2000b058 	.word	0x2000b058
 8011a30:	2000b054 	.word	0x2000b054
 8011a34:	e000ed04 	.word	0xe000ed04

08011a38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011a42:	4b21      	ldr	r3, [pc, #132]	@ (8011ac8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a48:	4b20      	ldr	r3, [pc, #128]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x94>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fd fd30 	bl	800f4b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5a:	d10a      	bne.n	8011a72 <prvAddCurrentTaskToDelayedList+0x3a>
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d007      	beq.n	8011a72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a62:	4b1a      	ldr	r3, [pc, #104]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x94>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	3304      	adds	r3, #4
 8011a68:	4619      	mov	r1, r3
 8011a6a:	4819      	ldr	r0, [pc, #100]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x98>)
 8011a6c:	f7fd fcc5 	bl	800f3fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a70:	e026      	b.n	8011ac0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a72:	68fa      	ldr	r2, [r7, #12]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	4413      	add	r3, r2
 8011a78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a7a:	4b14      	ldr	r3, [pc, #80]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x94>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d209      	bcs.n	8011a9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a8a:	4b12      	ldr	r3, [pc, #72]	@ (8011ad4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x94>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f7fd fcd3 	bl	800f442 <vListInsert>
}
 8011a9c:	e010      	b.n	8011ac0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011ad8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x94>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4610      	mov	r0, r2
 8011aac:	f7fd fcc9 	bl	800f442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8011adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	68ba      	ldr	r2, [r7, #8]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d202      	bcs.n	8011ac0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011aba:	4a08      	ldr	r2, [pc, #32]	@ (8011adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	6013      	str	r3, [r2, #0]
}
 8011ac0:	bf00      	nop
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	2000b52c 	.word	0x2000b52c
 8011acc:	2000b054 	.word	0x2000b054
 8011ad0:	2000b514 	.word	0x2000b514
 8011ad4:	2000b4e4 	.word	0x2000b4e4
 8011ad8:	2000b4e0 	.word	0x2000b4e0
 8011adc:	2000b548 	.word	0x2000b548

08011ae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b08a      	sub	sp, #40	@ 0x28
 8011ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011aea:	f000 fb21 	bl	8012130 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011aee:	4b1e      	ldr	r3, [pc, #120]	@ (8011b68 <xTimerCreateTimerTask+0x88>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d021      	beq.n	8011b3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011af6:	2300      	movs	r3, #0
 8011af8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011afe:	1d3a      	adds	r2, r7, #4
 8011b00:	f107 0108 	add.w	r1, r7, #8
 8011b04:	f107 030c 	add.w	r3, r7, #12
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fd fc2f 	bl	800f36c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	68fa      	ldr	r2, [r7, #12]
 8011b14:	9202      	str	r2, [sp, #8]
 8011b16:	9301      	str	r3, [sp, #4]
 8011b18:	2302      	movs	r3, #2
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	460a      	mov	r2, r1
 8011b20:	4912      	ldr	r1, [pc, #72]	@ (8011b6c <xTimerCreateTimerTask+0x8c>)
 8011b22:	4813      	ldr	r0, [pc, #76]	@ (8011b70 <xTimerCreateTimerTask+0x90>)
 8011b24:	f7fe fe20 	bl	8010768 <xTaskCreateStatic>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	4a12      	ldr	r2, [pc, #72]	@ (8011b74 <xTimerCreateTimerTask+0x94>)
 8011b2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011b2e:	4b11      	ldr	r3, [pc, #68]	@ (8011b74 <xTimerCreateTimerTask+0x94>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011b36:	2301      	movs	r3, #1
 8011b38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d10d      	bne.n	8011b5c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8011b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b44:	b672      	cpsid	i
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	b662      	cpsie	i
 8011b54:	613b      	str	r3, [r7, #16]
}
 8011b56:	bf00      	nop
 8011b58:	bf00      	nop
 8011b5a:	e7fd      	b.n	8011b58 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011b5c:	697b      	ldr	r3, [r7, #20]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3718      	adds	r7, #24
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	2000b584 	.word	0x2000b584
 8011b6c:	0801f174 	.word	0x0801f174
 8011b70:	08011cb9 	.word	0x08011cb9
 8011b74:	2000b588 	.word	0x2000b588

08011b78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b08a      	sub	sp, #40	@ 0x28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b86:	2300      	movs	r3, #0
 8011b88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10d      	bne.n	8011bac <xTimerGenericCommand+0x34>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b94:	b672      	cpsid	i
 8011b96:	f383 8811 	msr	BASEPRI, r3
 8011b9a:	f3bf 8f6f 	isb	sy
 8011b9e:	f3bf 8f4f 	dsb	sy
 8011ba2:	b662      	cpsie	i
 8011ba4:	623b      	str	r3, [r7, #32]
}
 8011ba6:	bf00      	nop
 8011ba8:	bf00      	nop
 8011baa:	e7fd      	b.n	8011ba8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011bac:	4b19      	ldr	r3, [pc, #100]	@ (8011c14 <xTimerGenericCommand+0x9c>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d02a      	beq.n	8011c0a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	2b05      	cmp	r3, #5
 8011bc4:	dc18      	bgt.n	8011bf8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011bc6:	f7ff fc8d 	bl	80114e4 <xTaskGetSchedulerState>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b02      	cmp	r3, #2
 8011bce:	d109      	bne.n	8011be4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011bd0:	4b10      	ldr	r3, [pc, #64]	@ (8011c14 <xTimerGenericCommand+0x9c>)
 8011bd2:	6818      	ldr	r0, [r3, #0]
 8011bd4:	f107 0110 	add.w	r1, r7, #16
 8011bd8:	2300      	movs	r3, #0
 8011bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bdc:	f7fd ff20 	bl	800fa20 <xQueueGenericSend>
 8011be0:	6278      	str	r0, [r7, #36]	@ 0x24
 8011be2:	e012      	b.n	8011c0a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011be4:	4b0b      	ldr	r3, [pc, #44]	@ (8011c14 <xTimerGenericCommand+0x9c>)
 8011be6:	6818      	ldr	r0, [r3, #0]
 8011be8:	f107 0110 	add.w	r1, r7, #16
 8011bec:	2300      	movs	r3, #0
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f7fd ff16 	bl	800fa20 <xQueueGenericSend>
 8011bf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8011bf6:	e008      	b.n	8011c0a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011bf8:	4b06      	ldr	r3, [pc, #24]	@ (8011c14 <xTimerGenericCommand+0x9c>)
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	f107 0110 	add.w	r1, r7, #16
 8011c00:	2300      	movs	r3, #0
 8011c02:	683a      	ldr	r2, [r7, #0]
 8011c04:	f7fe f816 	bl	800fc34 <xQueueGenericSendFromISR>
 8011c08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3728      	adds	r7, #40	@ 0x28
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	2000b584 	.word	0x2000b584

08011c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b088      	sub	sp, #32
 8011c1c:	af02      	add	r7, sp, #8
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c22:	4b24      	ldr	r3, [pc, #144]	@ (8011cb4 <prvProcessExpiredTimer+0x9c>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	3304      	adds	r3, #4
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7fd fc3f 	bl	800f4b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c3c:	f003 0304 	and.w	r3, r3, #4
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d025      	beq.n	8011c90 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	699a      	ldr	r2, [r3, #24]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	18d1      	adds	r1, r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	683a      	ldr	r2, [r7, #0]
 8011c50:	6978      	ldr	r0, [r7, #20]
 8011c52:	f000 f8d7 	bl	8011e04 <prvInsertTimerInActiveList>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d022      	beq.n	8011ca2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	2300      	movs	r3, #0
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	2100      	movs	r1, #0
 8011c66:	6978      	ldr	r0, [r7, #20]
 8011c68:	f7ff ff86 	bl	8011b78 <xTimerGenericCommand>
 8011c6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d116      	bne.n	8011ca2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8011c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c78:	b672      	cpsid	i
 8011c7a:	f383 8811 	msr	BASEPRI, r3
 8011c7e:	f3bf 8f6f 	isb	sy
 8011c82:	f3bf 8f4f 	dsb	sy
 8011c86:	b662      	cpsie	i
 8011c88:	60fb      	str	r3, [r7, #12]
}
 8011c8a:	bf00      	nop
 8011c8c:	bf00      	nop
 8011c8e:	e7fd      	b.n	8011c8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c96:	f023 0301 	bic.w	r3, r3, #1
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	6a1b      	ldr	r3, [r3, #32]
 8011ca6:	6978      	ldr	r0, [r7, #20]
 8011ca8:	4798      	blx	r3
}
 8011caa:	bf00      	nop
 8011cac:	3718      	adds	r7, #24
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	2000b57c 	.word	0x2000b57c

08011cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cc0:	f107 0308 	add.w	r3, r7, #8
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 f859 	bl	8011d7c <prvGetNextExpireTime>
 8011cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	4619      	mov	r1, r3
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f000 f805 	bl	8011ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011cd6:	f000 f8d7 	bl	8011e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cda:	bf00      	nop
 8011cdc:	e7f0      	b.n	8011cc0 <prvTimerTask+0x8>
	...

08011ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011cea:	f7fe ffaf 	bl	8010c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011cee:	f107 0308 	add.w	r3, r7, #8
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f000 f866 	bl	8011dc4 <prvSampleTimeNow>
 8011cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d130      	bne.n	8011d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10a      	bne.n	8011d1c <prvProcessTimerOrBlockTask+0x3c>
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d806      	bhi.n	8011d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011d0e:	f7fe ffab 	bl	8010c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011d12:	68f9      	ldr	r1, [r7, #12]
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f7ff ff7f 	bl	8011c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011d1a:	e024      	b.n	8011d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d008      	beq.n	8011d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011d22:	4b13      	ldr	r3, [pc, #76]	@ (8011d70 <prvProcessTimerOrBlockTask+0x90>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d101      	bne.n	8011d30 <prvProcessTimerOrBlockTask+0x50>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e000      	b.n	8011d32 <prvProcessTimerOrBlockTask+0x52>
 8011d30:	2300      	movs	r3, #0
 8011d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011d34:	4b0f      	ldr	r3, [pc, #60]	@ (8011d74 <prvProcessTimerOrBlockTask+0x94>)
 8011d36:	6818      	ldr	r0, [r3, #0]
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	1ad3      	subs	r3, r2, r3
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	4619      	mov	r1, r3
 8011d42:	f7fe fcdd 	bl	8010700 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011d46:	f7fe ff8f 	bl	8010c68 <xTaskResumeAll>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d10a      	bne.n	8011d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011d50:	4b09      	ldr	r3, [pc, #36]	@ (8011d78 <prvProcessTimerOrBlockTask+0x98>)
 8011d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d56:	601a      	str	r2, [r3, #0]
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	f3bf 8f6f 	isb	sy
}
 8011d60:	e001      	b.n	8011d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d62:	f7fe ff81 	bl	8010c68 <xTaskResumeAll>
}
 8011d66:	bf00      	nop
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	2000b580 	.word	0x2000b580
 8011d74:	2000b584 	.word	0x2000b584
 8011d78:	e000ed04 	.word	0xe000ed04

08011d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b085      	sub	sp, #20
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d84:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc0 <prvGetNextExpireTime+0x44>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <prvGetNextExpireTime+0x16>
 8011d8e:	2201      	movs	r2, #1
 8011d90:	e000      	b.n	8011d94 <prvGetNextExpireTime+0x18>
 8011d92:	2200      	movs	r2, #0
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d105      	bne.n	8011dac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011da0:	4b07      	ldr	r3, [pc, #28]	@ (8011dc0 <prvGetNextExpireTime+0x44>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e001      	b.n	8011db0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011dac:	2300      	movs	r3, #0
 8011dae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011db0:	68fb      	ldr	r3, [r7, #12]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3714      	adds	r7, #20
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	2000b57c 	.word	0x2000b57c

08011dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011dcc:	f7fe ffec 	bl	8010da8 <xTaskGetTickCount>
 8011dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8011e00 <prvSampleTimeNow+0x3c>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d205      	bcs.n	8011de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011ddc:	f000 f940 	bl	8012060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	601a      	str	r2, [r3, #0]
 8011de6:	e002      	b.n	8011dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011dee:	4a04      	ldr	r2, [pc, #16]	@ (8011e00 <prvSampleTimeNow+0x3c>)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011df4:	68fb      	ldr	r3, [r7, #12]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	2000b58c 	.word	0x2000b58c

08011e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b086      	sub	sp, #24
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]
 8011e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011e12:	2300      	movs	r3, #0
 8011e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	68ba      	ldr	r2, [r7, #8]
 8011e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d812      	bhi.n	8011e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	1ad2      	subs	r2, r2, r3
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	699b      	ldr	r3, [r3, #24]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d302      	bcc.n	8011e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	617b      	str	r3, [r7, #20]
 8011e3c:	e01b      	b.n	8011e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e3e:	4b10      	ldr	r3, [pc, #64]	@ (8011e80 <prvInsertTimerInActiveList+0x7c>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	3304      	adds	r3, #4
 8011e46:	4619      	mov	r1, r3
 8011e48:	4610      	mov	r0, r2
 8011e4a:	f7fd fafa 	bl	800f442 <vListInsert>
 8011e4e:	e012      	b.n	8011e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d206      	bcs.n	8011e66 <prvInsertTimerInActiveList+0x62>
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d302      	bcc.n	8011e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e60:	2301      	movs	r3, #1
 8011e62:	617b      	str	r3, [r7, #20]
 8011e64:	e007      	b.n	8011e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e66:	4b07      	ldr	r3, [pc, #28]	@ (8011e84 <prvInsertTimerInActiveList+0x80>)
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	3304      	adds	r3, #4
 8011e6e:	4619      	mov	r1, r3
 8011e70:	4610      	mov	r0, r2
 8011e72:	f7fd fae6 	bl	800f442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e76:	697b      	ldr	r3, [r7, #20]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3718      	adds	r7, #24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	2000b580 	.word	0x2000b580
 8011e84:	2000b57c 	.word	0x2000b57c

08011e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b08e      	sub	sp, #56	@ 0x38
 8011e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e8e:	e0d4      	b.n	801203a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	da1b      	bge.n	8011ece <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e96:	1d3b      	adds	r3, r7, #4
 8011e98:	3304      	adds	r3, #4
 8011e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d10d      	bne.n	8011ebe <prvProcessReceivedCommands+0x36>
	__asm volatile
 8011ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea6:	b672      	cpsid	i
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	b662      	cpsie	i
 8011eb6:	61fb      	str	r3, [r7, #28]
}
 8011eb8:	bf00      	nop
 8011eba:	bf00      	nop
 8011ebc:	e7fd      	b.n	8011eba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ec4:	6850      	ldr	r0, [r2, #4]
 8011ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ec8:	6892      	ldr	r2, [r2, #8]
 8011eca:	4611      	mov	r1, r2
 8011ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f2c0 80b2 	blt.w	801203a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011edc:	695b      	ldr	r3, [r3, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d004      	beq.n	8011eec <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee4:	3304      	adds	r3, #4
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fd fae4 	bl	800f4b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011eec:	463b      	mov	r3, r7
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff ff68 	bl	8011dc4 <prvSampleTimeNow>
 8011ef4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	f200 809b 	bhi.w	8012034 <prvProcessReceivedCommands+0x1ac>
 8011efe:	a201      	add	r2, pc, #4	@ (adr r2, 8011f04 <prvProcessReceivedCommands+0x7c>)
 8011f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f04:	08011f2d 	.word	0x08011f2d
 8011f08:	08011f2d 	.word	0x08011f2d
 8011f0c:	08011f2d 	.word	0x08011f2d
 8011f10:	08011fa7 	.word	0x08011fa7
 8011f14:	08011fbb 	.word	0x08011fbb
 8011f18:	0801200b 	.word	0x0801200b
 8011f1c:	08011f2d 	.word	0x08011f2d
 8011f20:	08011f2d 	.word	0x08011f2d
 8011f24:	08011fa7 	.word	0x08011fa7
 8011f28:	08011fbb 	.word	0x08011fbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f32:	f043 0301 	orr.w	r3, r3, #1
 8011f36:	b2da      	uxtb	r2, r3
 8011f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011f3e:	68ba      	ldr	r2, [r7, #8]
 8011f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f42:	699b      	ldr	r3, [r3, #24]
 8011f44:	18d1      	adds	r1, r2, r3
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f4c:	f7ff ff5a 	bl	8011e04 <prvInsertTimerInActiveList>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d070      	beq.n	8012038 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f58:	6a1b      	ldr	r3, [r3, #32]
 8011f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f64:	f003 0304 	and.w	r3, r3, #4
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d065      	beq.n	8012038 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f70:	699b      	ldr	r3, [r3, #24]
 8011f72:	441a      	add	r2, r3
 8011f74:	2300      	movs	r3, #0
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	2300      	movs	r3, #0
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f7e:	f7ff fdfb 	bl	8011b78 <xTimerGenericCommand>
 8011f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f84:	6a3b      	ldr	r3, [r7, #32]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d156      	bne.n	8012038 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8011f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f8e:	b672      	cpsid	i
 8011f90:	f383 8811 	msr	BASEPRI, r3
 8011f94:	f3bf 8f6f 	isb	sy
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	b662      	cpsie	i
 8011f9e:	61bb      	str	r3, [r7, #24]
}
 8011fa0:	bf00      	nop
 8011fa2:	bf00      	nop
 8011fa4:	e7fd      	b.n	8011fa2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fac:	f023 0301 	bic.w	r3, r3, #1
 8011fb0:	b2da      	uxtb	r2, r3
 8011fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011fb8:	e03f      	b.n	801203a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fc0:	f043 0301 	orr.w	r3, r3, #1
 8011fc4:	b2da      	uxtb	r2, r3
 8011fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd4:	699b      	ldr	r3, [r3, #24]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10d      	bne.n	8011ff6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8011fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fde:	b672      	cpsid	i
 8011fe0:	f383 8811 	msr	BASEPRI, r3
 8011fe4:	f3bf 8f6f 	isb	sy
 8011fe8:	f3bf 8f4f 	dsb	sy
 8011fec:	b662      	cpsie	i
 8011fee:	617b      	str	r3, [r7, #20]
}
 8011ff0:	bf00      	nop
 8011ff2:	bf00      	nop
 8011ff4:	e7fd      	b.n	8011ff2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff8:	699a      	ldr	r2, [r3, #24]
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffc:	18d1      	adds	r1, r2, r3
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012004:	f7ff fefe 	bl	8011e04 <prvInsertTimerInActiveList>
					break;
 8012008:	e017      	b.n	801203a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801200a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012010:	f003 0302 	and.w	r3, r3, #2
 8012014:	2b00      	cmp	r3, #0
 8012016:	d103      	bne.n	8012020 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8012018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801201a:	f000 fbd3 	bl	80127c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801201e:	e00c      	b.n	801203a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012026:	f023 0301 	bic.w	r3, r3, #1
 801202a:	b2da      	uxtb	r2, r3
 801202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801202e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012032:	e002      	b.n	801203a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8012034:	bf00      	nop
 8012036:	e000      	b.n	801203a <prvProcessReceivedCommands+0x1b2>
					break;
 8012038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801203a:	4b08      	ldr	r3, [pc, #32]	@ (801205c <prvProcessReceivedCommands+0x1d4>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	1d39      	adds	r1, r7, #4
 8012040:	2200      	movs	r2, #0
 8012042:	4618      	mov	r0, r3
 8012044:	f7fd ff32 	bl	800feac <xQueueReceive>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	f47f af20 	bne.w	8011e90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012050:	bf00      	nop
 8012052:	bf00      	nop
 8012054:	3730      	adds	r7, #48	@ 0x30
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	2000b584 	.word	0x2000b584

08012060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012066:	e04b      	b.n	8012100 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012068:	4b2f      	ldr	r3, [pc, #188]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012072:	4b2d      	ldr	r3, [pc, #180]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3304      	adds	r3, #4
 8012080:	4618      	mov	r0, r3
 8012082:	f7fd fa17 	bl	800f4b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6a1b      	ldr	r3, [r3, #32]
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012094:	f003 0304 	and.w	r3, r3, #4
 8012098:	2b00      	cmp	r3, #0
 801209a:	d031      	beq.n	8012100 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	699b      	ldr	r3, [r3, #24]
 80120a0:	693a      	ldr	r2, [r7, #16]
 80120a2:	4413      	add	r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d90e      	bls.n	80120cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	68ba      	ldr	r2, [r7, #8]
 80120b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120ba:	4b1b      	ldr	r3, [pc, #108]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3304      	adds	r3, #4
 80120c2:	4619      	mov	r1, r3
 80120c4:	4610      	mov	r0, r2
 80120c6:	f7fd f9bc 	bl	800f442 <vListInsert>
 80120ca:	e019      	b.n	8012100 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80120cc:	2300      	movs	r3, #0
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	2300      	movs	r3, #0
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	2100      	movs	r1, #0
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7ff fd4e 	bl	8011b78 <xTimerGenericCommand>
 80120dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d10d      	bne.n	8012100 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80120e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120e8:	b672      	cpsid	i
 80120ea:	f383 8811 	msr	BASEPRI, r3
 80120ee:	f3bf 8f6f 	isb	sy
 80120f2:	f3bf 8f4f 	dsb	sy
 80120f6:	b662      	cpsie	i
 80120f8:	603b      	str	r3, [r7, #0]
}
 80120fa:	bf00      	nop
 80120fc:	bf00      	nop
 80120fe:	e7fd      	b.n	80120fc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012100:	4b09      	ldr	r3, [pc, #36]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1ae      	bne.n	8012068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801210a:	4b07      	ldr	r3, [pc, #28]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012110:	4b06      	ldr	r3, [pc, #24]	@ (801212c <prvSwitchTimerLists+0xcc>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	4a04      	ldr	r2, [pc, #16]	@ (8012128 <prvSwitchTimerLists+0xc8>)
 8012116:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012118:	4a04      	ldr	r2, [pc, #16]	@ (801212c <prvSwitchTimerLists+0xcc>)
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	6013      	str	r3, [r2, #0]
}
 801211e:	bf00      	nop
 8012120:	3718      	adds	r7, #24
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	2000b57c 	.word	0x2000b57c
 801212c:	2000b580 	.word	0x2000b580

08012130 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012136:	f000 f949 	bl	80123cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801213a:	4b15      	ldr	r3, [pc, #84]	@ (8012190 <prvCheckForValidListAndQueue+0x60>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d120      	bne.n	8012184 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012142:	4814      	ldr	r0, [pc, #80]	@ (8012194 <prvCheckForValidListAndQueue+0x64>)
 8012144:	f7fd f92c 	bl	800f3a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012148:	4813      	ldr	r0, [pc, #76]	@ (8012198 <prvCheckForValidListAndQueue+0x68>)
 801214a:	f7fd f929 	bl	800f3a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801214e:	4b13      	ldr	r3, [pc, #76]	@ (801219c <prvCheckForValidListAndQueue+0x6c>)
 8012150:	4a10      	ldr	r2, [pc, #64]	@ (8012194 <prvCheckForValidListAndQueue+0x64>)
 8012152:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012154:	4b12      	ldr	r3, [pc, #72]	@ (80121a0 <prvCheckForValidListAndQueue+0x70>)
 8012156:	4a10      	ldr	r2, [pc, #64]	@ (8012198 <prvCheckForValidListAndQueue+0x68>)
 8012158:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801215a:	2300      	movs	r3, #0
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	4b11      	ldr	r3, [pc, #68]	@ (80121a4 <prvCheckForValidListAndQueue+0x74>)
 8012160:	4a11      	ldr	r2, [pc, #68]	@ (80121a8 <prvCheckForValidListAndQueue+0x78>)
 8012162:	2110      	movs	r1, #16
 8012164:	200a      	movs	r0, #10
 8012166:	f7fd fa3b 	bl	800f5e0 <xQueueGenericCreateStatic>
 801216a:	4603      	mov	r3, r0
 801216c:	4a08      	ldr	r2, [pc, #32]	@ (8012190 <prvCheckForValidListAndQueue+0x60>)
 801216e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012170:	4b07      	ldr	r3, [pc, #28]	@ (8012190 <prvCheckForValidListAndQueue+0x60>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012178:	4b05      	ldr	r3, [pc, #20]	@ (8012190 <prvCheckForValidListAndQueue+0x60>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	490b      	ldr	r1, [pc, #44]	@ (80121ac <prvCheckForValidListAndQueue+0x7c>)
 801217e:	4618      	mov	r0, r3
 8012180:	f7fe fa6a 	bl	8010658 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012184:	f000 f958 	bl	8012438 <vPortExitCritical>
}
 8012188:	bf00      	nop
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	2000b584 	.word	0x2000b584
 8012194:	2000b554 	.word	0x2000b554
 8012198:	2000b568 	.word	0x2000b568
 801219c:	2000b57c 	.word	0x2000b57c
 80121a0:	2000b580 	.word	0x2000b580
 80121a4:	2000b630 	.word	0x2000b630
 80121a8:	2000b590 	.word	0x2000b590
 80121ac:	0801f17c 	.word	0x0801f17c

080121b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80121b0:	b480      	push	{r7}
 80121b2:	b085      	sub	sp, #20
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	3b04      	subs	r3, #4
 80121c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80121c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	3b04      	subs	r3, #4
 80121ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	f023 0201 	bic.w	r2, r3, #1
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3b04      	subs	r3, #4
 80121de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121e0:	4a0c      	ldr	r2, [pc, #48]	@ (8012214 <pxPortInitialiseStack+0x64>)
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	3b14      	subs	r3, #20
 80121ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	3b04      	subs	r3, #4
 80121f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f06f 0202 	mvn.w	r2, #2
 80121fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	3b20      	subs	r3, #32
 8012204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012206:	68fb      	ldr	r3, [r7, #12]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr
 8012214:	08012219 	.word	0x08012219

08012218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012218:	b480      	push	{r7}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012222:	4b15      	ldr	r3, [pc, #84]	@ (8012278 <prvTaskExitError+0x60>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222a:	d00d      	beq.n	8012248 <prvTaskExitError+0x30>
	__asm volatile
 801222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012230:	b672      	cpsid	i
 8012232:	f383 8811 	msr	BASEPRI, r3
 8012236:	f3bf 8f6f 	isb	sy
 801223a:	f3bf 8f4f 	dsb	sy
 801223e:	b662      	cpsie	i
 8012240:	60fb      	str	r3, [r7, #12]
}
 8012242:	bf00      	nop
 8012244:	bf00      	nop
 8012246:	e7fd      	b.n	8012244 <prvTaskExitError+0x2c>
	__asm volatile
 8012248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801224c:	b672      	cpsid	i
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	b662      	cpsie	i
 801225c:	60bb      	str	r3, [r7, #8]
}
 801225e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012260:	bf00      	nop
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d0fc      	beq.n	8012262 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012268:	bf00      	nop
 801226a:	bf00      	nop
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	20000020 	.word	0x20000020
 801227c:	00000000 	.word	0x00000000

08012280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012280:	4b07      	ldr	r3, [pc, #28]	@ (80122a0 <pxCurrentTCBConst2>)
 8012282:	6819      	ldr	r1, [r3, #0]
 8012284:	6808      	ldr	r0, [r1, #0]
 8012286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228a:	f380 8809 	msr	PSP, r0
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	f04f 0000 	mov.w	r0, #0
 8012296:	f380 8811 	msr	BASEPRI, r0
 801229a:	4770      	bx	lr
 801229c:	f3af 8000 	nop.w

080122a0 <pxCurrentTCBConst2>:
 80122a0:	2000b054 	.word	0x2000b054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80122a4:	bf00      	nop
 80122a6:	bf00      	nop

080122a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80122a8:	4808      	ldr	r0, [pc, #32]	@ (80122cc <prvPortStartFirstTask+0x24>)
 80122aa:	6800      	ldr	r0, [r0, #0]
 80122ac:	6800      	ldr	r0, [r0, #0]
 80122ae:	f380 8808 	msr	MSP, r0
 80122b2:	f04f 0000 	mov.w	r0, #0
 80122b6:	f380 8814 	msr	CONTROL, r0
 80122ba:	b662      	cpsie	i
 80122bc:	b661      	cpsie	f
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	df00      	svc	0
 80122c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122ca:	bf00      	nop
 80122cc:	e000ed08 	.word	0xe000ed08

080122d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80122d6:	4b37      	ldr	r3, [pc, #220]	@ (80123b4 <xPortStartScheduler+0xe4>)
 80122d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	22ff      	movs	r2, #255	@ 0xff
 80122e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80122f0:	78fb      	ldrb	r3, [r7, #3]
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	4b2f      	ldr	r3, [pc, #188]	@ (80123b8 <xPortStartScheduler+0xe8>)
 80122fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80122fe:	4b2f      	ldr	r3, [pc, #188]	@ (80123bc <xPortStartScheduler+0xec>)
 8012300:	2207      	movs	r2, #7
 8012302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012304:	e009      	b.n	801231a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012306:	4b2d      	ldr	r3, [pc, #180]	@ (80123bc <xPortStartScheduler+0xec>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	3b01      	subs	r3, #1
 801230c:	4a2b      	ldr	r2, [pc, #172]	@ (80123bc <xPortStartScheduler+0xec>)
 801230e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012310:	78fb      	ldrb	r3, [r7, #3]
 8012312:	b2db      	uxtb	r3, r3
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	b2db      	uxtb	r3, r3
 8012318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801231a:	78fb      	ldrb	r3, [r7, #3]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012322:	2b80      	cmp	r3, #128	@ 0x80
 8012324:	d0ef      	beq.n	8012306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012326:	4b25      	ldr	r3, [pc, #148]	@ (80123bc <xPortStartScheduler+0xec>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f1c3 0307 	rsb	r3, r3, #7
 801232e:	2b04      	cmp	r3, #4
 8012330:	d00d      	beq.n	801234e <xPortStartScheduler+0x7e>
	__asm volatile
 8012332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012336:	b672      	cpsid	i
 8012338:	f383 8811 	msr	BASEPRI, r3
 801233c:	f3bf 8f6f 	isb	sy
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	b662      	cpsie	i
 8012346:	60bb      	str	r3, [r7, #8]
}
 8012348:	bf00      	nop
 801234a:	bf00      	nop
 801234c:	e7fd      	b.n	801234a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801234e:	4b1b      	ldr	r3, [pc, #108]	@ (80123bc <xPortStartScheduler+0xec>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	021b      	lsls	r3, r3, #8
 8012354:	4a19      	ldr	r2, [pc, #100]	@ (80123bc <xPortStartScheduler+0xec>)
 8012356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012358:	4b18      	ldr	r3, [pc, #96]	@ (80123bc <xPortStartScheduler+0xec>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012360:	4a16      	ldr	r2, [pc, #88]	@ (80123bc <xPortStartScheduler+0xec>)
 8012362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	b2da      	uxtb	r2, r3
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801236c:	4b14      	ldr	r3, [pc, #80]	@ (80123c0 <xPortStartScheduler+0xf0>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a13      	ldr	r2, [pc, #76]	@ (80123c0 <xPortStartScheduler+0xf0>)
 8012372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012378:	4b11      	ldr	r3, [pc, #68]	@ (80123c0 <xPortStartScheduler+0xf0>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a10      	ldr	r2, [pc, #64]	@ (80123c0 <xPortStartScheduler+0xf0>)
 801237e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012384:	f000 f8dc 	bl	8012540 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012388:	4b0e      	ldr	r3, [pc, #56]	@ (80123c4 <xPortStartScheduler+0xf4>)
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801238e:	f000 f8fb 	bl	8012588 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012392:	4b0d      	ldr	r3, [pc, #52]	@ (80123c8 <xPortStartScheduler+0xf8>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4a0c      	ldr	r2, [pc, #48]	@ (80123c8 <xPortStartScheduler+0xf8>)
 8012398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801239c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801239e:	f7ff ff83 	bl	80122a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123a2:	f7fe fddf 	bl	8010f64 <vTaskSwitchContext>
	prvTaskExitError();
 80123a6:	f7ff ff37 	bl	8012218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123aa:	2300      	movs	r3, #0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	e000e400 	.word	0xe000e400
 80123b8:	2000b680 	.word	0x2000b680
 80123bc:	2000b684 	.word	0x2000b684
 80123c0:	e000ed20 	.word	0xe000ed20
 80123c4:	20000020 	.word	0x20000020
 80123c8:	e000ef34 	.word	0xe000ef34

080123cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
	__asm volatile
 80123d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123d6:	b672      	cpsid	i
 80123d8:	f383 8811 	msr	BASEPRI, r3
 80123dc:	f3bf 8f6f 	isb	sy
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	b662      	cpsie	i
 80123e6:	607b      	str	r3, [r7, #4]
}
 80123e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80123ea:	4b11      	ldr	r3, [pc, #68]	@ (8012430 <vPortEnterCritical+0x64>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	3301      	adds	r3, #1
 80123f0:	4a0f      	ldr	r2, [pc, #60]	@ (8012430 <vPortEnterCritical+0x64>)
 80123f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80123f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012430 <vPortEnterCritical+0x64>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d112      	bne.n	8012422 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80123fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012434 <vPortEnterCritical+0x68>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2b00      	cmp	r3, #0
 8012404:	d00d      	beq.n	8012422 <vPortEnterCritical+0x56>
	__asm volatile
 8012406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801240a:	b672      	cpsid	i
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	b662      	cpsie	i
 801241a:	603b      	str	r3, [r7, #0]
}
 801241c:	bf00      	nop
 801241e:	bf00      	nop
 8012420:	e7fd      	b.n	801241e <vPortEnterCritical+0x52>
	}
}
 8012422:	bf00      	nop
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	20000020 	.word	0x20000020
 8012434:	e000ed04 	.word	0xe000ed04

08012438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012438:	b480      	push	{r7}
 801243a:	b083      	sub	sp, #12
 801243c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801243e:	4b13      	ldr	r3, [pc, #76]	@ (801248c <vPortExitCritical+0x54>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10d      	bne.n	8012462 <vPortExitCritical+0x2a>
	__asm volatile
 8012446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801244a:	b672      	cpsid	i
 801244c:	f383 8811 	msr	BASEPRI, r3
 8012450:	f3bf 8f6f 	isb	sy
 8012454:	f3bf 8f4f 	dsb	sy
 8012458:	b662      	cpsie	i
 801245a:	607b      	str	r3, [r7, #4]
}
 801245c:	bf00      	nop
 801245e:	bf00      	nop
 8012460:	e7fd      	b.n	801245e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012462:	4b0a      	ldr	r3, [pc, #40]	@ (801248c <vPortExitCritical+0x54>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	3b01      	subs	r3, #1
 8012468:	4a08      	ldr	r2, [pc, #32]	@ (801248c <vPortExitCritical+0x54>)
 801246a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801246c:	4b07      	ldr	r3, [pc, #28]	@ (801248c <vPortExitCritical+0x54>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d105      	bne.n	8012480 <vPortExitCritical+0x48>
 8012474:	2300      	movs	r3, #0
 8012476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	f383 8811 	msr	BASEPRI, r3
}
 801247e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012480:	bf00      	nop
 8012482:	370c      	adds	r7, #12
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr
 801248c:	20000020 	.word	0x20000020

08012490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012490:	f3ef 8009 	mrs	r0, PSP
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	4b15      	ldr	r3, [pc, #84]	@ (80124f0 <pxCurrentTCBConst>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	f01e 0f10 	tst.w	lr, #16
 80124a0:	bf08      	it	eq
 80124a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124aa:	6010      	str	r0, [r2, #0]
 80124ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80124b4:	b672      	cpsid	i
 80124b6:	f380 8811 	msr	BASEPRI, r0
 80124ba:	f3bf 8f4f 	dsb	sy
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	b662      	cpsie	i
 80124c4:	f7fe fd4e 	bl	8010f64 <vTaskSwitchContext>
 80124c8:	f04f 0000 	mov.w	r0, #0
 80124cc:	f380 8811 	msr	BASEPRI, r0
 80124d0:	bc09      	pop	{r0, r3}
 80124d2:	6819      	ldr	r1, [r3, #0]
 80124d4:	6808      	ldr	r0, [r1, #0]
 80124d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124da:	f01e 0f10 	tst.w	lr, #16
 80124de:	bf08      	it	eq
 80124e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80124e4:	f380 8809 	msr	PSP, r0
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop

080124f0 <pxCurrentTCBConst>:
 80124f0:	2000b054 	.word	0x2000b054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80124f4:	bf00      	nop
 80124f6:	bf00      	nop

080124f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
	__asm volatile
 80124fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012502:	b672      	cpsid	i
 8012504:	f383 8811 	msr	BASEPRI, r3
 8012508:	f3bf 8f6f 	isb	sy
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	b662      	cpsie	i
 8012512:	607b      	str	r3, [r7, #4]
}
 8012514:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012516:	f7fe fc69 	bl	8010dec <xTaskIncrementTick>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d003      	beq.n	8012528 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012520:	4b06      	ldr	r3, [pc, #24]	@ (801253c <SysTick_Handler+0x44>)
 8012522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012526:	601a      	str	r2, [r3, #0]
 8012528:	2300      	movs	r3, #0
 801252a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	f383 8811 	msr	BASEPRI, r3
}
 8012532:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012534:	bf00      	nop
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	e000ed04 	.word	0xe000ed04

08012540 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012540:	b480      	push	{r7}
 8012542:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012544:	4b0b      	ldr	r3, [pc, #44]	@ (8012574 <vPortSetupTimerInterrupt+0x34>)
 8012546:	2200      	movs	r2, #0
 8012548:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801254a:	4b0b      	ldr	r3, [pc, #44]	@ (8012578 <vPortSetupTimerInterrupt+0x38>)
 801254c:	2200      	movs	r2, #0
 801254e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012550:	4b0a      	ldr	r3, [pc, #40]	@ (801257c <vPortSetupTimerInterrupt+0x3c>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	4a0a      	ldr	r2, [pc, #40]	@ (8012580 <vPortSetupTimerInterrupt+0x40>)
 8012556:	fba2 2303 	umull	r2, r3, r2, r3
 801255a:	099b      	lsrs	r3, r3, #6
 801255c:	4a09      	ldr	r2, [pc, #36]	@ (8012584 <vPortSetupTimerInterrupt+0x44>)
 801255e:	3b01      	subs	r3, #1
 8012560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012562:	4b04      	ldr	r3, [pc, #16]	@ (8012574 <vPortSetupTimerInterrupt+0x34>)
 8012564:	2207      	movs	r2, #7
 8012566:	601a      	str	r2, [r3, #0]
}
 8012568:	bf00      	nop
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	e000e010 	.word	0xe000e010
 8012578:	e000e018 	.word	0xe000e018
 801257c:	20000000 	.word	0x20000000
 8012580:	10624dd3 	.word	0x10624dd3
 8012584:	e000e014 	.word	0xe000e014

08012588 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012588:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012598 <vPortEnableVFP+0x10>
 801258c:	6801      	ldr	r1, [r0, #0]
 801258e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012592:	6001      	str	r1, [r0, #0]
 8012594:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012596:	bf00      	nop
 8012598:	e000ed88 	.word	0xe000ed88

0801259c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125a2:	f3ef 8305 	mrs	r3, IPSR
 80125a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2b0f      	cmp	r3, #15
 80125ac:	d917      	bls.n	80125de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012618 <vPortValidateInterruptPriority+0x7c>)
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	4413      	add	r3, r2
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125b8:	4b18      	ldr	r3, [pc, #96]	@ (801261c <vPortValidateInterruptPriority+0x80>)
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	7afa      	ldrb	r2, [r7, #11]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d20d      	bcs.n	80125de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80125c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125c6:	b672      	cpsid	i
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	b662      	cpsie	i
 80125d6:	607b      	str	r3, [r7, #4]
}
 80125d8:	bf00      	nop
 80125da:	bf00      	nop
 80125dc:	e7fd      	b.n	80125da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125de:	4b10      	ldr	r3, [pc, #64]	@ (8012620 <vPortValidateInterruptPriority+0x84>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80125e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012624 <vPortValidateInterruptPriority+0x88>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d90d      	bls.n	801260a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80125ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f2:	b672      	cpsid	i
 80125f4:	f383 8811 	msr	BASEPRI, r3
 80125f8:	f3bf 8f6f 	isb	sy
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	b662      	cpsie	i
 8012602:	603b      	str	r3, [r7, #0]
}
 8012604:	bf00      	nop
 8012606:	bf00      	nop
 8012608:	e7fd      	b.n	8012606 <vPortValidateInterruptPriority+0x6a>
	}
 801260a:	bf00      	nop
 801260c:	3714      	adds	r7, #20
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	e000e3f0 	.word	0xe000e3f0
 801261c:	2000b680 	.word	0x2000b680
 8012620:	e000ed0c 	.word	0xe000ed0c
 8012624:	2000b684 	.word	0x2000b684

08012628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08a      	sub	sp, #40	@ 0x28
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012630:	2300      	movs	r3, #0
 8012632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012634:	f7fe fb0a 	bl	8010c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012638:	4b5d      	ldr	r3, [pc, #372]	@ (80127b0 <pvPortMalloc+0x188>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d101      	bne.n	8012644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012640:	f000 f920 	bl	8012884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012644:	4b5b      	ldr	r3, [pc, #364]	@ (80127b4 <pvPortMalloc+0x18c>)
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	4013      	ands	r3, r2
 801264c:	2b00      	cmp	r3, #0
 801264e:	f040 8094 	bne.w	801277a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d020      	beq.n	801269a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012658:	2208      	movs	r2, #8
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4413      	add	r3, r2
 801265e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f003 0307 	and.w	r3, r3, #7
 8012666:	2b00      	cmp	r3, #0
 8012668:	d017      	beq.n	801269a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f023 0307 	bic.w	r3, r3, #7
 8012670:	3308      	adds	r3, #8
 8012672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f003 0307 	and.w	r3, r3, #7
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00d      	beq.n	801269a <pvPortMalloc+0x72>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012682:	b672      	cpsid	i
 8012684:	f383 8811 	msr	BASEPRI, r3
 8012688:	f3bf 8f6f 	isb	sy
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	b662      	cpsie	i
 8012692:	617b      	str	r3, [r7, #20]
}
 8012694:	bf00      	nop
 8012696:	bf00      	nop
 8012698:	e7fd      	b.n	8012696 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d06c      	beq.n	801277a <pvPortMalloc+0x152>
 80126a0:	4b45      	ldr	r3, [pc, #276]	@ (80127b8 <pvPortMalloc+0x190>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d867      	bhi.n	801277a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126aa:	4b44      	ldr	r3, [pc, #272]	@ (80127bc <pvPortMalloc+0x194>)
 80126ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126ae:	4b43      	ldr	r3, [pc, #268]	@ (80127bc <pvPortMalloc+0x194>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126b4:	e004      	b.n	80126c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80126b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d903      	bls.n	80126d2 <pvPortMalloc+0xaa>
 80126ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d1f1      	bne.n	80126b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126d2:	4b37      	ldr	r3, [pc, #220]	@ (80127b0 <pvPortMalloc+0x188>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126d8:	429a      	cmp	r2, r3
 80126da:	d04e      	beq.n	801277a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2208      	movs	r2, #8
 80126e2:	4413      	add	r3, r2
 80126e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	1ad2      	subs	r2, r2, r3
 80126f6:	2308      	movs	r3, #8
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d922      	bls.n	8012744 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80126fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4413      	add	r3, r2
 8012704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	f003 0307 	and.w	r3, r3, #7
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00d      	beq.n	801272c <pvPortMalloc+0x104>
	__asm volatile
 8012710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012714:	b672      	cpsid	i
 8012716:	f383 8811 	msr	BASEPRI, r3
 801271a:	f3bf 8f6f 	isb	sy
 801271e:	f3bf 8f4f 	dsb	sy
 8012722:	b662      	cpsie	i
 8012724:	613b      	str	r3, [r7, #16]
}
 8012726:	bf00      	nop
 8012728:	bf00      	nop
 801272a:	e7fd      	b.n	8012728 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801272e:	685a      	ldr	r2, [r3, #4]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	1ad2      	subs	r2, r2, r3
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801273e:	69b8      	ldr	r0, [r7, #24]
 8012740:	f000 f902 	bl	8012948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012744:	4b1c      	ldr	r3, [pc, #112]	@ (80127b8 <pvPortMalloc+0x190>)
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	1ad3      	subs	r3, r2, r3
 801274e:	4a1a      	ldr	r2, [pc, #104]	@ (80127b8 <pvPortMalloc+0x190>)
 8012750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012752:	4b19      	ldr	r3, [pc, #100]	@ (80127b8 <pvPortMalloc+0x190>)
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	4b1a      	ldr	r3, [pc, #104]	@ (80127c0 <pvPortMalloc+0x198>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d203      	bcs.n	8012766 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801275e:	4b16      	ldr	r3, [pc, #88]	@ (80127b8 <pvPortMalloc+0x190>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a17      	ldr	r2, [pc, #92]	@ (80127c0 <pvPortMalloc+0x198>)
 8012764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012768:	685a      	ldr	r2, [r3, #4]
 801276a:	4b12      	ldr	r3, [pc, #72]	@ (80127b4 <pvPortMalloc+0x18c>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	431a      	orrs	r2, r3
 8012770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012776:	2200      	movs	r2, #0
 8012778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801277a:	f7fe fa75 	bl	8010c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	f003 0307 	and.w	r3, r3, #7
 8012784:	2b00      	cmp	r3, #0
 8012786:	d00d      	beq.n	80127a4 <pvPortMalloc+0x17c>
	__asm volatile
 8012788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801278c:	b672      	cpsid	i
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	b662      	cpsie	i
 801279c:	60fb      	str	r3, [r7, #12]
}
 801279e:	bf00      	nop
 80127a0:	bf00      	nop
 80127a2:	e7fd      	b.n	80127a0 <pvPortMalloc+0x178>
	return pvReturn;
 80127a4:	69fb      	ldr	r3, [r7, #28]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3728      	adds	r7, #40	@ 0x28
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	20024690 	.word	0x20024690
 80127b4:	2002469c 	.word	0x2002469c
 80127b8:	20024694 	.word	0x20024694
 80127bc:	20024688 	.word	0x20024688
 80127c0:	20024698 	.word	0x20024698

080127c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d04e      	beq.n	8012874 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127d6:	2308      	movs	r3, #8
 80127d8:	425b      	negs	r3, r3
 80127da:	697a      	ldr	r2, [r7, #20]
 80127dc:	4413      	add	r3, r2
 80127de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	685a      	ldr	r2, [r3, #4]
 80127e8:	4b24      	ldr	r3, [pc, #144]	@ (801287c <vPortFree+0xb8>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4013      	ands	r3, r2
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d10d      	bne.n	801280e <vPortFree+0x4a>
	__asm volatile
 80127f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127f6:	b672      	cpsid	i
 80127f8:	f383 8811 	msr	BASEPRI, r3
 80127fc:	f3bf 8f6f 	isb	sy
 8012800:	f3bf 8f4f 	dsb	sy
 8012804:	b662      	cpsie	i
 8012806:	60fb      	str	r3, [r7, #12]
}
 8012808:	bf00      	nop
 801280a:	bf00      	nop
 801280c:	e7fd      	b.n	801280a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00d      	beq.n	8012832 <vPortFree+0x6e>
	__asm volatile
 8012816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801281a:	b672      	cpsid	i
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	b662      	cpsie	i
 801282a:	60bb      	str	r3, [r7, #8]
}
 801282c:	bf00      	nop
 801282e:	bf00      	nop
 8012830:	e7fd      	b.n	801282e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	685a      	ldr	r2, [r3, #4]
 8012836:	4b11      	ldr	r3, [pc, #68]	@ (801287c <vPortFree+0xb8>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4013      	ands	r3, r2
 801283c:	2b00      	cmp	r3, #0
 801283e:	d019      	beq.n	8012874 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d115      	bne.n	8012874 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	685a      	ldr	r2, [r3, #4]
 801284c:	4b0b      	ldr	r3, [pc, #44]	@ (801287c <vPortFree+0xb8>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	43db      	mvns	r3, r3
 8012852:	401a      	ands	r2, r3
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012858:	f7fe f9f8 	bl	8010c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	4b07      	ldr	r3, [pc, #28]	@ (8012880 <vPortFree+0xbc>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4413      	add	r3, r2
 8012866:	4a06      	ldr	r2, [pc, #24]	@ (8012880 <vPortFree+0xbc>)
 8012868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801286a:	6938      	ldr	r0, [r7, #16]
 801286c:	f000 f86c 	bl	8012948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012870:	f7fe f9fa 	bl	8010c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012874:	bf00      	nop
 8012876:	3718      	adds	r7, #24
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	2002469c 	.word	0x2002469c
 8012880:	20024694 	.word	0x20024694

08012884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801288a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801288e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012890:	4b27      	ldr	r3, [pc, #156]	@ (8012930 <prvHeapInit+0xac>)
 8012892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f003 0307 	and.w	r3, r3, #7
 801289a:	2b00      	cmp	r3, #0
 801289c:	d00c      	beq.n	80128b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	3307      	adds	r3, #7
 80128a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f023 0307 	bic.w	r3, r3, #7
 80128aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	4a1f      	ldr	r2, [pc, #124]	@ (8012930 <prvHeapInit+0xac>)
 80128b4:	4413      	add	r3, r2
 80128b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128bc:	4a1d      	ldr	r2, [pc, #116]	@ (8012934 <prvHeapInit+0xb0>)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128c2:	4b1c      	ldr	r3, [pc, #112]	@ (8012934 <prvHeapInit+0xb0>)
 80128c4:	2200      	movs	r2, #0
 80128c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	4413      	add	r3, r2
 80128ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128d0:	2208      	movs	r2, #8
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	1a9b      	subs	r3, r3, r2
 80128d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f023 0307 	bic.w	r3, r3, #7
 80128de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	4a15      	ldr	r2, [pc, #84]	@ (8012938 <prvHeapInit+0xb4>)
 80128e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80128e6:	4b14      	ldr	r3, [pc, #80]	@ (8012938 <prvHeapInit+0xb4>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2200      	movs	r2, #0
 80128ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80128ee:	4b12      	ldr	r3, [pc, #72]	@ (8012938 <prvHeapInit+0xb4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2200      	movs	r2, #0
 80128f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	68fa      	ldr	r2, [r7, #12]
 80128fe:	1ad2      	subs	r2, r2, r3
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012904:	4b0c      	ldr	r3, [pc, #48]	@ (8012938 <prvHeapInit+0xb4>)
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	4a0a      	ldr	r2, [pc, #40]	@ (801293c <prvHeapInit+0xb8>)
 8012912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	4a09      	ldr	r2, [pc, #36]	@ (8012940 <prvHeapInit+0xbc>)
 801291a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801291c:	4b09      	ldr	r3, [pc, #36]	@ (8012944 <prvHeapInit+0xc0>)
 801291e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012922:	601a      	str	r2, [r3, #0]
}
 8012924:	bf00      	nop
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr
 8012930:	2000b688 	.word	0x2000b688
 8012934:	20024688 	.word	0x20024688
 8012938:	20024690 	.word	0x20024690
 801293c:	20024698 	.word	0x20024698
 8012940:	20024694 	.word	0x20024694
 8012944:	2002469c 	.word	0x2002469c

08012948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012950:	4b28      	ldr	r3, [pc, #160]	@ (80129f4 <prvInsertBlockIntoFreeList+0xac>)
 8012952:	60fb      	str	r3, [r7, #12]
 8012954:	e002      	b.n	801295c <prvInsertBlockIntoFreeList+0x14>
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	60fb      	str	r3, [r7, #12]
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	429a      	cmp	r2, r3
 8012964:	d8f7      	bhi.n	8012956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	68ba      	ldr	r2, [r7, #8]
 8012970:	4413      	add	r3, r2
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	429a      	cmp	r2, r3
 8012976:	d108      	bne.n	801298a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	685a      	ldr	r2, [r3, #4]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	441a      	add	r2, r3
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	441a      	add	r2, r3
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	429a      	cmp	r2, r3
 801299c:	d118      	bne.n	80129d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	4b15      	ldr	r3, [pc, #84]	@ (80129f8 <prvInsertBlockIntoFreeList+0xb0>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d00d      	beq.n	80129c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	441a      	add	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	e008      	b.n	80129d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129c6:	4b0c      	ldr	r3, [pc, #48]	@ (80129f8 <prvInsertBlockIntoFreeList+0xb0>)
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	e003      	b.n	80129d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d002      	beq.n	80129e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129e6:	bf00      	nop
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	20024688 	.word	0x20024688
 80129f8:	20024690 	.word	0x20024690

080129fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012a06:	f007 facd 	bl	8019fa4 <sys_timeouts_sleeptime>
 8012a0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a12:	d10b      	bne.n	8012a2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012a14:	4813      	ldr	r0, [pc, #76]	@ (8012a64 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a16:	f00a fad2 	bl	801cfbe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f00a fa5a 	bl	801ced8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012a24:	480f      	ldr	r0, [pc, #60]	@ (8012a64 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a26:	f00a fabb 	bl	801cfa0 <sys_mutex_lock>
    return;
 8012a2a:	e018      	b.n	8012a5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d102      	bne.n	8012a38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012a32:	f007 fa7d 	bl	8019f30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a36:	e7e6      	b.n	8012a06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012a38:	480a      	ldr	r0, [pc, #40]	@ (8012a64 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a3a:	f00a fac0 	bl	801cfbe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012a3e:	68fa      	ldr	r2, [r7, #12]
 8012a40:	6839      	ldr	r1, [r7, #0]
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f00a fa48 	bl	801ced8 <sys_arch_mbox_fetch>
 8012a48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012a4a:	4806      	ldr	r0, [pc, #24]	@ (8012a64 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a4c:	f00a faa8 	bl	801cfa0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a56:	d102      	bne.n	8012a5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012a58:	f007 fa6a 	bl	8019f30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a5c:	e7d3      	b.n	8012a06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012a5e:	3710      	adds	r7, #16
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	200246ac 	.word	0x200246ac

08012a68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012a70:	4810      	ldr	r0, [pc, #64]	@ (8012ab4 <tcpip_thread+0x4c>)
 8012a72:	f00a fa95 	bl	801cfa0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012a76:	4b10      	ldr	r3, [pc, #64]	@ (8012ab8 <tcpip_thread+0x50>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d005      	beq.n	8012a8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8012ab8 <tcpip_thread+0x50>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	4a0e      	ldr	r2, [pc, #56]	@ (8012abc <tcpip_thread+0x54>)
 8012a84:	6812      	ldr	r2, [r2, #0]
 8012a86:	4610      	mov	r0, r2
 8012a88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a8a:	f107 030c 	add.w	r3, r7, #12
 8012a8e:	4619      	mov	r1, r3
 8012a90:	480b      	ldr	r0, [pc, #44]	@ (8012ac0 <tcpip_thread+0x58>)
 8012a92:	f7ff ffb3 	bl	80129fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d106      	bne.n	8012aaa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a9c:	4b09      	ldr	r3, [pc, #36]	@ (8012ac4 <tcpip_thread+0x5c>)
 8012a9e:	2291      	movs	r2, #145	@ 0x91
 8012aa0:	4909      	ldr	r1, [pc, #36]	@ (8012ac8 <tcpip_thread+0x60>)
 8012aa2:	480a      	ldr	r0, [pc, #40]	@ (8012acc <tcpip_thread+0x64>)
 8012aa4:	f00b fa94 	bl	801dfd0 <iprintf>
      continue;
 8012aa8:	e003      	b.n	8012ab2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f000 f80f 	bl	8012ad0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012ab2:	e7ea      	b.n	8012a8a <tcpip_thread+0x22>
 8012ab4:	200246ac 	.word	0x200246ac
 8012ab8:	200246a0 	.word	0x200246a0
 8012abc:	200246a4 	.word	0x200246a4
 8012ac0:	200246a8 	.word	0x200246a8
 8012ac4:	0801f184 	.word	0x0801f184
 8012ac8:	0801f1b4 	.word	0x0801f1b4
 8012acc:	0801f1d4 	.word	0x0801f1d4

08012ad0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d026      	beq.n	8012b2e <tcpip_thread_handle_msg+0x5e>
 8012ae0:	2b02      	cmp	r3, #2
 8012ae2:	dc2b      	bgt.n	8012b3c <tcpip_thread_handle_msg+0x6c>
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <tcpip_thread_handle_msg+0x1e>
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d015      	beq.n	8012b18 <tcpip_thread_handle_msg+0x48>
 8012aec:	e026      	b.n	8012b3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	6850      	ldr	r0, [r2, #4]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	6892      	ldr	r2, [r2, #8]
 8012afa:	4611      	mov	r1, r2
 8012afc:	4798      	blx	r3
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d004      	beq.n	8012b0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f001 fd07 	bl	801451c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012b0e:	6879      	ldr	r1, [r7, #4]
 8012b10:	2009      	movs	r0, #9
 8012b12:	f000 fe5f 	bl	80137d4 <memp_free>
      break;
 8012b16:	e018      	b.n	8012b4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	6892      	ldr	r2, [r2, #8]
 8012b20:	4610      	mov	r0, r2
 8012b22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012b24:	6879      	ldr	r1, [r7, #4]
 8012b26:	2008      	movs	r0, #8
 8012b28:	f000 fe54 	bl	80137d4 <memp_free>
      break;
 8012b2c:	e00d      	b.n	8012b4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	6892      	ldr	r2, [r2, #8]
 8012b36:	4610      	mov	r0, r2
 8012b38:	4798      	blx	r3
      break;
 8012b3a:	e006      	b.n	8012b4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012b3c:	4b05      	ldr	r3, [pc, #20]	@ (8012b54 <tcpip_thread_handle_msg+0x84>)
 8012b3e:	22cf      	movs	r2, #207	@ 0xcf
 8012b40:	4905      	ldr	r1, [pc, #20]	@ (8012b58 <tcpip_thread_handle_msg+0x88>)
 8012b42:	4806      	ldr	r0, [pc, #24]	@ (8012b5c <tcpip_thread_handle_msg+0x8c>)
 8012b44:	f00b fa44 	bl	801dfd0 <iprintf>
      break;
 8012b48:	bf00      	nop
  }
}
 8012b4a:	bf00      	nop
 8012b4c:	3708      	adds	r7, #8
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	0801f184 	.word	0x0801f184
 8012b58:	0801f1b4 	.word	0x0801f1b4
 8012b5c:	0801f1d4 	.word	0x0801f1d4

08012b60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b086      	sub	sp, #24
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b6c:	481a      	ldr	r0, [pc, #104]	@ (8012bd8 <tcpip_inpkt+0x78>)
 8012b6e:	f00a f9e4 	bl	801cf3a <sys_mbox_valid>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d105      	bne.n	8012b84 <tcpip_inpkt+0x24>
 8012b78:	4b18      	ldr	r3, [pc, #96]	@ (8012bdc <tcpip_inpkt+0x7c>)
 8012b7a:	22fc      	movs	r2, #252	@ 0xfc
 8012b7c:	4918      	ldr	r1, [pc, #96]	@ (8012be0 <tcpip_inpkt+0x80>)
 8012b7e:	4819      	ldr	r0, [pc, #100]	@ (8012be4 <tcpip_inpkt+0x84>)
 8012b80:	f00b fa26 	bl	801dfd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012b84:	2009      	movs	r0, #9
 8012b86:	f000 fdaf 	bl	80136e8 <memp_malloc>
 8012b8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d102      	bne.n	8012b98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012b92:	f04f 33ff 	mov.w	r3, #4294967295
 8012b96:	e01a      	b.n	8012bce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012bb0:	6979      	ldr	r1, [r7, #20]
 8012bb2:	4809      	ldr	r0, [pc, #36]	@ (8012bd8 <tcpip_inpkt+0x78>)
 8012bb4:	f00a f976 	bl	801cea4 <sys_mbox_trypost>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d006      	beq.n	8012bcc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012bbe:	6979      	ldr	r1, [r7, #20]
 8012bc0:	2009      	movs	r0, #9
 8012bc2:	f000 fe07 	bl	80137d4 <memp_free>
    return ERR_MEM;
 8012bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8012bca:	e000      	b.n	8012bce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012bcc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3718      	adds	r7, #24
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	200246a8 	.word	0x200246a8
 8012bdc:	0801f184 	.word	0x0801f184
 8012be0:	0801f1fc 	.word	0x0801f1fc
 8012be4:	0801f1d4 	.word	0x0801f1d4

08012be8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bf8:	f003 0318 	and.w	r3, r3, #24
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d006      	beq.n	8012c0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012c00:	4a08      	ldr	r2, [pc, #32]	@ (8012c24 <tcpip_input+0x3c>)
 8012c02:	6839      	ldr	r1, [r7, #0]
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7ff ffab 	bl	8012b60 <tcpip_inpkt>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	e005      	b.n	8012c1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012c0e:	4a06      	ldr	r2, [pc, #24]	@ (8012c28 <tcpip_input+0x40>)
 8012c10:	6839      	ldr	r1, [r7, #0]
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7ff ffa4 	bl	8012b60 <tcpip_inpkt>
 8012c18:	4603      	mov	r3, r0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	0801ccc5 	.word	0x0801ccc5
 8012c28:	0801bbcd 	.word	0x0801bbcd

08012c2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012c36:	4819      	ldr	r0, [pc, #100]	@ (8012c9c <tcpip_try_callback+0x70>)
 8012c38:	f00a f97f 	bl	801cf3a <sys_mbox_valid>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d106      	bne.n	8012c50 <tcpip_try_callback+0x24>
 8012c42:	4b17      	ldr	r3, [pc, #92]	@ (8012ca0 <tcpip_try_callback+0x74>)
 8012c44:	f240 125d 	movw	r2, #349	@ 0x15d
 8012c48:	4916      	ldr	r1, [pc, #88]	@ (8012ca4 <tcpip_try_callback+0x78>)
 8012c4a:	4817      	ldr	r0, [pc, #92]	@ (8012ca8 <tcpip_try_callback+0x7c>)
 8012c4c:	f00b f9c0 	bl	801dfd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012c50:	2008      	movs	r0, #8
 8012c52:	f000 fd49 	bl	80136e8 <memp_malloc>
 8012c56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d102      	bne.n	8012c64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c62:	e017      	b.n	8012c94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2201      	movs	r2, #1
 8012c68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c76:	68f9      	ldr	r1, [r7, #12]
 8012c78:	4808      	ldr	r0, [pc, #32]	@ (8012c9c <tcpip_try_callback+0x70>)
 8012c7a:	f00a f913 	bl	801cea4 <sys_mbox_trypost>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d006      	beq.n	8012c92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012c84:	68f9      	ldr	r1, [r7, #12]
 8012c86:	2008      	movs	r0, #8
 8012c88:	f000 fda4 	bl	80137d4 <memp_free>
    return ERR_MEM;
 8012c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c90:	e000      	b.n	8012c94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012c92:	2300      	movs	r3, #0
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	200246a8 	.word	0x200246a8
 8012ca0:	0801f184 	.word	0x0801f184
 8012ca4:	0801f1fc 	.word	0x0801f1fc
 8012ca8:	0801f1d4 	.word	0x0801f1d4

08012cac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012cb6:	f000 f872 	bl	8012d9e <lwip_init>

  tcpip_init_done = initfunc;
 8012cba:	4a17      	ldr	r2, [pc, #92]	@ (8012d18 <tcpip_init+0x6c>)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012cc0:	4a16      	ldr	r2, [pc, #88]	@ (8012d1c <tcpip_init+0x70>)
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012cc6:	2106      	movs	r1, #6
 8012cc8:	4815      	ldr	r0, [pc, #84]	@ (8012d20 <tcpip_init+0x74>)
 8012cca:	f00a f8d1 	bl	801ce70 <sys_mbox_new>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d006      	beq.n	8012ce2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012cd4:	4b13      	ldr	r3, [pc, #76]	@ (8012d24 <tcpip_init+0x78>)
 8012cd6:	f240 2261 	movw	r2, #609	@ 0x261
 8012cda:	4913      	ldr	r1, [pc, #76]	@ (8012d28 <tcpip_init+0x7c>)
 8012cdc:	4813      	ldr	r0, [pc, #76]	@ (8012d2c <tcpip_init+0x80>)
 8012cde:	f00b f977 	bl	801dfd0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012ce2:	4813      	ldr	r0, [pc, #76]	@ (8012d30 <tcpip_init+0x84>)
 8012ce4:	f00a f946 	bl	801cf74 <sys_mutex_new>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d006      	beq.n	8012cfc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012cee:	4b0d      	ldr	r3, [pc, #52]	@ (8012d24 <tcpip_init+0x78>)
 8012cf0:	f240 2265 	movw	r2, #613	@ 0x265
 8012cf4:	490f      	ldr	r1, [pc, #60]	@ (8012d34 <tcpip_init+0x88>)
 8012cf6:	480d      	ldr	r0, [pc, #52]	@ (8012d2c <tcpip_init+0x80>)
 8012cf8:	f00b f96a 	bl	801dfd0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012cfc:	2318      	movs	r3, #24
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d04:	2200      	movs	r2, #0
 8012d06:	490c      	ldr	r1, [pc, #48]	@ (8012d38 <tcpip_init+0x8c>)
 8012d08:	480c      	ldr	r0, [pc, #48]	@ (8012d3c <tcpip_init+0x90>)
 8012d0a:	f00a f965 	bl	801cfd8 <sys_thread_new>
}
 8012d0e:	bf00      	nop
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	200246a0 	.word	0x200246a0
 8012d1c:	200246a4 	.word	0x200246a4
 8012d20:	200246a8 	.word	0x200246a8
 8012d24:	0801f184 	.word	0x0801f184
 8012d28:	0801f20c 	.word	0x0801f20c
 8012d2c:	0801f1d4 	.word	0x0801f1d4
 8012d30:	200246ac 	.word	0x200246ac
 8012d34:	0801f230 	.word	0x0801f230
 8012d38:	08012a69 	.word	0x08012a69
 8012d3c:	0801f254 	.word	0x0801f254

08012d40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	4603      	mov	r3, r0
 8012d48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d4e:	021b      	lsls	r3, r3, #8
 8012d50:	b21a      	sxth	r2, r3
 8012d52:	88fb      	ldrh	r3, [r7, #6]
 8012d54:	0a1b      	lsrs	r3, r3, #8
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	b21b      	sxth	r3, r3
 8012d5a:	4313      	orrs	r3, r2
 8012d5c:	b21b      	sxth	r3, r3
 8012d5e:	b29b      	uxth	r3, r3
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	061a      	lsls	r2, r3, #24
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	021b      	lsls	r3, r3, #8
 8012d7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012d80:	431a      	orrs	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	0a1b      	lsrs	r3, r3, #8
 8012d86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012d8a:	431a      	orrs	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	0e1b      	lsrs	r3, r3, #24
 8012d90:	4313      	orrs	r3, r2
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b082      	sub	sp, #8
 8012da2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012da4:	2300      	movs	r3, #0
 8012da6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012da8:	f00a f8d8 	bl	801cf5c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012dac:	f000 f8d4 	bl	8012f58 <mem_init>
  memp_init();
 8012db0:	f000 fc2c 	bl	801360c <memp_init>
  pbuf_init();
  netif_init();
 8012db4:	f000 fd38 	bl	8013828 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012db8:	f007 f92c 	bl	801a014 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012dbc:	f001 fe58 	bl	8014a70 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012dc0:	f007 f86e 	bl	8019ea0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012dc4:	bf00      	nop
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012dd6:	4b05      	ldr	r3, [pc, #20]	@ (8012dec <ptr_to_mem+0x20>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	88fb      	ldrh	r3, [r7, #6]
 8012ddc:	4413      	add	r3, r2
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	370c      	adds	r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop
 8012dec:	200246c8 	.word	0x200246c8

08012df0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012df8:	4b05      	ldr	r3, [pc, #20]	@ (8012e10 <mem_to_ptr+0x20>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	b29b      	uxth	r3, r3
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	370c      	adds	r7, #12
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr
 8012e0e:	bf00      	nop
 8012e10:	200246c8 	.word	0x200246c8

08012e14 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012e14:	b590      	push	{r4, r7, lr}
 8012e16:	b085      	sub	sp, #20
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012e1c:	4b45      	ldr	r3, [pc, #276]	@ (8012f34 <plug_holes+0x120>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d206      	bcs.n	8012e34 <plug_holes+0x20>
 8012e26:	4b44      	ldr	r3, [pc, #272]	@ (8012f38 <plug_holes+0x124>)
 8012e28:	f240 12df 	movw	r2, #479	@ 0x1df
 8012e2c:	4943      	ldr	r1, [pc, #268]	@ (8012f3c <plug_holes+0x128>)
 8012e2e:	4844      	ldr	r0, [pc, #272]	@ (8012f40 <plug_holes+0x12c>)
 8012e30:	f00b f8ce 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012e34:	4b43      	ldr	r3, [pc, #268]	@ (8012f44 <plug_holes+0x130>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d306      	bcc.n	8012e4c <plug_holes+0x38>
 8012e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8012f38 <plug_holes+0x124>)
 8012e40:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012e44:	4940      	ldr	r1, [pc, #256]	@ (8012f48 <plug_holes+0x134>)
 8012e46:	483e      	ldr	r0, [pc, #248]	@ (8012f40 <plug_holes+0x12c>)
 8012e48:	f00b f8c2 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	791b      	ldrb	r3, [r3, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d006      	beq.n	8012e62 <plug_holes+0x4e>
 8012e54:	4b38      	ldr	r3, [pc, #224]	@ (8012f38 <plug_holes+0x124>)
 8012e56:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012e5a:	493c      	ldr	r1, [pc, #240]	@ (8012f4c <plug_holes+0x138>)
 8012e5c:	4838      	ldr	r0, [pc, #224]	@ (8012f40 <plug_holes+0x12c>)
 8012e5e:	f00b f8b7 	bl	801dfd0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e6a:	d906      	bls.n	8012e7a <plug_holes+0x66>
 8012e6c:	4b32      	ldr	r3, [pc, #200]	@ (8012f38 <plug_holes+0x124>)
 8012e6e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012e72:	4937      	ldr	r1, [pc, #220]	@ (8012f50 <plug_holes+0x13c>)
 8012e74:	4832      	ldr	r0, [pc, #200]	@ (8012f40 <plug_holes+0x12c>)
 8012e76:	f00b f8ab 	bl	801dfd0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7ff ffa4 	bl	8012dcc <ptr_to_mem>
 8012e84:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d024      	beq.n	8012ed8 <plug_holes+0xc4>
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	791b      	ldrb	r3, [r3, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d120      	bne.n	8012ed8 <plug_holes+0xc4>
 8012e96:	4b2b      	ldr	r3, [pc, #172]	@ (8012f44 <plug_holes+0x130>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	68fa      	ldr	r2, [r7, #12]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d01b      	beq.n	8012ed8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8012f54 <plug_holes+0x140>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d102      	bne.n	8012eb0 <plug_holes+0x9c>
      lfree = mem;
 8012eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8012f54 <plug_holes+0x140>)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	881a      	ldrh	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	881b      	ldrh	r3, [r3, #0]
 8012ebc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012ec0:	d00a      	beq.n	8012ed8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff ff80 	bl	8012dcc <ptr_to_mem>
 8012ecc:	4604      	mov	r4, r0
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7ff ff8e 	bl	8012df0 <mem_to_ptr>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	885b      	ldrh	r3, [r3, #2]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ff ff75 	bl	8012dcc <ptr_to_mem>
 8012ee2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d01f      	beq.n	8012f2c <plug_holes+0x118>
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	791b      	ldrb	r3, [r3, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d11b      	bne.n	8012f2c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012ef4:	4b17      	ldr	r3, [pc, #92]	@ (8012f54 <plug_holes+0x140>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d102      	bne.n	8012f04 <plug_holes+0xf0>
      lfree = pmem;
 8012efe:	4a15      	ldr	r2, [pc, #84]	@ (8012f54 <plug_holes+0x140>)
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	881a      	ldrh	r2, [r3, #0]
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	881b      	ldrh	r3, [r3, #0]
 8012f10:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012f14:	d00a      	beq.n	8012f2c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	881b      	ldrh	r3, [r3, #0]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7ff ff56 	bl	8012dcc <ptr_to_mem>
 8012f20:	4604      	mov	r4, r0
 8012f22:	68b8      	ldr	r0, [r7, #8]
 8012f24:	f7ff ff64 	bl	8012df0 <mem_to_ptr>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012f2c:	bf00      	nop
 8012f2e:	3714      	adds	r7, #20
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd90      	pop	{r4, r7, pc}
 8012f34:	200246c8 	.word	0x200246c8
 8012f38:	0801f264 	.word	0x0801f264
 8012f3c:	0801f294 	.word	0x0801f294
 8012f40:	0801f2ac 	.word	0x0801f2ac
 8012f44:	200246cc 	.word	0x200246cc
 8012f48:	0801f2d4 	.word	0x0801f2d4
 8012f4c:	0801f2f0 	.word	0x0801f2f0
 8012f50:	0801f30c 	.word	0x0801f30c
 8012f54:	200246d4 	.word	0x200246d4

08012f58 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012fd4 <mem_init+0x7c>)
 8012f60:	4a1d      	ldr	r2, [pc, #116]	@ (8012fd8 <mem_init+0x80>)
 8012f62:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012f64:	4b1b      	ldr	r3, [pc, #108]	@ (8012fd4 <mem_init+0x7c>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f70:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012f7e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012f82:	f7ff ff23 	bl	8012dcc <ptr_to_mem>
 8012f86:	4603      	mov	r3, r0
 8012f88:	4a14      	ldr	r2, [pc, #80]	@ (8012fdc <mem_init+0x84>)
 8012f8a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012f8c:	4b13      	ldr	r3, [pc, #76]	@ (8012fdc <mem_init+0x84>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2201      	movs	r2, #1
 8012f92:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012f94:	4b11      	ldr	r3, [pc, #68]	@ (8012fdc <mem_init+0x84>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f9c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8012fdc <mem_init+0x84>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012fa6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8012fd4 <mem_init+0x7c>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4a0c      	ldr	r2, [pc, #48]	@ (8012fe0 <mem_init+0x88>)
 8012fae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012fb0:	480c      	ldr	r0, [pc, #48]	@ (8012fe4 <mem_init+0x8c>)
 8012fb2:	f009 ffdf 	bl	801cf74 <sys_mutex_new>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d006      	beq.n	8012fca <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe8 <mem_init+0x90>)
 8012fbe:	f240 221f 	movw	r2, #543	@ 0x21f
 8012fc2:	490a      	ldr	r1, [pc, #40]	@ (8012fec <mem_init+0x94>)
 8012fc4:	480a      	ldr	r0, [pc, #40]	@ (8012ff0 <mem_init+0x98>)
 8012fc6:	f00b f803 	bl	801dfd0 <iprintf>
  }
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	200246c8 	.word	0x200246c8
 8012fd8:	20048000 	.word	0x20048000
 8012fdc:	200246cc 	.word	0x200246cc
 8012fe0:	200246d4 	.word	0x200246d4
 8012fe4:	200246d0 	.word	0x200246d0
 8012fe8:	0801f264 	.word	0x0801f264
 8012fec:	0801f338 	.word	0x0801f338
 8012ff0:	0801f2ac 	.word	0x0801f2ac

08012ff4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f7ff fef7 	bl	8012df0 <mem_to_ptr>
 8013002:	4603      	mov	r3, r0
 8013004:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fede 	bl	8012dcc <ptr_to_mem>
 8013010:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	885b      	ldrh	r3, [r3, #2]
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fed8 	bl	8012dcc <ptr_to_mem>
 801301c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	881b      	ldrh	r3, [r3, #0]
 8013022:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013026:	d818      	bhi.n	801305a <mem_link_valid+0x66>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	885b      	ldrh	r3, [r3, #2]
 801302c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013030:	d813      	bhi.n	801305a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013036:	8afa      	ldrh	r2, [r7, #22]
 8013038:	429a      	cmp	r2, r3
 801303a:	d004      	beq.n	8013046 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	8afa      	ldrh	r2, [r7, #22]
 8013042:	429a      	cmp	r2, r3
 8013044:	d109      	bne.n	801305a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013046:	4b08      	ldr	r3, [pc, #32]	@ (8013068 <mem_link_valid+0x74>)
 8013048:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801304a:	693a      	ldr	r2, [r7, #16]
 801304c:	429a      	cmp	r2, r3
 801304e:	d006      	beq.n	801305e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	885b      	ldrh	r3, [r3, #2]
 8013054:	8afa      	ldrh	r2, [r7, #22]
 8013056:	429a      	cmp	r2, r3
 8013058:	d001      	beq.n	801305e <mem_link_valid+0x6a>
    return 0;
 801305a:	2300      	movs	r3, #0
 801305c:	e000      	b.n	8013060 <mem_link_valid+0x6c>
  }
  return 1;
 801305e:	2301      	movs	r3, #1
}
 8013060:	4618      	mov	r0, r3
 8013062:	3718      	adds	r7, #24
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	200246cc 	.word	0x200246cc

0801306c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b088      	sub	sp, #32
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d070      	beq.n	801315c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f003 0303 	and.w	r3, r3, #3
 8013080:	2b00      	cmp	r3, #0
 8013082:	d00d      	beq.n	80130a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013084:	4b37      	ldr	r3, [pc, #220]	@ (8013164 <mem_free+0xf8>)
 8013086:	f240 2273 	movw	r2, #627	@ 0x273
 801308a:	4937      	ldr	r1, [pc, #220]	@ (8013168 <mem_free+0xfc>)
 801308c:	4837      	ldr	r0, [pc, #220]	@ (801316c <mem_free+0x100>)
 801308e:	f00a ff9f 	bl	801dfd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013092:	f009 ffc1 	bl	801d018 <sys_arch_protect>
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f009 ffcb 	bl	801d034 <sys_arch_unprotect>
    return;
 801309e:	e05e      	b.n	801315e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	3b08      	subs	r3, #8
 80130a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80130a6:	4b32      	ldr	r3, [pc, #200]	@ (8013170 <mem_free+0x104>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	69fa      	ldr	r2, [r7, #28]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d306      	bcc.n	80130be <mem_free+0x52>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f103 020c 	add.w	r2, r3, #12
 80130b6:	4b2f      	ldr	r3, [pc, #188]	@ (8013174 <mem_free+0x108>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d90d      	bls.n	80130da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80130be:	4b29      	ldr	r3, [pc, #164]	@ (8013164 <mem_free+0xf8>)
 80130c0:	f240 227f 	movw	r2, #639	@ 0x27f
 80130c4:	492c      	ldr	r1, [pc, #176]	@ (8013178 <mem_free+0x10c>)
 80130c6:	4829      	ldr	r0, [pc, #164]	@ (801316c <mem_free+0x100>)
 80130c8:	f00a ff82 	bl	801dfd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130cc:	f009 ffa4 	bl	801d018 <sys_arch_protect>
 80130d0:	6138      	str	r0, [r7, #16]
 80130d2:	6938      	ldr	r0, [r7, #16]
 80130d4:	f009 ffae 	bl	801d034 <sys_arch_unprotect>
    return;
 80130d8:	e041      	b.n	801315e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80130da:	4828      	ldr	r0, [pc, #160]	@ (801317c <mem_free+0x110>)
 80130dc:	f009 ff60 	bl	801cfa0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	791b      	ldrb	r3, [r3, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d110      	bne.n	801310a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80130e8:	4b1e      	ldr	r3, [pc, #120]	@ (8013164 <mem_free+0xf8>)
 80130ea:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80130ee:	4924      	ldr	r1, [pc, #144]	@ (8013180 <mem_free+0x114>)
 80130f0:	481e      	ldr	r0, [pc, #120]	@ (801316c <mem_free+0x100>)
 80130f2:	f00a ff6d 	bl	801dfd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80130f6:	4821      	ldr	r0, [pc, #132]	@ (801317c <mem_free+0x110>)
 80130f8:	f009 ff61 	bl	801cfbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130fc:	f009 ff8c 	bl	801d018 <sys_arch_protect>
 8013100:	6178      	str	r0, [r7, #20]
 8013102:	6978      	ldr	r0, [r7, #20]
 8013104:	f009 ff96 	bl	801d034 <sys_arch_unprotect>
    return;
 8013108:	e029      	b.n	801315e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801310a:	69f8      	ldr	r0, [r7, #28]
 801310c:	f7ff ff72 	bl	8012ff4 <mem_link_valid>
 8013110:	4603      	mov	r3, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d110      	bne.n	8013138 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013116:	4b13      	ldr	r3, [pc, #76]	@ (8013164 <mem_free+0xf8>)
 8013118:	f240 2295 	movw	r2, #661	@ 0x295
 801311c:	4919      	ldr	r1, [pc, #100]	@ (8013184 <mem_free+0x118>)
 801311e:	4813      	ldr	r0, [pc, #76]	@ (801316c <mem_free+0x100>)
 8013120:	f00a ff56 	bl	801dfd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013124:	4815      	ldr	r0, [pc, #84]	@ (801317c <mem_free+0x110>)
 8013126:	f009 ff4a 	bl	801cfbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801312a:	f009 ff75 	bl	801d018 <sys_arch_protect>
 801312e:	61b8      	str	r0, [r7, #24]
 8013130:	69b8      	ldr	r0, [r7, #24]
 8013132:	f009 ff7f 	bl	801d034 <sys_arch_unprotect>
    return;
 8013136:	e012      	b.n	801315e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	2200      	movs	r2, #0
 801313c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801313e:	4b12      	ldr	r3, [pc, #72]	@ (8013188 <mem_free+0x11c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	69fa      	ldr	r2, [r7, #28]
 8013144:	429a      	cmp	r2, r3
 8013146:	d202      	bcs.n	801314e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013148:	4a0f      	ldr	r2, [pc, #60]	@ (8013188 <mem_free+0x11c>)
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801314e:	69f8      	ldr	r0, [r7, #28]
 8013150:	f7ff fe60 	bl	8012e14 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013154:	4809      	ldr	r0, [pc, #36]	@ (801317c <mem_free+0x110>)
 8013156:	f009 ff32 	bl	801cfbe <sys_mutex_unlock>
 801315a:	e000      	b.n	801315e <mem_free+0xf2>
    return;
 801315c:	bf00      	nop
}
 801315e:	3720      	adds	r7, #32
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	0801f264 	.word	0x0801f264
 8013168:	0801f354 	.word	0x0801f354
 801316c:	0801f2ac 	.word	0x0801f2ac
 8013170:	200246c8 	.word	0x200246c8
 8013174:	200246cc 	.word	0x200246cc
 8013178:	0801f378 	.word	0x0801f378
 801317c:	200246d0 	.word	0x200246d0
 8013180:	0801f394 	.word	0x0801f394
 8013184:	0801f3bc 	.word	0x0801f3bc
 8013188:	200246d4 	.word	0x200246d4

0801318c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b088      	sub	sp, #32
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	460b      	mov	r3, r1
 8013196:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013198:	887b      	ldrh	r3, [r7, #2]
 801319a:	3303      	adds	r3, #3
 801319c:	b29b      	uxth	r3, r3
 801319e:	f023 0303 	bic.w	r3, r3, #3
 80131a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80131a4:	8bfb      	ldrh	r3, [r7, #30]
 80131a6:	2b0b      	cmp	r3, #11
 80131a8:	d801      	bhi.n	80131ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80131aa:	230c      	movs	r3, #12
 80131ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80131ae:	8bfb      	ldrh	r3, [r7, #30]
 80131b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80131b4:	d803      	bhi.n	80131be <mem_trim+0x32>
 80131b6:	8bfa      	ldrh	r2, [r7, #30]
 80131b8:	887b      	ldrh	r3, [r7, #2]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d201      	bcs.n	80131c2 <mem_trim+0x36>
    return NULL;
 80131be:	2300      	movs	r3, #0
 80131c0:	e0d8      	b.n	8013374 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80131c2:	4b6e      	ldr	r3, [pc, #440]	@ (801337c <mem_trim+0x1f0>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	687a      	ldr	r2, [r7, #4]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d304      	bcc.n	80131d6 <mem_trim+0x4a>
 80131cc:	4b6c      	ldr	r3, [pc, #432]	@ (8013380 <mem_trim+0x1f4>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d306      	bcc.n	80131e4 <mem_trim+0x58>
 80131d6:	4b6b      	ldr	r3, [pc, #428]	@ (8013384 <mem_trim+0x1f8>)
 80131d8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80131dc:	496a      	ldr	r1, [pc, #424]	@ (8013388 <mem_trim+0x1fc>)
 80131de:	486b      	ldr	r0, [pc, #428]	@ (801338c <mem_trim+0x200>)
 80131e0:	f00a fef6 	bl	801dfd0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80131e4:	4b65      	ldr	r3, [pc, #404]	@ (801337c <mem_trim+0x1f0>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d304      	bcc.n	80131f8 <mem_trim+0x6c>
 80131ee:	4b64      	ldr	r3, [pc, #400]	@ (8013380 <mem_trim+0x1f4>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d307      	bcc.n	8013208 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131f8:	f009 ff0e 	bl	801d018 <sys_arch_protect>
 80131fc:	60b8      	str	r0, [r7, #8]
 80131fe:	68b8      	ldr	r0, [r7, #8]
 8013200:	f009 ff18 	bl	801d034 <sys_arch_unprotect>
    return rmem;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	e0b5      	b.n	8013374 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	3b08      	subs	r3, #8
 801320c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801320e:	69b8      	ldr	r0, [r7, #24]
 8013210:	f7ff fdee 	bl	8012df0 <mem_to_ptr>
 8013214:	4603      	mov	r3, r0
 8013216:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	881a      	ldrh	r2, [r3, #0]
 801321c:	8afb      	ldrh	r3, [r7, #22]
 801321e:	1ad3      	subs	r3, r2, r3
 8013220:	b29b      	uxth	r3, r3
 8013222:	3b08      	subs	r3, #8
 8013224:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013226:	8bfa      	ldrh	r2, [r7, #30]
 8013228:	8abb      	ldrh	r3, [r7, #20]
 801322a:	429a      	cmp	r2, r3
 801322c:	d906      	bls.n	801323c <mem_trim+0xb0>
 801322e:	4b55      	ldr	r3, [pc, #340]	@ (8013384 <mem_trim+0x1f8>)
 8013230:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013234:	4956      	ldr	r1, [pc, #344]	@ (8013390 <mem_trim+0x204>)
 8013236:	4855      	ldr	r0, [pc, #340]	@ (801338c <mem_trim+0x200>)
 8013238:	f00a feca 	bl	801dfd0 <iprintf>
  if (newsize > size) {
 801323c:	8bfa      	ldrh	r2, [r7, #30]
 801323e:	8abb      	ldrh	r3, [r7, #20]
 8013240:	429a      	cmp	r2, r3
 8013242:	d901      	bls.n	8013248 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013244:	2300      	movs	r3, #0
 8013246:	e095      	b.n	8013374 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013248:	8bfa      	ldrh	r2, [r7, #30]
 801324a:	8abb      	ldrh	r3, [r7, #20]
 801324c:	429a      	cmp	r2, r3
 801324e:	d101      	bne.n	8013254 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	e08f      	b.n	8013374 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013254:	484f      	ldr	r0, [pc, #316]	@ (8013394 <mem_trim+0x208>)
 8013256:	f009 fea3 	bl	801cfa0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	4618      	mov	r0, r3
 8013260:	f7ff fdb4 	bl	8012dcc <ptr_to_mem>
 8013264:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	791b      	ldrb	r3, [r3, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d13f      	bne.n	80132ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801326e:	69bb      	ldr	r3, [r7, #24]
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013276:	d106      	bne.n	8013286 <mem_trim+0xfa>
 8013278:	4b42      	ldr	r3, [pc, #264]	@ (8013384 <mem_trim+0x1f8>)
 801327a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801327e:	4946      	ldr	r1, [pc, #280]	@ (8013398 <mem_trim+0x20c>)
 8013280:	4842      	ldr	r0, [pc, #264]	@ (801338c <mem_trim+0x200>)
 8013282:	f00a fea5 	bl	801dfd0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801328c:	8afa      	ldrh	r2, [r7, #22]
 801328e:	8bfb      	ldrh	r3, [r7, #30]
 8013290:	4413      	add	r3, r2
 8013292:	b29b      	uxth	r3, r3
 8013294:	3308      	adds	r3, #8
 8013296:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013298:	4b40      	ldr	r3, [pc, #256]	@ (801339c <mem_trim+0x210>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	693a      	ldr	r2, [r7, #16]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d106      	bne.n	80132b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80132a2:	89fb      	ldrh	r3, [r7, #14]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7ff fd91 	bl	8012dcc <ptr_to_mem>
 80132aa:	4603      	mov	r3, r0
 80132ac:	4a3b      	ldr	r2, [pc, #236]	@ (801339c <mem_trim+0x210>)
 80132ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80132b0:	89fb      	ldrh	r3, [r7, #14]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7ff fd8a 	bl	8012dcc <ptr_to_mem>
 80132b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2200      	movs	r2, #0
 80132be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	89ba      	ldrh	r2, [r7, #12]
 80132c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	8afa      	ldrh	r2, [r7, #22]
 80132ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	89fa      	ldrh	r2, [r7, #14]
 80132d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80132da:	d047      	beq.n	801336c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	881b      	ldrh	r3, [r3, #0]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff fd73 	bl	8012dcc <ptr_to_mem>
 80132e6:	4602      	mov	r2, r0
 80132e8:	89fb      	ldrh	r3, [r7, #14]
 80132ea:	8053      	strh	r3, [r2, #2]
 80132ec:	e03e      	b.n	801336c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80132ee:	8bfb      	ldrh	r3, [r7, #30]
 80132f0:	f103 0214 	add.w	r2, r3, #20
 80132f4:	8abb      	ldrh	r3, [r7, #20]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d838      	bhi.n	801336c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80132fa:	8afa      	ldrh	r2, [r7, #22]
 80132fc:	8bfb      	ldrh	r3, [r7, #30]
 80132fe:	4413      	add	r3, r2
 8013300:	b29b      	uxth	r3, r3
 8013302:	3308      	adds	r3, #8
 8013304:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801330e:	d106      	bne.n	801331e <mem_trim+0x192>
 8013310:	4b1c      	ldr	r3, [pc, #112]	@ (8013384 <mem_trim+0x1f8>)
 8013312:	f240 3216 	movw	r2, #790	@ 0x316
 8013316:	4920      	ldr	r1, [pc, #128]	@ (8013398 <mem_trim+0x20c>)
 8013318:	481c      	ldr	r0, [pc, #112]	@ (801338c <mem_trim+0x200>)
 801331a:	f00a fe59 	bl	801dfd0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801331e:	89fb      	ldrh	r3, [r7, #14]
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fd53 	bl	8012dcc <ptr_to_mem>
 8013326:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013328:	4b1c      	ldr	r3, [pc, #112]	@ (801339c <mem_trim+0x210>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	429a      	cmp	r2, r3
 8013330:	d202      	bcs.n	8013338 <mem_trim+0x1ac>
      lfree = mem2;
 8013332:	4a1a      	ldr	r2, [pc, #104]	@ (801339c <mem_trim+0x210>)
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	2200      	movs	r2, #0
 801333c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	881a      	ldrh	r2, [r3, #0]
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	8afa      	ldrh	r2, [r7, #22]
 801334a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	89fa      	ldrh	r2, [r7, #14]
 8013350:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	881b      	ldrh	r3, [r3, #0]
 8013356:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801335a:	d007      	beq.n	801336c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	4618      	mov	r0, r3
 8013362:	f7ff fd33 	bl	8012dcc <ptr_to_mem>
 8013366:	4602      	mov	r2, r0
 8013368:	89fb      	ldrh	r3, [r7, #14]
 801336a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801336c:	4809      	ldr	r0, [pc, #36]	@ (8013394 <mem_trim+0x208>)
 801336e:	f009 fe26 	bl	801cfbe <sys_mutex_unlock>
  return rmem;
 8013372:	687b      	ldr	r3, [r7, #4]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3720      	adds	r7, #32
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	200246c8 	.word	0x200246c8
 8013380:	200246cc 	.word	0x200246cc
 8013384:	0801f264 	.word	0x0801f264
 8013388:	0801f3f0 	.word	0x0801f3f0
 801338c:	0801f2ac 	.word	0x0801f2ac
 8013390:	0801f408 	.word	0x0801f408
 8013394:	200246d0 	.word	0x200246d0
 8013398:	0801f428 	.word	0x0801f428
 801339c:	200246d4 	.word	0x200246d4

080133a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4603      	mov	r3, r0
 80133a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80133aa:	88fb      	ldrh	r3, [r7, #6]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d101      	bne.n	80133b4 <mem_malloc+0x14>
    return NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	e0e2      	b.n	801357a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80133b4:	88fb      	ldrh	r3, [r7, #6]
 80133b6:	3303      	adds	r3, #3
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	f023 0303 	bic.w	r3, r3, #3
 80133be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80133c0:	8bbb      	ldrh	r3, [r7, #28]
 80133c2:	2b0b      	cmp	r3, #11
 80133c4:	d801      	bhi.n	80133ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80133c6:	230c      	movs	r3, #12
 80133c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80133ca:	8bbb      	ldrh	r3, [r7, #28]
 80133cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80133d0:	d803      	bhi.n	80133da <mem_malloc+0x3a>
 80133d2:	8bba      	ldrh	r2, [r7, #28]
 80133d4:	88fb      	ldrh	r3, [r7, #6]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d201      	bcs.n	80133de <mem_malloc+0x3e>
    return NULL;
 80133da:	2300      	movs	r3, #0
 80133dc:	e0cd      	b.n	801357a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80133de:	4869      	ldr	r0, [pc, #420]	@ (8013584 <mem_malloc+0x1e4>)
 80133e0:	f009 fdde 	bl	801cfa0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80133e4:	4b68      	ldr	r3, [pc, #416]	@ (8013588 <mem_malloc+0x1e8>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7ff fd01 	bl	8012df0 <mem_to_ptr>
 80133ee:	4603      	mov	r3, r0
 80133f0:	83fb      	strh	r3, [r7, #30]
 80133f2:	e0b7      	b.n	8013564 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80133f4:	8bfb      	ldrh	r3, [r7, #30]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ff fce8 	bl	8012dcc <ptr_to_mem>
 80133fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	791b      	ldrb	r3, [r3, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	f040 80a7 	bne.w	8013556 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	461a      	mov	r2, r3
 801340e:	8bfb      	ldrh	r3, [r7, #30]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	f1a3 0208 	sub.w	r2, r3, #8
 8013416:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013418:	429a      	cmp	r2, r3
 801341a:	f0c0 809c 	bcc.w	8013556 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	461a      	mov	r2, r3
 8013424:	8bfb      	ldrh	r3, [r7, #30]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	f1a3 0208 	sub.w	r2, r3, #8
 801342c:	8bbb      	ldrh	r3, [r7, #28]
 801342e:	3314      	adds	r3, #20
 8013430:	429a      	cmp	r2, r3
 8013432:	d333      	bcc.n	801349c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013434:	8bfa      	ldrh	r2, [r7, #30]
 8013436:	8bbb      	ldrh	r3, [r7, #28]
 8013438:	4413      	add	r3, r2
 801343a:	b29b      	uxth	r3, r3
 801343c:	3308      	adds	r3, #8
 801343e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013440:	8a7b      	ldrh	r3, [r7, #18]
 8013442:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013446:	d106      	bne.n	8013456 <mem_malloc+0xb6>
 8013448:	4b50      	ldr	r3, [pc, #320]	@ (801358c <mem_malloc+0x1ec>)
 801344a:	f240 3287 	movw	r2, #903	@ 0x387
 801344e:	4950      	ldr	r1, [pc, #320]	@ (8013590 <mem_malloc+0x1f0>)
 8013450:	4850      	ldr	r0, [pc, #320]	@ (8013594 <mem_malloc+0x1f4>)
 8013452:	f00a fdbd 	bl	801dfd0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013456:	8a7b      	ldrh	r3, [r7, #18]
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff fcb7 	bl	8012dcc <ptr_to_mem>
 801345e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2200      	movs	r2, #0
 8013464:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	881a      	ldrh	r2, [r3, #0]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	8bfa      	ldrh	r2, [r7, #30]
 8013472:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	8a7a      	ldrh	r2, [r7, #18]
 8013478:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	2201      	movs	r2, #1
 801347e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	881b      	ldrh	r3, [r3, #0]
 8013484:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013488:	d00b      	beq.n	80134a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	881b      	ldrh	r3, [r3, #0]
 801348e:	4618      	mov	r0, r3
 8013490:	f7ff fc9c 	bl	8012dcc <ptr_to_mem>
 8013494:	4602      	mov	r2, r0
 8013496:	8a7b      	ldrh	r3, [r7, #18]
 8013498:	8053      	strh	r3, [r2, #2]
 801349a:	e002      	b.n	80134a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	2201      	movs	r2, #1
 80134a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80134a2:	4b39      	ldr	r3, [pc, #228]	@ (8013588 <mem_malloc+0x1e8>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	697a      	ldr	r2, [r7, #20]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d127      	bne.n	80134fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80134ac:	4b36      	ldr	r3, [pc, #216]	@ (8013588 <mem_malloc+0x1e8>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80134b2:	e005      	b.n	80134c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7ff fc87 	bl	8012dcc <ptr_to_mem>
 80134be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	791b      	ldrb	r3, [r3, #4]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <mem_malloc+0x132>
 80134c8:	4b33      	ldr	r3, [pc, #204]	@ (8013598 <mem_malloc+0x1f8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	69ba      	ldr	r2, [r7, #24]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d1f0      	bne.n	80134b4 <mem_malloc+0x114>
          }
          lfree = cur;
 80134d2:	4a2d      	ldr	r2, [pc, #180]	@ (8013588 <mem_malloc+0x1e8>)
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80134d8:	4b2b      	ldr	r3, [pc, #172]	@ (8013588 <mem_malloc+0x1e8>)
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	4b2e      	ldr	r3, [pc, #184]	@ (8013598 <mem_malloc+0x1f8>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d00b      	beq.n	80134fc <mem_malloc+0x15c>
 80134e4:	4b28      	ldr	r3, [pc, #160]	@ (8013588 <mem_malloc+0x1e8>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	791b      	ldrb	r3, [r3, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d006      	beq.n	80134fc <mem_malloc+0x15c>
 80134ee:	4b27      	ldr	r3, [pc, #156]	@ (801358c <mem_malloc+0x1ec>)
 80134f0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80134f4:	4929      	ldr	r1, [pc, #164]	@ (801359c <mem_malloc+0x1fc>)
 80134f6:	4827      	ldr	r0, [pc, #156]	@ (8013594 <mem_malloc+0x1f4>)
 80134f8:	f00a fd6a 	bl	801dfd0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80134fc:	4821      	ldr	r0, [pc, #132]	@ (8013584 <mem_malloc+0x1e4>)
 80134fe:	f009 fd5e 	bl	801cfbe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013502:	8bba      	ldrh	r2, [r7, #28]
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	4413      	add	r3, r2
 8013508:	3308      	adds	r3, #8
 801350a:	4a23      	ldr	r2, [pc, #140]	@ (8013598 <mem_malloc+0x1f8>)
 801350c:	6812      	ldr	r2, [r2, #0]
 801350e:	4293      	cmp	r3, r2
 8013510:	d906      	bls.n	8013520 <mem_malloc+0x180>
 8013512:	4b1e      	ldr	r3, [pc, #120]	@ (801358c <mem_malloc+0x1ec>)
 8013514:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013518:	4921      	ldr	r1, [pc, #132]	@ (80135a0 <mem_malloc+0x200>)
 801351a:	481e      	ldr	r0, [pc, #120]	@ (8013594 <mem_malloc+0x1f4>)
 801351c:	f00a fd58 	bl	801dfd0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	f003 0303 	and.w	r3, r3, #3
 8013526:	2b00      	cmp	r3, #0
 8013528:	d006      	beq.n	8013538 <mem_malloc+0x198>
 801352a:	4b18      	ldr	r3, [pc, #96]	@ (801358c <mem_malloc+0x1ec>)
 801352c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013530:	491c      	ldr	r1, [pc, #112]	@ (80135a4 <mem_malloc+0x204>)
 8013532:	4818      	ldr	r0, [pc, #96]	@ (8013594 <mem_malloc+0x1f4>)
 8013534:	f00a fd4c 	bl	801dfd0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	f003 0303 	and.w	r3, r3, #3
 801353e:	2b00      	cmp	r3, #0
 8013540:	d006      	beq.n	8013550 <mem_malloc+0x1b0>
 8013542:	4b12      	ldr	r3, [pc, #72]	@ (801358c <mem_malloc+0x1ec>)
 8013544:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013548:	4917      	ldr	r1, [pc, #92]	@ (80135a8 <mem_malloc+0x208>)
 801354a:	4812      	ldr	r0, [pc, #72]	@ (8013594 <mem_malloc+0x1f4>)
 801354c:	f00a fd40 	bl	801dfd0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	3308      	adds	r3, #8
 8013554:	e011      	b.n	801357a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013556:	8bfb      	ldrh	r3, [r7, #30]
 8013558:	4618      	mov	r0, r3
 801355a:	f7ff fc37 	bl	8012dcc <ptr_to_mem>
 801355e:	4603      	mov	r3, r0
 8013560:	881b      	ldrh	r3, [r3, #0]
 8013562:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013564:	8bfa      	ldrh	r2, [r7, #30]
 8013566:	8bbb      	ldrh	r3, [r7, #28]
 8013568:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801356c:	429a      	cmp	r2, r3
 801356e:	f4ff af41 	bcc.w	80133f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013572:	4804      	ldr	r0, [pc, #16]	@ (8013584 <mem_malloc+0x1e4>)
 8013574:	f009 fd23 	bl	801cfbe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013578:	2300      	movs	r3, #0
}
 801357a:	4618      	mov	r0, r3
 801357c:	3720      	adds	r7, #32
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	200246d0 	.word	0x200246d0
 8013588:	200246d4 	.word	0x200246d4
 801358c:	0801f264 	.word	0x0801f264
 8013590:	0801f428 	.word	0x0801f428
 8013594:	0801f2ac 	.word	0x0801f2ac
 8013598:	200246cc 	.word	0x200246cc
 801359c:	0801f43c 	.word	0x0801f43c
 80135a0:	0801f458 	.word	0x0801f458
 80135a4:	0801f488 	.word	0x0801f488
 80135a8:	0801f4b8 	.word	0x0801f4b8

080135ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b085      	sub	sp, #20
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	689b      	ldr	r3, [r3, #8]
 80135b8:	2200      	movs	r2, #0
 80135ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	3303      	adds	r3, #3
 80135c2:	f023 0303 	bic.w	r3, r3, #3
 80135c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80135c8:	2300      	movs	r3, #0
 80135ca:	60fb      	str	r3, [r7, #12]
 80135cc:	e011      	b.n	80135f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	689b      	ldr	r3, [r3, #8]
 80135dc:	68ba      	ldr	r2, [r7, #8]
 80135de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	461a      	mov	r2, r3
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	4413      	add	r3, r2
 80135ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	3301      	adds	r3, #1
 80135f0:	60fb      	str	r3, [r7, #12]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	885b      	ldrh	r3, [r3, #2]
 80135f6:	461a      	mov	r2, r3
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	4293      	cmp	r3, r2
 80135fc:	dbe7      	blt.n	80135ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80135fe:	bf00      	nop
 8013600:	bf00      	nop
 8013602:	3714      	adds	r7, #20
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013612:	2300      	movs	r3, #0
 8013614:	80fb      	strh	r3, [r7, #6]
 8013616:	e009      	b.n	801362c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013618:	88fb      	ldrh	r3, [r7, #6]
 801361a:	4a08      	ldr	r2, [pc, #32]	@ (801363c <memp_init+0x30>)
 801361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013620:	4618      	mov	r0, r3
 8013622:	f7ff ffc3 	bl	80135ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013626:	88fb      	ldrh	r3, [r7, #6]
 8013628:	3301      	adds	r3, #1
 801362a:	80fb      	strh	r3, [r7, #6]
 801362c:	88fb      	ldrh	r3, [r7, #6]
 801362e:	2b0c      	cmp	r3, #12
 8013630:	d9f2      	bls.n	8013618 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013632:	bf00      	nop
 8013634:	bf00      	nop
 8013636:	3708      	adds	r7, #8
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	08022274 	.word	0x08022274

08013640 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013648:	f009 fce6 	bl	801d018 <sys_arch_protect>
 801364c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d015      	beq.n	8013688 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	689b      	ldr	r3, [r3, #8]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	6812      	ldr	r2, [r2, #0]
 8013664:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	f003 0303 	and.w	r3, r3, #3
 801366c:	2b00      	cmp	r3, #0
 801366e:	d006      	beq.n	801367e <do_memp_malloc_pool+0x3e>
 8013670:	4b09      	ldr	r3, [pc, #36]	@ (8013698 <do_memp_malloc_pool+0x58>)
 8013672:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013676:	4909      	ldr	r1, [pc, #36]	@ (801369c <do_memp_malloc_pool+0x5c>)
 8013678:	4809      	ldr	r0, [pc, #36]	@ (80136a0 <do_memp_malloc_pool+0x60>)
 801367a:	f00a fca9 	bl	801dfd0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801367e:	68f8      	ldr	r0, [r7, #12]
 8013680:	f009 fcd8 	bl	801d034 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	e003      	b.n	8013690 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	f009 fcd3 	bl	801d034 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	0801f4dc 	.word	0x0801f4dc
 801369c:	0801f50c 	.word	0x0801f50c
 80136a0:	0801f530 	.word	0x0801f530

080136a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d106      	bne.n	80136c0 <memp_malloc_pool+0x1c>
 80136b2:	4b0a      	ldr	r3, [pc, #40]	@ (80136dc <memp_malloc_pool+0x38>)
 80136b4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80136b8:	4909      	ldr	r1, [pc, #36]	@ (80136e0 <memp_malloc_pool+0x3c>)
 80136ba:	480a      	ldr	r0, [pc, #40]	@ (80136e4 <memp_malloc_pool+0x40>)
 80136bc:	f00a fc88 	bl	801dfd0 <iprintf>
  if (desc == NULL) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d101      	bne.n	80136ca <memp_malloc_pool+0x26>
    return NULL;
 80136c6:	2300      	movs	r3, #0
 80136c8:	e003      	b.n	80136d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff ffb8 	bl	8013640 <do_memp_malloc_pool>
 80136d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3708      	adds	r7, #8
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	0801f4dc 	.word	0x0801f4dc
 80136e0:	0801f558 	.word	0x0801f558
 80136e4:	0801f530 	.word	0x0801f530

080136e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b084      	sub	sp, #16
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	4603      	mov	r3, r0
 80136f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80136f2:	79fb      	ldrb	r3, [r7, #7]
 80136f4:	2b0c      	cmp	r3, #12
 80136f6:	d908      	bls.n	801370a <memp_malloc+0x22>
 80136f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013724 <memp_malloc+0x3c>)
 80136fa:	f240 1257 	movw	r2, #343	@ 0x157
 80136fe:	490a      	ldr	r1, [pc, #40]	@ (8013728 <memp_malloc+0x40>)
 8013700:	480a      	ldr	r0, [pc, #40]	@ (801372c <memp_malloc+0x44>)
 8013702:	f00a fc65 	bl	801dfd0 <iprintf>
 8013706:	2300      	movs	r3, #0
 8013708:	e008      	b.n	801371c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801370a:	79fb      	ldrb	r3, [r7, #7]
 801370c:	4a08      	ldr	r2, [pc, #32]	@ (8013730 <memp_malloc+0x48>)
 801370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013712:	4618      	mov	r0, r3
 8013714:	f7ff ff94 	bl	8013640 <do_memp_malloc_pool>
 8013718:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	0801f4dc 	.word	0x0801f4dc
 8013728:	0801f56c 	.word	0x0801f56c
 801372c:	0801f530 	.word	0x0801f530
 8013730:	08022274 	.word	0x08022274

08013734 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	f003 0303 	and.w	r3, r3, #3
 8013744:	2b00      	cmp	r3, #0
 8013746:	d006      	beq.n	8013756 <do_memp_free_pool+0x22>
 8013748:	4b0d      	ldr	r3, [pc, #52]	@ (8013780 <do_memp_free_pool+0x4c>)
 801374a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801374e:	490d      	ldr	r1, [pc, #52]	@ (8013784 <do_memp_free_pool+0x50>)
 8013750:	480d      	ldr	r0, [pc, #52]	@ (8013788 <do_memp_free_pool+0x54>)
 8013752:	f00a fc3d 	bl	801dfd0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801375a:	f009 fc5d 	bl	801d018 <sys_arch_protect>
 801375e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	689b      	ldr	r3, [r3, #8]
 801376e:	68fa      	ldr	r2, [r7, #12]
 8013770:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013772:	68b8      	ldr	r0, [r7, #8]
 8013774:	f009 fc5e 	bl	801d034 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	0801f4dc 	.word	0x0801f4dc
 8013784:	0801f58c 	.word	0x0801f58c
 8013788:	0801f530 	.word	0x0801f530

0801378c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d106      	bne.n	80137aa <memp_free_pool+0x1e>
 801379c:	4b0a      	ldr	r3, [pc, #40]	@ (80137c8 <memp_free_pool+0x3c>)
 801379e:	f240 1295 	movw	r2, #405	@ 0x195
 80137a2:	490a      	ldr	r1, [pc, #40]	@ (80137cc <memp_free_pool+0x40>)
 80137a4:	480a      	ldr	r0, [pc, #40]	@ (80137d0 <memp_free_pool+0x44>)
 80137a6:	f00a fc13 	bl	801dfd0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d007      	beq.n	80137c0 <memp_free_pool+0x34>
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d004      	beq.n	80137c0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff ffbb 	bl	8013734 <do_memp_free_pool>
 80137be:	e000      	b.n	80137c2 <memp_free_pool+0x36>
    return;
 80137c0:	bf00      	nop
}
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	0801f4dc 	.word	0x0801f4dc
 80137cc:	0801f558 	.word	0x0801f558
 80137d0:	0801f530 	.word	0x0801f530

080137d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	4603      	mov	r3, r0
 80137dc:	6039      	str	r1, [r7, #0]
 80137de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80137e0:	79fb      	ldrb	r3, [r7, #7]
 80137e2:	2b0c      	cmp	r3, #12
 80137e4:	d907      	bls.n	80137f6 <memp_free+0x22>
 80137e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013818 <memp_free+0x44>)
 80137e8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80137ec:	490b      	ldr	r1, [pc, #44]	@ (801381c <memp_free+0x48>)
 80137ee:	480c      	ldr	r0, [pc, #48]	@ (8013820 <memp_free+0x4c>)
 80137f0:	f00a fbee 	bl	801dfd0 <iprintf>
 80137f4:	e00c      	b.n	8013810 <memp_free+0x3c>

  if (mem == NULL) {
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d008      	beq.n	801380e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80137fc:	79fb      	ldrb	r3, [r7, #7]
 80137fe:	4a09      	ldr	r2, [pc, #36]	@ (8013824 <memp_free+0x50>)
 8013800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013804:	6839      	ldr	r1, [r7, #0]
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff ff94 	bl	8013734 <do_memp_free_pool>
 801380c:	e000      	b.n	8013810 <memp_free+0x3c>
    return;
 801380e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	0801f4dc 	.word	0x0801f4dc
 801381c:	0801f5ac 	.word	0x0801f5ac
 8013820:	0801f530 	.word	0x0801f530
 8013824:	08022274 	.word	0x08022274

08013828 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013828:	b480      	push	{r7}
 801382a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801382c:	bf00      	nop
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr
	...

08013838 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af00      	add	r7, sp, #0
 801383e:	60f8      	str	r0, [r7, #12]
 8013840:	60b9      	str	r1, [r7, #8]
 8013842:	607a      	str	r2, [r7, #4]
 8013844:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d108      	bne.n	801385e <netif_add+0x26>
 801384c:	4b57      	ldr	r3, [pc, #348]	@ (80139ac <netif_add+0x174>)
 801384e:	f240 1227 	movw	r2, #295	@ 0x127
 8013852:	4957      	ldr	r1, [pc, #348]	@ (80139b0 <netif_add+0x178>)
 8013854:	4857      	ldr	r0, [pc, #348]	@ (80139b4 <netif_add+0x17c>)
 8013856:	f00a fbbb 	bl	801dfd0 <iprintf>
 801385a:	2300      	movs	r3, #0
 801385c:	e0a2      	b.n	80139a4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013860:	2b00      	cmp	r3, #0
 8013862:	d108      	bne.n	8013876 <netif_add+0x3e>
 8013864:	4b51      	ldr	r3, [pc, #324]	@ (80139ac <netif_add+0x174>)
 8013866:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801386a:	4953      	ldr	r1, [pc, #332]	@ (80139b8 <netif_add+0x180>)
 801386c:	4851      	ldr	r0, [pc, #324]	@ (80139b4 <netif_add+0x17c>)
 801386e:	f00a fbaf 	bl	801dfd0 <iprintf>
 8013872:	2300      	movs	r3, #0
 8013874:	e096      	b.n	80139a4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d101      	bne.n	8013880 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801387c:	4b4f      	ldr	r3, [pc, #316]	@ (80139bc <netif_add+0x184>)
 801387e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d101      	bne.n	801388a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013886:	4b4d      	ldr	r3, [pc, #308]	@ (80139bc <netif_add+0x184>)
 8013888:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d101      	bne.n	8013894 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013890:	4b4a      	ldr	r3, [pc, #296]	@ (80139bc <netif_add+0x184>)
 8013892:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2200      	movs	r2, #0
 801389e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2200      	movs	r2, #0
 80138a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	4a45      	ldr	r2, [pc, #276]	@ (80139c0 <netif_add+0x188>)
 80138aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2200      	movs	r2, #0
 80138b0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	2200      	movs	r2, #0
 80138be:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	6a3a      	ldr	r2, [r7, #32]
 80138c4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80138c6:	4b3f      	ldr	r3, [pc, #252]	@ (80139c4 <netif_add+0x18c>)
 80138c8:	781a      	ldrb	r2, [r3, #0]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138d4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	68b9      	ldr	r1, [r7, #8]
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f000 f913 	bl	8013b08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80138e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	4798      	blx	r3
 80138e8:	4603      	mov	r3, r0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d001      	beq.n	80138f2 <netif_add+0xba>
    return NULL;
 80138ee:	2300      	movs	r3, #0
 80138f0:	e058      	b.n	80139a4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80138f8:	2bff      	cmp	r3, #255	@ 0xff
 80138fa:	d103      	bne.n	8013904 <netif_add+0xcc>
        netif->num = 0;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013904:	2300      	movs	r3, #0
 8013906:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013908:	4b2f      	ldr	r3, [pc, #188]	@ (80139c8 <netif_add+0x190>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	617b      	str	r3, [r7, #20]
 801390e:	e02b      	b.n	8013968 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013910:	697a      	ldr	r2, [r7, #20]
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	429a      	cmp	r2, r3
 8013916:	d106      	bne.n	8013926 <netif_add+0xee>
 8013918:	4b24      	ldr	r3, [pc, #144]	@ (80139ac <netif_add+0x174>)
 801391a:	f240 128b 	movw	r2, #395	@ 0x18b
 801391e:	492b      	ldr	r1, [pc, #172]	@ (80139cc <netif_add+0x194>)
 8013920:	4824      	ldr	r0, [pc, #144]	@ (80139b4 <netif_add+0x17c>)
 8013922:	f00a fb55 	bl	801dfd0 <iprintf>
        num_netifs++;
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	3301      	adds	r3, #1
 801392a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	2bff      	cmp	r3, #255	@ 0xff
 8013930:	dd06      	ble.n	8013940 <netif_add+0x108>
 8013932:	4b1e      	ldr	r3, [pc, #120]	@ (80139ac <netif_add+0x174>)
 8013934:	f240 128d 	movw	r2, #397	@ 0x18d
 8013938:	4925      	ldr	r1, [pc, #148]	@ (80139d0 <netif_add+0x198>)
 801393a:	481e      	ldr	r0, [pc, #120]	@ (80139b4 <netif_add+0x17c>)
 801393c:	f00a fb48 	bl	801dfd0 <iprintf>
        if (netif2->num == netif->num) {
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801394c:	429a      	cmp	r2, r3
 801394e:	d108      	bne.n	8013962 <netif_add+0x12a>
          netif->num++;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013956:	3301      	adds	r3, #1
 8013958:	b2da      	uxtb	r2, r3
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013960:	e005      	b.n	801396e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	617b      	str	r3, [r7, #20]
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1d0      	bne.n	8013910 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d1be      	bne.n	80138f2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801397a:	2bfe      	cmp	r3, #254	@ 0xfe
 801397c:	d103      	bne.n	8013986 <netif_add+0x14e>
    netif_num = 0;
 801397e:	4b11      	ldr	r3, [pc, #68]	@ (80139c4 <netif_add+0x18c>)
 8013980:	2200      	movs	r2, #0
 8013982:	701a      	strb	r2, [r3, #0]
 8013984:	e006      	b.n	8013994 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801398c:	3301      	adds	r3, #1
 801398e:	b2da      	uxtb	r2, r3
 8013990:	4b0c      	ldr	r3, [pc, #48]	@ (80139c4 <netif_add+0x18c>)
 8013992:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013994:	4b0c      	ldr	r3, [pc, #48]	@ (80139c8 <netif_add+0x190>)
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801399c:	4a0a      	ldr	r2, [pc, #40]	@ (80139c8 <netif_add+0x190>)
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80139a2:	68fb      	ldr	r3, [r7, #12]
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3718      	adds	r7, #24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801f5c8 	.word	0x0801f5c8
 80139b0:	0801f65c 	.word	0x0801f65c
 80139b4:	0801f618 	.word	0x0801f618
 80139b8:	0801f678 	.word	0x0801f678
 80139bc:	080222e8 	.word	0x080222e8
 80139c0:	08013de3 	.word	0x08013de3
 80139c4:	200277ac 	.word	0x200277ac
 80139c8:	200277a4 	.word	0x200277a4
 80139cc:	0801f69c 	.word	0x0801f69c
 80139d0:	0801f6b0 	.word	0x0801f6b0

080139d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80139de:	6839      	ldr	r1, [r7, #0]
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f002 fb8f 	bl	8016104 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80139e6:	6839      	ldr	r1, [r7, #0]
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f006 ff4b 	bl	801a884 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d106      	bne.n	8013a18 <netif_do_set_ipaddr+0x20>
 8013a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a80 <netif_do_set_ipaddr+0x88>)
 8013a0c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013a10:	491c      	ldr	r1, [pc, #112]	@ (8013a84 <netif_do_set_ipaddr+0x8c>)
 8013a12:	481d      	ldr	r0, [pc, #116]	@ (8013a88 <netif_do_set_ipaddr+0x90>)
 8013a14:	f00a fadc 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d106      	bne.n	8013a2c <netif_do_set_ipaddr+0x34>
 8013a1e:	4b18      	ldr	r3, [pc, #96]	@ (8013a80 <netif_do_set_ipaddr+0x88>)
 8013a20:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013a24:	4917      	ldr	r1, [pc, #92]	@ (8013a84 <netif_do_set_ipaddr+0x8c>)
 8013a26:	4818      	ldr	r0, [pc, #96]	@ (8013a88 <netif_do_set_ipaddr+0x90>)
 8013a28:	f00a fad2 	bl	801dfd0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	3304      	adds	r3, #4
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d01c      	beq.n	8013a74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	3304      	adds	r3, #4
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013a4a:	f107 0314 	add.w	r3, r7, #20
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7ff ffbf 	bl	80139d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d002      	beq.n	8013a62 <netif_do_set_ipaddr+0x6a>
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	e000      	b.n	8013a64 <netif_do_set_ipaddr+0x6c>
 8013a62:	2300      	movs	r3, #0
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013a68:	2101      	movs	r1, #1
 8013a6a:	68f8      	ldr	r0, [r7, #12]
 8013a6c:	f000 f8d2 	bl	8013c14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013a70:	2301      	movs	r3, #1
 8013a72:	e000      	b.n	8013a76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013a74:	2300      	movs	r3, #0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3718      	adds	r7, #24
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	0801f5c8 	.word	0x0801f5c8
 8013a84:	0801f6e0 	.word	0x0801f6e0
 8013a88:	0801f618 	.word	0x0801f618

08013a8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b085      	sub	sp, #20
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	3308      	adds	r3, #8
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d00a      	beq.n	8013abc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <netif_do_set_netmask+0x26>
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	e000      	b.n	8013ab4 <netif_do_set_netmask+0x28>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013ab8:	2301      	movs	r3, #1
 8013aba:	e000      	b.n	8013abe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3714      	adds	r7, #20
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac8:	4770      	bx	lr

08013aca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013aca:	b480      	push	{r7}
 8013acc:	b085      	sub	sp, #20
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	330c      	adds	r3, #12
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d00a      	beq.n	8013afa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d002      	beq.n	8013af0 <netif_do_set_gw+0x26>
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	e000      	b.n	8013af2 <netif_do_set_gw+0x28>
 8013af0:	2300      	movs	r3, #0
 8013af2:	68fa      	ldr	r2, [r7, #12]
 8013af4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013af6:	2301      	movs	r3, #1
 8013af8:	e000      	b.n	8013afc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013afa:	2300      	movs	r3, #0
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3714      	adds	r7, #20
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr

08013b08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b088      	sub	sp, #32
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d101      	bne.n	8013b28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013b24:	4b1c      	ldr	r3, [pc, #112]	@ (8013b98 <netif_set_addr+0x90>)
 8013b26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013b98 <netif_set_addr+0x90>)
 8013b30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013b38:	4b17      	ldr	r3, [pc, #92]	@ (8013b98 <netif_set_addr+0x90>)
 8013b3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <netif_set_addr+0x42>
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d101      	bne.n	8013b4e <netif_set_addr+0x46>
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	e000      	b.n	8013b50 <netif_set_addr+0x48>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d006      	beq.n	8013b66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013b58:	f107 0310 	add.w	r3, r7, #16
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	68b9      	ldr	r1, [r7, #8]
 8013b60:	68f8      	ldr	r0, [r7, #12]
 8013b62:	f7ff ff49 	bl	80139f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013b66:	69fa      	ldr	r2, [r7, #28]
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7ff ff8e 	bl	8013a8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013b70:	69ba      	ldr	r2, [r7, #24]
 8013b72:	6839      	ldr	r1, [r7, #0]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7ff ffa8 	bl	8013aca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d106      	bne.n	8013b8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013b80:	f107 0310 	add.w	r3, r7, #16
 8013b84:	461a      	mov	r2, r3
 8013b86:	68b9      	ldr	r1, [r7, #8]
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f7ff ff35 	bl	80139f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013b8e:	bf00      	nop
 8013b90:	3720      	adds	r7, #32
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	080222e8 	.word	0x080222e8

08013b9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013ba4:	4a04      	ldr	r2, [pc, #16]	@ (8013bb8 <netif_set_default+0x1c>)
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013baa:	bf00      	nop
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop
 8013bb8:	200277a8 	.word	0x200277a8

08013bbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d107      	bne.n	8013bda <netif_set_up+0x1e>
 8013bca:	4b0f      	ldr	r3, [pc, #60]	@ (8013c08 <netif_set_up+0x4c>)
 8013bcc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013bd0:	490e      	ldr	r1, [pc, #56]	@ (8013c0c <netif_set_up+0x50>)
 8013bd2:	480f      	ldr	r0, [pc, #60]	@ (8013c10 <netif_set_up+0x54>)
 8013bd4:	f00a f9fc 	bl	801dfd0 <iprintf>
 8013bd8:	e013      	b.n	8013c02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013be0:	f003 0301 	and.w	r3, r3, #1
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d10c      	bne.n	8013c02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bee:	f043 0301 	orr.w	r3, r3, #1
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013bfa:	2103      	movs	r1, #3
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 f809 	bl	8013c14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	0801f5c8 	.word	0x0801f5c8
 8013c0c:	0801f750 	.word	0x0801f750
 8013c10:	0801f618 	.word	0x0801f618

08013c14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <netif_issue_reports+0x20>
 8013c26:	4b18      	ldr	r3, [pc, #96]	@ (8013c88 <netif_issue_reports+0x74>)
 8013c28:	f240 326d 	movw	r2, #877	@ 0x36d
 8013c2c:	4917      	ldr	r1, [pc, #92]	@ (8013c8c <netif_issue_reports+0x78>)
 8013c2e:	4818      	ldr	r0, [pc, #96]	@ (8013c90 <netif_issue_reports+0x7c>)
 8013c30:	f00a f9ce 	bl	801dfd0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c3a:	f003 0304 	and.w	r3, r3, #4
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d01e      	beq.n	8013c80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d017      	beq.n	8013c80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013c50:	78fb      	ldrb	r3, [r7, #3]
 8013c52:	f003 0301 	and.w	r3, r3, #1
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d013      	beq.n	8013c82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	3304      	adds	r3, #4
 8013c5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d00e      	beq.n	8013c82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c6a:	f003 0308 	and.w	r3, r3, #8
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d007      	beq.n	8013c82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	3304      	adds	r3, #4
 8013c76:	4619      	mov	r1, r3
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f007 fd6d 	bl	801b758 <etharp_request>
 8013c7e:	e000      	b.n	8013c82 <netif_issue_reports+0x6e>
    return;
 8013c80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013c82:	3708      	adds	r7, #8
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	0801f5c8 	.word	0x0801f5c8
 8013c8c:	0801f76c 	.word	0x0801f76c
 8013c90:	0801f618 	.word	0x0801f618

08013c94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d107      	bne.n	8013cb2 <netif_set_down+0x1e>
 8013ca2:	4b12      	ldr	r3, [pc, #72]	@ (8013cec <netif_set_down+0x58>)
 8013ca4:	f240 329b 	movw	r2, #923	@ 0x39b
 8013ca8:	4911      	ldr	r1, [pc, #68]	@ (8013cf0 <netif_set_down+0x5c>)
 8013caa:	4812      	ldr	r0, [pc, #72]	@ (8013cf4 <netif_set_down+0x60>)
 8013cac:	f00a f990 	bl	801dfd0 <iprintf>
 8013cb0:	e019      	b.n	8013ce6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cb8:	f003 0301 	and.w	r3, r3, #1
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d012      	beq.n	8013ce6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cc6:	f023 0301 	bic.w	r3, r3, #1
 8013cca:	b2da      	uxtb	r2, r3
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cd8:	f003 0308 	and.w	r3, r3, #8
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d002      	beq.n	8013ce6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f007 f8f7 	bl	801aed4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013ce6:	3708      	adds	r7, #8
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	0801f5c8 	.word	0x0801f5c8
 8013cf0:	0801f790 	.word	0x0801f790
 8013cf4:	0801f618 	.word	0x0801f618

08013cf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d107      	bne.n	8013d16 <netif_set_link_up+0x1e>
 8013d06:	4b13      	ldr	r3, [pc, #76]	@ (8013d54 <netif_set_link_up+0x5c>)
 8013d08:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013d0c:	4912      	ldr	r1, [pc, #72]	@ (8013d58 <netif_set_link_up+0x60>)
 8013d0e:	4813      	ldr	r0, [pc, #76]	@ (8013d5c <netif_set_link_up+0x64>)
 8013d10:	f00a f95e 	bl	801dfd0 <iprintf>
 8013d14:	e01b      	b.n	8013d4e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d1c:	f003 0304 	and.w	r3, r3, #4
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d114      	bne.n	8013d4e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d2a:	f043 0304 	orr.w	r3, r3, #4
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013d36:	2103      	movs	r1, #3
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7ff ff6b 	bl	8013c14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	69db      	ldr	r3, [r3, #28]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d003      	beq.n	8013d4e <netif_set_link_up+0x56>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	69db      	ldr	r3, [r3, #28]
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	0801f5c8 	.word	0x0801f5c8
 8013d58:	0801f7b0 	.word	0x0801f7b0
 8013d5c:	0801f618 	.word	0x0801f618

08013d60 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d107      	bne.n	8013d7e <netif_set_link_down+0x1e>
 8013d6e:	4b11      	ldr	r3, [pc, #68]	@ (8013db4 <netif_set_link_down+0x54>)
 8013d70:	f240 4206 	movw	r2, #1030	@ 0x406
 8013d74:	4910      	ldr	r1, [pc, #64]	@ (8013db8 <netif_set_link_down+0x58>)
 8013d76:	4811      	ldr	r0, [pc, #68]	@ (8013dbc <netif_set_link_down+0x5c>)
 8013d78:	f00a f92a 	bl	801dfd0 <iprintf>
 8013d7c:	e017      	b.n	8013dae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d84:	f003 0304 	and.w	r3, r3, #4
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d010      	beq.n	8013dae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d92:	f023 0304 	bic.w	r3, r3, #4
 8013d96:	b2da      	uxtb	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	69db      	ldr	r3, [r3, #28]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d003      	beq.n	8013dae <netif_set_link_down+0x4e>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	69db      	ldr	r3, [r3, #28]
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	0801f5c8 	.word	0x0801f5c8
 8013db8:	0801f7d4 	.word	0x0801f7d4
 8013dbc:	0801f618 	.word	0x0801f618

08013dc0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d002      	beq.n	8013dd6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	683a      	ldr	r2, [r7, #0]
 8013dd4:	61da      	str	r2, [r3, #28]
  }
}
 8013dd6:	bf00      	nop
 8013dd8:	370c      	adds	r7, #12
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr

08013de2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013de2:	b480      	push	{r7}
 8013de4:	b085      	sub	sp, #20
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	60f8      	str	r0, [r7, #12]
 8013dea:	60b9      	str	r1, [r7, #8]
 8013dec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013dee:	f06f 030b 	mvn.w	r3, #11
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3714      	adds	r7, #20
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
	...

08013e00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b085      	sub	sp, #20
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013e0a:	79fb      	ldrb	r3, [r7, #7]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d013      	beq.n	8013e38 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013e10:	4b0d      	ldr	r3, [pc, #52]	@ (8013e48 <netif_get_by_index+0x48>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	60fb      	str	r3, [r7, #12]
 8013e16:	e00c      	b.n	8013e32 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e1e:	3301      	adds	r3, #1
 8013e20:	b2db      	uxtb	r3, r3
 8013e22:	79fa      	ldrb	r2, [r7, #7]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d101      	bne.n	8013e2c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	e006      	b.n	8013e3a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	60fb      	str	r3, [r7, #12]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d1ef      	bne.n	8013e18 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013e38:	2300      	movs	r3, #0
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	200277a4 	.word	0x200277a4

08013e4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013e52:	f009 f8e1 	bl	801d018 <sys_arch_protect>
 8013e56:	6038      	str	r0, [r7, #0]
 8013e58:	4b0d      	ldr	r3, [pc, #52]	@ (8013e90 <pbuf_free_ooseq+0x44>)
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	701a      	strb	r2, [r3, #0]
 8013e5e:	6838      	ldr	r0, [r7, #0]
 8013e60:	f009 f8e8 	bl	801d034 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e64:	4b0b      	ldr	r3, [pc, #44]	@ (8013e94 <pbuf_free_ooseq+0x48>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	607b      	str	r3, [r7, #4]
 8013e6a:	e00a      	b.n	8013e82 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d003      	beq.n	8013e7c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f002 f983 	bl	8016180 <tcp_free_ooseq>
      return;
 8013e7a:	e005      	b.n	8013e88 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	607b      	str	r3, [r7, #4]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1f1      	bne.n	8013e6c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	200277ad 	.word	0x200277ad
 8013e94:	200277bc 	.word	0x200277bc

08013e98 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013ea0:	f7ff ffd4 	bl	8013e4c <pbuf_free_ooseq>
}
 8013ea4:	bf00      	nop
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013eb2:	f009 f8b1 	bl	801d018 <sys_arch_protect>
 8013eb6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8013ef8 <pbuf_pool_is_empty+0x4c>)
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8013ef8 <pbuf_pool_is_empty+0x4c>)
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f009 f8b5 	bl	801d034 <sys_arch_unprotect>

  if (!queued) {
 8013eca:	78fb      	ldrb	r3, [r7, #3]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10f      	bne.n	8013ef0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	480a      	ldr	r0, [pc, #40]	@ (8013efc <pbuf_pool_is_empty+0x50>)
 8013ed4:	f7fe feaa 	bl	8012c2c <tcpip_try_callback>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d008      	beq.n	8013ef0 <pbuf_pool_is_empty+0x44>
 8013ede:	f009 f89b 	bl	801d018 <sys_arch_protect>
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	4b04      	ldr	r3, [pc, #16]	@ (8013ef8 <pbuf_pool_is_empty+0x4c>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	701a      	strb	r2, [r3, #0]
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f009 f8a2 	bl	801d034 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	200277ad 	.word	0x200277ad
 8013efc:	08013e99 	.word	0x08013e99

08013f00 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b085      	sub	sp, #20
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	4611      	mov	r1, r2
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	460b      	mov	r3, r1
 8013f10:	80fb      	strh	r3, [r7, #6]
 8013f12:	4613      	mov	r3, r2
 8013f14:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	88fa      	ldrh	r2, [r7, #6]
 8013f26:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	88ba      	ldrh	r2, [r7, #4]
 8013f2c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013f2e:	8b3b      	ldrh	r3, [r7, #24]
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	7f3a      	ldrb	r2, [r7, #28]
 8013f3a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2201      	movs	r2, #1
 8013f40:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2200      	movs	r2, #0
 8013f46:	73da      	strb	r2, [r3, #15]
}
 8013f48:	bf00      	nop
 8013f4a:	3714      	adds	r7, #20
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr

08013f54 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08c      	sub	sp, #48	@ 0x30
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	71fb      	strb	r3, [r7, #7]
 8013f5e:	460b      	mov	r3, r1
 8013f60:	80bb      	strh	r3, [r7, #4]
 8013f62:	4613      	mov	r3, r2
 8013f64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013f66:	79fb      	ldrb	r3, [r7, #7]
 8013f68:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013f6a:	887b      	ldrh	r3, [r7, #2]
 8013f6c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f70:	d07f      	beq.n	8014072 <pbuf_alloc+0x11e>
 8013f72:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f76:	f300 80c8 	bgt.w	801410a <pbuf_alloc+0x1b6>
 8013f7a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f7e:	d010      	beq.n	8013fa2 <pbuf_alloc+0x4e>
 8013f80:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f84:	f300 80c1 	bgt.w	801410a <pbuf_alloc+0x1b6>
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d002      	beq.n	8013f92 <pbuf_alloc+0x3e>
 8013f8c:	2b41      	cmp	r3, #65	@ 0x41
 8013f8e:	f040 80bc 	bne.w	801410a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013f92:	887a      	ldrh	r2, [r7, #2]
 8013f94:	88bb      	ldrh	r3, [r7, #4]
 8013f96:	4619      	mov	r1, r3
 8013f98:	2000      	movs	r0, #0
 8013f9a:	f000 f8d1 	bl	8014140 <pbuf_alloc_reference>
 8013f9e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013fa0:	e0bd      	b.n	801411e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013faa:	88bb      	ldrh	r3, [r7, #4]
 8013fac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013fae:	200c      	movs	r0, #12
 8013fb0:	f7ff fb9a 	bl	80136e8 <memp_malloc>
 8013fb4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d109      	bne.n	8013fd0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013fbc:	f7ff ff76 	bl	8013eac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d002      	beq.n	8013fcc <pbuf_alloc+0x78>
            pbuf_free(p);
 8013fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013fc8:	f000 faa8 	bl	801451c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	e0a7      	b.n	8014120 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013fd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fd2:	3303      	adds	r3, #3
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	f023 0303 	bic.w	r3, r3, #3
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	8b7a      	ldrh	r2, [r7, #26]
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	bf28      	it	cs
 8013fe8:	4613      	movcs	r3, r2
 8013fea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013fec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fee:	3310      	adds	r3, #16
 8013ff0:	693a      	ldr	r2, [r7, #16]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	3303      	adds	r3, #3
 8013ff6:	f023 0303 	bic.w	r3, r3, #3
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	89f9      	ldrh	r1, [r7, #14]
 8013ffe:	8b7a      	ldrh	r2, [r7, #26]
 8014000:	2300      	movs	r3, #0
 8014002:	9301      	str	r3, [sp, #4]
 8014004:	887b      	ldrh	r3, [r7, #2]
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	460b      	mov	r3, r1
 801400a:	4601      	mov	r1, r0
 801400c:	6938      	ldr	r0, [r7, #16]
 801400e:	f7ff ff77 	bl	8013f00 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	f003 0303 	and.w	r3, r3, #3
 801401a:	2b00      	cmp	r3, #0
 801401c:	d006      	beq.n	801402c <pbuf_alloc+0xd8>
 801401e:	4b42      	ldr	r3, [pc, #264]	@ (8014128 <pbuf_alloc+0x1d4>)
 8014020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014024:	4941      	ldr	r1, [pc, #260]	@ (801412c <pbuf_alloc+0x1d8>)
 8014026:	4842      	ldr	r0, [pc, #264]	@ (8014130 <pbuf_alloc+0x1dc>)
 8014028:	f009 ffd2 	bl	801dfd0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801402c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801402e:	3303      	adds	r3, #3
 8014030:	f023 0303 	bic.w	r3, r3, #3
 8014034:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014038:	d106      	bne.n	8014048 <pbuf_alloc+0xf4>
 801403a:	4b3b      	ldr	r3, [pc, #236]	@ (8014128 <pbuf_alloc+0x1d4>)
 801403c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014040:	493c      	ldr	r1, [pc, #240]	@ (8014134 <pbuf_alloc+0x1e0>)
 8014042:	483b      	ldr	r0, [pc, #236]	@ (8014130 <pbuf_alloc+0x1dc>)
 8014044:	f009 ffc4 	bl	801dfd0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404a:	2b00      	cmp	r3, #0
 801404c:	d102      	bne.n	8014054 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	627b      	str	r3, [r7, #36]	@ 0x24
 8014052:	e002      	b.n	801405a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	693a      	ldr	r2, [r7, #16]
 8014058:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801405e:	8b7a      	ldrh	r2, [r7, #26]
 8014060:	89fb      	ldrh	r3, [r7, #14]
 8014062:	1ad3      	subs	r3, r2, r3
 8014064:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014066:	2300      	movs	r3, #0
 8014068:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801406a:	8b7b      	ldrh	r3, [r7, #26]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d19e      	bne.n	8013fae <pbuf_alloc+0x5a>
      break;
 8014070:	e055      	b.n	801411e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014072:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014074:	3303      	adds	r3, #3
 8014076:	b29b      	uxth	r3, r3
 8014078:	f023 0303 	bic.w	r3, r3, #3
 801407c:	b29a      	uxth	r2, r3
 801407e:	88bb      	ldrh	r3, [r7, #4]
 8014080:	3303      	adds	r3, #3
 8014082:	b29b      	uxth	r3, r3
 8014084:	f023 0303 	bic.w	r3, r3, #3
 8014088:	b29b      	uxth	r3, r3
 801408a:	4413      	add	r3, r2
 801408c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801408e:	8b3b      	ldrh	r3, [r7, #24]
 8014090:	3310      	adds	r3, #16
 8014092:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014094:	8b3a      	ldrh	r2, [r7, #24]
 8014096:	88bb      	ldrh	r3, [r7, #4]
 8014098:	3303      	adds	r3, #3
 801409a:	f023 0303 	bic.w	r3, r3, #3
 801409e:	429a      	cmp	r2, r3
 80140a0:	d306      	bcc.n	80140b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80140a2:	8afa      	ldrh	r2, [r7, #22]
 80140a4:	88bb      	ldrh	r3, [r7, #4]
 80140a6:	3303      	adds	r3, #3
 80140a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d201      	bcs.n	80140b4 <pbuf_alloc+0x160>
        return NULL;
 80140b0:	2300      	movs	r3, #0
 80140b2:	e035      	b.n	8014120 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80140b4:	8afb      	ldrh	r3, [r7, #22]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7ff f972 	bl	80133a0 <mem_malloc>
 80140bc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d101      	bne.n	80140c8 <pbuf_alloc+0x174>
        return NULL;
 80140c4:	2300      	movs	r3, #0
 80140c6:	e02b      	b.n	8014120 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80140c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80140ca:	3310      	adds	r3, #16
 80140cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140ce:	4413      	add	r3, r2
 80140d0:	3303      	adds	r3, #3
 80140d2:	f023 0303 	bic.w	r3, r3, #3
 80140d6:	4618      	mov	r0, r3
 80140d8:	88b9      	ldrh	r1, [r7, #4]
 80140da:	88ba      	ldrh	r2, [r7, #4]
 80140dc:	2300      	movs	r3, #0
 80140de:	9301      	str	r3, [sp, #4]
 80140e0:	887b      	ldrh	r3, [r7, #2]
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	460b      	mov	r3, r1
 80140e6:	4601      	mov	r1, r0
 80140e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140ea:	f7ff ff09 	bl	8013f00 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80140ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	f003 0303 	and.w	r3, r3, #3
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d010      	beq.n	801411c <pbuf_alloc+0x1c8>
 80140fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014128 <pbuf_alloc+0x1d4>)
 80140fc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8014100:	490d      	ldr	r1, [pc, #52]	@ (8014138 <pbuf_alloc+0x1e4>)
 8014102:	480b      	ldr	r0, [pc, #44]	@ (8014130 <pbuf_alloc+0x1dc>)
 8014104:	f009 ff64 	bl	801dfd0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014108:	e008      	b.n	801411c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801410a:	4b07      	ldr	r3, [pc, #28]	@ (8014128 <pbuf_alloc+0x1d4>)
 801410c:	f240 1227 	movw	r2, #295	@ 0x127
 8014110:	490a      	ldr	r1, [pc, #40]	@ (801413c <pbuf_alloc+0x1e8>)
 8014112:	4807      	ldr	r0, [pc, #28]	@ (8014130 <pbuf_alloc+0x1dc>)
 8014114:	f009 ff5c 	bl	801dfd0 <iprintf>
      return NULL;
 8014118:	2300      	movs	r3, #0
 801411a:	e001      	b.n	8014120 <pbuf_alloc+0x1cc>
      break;
 801411c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014120:	4618      	mov	r0, r3
 8014122:	3728      	adds	r7, #40	@ 0x28
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	0801f7f8 	.word	0x0801f7f8
 801412c:	0801f828 	.word	0x0801f828
 8014130:	0801f858 	.word	0x0801f858
 8014134:	0801f880 	.word	0x0801f880
 8014138:	0801f8b4 	.word	0x0801f8b4
 801413c:	0801f8e0 	.word	0x0801f8e0

08014140 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af02      	add	r7, sp, #8
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	460b      	mov	r3, r1
 801414a:	807b      	strh	r3, [r7, #2]
 801414c:	4613      	mov	r3, r2
 801414e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014150:	883b      	ldrh	r3, [r7, #0]
 8014152:	2b41      	cmp	r3, #65	@ 0x41
 8014154:	d009      	beq.n	801416a <pbuf_alloc_reference+0x2a>
 8014156:	883b      	ldrh	r3, [r7, #0]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d006      	beq.n	801416a <pbuf_alloc_reference+0x2a>
 801415c:	4b0f      	ldr	r3, [pc, #60]	@ (801419c <pbuf_alloc_reference+0x5c>)
 801415e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014162:	490f      	ldr	r1, [pc, #60]	@ (80141a0 <pbuf_alloc_reference+0x60>)
 8014164:	480f      	ldr	r0, [pc, #60]	@ (80141a4 <pbuf_alloc_reference+0x64>)
 8014166:	f009 ff33 	bl	801dfd0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801416a:	200b      	movs	r0, #11
 801416c:	f7ff fabc 	bl	80136e8 <memp_malloc>
 8014170:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d101      	bne.n	801417c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014178:	2300      	movs	r3, #0
 801417a:	e00b      	b.n	8014194 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801417c:	8879      	ldrh	r1, [r7, #2]
 801417e:	887a      	ldrh	r2, [r7, #2]
 8014180:	2300      	movs	r3, #0
 8014182:	9301      	str	r3, [sp, #4]
 8014184:	883b      	ldrh	r3, [r7, #0]
 8014186:	9300      	str	r3, [sp, #0]
 8014188:	460b      	mov	r3, r1
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f7ff feb7 	bl	8013f00 <pbuf_init_alloced_pbuf>
  return p;
 8014192:	68fb      	ldr	r3, [r7, #12]
}
 8014194:	4618      	mov	r0, r3
 8014196:	3710      	adds	r7, #16
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	0801f7f8 	.word	0x0801f7f8
 80141a0:	0801f8fc 	.word	0x0801f8fc
 80141a4:	0801f858 	.word	0x0801f858

080141a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b088      	sub	sp, #32
 80141ac:	af02      	add	r7, sp, #8
 80141ae:	607b      	str	r3, [r7, #4]
 80141b0:	4603      	mov	r3, r0
 80141b2:	73fb      	strb	r3, [r7, #15]
 80141b4:	460b      	mov	r3, r1
 80141b6:	81bb      	strh	r3, [r7, #12]
 80141b8:	4613      	mov	r3, r2
 80141ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80141bc:	7bfb      	ldrb	r3, [r7, #15]
 80141be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80141c0:	8a7b      	ldrh	r3, [r7, #18]
 80141c2:	3303      	adds	r3, #3
 80141c4:	f023 0203 	bic.w	r2, r3, #3
 80141c8:	89bb      	ldrh	r3, [r7, #12]
 80141ca:	441a      	add	r2, r3
 80141cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d901      	bls.n	80141d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80141d2:	2300      	movs	r3, #0
 80141d4:	e018      	b.n	8014208 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80141d6:	6a3b      	ldr	r3, [r7, #32]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d007      	beq.n	80141ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80141dc:	8a7b      	ldrh	r3, [r7, #18]
 80141de:	3303      	adds	r3, #3
 80141e0:	f023 0303 	bic.w	r3, r3, #3
 80141e4:	6a3a      	ldr	r2, [r7, #32]
 80141e6:	4413      	add	r3, r2
 80141e8:	617b      	str	r3, [r7, #20]
 80141ea:	e001      	b.n	80141f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80141ec:	2300      	movs	r3, #0
 80141ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	89b9      	ldrh	r1, [r7, #12]
 80141f4:	89ba      	ldrh	r2, [r7, #12]
 80141f6:	2302      	movs	r3, #2
 80141f8:	9301      	str	r3, [sp, #4]
 80141fa:	897b      	ldrh	r3, [r7, #10]
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	460b      	mov	r3, r1
 8014200:	6979      	ldr	r1, [r7, #20]
 8014202:	f7ff fe7d 	bl	8013f00 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014206:	687b      	ldr	r3, [r7, #4]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3718      	adds	r7, #24
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	460b      	mov	r3, r1
 801421a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d106      	bne.n	8014230 <pbuf_realloc+0x20>
 8014222:	4b3a      	ldr	r3, [pc, #232]	@ (801430c <pbuf_realloc+0xfc>)
 8014224:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014228:	4939      	ldr	r1, [pc, #228]	@ (8014310 <pbuf_realloc+0x100>)
 801422a:	483a      	ldr	r0, [pc, #232]	@ (8014314 <pbuf_realloc+0x104>)
 801422c:	f009 fed0 	bl	801dfd0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	891b      	ldrh	r3, [r3, #8]
 8014234:	887a      	ldrh	r2, [r7, #2]
 8014236:	429a      	cmp	r2, r3
 8014238:	d263      	bcs.n	8014302 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	891a      	ldrh	r2, [r3, #8]
 801423e:	887b      	ldrh	r3, [r7, #2]
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014244:	887b      	ldrh	r3, [r7, #2]
 8014246:	817b      	strh	r3, [r7, #10]
  q = p;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801424c:	e018      	b.n	8014280 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	895b      	ldrh	r3, [r3, #10]
 8014252:	897a      	ldrh	r2, [r7, #10]
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	891a      	ldrh	r2, [r3, #8]
 801425c:	893b      	ldrh	r3, [r7, #8]
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	b29a      	uxth	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d106      	bne.n	8014280 <pbuf_realloc+0x70>
 8014272:	4b26      	ldr	r3, [pc, #152]	@ (801430c <pbuf_realloc+0xfc>)
 8014274:	f240 12af 	movw	r2, #431	@ 0x1af
 8014278:	4927      	ldr	r1, [pc, #156]	@ (8014318 <pbuf_realloc+0x108>)
 801427a:	4826      	ldr	r0, [pc, #152]	@ (8014314 <pbuf_realloc+0x104>)
 801427c:	f009 fea8 	bl	801dfd0 <iprintf>
  while (rem_len > q->len) {
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	895b      	ldrh	r3, [r3, #10]
 8014284:	897a      	ldrh	r2, [r7, #10]
 8014286:	429a      	cmp	r2, r3
 8014288:	d8e1      	bhi.n	801424e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	7b1b      	ldrb	r3, [r3, #12]
 801428e:	f003 030f 	and.w	r3, r3, #15
 8014292:	2b00      	cmp	r3, #0
 8014294:	d121      	bne.n	80142da <pbuf_realloc+0xca>
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	895b      	ldrh	r3, [r3, #10]
 801429a:	897a      	ldrh	r2, [r7, #10]
 801429c:	429a      	cmp	r2, r3
 801429e:	d01c      	beq.n	80142da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	7b5b      	ldrb	r3, [r3, #13]
 80142a4:	f003 0302 	and.w	r3, r3, #2
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d116      	bne.n	80142da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	685a      	ldr	r2, [r3, #4]
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	1ad3      	subs	r3, r2, r3
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	897b      	ldrh	r3, [r7, #10]
 80142b8:	4413      	add	r3, r2
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	4619      	mov	r1, r3
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	f7fe ff64 	bl	801318c <mem_trim>
 80142c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d106      	bne.n	80142da <pbuf_realloc+0xca>
 80142cc:	4b0f      	ldr	r3, [pc, #60]	@ (801430c <pbuf_realloc+0xfc>)
 80142ce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80142d2:	4912      	ldr	r1, [pc, #72]	@ (801431c <pbuf_realloc+0x10c>)
 80142d4:	480f      	ldr	r0, [pc, #60]	@ (8014314 <pbuf_realloc+0x104>)
 80142d6:	f009 fe7b 	bl	801dfd0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	897a      	ldrh	r2, [r7, #10]
 80142de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	895a      	ldrh	r2, [r3, #10]
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d004      	beq.n	80142fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f000 f911 	bl	801451c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2200      	movs	r2, #0
 80142fe:	601a      	str	r2, [r3, #0]
 8014300:	e000      	b.n	8014304 <pbuf_realloc+0xf4>
    return;
 8014302:	bf00      	nop

}
 8014304:	3710      	adds	r7, #16
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	0801f7f8 	.word	0x0801f7f8
 8014310:	0801f910 	.word	0x0801f910
 8014314:	0801f858 	.word	0x0801f858
 8014318:	0801f928 	.word	0x0801f928
 801431c:	0801f940 	.word	0x0801f940

08014320 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	4613      	mov	r3, r2
 801432c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d106      	bne.n	8014342 <pbuf_add_header_impl+0x22>
 8014334:	4b2b      	ldr	r3, [pc, #172]	@ (80143e4 <pbuf_add_header_impl+0xc4>)
 8014336:	f240 12df 	movw	r2, #479	@ 0x1df
 801433a:	492b      	ldr	r1, [pc, #172]	@ (80143e8 <pbuf_add_header_impl+0xc8>)
 801433c:	482b      	ldr	r0, [pc, #172]	@ (80143ec <pbuf_add_header_impl+0xcc>)
 801433e:	f009 fe47 	bl	801dfd0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d003      	beq.n	8014350 <pbuf_add_header_impl+0x30>
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801434e:	d301      	bcc.n	8014354 <pbuf_add_header_impl+0x34>
    return 1;
 8014350:	2301      	movs	r3, #1
 8014352:	e043      	b.n	80143dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d101      	bne.n	801435e <pbuf_add_header_impl+0x3e>
    return 0;
 801435a:	2300      	movs	r3, #0
 801435c:	e03e      	b.n	80143dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	891a      	ldrh	r2, [r3, #8]
 8014366:	8a7b      	ldrh	r3, [r7, #18]
 8014368:	4413      	add	r3, r2
 801436a:	b29b      	uxth	r3, r3
 801436c:	8a7a      	ldrh	r2, [r7, #18]
 801436e:	429a      	cmp	r2, r3
 8014370:	d901      	bls.n	8014376 <pbuf_add_header_impl+0x56>
    return 1;
 8014372:	2301      	movs	r3, #1
 8014374:	e032      	b.n	80143dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	7b1b      	ldrb	r3, [r3, #12]
 801437a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801437c:	8a3b      	ldrh	r3, [r7, #16]
 801437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00c      	beq.n	80143a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	685a      	ldr	r2, [r3, #4]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	425b      	negs	r3, r3
 801438e:	4413      	add	r3, r2
 8014390:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	3310      	adds	r3, #16
 8014396:	697a      	ldr	r2, [r7, #20]
 8014398:	429a      	cmp	r2, r3
 801439a:	d20d      	bcs.n	80143b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801439c:	2301      	movs	r3, #1
 801439e:	e01d      	b.n	80143dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80143a0:	79fb      	ldrb	r3, [r7, #7]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d006      	beq.n	80143b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	685a      	ldr	r2, [r3, #4]
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	425b      	negs	r3, r3
 80143ae:	4413      	add	r3, r2
 80143b0:	617b      	str	r3, [r7, #20]
 80143b2:	e001      	b.n	80143b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80143b4:	2301      	movs	r3, #1
 80143b6:	e011      	b.n	80143dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	697a      	ldr	r2, [r7, #20]
 80143bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	895a      	ldrh	r2, [r3, #10]
 80143c2:	8a7b      	ldrh	r3, [r7, #18]
 80143c4:	4413      	add	r3, r2
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	891a      	ldrh	r2, [r3, #8]
 80143d0:	8a7b      	ldrh	r3, [r7, #18]
 80143d2:	4413      	add	r3, r2
 80143d4:	b29a      	uxth	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80143da:	2300      	movs	r3, #0
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3718      	adds	r7, #24
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	0801f7f8 	.word	0x0801f7f8
 80143e8:	0801f95c 	.word	0x0801f95c
 80143ec:	0801f858 	.word	0x0801f858

080143f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80143fa:	2200      	movs	r2, #0
 80143fc:	6839      	ldr	r1, [r7, #0]
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f7ff ff8e 	bl	8014320 <pbuf_add_header_impl>
 8014404:	4603      	mov	r3, r0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3708      	adds	r7, #8
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
	...

08014410 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d106      	bne.n	801442e <pbuf_remove_header+0x1e>
 8014420:	4b20      	ldr	r3, [pc, #128]	@ (80144a4 <pbuf_remove_header+0x94>)
 8014422:	f240 224b 	movw	r2, #587	@ 0x24b
 8014426:	4920      	ldr	r1, [pc, #128]	@ (80144a8 <pbuf_remove_header+0x98>)
 8014428:	4820      	ldr	r0, [pc, #128]	@ (80144ac <pbuf_remove_header+0x9c>)
 801442a:	f009 fdd1 	bl	801dfd0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d003      	beq.n	801443c <pbuf_remove_header+0x2c>
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801443a:	d301      	bcc.n	8014440 <pbuf_remove_header+0x30>
    return 1;
 801443c:	2301      	movs	r3, #1
 801443e:	e02c      	b.n	801449a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d101      	bne.n	801444a <pbuf_remove_header+0x3a>
    return 0;
 8014446:	2300      	movs	r3, #0
 8014448:	e027      	b.n	801449a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	895b      	ldrh	r3, [r3, #10]
 8014452:	89fa      	ldrh	r2, [r7, #14]
 8014454:	429a      	cmp	r2, r3
 8014456:	d908      	bls.n	801446a <pbuf_remove_header+0x5a>
 8014458:	4b12      	ldr	r3, [pc, #72]	@ (80144a4 <pbuf_remove_header+0x94>)
 801445a:	f240 2255 	movw	r2, #597	@ 0x255
 801445e:	4914      	ldr	r1, [pc, #80]	@ (80144b0 <pbuf_remove_header+0xa0>)
 8014460:	4812      	ldr	r0, [pc, #72]	@ (80144ac <pbuf_remove_header+0x9c>)
 8014462:	f009 fdb5 	bl	801dfd0 <iprintf>
 8014466:	2301      	movs	r3, #1
 8014468:	e017      	b.n	801449a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	685a      	ldr	r2, [r3, #4]
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	441a      	add	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	895a      	ldrh	r2, [r3, #10]
 8014480:	89fb      	ldrh	r3, [r7, #14]
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	b29a      	uxth	r2, r3
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	891a      	ldrh	r2, [r3, #8]
 801448e:	89fb      	ldrh	r3, [r7, #14]
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	b29a      	uxth	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014498:	2300      	movs	r3, #0
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	0801f7f8 	.word	0x0801f7f8
 80144a8:	0801f95c 	.word	0x0801f95c
 80144ac:	0801f858 	.word	0x0801f858
 80144b0:	0801f968 	.word	0x0801f968

080144b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	807b      	strh	r3, [r7, #2]
 80144c0:	4613      	mov	r3, r2
 80144c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80144c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	da08      	bge.n	80144de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80144cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144d0:	425b      	negs	r3, r3
 80144d2:	4619      	mov	r1, r3
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7ff ff9b 	bl	8014410 <pbuf_remove_header>
 80144da:	4603      	mov	r3, r0
 80144dc:	e007      	b.n	80144ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80144de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144e2:	787a      	ldrb	r2, [r7, #1]
 80144e4:	4619      	mov	r1, r3
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f7ff ff1a 	bl	8014320 <pbuf_add_header_impl>
 80144ec:	4603      	mov	r3, r0
  }
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b082      	sub	sp, #8
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	460b      	mov	r3, r1
 8014500:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014506:	2201      	movs	r2, #1
 8014508:	4619      	mov	r1, r3
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7ff ffd2 	bl	80144b4 <pbuf_header_impl>
 8014510:	4603      	mov	r3, r0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}
	...

0801451c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b088      	sub	sp, #32
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d10b      	bne.n	8014542 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d106      	bne.n	801453e <pbuf_free+0x22>
 8014530:	4b3b      	ldr	r3, [pc, #236]	@ (8014620 <pbuf_free+0x104>)
 8014532:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014536:	493b      	ldr	r1, [pc, #236]	@ (8014624 <pbuf_free+0x108>)
 8014538:	483b      	ldr	r0, [pc, #236]	@ (8014628 <pbuf_free+0x10c>)
 801453a:	f009 fd49 	bl	801dfd0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801453e:	2300      	movs	r3, #0
 8014540:	e069      	b.n	8014616 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014542:	2300      	movs	r3, #0
 8014544:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014546:	e062      	b.n	801460e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014548:	f008 fd66 	bl	801d018 <sys_arch_protect>
 801454c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	7b9b      	ldrb	r3, [r3, #14]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <pbuf_free+0x48>
 8014556:	4b32      	ldr	r3, [pc, #200]	@ (8014620 <pbuf_free+0x104>)
 8014558:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801455c:	4933      	ldr	r1, [pc, #204]	@ (801462c <pbuf_free+0x110>)
 801455e:	4832      	ldr	r0, [pc, #200]	@ (8014628 <pbuf_free+0x10c>)
 8014560:	f009 fd36 	bl	801dfd0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7b9b      	ldrb	r3, [r3, #14]
 8014568:	3b01      	subs	r3, #1
 801456a:	b2da      	uxtb	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	739a      	strb	r2, [r3, #14]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	7b9b      	ldrb	r3, [r3, #14]
 8014574:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014576:	69b8      	ldr	r0, [r7, #24]
 8014578:	f008 fd5c 	bl	801d034 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801457c:	7dfb      	ldrb	r3, [r7, #23]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d143      	bne.n	801460a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	7b1b      	ldrb	r3, [r3, #12]
 801458c:	f003 030f 	and.w	r3, r3, #15
 8014590:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	7b5b      	ldrb	r3, [r3, #13]
 8014596:	f003 0302 	and.w	r3, r3, #2
 801459a:	2b00      	cmp	r3, #0
 801459c:	d011      	beq.n	80145c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <pbuf_free+0x9c>
 80145aa:	4b1d      	ldr	r3, [pc, #116]	@ (8014620 <pbuf_free+0x104>)
 80145ac:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80145b0:	491f      	ldr	r1, [pc, #124]	@ (8014630 <pbuf_free+0x114>)
 80145b2:	481d      	ldr	r0, [pc, #116]	@ (8014628 <pbuf_free+0x10c>)
 80145b4:	f009 fd0c 	bl	801dfd0 <iprintf>
        pc->custom_free_function(p);
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	691b      	ldr	r3, [r3, #16]
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	4798      	blx	r3
 80145c0:	e01d      	b.n	80145fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80145c2:	7bfb      	ldrb	r3, [r7, #15]
 80145c4:	2b02      	cmp	r3, #2
 80145c6:	d104      	bne.n	80145d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80145c8:	6879      	ldr	r1, [r7, #4]
 80145ca:	200c      	movs	r0, #12
 80145cc:	f7ff f902 	bl	80137d4 <memp_free>
 80145d0:	e015      	b.n	80145fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d104      	bne.n	80145e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80145d8:	6879      	ldr	r1, [r7, #4]
 80145da:	200b      	movs	r0, #11
 80145dc:	f7ff f8fa 	bl	80137d4 <memp_free>
 80145e0:	e00d      	b.n	80145fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d103      	bne.n	80145f0 <pbuf_free+0xd4>
          mem_free(p);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f7fe fd3f 	bl	801306c <mem_free>
 80145ee:	e006      	b.n	80145fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80145f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014620 <pbuf_free+0x104>)
 80145f2:	f240 320f 	movw	r2, #783	@ 0x30f
 80145f6:	490f      	ldr	r1, [pc, #60]	@ (8014634 <pbuf_free+0x118>)
 80145f8:	480b      	ldr	r0, [pc, #44]	@ (8014628 <pbuf_free+0x10c>)
 80145fa:	f009 fce9 	bl	801dfd0 <iprintf>
        }
      }
      count++;
 80145fe:	7ffb      	ldrb	r3, [r7, #31]
 8014600:	3301      	adds	r3, #1
 8014602:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	607b      	str	r3, [r7, #4]
 8014608:	e001      	b.n	801460e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801460a:	2300      	movs	r3, #0
 801460c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d199      	bne.n	8014548 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014614:	7ffb      	ldrb	r3, [r7, #31]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3720      	adds	r7, #32
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	0801f7f8 	.word	0x0801f7f8
 8014624:	0801f95c 	.word	0x0801f95c
 8014628:	0801f858 	.word	0x0801f858
 801462c:	0801f988 	.word	0x0801f988
 8014630:	0801f9a0 	.word	0x0801f9a0
 8014634:	0801f9c4 	.word	0x0801f9c4

08014638 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014638:	b480      	push	{r7}
 801463a:	b085      	sub	sp, #20
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014640:	2300      	movs	r3, #0
 8014642:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014644:	e005      	b.n	8014652 <pbuf_clen+0x1a>
    ++len;
 8014646:	89fb      	ldrh	r3, [r7, #14]
 8014648:	3301      	adds	r3, #1
 801464a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1f6      	bne.n	8014646 <pbuf_clen+0xe>
  }
  return len;
 8014658:	89fb      	ldrh	r3, [r7, #14]
}
 801465a:	4618      	mov	r0, r3
 801465c:	3714      	adds	r7, #20
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr
	...

08014668 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d016      	beq.n	80146a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014676:	f008 fccf 	bl	801d018 <sys_arch_protect>
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7b9b      	ldrb	r3, [r3, #14]
 8014680:	3301      	adds	r3, #1
 8014682:	b2da      	uxtb	r2, r3
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	739a      	strb	r2, [r3, #14]
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	f008 fcd3 	bl	801d034 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	7b9b      	ldrb	r3, [r3, #14]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d106      	bne.n	80146a4 <pbuf_ref+0x3c>
 8014696:	4b05      	ldr	r3, [pc, #20]	@ (80146ac <pbuf_ref+0x44>)
 8014698:	f240 3242 	movw	r2, #834	@ 0x342
 801469c:	4904      	ldr	r1, [pc, #16]	@ (80146b0 <pbuf_ref+0x48>)
 801469e:	4805      	ldr	r0, [pc, #20]	@ (80146b4 <pbuf_ref+0x4c>)
 80146a0:	f009 fc96 	bl	801dfd0 <iprintf>
  }
}
 80146a4:	bf00      	nop
 80146a6:	3710      	adds	r7, #16
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	0801f7f8 	.word	0x0801f7f8
 80146b0:	0801f9d8 	.word	0x0801f9d8
 80146b4:	0801f858 	.word	0x0801f858

080146b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d002      	beq.n	80146ce <pbuf_cat+0x16>
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d107      	bne.n	80146de <pbuf_cat+0x26>
 80146ce:	4b20      	ldr	r3, [pc, #128]	@ (8014750 <pbuf_cat+0x98>)
 80146d0:	f240 3259 	movw	r2, #857	@ 0x359
 80146d4:	491f      	ldr	r1, [pc, #124]	@ (8014754 <pbuf_cat+0x9c>)
 80146d6:	4820      	ldr	r0, [pc, #128]	@ (8014758 <pbuf_cat+0xa0>)
 80146d8:	f009 fc7a 	bl	801dfd0 <iprintf>
 80146dc:	e034      	b.n	8014748 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	60fb      	str	r3, [r7, #12]
 80146e2:	e00a      	b.n	80146fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	891a      	ldrh	r2, [r3, #8]
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	891b      	ldrh	r3, [r3, #8]
 80146ec:	4413      	add	r3, r2
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	60fb      	str	r3, [r7, #12]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d1f0      	bne.n	80146e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	891a      	ldrh	r2, [r3, #8]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	895b      	ldrh	r3, [r3, #10]
 801470a:	429a      	cmp	r2, r3
 801470c:	d006      	beq.n	801471c <pbuf_cat+0x64>
 801470e:	4b10      	ldr	r3, [pc, #64]	@ (8014750 <pbuf_cat+0x98>)
 8014710:	f240 3262 	movw	r2, #866	@ 0x362
 8014714:	4911      	ldr	r1, [pc, #68]	@ (801475c <pbuf_cat+0xa4>)
 8014716:	4810      	ldr	r0, [pc, #64]	@ (8014758 <pbuf_cat+0xa0>)
 8014718:	f009 fc5a 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <pbuf_cat+0x7a>
 8014724:	4b0a      	ldr	r3, [pc, #40]	@ (8014750 <pbuf_cat+0x98>)
 8014726:	f240 3263 	movw	r2, #867	@ 0x363
 801472a:	490d      	ldr	r1, [pc, #52]	@ (8014760 <pbuf_cat+0xa8>)
 801472c:	480a      	ldr	r0, [pc, #40]	@ (8014758 <pbuf_cat+0xa0>)
 801472e:	f009 fc4f 	bl	801dfd0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	891a      	ldrh	r2, [r3, #8]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	891b      	ldrh	r3, [r3, #8]
 801473a:	4413      	add	r3, r2
 801473c:	b29a      	uxth	r2, r3
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	683a      	ldr	r2, [r7, #0]
 8014746:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	0801f7f8 	.word	0x0801f7f8
 8014754:	0801f9ec 	.word	0x0801f9ec
 8014758:	0801f858 	.word	0x0801f858
 801475c:	0801fa24 	.word	0x0801fa24
 8014760:	0801fa54 	.word	0x0801fa54

08014764 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801476e:	6839      	ldr	r1, [r7, #0]
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7ff ffa1 	bl	80146b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014776:	6838      	ldr	r0, [r7, #0]
 8014778:	f7ff ff76 	bl	8014668 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801477c:	bf00      	nop
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801478e:	2300      	movs	r3, #0
 8014790:	617b      	str	r3, [r7, #20]
 8014792:	2300      	movs	r3, #0
 8014794:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d008      	beq.n	80147ae <pbuf_copy+0x2a>
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d005      	beq.n	80147ae <pbuf_copy+0x2a>
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	891a      	ldrh	r2, [r3, #8]
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	891b      	ldrh	r3, [r3, #8]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d209      	bcs.n	80147c2 <pbuf_copy+0x3e>
 80147ae:	4b57      	ldr	r3, [pc, #348]	@ (801490c <pbuf_copy+0x188>)
 80147b0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80147b4:	4956      	ldr	r1, [pc, #344]	@ (8014910 <pbuf_copy+0x18c>)
 80147b6:	4857      	ldr	r0, [pc, #348]	@ (8014914 <pbuf_copy+0x190>)
 80147b8:	f009 fc0a 	bl	801dfd0 <iprintf>
 80147bc:	f06f 030f 	mvn.w	r3, #15
 80147c0:	e09f      	b.n	8014902 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	895b      	ldrh	r3, [r3, #10]
 80147c6:	461a      	mov	r2, r3
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	1ad2      	subs	r2, r2, r3
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	895b      	ldrh	r3, [r3, #10]
 80147d0:	4619      	mov	r1, r3
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	1acb      	subs	r3, r1, r3
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d306      	bcc.n	80147e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	895b      	ldrh	r3, [r3, #10]
 80147de:	461a      	mov	r2, r3
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	1ad3      	subs	r3, r2, r3
 80147e4:	60fb      	str	r3, [r7, #12]
 80147e6:	e005      	b.n	80147f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	895b      	ldrh	r3, [r3, #10]
 80147ec:	461a      	mov	r2, r3
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	685a      	ldr	r2, [r3, #4]
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	18d0      	adds	r0, r2, r3
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	4413      	add	r3, r2
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	4619      	mov	r1, r3
 8014808:	f009 fe0d 	bl	801e426 <memcpy>
    offset_to += len;
 801480c:	697a      	ldr	r2, [r7, #20]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	4413      	add	r3, r2
 8014812:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014814:	693a      	ldr	r2, [r7, #16]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	4413      	add	r3, r2
 801481a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	895b      	ldrh	r3, [r3, #10]
 8014820:	461a      	mov	r2, r3
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	4293      	cmp	r3, r2
 8014826:	d906      	bls.n	8014836 <pbuf_copy+0xb2>
 8014828:	4b38      	ldr	r3, [pc, #224]	@ (801490c <pbuf_copy+0x188>)
 801482a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801482e:	493a      	ldr	r1, [pc, #232]	@ (8014918 <pbuf_copy+0x194>)
 8014830:	4838      	ldr	r0, [pc, #224]	@ (8014914 <pbuf_copy+0x190>)
 8014832:	f009 fbcd 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	895b      	ldrh	r3, [r3, #10]
 801483a:	461a      	mov	r2, r3
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	4293      	cmp	r3, r2
 8014840:	d906      	bls.n	8014850 <pbuf_copy+0xcc>
 8014842:	4b32      	ldr	r3, [pc, #200]	@ (801490c <pbuf_copy+0x188>)
 8014844:	f240 32da 	movw	r2, #986	@ 0x3da
 8014848:	4934      	ldr	r1, [pc, #208]	@ (801491c <pbuf_copy+0x198>)
 801484a:	4832      	ldr	r0, [pc, #200]	@ (8014914 <pbuf_copy+0x190>)
 801484c:	f009 fbc0 	bl	801dfd0 <iprintf>
    if (offset_from >= p_from->len) {
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	895b      	ldrh	r3, [r3, #10]
 8014854:	461a      	mov	r2, r3
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	4293      	cmp	r3, r2
 801485a:	d304      	bcc.n	8014866 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801485c:	2300      	movs	r3, #0
 801485e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	895b      	ldrh	r3, [r3, #10]
 801486a:	461a      	mov	r2, r3
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	4293      	cmp	r3, r2
 8014870:	d114      	bne.n	801489c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014872:	2300      	movs	r3, #0
 8014874:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d10c      	bne.n	801489c <pbuf_copy+0x118>
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d009      	beq.n	801489c <pbuf_copy+0x118>
 8014888:	4b20      	ldr	r3, [pc, #128]	@ (801490c <pbuf_copy+0x188>)
 801488a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801488e:	4924      	ldr	r1, [pc, #144]	@ (8014920 <pbuf_copy+0x19c>)
 8014890:	4820      	ldr	r0, [pc, #128]	@ (8014914 <pbuf_copy+0x190>)
 8014892:	f009 fb9d 	bl	801dfd0 <iprintf>
 8014896:	f06f 030f 	mvn.w	r3, #15
 801489a:	e032      	b.n	8014902 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d013      	beq.n	80148ca <pbuf_copy+0x146>
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	895a      	ldrh	r2, [r3, #10]
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	891b      	ldrh	r3, [r3, #8]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d10d      	bne.n	80148ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d009      	beq.n	80148ca <pbuf_copy+0x146>
 80148b6:	4b15      	ldr	r3, [pc, #84]	@ (801490c <pbuf_copy+0x188>)
 80148b8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80148bc:	4919      	ldr	r1, [pc, #100]	@ (8014924 <pbuf_copy+0x1a0>)
 80148be:	4815      	ldr	r0, [pc, #84]	@ (8014914 <pbuf_copy+0x190>)
 80148c0:	f009 fb86 	bl	801dfd0 <iprintf>
 80148c4:	f06f 0305 	mvn.w	r3, #5
 80148c8:	e01b      	b.n	8014902 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d013      	beq.n	80148f8 <pbuf_copy+0x174>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	895a      	ldrh	r2, [r3, #10]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	891b      	ldrh	r3, [r3, #8]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d10d      	bne.n	80148f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d009      	beq.n	80148f8 <pbuf_copy+0x174>
 80148e4:	4b09      	ldr	r3, [pc, #36]	@ (801490c <pbuf_copy+0x188>)
 80148e6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80148ea:	490e      	ldr	r1, [pc, #56]	@ (8014924 <pbuf_copy+0x1a0>)
 80148ec:	4809      	ldr	r0, [pc, #36]	@ (8014914 <pbuf_copy+0x190>)
 80148ee:	f009 fb6f 	bl	801dfd0 <iprintf>
 80148f2:	f06f 0305 	mvn.w	r3, #5
 80148f6:	e004      	b.n	8014902 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	f47f af61 	bne.w	80147c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014900:	2300      	movs	r3, #0
}
 8014902:	4618      	mov	r0, r3
 8014904:	3718      	adds	r7, #24
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	0801f7f8 	.word	0x0801f7f8
 8014910:	0801faa0 	.word	0x0801faa0
 8014914:	0801f858 	.word	0x0801f858
 8014918:	0801fad0 	.word	0x0801fad0
 801491c:	0801fae8 	.word	0x0801fae8
 8014920:	0801fb04 	.word	0x0801fb04
 8014924:	0801fb14 	.word	0x0801fb14

08014928 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b088      	sub	sp, #32
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	4611      	mov	r1, r2
 8014934:	461a      	mov	r2, r3
 8014936:	460b      	mov	r3, r1
 8014938:	80fb      	strh	r3, [r7, #6]
 801493a:	4613      	mov	r3, r2
 801493c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801493e:	2300      	movs	r3, #0
 8014940:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d108      	bne.n	801495e <pbuf_copy_partial+0x36>
 801494c:	4b2b      	ldr	r3, [pc, #172]	@ (80149fc <pbuf_copy_partial+0xd4>)
 801494e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014952:	492b      	ldr	r1, [pc, #172]	@ (8014a00 <pbuf_copy_partial+0xd8>)
 8014954:	482b      	ldr	r0, [pc, #172]	@ (8014a04 <pbuf_copy_partial+0xdc>)
 8014956:	f009 fb3b 	bl	801dfd0 <iprintf>
 801495a:	2300      	movs	r3, #0
 801495c:	e04a      	b.n	80149f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d108      	bne.n	8014976 <pbuf_copy_partial+0x4e>
 8014964:	4b25      	ldr	r3, [pc, #148]	@ (80149fc <pbuf_copy_partial+0xd4>)
 8014966:	f240 420b 	movw	r2, #1035	@ 0x40b
 801496a:	4927      	ldr	r1, [pc, #156]	@ (8014a08 <pbuf_copy_partial+0xe0>)
 801496c:	4825      	ldr	r0, [pc, #148]	@ (8014a04 <pbuf_copy_partial+0xdc>)
 801496e:	f009 fb2f 	bl	801dfd0 <iprintf>
 8014972:	2300      	movs	r3, #0
 8014974:	e03e      	b.n	80149f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	61fb      	str	r3, [r7, #28]
 801497a:	e034      	b.n	80149e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801497c:	88bb      	ldrh	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d00a      	beq.n	8014998 <pbuf_copy_partial+0x70>
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	895b      	ldrh	r3, [r3, #10]
 8014986:	88ba      	ldrh	r2, [r7, #4]
 8014988:	429a      	cmp	r2, r3
 801498a:	d305      	bcc.n	8014998 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	895b      	ldrh	r3, [r3, #10]
 8014990:	88ba      	ldrh	r2, [r7, #4]
 8014992:	1ad3      	subs	r3, r2, r3
 8014994:	80bb      	strh	r3, [r7, #4]
 8014996:	e023      	b.n	80149e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	895a      	ldrh	r2, [r3, #10]
 801499c:	88bb      	ldrh	r3, [r7, #4]
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80149a2:	8b3a      	ldrh	r2, [r7, #24]
 80149a4:	88fb      	ldrh	r3, [r7, #6]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d901      	bls.n	80149ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80149aa:	88fb      	ldrh	r3, [r7, #6]
 80149ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80149ae:	8b7b      	ldrh	r3, [r7, #26]
 80149b0:	68ba      	ldr	r2, [r7, #8]
 80149b2:	18d0      	adds	r0, r2, r3
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	685a      	ldr	r2, [r3, #4]
 80149b8:	88bb      	ldrh	r3, [r7, #4]
 80149ba:	4413      	add	r3, r2
 80149bc:	8b3a      	ldrh	r2, [r7, #24]
 80149be:	4619      	mov	r1, r3
 80149c0:	f009 fd31 	bl	801e426 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80149c4:	8afa      	ldrh	r2, [r7, #22]
 80149c6:	8b3b      	ldrh	r3, [r7, #24]
 80149c8:	4413      	add	r3, r2
 80149ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80149cc:	8b7a      	ldrh	r2, [r7, #26]
 80149ce:	8b3b      	ldrh	r3, [r7, #24]
 80149d0:	4413      	add	r3, r2
 80149d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80149d4:	88fa      	ldrh	r2, [r7, #6]
 80149d6:	8b3b      	ldrh	r3, [r7, #24]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80149dc:	2300      	movs	r3, #0
 80149de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	61fb      	str	r3, [r7, #28]
 80149e6:	88fb      	ldrh	r3, [r7, #6]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d002      	beq.n	80149f2 <pbuf_copy_partial+0xca>
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d1c4      	bne.n	801497c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80149f2:	8afb      	ldrh	r3, [r7, #22]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3720      	adds	r7, #32
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	0801f7f8 	.word	0x0801f7f8
 8014a00:	0801fb40 	.word	0x0801fb40
 8014a04:	0801f858 	.word	0x0801f858
 8014a08:	0801fb60 	.word	0x0801fb60

08014a0c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	4603      	mov	r3, r0
 8014a14:	603a      	str	r2, [r7, #0]
 8014a16:	71fb      	strb	r3, [r7, #7]
 8014a18:	460b      	mov	r3, r1
 8014a1a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	8919      	ldrh	r1, [r3, #8]
 8014a20:	88ba      	ldrh	r2, [r7, #4]
 8014a22:	79fb      	ldrb	r3, [r7, #7]
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7ff fa95 	bl	8013f54 <pbuf_alloc>
 8014a2a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d101      	bne.n	8014a36 <pbuf_clone+0x2a>
    return NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	e011      	b.n	8014a5a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f7ff fea3 	bl	8014784 <pbuf_copy>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014a42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d006      	beq.n	8014a58 <pbuf_clone+0x4c>
 8014a4a:	4b06      	ldr	r3, [pc, #24]	@ (8014a64 <pbuf_clone+0x58>)
 8014a4c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014a50:	4905      	ldr	r1, [pc, #20]	@ (8014a68 <pbuf_clone+0x5c>)
 8014a52:	4806      	ldr	r0, [pc, #24]	@ (8014a6c <pbuf_clone+0x60>)
 8014a54:	f009 fabc 	bl	801dfd0 <iprintf>
  return q;
 8014a58:	68fb      	ldr	r3, [r7, #12]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	0801f7f8 	.word	0x0801f7f8
 8014a68:	0801fc6c 	.word	0x0801fc6c
 8014a6c:	0801f858 	.word	0x0801f858

08014a70 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a74:	f009 f9ac 	bl	801ddd0 <rand>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a80:	b29b      	uxth	r3, r3
 8014a82:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014a86:	b29a      	uxth	r2, r3
 8014a88:	4b01      	ldr	r3, [pc, #4]	@ (8014a90 <tcp_init+0x20>)
 8014a8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a8c:	bf00      	nop
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20000024 	.word	0x20000024

08014a94 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	7d1b      	ldrb	r3, [r3, #20]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d105      	bne.n	8014ab0 <tcp_free+0x1c>
 8014aa4:	4b06      	ldr	r3, [pc, #24]	@ (8014ac0 <tcp_free+0x2c>)
 8014aa6:	22d4      	movs	r2, #212	@ 0xd4
 8014aa8:	4906      	ldr	r1, [pc, #24]	@ (8014ac4 <tcp_free+0x30>)
 8014aaa:	4807      	ldr	r0, [pc, #28]	@ (8014ac8 <tcp_free+0x34>)
 8014aac:	f009 fa90 	bl	801dfd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014ab0:	6879      	ldr	r1, [r7, #4]
 8014ab2:	2001      	movs	r0, #1
 8014ab4:	f7fe fe8e 	bl	80137d4 <memp_free>
}
 8014ab8:	bf00      	nop
 8014aba:	3708      	adds	r7, #8
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	0801fcf8 	.word	0x0801fcf8
 8014ac4:	0801fd28 	.word	0x0801fd28
 8014ac8:	0801fd3c 	.word	0x0801fd3c

08014acc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	7d1b      	ldrb	r3, [r3, #20]
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d105      	bne.n	8014ae8 <tcp_free_listen+0x1c>
 8014adc:	4b06      	ldr	r3, [pc, #24]	@ (8014af8 <tcp_free_listen+0x2c>)
 8014ade:	22df      	movs	r2, #223	@ 0xdf
 8014ae0:	4906      	ldr	r1, [pc, #24]	@ (8014afc <tcp_free_listen+0x30>)
 8014ae2:	4807      	ldr	r0, [pc, #28]	@ (8014b00 <tcp_free_listen+0x34>)
 8014ae4:	f009 fa74 	bl	801dfd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	2002      	movs	r0, #2
 8014aec:	f7fe fe72 	bl	80137d4 <memp_free>
}
 8014af0:	bf00      	nop
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	0801fcf8 	.word	0x0801fcf8
 8014afc:	0801fd64 	.word	0x0801fd64
 8014b00:	0801fd3c 	.word	0x0801fd3c

08014b04 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014b08:	f000 fea4 	bl	8015854 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014b0c:	4b07      	ldr	r3, [pc, #28]	@ (8014b2c <tcp_tmr+0x28>)
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	3301      	adds	r3, #1
 8014b12:	b2da      	uxtb	r2, r3
 8014b14:	4b05      	ldr	r3, [pc, #20]	@ (8014b2c <tcp_tmr+0x28>)
 8014b16:	701a      	strb	r2, [r3, #0]
 8014b18:	4b04      	ldr	r3, [pc, #16]	@ (8014b2c <tcp_tmr+0x28>)
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	f003 0301 	and.w	r3, r3, #1
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d001      	beq.n	8014b28 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014b24:	f000 fb54 	bl	80151d0 <tcp_slowtmr>
  }
}
 8014b28:	bf00      	nop
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	200277c5 	.word	0x200277c5

08014b30 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d105      	bne.n	8014b4c <tcp_remove_listener+0x1c>
 8014b40:	4b0d      	ldr	r3, [pc, #52]	@ (8014b78 <tcp_remove_listener+0x48>)
 8014b42:	22ff      	movs	r2, #255	@ 0xff
 8014b44:	490d      	ldr	r1, [pc, #52]	@ (8014b7c <tcp_remove_listener+0x4c>)
 8014b46:	480e      	ldr	r0, [pc, #56]	@ (8014b80 <tcp_remove_listener+0x50>)
 8014b48:	f009 fa42 	bl	801dfd0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	e00a      	b.n	8014b68 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b56:	683a      	ldr	r2, [r7, #0]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d102      	bne.n	8014b62 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	60fb      	str	r3, [r7, #12]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d1f1      	bne.n	8014b52 <tcp_remove_listener+0x22>
    }
  }
}
 8014b6e:	bf00      	nop
 8014b70:	bf00      	nop
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	0801fcf8 	.word	0x0801fcf8
 8014b7c:	0801fd80 	.word	0x0801fd80
 8014b80:	0801fd3c 	.word	0x0801fd3c

08014b84 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d106      	bne.n	8014ba0 <tcp_listen_closed+0x1c>
 8014b92:	4b14      	ldr	r3, [pc, #80]	@ (8014be4 <tcp_listen_closed+0x60>)
 8014b94:	f240 1211 	movw	r2, #273	@ 0x111
 8014b98:	4913      	ldr	r1, [pc, #76]	@ (8014be8 <tcp_listen_closed+0x64>)
 8014b9a:	4814      	ldr	r0, [pc, #80]	@ (8014bec <tcp_listen_closed+0x68>)
 8014b9c:	f009 fa18 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	7d1b      	ldrb	r3, [r3, #20]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d006      	beq.n	8014bb6 <tcp_listen_closed+0x32>
 8014ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8014be4 <tcp_listen_closed+0x60>)
 8014baa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014bae:	4910      	ldr	r1, [pc, #64]	@ (8014bf0 <tcp_listen_closed+0x6c>)
 8014bb0:	480e      	ldr	r0, [pc, #56]	@ (8014bec <tcp_listen_closed+0x68>)
 8014bb2:	f009 fa0d 	bl	801dfd0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	60fb      	str	r3, [r7, #12]
 8014bba:	e00b      	b.n	8014bd4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8014bf4 <tcp_listen_closed+0x70>)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	6879      	ldr	r1, [r7, #4]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7ff ffb1 	bl	8014b30 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	60fb      	str	r3, [r7, #12]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2b03      	cmp	r3, #3
 8014bd8:	d9f0      	bls.n	8014bbc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014bda:	bf00      	nop
 8014bdc:	bf00      	nop
 8014bde:	3710      	adds	r7, #16
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	0801fcf8 	.word	0x0801fcf8
 8014be8:	0801fda8 	.word	0x0801fda8
 8014bec:	0801fd3c 	.word	0x0801fd3c
 8014bf0:	0801fdb4 	.word	0x0801fdb4
 8014bf4:	080222c0 	.word	0x080222c0

08014bf8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014bf8:	b5b0      	push	{r4, r5, r7, lr}
 8014bfa:	b088      	sub	sp, #32
 8014bfc:	af04      	add	r7, sp, #16
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	460b      	mov	r3, r1
 8014c02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d106      	bne.n	8014c18 <tcp_close_shutdown+0x20>
 8014c0a:	4b63      	ldr	r3, [pc, #396]	@ (8014d98 <tcp_close_shutdown+0x1a0>)
 8014c0c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014c10:	4962      	ldr	r1, [pc, #392]	@ (8014d9c <tcp_close_shutdown+0x1a4>)
 8014c12:	4863      	ldr	r0, [pc, #396]	@ (8014da0 <tcp_close_shutdown+0x1a8>)
 8014c14:	f009 f9dc 	bl	801dfd0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014c18:	78fb      	ldrb	r3, [r7, #3]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d066      	beq.n	8014cec <tcp_close_shutdown+0xf4>
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7d1b      	ldrb	r3, [r3, #20]
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d003      	beq.n	8014c2e <tcp_close_shutdown+0x36>
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	7d1b      	ldrb	r3, [r3, #20]
 8014c2a:	2b07      	cmp	r3, #7
 8014c2c:	d15e      	bne.n	8014cec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d104      	bne.n	8014c40 <tcp_close_shutdown+0x48>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014c3e:	d055      	beq.n	8014cec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	8b5b      	ldrh	r3, [r3, #26]
 8014c44:	f003 0310 	and.w	r3, r3, #16
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d106      	bne.n	8014c5a <tcp_close_shutdown+0x62>
 8014c4c:	4b52      	ldr	r3, [pc, #328]	@ (8014d98 <tcp_close_shutdown+0x1a0>)
 8014c4e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014c52:	4954      	ldr	r1, [pc, #336]	@ (8014da4 <tcp_close_shutdown+0x1ac>)
 8014c54:	4852      	ldr	r0, [pc, #328]	@ (8014da0 <tcp_close_shutdown+0x1a8>)
 8014c56:	f009 f9bb 	bl	801dfd0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014c62:	687d      	ldr	r5, [r7, #4]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	3304      	adds	r3, #4
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	8ad2      	ldrh	r2, [r2, #22]
 8014c6c:	6879      	ldr	r1, [r7, #4]
 8014c6e:	8b09      	ldrh	r1, [r1, #24]
 8014c70:	9102      	str	r1, [sp, #8]
 8014c72:	9201      	str	r2, [sp, #4]
 8014c74:	9300      	str	r3, [sp, #0]
 8014c76:	462b      	mov	r3, r5
 8014c78:	4622      	mov	r2, r4
 8014c7a:	4601      	mov	r1, r0
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f004 fe8d 	bl	801999c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f001 f8c8 	bl	8015e18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014c88:	4b47      	ldr	r3, [pc, #284]	@ (8014da8 <tcp_close_shutdown+0x1b0>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d105      	bne.n	8014c9e <tcp_close_shutdown+0xa6>
 8014c92:	4b45      	ldr	r3, [pc, #276]	@ (8014da8 <tcp_close_shutdown+0x1b0>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	4a43      	ldr	r2, [pc, #268]	@ (8014da8 <tcp_close_shutdown+0x1b0>)
 8014c9a:	6013      	str	r3, [r2, #0]
 8014c9c:	e013      	b.n	8014cc6 <tcp_close_shutdown+0xce>
 8014c9e:	4b42      	ldr	r3, [pc, #264]	@ (8014da8 <tcp_close_shutdown+0x1b0>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	60fb      	str	r3, [r7, #12]
 8014ca4:	e00c      	b.n	8014cc0 <tcp_close_shutdown+0xc8>
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	68db      	ldr	r3, [r3, #12]
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d104      	bne.n	8014cba <tcp_close_shutdown+0xc2>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	68da      	ldr	r2, [r3, #12]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	60da      	str	r2, [r3, #12]
 8014cb8:	e005      	b.n	8014cc6 <tcp_close_shutdown+0xce>
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	60fb      	str	r3, [r7, #12]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d1ef      	bne.n	8014ca6 <tcp_close_shutdown+0xae>
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	60da      	str	r2, [r3, #12]
 8014ccc:	4b37      	ldr	r3, [pc, #220]	@ (8014dac <tcp_close_shutdown+0x1b4>)
 8014cce:	2201      	movs	r2, #1
 8014cd0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014cd2:	4b37      	ldr	r3, [pc, #220]	@ (8014db0 <tcp_close_shutdown+0x1b8>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	687a      	ldr	r2, [r7, #4]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d102      	bne.n	8014ce2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014cdc:	f003 fd5c 	bl	8018798 <tcp_trigger_input_pcb_close>
 8014ce0:	e002      	b.n	8014ce8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f7ff fed6 	bl	8014a94 <tcp_free>
      }
      return ERR_OK;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	e050      	b.n	8014d8e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	7d1b      	ldrb	r3, [r3, #20]
 8014cf0:	2b02      	cmp	r3, #2
 8014cf2:	d03b      	beq.n	8014d6c <tcp_close_shutdown+0x174>
 8014cf4:	2b02      	cmp	r3, #2
 8014cf6:	dc44      	bgt.n	8014d82 <tcp_close_shutdown+0x18a>
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <tcp_close_shutdown+0x10a>
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d02a      	beq.n	8014d56 <tcp_close_shutdown+0x15e>
 8014d00:	e03f      	b.n	8014d82 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	8adb      	ldrh	r3, [r3, #22]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d021      	beq.n	8014d4e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8014db4 <tcp_close_shutdown+0x1bc>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d105      	bne.n	8014d20 <tcp_close_shutdown+0x128>
 8014d14:	4b27      	ldr	r3, [pc, #156]	@ (8014db4 <tcp_close_shutdown+0x1bc>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	4a26      	ldr	r2, [pc, #152]	@ (8014db4 <tcp_close_shutdown+0x1bc>)
 8014d1c:	6013      	str	r3, [r2, #0]
 8014d1e:	e013      	b.n	8014d48 <tcp_close_shutdown+0x150>
 8014d20:	4b24      	ldr	r3, [pc, #144]	@ (8014db4 <tcp_close_shutdown+0x1bc>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	60bb      	str	r3, [r7, #8]
 8014d26:	e00c      	b.n	8014d42 <tcp_close_shutdown+0x14a>
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	687a      	ldr	r2, [r7, #4]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d104      	bne.n	8014d3c <tcp_close_shutdown+0x144>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	68da      	ldr	r2, [r3, #12]
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	60da      	str	r2, [r3, #12]
 8014d3a:	e005      	b.n	8014d48 <tcp_close_shutdown+0x150>
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	60bb      	str	r3, [r7, #8]
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1ef      	bne.n	8014d28 <tcp_close_shutdown+0x130>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f7ff fea0 	bl	8014a94 <tcp_free>
      break;
 8014d54:	e01a      	b.n	8014d8c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f7ff ff14 	bl	8014b84 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014d5c:	6879      	ldr	r1, [r7, #4]
 8014d5e:	4816      	ldr	r0, [pc, #88]	@ (8014db8 <tcp_close_shutdown+0x1c0>)
 8014d60:	f001 f8aa 	bl	8015eb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f7ff feb1 	bl	8014acc <tcp_free_listen>
      break;
 8014d6a:	e00f      	b.n	8014d8c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014d6c:	6879      	ldr	r1, [r7, #4]
 8014d6e:	480e      	ldr	r0, [pc, #56]	@ (8014da8 <tcp_close_shutdown+0x1b0>)
 8014d70:	f001 f8a2 	bl	8015eb8 <tcp_pcb_remove>
 8014d74:	4b0d      	ldr	r3, [pc, #52]	@ (8014dac <tcp_close_shutdown+0x1b4>)
 8014d76:	2201      	movs	r2, #1
 8014d78:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f7ff fe8a 	bl	8014a94 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014d80:	e004      	b.n	8014d8c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f000 f81a 	bl	8014dbc <tcp_close_shutdown_fin>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	e000      	b.n	8014d8e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d8c:	2300      	movs	r3, #0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3710      	adds	r7, #16
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bdb0      	pop	{r4, r5, r7, pc}
 8014d96:	bf00      	nop
 8014d98:	0801fcf8 	.word	0x0801fcf8
 8014d9c:	0801fdcc 	.word	0x0801fdcc
 8014da0:	0801fd3c 	.word	0x0801fd3c
 8014da4:	0801fdec 	.word	0x0801fdec
 8014da8:	200277bc 	.word	0x200277bc
 8014dac:	200277c4 	.word	0x200277c4
 8014db0:	200277fc 	.word	0x200277fc
 8014db4:	200277b4 	.word	0x200277b4
 8014db8:	200277b8 	.word	0x200277b8

08014dbc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b084      	sub	sp, #16
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d106      	bne.n	8014dd8 <tcp_close_shutdown_fin+0x1c>
 8014dca:	4b2e      	ldr	r3, [pc, #184]	@ (8014e84 <tcp_close_shutdown_fin+0xc8>)
 8014dcc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014dd0:	492d      	ldr	r1, [pc, #180]	@ (8014e88 <tcp_close_shutdown_fin+0xcc>)
 8014dd2:	482e      	ldr	r0, [pc, #184]	@ (8014e8c <tcp_close_shutdown_fin+0xd0>)
 8014dd4:	f009 f8fc 	bl	801dfd0 <iprintf>

  switch (pcb->state) {
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	7d1b      	ldrb	r3, [r3, #20]
 8014ddc:	2b07      	cmp	r3, #7
 8014dde:	d020      	beq.n	8014e22 <tcp_close_shutdown_fin+0x66>
 8014de0:	2b07      	cmp	r3, #7
 8014de2:	dc2b      	bgt.n	8014e3c <tcp_close_shutdown_fin+0x80>
 8014de4:	2b03      	cmp	r3, #3
 8014de6:	d002      	beq.n	8014dee <tcp_close_shutdown_fin+0x32>
 8014de8:	2b04      	cmp	r3, #4
 8014dea:	d00d      	beq.n	8014e08 <tcp_close_shutdown_fin+0x4c>
 8014dec:	e026      	b.n	8014e3c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f003 fee2 	bl	8018bb8 <tcp_send_fin>
 8014df4:	4603      	mov	r3, r0
 8014df6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d11f      	bne.n	8014e40 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2205      	movs	r2, #5
 8014e04:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e06:	e01b      	b.n	8014e40 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f003 fed5 	bl	8018bb8 <tcp_send_fin>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d114      	bne.n	8014e44 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2205      	movs	r2, #5
 8014e1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e20:	e010      	b.n	8014e44 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f003 fec8 	bl	8018bb8 <tcp_send_fin>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d109      	bne.n	8014e48 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2209      	movs	r2, #9
 8014e38:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e3a:	e005      	b.n	8014e48 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	e01c      	b.n	8014e7a <tcp_close_shutdown_fin+0xbe>
      break;
 8014e40:	bf00      	nop
 8014e42:	e002      	b.n	8014e4a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e44:	bf00      	nop
 8014e46:	e000      	b.n	8014e4a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e48:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d103      	bne.n	8014e5a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f003 ffee 	bl	8018e34 <tcp_output>
 8014e58:	e00d      	b.n	8014e76 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e62:	d108      	bne.n	8014e76 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	8b5b      	ldrh	r3, [r3, #26]
 8014e68:	f043 0308 	orr.w	r3, r3, #8
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014e72:	2300      	movs	r3, #0
 8014e74:	e001      	b.n	8014e7a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	0801fcf8 	.word	0x0801fcf8
 8014e88:	0801fda8 	.word	0x0801fda8
 8014e8c:	0801fd3c 	.word	0x0801fd3c

08014e90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d109      	bne.n	8014eb2 <tcp_close+0x22>
 8014e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8014edc <tcp_close+0x4c>)
 8014ea0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014ea4:	490e      	ldr	r1, [pc, #56]	@ (8014ee0 <tcp_close+0x50>)
 8014ea6:	480f      	ldr	r0, [pc, #60]	@ (8014ee4 <tcp_close+0x54>)
 8014ea8:	f009 f892 	bl	801dfd0 <iprintf>
 8014eac:	f06f 030f 	mvn.w	r3, #15
 8014eb0:	e00f      	b.n	8014ed2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	7d1b      	ldrb	r3, [r3, #20]
 8014eb6:	2b01      	cmp	r3, #1
 8014eb8:	d006      	beq.n	8014ec8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	8b5b      	ldrh	r3, [r3, #26]
 8014ebe:	f043 0310 	orr.w	r3, r3, #16
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014ec8:	2101      	movs	r1, #1
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7ff fe94 	bl	8014bf8 <tcp_close_shutdown>
 8014ed0:	4603      	mov	r3, r0
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3708      	adds	r7, #8
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	0801fcf8 	.word	0x0801fcf8
 8014ee0:	0801fe08 	.word	0x0801fe08
 8014ee4:	0801fd3c 	.word	0x0801fd3c

08014ee8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b08e      	sub	sp, #56	@ 0x38
 8014eec:	af04      	add	r7, sp, #16
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d107      	bne.n	8014f08 <tcp_abandon+0x20>
 8014ef8:	4b52      	ldr	r3, [pc, #328]	@ (8015044 <tcp_abandon+0x15c>)
 8014efa:	f240 223d 	movw	r2, #573	@ 0x23d
 8014efe:	4952      	ldr	r1, [pc, #328]	@ (8015048 <tcp_abandon+0x160>)
 8014f00:	4852      	ldr	r0, [pc, #328]	@ (801504c <tcp_abandon+0x164>)
 8014f02:	f009 f865 	bl	801dfd0 <iprintf>
 8014f06:	e099      	b.n	801503c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	7d1b      	ldrb	r3, [r3, #20]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	d106      	bne.n	8014f1e <tcp_abandon+0x36>
 8014f10:	4b4c      	ldr	r3, [pc, #304]	@ (8015044 <tcp_abandon+0x15c>)
 8014f12:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014f16:	494e      	ldr	r1, [pc, #312]	@ (8015050 <tcp_abandon+0x168>)
 8014f18:	484c      	ldr	r0, [pc, #304]	@ (801504c <tcp_abandon+0x164>)
 8014f1a:	f009 f859 	bl	801dfd0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	7d1b      	ldrb	r3, [r3, #20]
 8014f22:	2b0a      	cmp	r3, #10
 8014f24:	d107      	bne.n	8014f36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014f26:	6879      	ldr	r1, [r7, #4]
 8014f28:	484a      	ldr	r0, [pc, #296]	@ (8015054 <tcp_abandon+0x16c>)
 8014f2a:	f000 ffc5 	bl	8015eb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7ff fdb0 	bl	8014a94 <tcp_free>
 8014f34:	e082      	b.n	801503c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f48:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f50:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	691b      	ldr	r3, [r3, #16]
 8014f56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	7d1b      	ldrb	r3, [r3, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d126      	bne.n	8014fae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	8adb      	ldrh	r3, [r3, #22]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d02e      	beq.n	8014fc6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f68:	4b3b      	ldr	r3, [pc, #236]	@ (8015058 <tcp_abandon+0x170>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d105      	bne.n	8014f7e <tcp_abandon+0x96>
 8014f72:	4b39      	ldr	r3, [pc, #228]	@ (8015058 <tcp_abandon+0x170>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	4a37      	ldr	r2, [pc, #220]	@ (8015058 <tcp_abandon+0x170>)
 8014f7a:	6013      	str	r3, [r2, #0]
 8014f7c:	e013      	b.n	8014fa6 <tcp_abandon+0xbe>
 8014f7e:	4b36      	ldr	r3, [pc, #216]	@ (8015058 <tcp_abandon+0x170>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	61fb      	str	r3, [r7, #28]
 8014f84:	e00c      	b.n	8014fa0 <tcp_abandon+0xb8>
 8014f86:	69fb      	ldr	r3, [r7, #28]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d104      	bne.n	8014f9a <tcp_abandon+0xb2>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	68da      	ldr	r2, [r3, #12]
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	60da      	str	r2, [r3, #12]
 8014f98:	e005      	b.n	8014fa6 <tcp_abandon+0xbe>
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	61fb      	str	r3, [r7, #28]
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1ef      	bne.n	8014f86 <tcp_abandon+0x9e>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	60da      	str	r2, [r3, #12]
 8014fac:	e00b      	b.n	8014fc6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	8adb      	ldrh	r3, [r3, #22]
 8014fb6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014fb8:	6879      	ldr	r1, [r7, #4]
 8014fba:	4828      	ldr	r0, [pc, #160]	@ (801505c <tcp_abandon+0x174>)
 8014fbc:	f000 ff7c 	bl	8015eb8 <tcp_pcb_remove>
 8014fc0:	4b27      	ldr	r3, [pc, #156]	@ (8015060 <tcp_abandon+0x178>)
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d004      	beq.n	8014fd8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f000 fd1e 	bl	8015a14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d004      	beq.n	8014fea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f000 fd15 	bl	8015a14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d004      	beq.n	8014ffc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f000 fd0c 	bl	8015a14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d00e      	beq.n	8015020 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015002:	6879      	ldr	r1, [r7, #4]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	3304      	adds	r3, #4
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	8b12      	ldrh	r2, [r2, #24]
 801500c:	9202      	str	r2, [sp, #8]
 801500e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015010:	9201      	str	r2, [sp, #4]
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	460b      	mov	r3, r1
 8015016:	697a      	ldr	r2, [r7, #20]
 8015018:	69b9      	ldr	r1, [r7, #24]
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f004 fcbe 	bl	801999c <tcp_rst>
    }
    last_state = pcb->state;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	7d1b      	ldrb	r3, [r3, #20]
 8015024:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f7ff fd34 	bl	8014a94 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d004      	beq.n	801503c <tcp_abandon+0x154>
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	f06f 010c 	mvn.w	r1, #12
 8015038:	68f8      	ldr	r0, [r7, #12]
 801503a:	4798      	blx	r3
  }
}
 801503c:	3728      	adds	r7, #40	@ 0x28
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
 8015042:	bf00      	nop
 8015044:	0801fcf8 	.word	0x0801fcf8
 8015048:	0801fe3c 	.word	0x0801fe3c
 801504c:	0801fd3c 	.word	0x0801fd3c
 8015050:	0801fe58 	.word	0x0801fe58
 8015054:	200277c0 	.word	0x200277c0
 8015058:	200277b4 	.word	0x200277b4
 801505c:	200277bc 	.word	0x200277bc
 8015060:	200277c4 	.word	0x200277c4

08015064 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801506c:	2101      	movs	r1, #1
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7ff ff3a 	bl	8014ee8 <tcp_abandon>
}
 8015074:	bf00      	nop
 8015076:	3708      	adds	r7, #8
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d106      	bne.n	8015098 <tcp_update_rcv_ann_wnd+0x1c>
 801508a:	4b25      	ldr	r3, [pc, #148]	@ (8015120 <tcp_update_rcv_ann_wnd+0xa4>)
 801508c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015090:	4924      	ldr	r1, [pc, #144]	@ (8015124 <tcp_update_rcv_ann_wnd+0xa8>)
 8015092:	4825      	ldr	r0, [pc, #148]	@ (8015128 <tcp_update_rcv_ann_wnd+0xac>)
 8015094:	f008 ff9c 	bl	801dfd0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80150a0:	4413      	add	r3, r2
 80150a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80150ac:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80150b0:	bf28      	it	cs
 80150b2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80150b6:	b292      	uxth	r2, r2
 80150b8:	4413      	add	r3, r2
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	1ad3      	subs	r3, r2, r3
 80150be:	2b00      	cmp	r3, #0
 80150c0:	db08      	blt.n	80150d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ce:	68fa      	ldr	r2, [r7, #12]
 80150d0:	1ad3      	subs	r3, r2, r3
 80150d2:	e020      	b.n	8015116 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150dc:	1ad3      	subs	r3, r2, r3
 80150de:	2b00      	cmp	r3, #0
 80150e0:	dd03      	ble.n	80150ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2200      	movs	r2, #0
 80150e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80150e8:	e014      	b.n	8015114 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80150fc:	d306      	bcc.n	801510c <tcp_update_rcv_ann_wnd+0x90>
 80150fe:	4b08      	ldr	r3, [pc, #32]	@ (8015120 <tcp_update_rcv_ann_wnd+0xa4>)
 8015100:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015104:	4909      	ldr	r1, [pc, #36]	@ (801512c <tcp_update_rcv_ann_wnd+0xb0>)
 8015106:	4808      	ldr	r0, [pc, #32]	@ (8015128 <tcp_update_rcv_ann_wnd+0xac>)
 8015108:	f008 ff62 	bl	801dfd0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	b29a      	uxth	r2, r3
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015114:	2300      	movs	r3, #0
  }
}
 8015116:	4618      	mov	r0, r3
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	0801fcf8 	.word	0x0801fcf8
 8015124:	0801ff54 	.word	0x0801ff54
 8015128:	0801fd3c 	.word	0x0801fd3c
 801512c:	0801ff78 	.word	0x0801ff78

08015130 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	460b      	mov	r3, r1
 801513a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d107      	bne.n	8015152 <tcp_recved+0x22>
 8015142:	4b1f      	ldr	r3, [pc, #124]	@ (80151c0 <tcp_recved+0x90>)
 8015144:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015148:	491e      	ldr	r1, [pc, #120]	@ (80151c4 <tcp_recved+0x94>)
 801514a:	481f      	ldr	r0, [pc, #124]	@ (80151c8 <tcp_recved+0x98>)
 801514c:	f008 ff40 	bl	801dfd0 <iprintf>
 8015150:	e032      	b.n	80151b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7d1b      	ldrb	r3, [r3, #20]
 8015156:	2b01      	cmp	r3, #1
 8015158:	d106      	bne.n	8015168 <tcp_recved+0x38>
 801515a:	4b19      	ldr	r3, [pc, #100]	@ (80151c0 <tcp_recved+0x90>)
 801515c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015160:	491a      	ldr	r1, [pc, #104]	@ (80151cc <tcp_recved+0x9c>)
 8015162:	4819      	ldr	r0, [pc, #100]	@ (80151c8 <tcp_recved+0x98>)
 8015164:	f008 ff34 	bl	801dfd0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801516c:	887b      	ldrh	r3, [r7, #2]
 801516e:	4413      	add	r3, r2
 8015170:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015172:	89fb      	ldrh	r3, [r7, #14]
 8015174:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015178:	d804      	bhi.n	8015184 <tcp_recved+0x54>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801517e:	89fa      	ldrh	r2, [r7, #14]
 8015180:	429a      	cmp	r2, r3
 8015182:	d204      	bcs.n	801518e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801518a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801518c:	e002      	b.n	8015194 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	89fa      	ldrh	r2, [r7, #14]
 8015192:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7ff ff71 	bl	801507c <tcp_update_rcv_ann_wnd>
 801519a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80151a2:	d309      	bcc.n	80151b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	8b5b      	ldrh	r3, [r3, #26]
 80151a8:	f043 0302 	orr.w	r3, r3, #2
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f003 fe3e 	bl	8018e34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80151b8:	3710      	adds	r7, #16
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	0801fcf8 	.word	0x0801fcf8
 80151c4:	0801ff94 	.word	0x0801ff94
 80151c8:	0801fd3c 	.word	0x0801fd3c
 80151cc:	0801ffac 	.word	0x0801ffac

080151d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80151d0:	b5b0      	push	{r4, r5, r7, lr}
 80151d2:	b090      	sub	sp, #64	@ 0x40
 80151d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80151d6:	2300      	movs	r3, #0
 80151d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80151dc:	4b95      	ldr	r3, [pc, #596]	@ (8015434 <tcp_slowtmr+0x264>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	3301      	adds	r3, #1
 80151e2:	4a94      	ldr	r2, [pc, #592]	@ (8015434 <tcp_slowtmr+0x264>)
 80151e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80151e6:	4b94      	ldr	r3, [pc, #592]	@ (8015438 <tcp_slowtmr+0x268>)
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	3301      	adds	r3, #1
 80151ec:	b2da      	uxtb	r2, r3
 80151ee:	4b92      	ldr	r3, [pc, #584]	@ (8015438 <tcp_slowtmr+0x268>)
 80151f0:	701a      	strb	r2, [r3, #0]
 80151f2:	e000      	b.n	80151f6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80151f4:	bf00      	nop
  prev = NULL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80151fa:	4b90      	ldr	r3, [pc, #576]	@ (801543c <tcp_slowtmr+0x26c>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015200:	e29d      	b.n	801573e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015204:	7d1b      	ldrb	r3, [r3, #20]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d106      	bne.n	8015218 <tcp_slowtmr+0x48>
 801520a:	4b8d      	ldr	r3, [pc, #564]	@ (8015440 <tcp_slowtmr+0x270>)
 801520c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015210:	498c      	ldr	r1, [pc, #560]	@ (8015444 <tcp_slowtmr+0x274>)
 8015212:	488d      	ldr	r0, [pc, #564]	@ (8015448 <tcp_slowtmr+0x278>)
 8015214:	f008 fedc 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	7d1b      	ldrb	r3, [r3, #20]
 801521c:	2b01      	cmp	r3, #1
 801521e:	d106      	bne.n	801522e <tcp_slowtmr+0x5e>
 8015220:	4b87      	ldr	r3, [pc, #540]	@ (8015440 <tcp_slowtmr+0x270>)
 8015222:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015226:	4989      	ldr	r1, [pc, #548]	@ (801544c <tcp_slowtmr+0x27c>)
 8015228:	4887      	ldr	r0, [pc, #540]	@ (8015448 <tcp_slowtmr+0x278>)
 801522a:	f008 fed1 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	7d1b      	ldrb	r3, [r3, #20]
 8015232:	2b0a      	cmp	r3, #10
 8015234:	d106      	bne.n	8015244 <tcp_slowtmr+0x74>
 8015236:	4b82      	ldr	r3, [pc, #520]	@ (8015440 <tcp_slowtmr+0x270>)
 8015238:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801523c:	4984      	ldr	r1, [pc, #528]	@ (8015450 <tcp_slowtmr+0x280>)
 801523e:	4882      	ldr	r0, [pc, #520]	@ (8015448 <tcp_slowtmr+0x278>)
 8015240:	f008 fec6 	bl	801dfd0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015246:	7f9a      	ldrb	r2, [r3, #30]
 8015248:	4b7b      	ldr	r3, [pc, #492]	@ (8015438 <tcp_slowtmr+0x268>)
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	429a      	cmp	r2, r3
 801524e:	d105      	bne.n	801525c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015252:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801525a:	e270      	b.n	801573e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801525c:	4b76      	ldr	r3, [pc, #472]	@ (8015438 <tcp_slowtmr+0x268>)
 801525e:	781a      	ldrb	r2, [r3, #0]
 8015260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015262:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015264:	2300      	movs	r3, #0
 8015266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801526a:	2300      	movs	r3, #0
 801526c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015272:	7d1b      	ldrb	r3, [r3, #20]
 8015274:	2b02      	cmp	r3, #2
 8015276:	d10a      	bne.n	801528e <tcp_slowtmr+0xbe>
 8015278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801527a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801527e:	2b05      	cmp	r3, #5
 8015280:	d905      	bls.n	801528e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015286:	3301      	adds	r3, #1
 8015288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801528c:	e11e      	b.n	80154cc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015294:	2b0b      	cmp	r3, #11
 8015296:	d905      	bls.n	80152a4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801529c:	3301      	adds	r3, #1
 801529e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80152a2:	e113      	b.n	80154cc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80152a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d075      	beq.n	801539a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80152ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d006      	beq.n	80152c4 <tcp_slowtmr+0xf4>
 80152b6:	4b62      	ldr	r3, [pc, #392]	@ (8015440 <tcp_slowtmr+0x270>)
 80152b8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80152bc:	4965      	ldr	r1, [pc, #404]	@ (8015454 <tcp_slowtmr+0x284>)
 80152be:	4862      	ldr	r0, [pc, #392]	@ (8015448 <tcp_slowtmr+0x278>)
 80152c0:	f008 fe86 	bl	801dfd0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d106      	bne.n	80152da <tcp_slowtmr+0x10a>
 80152cc:	4b5c      	ldr	r3, [pc, #368]	@ (8015440 <tcp_slowtmr+0x270>)
 80152ce:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80152d2:	4961      	ldr	r1, [pc, #388]	@ (8015458 <tcp_slowtmr+0x288>)
 80152d4:	485c      	ldr	r0, [pc, #368]	@ (8015448 <tcp_slowtmr+0x278>)
 80152d6:	f008 fe7b 	bl	801dfd0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80152da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152dc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80152e0:	2b0b      	cmp	r3, #11
 80152e2:	d905      	bls.n	80152f0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80152e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152e8:	3301      	adds	r3, #1
 80152ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80152ee:	e0ed      	b.n	80154cc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80152f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80152f6:	3b01      	subs	r3, #1
 80152f8:	4a58      	ldr	r2, [pc, #352]	@ (801545c <tcp_slowtmr+0x28c>)
 80152fa:	5cd3      	ldrb	r3, [r2, r3]
 80152fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80152fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015300:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015304:	7c7a      	ldrb	r2, [r7, #17]
 8015306:	429a      	cmp	r2, r3
 8015308:	d907      	bls.n	801531a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015310:	3301      	adds	r3, #1
 8015312:	b2da      	uxtb	r2, r3
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015320:	7c7a      	ldrb	r2, [r7, #17]
 8015322:	429a      	cmp	r2, r3
 8015324:	f200 80d2 	bhi.w	80154cc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015328:	2301      	movs	r3, #1
 801532a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015332:	2b00      	cmp	r3, #0
 8015334:	d108      	bne.n	8015348 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015338:	f004 fc24 	bl	8019b84 <tcp_zero_window_probe>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d014      	beq.n	801536c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015342:	2300      	movs	r3, #0
 8015344:	623b      	str	r3, [r7, #32]
 8015346:	e011      	b.n	801536c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801534e:	4619      	mov	r1, r3
 8015350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015352:	f003 fae9 	bl	8018928 <tcp_split_unsent_seg>
 8015356:	4603      	mov	r3, r0
 8015358:	2b00      	cmp	r3, #0
 801535a:	d107      	bne.n	801536c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801535c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801535e:	f003 fd69 	bl	8018e34 <tcp_output>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d101      	bne.n	801536c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015368:	2300      	movs	r3, #0
 801536a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801536c:	6a3b      	ldr	r3, [r7, #32]
 801536e:	2b00      	cmp	r3, #0
 8015370:	f000 80ac 	beq.w	80154cc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015376:	2200      	movs	r2, #0
 8015378:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801537e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015382:	2b06      	cmp	r3, #6
 8015384:	f200 80a2 	bhi.w	80154cc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801538e:	3301      	adds	r3, #1
 8015390:	b2da      	uxtb	r2, r3
 8015392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015394:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015398:	e098      	b.n	80154cc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801539a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	db0f      	blt.n	80153c4 <tcp_slowtmr+0x1f4>
 80153a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80153aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d008      	beq.n	80153c4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80153b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	3301      	adds	r3, #1
 80153bc:	b29b      	uxth	r3, r3
 80153be:	b21a      	sxth	r2, r3
 80153c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80153c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80153ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80153d0:	429a      	cmp	r2, r3
 80153d2:	db7b      	blt.n	80154cc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80153d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153d6:	f004 f821 	bl	801941c <tcp_rexmit_rto_prepare>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d007      	beq.n	80153f0 <tcp_slowtmr+0x220>
 80153e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d171      	bne.n	80154cc <tcp_slowtmr+0x2fc>
 80153e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d06d      	beq.n	80154cc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80153f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f2:	7d1b      	ldrb	r3, [r3, #20]
 80153f4:	2b02      	cmp	r3, #2
 80153f6:	d03a      	beq.n	801546e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80153f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80153fe:	2b0c      	cmp	r3, #12
 8015400:	bf28      	it	cs
 8015402:	230c      	movcs	r3, #12
 8015404:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015408:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801540c:	10db      	asrs	r3, r3, #3
 801540e:	b21b      	sxth	r3, r3
 8015410:	461a      	mov	r2, r3
 8015412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015414:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015418:	4413      	add	r3, r2
 801541a:	7efa      	ldrb	r2, [r7, #27]
 801541c:	4910      	ldr	r1, [pc, #64]	@ (8015460 <tcp_slowtmr+0x290>)
 801541e:	5c8a      	ldrb	r2, [r1, r2]
 8015420:	4093      	lsls	r3, r2
 8015422:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801542a:	4293      	cmp	r3, r2
 801542c:	dc1a      	bgt.n	8015464 <tcp_slowtmr+0x294>
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	b21a      	sxth	r2, r3
 8015432:	e019      	b.n	8015468 <tcp_slowtmr+0x298>
 8015434:	200277b0 	.word	0x200277b0
 8015438:	200277c6 	.word	0x200277c6
 801543c:	200277bc 	.word	0x200277bc
 8015440:	0801fcf8 	.word	0x0801fcf8
 8015444:	0802003c 	.word	0x0802003c
 8015448:	0801fd3c 	.word	0x0801fd3c
 801544c:	08020068 	.word	0x08020068
 8015450:	08020094 	.word	0x08020094
 8015454:	080200c4 	.word	0x080200c4
 8015458:	080200f8 	.word	0x080200f8
 801545c:	080222b8 	.word	0x080222b8
 8015460:	080222a8 	.word	0x080222a8
 8015464:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015470:	2200      	movs	r2, #0
 8015472:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015476:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015480:	4293      	cmp	r3, r2
 8015482:	bf28      	it	cs
 8015484:	4613      	movcs	r3, r2
 8015486:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015488:	8a7b      	ldrh	r3, [r7, #18]
 801548a:	085b      	lsrs	r3, r3, #1
 801548c:	b29a      	uxth	r2, r3
 801548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015490:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015496:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801549c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d206      	bcs.n	80154b4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80154a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	b29a      	uxth	r2, r3
 80154ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80154b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80154b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80154be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c0:	2200      	movs	r2, #0
 80154c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80154c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80154c8:	f004 f818 	bl	80194fc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80154cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ce:	7d1b      	ldrb	r3, [r3, #20]
 80154d0:	2b06      	cmp	r3, #6
 80154d2:	d111      	bne.n	80154f8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80154d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d6:	8b5b      	ldrh	r3, [r3, #26]
 80154d8:	f003 0310 	and.w	r3, r3, #16
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00b      	beq.n	80154f8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154e0:	4b9c      	ldr	r3, [pc, #624]	@ (8015754 <tcp_slowtmr+0x584>)
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e6:	6a1b      	ldr	r3, [r3, #32]
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	2b28      	cmp	r3, #40	@ 0x28
 80154ec:	d904      	bls.n	80154f8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80154ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154f2:	3301      	adds	r3, #1
 80154f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80154f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fa:	7a5b      	ldrb	r3, [r3, #9]
 80154fc:	f003 0308 	and.w	r3, r3, #8
 8015500:	2b00      	cmp	r3, #0
 8015502:	d04a      	beq.n	801559a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015506:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015508:	2b04      	cmp	r3, #4
 801550a:	d003      	beq.n	8015514 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801550e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015510:	2b07      	cmp	r3, #7
 8015512:	d142      	bne.n	801559a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015514:	4b8f      	ldr	r3, [pc, #572]	@ (8015754 <tcp_slowtmr+0x584>)
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801551a:	6a1b      	ldr	r3, [r3, #32]
 801551c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015520:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015524:	4b8c      	ldr	r3, [pc, #560]	@ (8015758 <tcp_slowtmr+0x588>)
 8015526:	440b      	add	r3, r1
 8015528:	498c      	ldr	r1, [pc, #560]	@ (801575c <tcp_slowtmr+0x58c>)
 801552a:	fba1 1303 	umull	r1, r3, r1, r3
 801552e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015530:	429a      	cmp	r2, r3
 8015532:	d90a      	bls.n	801554a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015538:	3301      	adds	r3, #1
 801553a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801553e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015542:	3301      	adds	r3, #1
 8015544:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015548:	e027      	b.n	801559a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801554a:	4b82      	ldr	r3, [pc, #520]	@ (8015754 <tcp_slowtmr+0x584>)
 801554c:	681a      	ldr	r2, [r3, #0]
 801554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015550:	6a1b      	ldr	r3, [r3, #32]
 8015552:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015556:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015560:	4618      	mov	r0, r3
 8015562:	4b7f      	ldr	r3, [pc, #508]	@ (8015760 <tcp_slowtmr+0x590>)
 8015564:	fb00 f303 	mul.w	r3, r0, r3
 8015568:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801556a:	497c      	ldr	r1, [pc, #496]	@ (801575c <tcp_slowtmr+0x58c>)
 801556c:	fba1 1303 	umull	r1, r3, r1, r3
 8015570:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015572:	429a      	cmp	r2, r3
 8015574:	d911      	bls.n	801559a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015576:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015578:	f004 fac4 	bl	8019b04 <tcp_keepalive>
 801557c:	4603      	mov	r3, r0
 801557e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015582:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015586:	2b00      	cmp	r3, #0
 8015588:	d107      	bne.n	801559a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801558c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015590:	3301      	adds	r3, #1
 8015592:	b2da      	uxtb	r2, r3
 8015594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015596:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d011      	beq.n	80155c6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80155a2:	4b6c      	ldr	r3, [pc, #432]	@ (8015754 <tcp_slowtmr+0x584>)
 80155a4:	681a      	ldr	r2, [r3, #0]
 80155a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a8:	6a1b      	ldr	r3, [r3, #32]
 80155aa:	1ad2      	subs	r2, r2, r3
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80155b2:	4619      	mov	r1, r3
 80155b4:	460b      	mov	r3, r1
 80155b6:	005b      	lsls	r3, r3, #1
 80155b8:	440b      	add	r3, r1
 80155ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80155bc:	429a      	cmp	r2, r3
 80155be:	d302      	bcc.n	80155c6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80155c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155c2:	f000 fddd 	bl	8016180 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80155c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c8:	7d1b      	ldrb	r3, [r3, #20]
 80155ca:	2b03      	cmp	r3, #3
 80155cc:	d10b      	bne.n	80155e6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155ce:	4b61      	ldr	r3, [pc, #388]	@ (8015754 <tcp_slowtmr+0x584>)
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d4:	6a1b      	ldr	r3, [r3, #32]
 80155d6:	1ad3      	subs	r3, r2, r3
 80155d8:	2b28      	cmp	r3, #40	@ 0x28
 80155da:	d904      	bls.n	80155e6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80155dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155e0:	3301      	adds	r3, #1
 80155e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80155e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155e8:	7d1b      	ldrb	r3, [r3, #20]
 80155ea:	2b09      	cmp	r3, #9
 80155ec:	d10b      	bne.n	8015606 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80155ee:	4b59      	ldr	r3, [pc, #356]	@ (8015754 <tcp_slowtmr+0x584>)
 80155f0:	681a      	ldr	r2, [r3, #0]
 80155f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f4:	6a1b      	ldr	r3, [r3, #32]
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80155fa:	d904      	bls.n	8015606 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80155fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015600:	3301      	adds	r3, #1
 8015602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801560a:	2b00      	cmp	r3, #0
 801560c:	d060      	beq.n	80156d0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015614:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015616:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015618:	f000 fbfe 	bl	8015e18 <tcp_pcb_purge>
      if (prev != NULL) {
 801561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801561e:	2b00      	cmp	r3, #0
 8015620:	d010      	beq.n	8015644 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015622:	4b50      	ldr	r3, [pc, #320]	@ (8015764 <tcp_slowtmr+0x594>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015628:	429a      	cmp	r2, r3
 801562a:	d106      	bne.n	801563a <tcp_slowtmr+0x46a>
 801562c:	4b4e      	ldr	r3, [pc, #312]	@ (8015768 <tcp_slowtmr+0x598>)
 801562e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015632:	494e      	ldr	r1, [pc, #312]	@ (801576c <tcp_slowtmr+0x59c>)
 8015634:	484e      	ldr	r0, [pc, #312]	@ (8015770 <tcp_slowtmr+0x5a0>)
 8015636:	f008 fccb 	bl	801dfd0 <iprintf>
        prev->next = pcb->next;
 801563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563c:	68da      	ldr	r2, [r3, #12]
 801563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015640:	60da      	str	r2, [r3, #12]
 8015642:	e00f      	b.n	8015664 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015644:	4b47      	ldr	r3, [pc, #284]	@ (8015764 <tcp_slowtmr+0x594>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801564a:	429a      	cmp	r2, r3
 801564c:	d006      	beq.n	801565c <tcp_slowtmr+0x48c>
 801564e:	4b46      	ldr	r3, [pc, #280]	@ (8015768 <tcp_slowtmr+0x598>)
 8015650:	f240 5271 	movw	r2, #1393	@ 0x571
 8015654:	4947      	ldr	r1, [pc, #284]	@ (8015774 <tcp_slowtmr+0x5a4>)
 8015656:	4846      	ldr	r0, [pc, #280]	@ (8015770 <tcp_slowtmr+0x5a0>)
 8015658:	f008 fcba 	bl	801dfd0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	4a40      	ldr	r2, [pc, #256]	@ (8015764 <tcp_slowtmr+0x594>)
 8015662:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015664:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015668:	2b00      	cmp	r3, #0
 801566a:	d013      	beq.n	8015694 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801566e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015672:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015674:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015678:	3304      	adds	r3, #4
 801567a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801567c:	8ad2      	ldrh	r2, [r2, #22]
 801567e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015680:	8b09      	ldrh	r1, [r1, #24]
 8015682:	9102      	str	r1, [sp, #8]
 8015684:	9201      	str	r2, [sp, #4]
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	462b      	mov	r3, r5
 801568a:	4622      	mov	r2, r4
 801568c:	4601      	mov	r1, r0
 801568e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015690:	f004 f984 	bl	801999c <tcp_rst>
      err_arg = pcb->callback_arg;
 8015694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015696:	691b      	ldr	r3, [r3, #16]
 8015698:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801569c:	7d1b      	ldrb	r3, [r3, #20]
 801569e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80156a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80156a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80156aa:	6838      	ldr	r0, [r7, #0]
 80156ac:	f7ff f9f2 	bl	8014a94 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80156b0:	4b31      	ldr	r3, [pc, #196]	@ (8015778 <tcp_slowtmr+0x5a8>)
 80156b2:	2200      	movs	r2, #0
 80156b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d004      	beq.n	80156c6 <tcp_slowtmr+0x4f6>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f06f 010c 	mvn.w	r1, #12
 80156c2:	68b8      	ldr	r0, [r7, #8]
 80156c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80156c6:	4b2c      	ldr	r3, [pc, #176]	@ (8015778 <tcp_slowtmr+0x5a8>)
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d037      	beq.n	801573e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80156ce:	e592      	b.n	80151f6 <tcp_slowtmr+0x26>
      prev = pcb;
 80156d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80156d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80156da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156dc:	7f1b      	ldrb	r3, [r3, #28]
 80156de:	3301      	adds	r3, #1
 80156e0:	b2da      	uxtb	r2, r3
 80156e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80156e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156e8:	7f1a      	ldrb	r2, [r3, #28]
 80156ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ec:	7f5b      	ldrb	r3, [r3, #29]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d325      	bcc.n	801573e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80156f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156f4:	2200      	movs	r2, #0
 80156f6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80156f8:	4b1f      	ldr	r3, [pc, #124]	@ (8015778 <tcp_slowtmr+0x5a8>)
 80156fa:	2200      	movs	r2, #0
 80156fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80156fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00b      	beq.n	8015720 <tcp_slowtmr+0x550>
 8015708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801570e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015710:	6912      	ldr	r2, [r2, #16]
 8015712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015714:	4610      	mov	r0, r2
 8015716:	4798      	blx	r3
 8015718:	4603      	mov	r3, r0
 801571a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801571e:	e002      	b.n	8015726 <tcp_slowtmr+0x556>
 8015720:	2300      	movs	r3, #0
 8015722:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015726:	4b14      	ldr	r3, [pc, #80]	@ (8015778 <tcp_slowtmr+0x5a8>)
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	f47f ad62 	bne.w	80151f4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015730:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015734:	2b00      	cmp	r3, #0
 8015736:	d102      	bne.n	801573e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801573a:	f003 fb7b 	bl	8018e34 <tcp_output>
  while (pcb != NULL) {
 801573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015740:	2b00      	cmp	r3, #0
 8015742:	f47f ad5e 	bne.w	8015202 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015746:	2300      	movs	r3, #0
 8015748:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801574a:	4b0c      	ldr	r3, [pc, #48]	@ (801577c <tcp_slowtmr+0x5ac>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015750:	e069      	b.n	8015826 <tcp_slowtmr+0x656>
 8015752:	bf00      	nop
 8015754:	200277b0 	.word	0x200277b0
 8015758:	000a4cb8 	.word	0x000a4cb8
 801575c:	10624dd3 	.word	0x10624dd3
 8015760:	000124f8 	.word	0x000124f8
 8015764:	200277bc 	.word	0x200277bc
 8015768:	0801fcf8 	.word	0x0801fcf8
 801576c:	08020130 	.word	0x08020130
 8015770:	0801fd3c 	.word	0x0801fd3c
 8015774:	0802015c 	.word	0x0802015c
 8015778:	200277c4 	.word	0x200277c4
 801577c:	200277c0 	.word	0x200277c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015782:	7d1b      	ldrb	r3, [r3, #20]
 8015784:	2b0a      	cmp	r3, #10
 8015786:	d006      	beq.n	8015796 <tcp_slowtmr+0x5c6>
 8015788:	4b2b      	ldr	r3, [pc, #172]	@ (8015838 <tcp_slowtmr+0x668>)
 801578a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801578e:	492b      	ldr	r1, [pc, #172]	@ (801583c <tcp_slowtmr+0x66c>)
 8015790:	482b      	ldr	r0, [pc, #172]	@ (8015840 <tcp_slowtmr+0x670>)
 8015792:	f008 fc1d 	bl	801dfd0 <iprintf>
    pcb_remove = 0;
 8015796:	2300      	movs	r3, #0
 8015798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801579c:	4b29      	ldr	r3, [pc, #164]	@ (8015844 <tcp_slowtmr+0x674>)
 801579e:	681a      	ldr	r2, [r3, #0]
 80157a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a2:	6a1b      	ldr	r3, [r3, #32]
 80157a4:	1ad3      	subs	r3, r2, r3
 80157a6:	2bf0      	cmp	r3, #240	@ 0xf0
 80157a8:	d904      	bls.n	80157b4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80157aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80157ae:	3301      	adds	r3, #1
 80157b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80157b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d02f      	beq.n	801581c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80157bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80157be:	f000 fb2b 	bl	8015e18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80157c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d010      	beq.n	80157ea <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80157c8:	4b1f      	ldr	r3, [pc, #124]	@ (8015848 <tcp_slowtmr+0x678>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d106      	bne.n	80157e0 <tcp_slowtmr+0x610>
 80157d2:	4b19      	ldr	r3, [pc, #100]	@ (8015838 <tcp_slowtmr+0x668>)
 80157d4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80157d8:	491c      	ldr	r1, [pc, #112]	@ (801584c <tcp_slowtmr+0x67c>)
 80157da:	4819      	ldr	r0, [pc, #100]	@ (8015840 <tcp_slowtmr+0x670>)
 80157dc:	f008 fbf8 	bl	801dfd0 <iprintf>
        prev->next = pcb->next;
 80157e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157e2:	68da      	ldr	r2, [r3, #12]
 80157e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e6:	60da      	str	r2, [r3, #12]
 80157e8:	e00f      	b.n	801580a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80157ea:	4b17      	ldr	r3, [pc, #92]	@ (8015848 <tcp_slowtmr+0x678>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d006      	beq.n	8015802 <tcp_slowtmr+0x632>
 80157f4:	4b10      	ldr	r3, [pc, #64]	@ (8015838 <tcp_slowtmr+0x668>)
 80157f6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80157fa:	4915      	ldr	r1, [pc, #84]	@ (8015850 <tcp_slowtmr+0x680>)
 80157fc:	4810      	ldr	r0, [pc, #64]	@ (8015840 <tcp_slowtmr+0x670>)
 80157fe:	f008 fbe7 	bl	801dfd0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015804:	68db      	ldr	r3, [r3, #12]
 8015806:	4a10      	ldr	r2, [pc, #64]	@ (8015848 <tcp_slowtmr+0x678>)
 8015808:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801580c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801580e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015814:	69f8      	ldr	r0, [r7, #28]
 8015816:	f7ff f93d 	bl	8014a94 <tcp_free>
 801581a:	e004      	b.n	8015826 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801581c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801581e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015828:	2b00      	cmp	r3, #0
 801582a:	d1a9      	bne.n	8015780 <tcp_slowtmr+0x5b0>
    }
  }
}
 801582c:	bf00      	nop
 801582e:	bf00      	nop
 8015830:	3730      	adds	r7, #48	@ 0x30
 8015832:	46bd      	mov	sp, r7
 8015834:	bdb0      	pop	{r4, r5, r7, pc}
 8015836:	bf00      	nop
 8015838:	0801fcf8 	.word	0x0801fcf8
 801583c:	08020188 	.word	0x08020188
 8015840:	0801fd3c 	.word	0x0801fd3c
 8015844:	200277b0 	.word	0x200277b0
 8015848:	200277c0 	.word	0x200277c0
 801584c:	080201b8 	.word	0x080201b8
 8015850:	080201e0 	.word	0x080201e0

08015854 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801585a:	4b2d      	ldr	r3, [pc, #180]	@ (8015910 <tcp_fasttmr+0xbc>)
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	3301      	adds	r3, #1
 8015860:	b2da      	uxtb	r2, r3
 8015862:	4b2b      	ldr	r3, [pc, #172]	@ (8015910 <tcp_fasttmr+0xbc>)
 8015864:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015866:	4b2b      	ldr	r3, [pc, #172]	@ (8015914 <tcp_fasttmr+0xc0>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801586c:	e048      	b.n	8015900 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	7f9a      	ldrb	r2, [r3, #30]
 8015872:	4b27      	ldr	r3, [pc, #156]	@ (8015910 <tcp_fasttmr+0xbc>)
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	429a      	cmp	r2, r3
 8015878:	d03f      	beq.n	80158fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801587a:	4b25      	ldr	r3, [pc, #148]	@ (8015910 <tcp_fasttmr+0xbc>)
 801587c:	781a      	ldrb	r2, [r3, #0]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8b5b      	ldrh	r3, [r3, #26]
 8015886:	f003 0301 	and.w	r3, r3, #1
 801588a:	2b00      	cmp	r3, #0
 801588c:	d010      	beq.n	80158b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	8b5b      	ldrh	r3, [r3, #26]
 8015892:	f043 0302 	orr.w	r3, r3, #2
 8015896:	b29a      	uxth	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f003 fac9 	bl	8018e34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	8b5b      	ldrh	r3, [r3, #26]
 80158a6:	f023 0303 	bic.w	r3, r3, #3
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	8b5b      	ldrh	r3, [r3, #26]
 80158b4:	f003 0308 	and.w	r3, r3, #8
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d009      	beq.n	80158d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	8b5b      	ldrh	r3, [r3, #26]
 80158c0:	f023 0308 	bic.w	r3, r3, #8
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f7ff fa76 	bl	8014dbc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00a      	beq.n	80158f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80158de:	4b0e      	ldr	r3, [pc, #56]	@ (8015918 <tcp_fasttmr+0xc4>)
 80158e0:	2200      	movs	r2, #0
 80158e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 f819 	bl	801591c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80158ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015918 <tcp_fasttmr+0xc4>)
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d000      	beq.n	80158f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80158f2:	e7b8      	b.n	8015866 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	607b      	str	r3, [r7, #4]
 80158f8:	e002      	b.n	8015900 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1b3      	bne.n	801586e <tcp_fasttmr+0x1a>
    }
  }
}
 8015906:	bf00      	nop
 8015908:	bf00      	nop
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	200277c6 	.word	0x200277c6
 8015914:	200277bc 	.word	0x200277bc
 8015918:	200277c4 	.word	0x200277c4

0801591c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b085      	sub	sp, #20
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d109      	bne.n	801593e <tcp_process_refused_data+0x22>
 801592a:	4b37      	ldr	r3, [pc, #220]	@ (8015a08 <tcp_process_refused_data+0xec>)
 801592c:	f240 6209 	movw	r2, #1545	@ 0x609
 8015930:	4936      	ldr	r1, [pc, #216]	@ (8015a0c <tcp_process_refused_data+0xf0>)
 8015932:	4837      	ldr	r0, [pc, #220]	@ (8015a10 <tcp_process_refused_data+0xf4>)
 8015934:	f008 fb4c 	bl	801dfd0 <iprintf>
 8015938:	f06f 030f 	mvn.w	r3, #15
 801593c:	e060      	b.n	8015a00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015942:	7b5b      	ldrb	r3, [r3, #13]
 8015944:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801594a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2200      	movs	r2, #0
 8015950:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015958:	2b00      	cmp	r3, #0
 801595a:	d00b      	beq.n	8015974 <tcp_process_refused_data+0x58>
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6918      	ldr	r0, [r3, #16]
 8015966:	2300      	movs	r3, #0
 8015968:	68ba      	ldr	r2, [r7, #8]
 801596a:	6879      	ldr	r1, [r7, #4]
 801596c:	47a0      	blx	r4
 801596e:	4603      	mov	r3, r0
 8015970:	73fb      	strb	r3, [r7, #15]
 8015972:	e007      	b.n	8015984 <tcp_process_refused_data+0x68>
 8015974:	2300      	movs	r3, #0
 8015976:	68ba      	ldr	r2, [r7, #8]
 8015978:	6879      	ldr	r1, [r7, #4]
 801597a:	2000      	movs	r0, #0
 801597c:	f000 f8a4 	bl	8015ac8 <tcp_recv_null>
 8015980:	4603      	mov	r3, r0
 8015982:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d12a      	bne.n	80159e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801598c:	7bbb      	ldrb	r3, [r7, #14]
 801598e:	f003 0320 	and.w	r3, r3, #32
 8015992:	2b00      	cmp	r3, #0
 8015994:	d033      	beq.n	80159fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801599a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801599e:	d005      	beq.n	80159ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159a4:	3301      	adds	r3, #1
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d00b      	beq.n	80159ce <tcp_process_refused_data+0xb2>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6918      	ldr	r0, [r3, #16]
 80159c0:	2300      	movs	r3, #0
 80159c2:	2200      	movs	r2, #0
 80159c4:	6879      	ldr	r1, [r7, #4]
 80159c6:	47a0      	blx	r4
 80159c8:	4603      	mov	r3, r0
 80159ca:	73fb      	strb	r3, [r7, #15]
 80159cc:	e001      	b.n	80159d2 <tcp_process_refused_data+0xb6>
 80159ce:	2300      	movs	r3, #0
 80159d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80159d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159d6:	f113 0f0d 	cmn.w	r3, #13
 80159da:	d110      	bne.n	80159fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80159dc:	f06f 030c 	mvn.w	r3, #12
 80159e0:	e00e      	b.n	8015a00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80159e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159e6:	f113 0f0d 	cmn.w	r3, #13
 80159ea:	d102      	bne.n	80159f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80159ec:	f06f 030c 	mvn.w	r3, #12
 80159f0:	e006      	b.n	8015a00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	68ba      	ldr	r2, [r7, #8]
 80159f6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80159f8:	f06f 0304 	mvn.w	r3, #4
 80159fc:	e000      	b.n	8015a00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80159fe:	2300      	movs	r3, #0
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3714      	adds	r7, #20
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd90      	pop	{r4, r7, pc}
 8015a08:	0801fcf8 	.word	0x0801fcf8
 8015a0c:	08020208 	.word	0x08020208
 8015a10:	0801fd3c 	.word	0x0801fd3c

08015a14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b084      	sub	sp, #16
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015a1c:	e007      	b.n	8015a2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f000 f80a 	bl	8015a3e <tcp_seg_free>
    seg = next;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d1f4      	bne.n	8015a1e <tcp_segs_free+0xa>
  }
}
 8015a34:	bf00      	nop
 8015a36:	bf00      	nop
 8015a38:	3710      	adds	r7, #16
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}

08015a3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015a3e:	b580      	push	{r7, lr}
 8015a40:	b082      	sub	sp, #8
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d00c      	beq.n	8015a66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d004      	beq.n	8015a5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7fe fd5f 	bl	801451c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015a5e:	6879      	ldr	r1, [r7, #4]
 8015a60:	2003      	movs	r0, #3
 8015a62:	f7fd feb7 	bl	80137d4 <memp_free>
  }
}
 8015a66:	bf00      	nop
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
	...

08015a70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d106      	bne.n	8015a8c <tcp_seg_copy+0x1c>
 8015a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8015abc <tcp_seg_copy+0x4c>)
 8015a80:	f240 6282 	movw	r2, #1666	@ 0x682
 8015a84:	490e      	ldr	r1, [pc, #56]	@ (8015ac0 <tcp_seg_copy+0x50>)
 8015a86:	480f      	ldr	r0, [pc, #60]	@ (8015ac4 <tcp_seg_copy+0x54>)
 8015a88:	f008 faa2 	bl	801dfd0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015a8c:	2003      	movs	r0, #3
 8015a8e:	f7fd fe2b 	bl	80136e8 <memp_malloc>
 8015a92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d101      	bne.n	8015a9e <tcp_seg_copy+0x2e>
    return NULL;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	e00a      	b.n	8015ab4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015a9e:	2210      	movs	r2, #16
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	68f8      	ldr	r0, [r7, #12]
 8015aa4:	f008 fcbf 	bl	801e426 <memcpy>
  pbuf_ref(cseg->p);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fe fddb 	bl	8014668 <pbuf_ref>
  return cseg;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3710      	adds	r7, #16
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	0801fcf8 	.word	0x0801fcf8
 8015ac0:	0802024c 	.word	0x0802024c
 8015ac4:	0801fd3c 	.word	0x0801fd3c

08015ac8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	607a      	str	r2, [r7, #4]
 8015ad4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d109      	bne.n	8015af0 <tcp_recv_null+0x28>
 8015adc:	4b12      	ldr	r3, [pc, #72]	@ (8015b28 <tcp_recv_null+0x60>)
 8015ade:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015ae2:	4912      	ldr	r1, [pc, #72]	@ (8015b2c <tcp_recv_null+0x64>)
 8015ae4:	4812      	ldr	r0, [pc, #72]	@ (8015b30 <tcp_recv_null+0x68>)
 8015ae6:	f008 fa73 	bl	801dfd0 <iprintf>
 8015aea:	f06f 030f 	mvn.w	r3, #15
 8015aee:	e016      	b.n	8015b1e <tcp_recv_null+0x56>

  if (p != NULL) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d009      	beq.n	8015b0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	891b      	ldrh	r3, [r3, #8]
 8015afa:	4619      	mov	r1, r3
 8015afc:	68b8      	ldr	r0, [r7, #8]
 8015afe:	f7ff fb17 	bl	8015130 <tcp_recved>
    pbuf_free(p);
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7fe fd0a 	bl	801451c <pbuf_free>
 8015b08:	e008      	b.n	8015b1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d104      	bne.n	8015b1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015b12:	68b8      	ldr	r0, [r7, #8]
 8015b14:	f7ff f9bc 	bl	8014e90 <tcp_close>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	e000      	b.n	8015b1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015b1c:	2300      	movs	r3, #0
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3710      	adds	r7, #16
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	0801fcf8 	.word	0x0801fcf8
 8015b2c:	08020268 	.word	0x08020268
 8015b30:	0801fd3c 	.word	0x0801fd3c

08015b34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	db01      	blt.n	8015b4a <tcp_kill_prio+0x16>
 8015b46:	79fb      	ldrb	r3, [r7, #7]
 8015b48:	e000      	b.n	8015b4c <tcp_kill_prio+0x18>
 8015b4a:	237f      	movs	r3, #127	@ 0x7f
 8015b4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015b4e:	7afb      	ldrb	r3, [r7, #11]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d034      	beq.n	8015bbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015b54:	7afb      	ldrb	r3, [r7, #11]
 8015b56:	3b01      	subs	r3, #1
 8015b58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b62:	4b19      	ldr	r3, [pc, #100]	@ (8015bc8 <tcp_kill_prio+0x94>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	617b      	str	r3, [r7, #20]
 8015b68:	e01f      	b.n	8015baa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	7d5b      	ldrb	r3, [r3, #21]
 8015b6e:	7afa      	ldrb	r2, [r7, #11]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d80c      	bhi.n	8015b8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015b78:	7afa      	ldrb	r2, [r7, #11]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d112      	bne.n	8015ba4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b7e:	4b13      	ldr	r3, [pc, #76]	@ (8015bcc <tcp_kill_prio+0x98>)
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	6a1b      	ldr	r3, [r3, #32]
 8015b86:	1ad3      	subs	r3, r2, r3
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d80a      	bhi.n	8015ba4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8015bcc <tcp_kill_prio+0x98>)
 8015b90:	681a      	ldr	r2, [r3, #0]
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	6a1b      	ldr	r3, [r3, #32]
 8015b96:	1ad3      	subs	r3, r2, r3
 8015b98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	7d5b      	ldrb	r3, [r3, #21]
 8015ba2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	617b      	str	r3, [r7, #20]
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d1dc      	bne.n	8015b6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015bb0:	693b      	ldr	r3, [r7, #16]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d004      	beq.n	8015bc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015bb6:	6938      	ldr	r0, [r7, #16]
 8015bb8:	f7ff fa54 	bl	8015064 <tcp_abort>
 8015bbc:	e000      	b.n	8015bc0 <tcp_kill_prio+0x8c>
    return;
 8015bbe:	bf00      	nop
  }
}
 8015bc0:	3718      	adds	r7, #24
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	200277bc 	.word	0x200277bc
 8015bcc:	200277b0 	.word	0x200277b0

08015bd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015bda:	79fb      	ldrb	r3, [r7, #7]
 8015bdc:	2b08      	cmp	r3, #8
 8015bde:	d009      	beq.n	8015bf4 <tcp_kill_state+0x24>
 8015be0:	79fb      	ldrb	r3, [r7, #7]
 8015be2:	2b09      	cmp	r3, #9
 8015be4:	d006      	beq.n	8015bf4 <tcp_kill_state+0x24>
 8015be6:	4b1a      	ldr	r3, [pc, #104]	@ (8015c50 <tcp_kill_state+0x80>)
 8015be8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015bec:	4919      	ldr	r1, [pc, #100]	@ (8015c54 <tcp_kill_state+0x84>)
 8015bee:	481a      	ldr	r0, [pc, #104]	@ (8015c58 <tcp_kill_state+0x88>)
 8015bf0:	f008 f9ee 	bl	801dfd0 <iprintf>

  inactivity = 0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bfc:	4b17      	ldr	r3, [pc, #92]	@ (8015c5c <tcp_kill_state+0x8c>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	e017      	b.n	8015c34 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	7d1b      	ldrb	r3, [r3, #20]
 8015c08:	79fa      	ldrb	r2, [r7, #7]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d10f      	bne.n	8015c2e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c0e:	4b14      	ldr	r3, [pc, #80]	@ (8015c60 <tcp_kill_state+0x90>)
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	6a1b      	ldr	r3, [r3, #32]
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d807      	bhi.n	8015c2e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015c1e:	4b10      	ldr	r3, [pc, #64]	@ (8015c60 <tcp_kill_state+0x90>)
 8015c20:	681a      	ldr	r2, [r3, #0]
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	6a1b      	ldr	r3, [r3, #32]
 8015c26:	1ad3      	subs	r3, r2, r3
 8015c28:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	68db      	ldr	r3, [r3, #12]
 8015c32:	617b      	str	r3, [r7, #20]
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d1e4      	bne.n	8015c04 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d003      	beq.n	8015c48 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015c40:	2100      	movs	r1, #0
 8015c42:	6938      	ldr	r0, [r7, #16]
 8015c44:	f7ff f950 	bl	8014ee8 <tcp_abandon>
  }
}
 8015c48:	bf00      	nop
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	0801fcf8 	.word	0x0801fcf8
 8015c54:	08020284 	.word	0x08020284
 8015c58:	0801fd3c 	.word	0x0801fd3c
 8015c5c:	200277bc 	.word	0x200277bc
 8015c60:	200277b0 	.word	0x200277b0

08015c64 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c72:	4b12      	ldr	r3, [pc, #72]	@ (8015cbc <tcp_kill_timewait+0x58>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	60fb      	str	r3, [r7, #12]
 8015c78:	e012      	b.n	8015ca0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c7a:	4b11      	ldr	r3, [pc, #68]	@ (8015cc0 <tcp_kill_timewait+0x5c>)
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	6a1b      	ldr	r3, [r3, #32]
 8015c82:	1ad3      	subs	r3, r2, r3
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d807      	bhi.n	8015c9a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8015cc0 <tcp_kill_timewait+0x5c>)
 8015c8c:	681a      	ldr	r2, [r3, #0]
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	6a1b      	ldr	r3, [r3, #32]
 8015c92:	1ad3      	subs	r3, r2, r3
 8015c94:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	60fb      	str	r3, [r7, #12]
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d1e9      	bne.n	8015c7a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d002      	beq.n	8015cb2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015cac:	68b8      	ldr	r0, [r7, #8]
 8015cae:	f7ff f9d9 	bl	8015064 <tcp_abort>
  }
}
 8015cb2:	bf00      	nop
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	200277c0 	.word	0x200277c0
 8015cc0:	200277b0 	.word	0x200277b0

08015cc4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015cca:	4b10      	ldr	r3, [pc, #64]	@ (8015d0c <tcp_handle_closepend+0x48>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015cd0:	e014      	b.n	8015cfc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	68db      	ldr	r3, [r3, #12]
 8015cd6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	8b5b      	ldrh	r3, [r3, #26]
 8015cdc:	f003 0308 	and.w	r3, r3, #8
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d009      	beq.n	8015cf8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	8b5b      	ldrh	r3, [r3, #26]
 8015ce8:	f023 0308 	bic.w	r3, r3, #8
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7ff f862 	bl	8014dbc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d1e7      	bne.n	8015cd2 <tcp_handle_closepend+0xe>
  }
}
 8015d02:	bf00      	nop
 8015d04:	bf00      	nop
 8015d06:	3708      	adds	r7, #8
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	200277bc 	.word	0x200277bc

08015d10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	4603      	mov	r3, r0
 8015d18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d1a:	2001      	movs	r0, #1
 8015d1c:	f7fd fce4 	bl	80136e8 <memp_malloc>
 8015d20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d126      	bne.n	8015d76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015d28:	f7ff ffcc 	bl	8015cc4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015d2c:	f7ff ff9a 	bl	8015c64 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d30:	2001      	movs	r0, #1
 8015d32:	f7fd fcd9 	bl	80136e8 <memp_malloc>
 8015d36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d11b      	bne.n	8015d76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015d3e:	2009      	movs	r0, #9
 8015d40:	f7ff ff46 	bl	8015bd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d44:	2001      	movs	r0, #1
 8015d46:	f7fd fccf 	bl	80136e8 <memp_malloc>
 8015d4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d111      	bne.n	8015d76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015d52:	2008      	movs	r0, #8
 8015d54:	f7ff ff3c 	bl	8015bd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d58:	2001      	movs	r0, #1
 8015d5a:	f7fd fcc5 	bl	80136e8 <memp_malloc>
 8015d5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d107      	bne.n	8015d76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015d66:	79fb      	ldrb	r3, [r7, #7]
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7ff fee3 	bl	8015b34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d6e:	2001      	movs	r0, #1
 8015d70:	f7fd fcba 	bl	80136e8 <memp_malloc>
 8015d74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d03f      	beq.n	8015dfc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015d7c:	229c      	movs	r2, #156	@ 0x9c
 8015d7e:	2100      	movs	r1, #0
 8015d80:	68f8      	ldr	r0, [r7, #12]
 8015d82:	f008 fa7d 	bl	801e280 <memset>
    pcb->prio = prio;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	79fa      	ldrb	r2, [r7, #7]
 8015d8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	22ff      	movs	r2, #255	@ 0xff
 8015daa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015db2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2206      	movs	r2, #6
 8015db8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2206      	movs	r2, #6
 8015dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015dc8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2201      	movs	r2, #1
 8015dce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015e08 <tcp_alloc+0xf8>)
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015dda:	4b0c      	ldr	r3, [pc, #48]	@ (8015e0c <tcp_alloc+0xfc>)
 8015ddc:	781a      	ldrb	r2, [r3, #0]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015de8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	4a08      	ldr	r2, [pc, #32]	@ (8015e10 <tcp_alloc+0x100>)
 8015df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	4a07      	ldr	r2, [pc, #28]	@ (8015e14 <tcp_alloc+0x104>)
 8015df8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	200277b0 	.word	0x200277b0
 8015e0c:	200277c6 	.word	0x200277c6
 8015e10:	08015ac9 	.word	0x08015ac9
 8015e14:	006ddd00 	.word	0x006ddd00

08015e18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d107      	bne.n	8015e36 <tcp_pcb_purge+0x1e>
 8015e26:	4b21      	ldr	r3, [pc, #132]	@ (8015eac <tcp_pcb_purge+0x94>)
 8015e28:	f640 0251 	movw	r2, #2129	@ 0x851
 8015e2c:	4920      	ldr	r1, [pc, #128]	@ (8015eb0 <tcp_pcb_purge+0x98>)
 8015e2e:	4821      	ldr	r0, [pc, #132]	@ (8015eb4 <tcp_pcb_purge+0x9c>)
 8015e30:	f008 f8ce 	bl	801dfd0 <iprintf>
 8015e34:	e037      	b.n	8015ea6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	7d1b      	ldrb	r3, [r3, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d033      	beq.n	8015ea6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015e42:	2b0a      	cmp	r3, #10
 8015e44:	d02f      	beq.n	8015ea6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d02b      	beq.n	8015ea6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d007      	beq.n	8015e66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fe fb5e 	bl	801451c <pbuf_free>
      pcb->refused_data = NULL;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d002      	beq.n	8015e74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 f986 	bl	8016180 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e7a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7ff fdc7 	bl	8015a14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ff fdc2 	bl	8015a14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2200      	movs	r2, #0
 8015e94:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	0801fcf8 	.word	0x0801fcf8
 8015eb0:	08020344 	.word	0x08020344
 8015eb4:	0801fd3c 	.word	0x0801fd3c

08015eb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b084      	sub	sp, #16
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d106      	bne.n	8015ed6 <tcp_pcb_remove+0x1e>
 8015ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8015fc4 <tcp_pcb_remove+0x10c>)
 8015eca:	f640 0283 	movw	r2, #2179	@ 0x883
 8015ece:	493e      	ldr	r1, [pc, #248]	@ (8015fc8 <tcp_pcb_remove+0x110>)
 8015ed0:	483e      	ldr	r0, [pc, #248]	@ (8015fcc <tcp_pcb_remove+0x114>)
 8015ed2:	f008 f87d 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d106      	bne.n	8015eea <tcp_pcb_remove+0x32>
 8015edc:	4b39      	ldr	r3, [pc, #228]	@ (8015fc4 <tcp_pcb_remove+0x10c>)
 8015ede:	f640 0284 	movw	r2, #2180	@ 0x884
 8015ee2:	493b      	ldr	r1, [pc, #236]	@ (8015fd0 <tcp_pcb_remove+0x118>)
 8015ee4:	4839      	ldr	r0, [pc, #228]	@ (8015fcc <tcp_pcb_remove+0x114>)
 8015ee6:	f008 f873 	bl	801dfd0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	683a      	ldr	r2, [r7, #0]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d105      	bne.n	8015f00 <tcp_pcb_remove+0x48>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68da      	ldr	r2, [r3, #12]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	601a      	str	r2, [r3, #0]
 8015efe:	e013      	b.n	8015f28 <tcp_pcb_remove+0x70>
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	60fb      	str	r3, [r7, #12]
 8015f06:	e00c      	b.n	8015f22 <tcp_pcb_remove+0x6a>
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	68db      	ldr	r3, [r3, #12]
 8015f0c:	683a      	ldr	r2, [r7, #0]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d104      	bne.n	8015f1c <tcp_pcb_remove+0x64>
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	68da      	ldr	r2, [r3, #12]
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	60da      	str	r2, [r3, #12]
 8015f1a:	e005      	b.n	8015f28 <tcp_pcb_remove+0x70>
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	60fb      	str	r3, [r7, #12]
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d1ef      	bne.n	8015f08 <tcp_pcb_remove+0x50>
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015f2e:	6838      	ldr	r0, [r7, #0]
 8015f30:	f7ff ff72 	bl	8015e18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	7d1b      	ldrb	r3, [r3, #20]
 8015f38:	2b0a      	cmp	r3, #10
 8015f3a:	d013      	beq.n	8015f64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015f40:	2b01      	cmp	r3, #1
 8015f42:	d00f      	beq.n	8015f64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	8b5b      	ldrh	r3, [r3, #26]
 8015f48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d009      	beq.n	8015f64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	8b5b      	ldrh	r3, [r3, #26]
 8015f54:	f043 0302 	orr.w	r3, r3, #2
 8015f58:	b29a      	uxth	r2, r3
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015f5e:	6838      	ldr	r0, [r7, #0]
 8015f60:	f002 ff68 	bl	8018e34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	7d1b      	ldrb	r3, [r3, #20]
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d020      	beq.n	8015fae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d006      	beq.n	8015f82 <tcp_pcb_remove+0xca>
 8015f74:	4b13      	ldr	r3, [pc, #76]	@ (8015fc4 <tcp_pcb_remove+0x10c>)
 8015f76:	f640 0293 	movw	r2, #2195	@ 0x893
 8015f7a:	4916      	ldr	r1, [pc, #88]	@ (8015fd4 <tcp_pcb_remove+0x11c>)
 8015f7c:	4813      	ldr	r0, [pc, #76]	@ (8015fcc <tcp_pcb_remove+0x114>)
 8015f7e:	f008 f827 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d006      	beq.n	8015f98 <tcp_pcb_remove+0xe0>
 8015f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8015fc4 <tcp_pcb_remove+0x10c>)
 8015f8c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015f90:	4911      	ldr	r1, [pc, #68]	@ (8015fd8 <tcp_pcb_remove+0x120>)
 8015f92:	480e      	ldr	r0, [pc, #56]	@ (8015fcc <tcp_pcb_remove+0x114>)
 8015f94:	f008 f81c 	bl	801dfd0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d006      	beq.n	8015fae <tcp_pcb_remove+0xf6>
 8015fa0:	4b08      	ldr	r3, [pc, #32]	@ (8015fc4 <tcp_pcb_remove+0x10c>)
 8015fa2:	f640 0296 	movw	r2, #2198	@ 0x896
 8015fa6:	490d      	ldr	r1, [pc, #52]	@ (8015fdc <tcp_pcb_remove+0x124>)
 8015fa8:	4808      	ldr	r0, [pc, #32]	@ (8015fcc <tcp_pcb_remove+0x114>)
 8015faa:	f008 f811 	bl	801dfd0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015fba:	bf00      	nop
 8015fbc:	3710      	adds	r7, #16
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
 8015fc2:	bf00      	nop
 8015fc4:	0801fcf8 	.word	0x0801fcf8
 8015fc8:	08020360 	.word	0x08020360
 8015fcc:	0801fd3c 	.word	0x0801fd3c
 8015fd0:	0802037c 	.word	0x0802037c
 8015fd4:	0802039c 	.word	0x0802039c
 8015fd8:	080203b4 	.word	0x080203b4
 8015fdc:	080203d0 	.word	0x080203d0

08015fe0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d106      	bne.n	8015ffc <tcp_next_iss+0x1c>
 8015fee:	4b0a      	ldr	r3, [pc, #40]	@ (8016018 <tcp_next_iss+0x38>)
 8015ff0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015ff4:	4909      	ldr	r1, [pc, #36]	@ (801601c <tcp_next_iss+0x3c>)
 8015ff6:	480a      	ldr	r0, [pc, #40]	@ (8016020 <tcp_next_iss+0x40>)
 8015ff8:	f007 ffea 	bl	801dfd0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015ffc:	4b09      	ldr	r3, [pc, #36]	@ (8016024 <tcp_next_iss+0x44>)
 8015ffe:	681a      	ldr	r2, [r3, #0]
 8016000:	4b09      	ldr	r3, [pc, #36]	@ (8016028 <tcp_next_iss+0x48>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	4413      	add	r3, r2
 8016006:	4a07      	ldr	r2, [pc, #28]	@ (8016024 <tcp_next_iss+0x44>)
 8016008:	6013      	str	r3, [r2, #0]
  return iss;
 801600a:	4b06      	ldr	r3, [pc, #24]	@ (8016024 <tcp_next_iss+0x44>)
 801600c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801600e:	4618      	mov	r0, r3
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	0801fcf8 	.word	0x0801fcf8
 801601c:	080203e8 	.word	0x080203e8
 8016020:	0801fd3c 	.word	0x0801fd3c
 8016024:	20000028 	.word	0x20000028
 8016028:	200277b0 	.word	0x200277b0

0801602c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b086      	sub	sp, #24
 8016030:	af00      	add	r7, sp, #0
 8016032:	4603      	mov	r3, r0
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d106      	bne.n	801604e <tcp_eff_send_mss_netif+0x22>
 8016040:	4b14      	ldr	r3, [pc, #80]	@ (8016094 <tcp_eff_send_mss_netif+0x68>)
 8016042:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016046:	4914      	ldr	r1, [pc, #80]	@ (8016098 <tcp_eff_send_mss_netif+0x6c>)
 8016048:	4814      	ldr	r0, [pc, #80]	@ (801609c <tcp_eff_send_mss_netif+0x70>)
 801604a:	f007 ffc1 	bl	801dfd0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d101      	bne.n	8016058 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016054:	89fb      	ldrh	r3, [r7, #14]
 8016056:	e019      	b.n	801608c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801605c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801605e:	8afb      	ldrh	r3, [r7, #22]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d012      	beq.n	801608a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016064:	2328      	movs	r3, #40	@ 0x28
 8016066:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016068:	8afa      	ldrh	r2, [r7, #22]
 801606a:	8abb      	ldrh	r3, [r7, #20]
 801606c:	429a      	cmp	r2, r3
 801606e:	d904      	bls.n	801607a <tcp_eff_send_mss_netif+0x4e>
 8016070:	8afa      	ldrh	r2, [r7, #22]
 8016072:	8abb      	ldrh	r3, [r7, #20]
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	b29b      	uxth	r3, r3
 8016078:	e000      	b.n	801607c <tcp_eff_send_mss_netif+0x50>
 801607a:	2300      	movs	r3, #0
 801607c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801607e:	8a7a      	ldrh	r2, [r7, #18]
 8016080:	89fb      	ldrh	r3, [r7, #14]
 8016082:	4293      	cmp	r3, r2
 8016084:	bf28      	it	cs
 8016086:	4613      	movcs	r3, r2
 8016088:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801608a:	89fb      	ldrh	r3, [r7, #14]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3718      	adds	r7, #24
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	0801fcf8 	.word	0x0801fcf8
 8016098:	08020404 	.word	0x08020404
 801609c:	0801fd3c 	.word	0x0801fd3c

080160a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d119      	bne.n	80160e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80160b4:	4b10      	ldr	r3, [pc, #64]	@ (80160f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80160b6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80160ba:	4910      	ldr	r1, [pc, #64]	@ (80160fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80160bc:	4810      	ldr	r0, [pc, #64]	@ (8016100 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80160be:	f007 ff87 	bl	801dfd0 <iprintf>

  while (pcb != NULL) {
 80160c2:	e011      	b.n	80160e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d108      	bne.n	80160e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f7fe ffc4 	bl	8015064 <tcp_abort>
      pcb = next;
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	60fb      	str	r3, [r7, #12]
 80160e0:	e002      	b.n	80160e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d1ea      	bne.n	80160c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80160ee:	bf00      	nop
 80160f0:	bf00      	nop
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	0801fcf8 	.word	0x0801fcf8
 80160fc:	0802042c 	.word	0x0802042c
 8016100:	0801fd3c 	.word	0x0801fd3c

08016104 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b084      	sub	sp, #16
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d02a      	beq.n	801616a <tcp_netif_ip_addr_changed+0x66>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d026      	beq.n	801616a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801611c:	4b15      	ldr	r3, [pc, #84]	@ (8016174 <tcp_netif_ip_addr_changed+0x70>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	4619      	mov	r1, r3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff ffbc 	bl	80160a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016128:	4b13      	ldr	r3, [pc, #76]	@ (8016178 <tcp_netif_ip_addr_changed+0x74>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7ff ffb6 	bl	80160a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d017      	beq.n	801616a <tcp_netif_ip_addr_changed+0x66>
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d013      	beq.n	801616a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016142:	4b0e      	ldr	r3, [pc, #56]	@ (801617c <tcp_netif_ip_addr_changed+0x78>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	60fb      	str	r3, [r7, #12]
 8016148:	e00c      	b.n	8016164 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	681a      	ldr	r2, [r3, #0]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	429a      	cmp	r2, r3
 8016154:	d103      	bne.n	801615e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	60fb      	str	r3, [r7, #12]
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d1ef      	bne.n	801614a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801616a:	bf00      	nop
 801616c:	3710      	adds	r7, #16
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	200277bc 	.word	0x200277bc
 8016178:	200277b4 	.word	0x200277b4
 801617c:	200277b8 	.word	0x200277b8

08016180 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801618c:	2b00      	cmp	r3, #0
 801618e:	d007      	beq.n	80161a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016194:	4618      	mov	r0, r3
 8016196:	f7ff fc3d 	bl	8015a14 <tcp_segs_free>
    pcb->ooseq = NULL;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2200      	movs	r2, #0
 801619e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80161a0:	bf00      	nop
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80161a8:	b590      	push	{r4, r7, lr}
 80161aa:	b08d      	sub	sp, #52	@ 0x34
 80161ac:	af04      	add	r7, sp, #16
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d105      	bne.n	80161c4 <tcp_input+0x1c>
 80161b8:	4b9b      	ldr	r3, [pc, #620]	@ (8016428 <tcp_input+0x280>)
 80161ba:	2283      	movs	r2, #131	@ 0x83
 80161bc:	499b      	ldr	r1, [pc, #620]	@ (801642c <tcp_input+0x284>)
 80161be:	489c      	ldr	r0, [pc, #624]	@ (8016430 <tcp_input+0x288>)
 80161c0:	f007 ff06 	bl	801dfd0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	4a9a      	ldr	r2, [pc, #616]	@ (8016434 <tcp_input+0x28c>)
 80161ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	895b      	ldrh	r3, [r3, #10]
 80161d0:	2b13      	cmp	r3, #19
 80161d2:	f240 83d1 	bls.w	8016978 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80161d6:	4b98      	ldr	r3, [pc, #608]	@ (8016438 <tcp_input+0x290>)
 80161d8:	695b      	ldr	r3, [r3, #20]
 80161da:	4a97      	ldr	r2, [pc, #604]	@ (8016438 <tcp_input+0x290>)
 80161dc:	6812      	ldr	r2, [r2, #0]
 80161de:	4611      	mov	r1, r2
 80161e0:	4618      	mov	r0, r3
 80161e2:	f005 feef 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 80161e6:	4603      	mov	r3, r0
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f040 83c7 	bne.w	801697c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80161ee:	4b92      	ldr	r3, [pc, #584]	@ (8016438 <tcp_input+0x290>)
 80161f0:	695b      	ldr	r3, [r3, #20]
 80161f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80161f6:	2be0      	cmp	r3, #224	@ 0xe0
 80161f8:	f000 83c0 	beq.w	801697c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80161fc:	4b8d      	ldr	r3, [pc, #564]	@ (8016434 <tcp_input+0x28c>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	899b      	ldrh	r3, [r3, #12]
 8016202:	b29b      	uxth	r3, r3
 8016204:	4618      	mov	r0, r3
 8016206:	f7fc fd9b 	bl	8012d40 <lwip_htons>
 801620a:	4603      	mov	r3, r0
 801620c:	0b1b      	lsrs	r3, r3, #12
 801620e:	b29b      	uxth	r3, r3
 8016210:	b2db      	uxtb	r3, r3
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016216:	7cbb      	ldrb	r3, [r7, #18]
 8016218:	2b13      	cmp	r3, #19
 801621a:	f240 83b1 	bls.w	8016980 <tcp_input+0x7d8>
 801621e:	7cbb      	ldrb	r3, [r7, #18]
 8016220:	b29a      	uxth	r2, r3
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	891b      	ldrh	r3, [r3, #8]
 8016226:	429a      	cmp	r2, r3
 8016228:	f200 83aa 	bhi.w	8016980 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801622c:	7cbb      	ldrb	r3, [r7, #18]
 801622e:	b29b      	uxth	r3, r3
 8016230:	3b14      	subs	r3, #20
 8016232:	b29a      	uxth	r2, r3
 8016234:	4b81      	ldr	r3, [pc, #516]	@ (801643c <tcp_input+0x294>)
 8016236:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016238:	4b81      	ldr	r3, [pc, #516]	@ (8016440 <tcp_input+0x298>)
 801623a:	2200      	movs	r2, #0
 801623c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	895a      	ldrh	r2, [r3, #10]
 8016242:	7cbb      	ldrb	r3, [r7, #18]
 8016244:	b29b      	uxth	r3, r3
 8016246:	429a      	cmp	r2, r3
 8016248:	d309      	bcc.n	801625e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801624a:	4b7c      	ldr	r3, [pc, #496]	@ (801643c <tcp_input+0x294>)
 801624c:	881a      	ldrh	r2, [r3, #0]
 801624e:	4b7d      	ldr	r3, [pc, #500]	@ (8016444 <tcp_input+0x29c>)
 8016250:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016252:	7cbb      	ldrb	r3, [r7, #18]
 8016254:	4619      	mov	r1, r3
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f7fe f8da 	bl	8014410 <pbuf_remove_header>
 801625c:	e04e      	b.n	80162fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d105      	bne.n	8016272 <tcp_input+0xca>
 8016266:	4b70      	ldr	r3, [pc, #448]	@ (8016428 <tcp_input+0x280>)
 8016268:	22c2      	movs	r2, #194	@ 0xc2
 801626a:	4977      	ldr	r1, [pc, #476]	@ (8016448 <tcp_input+0x2a0>)
 801626c:	4870      	ldr	r0, [pc, #448]	@ (8016430 <tcp_input+0x288>)
 801626e:	f007 feaf 	bl	801dfd0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016272:	2114      	movs	r1, #20
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f7fe f8cb 	bl	8014410 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	895a      	ldrh	r2, [r3, #10]
 801627e:	4b71      	ldr	r3, [pc, #452]	@ (8016444 <tcp_input+0x29c>)
 8016280:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016282:	4b6e      	ldr	r3, [pc, #440]	@ (801643c <tcp_input+0x294>)
 8016284:	881a      	ldrh	r2, [r3, #0]
 8016286:	4b6f      	ldr	r3, [pc, #444]	@ (8016444 <tcp_input+0x29c>)
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801628e:	4b6d      	ldr	r3, [pc, #436]	@ (8016444 <tcp_input+0x29c>)
 8016290:	881b      	ldrh	r3, [r3, #0]
 8016292:	4619      	mov	r1, r3
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f7fe f8bb 	bl	8014410 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	895b      	ldrh	r3, [r3, #10]
 80162a0:	8a3a      	ldrh	r2, [r7, #16]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	f200 836e 	bhi.w	8016984 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	4a64      	ldr	r2, [pc, #400]	@ (8016440 <tcp_input+0x298>)
 80162b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	8a3a      	ldrh	r2, [r7, #16]
 80162b8:	4611      	mov	r1, r2
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe f8a8 	bl	8014410 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	891a      	ldrh	r2, [r3, #8]
 80162c4:	8a3b      	ldrh	r3, [r7, #16]
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	895b      	ldrh	r3, [r3, #10]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d005      	beq.n	80162e2 <tcp_input+0x13a>
 80162d6:	4b54      	ldr	r3, [pc, #336]	@ (8016428 <tcp_input+0x280>)
 80162d8:	22df      	movs	r2, #223	@ 0xdf
 80162da:	495c      	ldr	r1, [pc, #368]	@ (801644c <tcp_input+0x2a4>)
 80162dc:	4854      	ldr	r0, [pc, #336]	@ (8016430 <tcp_input+0x288>)
 80162de:	f007 fe77 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	891a      	ldrh	r2, [r3, #8]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	891b      	ldrh	r3, [r3, #8]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d005      	beq.n	80162fc <tcp_input+0x154>
 80162f0:	4b4d      	ldr	r3, [pc, #308]	@ (8016428 <tcp_input+0x280>)
 80162f2:	22e0      	movs	r2, #224	@ 0xe0
 80162f4:	4956      	ldr	r1, [pc, #344]	@ (8016450 <tcp_input+0x2a8>)
 80162f6:	484e      	ldr	r0, [pc, #312]	@ (8016430 <tcp_input+0x288>)
 80162f8:	f007 fe6a 	bl	801dfd0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80162fc:	4b4d      	ldr	r3, [pc, #308]	@ (8016434 <tcp_input+0x28c>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	881b      	ldrh	r3, [r3, #0]
 8016302:	b29b      	uxth	r3, r3
 8016304:	4a4b      	ldr	r2, [pc, #300]	@ (8016434 <tcp_input+0x28c>)
 8016306:	6814      	ldr	r4, [r2, #0]
 8016308:	4618      	mov	r0, r3
 801630a:	f7fc fd19 	bl	8012d40 <lwip_htons>
 801630e:	4603      	mov	r3, r0
 8016310:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016312:	4b48      	ldr	r3, [pc, #288]	@ (8016434 <tcp_input+0x28c>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	885b      	ldrh	r3, [r3, #2]
 8016318:	b29b      	uxth	r3, r3
 801631a:	4a46      	ldr	r2, [pc, #280]	@ (8016434 <tcp_input+0x28c>)
 801631c:	6814      	ldr	r4, [r2, #0]
 801631e:	4618      	mov	r0, r3
 8016320:	f7fc fd0e 	bl	8012d40 <lwip_htons>
 8016324:	4603      	mov	r3, r0
 8016326:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016328:	4b42      	ldr	r3, [pc, #264]	@ (8016434 <tcp_input+0x28c>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	4a41      	ldr	r2, [pc, #260]	@ (8016434 <tcp_input+0x28c>)
 8016330:	6814      	ldr	r4, [r2, #0]
 8016332:	4618      	mov	r0, r3
 8016334:	f7fc fd1a 	bl	8012d6c <lwip_htonl>
 8016338:	4603      	mov	r3, r0
 801633a:	6063      	str	r3, [r4, #4]
 801633c:	6863      	ldr	r3, [r4, #4]
 801633e:	4a45      	ldr	r2, [pc, #276]	@ (8016454 <tcp_input+0x2ac>)
 8016340:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016342:	4b3c      	ldr	r3, [pc, #240]	@ (8016434 <tcp_input+0x28c>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	689b      	ldr	r3, [r3, #8]
 8016348:	4a3a      	ldr	r2, [pc, #232]	@ (8016434 <tcp_input+0x28c>)
 801634a:	6814      	ldr	r4, [r2, #0]
 801634c:	4618      	mov	r0, r3
 801634e:	f7fc fd0d 	bl	8012d6c <lwip_htonl>
 8016352:	4603      	mov	r3, r0
 8016354:	60a3      	str	r3, [r4, #8]
 8016356:	68a3      	ldr	r3, [r4, #8]
 8016358:	4a3f      	ldr	r2, [pc, #252]	@ (8016458 <tcp_input+0x2b0>)
 801635a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801635c:	4b35      	ldr	r3, [pc, #212]	@ (8016434 <tcp_input+0x28c>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	89db      	ldrh	r3, [r3, #14]
 8016362:	b29b      	uxth	r3, r3
 8016364:	4a33      	ldr	r2, [pc, #204]	@ (8016434 <tcp_input+0x28c>)
 8016366:	6814      	ldr	r4, [r2, #0]
 8016368:	4618      	mov	r0, r3
 801636a:	f7fc fce9 	bl	8012d40 <lwip_htons>
 801636e:	4603      	mov	r3, r0
 8016370:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016372:	4b30      	ldr	r3, [pc, #192]	@ (8016434 <tcp_input+0x28c>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	899b      	ldrh	r3, [r3, #12]
 8016378:	b29b      	uxth	r3, r3
 801637a:	4618      	mov	r0, r3
 801637c:	f7fc fce0 	bl	8012d40 <lwip_htons>
 8016380:	4603      	mov	r3, r0
 8016382:	b2db      	uxtb	r3, r3
 8016384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016388:	b2da      	uxtb	r2, r3
 801638a:	4b34      	ldr	r3, [pc, #208]	@ (801645c <tcp_input+0x2b4>)
 801638c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	891a      	ldrh	r2, [r3, #8]
 8016392:	4b33      	ldr	r3, [pc, #204]	@ (8016460 <tcp_input+0x2b8>)
 8016394:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016396:	4b31      	ldr	r3, [pc, #196]	@ (801645c <tcp_input+0x2b4>)
 8016398:	781b      	ldrb	r3, [r3, #0]
 801639a:	f003 0303 	and.w	r3, r3, #3
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00c      	beq.n	80163bc <tcp_input+0x214>
    tcplen++;
 80163a2:	4b2f      	ldr	r3, [pc, #188]	@ (8016460 <tcp_input+0x2b8>)
 80163a4:	881b      	ldrh	r3, [r3, #0]
 80163a6:	3301      	adds	r3, #1
 80163a8:	b29a      	uxth	r2, r3
 80163aa:	4b2d      	ldr	r3, [pc, #180]	@ (8016460 <tcp_input+0x2b8>)
 80163ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	891a      	ldrh	r2, [r3, #8]
 80163b2:	4b2b      	ldr	r3, [pc, #172]	@ (8016460 <tcp_input+0x2b8>)
 80163b4:	881b      	ldrh	r3, [r3, #0]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	f200 82e6 	bhi.w	8016988 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80163bc:	2300      	movs	r3, #0
 80163be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163c0:	4b28      	ldr	r3, [pc, #160]	@ (8016464 <tcp_input+0x2bc>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	e09d      	b.n	8016504 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	7d1b      	ldrb	r3, [r3, #20]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d105      	bne.n	80163dc <tcp_input+0x234>
 80163d0:	4b15      	ldr	r3, [pc, #84]	@ (8016428 <tcp_input+0x280>)
 80163d2:	22fb      	movs	r2, #251	@ 0xfb
 80163d4:	4924      	ldr	r1, [pc, #144]	@ (8016468 <tcp_input+0x2c0>)
 80163d6:	4816      	ldr	r0, [pc, #88]	@ (8016430 <tcp_input+0x288>)
 80163d8:	f007 fdfa 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80163dc:	69fb      	ldr	r3, [r7, #28]
 80163de:	7d1b      	ldrb	r3, [r3, #20]
 80163e0:	2b0a      	cmp	r3, #10
 80163e2:	d105      	bne.n	80163f0 <tcp_input+0x248>
 80163e4:	4b10      	ldr	r3, [pc, #64]	@ (8016428 <tcp_input+0x280>)
 80163e6:	22fc      	movs	r2, #252	@ 0xfc
 80163e8:	4920      	ldr	r1, [pc, #128]	@ (801646c <tcp_input+0x2c4>)
 80163ea:	4811      	ldr	r0, [pc, #68]	@ (8016430 <tcp_input+0x288>)
 80163ec:	f007 fdf0 	bl	801dfd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	7d1b      	ldrb	r3, [r3, #20]
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d105      	bne.n	8016404 <tcp_input+0x25c>
 80163f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016428 <tcp_input+0x280>)
 80163fa:	22fd      	movs	r2, #253	@ 0xfd
 80163fc:	491c      	ldr	r1, [pc, #112]	@ (8016470 <tcp_input+0x2c8>)
 80163fe:	480c      	ldr	r0, [pc, #48]	@ (8016430 <tcp_input+0x288>)
 8016400:	f007 fde6 	bl	801dfd0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016404:	69fb      	ldr	r3, [r7, #28]
 8016406:	7a1b      	ldrb	r3, [r3, #8]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d033      	beq.n	8016474 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801640c:	69fb      	ldr	r3, [r7, #28]
 801640e:	7a1a      	ldrb	r2, [r3, #8]
 8016410:	4b09      	ldr	r3, [pc, #36]	@ (8016438 <tcp_input+0x290>)
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016418:	3301      	adds	r3, #1
 801641a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801641c:	429a      	cmp	r2, r3
 801641e:	d029      	beq.n	8016474 <tcp_input+0x2cc>
      prev = pcb;
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	61bb      	str	r3, [r7, #24]
      continue;
 8016424:	e06b      	b.n	80164fe <tcp_input+0x356>
 8016426:	bf00      	nop
 8016428:	08020460 	.word	0x08020460
 801642c:	08020494 	.word	0x08020494
 8016430:	080204ac 	.word	0x080204ac
 8016434:	200277d8 	.word	0x200277d8
 8016438:	200246b0 	.word	0x200246b0
 801643c:	200277dc 	.word	0x200277dc
 8016440:	200277e0 	.word	0x200277e0
 8016444:	200277de 	.word	0x200277de
 8016448:	080204d4 	.word	0x080204d4
 801644c:	080204e4 	.word	0x080204e4
 8016450:	080204f0 	.word	0x080204f0
 8016454:	200277e8 	.word	0x200277e8
 8016458:	200277ec 	.word	0x200277ec
 801645c:	200277f4 	.word	0x200277f4
 8016460:	200277f2 	.word	0x200277f2
 8016464:	200277bc 	.word	0x200277bc
 8016468:	08020510 	.word	0x08020510
 801646c:	08020538 	.word	0x08020538
 8016470:	08020564 	.word	0x08020564
    }

    if (pcb->remote_port == tcphdr->src &&
 8016474:	69fb      	ldr	r3, [r7, #28]
 8016476:	8b1a      	ldrh	r2, [r3, #24]
 8016478:	4b72      	ldr	r3, [pc, #456]	@ (8016644 <tcp_input+0x49c>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	881b      	ldrh	r3, [r3, #0]
 801647e:	b29b      	uxth	r3, r3
 8016480:	429a      	cmp	r2, r3
 8016482:	d13a      	bne.n	80164fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	8ada      	ldrh	r2, [r3, #22]
 8016488:	4b6e      	ldr	r3, [pc, #440]	@ (8016644 <tcp_input+0x49c>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	885b      	ldrh	r3, [r3, #2]
 801648e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016490:	429a      	cmp	r2, r3
 8016492:	d132      	bne.n	80164fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	685a      	ldr	r2, [r3, #4]
 8016498:	4b6b      	ldr	r3, [pc, #428]	@ (8016648 <tcp_input+0x4a0>)
 801649a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801649c:	429a      	cmp	r2, r3
 801649e:	d12c      	bne.n	80164fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	4b68      	ldr	r3, [pc, #416]	@ (8016648 <tcp_input+0x4a0>)
 80164a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d126      	bne.n	80164fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	69fa      	ldr	r2, [r7, #28]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d106      	bne.n	80164c4 <tcp_input+0x31c>
 80164b6:	4b65      	ldr	r3, [pc, #404]	@ (801664c <tcp_input+0x4a4>)
 80164b8:	f240 120d 	movw	r2, #269	@ 0x10d
 80164bc:	4964      	ldr	r1, [pc, #400]	@ (8016650 <tcp_input+0x4a8>)
 80164be:	4865      	ldr	r0, [pc, #404]	@ (8016654 <tcp_input+0x4ac>)
 80164c0:	f007 fd86 	bl	801dfd0 <iprintf>
      if (prev != NULL) {
 80164c4:	69bb      	ldr	r3, [r7, #24]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d00a      	beq.n	80164e0 <tcp_input+0x338>
        prev->next = pcb->next;
 80164ca:	69fb      	ldr	r3, [r7, #28]
 80164cc:	68da      	ldr	r2, [r3, #12]
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80164d2:	4b61      	ldr	r3, [pc, #388]	@ (8016658 <tcp_input+0x4b0>)
 80164d4:	681a      	ldr	r2, [r3, #0]
 80164d6:	69fb      	ldr	r3, [r7, #28]
 80164d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80164da:	4a5f      	ldr	r2, [pc, #380]	@ (8016658 <tcp_input+0x4b0>)
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	69fa      	ldr	r2, [r7, #28]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d111      	bne.n	801650e <tcp_input+0x366>
 80164ea:	4b58      	ldr	r3, [pc, #352]	@ (801664c <tcp_input+0x4a4>)
 80164ec:	f240 1215 	movw	r2, #277	@ 0x115
 80164f0:	495a      	ldr	r1, [pc, #360]	@ (801665c <tcp_input+0x4b4>)
 80164f2:	4858      	ldr	r0, [pc, #352]	@ (8016654 <tcp_input+0x4ac>)
 80164f4:	f007 fd6c 	bl	801dfd0 <iprintf>
      break;
 80164f8:	e009      	b.n	801650e <tcp_input+0x366>
    }
    prev = pcb;
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	61fb      	str	r3, [r7, #28]
 8016504:	69fb      	ldr	r3, [r7, #28]
 8016506:	2b00      	cmp	r3, #0
 8016508:	f47f af5e 	bne.w	80163c8 <tcp_input+0x220>
 801650c:	e000      	b.n	8016510 <tcp_input+0x368>
      break;
 801650e:	bf00      	nop
  }

  if (pcb == NULL) {
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	2b00      	cmp	r3, #0
 8016514:	f040 80aa 	bne.w	801666c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016518:	4b51      	ldr	r3, [pc, #324]	@ (8016660 <tcp_input+0x4b8>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	61fb      	str	r3, [r7, #28]
 801651e:	e03f      	b.n	80165a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	7d1b      	ldrb	r3, [r3, #20]
 8016524:	2b0a      	cmp	r3, #10
 8016526:	d006      	beq.n	8016536 <tcp_input+0x38e>
 8016528:	4b48      	ldr	r3, [pc, #288]	@ (801664c <tcp_input+0x4a4>)
 801652a:	f240 121f 	movw	r2, #287	@ 0x11f
 801652e:	494d      	ldr	r1, [pc, #308]	@ (8016664 <tcp_input+0x4bc>)
 8016530:	4848      	ldr	r0, [pc, #288]	@ (8016654 <tcp_input+0x4ac>)
 8016532:	f007 fd4d 	bl	801dfd0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016536:	69fb      	ldr	r3, [r7, #28]
 8016538:	7a1b      	ldrb	r3, [r3, #8]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d009      	beq.n	8016552 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	7a1a      	ldrb	r2, [r3, #8]
 8016542:	4b41      	ldr	r3, [pc, #260]	@ (8016648 <tcp_input+0x4a0>)
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801654a:	3301      	adds	r3, #1
 801654c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801654e:	429a      	cmp	r2, r3
 8016550:	d122      	bne.n	8016598 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016552:	69fb      	ldr	r3, [r7, #28]
 8016554:	8b1a      	ldrh	r2, [r3, #24]
 8016556:	4b3b      	ldr	r3, [pc, #236]	@ (8016644 <tcp_input+0x49c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	881b      	ldrh	r3, [r3, #0]
 801655c:	b29b      	uxth	r3, r3
 801655e:	429a      	cmp	r2, r3
 8016560:	d11b      	bne.n	801659a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016562:	69fb      	ldr	r3, [r7, #28]
 8016564:	8ada      	ldrh	r2, [r3, #22]
 8016566:	4b37      	ldr	r3, [pc, #220]	@ (8016644 <tcp_input+0x49c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	885b      	ldrh	r3, [r3, #2]
 801656c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801656e:	429a      	cmp	r2, r3
 8016570:	d113      	bne.n	801659a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	685a      	ldr	r2, [r3, #4]
 8016576:	4b34      	ldr	r3, [pc, #208]	@ (8016648 <tcp_input+0x4a0>)
 8016578:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801657a:	429a      	cmp	r2, r3
 801657c:	d10d      	bne.n	801659a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801657e:	69fb      	ldr	r3, [r7, #28]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	4b31      	ldr	r3, [pc, #196]	@ (8016648 <tcp_input+0x4a0>)
 8016584:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016586:	429a      	cmp	r2, r3
 8016588:	d107      	bne.n	801659a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801658a:	69f8      	ldr	r0, [r7, #28]
 801658c:	f000 fb56 	bl	8016c3c <tcp_timewait_input>
        }
        pbuf_free(p);
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7fd ffc3 	bl	801451c <pbuf_free>
        return;
 8016596:	e1fd      	b.n	8016994 <tcp_input+0x7ec>
        continue;
 8016598:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	61fb      	str	r3, [r7, #28]
 80165a0:	69fb      	ldr	r3, [r7, #28]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d1bc      	bne.n	8016520 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80165a6:	2300      	movs	r3, #0
 80165a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80165aa:	4b2f      	ldr	r3, [pc, #188]	@ (8016668 <tcp_input+0x4c0>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	617b      	str	r3, [r7, #20]
 80165b0:	e02a      	b.n	8016608 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	7a1b      	ldrb	r3, [r3, #8]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00c      	beq.n	80165d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	7a1a      	ldrb	r2, [r3, #8]
 80165be:	4b22      	ldr	r3, [pc, #136]	@ (8016648 <tcp_input+0x4a0>)
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80165c6:	3301      	adds	r3, #1
 80165c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d002      	beq.n	80165d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	61bb      	str	r3, [r7, #24]
        continue;
 80165d2:	e016      	b.n	8016602 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	8ada      	ldrh	r2, [r3, #22]
 80165d8:	4b1a      	ldr	r3, [pc, #104]	@ (8016644 <tcp_input+0x49c>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	885b      	ldrh	r3, [r3, #2]
 80165de:	b29b      	uxth	r3, r3
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d10c      	bne.n	80165fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	4b17      	ldr	r3, [pc, #92]	@ (8016648 <tcp_input+0x4a0>)
 80165ea:	695b      	ldr	r3, [r3, #20]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d00f      	beq.n	8016610 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d00d      	beq.n	8016612 <tcp_input+0x46a>
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d009      	beq.n	8016612 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	68db      	ldr	r3, [r3, #12]
 8016606:	617b      	str	r3, [r7, #20]
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d1d1      	bne.n	80165b2 <tcp_input+0x40a>
 801660e:	e000      	b.n	8016612 <tcp_input+0x46a>
            break;
 8016610:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d029      	beq.n	801666c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d00a      	beq.n	8016634 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	68da      	ldr	r2, [r3, #12]
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016626:	4b10      	ldr	r3, [pc, #64]	@ (8016668 <tcp_input+0x4c0>)
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801662e:	4a0e      	ldr	r2, [pc, #56]	@ (8016668 <tcp_input+0x4c0>)
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016634:	6978      	ldr	r0, [r7, #20]
 8016636:	f000 fa03 	bl	8016a40 <tcp_listen_input>
      }
      pbuf_free(p);
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7fd ff6e 	bl	801451c <pbuf_free>
      return;
 8016640:	e1a8      	b.n	8016994 <tcp_input+0x7ec>
 8016642:	bf00      	nop
 8016644:	200277d8 	.word	0x200277d8
 8016648:	200246b0 	.word	0x200246b0
 801664c:	08020460 	.word	0x08020460
 8016650:	0802058c 	.word	0x0802058c
 8016654:	080204ac 	.word	0x080204ac
 8016658:	200277bc 	.word	0x200277bc
 801665c:	080205b8 	.word	0x080205b8
 8016660:	200277c0 	.word	0x200277c0
 8016664:	080205e4 	.word	0x080205e4
 8016668:	200277b8 	.word	0x200277b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	2b00      	cmp	r3, #0
 8016670:	f000 8158 	beq.w	8016924 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016674:	4b95      	ldr	r3, [pc, #596]	@ (80168cc <tcp_input+0x724>)
 8016676:	2200      	movs	r2, #0
 8016678:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	891a      	ldrh	r2, [r3, #8]
 801667e:	4b93      	ldr	r3, [pc, #588]	@ (80168cc <tcp_input+0x724>)
 8016680:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016682:	4a92      	ldr	r2, [pc, #584]	@ (80168cc <tcp_input+0x724>)
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016688:	4b91      	ldr	r3, [pc, #580]	@ (80168d0 <tcp_input+0x728>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4a8f      	ldr	r2, [pc, #572]	@ (80168cc <tcp_input+0x724>)
 801668e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016690:	4b90      	ldr	r3, [pc, #576]	@ (80168d4 <tcp_input+0x72c>)
 8016692:	2200      	movs	r2, #0
 8016694:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016696:	4b90      	ldr	r3, [pc, #576]	@ (80168d8 <tcp_input+0x730>)
 8016698:	2200      	movs	r2, #0
 801669a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801669c:	4b8f      	ldr	r3, [pc, #572]	@ (80168dc <tcp_input+0x734>)
 801669e:	2200      	movs	r2, #0
 80166a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80166a2:	4b8f      	ldr	r3, [pc, #572]	@ (80168e0 <tcp_input+0x738>)
 80166a4:	781b      	ldrb	r3, [r3, #0]
 80166a6:	f003 0308 	and.w	r3, r3, #8
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d006      	beq.n	80166bc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	7b5b      	ldrb	r3, [r3, #13]
 80166b2:	f043 0301 	orr.w	r3, r3, #1
 80166b6:	b2da      	uxtb	r2, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80166bc:	69fb      	ldr	r3, [r7, #28]
 80166be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d017      	beq.n	80166f4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80166c4:	69f8      	ldr	r0, [r7, #28]
 80166c6:	f7ff f929 	bl	801591c <tcp_process_refused_data>
 80166ca:	4603      	mov	r3, r0
 80166cc:	f113 0f0d 	cmn.w	r3, #13
 80166d0:	d007      	beq.n	80166e2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80166d2:	69fb      	ldr	r3, [r7, #28]
 80166d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00c      	beq.n	80166f4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80166da:	4b82      	ldr	r3, [pc, #520]	@ (80168e4 <tcp_input+0x73c>)
 80166dc:	881b      	ldrh	r3, [r3, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d008      	beq.n	80166f4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	f040 80e3 	bne.w	80168b2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80166ec:	69f8      	ldr	r0, [r7, #28]
 80166ee:	f003 f9a7 	bl	8019a40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80166f2:	e0de      	b.n	80168b2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80166f4:	4a7c      	ldr	r2, [pc, #496]	@ (80168e8 <tcp_input+0x740>)
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80166fa:	69f8      	ldr	r0, [r7, #28]
 80166fc:	f000 fb18 	bl	8016d30 <tcp_process>
 8016700:	4603      	mov	r3, r0
 8016702:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016704:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016708:	f113 0f0d 	cmn.w	r3, #13
 801670c:	f000 80d3 	beq.w	80168b6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8016710:	4b71      	ldr	r3, [pc, #452]	@ (80168d8 <tcp_input+0x730>)
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	f003 0308 	and.w	r3, r3, #8
 8016718:	2b00      	cmp	r3, #0
 801671a:	d015      	beq.n	8016748 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016722:	2b00      	cmp	r3, #0
 8016724:	d008      	beq.n	8016738 <tcp_input+0x590>
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801672c:	69fa      	ldr	r2, [r7, #28]
 801672e:	6912      	ldr	r2, [r2, #16]
 8016730:	f06f 010d 	mvn.w	r1, #13
 8016734:	4610      	mov	r0, r2
 8016736:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016738:	69f9      	ldr	r1, [r7, #28]
 801673a:	486c      	ldr	r0, [pc, #432]	@ (80168ec <tcp_input+0x744>)
 801673c:	f7ff fbbc 	bl	8015eb8 <tcp_pcb_remove>
        tcp_free(pcb);
 8016740:	69f8      	ldr	r0, [r7, #28]
 8016742:	f7fe f9a7 	bl	8014a94 <tcp_free>
 8016746:	e0da      	b.n	80168fe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016748:	2300      	movs	r3, #0
 801674a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801674c:	4b63      	ldr	r3, [pc, #396]	@ (80168dc <tcp_input+0x734>)
 801674e:	881b      	ldrh	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d01d      	beq.n	8016790 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016754:	4b61      	ldr	r3, [pc, #388]	@ (80168dc <tcp_input+0x734>)
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016760:	2b00      	cmp	r3, #0
 8016762:	d00a      	beq.n	801677a <tcp_input+0x5d2>
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801676a:	69fa      	ldr	r2, [r7, #28]
 801676c:	6910      	ldr	r0, [r2, #16]
 801676e:	89fa      	ldrh	r2, [r7, #14]
 8016770:	69f9      	ldr	r1, [r7, #28]
 8016772:	4798      	blx	r3
 8016774:	4603      	mov	r3, r0
 8016776:	74fb      	strb	r3, [r7, #19]
 8016778:	e001      	b.n	801677e <tcp_input+0x5d6>
 801677a:	2300      	movs	r3, #0
 801677c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801677e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016782:	f113 0f0d 	cmn.w	r3, #13
 8016786:	f000 8098 	beq.w	80168ba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801678a:	4b54      	ldr	r3, [pc, #336]	@ (80168dc <tcp_input+0x734>)
 801678c:	2200      	movs	r2, #0
 801678e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016790:	69f8      	ldr	r0, [r7, #28]
 8016792:	f000 f915 	bl	80169c0 <tcp_input_delayed_close>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	f040 8090 	bne.w	80168be <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801679e:	4b4d      	ldr	r3, [pc, #308]	@ (80168d4 <tcp_input+0x72c>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d041      	beq.n	801682a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80167a6:	69fb      	ldr	r3, [r7, #28]
 80167a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d006      	beq.n	80167bc <tcp_input+0x614>
 80167ae:	4b50      	ldr	r3, [pc, #320]	@ (80168f0 <tcp_input+0x748>)
 80167b0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80167b4:	494f      	ldr	r1, [pc, #316]	@ (80168f4 <tcp_input+0x74c>)
 80167b6:	4850      	ldr	r0, [pc, #320]	@ (80168f8 <tcp_input+0x750>)
 80167b8:	f007 fc0a 	bl	801dfd0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	8b5b      	ldrh	r3, [r3, #26]
 80167c0:	f003 0310 	and.w	r3, r3, #16
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d008      	beq.n	80167da <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80167c8:	4b42      	ldr	r3, [pc, #264]	@ (80168d4 <tcp_input+0x72c>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7fd fea5 	bl	801451c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80167d2:	69f8      	ldr	r0, [r7, #28]
 80167d4:	f7fe fc46 	bl	8015064 <tcp_abort>
            goto aborted;
 80167d8:	e091      	b.n	80168fe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00c      	beq.n	80167fe <tcp_input+0x656>
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	6918      	ldr	r0, [r3, #16]
 80167ee:	4b39      	ldr	r3, [pc, #228]	@ (80168d4 <tcp_input+0x72c>)
 80167f0:	681a      	ldr	r2, [r3, #0]
 80167f2:	2300      	movs	r3, #0
 80167f4:	69f9      	ldr	r1, [r7, #28]
 80167f6:	47a0      	blx	r4
 80167f8:	4603      	mov	r3, r0
 80167fa:	74fb      	strb	r3, [r7, #19]
 80167fc:	e008      	b.n	8016810 <tcp_input+0x668>
 80167fe:	4b35      	ldr	r3, [pc, #212]	@ (80168d4 <tcp_input+0x72c>)
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	2300      	movs	r3, #0
 8016804:	69f9      	ldr	r1, [r7, #28]
 8016806:	2000      	movs	r0, #0
 8016808:	f7ff f95e 	bl	8015ac8 <tcp_recv_null>
 801680c:	4603      	mov	r3, r0
 801680e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016810:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016814:	f113 0f0d 	cmn.w	r3, #13
 8016818:	d053      	beq.n	80168c2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801681a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d003      	beq.n	801682a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016822:	4b2c      	ldr	r3, [pc, #176]	@ (80168d4 <tcp_input+0x72c>)
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	69fb      	ldr	r3, [r7, #28]
 8016828:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801682a:	4b2b      	ldr	r3, [pc, #172]	@ (80168d8 <tcp_input+0x730>)
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	f003 0320 	and.w	r3, r3, #32
 8016832:	2b00      	cmp	r3, #0
 8016834:	d030      	beq.n	8016898 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801683a:	2b00      	cmp	r3, #0
 801683c:	d009      	beq.n	8016852 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801683e:	69fb      	ldr	r3, [r7, #28]
 8016840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016842:	7b5a      	ldrb	r2, [r3, #13]
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016848:	f042 0220 	orr.w	r2, r2, #32
 801684c:	b2d2      	uxtb	r2, r2
 801684e:	735a      	strb	r2, [r3, #13]
 8016850:	e022      	b.n	8016898 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016852:	69fb      	ldr	r3, [r7, #28]
 8016854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016856:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801685a:	d005      	beq.n	8016868 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016860:	3301      	adds	r3, #1
 8016862:	b29a      	uxth	r2, r3
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801686e:	2b00      	cmp	r3, #0
 8016870:	d00b      	beq.n	801688a <tcp_input+0x6e2>
 8016872:	69fb      	ldr	r3, [r7, #28]
 8016874:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	6918      	ldr	r0, [r3, #16]
 801687c:	2300      	movs	r3, #0
 801687e:	2200      	movs	r2, #0
 8016880:	69f9      	ldr	r1, [r7, #28]
 8016882:	47a0      	blx	r4
 8016884:	4603      	mov	r3, r0
 8016886:	74fb      	strb	r3, [r7, #19]
 8016888:	e001      	b.n	801688e <tcp_input+0x6e6>
 801688a:	2300      	movs	r3, #0
 801688c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801688e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016892:	f113 0f0d 	cmn.w	r3, #13
 8016896:	d016      	beq.n	80168c6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016898:	4b13      	ldr	r3, [pc, #76]	@ (80168e8 <tcp_input+0x740>)
 801689a:	2200      	movs	r2, #0
 801689c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801689e:	69f8      	ldr	r0, [r7, #28]
 80168a0:	f000 f88e 	bl	80169c0 <tcp_input_delayed_close>
 80168a4:	4603      	mov	r3, r0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d128      	bne.n	80168fc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80168aa:	69f8      	ldr	r0, [r7, #28]
 80168ac:	f002 fac2 	bl	8018e34 <tcp_output>
 80168b0:	e025      	b.n	80168fe <tcp_input+0x756>
        goto aborted;
 80168b2:	bf00      	nop
 80168b4:	e023      	b.n	80168fe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80168b6:	bf00      	nop
 80168b8:	e021      	b.n	80168fe <tcp_input+0x756>
              goto aborted;
 80168ba:	bf00      	nop
 80168bc:	e01f      	b.n	80168fe <tcp_input+0x756>
          goto aborted;
 80168be:	bf00      	nop
 80168c0:	e01d      	b.n	80168fe <tcp_input+0x756>
            goto aborted;
 80168c2:	bf00      	nop
 80168c4:	e01b      	b.n	80168fe <tcp_input+0x756>
              goto aborted;
 80168c6:	bf00      	nop
 80168c8:	e019      	b.n	80168fe <tcp_input+0x756>
 80168ca:	bf00      	nop
 80168cc:	200277c8 	.word	0x200277c8
 80168d0:	200277d8 	.word	0x200277d8
 80168d4:	200277f8 	.word	0x200277f8
 80168d8:	200277f5 	.word	0x200277f5
 80168dc:	200277f0 	.word	0x200277f0
 80168e0:	200277f4 	.word	0x200277f4
 80168e4:	200277f2 	.word	0x200277f2
 80168e8:	200277fc 	.word	0x200277fc
 80168ec:	200277bc 	.word	0x200277bc
 80168f0:	08020460 	.word	0x08020460
 80168f4:	08020614 	.word	0x08020614
 80168f8:	080204ac 	.word	0x080204ac
          goto aborted;
 80168fc:	bf00      	nop
    tcp_input_pcb = NULL;
 80168fe:	4b27      	ldr	r3, [pc, #156]	@ (801699c <tcp_input+0x7f4>)
 8016900:	2200      	movs	r2, #0
 8016902:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016904:	4b26      	ldr	r3, [pc, #152]	@ (80169a0 <tcp_input+0x7f8>)
 8016906:	2200      	movs	r2, #0
 8016908:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801690a:	4b26      	ldr	r3, [pc, #152]	@ (80169a4 <tcp_input+0x7fc>)
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d03f      	beq.n	8016992 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016912:	4b24      	ldr	r3, [pc, #144]	@ (80169a4 <tcp_input+0x7fc>)
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	4618      	mov	r0, r3
 8016918:	f7fd fe00 	bl	801451c <pbuf_free>
      inseg.p = NULL;
 801691c:	4b21      	ldr	r3, [pc, #132]	@ (80169a4 <tcp_input+0x7fc>)
 801691e:	2200      	movs	r2, #0
 8016920:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016922:	e036      	b.n	8016992 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016924:	4b20      	ldr	r3, [pc, #128]	@ (80169a8 <tcp_input+0x800>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	899b      	ldrh	r3, [r3, #12]
 801692a:	b29b      	uxth	r3, r3
 801692c:	4618      	mov	r0, r3
 801692e:	f7fc fa07 	bl	8012d40 <lwip_htons>
 8016932:	4603      	mov	r3, r0
 8016934:	b2db      	uxtb	r3, r3
 8016936:	f003 0304 	and.w	r3, r3, #4
 801693a:	2b00      	cmp	r3, #0
 801693c:	d118      	bne.n	8016970 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801693e:	4b1b      	ldr	r3, [pc, #108]	@ (80169ac <tcp_input+0x804>)
 8016940:	6819      	ldr	r1, [r3, #0]
 8016942:	4b1b      	ldr	r3, [pc, #108]	@ (80169b0 <tcp_input+0x808>)
 8016944:	881b      	ldrh	r3, [r3, #0]
 8016946:	461a      	mov	r2, r3
 8016948:	4b1a      	ldr	r3, [pc, #104]	@ (80169b4 <tcp_input+0x80c>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801694e:	4b16      	ldr	r3, [pc, #88]	@ (80169a8 <tcp_input+0x800>)
 8016950:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016952:	885b      	ldrh	r3, [r3, #2]
 8016954:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016956:	4a14      	ldr	r2, [pc, #80]	@ (80169a8 <tcp_input+0x800>)
 8016958:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801695a:	8812      	ldrh	r2, [r2, #0]
 801695c:	b292      	uxth	r2, r2
 801695e:	9202      	str	r2, [sp, #8]
 8016960:	9301      	str	r3, [sp, #4]
 8016962:	4b15      	ldr	r3, [pc, #84]	@ (80169b8 <tcp_input+0x810>)
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	4b15      	ldr	r3, [pc, #84]	@ (80169bc <tcp_input+0x814>)
 8016968:	4602      	mov	r2, r0
 801696a:	2000      	movs	r0, #0
 801696c:	f003 f816 	bl	801999c <tcp_rst>
    pbuf_free(p);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f7fd fdd3 	bl	801451c <pbuf_free>
  return;
 8016976:	e00c      	b.n	8016992 <tcp_input+0x7ea>
    goto dropped;
 8016978:	bf00      	nop
 801697a:	e006      	b.n	801698a <tcp_input+0x7e2>
    goto dropped;
 801697c:	bf00      	nop
 801697e:	e004      	b.n	801698a <tcp_input+0x7e2>
    goto dropped;
 8016980:	bf00      	nop
 8016982:	e002      	b.n	801698a <tcp_input+0x7e2>
      goto dropped;
 8016984:	bf00      	nop
 8016986:	e000      	b.n	801698a <tcp_input+0x7e2>
      goto dropped;
 8016988:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7fd fdc6 	bl	801451c <pbuf_free>
 8016990:	e000      	b.n	8016994 <tcp_input+0x7ec>
  return;
 8016992:	bf00      	nop
}
 8016994:	3724      	adds	r7, #36	@ 0x24
 8016996:	46bd      	mov	sp, r7
 8016998:	bd90      	pop	{r4, r7, pc}
 801699a:	bf00      	nop
 801699c:	200277fc 	.word	0x200277fc
 80169a0:	200277f8 	.word	0x200277f8
 80169a4:	200277c8 	.word	0x200277c8
 80169a8:	200277d8 	.word	0x200277d8
 80169ac:	200277ec 	.word	0x200277ec
 80169b0:	200277f2 	.word	0x200277f2
 80169b4:	200277e8 	.word	0x200277e8
 80169b8:	200246c0 	.word	0x200246c0
 80169bc:	200246c4 	.word	0x200246c4

080169c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d106      	bne.n	80169dc <tcp_input_delayed_close+0x1c>
 80169ce:	4b17      	ldr	r3, [pc, #92]	@ (8016a2c <tcp_input_delayed_close+0x6c>)
 80169d0:	f240 225a 	movw	r2, #602	@ 0x25a
 80169d4:	4916      	ldr	r1, [pc, #88]	@ (8016a30 <tcp_input_delayed_close+0x70>)
 80169d6:	4817      	ldr	r0, [pc, #92]	@ (8016a34 <tcp_input_delayed_close+0x74>)
 80169d8:	f007 fafa 	bl	801dfd0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80169dc:	4b16      	ldr	r3, [pc, #88]	@ (8016a38 <tcp_input_delayed_close+0x78>)
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	f003 0310 	and.w	r3, r3, #16
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d01c      	beq.n	8016a22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	8b5b      	ldrh	r3, [r3, #26]
 80169ec:	f003 0310 	and.w	r3, r3, #16
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d10d      	bne.n	8016a10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d008      	beq.n	8016a10 <tcp_input_delayed_close+0x50>
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	6912      	ldr	r2, [r2, #16]
 8016a08:	f06f 010e 	mvn.w	r1, #14
 8016a0c:	4610      	mov	r0, r2
 8016a0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016a10:	6879      	ldr	r1, [r7, #4]
 8016a12:	480a      	ldr	r0, [pc, #40]	@ (8016a3c <tcp_input_delayed_close+0x7c>)
 8016a14:	f7ff fa50 	bl	8015eb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f7fe f83b 	bl	8014a94 <tcp_free>
    return 1;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	e000      	b.n	8016a24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3708      	adds	r7, #8
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}
 8016a2c:	08020460 	.word	0x08020460
 8016a30:	08020630 	.word	0x08020630
 8016a34:	080204ac 	.word	0x080204ac
 8016a38:	200277f5 	.word	0x200277f5
 8016a3c:	200277bc 	.word	0x200277bc

08016a40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016a40:	b590      	push	{r4, r7, lr}
 8016a42:	b08b      	sub	sp, #44	@ 0x2c
 8016a44:	af04      	add	r7, sp, #16
 8016a46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016a48:	4b6f      	ldr	r3, [pc, #444]	@ (8016c08 <tcp_listen_input+0x1c8>)
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	f003 0304 	and.w	r3, r3, #4
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f040 80d2 	bne.w	8016bfa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d106      	bne.n	8016a6a <tcp_listen_input+0x2a>
 8016a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8016c0c <tcp_listen_input+0x1cc>)
 8016a5e:	f240 2281 	movw	r2, #641	@ 0x281
 8016a62:	496b      	ldr	r1, [pc, #428]	@ (8016c10 <tcp_listen_input+0x1d0>)
 8016a64:	486b      	ldr	r0, [pc, #428]	@ (8016c14 <tcp_listen_input+0x1d4>)
 8016a66:	f007 fab3 	bl	801dfd0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016a6a:	4b67      	ldr	r3, [pc, #412]	@ (8016c08 <tcp_listen_input+0x1c8>)
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	f003 0310 	and.w	r3, r3, #16
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d019      	beq.n	8016aaa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a76:	4b68      	ldr	r3, [pc, #416]	@ (8016c18 <tcp_listen_input+0x1d8>)
 8016a78:	6819      	ldr	r1, [r3, #0]
 8016a7a:	4b68      	ldr	r3, [pc, #416]	@ (8016c1c <tcp_listen_input+0x1dc>)
 8016a7c:	881b      	ldrh	r3, [r3, #0]
 8016a7e:	461a      	mov	r2, r3
 8016a80:	4b67      	ldr	r3, [pc, #412]	@ (8016c20 <tcp_listen_input+0x1e0>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a86:	4b67      	ldr	r3, [pc, #412]	@ (8016c24 <tcp_listen_input+0x1e4>)
 8016a88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a8a:	885b      	ldrh	r3, [r3, #2]
 8016a8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a8e:	4a65      	ldr	r2, [pc, #404]	@ (8016c24 <tcp_listen_input+0x1e4>)
 8016a90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a92:	8812      	ldrh	r2, [r2, #0]
 8016a94:	b292      	uxth	r2, r2
 8016a96:	9202      	str	r2, [sp, #8]
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	4b63      	ldr	r3, [pc, #396]	@ (8016c28 <tcp_listen_input+0x1e8>)
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	4b63      	ldr	r3, [pc, #396]	@ (8016c2c <tcp_listen_input+0x1ec>)
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f002 ff7a 	bl	801999c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016aa8:	e0a9      	b.n	8016bfe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016aaa:	4b57      	ldr	r3, [pc, #348]	@ (8016c08 <tcp_listen_input+0x1c8>)
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	f003 0302 	and.w	r3, r3, #2
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	f000 80a3 	beq.w	8016bfe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	7d5b      	ldrb	r3, [r3, #21]
 8016abc:	4618      	mov	r0, r3
 8016abe:	f7ff f927 	bl	8015d10 <tcp_alloc>
 8016ac2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d111      	bne.n	8016aee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	699b      	ldr	r3, [r3, #24]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00a      	beq.n	8016ae8 <tcp_listen_input+0xa8>
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	699b      	ldr	r3, [r3, #24]
 8016ad6:	687a      	ldr	r2, [r7, #4]
 8016ad8:	6910      	ldr	r0, [r2, #16]
 8016ada:	f04f 32ff 	mov.w	r2, #4294967295
 8016ade:	2100      	movs	r1, #0
 8016ae0:	4798      	blx	r3
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	73bb      	strb	r3, [r7, #14]
      return;
 8016ae6:	e08b      	b.n	8016c00 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016ae8:	23f0      	movs	r3, #240	@ 0xf0
 8016aea:	73bb      	strb	r3, [r7, #14]
      return;
 8016aec:	e088      	b.n	8016c00 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016aee:	4b50      	ldr	r3, [pc, #320]	@ (8016c30 <tcp_listen_input+0x1f0>)
 8016af0:	695a      	ldr	r2, [r3, #20]
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016af6:	4b4e      	ldr	r3, [pc, #312]	@ (8016c30 <tcp_listen_input+0x1f0>)
 8016af8:	691a      	ldr	r2, [r3, #16]
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	8ada      	ldrh	r2, [r3, #22]
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016b06:	4b47      	ldr	r3, [pc, #284]	@ (8016c24 <tcp_listen_input+0x1e4>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	881b      	ldrh	r3, [r3, #0]
 8016b0c:	b29a      	uxth	r2, r3
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	2203      	movs	r2, #3
 8016b16:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016b18:	4b41      	ldr	r3, [pc, #260]	@ (8016c20 <tcp_listen_input+0x1e0>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	1c5a      	adds	r2, r3, #1
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016b2a:	6978      	ldr	r0, [r7, #20]
 8016b2c:	f7ff fa58 	bl	8015fe0 <tcp_next_iss>
 8016b30:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	693a      	ldr	r2, [r7, #16]
 8016b36:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	693a      	ldr	r2, [r7, #16]
 8016b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	693a      	ldr	r2, [r7, #16]
 8016b42:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	693a      	ldr	r2, [r7, #16]
 8016b48:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016b4a:	4b35      	ldr	r3, [pc, #212]	@ (8016c20 <tcp_listen_input+0x1e0>)
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	1e5a      	subs	r2, r3, #1
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	691a      	ldr	r2, [r3, #16]
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	7a5b      	ldrb	r3, [r3, #9]
 8016b66:	f003 030c 	and.w	r3, r3, #12
 8016b6a:	b2da      	uxtb	r2, r3
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	7a1a      	ldrb	r2, [r3, #8]
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016b78:	4b2e      	ldr	r3, [pc, #184]	@ (8016c34 <tcp_listen_input+0x1f4>)
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	60da      	str	r2, [r3, #12]
 8016b80:	4a2c      	ldr	r2, [pc, #176]	@ (8016c34 <tcp_listen_input+0x1f4>)
 8016b82:	697b      	ldr	r3, [r7, #20]
 8016b84:	6013      	str	r3, [r2, #0]
 8016b86:	f003 f8cb 	bl	8019d20 <tcp_timer_needed>
 8016b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8016c38 <tcp_listen_input+0x1f8>)
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016b90:	6978      	ldr	r0, [r7, #20]
 8016b92:	f001 fd8b 	bl	80186ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016b96:	4b23      	ldr	r3, [pc, #140]	@ (8016c24 <tcp_listen_input+0x1e4>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	89db      	ldrh	r3, [r3, #14]
 8016b9c:	b29a      	uxth	r2, r3
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	3304      	adds	r3, #4
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f004 ff6d 	bl	801ba98 <ip4_route>
 8016bbe:	4601      	mov	r1, r0
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	3304      	adds	r3, #4
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f7ff fa30 	bl	801602c <tcp_eff_send_mss_netif>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	461a      	mov	r2, r3
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016bd4:	2112      	movs	r1, #18
 8016bd6:	6978      	ldr	r0, [r7, #20]
 8016bd8:	f002 f83e 	bl	8018c58 <tcp_enqueue_flags>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d004      	beq.n	8016bf2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016be8:	2100      	movs	r1, #0
 8016bea:	6978      	ldr	r0, [r7, #20]
 8016bec:	f7fe f97c 	bl	8014ee8 <tcp_abandon>
      return;
 8016bf0:	e006      	b.n	8016c00 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016bf2:	6978      	ldr	r0, [r7, #20]
 8016bf4:	f002 f91e 	bl	8018e34 <tcp_output>
  return;
 8016bf8:	e001      	b.n	8016bfe <tcp_listen_input+0x1be>
    return;
 8016bfa:	bf00      	nop
 8016bfc:	e000      	b.n	8016c00 <tcp_listen_input+0x1c0>
  return;
 8016bfe:	bf00      	nop
}
 8016c00:	371c      	adds	r7, #28
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd90      	pop	{r4, r7, pc}
 8016c06:	bf00      	nop
 8016c08:	200277f4 	.word	0x200277f4
 8016c0c:	08020460 	.word	0x08020460
 8016c10:	08020658 	.word	0x08020658
 8016c14:	080204ac 	.word	0x080204ac
 8016c18:	200277ec 	.word	0x200277ec
 8016c1c:	200277f2 	.word	0x200277f2
 8016c20:	200277e8 	.word	0x200277e8
 8016c24:	200277d8 	.word	0x200277d8
 8016c28:	200246c0 	.word	0x200246c0
 8016c2c:	200246c4 	.word	0x200246c4
 8016c30:	200246b0 	.word	0x200246b0
 8016c34:	200277bc 	.word	0x200277bc
 8016c38:	200277c4 	.word	0x200277c4

08016c3c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b086      	sub	sp, #24
 8016c40:	af04      	add	r7, sp, #16
 8016c42:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016c44:	4b2f      	ldr	r3, [pc, #188]	@ (8016d04 <tcp_timewait_input+0xc8>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	f003 0304 	and.w	r3, r3, #4
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d153      	bne.n	8016cf8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d106      	bne.n	8016c64 <tcp_timewait_input+0x28>
 8016c56:	4b2c      	ldr	r3, [pc, #176]	@ (8016d08 <tcp_timewait_input+0xcc>)
 8016c58:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016c5c:	492b      	ldr	r1, [pc, #172]	@ (8016d0c <tcp_timewait_input+0xd0>)
 8016c5e:	482c      	ldr	r0, [pc, #176]	@ (8016d10 <tcp_timewait_input+0xd4>)
 8016c60:	f007 f9b6 	bl	801dfd0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016c64:	4b27      	ldr	r3, [pc, #156]	@ (8016d04 <tcp_timewait_input+0xc8>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	f003 0302 	and.w	r3, r3, #2
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d02a      	beq.n	8016cc6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016c70:	4b28      	ldr	r3, [pc, #160]	@ (8016d14 <tcp_timewait_input+0xd8>)
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c78:	1ad3      	subs	r3, r2, r3
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	db2d      	blt.n	8016cda <tcp_timewait_input+0x9e>
 8016c7e:	4b25      	ldr	r3, [pc, #148]	@ (8016d14 <tcp_timewait_input+0xd8>)
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c86:	6879      	ldr	r1, [r7, #4]
 8016c88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016c8a:	440b      	add	r3, r1
 8016c8c:	1ad3      	subs	r3, r2, r3
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	dc23      	bgt.n	8016cda <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c92:	4b21      	ldr	r3, [pc, #132]	@ (8016d18 <tcp_timewait_input+0xdc>)
 8016c94:	6819      	ldr	r1, [r3, #0]
 8016c96:	4b21      	ldr	r3, [pc, #132]	@ (8016d1c <tcp_timewait_input+0xe0>)
 8016c98:	881b      	ldrh	r3, [r3, #0]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8016d14 <tcp_timewait_input+0xd8>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8016d20 <tcp_timewait_input+0xe4>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ca6:	885b      	ldrh	r3, [r3, #2]
 8016ca8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016caa:	4a1d      	ldr	r2, [pc, #116]	@ (8016d20 <tcp_timewait_input+0xe4>)
 8016cac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cae:	8812      	ldrh	r2, [r2, #0]
 8016cb0:	b292      	uxth	r2, r2
 8016cb2:	9202      	str	r2, [sp, #8]
 8016cb4:	9301      	str	r3, [sp, #4]
 8016cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8016d24 <tcp_timewait_input+0xe8>)
 8016cb8:	9300      	str	r3, [sp, #0]
 8016cba:	4b1b      	ldr	r3, [pc, #108]	@ (8016d28 <tcp_timewait_input+0xec>)
 8016cbc:	4602      	mov	r2, r0
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f002 fe6c 	bl	801999c <tcp_rst>
      return;
 8016cc4:	e01b      	b.n	8016cfe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8016d04 <tcp_timewait_input+0xc8>)
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	f003 0301 	and.w	r3, r3, #1
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d003      	beq.n	8016cda <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016cd2:	4b16      	ldr	r3, [pc, #88]	@ (8016d2c <tcp_timewait_input+0xf0>)
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016cda:	4b10      	ldr	r3, [pc, #64]	@ (8016d1c <tcp_timewait_input+0xe0>)
 8016cdc:	881b      	ldrh	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00c      	beq.n	8016cfc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	8b5b      	ldrh	r3, [r3, #26]
 8016ce6:	f043 0302 	orr.w	r3, r3, #2
 8016cea:	b29a      	uxth	r2, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f002 f89f 	bl	8018e34 <tcp_output>
  }
  return;
 8016cf6:	e001      	b.n	8016cfc <tcp_timewait_input+0xc0>
    return;
 8016cf8:	bf00      	nop
 8016cfa:	e000      	b.n	8016cfe <tcp_timewait_input+0xc2>
  return;
 8016cfc:	bf00      	nop
}
 8016cfe:	3708      	adds	r7, #8
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	200277f4 	.word	0x200277f4
 8016d08:	08020460 	.word	0x08020460
 8016d0c:	08020678 	.word	0x08020678
 8016d10:	080204ac 	.word	0x080204ac
 8016d14:	200277e8 	.word	0x200277e8
 8016d18:	200277ec 	.word	0x200277ec
 8016d1c:	200277f2 	.word	0x200277f2
 8016d20:	200277d8 	.word	0x200277d8
 8016d24:	200246c0 	.word	0x200246c0
 8016d28:	200246c4 	.word	0x200246c4
 8016d2c:	200277b0 	.word	0x200277b0

08016d30 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016d30:	b590      	push	{r4, r7, lr}
 8016d32:	b08d      	sub	sp, #52	@ 0x34
 8016d34:	af04      	add	r7, sp, #16
 8016d36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d106      	bne.n	8016d54 <tcp_process+0x24>
 8016d46:	4b9d      	ldr	r3, [pc, #628]	@ (8016fbc <tcp_process+0x28c>)
 8016d48:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016d4c:	499c      	ldr	r1, [pc, #624]	@ (8016fc0 <tcp_process+0x290>)
 8016d4e:	489d      	ldr	r0, [pc, #628]	@ (8016fc4 <tcp_process+0x294>)
 8016d50:	f007 f93e 	bl	801dfd0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016d54:	4b9c      	ldr	r3, [pc, #624]	@ (8016fc8 <tcp_process+0x298>)
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	f003 0304 	and.w	r3, r3, #4
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d04e      	beq.n	8016dfe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	7d1b      	ldrb	r3, [r3, #20]
 8016d64:	2b02      	cmp	r3, #2
 8016d66:	d108      	bne.n	8016d7a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d6c:	4b97      	ldr	r3, [pc, #604]	@ (8016fcc <tcp_process+0x29c>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d123      	bne.n	8016dbc <tcp_process+0x8c>
        acceptable = 1;
 8016d74:	2301      	movs	r3, #1
 8016d76:	76fb      	strb	r3, [r7, #27]
 8016d78:	e020      	b.n	8016dbc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d7e:	4b94      	ldr	r3, [pc, #592]	@ (8016fd0 <tcp_process+0x2a0>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	429a      	cmp	r2, r3
 8016d84:	d102      	bne.n	8016d8c <tcp_process+0x5c>
        acceptable = 1;
 8016d86:	2301      	movs	r3, #1
 8016d88:	76fb      	strb	r3, [r7, #27]
 8016d8a:	e017      	b.n	8016dbc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d8c:	4b90      	ldr	r3, [pc, #576]	@ (8016fd0 <tcp_process+0x2a0>)
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d94:	1ad3      	subs	r3, r2, r3
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	db10      	blt.n	8016dbc <tcp_process+0x8c>
 8016d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8016fd0 <tcp_process+0x2a0>)
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016da2:	6879      	ldr	r1, [r7, #4]
 8016da4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016da6:	440b      	add	r3, r1
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	dc06      	bgt.n	8016dbc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	8b5b      	ldrh	r3, [r3, #26]
 8016db2:	f043 0302 	orr.w	r3, r3, #2
 8016db6:	b29a      	uxth	r2, r3
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016dbc:	7efb      	ldrb	r3, [r7, #27]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d01b      	beq.n	8016dfa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	7d1b      	ldrb	r3, [r3, #20]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d106      	bne.n	8016dd8 <tcp_process+0xa8>
 8016dca:	4b7c      	ldr	r3, [pc, #496]	@ (8016fbc <tcp_process+0x28c>)
 8016dcc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016dd0:	4980      	ldr	r1, [pc, #512]	@ (8016fd4 <tcp_process+0x2a4>)
 8016dd2:	487c      	ldr	r0, [pc, #496]	@ (8016fc4 <tcp_process+0x294>)
 8016dd4:	f007 f8fc 	bl	801dfd0 <iprintf>
      recv_flags |= TF_RESET;
 8016dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8016fd8 <tcp_process+0x2a8>)
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f043 0308 	orr.w	r3, r3, #8
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	4b7d      	ldr	r3, [pc, #500]	@ (8016fd8 <tcp_process+0x2a8>)
 8016de4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	8b5b      	ldrh	r3, [r3, #26]
 8016dea:	f023 0301 	bic.w	r3, r3, #1
 8016dee:	b29a      	uxth	r2, r3
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016df4:	f06f 030d 	mvn.w	r3, #13
 8016df8:	e37a      	b.n	80174f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	e378      	b.n	80174f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016dfe:	4b72      	ldr	r3, [pc, #456]	@ (8016fc8 <tcp_process+0x298>)
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	f003 0302 	and.w	r3, r3, #2
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d010      	beq.n	8016e2c <tcp_process+0xfc>
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	7d1b      	ldrb	r3, [r3, #20]
 8016e0e:	2b02      	cmp	r3, #2
 8016e10:	d00c      	beq.n	8016e2c <tcp_process+0xfc>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	7d1b      	ldrb	r3, [r3, #20]
 8016e16:	2b03      	cmp	r3, #3
 8016e18:	d008      	beq.n	8016e2c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	8b5b      	ldrh	r3, [r3, #26]
 8016e1e:	f043 0302 	orr.w	r3, r3, #2
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	e361      	b.n	80174f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	8b5b      	ldrh	r3, [r3, #26]
 8016e30:	f003 0310 	and.w	r3, r3, #16
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d103      	bne.n	8016e40 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016e38:	4b68      	ldr	r3, [pc, #416]	@ (8016fdc <tcp_process+0x2ac>)
 8016e3a:	681a      	ldr	r2, [r3, #0]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2200      	movs	r2, #0
 8016e44:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f001 fc2b 	bl	80186ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	7d1b      	ldrb	r3, [r3, #20]
 8016e5a:	3b02      	subs	r3, #2
 8016e5c:	2b07      	cmp	r3, #7
 8016e5e:	f200 8337 	bhi.w	80174d0 <tcp_process+0x7a0>
 8016e62:	a201      	add	r2, pc, #4	@ (adr r2, 8016e68 <tcp_process+0x138>)
 8016e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e68:	08016e89 	.word	0x08016e89
 8016e6c:	080170b9 	.word	0x080170b9
 8016e70:	08017231 	.word	0x08017231
 8016e74:	0801725b 	.word	0x0801725b
 8016e78:	0801737f 	.word	0x0801737f
 8016e7c:	08017231 	.word	0x08017231
 8016e80:	0801740b 	.word	0x0801740b
 8016e84:	0801749b 	.word	0x0801749b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016e88:	4b4f      	ldr	r3, [pc, #316]	@ (8016fc8 <tcp_process+0x298>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	f003 0310 	and.w	r3, r3, #16
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 80e4 	beq.w	801705e <tcp_process+0x32e>
 8016e96:	4b4c      	ldr	r3, [pc, #304]	@ (8016fc8 <tcp_process+0x298>)
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	f003 0302 	and.w	r3, r3, #2
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	f000 80dd 	beq.w	801705e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ea8:	1c5a      	adds	r2, r3, #1
 8016eaa:	4b48      	ldr	r3, [pc, #288]	@ (8016fcc <tcp_process+0x29c>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	f040 80d5 	bne.w	801705e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016eb4:	4b46      	ldr	r3, [pc, #280]	@ (8016fd0 <tcp_process+0x2a0>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	1c5a      	adds	r2, r3, #1
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016ec6:	4b41      	ldr	r3, [pc, #260]	@ (8016fcc <tcp_process+0x29c>)
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016ece:	4b44      	ldr	r3, [pc, #272]	@ (8016fe0 <tcp_process+0x2b0>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	89db      	ldrh	r3, [r3, #14]
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016ee8:	4b39      	ldr	r3, [pc, #228]	@ (8016fd0 <tcp_process+0x2a0>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	1e5a      	subs	r2, r3, #1
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2204      	movs	r2, #4
 8016ef6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	3304      	adds	r3, #4
 8016f00:	4618      	mov	r0, r3
 8016f02:	f004 fdc9 	bl	801ba98 <ip4_route>
 8016f06:	4601      	mov	r1, r0
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	3304      	adds	r3, #4
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	4620      	mov	r0, r4
 8016f10:	f7ff f88c 	bl	801602c <tcp_eff_send_mss_netif>
 8016f14:	4603      	mov	r3, r0
 8016f16:	461a      	mov	r2, r3
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f20:	009a      	lsls	r2, r3, #2
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016f2c:	428b      	cmp	r3, r1
 8016f2e:	bf38      	it	cc
 8016f30:	460b      	movcc	r3, r1
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d204      	bcs.n	8016f40 <tcp_process+0x210>
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f3a:	009b      	lsls	r3, r3, #2
 8016f3c:	b29b      	uxth	r3, r3
 8016f3e:	e00d      	b.n	8016f5c <tcp_process+0x22c>
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d904      	bls.n	8016f58 <tcp_process+0x228>
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f52:	005b      	lsls	r3, r3, #1
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	e001      	b.n	8016f5c <tcp_process+0x22c>
 8016f58:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016f5c:	687a      	ldr	r2, [r7, #4]
 8016f5e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d106      	bne.n	8016f7a <tcp_process+0x24a>
 8016f6c:	4b13      	ldr	r3, [pc, #76]	@ (8016fbc <tcp_process+0x28c>)
 8016f6e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016f72:	491c      	ldr	r1, [pc, #112]	@ (8016fe4 <tcp_process+0x2b4>)
 8016f74:	4813      	ldr	r0, [pc, #76]	@ (8016fc4 <tcp_process+0x294>)
 8016f76:	f007 f82b 	bl	801dfd0 <iprintf>
        --pcb->snd_queuelen;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f80:	3b01      	subs	r3, #1
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f8e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d12a      	bne.n	8016fec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f9a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d106      	bne.n	8016fb0 <tcp_process+0x280>
 8016fa2:	4b06      	ldr	r3, [pc, #24]	@ (8016fbc <tcp_process+0x28c>)
 8016fa4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016fa8:	490f      	ldr	r1, [pc, #60]	@ (8016fe8 <tcp_process+0x2b8>)
 8016faa:	4806      	ldr	r0, [pc, #24]	@ (8016fc4 <tcp_process+0x294>)
 8016fac:	f007 f810 	bl	801dfd0 <iprintf>
          pcb->unsent = rseg->next;
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016fb8:	e01c      	b.n	8016ff4 <tcp_process+0x2c4>
 8016fba:	bf00      	nop
 8016fbc:	08020460 	.word	0x08020460
 8016fc0:	08020698 	.word	0x08020698
 8016fc4:	080204ac 	.word	0x080204ac
 8016fc8:	200277f4 	.word	0x200277f4
 8016fcc:	200277ec 	.word	0x200277ec
 8016fd0:	200277e8 	.word	0x200277e8
 8016fd4:	080206b4 	.word	0x080206b4
 8016fd8:	200277f5 	.word	0x200277f5
 8016fdc:	200277b0 	.word	0x200277b0
 8016fe0:	200277d8 	.word	0x200277d8
 8016fe4:	080206d4 	.word	0x080206d4
 8016fe8:	080206ec 	.word	0x080206ec
        } else {
          pcb->unacked = rseg->next;
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016ff4:	69f8      	ldr	r0, [r7, #28]
 8016ff6:	f7fe fd22 	bl	8015a3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d104      	bne.n	801700c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017008:	861a      	strh	r2, [r3, #48]	@ 0x30
 801700a:	e006      	b.n	801701a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2200      	movs	r2, #0
 8017010:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017020:	2b00      	cmp	r3, #0
 8017022:	d00a      	beq.n	801703a <tcp_process+0x30a>
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801702a:	687a      	ldr	r2, [r7, #4]
 801702c:	6910      	ldr	r0, [r2, #16]
 801702e:	2200      	movs	r2, #0
 8017030:	6879      	ldr	r1, [r7, #4]
 8017032:	4798      	blx	r3
 8017034:	4603      	mov	r3, r0
 8017036:	76bb      	strb	r3, [r7, #26]
 8017038:	e001      	b.n	801703e <tcp_process+0x30e>
 801703a:	2300      	movs	r3, #0
 801703c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801703e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017042:	f113 0f0d 	cmn.w	r3, #13
 8017046:	d102      	bne.n	801704e <tcp_process+0x31e>
          return ERR_ABRT;
 8017048:	f06f 030c 	mvn.w	r3, #12
 801704c:	e250      	b.n	80174f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	8b5b      	ldrh	r3, [r3, #26]
 8017052:	f043 0302 	orr.w	r3, r3, #2
 8017056:	b29a      	uxth	r2, r3
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801705c:	e23a      	b.n	80174d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801705e:	4b98      	ldr	r3, [pc, #608]	@ (80172c0 <tcp_process+0x590>)
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	f003 0310 	and.w	r3, r3, #16
 8017066:	2b00      	cmp	r3, #0
 8017068:	f000 8234 	beq.w	80174d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801706c:	4b95      	ldr	r3, [pc, #596]	@ (80172c4 <tcp_process+0x594>)
 801706e:	6819      	ldr	r1, [r3, #0]
 8017070:	4b95      	ldr	r3, [pc, #596]	@ (80172c8 <tcp_process+0x598>)
 8017072:	881b      	ldrh	r3, [r3, #0]
 8017074:	461a      	mov	r2, r3
 8017076:	4b95      	ldr	r3, [pc, #596]	@ (80172cc <tcp_process+0x59c>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801707c:	4b94      	ldr	r3, [pc, #592]	@ (80172d0 <tcp_process+0x5a0>)
 801707e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017080:	885b      	ldrh	r3, [r3, #2]
 8017082:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017084:	4a92      	ldr	r2, [pc, #584]	@ (80172d0 <tcp_process+0x5a0>)
 8017086:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017088:	8812      	ldrh	r2, [r2, #0]
 801708a:	b292      	uxth	r2, r2
 801708c:	9202      	str	r2, [sp, #8]
 801708e:	9301      	str	r3, [sp, #4]
 8017090:	4b90      	ldr	r3, [pc, #576]	@ (80172d4 <tcp_process+0x5a4>)
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	4b90      	ldr	r3, [pc, #576]	@ (80172d8 <tcp_process+0x5a8>)
 8017096:	4602      	mov	r2, r0
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f002 fc7f 	bl	801999c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80170a4:	2b05      	cmp	r3, #5
 80170a6:	f200 8215 	bhi.w	80174d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	2200      	movs	r2, #0
 80170ae:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f002 fa4b 	bl	801954c <tcp_rexmit_rto>
      break;
 80170b6:	e20d      	b.n	80174d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80170b8:	4b81      	ldr	r3, [pc, #516]	@ (80172c0 <tcp_process+0x590>)
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	f003 0310 	and.w	r3, r3, #16
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	f000 80a1 	beq.w	8017208 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80170c6:	4b7f      	ldr	r3, [pc, #508]	@ (80172c4 <tcp_process+0x594>)
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	3b01      	subs	r3, #1
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	db7e      	blt.n	80171d4 <tcp_process+0x4a4>
 80170d6:	4b7b      	ldr	r3, [pc, #492]	@ (80172c4 <tcp_process+0x594>)
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80170de:	1ad3      	subs	r3, r2, r3
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	dc77      	bgt.n	80171d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2204      	movs	r2, #4
 80170e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d102      	bne.n	80170f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80170f2:	23fa      	movs	r3, #250	@ 0xfa
 80170f4:	76bb      	strb	r3, [r7, #26]
 80170f6:	e01d      	b.n	8017134 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170fc:	699b      	ldr	r3, [r3, #24]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d106      	bne.n	8017110 <tcp_process+0x3e0>
 8017102:	4b76      	ldr	r3, [pc, #472]	@ (80172dc <tcp_process+0x5ac>)
 8017104:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017108:	4975      	ldr	r1, [pc, #468]	@ (80172e0 <tcp_process+0x5b0>)
 801710a:	4876      	ldr	r0, [pc, #472]	@ (80172e4 <tcp_process+0x5b4>)
 801710c:	f006 ff60 	bl	801dfd0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017114:	699b      	ldr	r3, [r3, #24]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d00a      	beq.n	8017130 <tcp_process+0x400>
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801711e:	699b      	ldr	r3, [r3, #24]
 8017120:	687a      	ldr	r2, [r7, #4]
 8017122:	6910      	ldr	r0, [r2, #16]
 8017124:	2200      	movs	r2, #0
 8017126:	6879      	ldr	r1, [r7, #4]
 8017128:	4798      	blx	r3
 801712a:	4603      	mov	r3, r0
 801712c:	76bb      	strb	r3, [r7, #26]
 801712e:	e001      	b.n	8017134 <tcp_process+0x404>
 8017130:	23f0      	movs	r3, #240	@ 0xf0
 8017132:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017134:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d00a      	beq.n	8017152 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801713c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017140:	f113 0f0d 	cmn.w	r3, #13
 8017144:	d002      	beq.n	801714c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f7fd ff8c 	bl	8015064 <tcp_abort>
            }
            return ERR_ABRT;
 801714c:	f06f 030c 	mvn.w	r3, #12
 8017150:	e1ce      	b.n	80174f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fae0 	bl	8017718 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017158:	4b63      	ldr	r3, [pc, #396]	@ (80172e8 <tcp_process+0x5b8>)
 801715a:	881b      	ldrh	r3, [r3, #0]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d005      	beq.n	801716c <tcp_process+0x43c>
            recv_acked--;
 8017160:	4b61      	ldr	r3, [pc, #388]	@ (80172e8 <tcp_process+0x5b8>)
 8017162:	881b      	ldrh	r3, [r3, #0]
 8017164:	3b01      	subs	r3, #1
 8017166:	b29a      	uxth	r2, r3
 8017168:	4b5f      	ldr	r3, [pc, #380]	@ (80172e8 <tcp_process+0x5b8>)
 801716a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017170:	009a      	lsls	r2, r3, #2
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017176:	005b      	lsls	r3, r3, #1
 8017178:	f241 111c 	movw	r1, #4380	@ 0x111c
 801717c:	428b      	cmp	r3, r1
 801717e:	bf38      	it	cc
 8017180:	460b      	movcc	r3, r1
 8017182:	429a      	cmp	r2, r3
 8017184:	d204      	bcs.n	8017190 <tcp_process+0x460>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	b29b      	uxth	r3, r3
 801718e:	e00d      	b.n	80171ac <tcp_process+0x47c>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	f241 121c 	movw	r2, #4380	@ 0x111c
 801719a:	4293      	cmp	r3, r2
 801719c:	d904      	bls.n	80171a8 <tcp_process+0x478>
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	e001      	b.n	80171ac <tcp_process+0x47c>
 80171a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80171b2:	4b4e      	ldr	r3, [pc, #312]	@ (80172ec <tcp_process+0x5bc>)
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	f003 0320 	and.w	r3, r3, #32
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d037      	beq.n	801722e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	8b5b      	ldrh	r3, [r3, #26]
 80171c2:	f043 0302 	orr.w	r3, r3, #2
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2207      	movs	r2, #7
 80171d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80171d2:	e02c      	b.n	801722e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171d4:	4b3b      	ldr	r3, [pc, #236]	@ (80172c4 <tcp_process+0x594>)
 80171d6:	6819      	ldr	r1, [r3, #0]
 80171d8:	4b3b      	ldr	r3, [pc, #236]	@ (80172c8 <tcp_process+0x598>)
 80171da:	881b      	ldrh	r3, [r3, #0]
 80171dc:	461a      	mov	r2, r3
 80171de:	4b3b      	ldr	r3, [pc, #236]	@ (80172cc <tcp_process+0x59c>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171e4:	4b3a      	ldr	r3, [pc, #232]	@ (80172d0 <tcp_process+0x5a0>)
 80171e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171e8:	885b      	ldrh	r3, [r3, #2]
 80171ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171ec:	4a38      	ldr	r2, [pc, #224]	@ (80172d0 <tcp_process+0x5a0>)
 80171ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171f0:	8812      	ldrh	r2, [r2, #0]
 80171f2:	b292      	uxth	r2, r2
 80171f4:	9202      	str	r2, [sp, #8]
 80171f6:	9301      	str	r3, [sp, #4]
 80171f8:	4b36      	ldr	r3, [pc, #216]	@ (80172d4 <tcp_process+0x5a4>)
 80171fa:	9300      	str	r3, [sp, #0]
 80171fc:	4b36      	ldr	r3, [pc, #216]	@ (80172d8 <tcp_process+0x5a8>)
 80171fe:	4602      	mov	r2, r0
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f002 fbcb 	bl	801999c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017206:	e167      	b.n	80174d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017208:	4b2d      	ldr	r3, [pc, #180]	@ (80172c0 <tcp_process+0x590>)
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	f003 0302 	and.w	r3, r3, #2
 8017210:	2b00      	cmp	r3, #0
 8017212:	f000 8161 	beq.w	80174d8 <tcp_process+0x7a8>
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801721a:	1e5a      	subs	r2, r3, #1
 801721c:	4b2b      	ldr	r3, [pc, #172]	@ (80172cc <tcp_process+0x59c>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	429a      	cmp	r2, r3
 8017222:	f040 8159 	bne.w	80174d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f002 f9b2 	bl	8019590 <tcp_rexmit>
      break;
 801722c:	e154      	b.n	80174d8 <tcp_process+0x7a8>
 801722e:	e153      	b.n	80174d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fa71 	bl	8017718 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017236:	4b2d      	ldr	r3, [pc, #180]	@ (80172ec <tcp_process+0x5bc>)
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	f003 0320 	and.w	r3, r3, #32
 801723e:	2b00      	cmp	r3, #0
 8017240:	f000 814c 	beq.w	80174dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	8b5b      	ldrh	r3, [r3, #26]
 8017248:	f043 0302 	orr.w	r3, r3, #2
 801724c:	b29a      	uxth	r2, r3
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2207      	movs	r2, #7
 8017256:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017258:	e140      	b.n	80174dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 fa5c 	bl	8017718 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017260:	4b22      	ldr	r3, [pc, #136]	@ (80172ec <tcp_process+0x5bc>)
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	f003 0320 	and.w	r3, r3, #32
 8017268:	2b00      	cmp	r3, #0
 801726a:	d071      	beq.n	8017350 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801726c:	4b14      	ldr	r3, [pc, #80]	@ (80172c0 <tcp_process+0x590>)
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	f003 0310 	and.w	r3, r3, #16
 8017274:	2b00      	cmp	r3, #0
 8017276:	d060      	beq.n	801733a <tcp_process+0x60a>
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801727c:	4b11      	ldr	r3, [pc, #68]	@ (80172c4 <tcp_process+0x594>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	429a      	cmp	r2, r3
 8017282:	d15a      	bne.n	801733a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017288:	2b00      	cmp	r3, #0
 801728a:	d156      	bne.n	801733a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	8b5b      	ldrh	r3, [r3, #26]
 8017290:	f043 0302 	orr.w	r3, r3, #2
 8017294:	b29a      	uxth	r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7fe fdbc 	bl	8015e18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80172a0:	4b13      	ldr	r3, [pc, #76]	@ (80172f0 <tcp_process+0x5c0>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d105      	bne.n	80172b6 <tcp_process+0x586>
 80172aa:	4b11      	ldr	r3, [pc, #68]	@ (80172f0 <tcp_process+0x5c0>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	68db      	ldr	r3, [r3, #12]
 80172b0:	4a0f      	ldr	r2, [pc, #60]	@ (80172f0 <tcp_process+0x5c0>)
 80172b2:	6013      	str	r3, [r2, #0]
 80172b4:	e02e      	b.n	8017314 <tcp_process+0x5e4>
 80172b6:	4b0e      	ldr	r3, [pc, #56]	@ (80172f0 <tcp_process+0x5c0>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	617b      	str	r3, [r7, #20]
 80172bc:	e027      	b.n	801730e <tcp_process+0x5de>
 80172be:	bf00      	nop
 80172c0:	200277f4 	.word	0x200277f4
 80172c4:	200277ec 	.word	0x200277ec
 80172c8:	200277f2 	.word	0x200277f2
 80172cc:	200277e8 	.word	0x200277e8
 80172d0:	200277d8 	.word	0x200277d8
 80172d4:	200246c0 	.word	0x200246c0
 80172d8:	200246c4 	.word	0x200246c4
 80172dc:	08020460 	.word	0x08020460
 80172e0:	08020700 	.word	0x08020700
 80172e4:	080204ac 	.word	0x080204ac
 80172e8:	200277f0 	.word	0x200277f0
 80172ec:	200277f5 	.word	0x200277f5
 80172f0:	200277bc 	.word	0x200277bc
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	68db      	ldr	r3, [r3, #12]
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d104      	bne.n	8017308 <tcp_process+0x5d8>
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	68da      	ldr	r2, [r3, #12]
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	60da      	str	r2, [r3, #12]
 8017306:	e005      	b.n	8017314 <tcp_process+0x5e4>
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	68db      	ldr	r3, [r3, #12]
 801730c:	617b      	str	r3, [r7, #20]
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d1ef      	bne.n	80172f4 <tcp_process+0x5c4>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2200      	movs	r2, #0
 8017318:	60da      	str	r2, [r3, #12]
 801731a:	4b77      	ldr	r3, [pc, #476]	@ (80174f8 <tcp_process+0x7c8>)
 801731c:	2201      	movs	r2, #1
 801731e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	220a      	movs	r2, #10
 8017324:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017326:	4b75      	ldr	r3, [pc, #468]	@ (80174fc <tcp_process+0x7cc>)
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	60da      	str	r2, [r3, #12]
 801732e:	4a73      	ldr	r2, [pc, #460]	@ (80174fc <tcp_process+0x7cc>)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6013      	str	r3, [r2, #0]
 8017334:	f002 fcf4 	bl	8019d20 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017338:	e0d2      	b.n	80174e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	8b5b      	ldrh	r3, [r3, #26]
 801733e:	f043 0302 	orr.w	r3, r3, #2
 8017342:	b29a      	uxth	r2, r3
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2208      	movs	r2, #8
 801734c:	751a      	strb	r2, [r3, #20]
      break;
 801734e:	e0c7      	b.n	80174e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017350:	4b6b      	ldr	r3, [pc, #428]	@ (8017500 <tcp_process+0x7d0>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	f003 0310 	and.w	r3, r3, #16
 8017358:	2b00      	cmp	r3, #0
 801735a:	f000 80c1 	beq.w	80174e0 <tcp_process+0x7b0>
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017362:	4b68      	ldr	r3, [pc, #416]	@ (8017504 <tcp_process+0x7d4>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	429a      	cmp	r2, r3
 8017368:	f040 80ba 	bne.w	80174e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017370:	2b00      	cmp	r3, #0
 8017372:	f040 80b5 	bne.w	80174e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	2206      	movs	r2, #6
 801737a:	751a      	strb	r2, [r3, #20]
      break;
 801737c:	e0b0      	b.n	80174e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 f9ca 	bl	8017718 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017384:	4b60      	ldr	r3, [pc, #384]	@ (8017508 <tcp_process+0x7d8>)
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	f003 0320 	and.w	r3, r3, #32
 801738c:	2b00      	cmp	r3, #0
 801738e:	f000 80a9 	beq.w	80174e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	8b5b      	ldrh	r3, [r3, #26]
 8017396:	f043 0302 	orr.w	r3, r3, #2
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7fe fd39 	bl	8015e18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80173a6:	4b59      	ldr	r3, [pc, #356]	@ (801750c <tcp_process+0x7dc>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	687a      	ldr	r2, [r7, #4]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d105      	bne.n	80173bc <tcp_process+0x68c>
 80173b0:	4b56      	ldr	r3, [pc, #344]	@ (801750c <tcp_process+0x7dc>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	68db      	ldr	r3, [r3, #12]
 80173b6:	4a55      	ldr	r2, [pc, #340]	@ (801750c <tcp_process+0x7dc>)
 80173b8:	6013      	str	r3, [r2, #0]
 80173ba:	e013      	b.n	80173e4 <tcp_process+0x6b4>
 80173bc:	4b53      	ldr	r3, [pc, #332]	@ (801750c <tcp_process+0x7dc>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	613b      	str	r3, [r7, #16]
 80173c2:	e00c      	b.n	80173de <tcp_process+0x6ae>
 80173c4:	693b      	ldr	r3, [r7, #16]
 80173c6:	68db      	ldr	r3, [r3, #12]
 80173c8:	687a      	ldr	r2, [r7, #4]
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d104      	bne.n	80173d8 <tcp_process+0x6a8>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	68da      	ldr	r2, [r3, #12]
 80173d2:	693b      	ldr	r3, [r7, #16]
 80173d4:	60da      	str	r2, [r3, #12]
 80173d6:	e005      	b.n	80173e4 <tcp_process+0x6b4>
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	68db      	ldr	r3, [r3, #12]
 80173dc:	613b      	str	r3, [r7, #16]
 80173de:	693b      	ldr	r3, [r7, #16]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d1ef      	bne.n	80173c4 <tcp_process+0x694>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2200      	movs	r2, #0
 80173e8:	60da      	str	r2, [r3, #12]
 80173ea:	4b43      	ldr	r3, [pc, #268]	@ (80174f8 <tcp_process+0x7c8>)
 80173ec:	2201      	movs	r2, #1
 80173ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	220a      	movs	r2, #10
 80173f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80173f6:	4b41      	ldr	r3, [pc, #260]	@ (80174fc <tcp_process+0x7cc>)
 80173f8:	681a      	ldr	r2, [r3, #0]
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	60da      	str	r2, [r3, #12]
 80173fe:	4a3f      	ldr	r2, [pc, #252]	@ (80174fc <tcp_process+0x7cc>)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	6013      	str	r3, [r2, #0]
 8017404:	f002 fc8c 	bl	8019d20 <tcp_timer_needed>
      }
      break;
 8017408:	e06c      	b.n	80174e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f000 f984 	bl	8017718 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017410:	4b3b      	ldr	r3, [pc, #236]	@ (8017500 <tcp_process+0x7d0>)
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	f003 0310 	and.w	r3, r3, #16
 8017418:	2b00      	cmp	r3, #0
 801741a:	d065      	beq.n	80174e8 <tcp_process+0x7b8>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017420:	4b38      	ldr	r3, [pc, #224]	@ (8017504 <tcp_process+0x7d4>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	429a      	cmp	r2, r3
 8017426:	d15f      	bne.n	80174e8 <tcp_process+0x7b8>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801742c:	2b00      	cmp	r3, #0
 801742e:	d15b      	bne.n	80174e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f7fe fcf1 	bl	8015e18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017436:	4b35      	ldr	r3, [pc, #212]	@ (801750c <tcp_process+0x7dc>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	429a      	cmp	r2, r3
 801743e:	d105      	bne.n	801744c <tcp_process+0x71c>
 8017440:	4b32      	ldr	r3, [pc, #200]	@ (801750c <tcp_process+0x7dc>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	68db      	ldr	r3, [r3, #12]
 8017446:	4a31      	ldr	r2, [pc, #196]	@ (801750c <tcp_process+0x7dc>)
 8017448:	6013      	str	r3, [r2, #0]
 801744a:	e013      	b.n	8017474 <tcp_process+0x744>
 801744c:	4b2f      	ldr	r3, [pc, #188]	@ (801750c <tcp_process+0x7dc>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	60fb      	str	r3, [r7, #12]
 8017452:	e00c      	b.n	801746e <tcp_process+0x73e>
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	68db      	ldr	r3, [r3, #12]
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	429a      	cmp	r2, r3
 801745c:	d104      	bne.n	8017468 <tcp_process+0x738>
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	68da      	ldr	r2, [r3, #12]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	60da      	str	r2, [r3, #12]
 8017466:	e005      	b.n	8017474 <tcp_process+0x744>
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	68db      	ldr	r3, [r3, #12]
 801746c:	60fb      	str	r3, [r7, #12]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d1ef      	bne.n	8017454 <tcp_process+0x724>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	60da      	str	r2, [r3, #12]
 801747a:	4b1f      	ldr	r3, [pc, #124]	@ (80174f8 <tcp_process+0x7c8>)
 801747c:	2201      	movs	r2, #1
 801747e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	220a      	movs	r2, #10
 8017484:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017486:	4b1d      	ldr	r3, [pc, #116]	@ (80174fc <tcp_process+0x7cc>)
 8017488:	681a      	ldr	r2, [r3, #0]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	60da      	str	r2, [r3, #12]
 801748e:	4a1b      	ldr	r2, [pc, #108]	@ (80174fc <tcp_process+0x7cc>)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	6013      	str	r3, [r2, #0]
 8017494:	f002 fc44 	bl	8019d20 <tcp_timer_needed>
      }
      break;
 8017498:	e026      	b.n	80174e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f000 f93c 	bl	8017718 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80174a0:	4b17      	ldr	r3, [pc, #92]	@ (8017500 <tcp_process+0x7d0>)
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	f003 0310 	and.w	r3, r3, #16
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d01f      	beq.n	80174ec <tcp_process+0x7bc>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174b0:	4b14      	ldr	r3, [pc, #80]	@ (8017504 <tcp_process+0x7d4>)
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d119      	bne.n	80174ec <tcp_process+0x7bc>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d115      	bne.n	80174ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80174c0:	4b11      	ldr	r3, [pc, #68]	@ (8017508 <tcp_process+0x7d8>)
 80174c2:	781b      	ldrb	r3, [r3, #0]
 80174c4:	f043 0310 	orr.w	r3, r3, #16
 80174c8:	b2da      	uxtb	r2, r3
 80174ca:	4b0f      	ldr	r3, [pc, #60]	@ (8017508 <tcp_process+0x7d8>)
 80174cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80174ce:	e00d      	b.n	80174ec <tcp_process+0x7bc>
    default:
      break;
 80174d0:	bf00      	nop
 80174d2:	e00c      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174d4:	bf00      	nop
 80174d6:	e00a      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174d8:	bf00      	nop
 80174da:	e008      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174dc:	bf00      	nop
 80174de:	e006      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174e0:	bf00      	nop
 80174e2:	e004      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174e4:	bf00      	nop
 80174e6:	e002      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174e8:	bf00      	nop
 80174ea:	e000      	b.n	80174ee <tcp_process+0x7be>
      break;
 80174ec:	bf00      	nop
  }
  return ERR_OK;
 80174ee:	2300      	movs	r3, #0
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3724      	adds	r7, #36	@ 0x24
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd90      	pop	{r4, r7, pc}
 80174f8:	200277c4 	.word	0x200277c4
 80174fc:	200277c0 	.word	0x200277c0
 8017500:	200277f4 	.word	0x200277f4
 8017504:	200277ec 	.word	0x200277ec
 8017508:	200277f5 	.word	0x200277f5
 801750c:	200277bc 	.word	0x200277bc

08017510 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017510:	b590      	push	{r4, r7, lr}
 8017512:	b085      	sub	sp, #20
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
 8017518:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d106      	bne.n	801752e <tcp_oos_insert_segment+0x1e>
 8017520:	4b3b      	ldr	r3, [pc, #236]	@ (8017610 <tcp_oos_insert_segment+0x100>)
 8017522:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017526:	493b      	ldr	r1, [pc, #236]	@ (8017614 <tcp_oos_insert_segment+0x104>)
 8017528:	483b      	ldr	r0, [pc, #236]	@ (8017618 <tcp_oos_insert_segment+0x108>)
 801752a:	f006 fd51 	bl	801dfd0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	68db      	ldr	r3, [r3, #12]
 8017532:	899b      	ldrh	r3, [r3, #12]
 8017534:	b29b      	uxth	r3, r3
 8017536:	4618      	mov	r0, r3
 8017538:	f7fb fc02 	bl	8012d40 <lwip_htons>
 801753c:	4603      	mov	r3, r0
 801753e:	b2db      	uxtb	r3, r3
 8017540:	f003 0301 	and.w	r3, r3, #1
 8017544:	2b00      	cmp	r3, #0
 8017546:	d028      	beq.n	801759a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017548:	6838      	ldr	r0, [r7, #0]
 801754a:	f7fe fa63 	bl	8015a14 <tcp_segs_free>
    next = NULL;
 801754e:	2300      	movs	r3, #0
 8017550:	603b      	str	r3, [r7, #0]
 8017552:	e056      	b.n	8017602 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	899b      	ldrh	r3, [r3, #12]
 801755a:	b29b      	uxth	r3, r3
 801755c:	4618      	mov	r0, r3
 801755e:	f7fb fbef 	bl	8012d40 <lwip_htons>
 8017562:	4603      	mov	r3, r0
 8017564:	b2db      	uxtb	r3, r3
 8017566:	f003 0301 	and.w	r3, r3, #1
 801756a:	2b00      	cmp	r3, #0
 801756c:	d00d      	beq.n	801758a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	68db      	ldr	r3, [r3, #12]
 8017572:	899b      	ldrh	r3, [r3, #12]
 8017574:	b29c      	uxth	r4, r3
 8017576:	2001      	movs	r0, #1
 8017578:	f7fb fbe2 	bl	8012d40 <lwip_htons>
 801757c:	4603      	mov	r3, r0
 801757e:	461a      	mov	r2, r3
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	68db      	ldr	r3, [r3, #12]
 8017584:	4322      	orrs	r2, r4
 8017586:	b292      	uxth	r2, r2
 8017588:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017594:	68f8      	ldr	r0, [r7, #12]
 8017596:	f7fe fa52 	bl	8015a3e <tcp_seg_free>
    while (next &&
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d00e      	beq.n	80175be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	891b      	ldrh	r3, [r3, #8]
 80175a4:	461a      	mov	r2, r3
 80175a6:	4b1d      	ldr	r3, [pc, #116]	@ (801761c <tcp_oos_insert_segment+0x10c>)
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	441a      	add	r2, r3
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	685b      	ldr	r3, [r3, #4]
 80175b2:	6839      	ldr	r1, [r7, #0]
 80175b4:	8909      	ldrh	r1, [r1, #8]
 80175b6:	440b      	add	r3, r1
 80175b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	daca      	bge.n	8017554 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d01e      	beq.n	8017602 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	891b      	ldrh	r3, [r3, #8]
 80175c8:	461a      	mov	r2, r3
 80175ca:	4b14      	ldr	r3, [pc, #80]	@ (801761c <tcp_oos_insert_segment+0x10c>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	441a      	add	r2, r3
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	68db      	ldr	r3, [r3, #12]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80175d8:	2b00      	cmp	r3, #0
 80175da:	dd12      	ble.n	8017602 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	68db      	ldr	r3, [r3, #12]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	b29a      	uxth	r2, r3
 80175e4:	4b0d      	ldr	r3, [pc, #52]	@ (801761c <tcp_oos_insert_segment+0x10c>)
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	1ad3      	subs	r3, r2, r3
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	685a      	ldr	r2, [r3, #4]
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	891b      	ldrh	r3, [r3, #8]
 80175fa:	4619      	mov	r1, r3
 80175fc:	4610      	mov	r0, r2
 80175fe:	f7fc fe07 	bl	8014210 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	683a      	ldr	r2, [r7, #0]
 8017606:	601a      	str	r2, [r3, #0]
}
 8017608:	bf00      	nop
 801760a:	3714      	adds	r7, #20
 801760c:	46bd      	mov	sp, r7
 801760e:	bd90      	pop	{r4, r7, pc}
 8017610:	08020460 	.word	0x08020460
 8017614:	08020720 	.word	0x08020720
 8017618:	080204ac 	.word	0x080204ac
 801761c:	200277e8 	.word	0x200277e8

08017620 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017620:	b5b0      	push	{r4, r5, r7, lr}
 8017622:	b086      	sub	sp, #24
 8017624:	af00      	add	r7, sp, #0
 8017626:	60f8      	str	r0, [r7, #12]
 8017628:	60b9      	str	r1, [r7, #8]
 801762a:	607a      	str	r2, [r7, #4]
 801762c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801762e:	e03e      	b.n	80176ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	4618      	mov	r0, r3
 8017640:	f7fc fffa 	bl	8014638 <pbuf_clen>
 8017644:	4603      	mov	r3, r0
 8017646:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801764e:	8a7a      	ldrh	r2, [r7, #18]
 8017650:	429a      	cmp	r2, r3
 8017652:	d906      	bls.n	8017662 <tcp_free_acked_segments+0x42>
 8017654:	4b2a      	ldr	r3, [pc, #168]	@ (8017700 <tcp_free_acked_segments+0xe0>)
 8017656:	f240 4257 	movw	r2, #1111	@ 0x457
 801765a:	492a      	ldr	r1, [pc, #168]	@ (8017704 <tcp_free_acked_segments+0xe4>)
 801765c:	482a      	ldr	r0, [pc, #168]	@ (8017708 <tcp_free_acked_segments+0xe8>)
 801765e:	f006 fcb7 	bl	801dfd0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017668:	8a7b      	ldrh	r3, [r7, #18]
 801766a:	1ad3      	subs	r3, r2, r3
 801766c:	b29a      	uxth	r2, r3
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	891a      	ldrh	r2, [r3, #8]
 8017678:	4b24      	ldr	r3, [pc, #144]	@ (801770c <tcp_free_acked_segments+0xec>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	4413      	add	r3, r2
 801767e:	b29a      	uxth	r2, r3
 8017680:	4b22      	ldr	r3, [pc, #136]	@ (801770c <tcp_free_acked_segments+0xec>)
 8017682:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017684:	6978      	ldr	r0, [r7, #20]
 8017686:	f7fe f9da 	bl	8015a3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017690:	2b00      	cmp	r3, #0
 8017692:	d00c      	beq.n	80176ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d109      	bne.n	80176ae <tcp_free_acked_segments+0x8e>
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d106      	bne.n	80176ae <tcp_free_acked_segments+0x8e>
 80176a0:	4b17      	ldr	r3, [pc, #92]	@ (8017700 <tcp_free_acked_segments+0xe0>)
 80176a2:	f240 4261 	movw	r2, #1121	@ 0x461
 80176a6:	491a      	ldr	r1, [pc, #104]	@ (8017710 <tcp_free_acked_segments+0xf0>)
 80176a8:	4817      	ldr	r0, [pc, #92]	@ (8017708 <tcp_free_acked_segments+0xe8>)
 80176aa:	f006 fc91 	bl	801dfd0 <iprintf>
  while (seg_list != NULL &&
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d020      	beq.n	80176f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	68db      	ldr	r3, [r3, #12]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7fb fb56 	bl	8012d6c <lwip_htonl>
 80176c0:	4604      	mov	r4, r0
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	891b      	ldrh	r3, [r3, #8]
 80176c6:	461d      	mov	r5, r3
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	899b      	ldrh	r3, [r3, #12]
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7fb fb35 	bl	8012d40 <lwip_htons>
 80176d6:	4603      	mov	r3, r0
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	f003 0303 	and.w	r3, r3, #3
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <tcp_free_acked_segments+0xc6>
 80176e2:	2301      	movs	r3, #1
 80176e4:	e000      	b.n	80176e8 <tcp_free_acked_segments+0xc8>
 80176e6:	2300      	movs	r3, #0
 80176e8:	442b      	add	r3, r5
 80176ea:	18e2      	adds	r2, r4, r3
 80176ec:	4b09      	ldr	r3, [pc, #36]	@ (8017714 <tcp_free_acked_segments+0xf4>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	dd9c      	ble.n	8017630 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80176f6:	68bb      	ldr	r3, [r7, #8]
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3718      	adds	r7, #24
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bdb0      	pop	{r4, r5, r7, pc}
 8017700:	08020460 	.word	0x08020460
 8017704:	08020748 	.word	0x08020748
 8017708:	080204ac 	.word	0x080204ac
 801770c:	200277f0 	.word	0x200277f0
 8017710:	08020770 	.word	0x08020770
 8017714:	200277ec 	.word	0x200277ec

08017718 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017718:	b5b0      	push	{r4, r5, r7, lr}
 801771a:	b094      	sub	sp, #80	@ 0x50
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017720:	2300      	movs	r3, #0
 8017722:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d106      	bne.n	8017738 <tcp_receive+0x20>
 801772a:	4b91      	ldr	r3, [pc, #580]	@ (8017970 <tcp_receive+0x258>)
 801772c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8017730:	4990      	ldr	r1, [pc, #576]	@ (8017974 <tcp_receive+0x25c>)
 8017732:	4891      	ldr	r0, [pc, #580]	@ (8017978 <tcp_receive+0x260>)
 8017734:	f006 fc4c 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	7d1b      	ldrb	r3, [r3, #20]
 801773c:	2b03      	cmp	r3, #3
 801773e:	d806      	bhi.n	801774e <tcp_receive+0x36>
 8017740:	4b8b      	ldr	r3, [pc, #556]	@ (8017970 <tcp_receive+0x258>)
 8017742:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017746:	498d      	ldr	r1, [pc, #564]	@ (801797c <tcp_receive+0x264>)
 8017748:	488b      	ldr	r0, [pc, #556]	@ (8017978 <tcp_receive+0x260>)
 801774a:	f006 fc41 	bl	801dfd0 <iprintf>

  if (flags & TCP_ACK) {
 801774e:	4b8c      	ldr	r3, [pc, #560]	@ (8017980 <tcp_receive+0x268>)
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	f003 0310 	and.w	r3, r3, #16
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 8264 	beq.w	8017c24 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017762:	461a      	mov	r2, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017768:	4413      	add	r3, r2
 801776a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017770:	4b84      	ldr	r3, [pc, #528]	@ (8017984 <tcp_receive+0x26c>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	1ad3      	subs	r3, r2, r3
 8017776:	2b00      	cmp	r3, #0
 8017778:	db1b      	blt.n	80177b2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801777e:	4b81      	ldr	r3, [pc, #516]	@ (8017984 <tcp_receive+0x26c>)
 8017780:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017782:	429a      	cmp	r2, r3
 8017784:	d106      	bne.n	8017794 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801778a:	4b7f      	ldr	r3, [pc, #508]	@ (8017988 <tcp_receive+0x270>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	1ad3      	subs	r3, r2, r3
 8017790:	2b00      	cmp	r3, #0
 8017792:	db0e      	blt.n	80177b2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017798:	4b7b      	ldr	r3, [pc, #492]	@ (8017988 <tcp_receive+0x270>)
 801779a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801779c:	429a      	cmp	r2, r3
 801779e:	d125      	bne.n	80177ec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80177a0:	4b7a      	ldr	r3, [pc, #488]	@ (801798c <tcp_receive+0x274>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	89db      	ldrh	r3, [r3, #14]
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d91c      	bls.n	80177ec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80177b2:	4b76      	ldr	r3, [pc, #472]	@ (801798c <tcp_receive+0x274>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	89db      	ldrh	r3, [r3, #14]
 80177b8:	b29a      	uxth	r2, r3
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d205      	bcs.n	80177dc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80177dc:	4b69      	ldr	r3, [pc, #420]	@ (8017984 <tcp_receive+0x26c>)
 80177de:	681a      	ldr	r2, [r3, #0]
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80177e4:	4b68      	ldr	r3, [pc, #416]	@ (8017988 <tcp_receive+0x270>)
 80177e6:	681a      	ldr	r2, [r3, #0]
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80177ec:	4b66      	ldr	r3, [pc, #408]	@ (8017988 <tcp_receive+0x270>)
 80177ee:	681a      	ldr	r2, [r3, #0]
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177f4:	1ad3      	subs	r3, r2, r3
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	dc58      	bgt.n	80178ac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80177fa:	4b65      	ldr	r3, [pc, #404]	@ (8017990 <tcp_receive+0x278>)
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d14b      	bne.n	801789a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017806:	687a      	ldr	r2, [r7, #4]
 8017808:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801780c:	4413      	add	r3, r2
 801780e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017810:	429a      	cmp	r2, r3
 8017812:	d142      	bne.n	801789a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801781a:	2b00      	cmp	r3, #0
 801781c:	db3d      	blt.n	801789a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017822:	4b59      	ldr	r3, [pc, #356]	@ (8017988 <tcp_receive+0x270>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	429a      	cmp	r2, r3
 8017828:	d137      	bne.n	801789a <tcp_receive+0x182>
              found_dupack = 1;
 801782a:	2301      	movs	r3, #1
 801782c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017834:	2bff      	cmp	r3, #255	@ 0xff
 8017836:	d007      	beq.n	8017848 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801783e:	3301      	adds	r3, #1
 8017840:	b2da      	uxtb	r2, r3
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801784e:	2b03      	cmp	r3, #3
 8017850:	d91b      	bls.n	801788a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801785c:	4413      	add	r3, r2
 801785e:	b29a      	uxth	r2, r3
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017866:	429a      	cmp	r2, r3
 8017868:	d30a      	bcc.n	8017880 <tcp_receive+0x168>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017874:	4413      	add	r3, r2
 8017876:	b29a      	uxth	r2, r3
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801787e:	e004      	b.n	801788a <tcp_receive+0x172>
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017886:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017890:	2b02      	cmp	r3, #2
 8017892:	d902      	bls.n	801789a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f001 fee7 	bl	8019668 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801789a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801789c:	2b00      	cmp	r3, #0
 801789e:	f040 8161 	bne.w	8017b64 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2200      	movs	r2, #0
 80178a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80178aa:	e15b      	b.n	8017b64 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80178ac:	4b36      	ldr	r3, [pc, #216]	@ (8017988 <tcp_receive+0x270>)
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178b4:	1ad3      	subs	r3, r2, r3
 80178b6:	3b01      	subs	r3, #1
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	f2c0 814e 	blt.w	8017b5a <tcp_receive+0x442>
 80178be:	4b32      	ldr	r3, [pc, #200]	@ (8017988 <tcp_receive+0x270>)
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80178c6:	1ad3      	subs	r3, r2, r3
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	f300 8146 	bgt.w	8017b5a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	8b5b      	ldrh	r3, [r3, #26]
 80178d2:	f003 0304 	and.w	r3, r3, #4
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d010      	beq.n	80178fc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	8b5b      	ldrh	r3, [r3, #26]
 80178de:	f023 0304 	bic.w	r3, r3, #4
 80178e2:	b29a      	uxth	r2, r3
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	2200      	movs	r2, #0
 80178f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2200      	movs	r2, #0
 8017900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801790a:	10db      	asrs	r3, r3, #3
 801790c:	b21b      	sxth	r3, r3
 801790e:	b29a      	uxth	r2, r3
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017916:	b29b      	uxth	r3, r3
 8017918:	4413      	add	r3, r2
 801791a:	b29b      	uxth	r3, r3
 801791c:	b21a      	sxth	r2, r3
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017924:	4b18      	ldr	r3, [pc, #96]	@ (8017988 <tcp_receive+0x270>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	b29a      	uxth	r2, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801792e:	b29b      	uxth	r3, r3
 8017930:	1ad3      	subs	r3, r2, r3
 8017932:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2200      	movs	r2, #0
 8017938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801793c:	4b12      	ldr	r3, [pc, #72]	@ (8017988 <tcp_receive+0x270>)
 801793e:	681a      	ldr	r2, [r3, #0]
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	7d1b      	ldrb	r3, [r3, #20]
 8017948:	2b03      	cmp	r3, #3
 801794a:	f240 8097 	bls.w	8017a7c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801795a:	429a      	cmp	r2, r3
 801795c:	d245      	bcs.n	80179ea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	8b5b      	ldrh	r3, [r3, #26]
 8017962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017966:	2b00      	cmp	r3, #0
 8017968:	d014      	beq.n	8017994 <tcp_receive+0x27c>
 801796a:	2301      	movs	r3, #1
 801796c:	e013      	b.n	8017996 <tcp_receive+0x27e>
 801796e:	bf00      	nop
 8017970:	08020460 	.word	0x08020460
 8017974:	08020790 	.word	0x08020790
 8017978:	080204ac 	.word	0x080204ac
 801797c:	080207ac 	.word	0x080207ac
 8017980:	200277f4 	.word	0x200277f4
 8017984:	200277e8 	.word	0x200277e8
 8017988:	200277ec 	.word	0x200277ec
 801798c:	200277d8 	.word	0x200277d8
 8017990:	200277f2 	.word	0x200277f2
 8017994:	2302      	movs	r3, #2
 8017996:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801799a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801799e:	b29a      	uxth	r2, r3
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179a4:	fb12 f303 	smulbb	r3, r2, r3
 80179a8:	b29b      	uxth	r3, r3
 80179aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80179ac:	4293      	cmp	r3, r2
 80179ae:	bf28      	it	cs
 80179b0:	4613      	movcs	r3, r2
 80179b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80179bc:	4413      	add	r3, r2
 80179be:	b29a      	uxth	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d309      	bcc.n	80179de <tcp_receive+0x2c6>
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80179d2:	4413      	add	r3, r2
 80179d4:	b29a      	uxth	r2, r3
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80179dc:	e04e      	b.n	8017a7c <tcp_receive+0x364>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80179e8:	e048      	b.n	8017a7c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179f2:	4413      	add	r3, r2
 80179f4:	b29a      	uxth	r2, r3
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d309      	bcc.n	8017a14 <tcp_receive+0x2fc>
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017a06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017a08:	4413      	add	r3, r2
 8017a0a:	b29a      	uxth	r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017a12:	e004      	b.n	8017a1e <tcp_receive+0x306>
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d326      	bcc.n	8017a7c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a3a:	1ad3      	subs	r3, r2, r3
 8017a3c:	b29a      	uxth	r2, r3
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a4e:	4413      	add	r3, r2
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d30a      	bcc.n	8017a72 <tcp_receive+0x35a>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a66:	4413      	add	r3, r2
 8017a68:	b29a      	uxth	r2, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a70:	e004      	b.n	8017a7c <tcp_receive+0x364>
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a84:	4a98      	ldr	r2, [pc, #608]	@ (8017ce8 <tcp_receive+0x5d0>)
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f7ff fdca 	bl	8017620 <tcp_free_acked_segments>
 8017a8c:	4602      	mov	r2, r0
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a9a:	4a94      	ldr	r2, [pc, #592]	@ (8017cec <tcp_receive+0x5d4>)
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f7ff fdbf 	bl	8017620 <tcp_free_acked_segments>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d104      	bne.n	8017aba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ab6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017ab8:	e002      	b.n	8017ac0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2200      	movs	r2, #0
 8017abe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d103      	bne.n	8017ad6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017adc:	4b84      	ldr	r3, [pc, #528]	@ (8017cf0 <tcp_receive+0x5d8>)
 8017ade:	881b      	ldrh	r3, [r3, #0]
 8017ae0:	4413      	add	r3, r2
 8017ae2:	b29a      	uxth	r2, r3
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	8b5b      	ldrh	r3, [r3, #26]
 8017aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d035      	beq.n	8017b62 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d118      	bne.n	8017b30 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00c      	beq.n	8017b20 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	685b      	ldr	r3, [r3, #4]
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7fb f92a 	bl	8012d6c <lwip_htonl>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	dc20      	bgt.n	8017b62 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	8b5b      	ldrh	r3, [r3, #26]
 8017b24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017b28:	b29a      	uxth	r2, r3
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b2e:	e018      	b.n	8017b62 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7fb f915 	bl	8012d6c <lwip_htonl>
 8017b42:	4603      	mov	r3, r0
 8017b44:	1ae3      	subs	r3, r4, r3
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	dc0b      	bgt.n	8017b62 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	8b5b      	ldrh	r3, [r3, #26]
 8017b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017b52:	b29a      	uxth	r2, r3
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b58:	e003      	b.n	8017b62 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f001 ff70 	bl	8019a40 <tcp_send_empty_ack>
 8017b60:	e000      	b.n	8017b64 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b62:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d05b      	beq.n	8017c24 <tcp_receive+0x50c>
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b70:	4b60      	ldr	r3, [pc, #384]	@ (8017cf4 <tcp_receive+0x5dc>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	1ad3      	subs	r3, r2, r3
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	da54      	bge.n	8017c24 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8017cf8 <tcp_receive+0x5e0>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	1ad3      	subs	r3, r2, r3
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017b8e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b98:	10db      	asrs	r3, r3, #3
 8017b9a:	b21b      	sxth	r3, r3
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	1ad3      	subs	r3, r2, r3
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017bb2:	4413      	add	r3, r2
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	b21a      	sxth	r2, r3
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017bbc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	da05      	bge.n	8017bd0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017bc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017bc8:	425b      	negs	r3, r3
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017bd0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bda:	109b      	asrs	r3, r3, #2
 8017bdc:	b21b      	sxth	r3, r3
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	1ad3      	subs	r3, r2, r3
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017bf4:	4413      	add	r3, r2
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	b21a      	sxth	r2, r3
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017c04:	10db      	asrs	r3, r3, #3
 8017c06:	b21b      	sxth	r3, r3
 8017c08:	b29a      	uxth	r2, r3
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	4413      	add	r3, r2
 8017c14:	b29b      	uxth	r3, r3
 8017c16:	b21a      	sxth	r2, r3
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2200      	movs	r2, #0
 8017c22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017c24:	4b35      	ldr	r3, [pc, #212]	@ (8017cfc <tcp_receive+0x5e4>)
 8017c26:	881b      	ldrh	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	f000 84df 	beq.w	80185ec <tcp_receive+0xed4>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	7d1b      	ldrb	r3, [r3, #20]
 8017c32:	2b06      	cmp	r3, #6
 8017c34:	f200 84da 	bhi.w	80185ec <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c3c:	4b30      	ldr	r3, [pc, #192]	@ (8017d00 <tcp_receive+0x5e8>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	1ad3      	subs	r3, r2, r3
 8017c42:	3b01      	subs	r3, #1
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	f2c0 808f 	blt.w	8017d68 <tcp_receive+0x650>
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8017cfc <tcp_receive+0x5e4>)
 8017c50:	881b      	ldrh	r3, [r3, #0]
 8017c52:	4619      	mov	r1, r3
 8017c54:	4b2a      	ldr	r3, [pc, #168]	@ (8017d00 <tcp_receive+0x5e8>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	440b      	add	r3, r1
 8017c5a:	1ad3      	subs	r3, r2, r3
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f300 8082 	bgt.w	8017d68 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017c64:	4b27      	ldr	r3, [pc, #156]	@ (8017d04 <tcp_receive+0x5ec>)
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c6e:	4b24      	ldr	r3, [pc, #144]	@ (8017d00 <tcp_receive+0x5e8>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	1ad3      	subs	r3, r2, r3
 8017c74:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017c76:	4b23      	ldr	r3, [pc, #140]	@ (8017d04 <tcp_receive+0x5ec>)
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d106      	bne.n	8017c8c <tcp_receive+0x574>
 8017c7e:	4b22      	ldr	r3, [pc, #136]	@ (8017d08 <tcp_receive+0x5f0>)
 8017c80:	f240 5294 	movw	r2, #1428	@ 0x594
 8017c84:	4921      	ldr	r1, [pc, #132]	@ (8017d0c <tcp_receive+0x5f4>)
 8017c86:	4822      	ldr	r0, [pc, #136]	@ (8017d10 <tcp_receive+0x5f8>)
 8017c88:	f006 f9a2 	bl	801dfd0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c92:	4293      	cmp	r3, r2
 8017c94:	d906      	bls.n	8017ca4 <tcp_receive+0x58c>
 8017c96:	4b1c      	ldr	r3, [pc, #112]	@ (8017d08 <tcp_receive+0x5f0>)
 8017c98:	f240 5295 	movw	r2, #1429	@ 0x595
 8017c9c:	491d      	ldr	r1, [pc, #116]	@ (8017d14 <tcp_receive+0x5fc>)
 8017c9e:	481c      	ldr	r0, [pc, #112]	@ (8017d10 <tcp_receive+0x5f8>)
 8017ca0:	f006 f996 	bl	801dfd0 <iprintf>
      off = (u16_t)off32;
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ca6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017caa:	4b16      	ldr	r3, [pc, #88]	@ (8017d04 <tcp_receive+0x5ec>)
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	891b      	ldrh	r3, [r3, #8]
 8017cb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d906      	bls.n	8017cc6 <tcp_receive+0x5ae>
 8017cb8:	4b13      	ldr	r3, [pc, #76]	@ (8017d08 <tcp_receive+0x5f0>)
 8017cba:	f240 5297 	movw	r2, #1431	@ 0x597
 8017cbe:	4916      	ldr	r1, [pc, #88]	@ (8017d18 <tcp_receive+0x600>)
 8017cc0:	4813      	ldr	r0, [pc, #76]	@ (8017d10 <tcp_receive+0x5f8>)
 8017cc2:	f006 f985 	bl	801dfd0 <iprintf>
      inseg.len -= off;
 8017cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8017d04 <tcp_receive+0x5ec>)
 8017cc8:	891a      	ldrh	r2, [r3, #8]
 8017cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017cce:	1ad3      	subs	r3, r2, r3
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8017d04 <tcp_receive+0x5ec>)
 8017cd4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8017d04 <tcp_receive+0x5ec>)
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	891a      	ldrh	r2, [r3, #8]
 8017cdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ce0:	1ad3      	subs	r3, r2, r3
 8017ce2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017ce4:	e02a      	b.n	8017d3c <tcp_receive+0x624>
 8017ce6:	bf00      	nop
 8017ce8:	080207c8 	.word	0x080207c8
 8017cec:	080207d0 	.word	0x080207d0
 8017cf0:	200277f0 	.word	0x200277f0
 8017cf4:	200277ec 	.word	0x200277ec
 8017cf8:	200277b0 	.word	0x200277b0
 8017cfc:	200277f2 	.word	0x200277f2
 8017d00:	200277e8 	.word	0x200277e8
 8017d04:	200277c8 	.word	0x200277c8
 8017d08:	08020460 	.word	0x08020460
 8017d0c:	080207d8 	.word	0x080207d8
 8017d10:	080204ac 	.word	0x080204ac
 8017d14:	080207e8 	.word	0x080207e8
 8017d18:	080207f8 	.word	0x080207f8
        off -= p->len;
 8017d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d1e:	895b      	ldrh	r3, [r3, #10]
 8017d20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d2c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017d2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d32:	2200      	movs	r2, #0
 8017d34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d3e:	895b      	ldrh	r3, [r3, #10]
 8017d40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d8e9      	bhi.n	8017d1c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017d48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017d50:	f7fc fb5e 	bl	8014410 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d58:	4a90      	ldr	r2, [pc, #576]	@ (8017f9c <tcp_receive+0x884>)
 8017d5a:	6013      	str	r3, [r2, #0]
 8017d5c:	4b90      	ldr	r3, [pc, #576]	@ (8017fa0 <tcp_receive+0x888>)
 8017d5e:	68db      	ldr	r3, [r3, #12]
 8017d60:	4a8e      	ldr	r2, [pc, #568]	@ (8017f9c <tcp_receive+0x884>)
 8017d62:	6812      	ldr	r2, [r2, #0]
 8017d64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017d66:	e00d      	b.n	8017d84 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017d68:	4b8c      	ldr	r3, [pc, #560]	@ (8017f9c <tcp_receive+0x884>)
 8017d6a:	681a      	ldr	r2, [r3, #0]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d70:	1ad3      	subs	r3, r2, r3
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	da06      	bge.n	8017d84 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	8b5b      	ldrh	r3, [r3, #26]
 8017d7a:	f043 0302 	orr.w	r3, r3, #2
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d84:	4b85      	ldr	r3, [pc, #532]	@ (8017f9c <tcp_receive+0x884>)
 8017d86:	681a      	ldr	r2, [r3, #0]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d8c:	1ad3      	subs	r3, r2, r3
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f2c0 8427 	blt.w	80185e2 <tcp_receive+0xeca>
 8017d94:	4b81      	ldr	r3, [pc, #516]	@ (8017f9c <tcp_receive+0x884>)
 8017d96:	681a      	ldr	r2, [r3, #0]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d9c:	6879      	ldr	r1, [r7, #4]
 8017d9e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017da0:	440b      	add	r3, r1
 8017da2:	1ad3      	subs	r3, r2, r3
 8017da4:	3301      	adds	r3, #1
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	f300 841b 	bgt.w	80185e2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017db0:	4b7a      	ldr	r3, [pc, #488]	@ (8017f9c <tcp_receive+0x884>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	f040 8298 	bne.w	80182ea <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017dba:	4b79      	ldr	r3, [pc, #484]	@ (8017fa0 <tcp_receive+0x888>)
 8017dbc:	891c      	ldrh	r4, [r3, #8]
 8017dbe:	4b78      	ldr	r3, [pc, #480]	@ (8017fa0 <tcp_receive+0x888>)
 8017dc0:	68db      	ldr	r3, [r3, #12]
 8017dc2:	899b      	ldrh	r3, [r3, #12]
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f7fa ffba 	bl	8012d40 <lwip_htons>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	b2db      	uxtb	r3, r3
 8017dd0:	f003 0303 	and.w	r3, r3, #3
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d001      	beq.n	8017ddc <tcp_receive+0x6c4>
 8017dd8:	2301      	movs	r3, #1
 8017dda:	e000      	b.n	8017dde <tcp_receive+0x6c6>
 8017ddc:	2300      	movs	r3, #0
 8017dde:	4423      	add	r3, r4
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	4b70      	ldr	r3, [pc, #448]	@ (8017fa4 <tcp_receive+0x88c>)
 8017de4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017dea:	4b6e      	ldr	r3, [pc, #440]	@ (8017fa4 <tcp_receive+0x88c>)
 8017dec:	881b      	ldrh	r3, [r3, #0]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d274      	bcs.n	8017edc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017df2:	4b6b      	ldr	r3, [pc, #428]	@ (8017fa0 <tcp_receive+0x888>)
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	899b      	ldrh	r3, [r3, #12]
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7fa ffa0 	bl	8012d40 <lwip_htons>
 8017e00:	4603      	mov	r3, r0
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	f003 0301 	and.w	r3, r3, #1
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d01e      	beq.n	8017e4a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017e0c:	4b64      	ldr	r3, [pc, #400]	@ (8017fa0 <tcp_receive+0x888>)
 8017e0e:	68db      	ldr	r3, [r3, #12]
 8017e10:	899b      	ldrh	r3, [r3, #12]
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	b21b      	sxth	r3, r3
 8017e16:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017e1a:	b21c      	sxth	r4, r3
 8017e1c:	4b60      	ldr	r3, [pc, #384]	@ (8017fa0 <tcp_receive+0x888>)
 8017e1e:	68db      	ldr	r3, [r3, #12]
 8017e20:	899b      	ldrh	r3, [r3, #12]
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	4618      	mov	r0, r3
 8017e26:	f7fa ff8b 	bl	8012d40 <lwip_htons>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7fa ff83 	bl	8012d40 <lwip_htons>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	b21b      	sxth	r3, r3
 8017e3e:	4323      	orrs	r3, r4
 8017e40:	b21a      	sxth	r2, r3
 8017e42:	4b57      	ldr	r3, [pc, #348]	@ (8017fa0 <tcp_receive+0x888>)
 8017e44:	68db      	ldr	r3, [r3, #12]
 8017e46:	b292      	uxth	r2, r2
 8017e48:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017e4e:	4b54      	ldr	r3, [pc, #336]	@ (8017fa0 <tcp_receive+0x888>)
 8017e50:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017e52:	4b53      	ldr	r3, [pc, #332]	@ (8017fa0 <tcp_receive+0x888>)
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	899b      	ldrh	r3, [r3, #12]
 8017e58:	b29b      	uxth	r3, r3
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7fa ff70 	bl	8012d40 <lwip_htons>
 8017e60:	4603      	mov	r3, r0
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	f003 0302 	and.w	r3, r3, #2
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d005      	beq.n	8017e78 <tcp_receive+0x760>
            inseg.len -= 1;
 8017e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8017fa0 <tcp_receive+0x888>)
 8017e6e:	891b      	ldrh	r3, [r3, #8]
 8017e70:	3b01      	subs	r3, #1
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	4b4a      	ldr	r3, [pc, #296]	@ (8017fa0 <tcp_receive+0x888>)
 8017e76:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017e78:	4b49      	ldr	r3, [pc, #292]	@ (8017fa0 <tcp_receive+0x888>)
 8017e7a:	685b      	ldr	r3, [r3, #4]
 8017e7c:	4a48      	ldr	r2, [pc, #288]	@ (8017fa0 <tcp_receive+0x888>)
 8017e7e:	8912      	ldrh	r2, [r2, #8]
 8017e80:	4611      	mov	r1, r2
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fc f9c4 	bl	8014210 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017e88:	4b45      	ldr	r3, [pc, #276]	@ (8017fa0 <tcp_receive+0x888>)
 8017e8a:	891c      	ldrh	r4, [r3, #8]
 8017e8c:	4b44      	ldr	r3, [pc, #272]	@ (8017fa0 <tcp_receive+0x888>)
 8017e8e:	68db      	ldr	r3, [r3, #12]
 8017e90:	899b      	ldrh	r3, [r3, #12]
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7fa ff53 	bl	8012d40 <lwip_htons>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	f003 0303 	and.w	r3, r3, #3
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d001      	beq.n	8017eaa <tcp_receive+0x792>
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	e000      	b.n	8017eac <tcp_receive+0x794>
 8017eaa:	2300      	movs	r3, #0
 8017eac:	4423      	add	r3, r4
 8017eae:	b29a      	uxth	r2, r3
 8017eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8017fa4 <tcp_receive+0x88c>)
 8017eb2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa4 <tcp_receive+0x88c>)
 8017eb6:	881b      	ldrh	r3, [r3, #0]
 8017eb8:	461a      	mov	r2, r3
 8017eba:	4b38      	ldr	r3, [pc, #224]	@ (8017f9c <tcp_receive+0x884>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	441a      	add	r2, r3
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ec4:	6879      	ldr	r1, [r7, #4]
 8017ec6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017ec8:	440b      	add	r3, r1
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d006      	beq.n	8017edc <tcp_receive+0x7c4>
 8017ece:	4b36      	ldr	r3, [pc, #216]	@ (8017fa8 <tcp_receive+0x890>)
 8017ed0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017ed4:	4935      	ldr	r1, [pc, #212]	@ (8017fac <tcp_receive+0x894>)
 8017ed6:	4836      	ldr	r0, [pc, #216]	@ (8017fb0 <tcp_receive+0x898>)
 8017ed8:	f006 f87a 	bl	801dfd0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f000 80e6 	beq.w	80180b2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8017fa0 <tcp_receive+0x888>)
 8017ee8:	68db      	ldr	r3, [r3, #12]
 8017eea:	899b      	ldrh	r3, [r3, #12]
 8017eec:	b29b      	uxth	r3, r3
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7fa ff26 	bl	8012d40 <lwip_htons>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	f003 0301 	and.w	r3, r3, #1
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d010      	beq.n	8017f22 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017f00:	e00a      	b.n	8017f18 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f06:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f7fd fd93 	bl	8015a3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d1f0      	bne.n	8017f02 <tcp_receive+0x7ea>
 8017f20:	e0c7      	b.n	80180b2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017f28:	e051      	b.n	8017fce <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f2c:	68db      	ldr	r3, [r3, #12]
 8017f2e:	899b      	ldrh	r3, [r3, #12]
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7fa ff04 	bl	8012d40 <lwip_htons>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	f003 0301 	and.w	r3, r3, #1
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d03c      	beq.n	8017fbe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017f44:	4b16      	ldr	r3, [pc, #88]	@ (8017fa0 <tcp_receive+0x888>)
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	899b      	ldrh	r3, [r3, #12]
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f7fa fef7 	bl	8012d40 <lwip_htons>
 8017f52:	4603      	mov	r3, r0
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d12f      	bne.n	8017fbe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017f5e:	4b10      	ldr	r3, [pc, #64]	@ (8017fa0 <tcp_receive+0x888>)
 8017f60:	68db      	ldr	r3, [r3, #12]
 8017f62:	899b      	ldrh	r3, [r3, #12]
 8017f64:	b29c      	uxth	r4, r3
 8017f66:	2001      	movs	r0, #1
 8017f68:	f7fa feea 	bl	8012d40 <lwip_htons>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	461a      	mov	r2, r3
 8017f70:	4b0b      	ldr	r3, [pc, #44]	@ (8017fa0 <tcp_receive+0x888>)
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	4322      	orrs	r2, r4
 8017f76:	b292      	uxth	r2, r2
 8017f78:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017f7a:	4b09      	ldr	r3, [pc, #36]	@ (8017fa0 <tcp_receive+0x888>)
 8017f7c:	891c      	ldrh	r4, [r3, #8]
 8017f7e:	4b08      	ldr	r3, [pc, #32]	@ (8017fa0 <tcp_receive+0x888>)
 8017f80:	68db      	ldr	r3, [r3, #12]
 8017f82:	899b      	ldrh	r3, [r3, #12]
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7fa feda 	bl	8012d40 <lwip_htons>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	f003 0303 	and.w	r3, r3, #3
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d00d      	beq.n	8017fb4 <tcp_receive+0x89c>
 8017f98:	2301      	movs	r3, #1
 8017f9a:	e00c      	b.n	8017fb6 <tcp_receive+0x89e>
 8017f9c:	200277e8 	.word	0x200277e8
 8017fa0:	200277c8 	.word	0x200277c8
 8017fa4:	200277f2 	.word	0x200277f2
 8017fa8:	08020460 	.word	0x08020460
 8017fac:	08020808 	.word	0x08020808
 8017fb0:	080204ac 	.word	0x080204ac
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	4423      	add	r3, r4
 8017fb8:	b29a      	uxth	r2, r3
 8017fba:	4b98      	ldr	r3, [pc, #608]	@ (801821c <tcp_receive+0xb04>)
 8017fbc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fc0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017fc8:	6938      	ldr	r0, [r7, #16]
 8017fca:	f7fd fd38 	bl	8015a3e <tcp_seg_free>
            while (next &&
 8017fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d00e      	beq.n	8017ff2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017fd4:	4b91      	ldr	r3, [pc, #580]	@ (801821c <tcp_receive+0xb04>)
 8017fd6:	881b      	ldrh	r3, [r3, #0]
 8017fd8:	461a      	mov	r2, r3
 8017fda:	4b91      	ldr	r3, [pc, #580]	@ (8018220 <tcp_receive+0xb08>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	441a      	add	r2, r3
 8017fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	685b      	ldr	r3, [r3, #4]
 8017fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017fe8:	8909      	ldrh	r1, [r1, #8]
 8017fea:	440b      	add	r3, r1
 8017fec:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	da9b      	bge.n	8017f2a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d059      	beq.n	80180ac <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017ff8:	4b88      	ldr	r3, [pc, #544]	@ (801821c <tcp_receive+0xb04>)
 8017ffa:	881b      	ldrh	r3, [r3, #0]
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	4b88      	ldr	r3, [pc, #544]	@ (8018220 <tcp_receive+0xb08>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	441a      	add	r2, r3
 8018004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018006:	68db      	ldr	r3, [r3, #12]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801800c:	2b00      	cmp	r3, #0
 801800e:	dd4d      	ble.n	80180ac <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	b29a      	uxth	r2, r3
 8018018:	4b81      	ldr	r3, [pc, #516]	@ (8018220 <tcp_receive+0xb08>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	b29b      	uxth	r3, r3
 801801e:	1ad3      	subs	r3, r2, r3
 8018020:	b29a      	uxth	r2, r3
 8018022:	4b80      	ldr	r3, [pc, #512]	@ (8018224 <tcp_receive+0xb0c>)
 8018024:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018026:	4b7f      	ldr	r3, [pc, #508]	@ (8018224 <tcp_receive+0xb0c>)
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	899b      	ldrh	r3, [r3, #12]
 801802c:	b29b      	uxth	r3, r3
 801802e:	4618      	mov	r0, r3
 8018030:	f7fa fe86 	bl	8012d40 <lwip_htons>
 8018034:	4603      	mov	r3, r0
 8018036:	b2db      	uxtb	r3, r3
 8018038:	f003 0302 	and.w	r3, r3, #2
 801803c:	2b00      	cmp	r3, #0
 801803e:	d005      	beq.n	801804c <tcp_receive+0x934>
                inseg.len -= 1;
 8018040:	4b78      	ldr	r3, [pc, #480]	@ (8018224 <tcp_receive+0xb0c>)
 8018042:	891b      	ldrh	r3, [r3, #8]
 8018044:	3b01      	subs	r3, #1
 8018046:	b29a      	uxth	r2, r3
 8018048:	4b76      	ldr	r3, [pc, #472]	@ (8018224 <tcp_receive+0xb0c>)
 801804a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801804c:	4b75      	ldr	r3, [pc, #468]	@ (8018224 <tcp_receive+0xb0c>)
 801804e:	685b      	ldr	r3, [r3, #4]
 8018050:	4a74      	ldr	r2, [pc, #464]	@ (8018224 <tcp_receive+0xb0c>)
 8018052:	8912      	ldrh	r2, [r2, #8]
 8018054:	4611      	mov	r1, r2
 8018056:	4618      	mov	r0, r3
 8018058:	f7fc f8da 	bl	8014210 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801805c:	4b71      	ldr	r3, [pc, #452]	@ (8018224 <tcp_receive+0xb0c>)
 801805e:	891c      	ldrh	r4, [r3, #8]
 8018060:	4b70      	ldr	r3, [pc, #448]	@ (8018224 <tcp_receive+0xb0c>)
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	899b      	ldrh	r3, [r3, #12]
 8018066:	b29b      	uxth	r3, r3
 8018068:	4618      	mov	r0, r3
 801806a:	f7fa fe69 	bl	8012d40 <lwip_htons>
 801806e:	4603      	mov	r3, r0
 8018070:	b2db      	uxtb	r3, r3
 8018072:	f003 0303 	and.w	r3, r3, #3
 8018076:	2b00      	cmp	r3, #0
 8018078:	d001      	beq.n	801807e <tcp_receive+0x966>
 801807a:	2301      	movs	r3, #1
 801807c:	e000      	b.n	8018080 <tcp_receive+0x968>
 801807e:	2300      	movs	r3, #0
 8018080:	4423      	add	r3, r4
 8018082:	b29a      	uxth	r2, r3
 8018084:	4b65      	ldr	r3, [pc, #404]	@ (801821c <tcp_receive+0xb04>)
 8018086:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018088:	4b64      	ldr	r3, [pc, #400]	@ (801821c <tcp_receive+0xb04>)
 801808a:	881b      	ldrh	r3, [r3, #0]
 801808c:	461a      	mov	r2, r3
 801808e:	4b64      	ldr	r3, [pc, #400]	@ (8018220 <tcp_receive+0xb08>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	441a      	add	r2, r3
 8018094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018096:	68db      	ldr	r3, [r3, #12]
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	429a      	cmp	r2, r3
 801809c:	d006      	beq.n	80180ac <tcp_receive+0x994>
 801809e:	4b62      	ldr	r3, [pc, #392]	@ (8018228 <tcp_receive+0xb10>)
 80180a0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80180a4:	4961      	ldr	r1, [pc, #388]	@ (801822c <tcp_receive+0xb14>)
 80180a6:	4862      	ldr	r0, [pc, #392]	@ (8018230 <tcp_receive+0xb18>)
 80180a8:	f005 ff92 	bl	801dfd0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80180b0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80180b2:	4b5a      	ldr	r3, [pc, #360]	@ (801821c <tcp_receive+0xb04>)
 80180b4:	881b      	ldrh	r3, [r3, #0]
 80180b6:	461a      	mov	r2, r3
 80180b8:	4b59      	ldr	r3, [pc, #356]	@ (8018220 <tcp_receive+0xb08>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	441a      	add	r2, r3
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180c6:	4b55      	ldr	r3, [pc, #340]	@ (801821c <tcp_receive+0xb04>)
 80180c8:	881b      	ldrh	r3, [r3, #0]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d206      	bcs.n	80180dc <tcp_receive+0x9c4>
 80180ce:	4b56      	ldr	r3, [pc, #344]	@ (8018228 <tcp_receive+0xb10>)
 80180d0:	f240 6207 	movw	r2, #1543	@ 0x607
 80180d4:	4957      	ldr	r1, [pc, #348]	@ (8018234 <tcp_receive+0xb1c>)
 80180d6:	4856      	ldr	r0, [pc, #344]	@ (8018230 <tcp_receive+0xb18>)
 80180d8:	f005 ff7a 	bl	801dfd0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180e0:	4b4e      	ldr	r3, [pc, #312]	@ (801821c <tcp_receive+0xb04>)
 80180e2:	881b      	ldrh	r3, [r3, #0]
 80180e4:	1ad3      	subs	r3, r2, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	f7fc ffc5 	bl	801507c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80180f2:	4b4c      	ldr	r3, [pc, #304]	@ (8018224 <tcp_receive+0xb0c>)
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	891b      	ldrh	r3, [r3, #8]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d006      	beq.n	801810a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80180fc:	4b49      	ldr	r3, [pc, #292]	@ (8018224 <tcp_receive+0xb0c>)
 80180fe:	685b      	ldr	r3, [r3, #4]
 8018100:	4a4d      	ldr	r2, [pc, #308]	@ (8018238 <tcp_receive+0xb20>)
 8018102:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018104:	4b47      	ldr	r3, [pc, #284]	@ (8018224 <tcp_receive+0xb0c>)
 8018106:	2200      	movs	r2, #0
 8018108:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801810a:	4b46      	ldr	r3, [pc, #280]	@ (8018224 <tcp_receive+0xb0c>)
 801810c:	68db      	ldr	r3, [r3, #12]
 801810e:	899b      	ldrh	r3, [r3, #12]
 8018110:	b29b      	uxth	r3, r3
 8018112:	4618      	mov	r0, r3
 8018114:	f7fa fe14 	bl	8012d40 <lwip_htons>
 8018118:	4603      	mov	r3, r0
 801811a:	b2db      	uxtb	r3, r3
 801811c:	f003 0301 	and.w	r3, r3, #1
 8018120:	2b00      	cmp	r3, #0
 8018122:	f000 80b8 	beq.w	8018296 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018126:	4b45      	ldr	r3, [pc, #276]	@ (801823c <tcp_receive+0xb24>)
 8018128:	781b      	ldrb	r3, [r3, #0]
 801812a:	f043 0320 	orr.w	r3, r3, #32
 801812e:	b2da      	uxtb	r2, r3
 8018130:	4b42      	ldr	r3, [pc, #264]	@ (801823c <tcp_receive+0xb24>)
 8018132:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018134:	e0af      	b.n	8018296 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801813a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018140:	68db      	ldr	r3, [r3, #12]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	4a36      	ldr	r2, [pc, #216]	@ (8018220 <tcp_receive+0xb08>)
 8018146:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	891b      	ldrh	r3, [r3, #8]
 801814c:	461c      	mov	r4, r3
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	68db      	ldr	r3, [r3, #12]
 8018152:	899b      	ldrh	r3, [r3, #12]
 8018154:	b29b      	uxth	r3, r3
 8018156:	4618      	mov	r0, r3
 8018158:	f7fa fdf2 	bl	8012d40 <lwip_htons>
 801815c:	4603      	mov	r3, r0
 801815e:	b2db      	uxtb	r3, r3
 8018160:	f003 0303 	and.w	r3, r3, #3
 8018164:	2b00      	cmp	r3, #0
 8018166:	d001      	beq.n	801816c <tcp_receive+0xa54>
 8018168:	2301      	movs	r3, #1
 801816a:	e000      	b.n	801816e <tcp_receive+0xa56>
 801816c:	2300      	movs	r3, #0
 801816e:	191a      	adds	r2, r3, r4
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018174:	441a      	add	r2, r3
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801817e:	461c      	mov	r4, r3
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	891b      	ldrh	r3, [r3, #8]
 8018184:	461d      	mov	r5, r3
 8018186:	68bb      	ldr	r3, [r7, #8]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	899b      	ldrh	r3, [r3, #12]
 801818c:	b29b      	uxth	r3, r3
 801818e:	4618      	mov	r0, r3
 8018190:	f7fa fdd6 	bl	8012d40 <lwip_htons>
 8018194:	4603      	mov	r3, r0
 8018196:	b2db      	uxtb	r3, r3
 8018198:	f003 0303 	and.w	r3, r3, #3
 801819c:	2b00      	cmp	r3, #0
 801819e:	d001      	beq.n	80181a4 <tcp_receive+0xa8c>
 80181a0:	2301      	movs	r3, #1
 80181a2:	e000      	b.n	80181a6 <tcp_receive+0xa8e>
 80181a4:	2300      	movs	r3, #0
 80181a6:	442b      	add	r3, r5
 80181a8:	429c      	cmp	r4, r3
 80181aa:	d206      	bcs.n	80181ba <tcp_receive+0xaa2>
 80181ac:	4b1e      	ldr	r3, [pc, #120]	@ (8018228 <tcp_receive+0xb10>)
 80181ae:	f240 622b 	movw	r2, #1579	@ 0x62b
 80181b2:	4923      	ldr	r1, [pc, #140]	@ (8018240 <tcp_receive+0xb28>)
 80181b4:	481e      	ldr	r0, [pc, #120]	@ (8018230 <tcp_receive+0xb18>)
 80181b6:	f005 ff0b 	bl	801dfd0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	891b      	ldrh	r3, [r3, #8]
 80181be:	461c      	mov	r4, r3
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	899b      	ldrh	r3, [r3, #12]
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7fa fdb9 	bl	8012d40 <lwip_htons>
 80181ce:	4603      	mov	r3, r0
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	f003 0303 	and.w	r3, r3, #3
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <tcp_receive+0xac6>
 80181da:	2301      	movs	r3, #1
 80181dc:	e000      	b.n	80181e0 <tcp_receive+0xac8>
 80181de:	2300      	movs	r3, #0
 80181e0:	1919      	adds	r1, r3, r4
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80181e6:	b28b      	uxth	r3, r1
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	b29a      	uxth	r2, r3
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80181f0:	6878      	ldr	r0, [r7, #4]
 80181f2:	f7fc ff43 	bl	801507c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	891b      	ldrh	r3, [r3, #8]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d028      	beq.n	8018252 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018200:	4b0d      	ldr	r3, [pc, #52]	@ (8018238 <tcp_receive+0xb20>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d01d      	beq.n	8018244 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018208:	4b0b      	ldr	r3, [pc, #44]	@ (8018238 <tcp_receive+0xb20>)
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	4619      	mov	r1, r3
 8018212:	4610      	mov	r0, r2
 8018214:	f7fc fa50 	bl	80146b8 <pbuf_cat>
 8018218:	e018      	b.n	801824c <tcp_receive+0xb34>
 801821a:	bf00      	nop
 801821c:	200277f2 	.word	0x200277f2
 8018220:	200277e8 	.word	0x200277e8
 8018224:	200277c8 	.word	0x200277c8
 8018228:	08020460 	.word	0x08020460
 801822c:	08020840 	.word	0x08020840
 8018230:	080204ac 	.word	0x080204ac
 8018234:	0802087c 	.word	0x0802087c
 8018238:	200277f8 	.word	0x200277f8
 801823c:	200277f5 	.word	0x200277f5
 8018240:	0802089c 	.word	0x0802089c
            } else {
              recv_data = cseg->p;
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	685b      	ldr	r3, [r3, #4]
 8018248:	4a70      	ldr	r2, [pc, #448]	@ (801840c <tcp_receive+0xcf4>)
 801824a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	2200      	movs	r2, #0
 8018250:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	899b      	ldrh	r3, [r3, #12]
 8018258:	b29b      	uxth	r3, r3
 801825a:	4618      	mov	r0, r3
 801825c:	f7fa fd70 	bl	8012d40 <lwip_htons>
 8018260:	4603      	mov	r3, r0
 8018262:	b2db      	uxtb	r3, r3
 8018264:	f003 0301 	and.w	r3, r3, #1
 8018268:	2b00      	cmp	r3, #0
 801826a:	d00d      	beq.n	8018288 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801826c:	4b68      	ldr	r3, [pc, #416]	@ (8018410 <tcp_receive+0xcf8>)
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	f043 0320 	orr.w	r3, r3, #32
 8018274:	b2da      	uxtb	r2, r3
 8018276:	4b66      	ldr	r3, [pc, #408]	@ (8018410 <tcp_receive+0xcf8>)
 8018278:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	7d1b      	ldrb	r3, [r3, #20]
 801827e:	2b04      	cmp	r3, #4
 8018280:	d102      	bne.n	8018288 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2207      	movs	r2, #7
 8018286:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018290:	68b8      	ldr	r0, [r7, #8]
 8018292:	f7fd fbd4 	bl	8015a3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801829a:	2b00      	cmp	r3, #0
 801829c:	d008      	beq.n	80182b0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182a2:	68db      	ldr	r3, [r3, #12]
 80182a4:	685a      	ldr	r2, [r3, #4]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80182aa:	429a      	cmp	r2, r3
 80182ac:	f43f af43 	beq.w	8018136 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	8b5b      	ldrh	r3, [r3, #26]
 80182b4:	f003 0301 	and.w	r3, r3, #1
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d00e      	beq.n	80182da <tcp_receive+0xbc2>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	8b5b      	ldrh	r3, [r3, #26]
 80182c0:	f023 0301 	bic.w	r3, r3, #1
 80182c4:	b29a      	uxth	r2, r3
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	835a      	strh	r2, [r3, #26]
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	8b5b      	ldrh	r3, [r3, #26]
 80182ce:	f043 0302 	orr.w	r3, r3, #2
 80182d2:	b29a      	uxth	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80182d8:	e187      	b.n	80185ea <tcp_receive+0xed2>
        tcp_ack(pcb);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	8b5b      	ldrh	r3, [r3, #26]
 80182de:	f043 0301 	orr.w	r3, r3, #1
 80182e2:	b29a      	uxth	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80182e8:	e17f      	b.n	80185ea <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d106      	bne.n	8018300 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80182f2:	4848      	ldr	r0, [pc, #288]	@ (8018414 <tcp_receive+0xcfc>)
 80182f4:	f7fd fbbc 	bl	8015a70 <tcp_seg_copy>
 80182f8:	4602      	mov	r2, r0
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80182fe:	e16c      	b.n	80185da <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018300:	2300      	movs	r3, #0
 8018302:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018308:	63bb      	str	r3, [r7, #56]	@ 0x38
 801830a:	e156      	b.n	80185ba <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801830e:	68db      	ldr	r3, [r3, #12]
 8018310:	685a      	ldr	r2, [r3, #4]
 8018312:	4b41      	ldr	r3, [pc, #260]	@ (8018418 <tcp_receive+0xd00>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	429a      	cmp	r2, r3
 8018318:	d11d      	bne.n	8018356 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801831a:	4b3e      	ldr	r3, [pc, #248]	@ (8018414 <tcp_receive+0xcfc>)
 801831c:	891a      	ldrh	r2, [r3, #8]
 801831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018320:	891b      	ldrh	r3, [r3, #8]
 8018322:	429a      	cmp	r2, r3
 8018324:	f240 814e 	bls.w	80185c4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018328:	483a      	ldr	r0, [pc, #232]	@ (8018414 <tcp_receive+0xcfc>)
 801832a:	f7fd fba1 	bl	8015a70 <tcp_seg_copy>
 801832e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 8148 	beq.w	80185c8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801833a:	2b00      	cmp	r3, #0
 801833c:	d003      	beq.n	8018346 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801833e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018340:	697a      	ldr	r2, [r7, #20]
 8018342:	601a      	str	r2, [r3, #0]
 8018344:	e002      	b.n	801834c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	697a      	ldr	r2, [r7, #20]
 801834a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801834c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801834e:	6978      	ldr	r0, [r7, #20]
 8018350:	f7ff f8de 	bl	8017510 <tcp_oos_insert_segment>
                }
                break;
 8018354:	e138      	b.n	80185c8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018358:	2b00      	cmp	r3, #0
 801835a:	d117      	bne.n	801838c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801835c:	4b2e      	ldr	r3, [pc, #184]	@ (8018418 <tcp_receive+0xd00>)
 801835e:	681a      	ldr	r2, [r3, #0]
 8018360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	2b00      	cmp	r3, #0
 801836a:	da57      	bge.n	801841c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801836c:	4829      	ldr	r0, [pc, #164]	@ (8018414 <tcp_receive+0xcfc>)
 801836e:	f7fd fb7f 	bl	8015a70 <tcp_seg_copy>
 8018372:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018374:	69bb      	ldr	r3, [r7, #24]
 8018376:	2b00      	cmp	r3, #0
 8018378:	f000 8128 	beq.w	80185cc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	69ba      	ldr	r2, [r7, #24]
 8018380:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018382:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018384:	69b8      	ldr	r0, [r7, #24]
 8018386:	f7ff f8c3 	bl	8017510 <tcp_oos_insert_segment>
                  }
                  break;
 801838a:	e11f      	b.n	80185cc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801838c:	4b22      	ldr	r3, [pc, #136]	@ (8018418 <tcp_receive+0xd00>)
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018392:	68db      	ldr	r3, [r3, #12]
 8018394:	685b      	ldr	r3, [r3, #4]
 8018396:	1ad3      	subs	r3, r2, r3
 8018398:	3b01      	subs	r3, #1
 801839a:	2b00      	cmp	r3, #0
 801839c:	db3e      	blt.n	801841c <tcp_receive+0xd04>
 801839e:	4b1e      	ldr	r3, [pc, #120]	@ (8018418 <tcp_receive+0xd00>)
 80183a0:	681a      	ldr	r2, [r3, #0]
 80183a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	1ad3      	subs	r3, r2, r3
 80183aa:	3301      	adds	r3, #1
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	dc35      	bgt.n	801841c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80183b0:	4818      	ldr	r0, [pc, #96]	@ (8018414 <tcp_receive+0xcfc>)
 80183b2:	f7fd fb5d 	bl	8015a70 <tcp_seg_copy>
 80183b6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80183b8:	69fb      	ldr	r3, [r7, #28]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	f000 8108 	beq.w	80185d0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80183c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183c2:	68db      	ldr	r3, [r3, #12]
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80183c8:	8912      	ldrh	r2, [r2, #8]
 80183ca:	441a      	add	r2, r3
 80183cc:	4b12      	ldr	r3, [pc, #72]	@ (8018418 <tcp_receive+0xd00>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	1ad3      	subs	r3, r2, r3
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	dd12      	ble.n	80183fc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80183d6:	4b10      	ldr	r3, [pc, #64]	@ (8018418 <tcp_receive+0xd00>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	b29a      	uxth	r2, r3
 80183dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183de:	68db      	ldr	r3, [r3, #12]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	1ad3      	subs	r3, r2, r3
 80183e6:	b29a      	uxth	r2, r3
 80183e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80183ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183ee:	685a      	ldr	r2, [r3, #4]
 80183f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183f2:	891b      	ldrh	r3, [r3, #8]
 80183f4:	4619      	mov	r1, r3
 80183f6:	4610      	mov	r0, r2
 80183f8:	f7fb ff0a 	bl	8014210 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80183fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183fe:	69fa      	ldr	r2, [r7, #28]
 8018400:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018402:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018404:	69f8      	ldr	r0, [r7, #28]
 8018406:	f7ff f883 	bl	8017510 <tcp_oos_insert_segment>
                  }
                  break;
 801840a:	e0e1      	b.n	80185d0 <tcp_receive+0xeb8>
 801840c:	200277f8 	.word	0x200277f8
 8018410:	200277f5 	.word	0x200277f5
 8018414:	200277c8 	.word	0x200277c8
 8018418:	200277e8 	.word	0x200277e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801841e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	2b00      	cmp	r3, #0
 8018426:	f040 80c5 	bne.w	80185b4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801842a:	4b7f      	ldr	r3, [pc, #508]	@ (8018628 <tcp_receive+0xf10>)
 801842c:	681a      	ldr	r2, [r3, #0]
 801842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018430:	68db      	ldr	r3, [r3, #12]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018436:	2b00      	cmp	r3, #0
 8018438:	f340 80bc 	ble.w	80185b4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801843e:	68db      	ldr	r3, [r3, #12]
 8018440:	899b      	ldrh	r3, [r3, #12]
 8018442:	b29b      	uxth	r3, r3
 8018444:	4618      	mov	r0, r3
 8018446:	f7fa fc7b 	bl	8012d40 <lwip_htons>
 801844a:	4603      	mov	r3, r0
 801844c:	b2db      	uxtb	r3, r3
 801844e:	f003 0301 	and.w	r3, r3, #1
 8018452:	2b00      	cmp	r3, #0
 8018454:	f040 80be 	bne.w	80185d4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018458:	4874      	ldr	r0, [pc, #464]	@ (801862c <tcp_receive+0xf14>)
 801845a:	f7fd fb09 	bl	8015a70 <tcp_seg_copy>
 801845e:	4602      	mov	r2, r0
 8018460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018462:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2b00      	cmp	r3, #0
 801846a:	f000 80b5 	beq.w	80185d8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018470:	68db      	ldr	r3, [r3, #12]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018476:	8912      	ldrh	r2, [r2, #8]
 8018478:	441a      	add	r2, r3
 801847a:	4b6b      	ldr	r3, [pc, #428]	@ (8018628 <tcp_receive+0xf10>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	1ad3      	subs	r3, r2, r3
 8018480:	2b00      	cmp	r3, #0
 8018482:	dd12      	ble.n	80184aa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018484:	4b68      	ldr	r3, [pc, #416]	@ (8018628 <tcp_receive+0xf10>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	b29a      	uxth	r2, r3
 801848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801848c:	68db      	ldr	r3, [r3, #12]
 801848e:	685b      	ldr	r3, [r3, #4]
 8018490:	b29b      	uxth	r3, r3
 8018492:	1ad3      	subs	r3, r2, r3
 8018494:	b29a      	uxth	r2, r3
 8018496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018498:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801849a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801849c:	685a      	ldr	r2, [r3, #4]
 801849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184a0:	891b      	ldrh	r3, [r3, #8]
 80184a2:	4619      	mov	r1, r3
 80184a4:	4610      	mov	r0, r2
 80184a6:	f7fb feb3 	bl	8014210 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80184aa:	4b61      	ldr	r3, [pc, #388]	@ (8018630 <tcp_receive+0xf18>)
 80184ac:	881b      	ldrh	r3, [r3, #0]
 80184ae:	461a      	mov	r2, r3
 80184b0:	4b5d      	ldr	r3, [pc, #372]	@ (8018628 <tcp_receive+0xf10>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	441a      	add	r2, r3
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184ba:	6879      	ldr	r1, [r7, #4]
 80184bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80184be:	440b      	add	r3, r1
 80184c0:	1ad3      	subs	r3, r2, r3
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	f340 8088 	ble.w	80185d8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80184c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	899b      	ldrh	r3, [r3, #12]
 80184d0:	b29b      	uxth	r3, r3
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7fa fc34 	bl	8012d40 <lwip_htons>
 80184d8:	4603      	mov	r3, r0
 80184da:	b2db      	uxtb	r3, r3
 80184dc:	f003 0301 	and.w	r3, r3, #1
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d021      	beq.n	8018528 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80184e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	68db      	ldr	r3, [r3, #12]
 80184ea:	899b      	ldrh	r3, [r3, #12]
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	b21b      	sxth	r3, r3
 80184f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80184f4:	b21c      	sxth	r4, r3
 80184f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	68db      	ldr	r3, [r3, #12]
 80184fc:	899b      	ldrh	r3, [r3, #12]
 80184fe:	b29b      	uxth	r3, r3
 8018500:	4618      	mov	r0, r3
 8018502:	f7fa fc1d 	bl	8012d40 <lwip_htons>
 8018506:	4603      	mov	r3, r0
 8018508:	b2db      	uxtb	r3, r3
 801850a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801850e:	b29b      	uxth	r3, r3
 8018510:	4618      	mov	r0, r3
 8018512:	f7fa fc15 	bl	8012d40 <lwip_htons>
 8018516:	4603      	mov	r3, r0
 8018518:	b21b      	sxth	r3, r3
 801851a:	4323      	orrs	r3, r4
 801851c:	b21a      	sxth	r2, r3
 801851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	b292      	uxth	r2, r2
 8018526:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801852c:	b29a      	uxth	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018532:	4413      	add	r3, r2
 8018534:	b299      	uxth	r1, r3
 8018536:	4b3c      	ldr	r3, [pc, #240]	@ (8018628 <tcp_receive+0xf10>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	b29a      	uxth	r2, r3
 801853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	1a8a      	subs	r2, r1, r2
 8018542:	b292      	uxth	r2, r2
 8018544:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	685a      	ldr	r2, [r3, #4]
 801854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	891b      	ldrh	r3, [r3, #8]
 8018552:	4619      	mov	r1, r3
 8018554:	4610      	mov	r0, r2
 8018556:	f7fb fe5b 	bl	8014210 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	891c      	ldrh	r4, [r3, #8]
 8018560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	899b      	ldrh	r3, [r3, #12]
 8018568:	b29b      	uxth	r3, r3
 801856a:	4618      	mov	r0, r3
 801856c:	f7fa fbe8 	bl	8012d40 <lwip_htons>
 8018570:	4603      	mov	r3, r0
 8018572:	b2db      	uxtb	r3, r3
 8018574:	f003 0303 	and.w	r3, r3, #3
 8018578:	2b00      	cmp	r3, #0
 801857a:	d001      	beq.n	8018580 <tcp_receive+0xe68>
 801857c:	2301      	movs	r3, #1
 801857e:	e000      	b.n	8018582 <tcp_receive+0xe6a>
 8018580:	2300      	movs	r3, #0
 8018582:	4423      	add	r3, r4
 8018584:	b29a      	uxth	r2, r3
 8018586:	4b2a      	ldr	r3, [pc, #168]	@ (8018630 <tcp_receive+0xf18>)
 8018588:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801858a:	4b29      	ldr	r3, [pc, #164]	@ (8018630 <tcp_receive+0xf18>)
 801858c:	881b      	ldrh	r3, [r3, #0]
 801858e:	461a      	mov	r2, r3
 8018590:	4b25      	ldr	r3, [pc, #148]	@ (8018628 <tcp_receive+0xf10>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	441a      	add	r2, r3
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801859a:	6879      	ldr	r1, [r7, #4]
 801859c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801859e:	440b      	add	r3, r1
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d019      	beq.n	80185d8 <tcp_receive+0xec0>
 80185a4:	4b23      	ldr	r3, [pc, #140]	@ (8018634 <tcp_receive+0xf1c>)
 80185a6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80185aa:	4923      	ldr	r1, [pc, #140]	@ (8018638 <tcp_receive+0xf20>)
 80185ac:	4823      	ldr	r0, [pc, #140]	@ (801863c <tcp_receive+0xf24>)
 80185ae:	f005 fd0f 	bl	801dfd0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80185b2:	e011      	b.n	80185d8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80185b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80185ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f47f aea5 	bne.w	801830c <tcp_receive+0xbf4>
 80185c2:	e00a      	b.n	80185da <tcp_receive+0xec2>
                break;
 80185c4:	bf00      	nop
 80185c6:	e008      	b.n	80185da <tcp_receive+0xec2>
                break;
 80185c8:	bf00      	nop
 80185ca:	e006      	b.n	80185da <tcp_receive+0xec2>
                  break;
 80185cc:	bf00      	nop
 80185ce:	e004      	b.n	80185da <tcp_receive+0xec2>
                  break;
 80185d0:	bf00      	nop
 80185d2:	e002      	b.n	80185da <tcp_receive+0xec2>
                  break;
 80185d4:	bf00      	nop
 80185d6:	e000      	b.n	80185da <tcp_receive+0xec2>
                break;
 80185d8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f001 fa30 	bl	8019a40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80185e0:	e003      	b.n	80185ea <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f001 fa2c 	bl	8019a40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80185e8:	e01a      	b.n	8018620 <tcp_receive+0xf08>
 80185ea:	e019      	b.n	8018620 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80185ec:	4b0e      	ldr	r3, [pc, #56]	@ (8018628 <tcp_receive+0xf10>)
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	db0a      	blt.n	8018610 <tcp_receive+0xef8>
 80185fa:	4b0b      	ldr	r3, [pc, #44]	@ (8018628 <tcp_receive+0xf10>)
 80185fc:	681a      	ldr	r2, [r3, #0]
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018602:	6879      	ldr	r1, [r7, #4]
 8018604:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018606:	440b      	add	r3, r1
 8018608:	1ad3      	subs	r3, r2, r3
 801860a:	3301      	adds	r3, #1
 801860c:	2b00      	cmp	r3, #0
 801860e:	dd07      	ble.n	8018620 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	8b5b      	ldrh	r3, [r3, #26]
 8018614:	f043 0302 	orr.w	r3, r3, #2
 8018618:	b29a      	uxth	r2, r3
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801861e:	e7ff      	b.n	8018620 <tcp_receive+0xf08>
 8018620:	bf00      	nop
 8018622:	3750      	adds	r7, #80	@ 0x50
 8018624:	46bd      	mov	sp, r7
 8018626:	bdb0      	pop	{r4, r5, r7, pc}
 8018628:	200277e8 	.word	0x200277e8
 801862c:	200277c8 	.word	0x200277c8
 8018630:	200277f2 	.word	0x200277f2
 8018634:	08020460 	.word	0x08020460
 8018638:	08020808 	.word	0x08020808
 801863c:	080204ac 	.word	0x080204ac

08018640 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018646:	4b15      	ldr	r3, [pc, #84]	@ (801869c <tcp_get_next_optbyte+0x5c>)
 8018648:	881b      	ldrh	r3, [r3, #0]
 801864a:	1c5a      	adds	r2, r3, #1
 801864c:	b291      	uxth	r1, r2
 801864e:	4a13      	ldr	r2, [pc, #76]	@ (801869c <tcp_get_next_optbyte+0x5c>)
 8018650:	8011      	strh	r1, [r2, #0]
 8018652:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018654:	4b12      	ldr	r3, [pc, #72]	@ (80186a0 <tcp_get_next_optbyte+0x60>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d004      	beq.n	8018666 <tcp_get_next_optbyte+0x26>
 801865c:	4b11      	ldr	r3, [pc, #68]	@ (80186a4 <tcp_get_next_optbyte+0x64>)
 801865e:	881b      	ldrh	r3, [r3, #0]
 8018660:	88fa      	ldrh	r2, [r7, #6]
 8018662:	429a      	cmp	r2, r3
 8018664:	d208      	bcs.n	8018678 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018666:	4b10      	ldr	r3, [pc, #64]	@ (80186a8 <tcp_get_next_optbyte+0x68>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	3314      	adds	r3, #20
 801866c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801866e:	88fb      	ldrh	r3, [r7, #6]
 8018670:	683a      	ldr	r2, [r7, #0]
 8018672:	4413      	add	r3, r2
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	e00b      	b.n	8018690 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018678:	88fb      	ldrh	r3, [r7, #6]
 801867a:	b2da      	uxtb	r2, r3
 801867c:	4b09      	ldr	r3, [pc, #36]	@ (80186a4 <tcp_get_next_optbyte+0x64>)
 801867e:	881b      	ldrh	r3, [r3, #0]
 8018680:	b2db      	uxtb	r3, r3
 8018682:	1ad3      	subs	r3, r2, r3
 8018684:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018686:	4b06      	ldr	r3, [pc, #24]	@ (80186a0 <tcp_get_next_optbyte+0x60>)
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	797b      	ldrb	r3, [r7, #5]
 801868c:	4413      	add	r3, r2
 801868e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018690:	4618      	mov	r0, r3
 8018692:	370c      	adds	r7, #12
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr
 801869c:	200277e4 	.word	0x200277e4
 80186a0:	200277e0 	.word	0x200277e0
 80186a4:	200277de 	.word	0x200277de
 80186a8:	200277d8 	.word	0x200277d8

080186ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d106      	bne.n	80186c8 <tcp_parseopt+0x1c>
 80186ba:	4b32      	ldr	r3, [pc, #200]	@ (8018784 <tcp_parseopt+0xd8>)
 80186bc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80186c0:	4931      	ldr	r1, [pc, #196]	@ (8018788 <tcp_parseopt+0xdc>)
 80186c2:	4832      	ldr	r0, [pc, #200]	@ (801878c <tcp_parseopt+0xe0>)
 80186c4:	f005 fc84 	bl	801dfd0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80186c8:	4b31      	ldr	r3, [pc, #196]	@ (8018790 <tcp_parseopt+0xe4>)
 80186ca:	881b      	ldrh	r3, [r3, #0]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d056      	beq.n	801877e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80186d0:	4b30      	ldr	r3, [pc, #192]	@ (8018794 <tcp_parseopt+0xe8>)
 80186d2:	2200      	movs	r2, #0
 80186d4:	801a      	strh	r2, [r3, #0]
 80186d6:	e046      	b.n	8018766 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80186d8:	f7ff ffb2 	bl	8018640 <tcp_get_next_optbyte>
 80186dc:	4603      	mov	r3, r0
 80186de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80186e0:	7bfb      	ldrb	r3, [r7, #15]
 80186e2:	2b02      	cmp	r3, #2
 80186e4:	d006      	beq.n	80186f4 <tcp_parseopt+0x48>
 80186e6:	2b02      	cmp	r3, #2
 80186e8:	dc2a      	bgt.n	8018740 <tcp_parseopt+0x94>
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d042      	beq.n	8018774 <tcp_parseopt+0xc8>
 80186ee:	2b01      	cmp	r3, #1
 80186f0:	d038      	beq.n	8018764 <tcp_parseopt+0xb8>
 80186f2:	e025      	b.n	8018740 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80186f4:	f7ff ffa4 	bl	8018640 <tcp_get_next_optbyte>
 80186f8:	4603      	mov	r3, r0
 80186fa:	2b04      	cmp	r3, #4
 80186fc:	d13c      	bne.n	8018778 <tcp_parseopt+0xcc>
 80186fe:	4b25      	ldr	r3, [pc, #148]	@ (8018794 <tcp_parseopt+0xe8>)
 8018700:	881b      	ldrh	r3, [r3, #0]
 8018702:	3301      	adds	r3, #1
 8018704:	4a22      	ldr	r2, [pc, #136]	@ (8018790 <tcp_parseopt+0xe4>)
 8018706:	8812      	ldrh	r2, [r2, #0]
 8018708:	4293      	cmp	r3, r2
 801870a:	da35      	bge.n	8018778 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801870c:	f7ff ff98 	bl	8018640 <tcp_get_next_optbyte>
 8018710:	4603      	mov	r3, r0
 8018712:	021b      	lsls	r3, r3, #8
 8018714:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018716:	f7ff ff93 	bl	8018640 <tcp_get_next_optbyte>
 801871a:	4603      	mov	r3, r0
 801871c:	461a      	mov	r2, r3
 801871e:	89bb      	ldrh	r3, [r7, #12]
 8018720:	4313      	orrs	r3, r2
 8018722:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018724:	89bb      	ldrh	r3, [r7, #12]
 8018726:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801872a:	d804      	bhi.n	8018736 <tcp_parseopt+0x8a>
 801872c:	89bb      	ldrh	r3, [r7, #12]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d001      	beq.n	8018736 <tcp_parseopt+0x8a>
 8018732:	89ba      	ldrh	r2, [r7, #12]
 8018734:	e001      	b.n	801873a <tcp_parseopt+0x8e>
 8018736:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801873e:	e012      	b.n	8018766 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018740:	f7ff ff7e 	bl	8018640 <tcp_get_next_optbyte>
 8018744:	4603      	mov	r3, r0
 8018746:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018748:	7afb      	ldrb	r3, [r7, #11]
 801874a:	2b01      	cmp	r3, #1
 801874c:	d916      	bls.n	801877c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801874e:	7afb      	ldrb	r3, [r7, #11]
 8018750:	b29a      	uxth	r2, r3
 8018752:	4b10      	ldr	r3, [pc, #64]	@ (8018794 <tcp_parseopt+0xe8>)
 8018754:	881b      	ldrh	r3, [r3, #0]
 8018756:	4413      	add	r3, r2
 8018758:	b29b      	uxth	r3, r3
 801875a:	3b02      	subs	r3, #2
 801875c:	b29a      	uxth	r2, r3
 801875e:	4b0d      	ldr	r3, [pc, #52]	@ (8018794 <tcp_parseopt+0xe8>)
 8018760:	801a      	strh	r2, [r3, #0]
 8018762:	e000      	b.n	8018766 <tcp_parseopt+0xba>
          break;
 8018764:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018766:	4b0b      	ldr	r3, [pc, #44]	@ (8018794 <tcp_parseopt+0xe8>)
 8018768:	881a      	ldrh	r2, [r3, #0]
 801876a:	4b09      	ldr	r3, [pc, #36]	@ (8018790 <tcp_parseopt+0xe4>)
 801876c:	881b      	ldrh	r3, [r3, #0]
 801876e:	429a      	cmp	r2, r3
 8018770:	d3b2      	bcc.n	80186d8 <tcp_parseopt+0x2c>
 8018772:	e004      	b.n	801877e <tcp_parseopt+0xd2>
          return;
 8018774:	bf00      	nop
 8018776:	e002      	b.n	801877e <tcp_parseopt+0xd2>
            return;
 8018778:	bf00      	nop
 801877a:	e000      	b.n	801877e <tcp_parseopt+0xd2>
            return;
 801877c:	bf00      	nop
      }
    }
  }
}
 801877e:	3710      	adds	r7, #16
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}
 8018784:	08020460 	.word	0x08020460
 8018788:	080208c4 	.word	0x080208c4
 801878c:	080204ac 	.word	0x080204ac
 8018790:	200277dc 	.word	0x200277dc
 8018794:	200277e4 	.word	0x200277e4

08018798 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018798:	b480      	push	{r7}
 801879a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801879c:	4b05      	ldr	r3, [pc, #20]	@ (80187b4 <tcp_trigger_input_pcb_close+0x1c>)
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	f043 0310 	orr.w	r3, r3, #16
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	4b03      	ldr	r3, [pc, #12]	@ (80187b4 <tcp_trigger_input_pcb_close+0x1c>)
 80187a8:	701a      	strb	r2, [r3, #0]
}
 80187aa:	bf00      	nop
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr
 80187b4:	200277f5 	.word	0x200277f5

080187b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	60f8      	str	r0, [r7, #12]
 80187c0:	60b9      	str	r1, [r7, #8]
 80187c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d00a      	beq.n	80187e0 <tcp_route+0x28>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	7a1b      	ldrb	r3, [r3, #8]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d006      	beq.n	80187e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	7a1b      	ldrb	r3, [r3, #8]
 80187d6:	4618      	mov	r0, r3
 80187d8:	f7fb fb12 	bl	8013e00 <netif_get_by_index>
 80187dc:	4603      	mov	r3, r0
 80187de:	e003      	b.n	80187e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f003 f959 	bl	801ba98 <ip4_route>
 80187e6:	4603      	mov	r3, r0
  }
}
 80187e8:	4618      	mov	r0, r3
 80187ea:	3710      	adds	r7, #16
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80187f0:	b590      	push	{r4, r7, lr}
 80187f2:	b087      	sub	sp, #28
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	603b      	str	r3, [r7, #0]
 80187fc:	4613      	mov	r3, r2
 80187fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d105      	bne.n	8018812 <tcp_create_segment+0x22>
 8018806:	4b43      	ldr	r3, [pc, #268]	@ (8018914 <tcp_create_segment+0x124>)
 8018808:	22a3      	movs	r2, #163	@ 0xa3
 801880a:	4943      	ldr	r1, [pc, #268]	@ (8018918 <tcp_create_segment+0x128>)
 801880c:	4843      	ldr	r0, [pc, #268]	@ (801891c <tcp_create_segment+0x12c>)
 801880e:	f005 fbdf 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d105      	bne.n	8018824 <tcp_create_segment+0x34>
 8018818:	4b3e      	ldr	r3, [pc, #248]	@ (8018914 <tcp_create_segment+0x124>)
 801881a:	22a4      	movs	r2, #164	@ 0xa4
 801881c:	4940      	ldr	r1, [pc, #256]	@ (8018920 <tcp_create_segment+0x130>)
 801881e:	483f      	ldr	r0, [pc, #252]	@ (801891c <tcp_create_segment+0x12c>)
 8018820:	f005 fbd6 	bl	801dfd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	b2db      	uxtb	r3, r3
 801882c:	f003 0304 	and.w	r3, r3, #4
 8018830:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018832:	2003      	movs	r0, #3
 8018834:	f7fa ff58 	bl	80136e8 <memp_malloc>
 8018838:	6138      	str	r0, [r7, #16]
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d104      	bne.n	801884a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018840:	68b8      	ldr	r0, [r7, #8]
 8018842:	f7fb fe6b 	bl	801451c <pbuf_free>
    return NULL;
 8018846:	2300      	movs	r3, #0
 8018848:	e060      	b.n	801890c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801884a:	693b      	ldr	r3, [r7, #16]
 801884c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018850:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018852:	693b      	ldr	r3, [r7, #16]
 8018854:	2200      	movs	r2, #0
 8018856:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018858:	693b      	ldr	r3, [r7, #16]
 801885a:	68ba      	ldr	r2, [r7, #8]
 801885c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801885e:	68bb      	ldr	r3, [r7, #8]
 8018860:	891a      	ldrh	r2, [r3, #8]
 8018862:	7dfb      	ldrb	r3, [r7, #23]
 8018864:	b29b      	uxth	r3, r3
 8018866:	429a      	cmp	r2, r3
 8018868:	d205      	bcs.n	8018876 <tcp_create_segment+0x86>
 801886a:	4b2a      	ldr	r3, [pc, #168]	@ (8018914 <tcp_create_segment+0x124>)
 801886c:	22b0      	movs	r2, #176	@ 0xb0
 801886e:	492d      	ldr	r1, [pc, #180]	@ (8018924 <tcp_create_segment+0x134>)
 8018870:	482a      	ldr	r0, [pc, #168]	@ (801891c <tcp_create_segment+0x12c>)
 8018872:	f005 fbad 	bl	801dfd0 <iprintf>
  seg->len = p->tot_len - optlen;
 8018876:	68bb      	ldr	r3, [r7, #8]
 8018878:	891a      	ldrh	r2, [r3, #8]
 801887a:	7dfb      	ldrb	r3, [r7, #23]
 801887c:	b29b      	uxth	r3, r3
 801887e:	1ad3      	subs	r3, r2, r3
 8018880:	b29a      	uxth	r2, r3
 8018882:	693b      	ldr	r3, [r7, #16]
 8018884:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018886:	2114      	movs	r1, #20
 8018888:	68b8      	ldr	r0, [r7, #8]
 801888a:	f7fb fdb1 	bl	80143f0 <pbuf_add_header>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d004      	beq.n	801889e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018894:	6938      	ldr	r0, [r7, #16]
 8018896:	f7fd f8d2 	bl	8015a3e <tcp_seg_free>
    return NULL;
 801889a:	2300      	movs	r3, #0
 801889c:	e036      	b.n	801890c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801889e:	693b      	ldr	r3, [r7, #16]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	685a      	ldr	r2, [r3, #4]
 80188a4:	693b      	ldr	r3, [r7, #16]
 80188a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	8ada      	ldrh	r2, [r3, #22]
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	68dc      	ldr	r4, [r3, #12]
 80188b0:	4610      	mov	r0, r2
 80188b2:	f7fa fa45 	bl	8012d40 <lwip_htons>
 80188b6:	4603      	mov	r3, r0
 80188b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	8b1a      	ldrh	r2, [r3, #24]
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	68dc      	ldr	r4, [r3, #12]
 80188c2:	4610      	mov	r0, r2
 80188c4:	f7fa fa3c 	bl	8012d40 <lwip_htons>
 80188c8:	4603      	mov	r3, r0
 80188ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80188cc:	693b      	ldr	r3, [r7, #16]
 80188ce:	68dc      	ldr	r4, [r3, #12]
 80188d0:	6838      	ldr	r0, [r7, #0]
 80188d2:	f7fa fa4b 	bl	8012d6c <lwip_htonl>
 80188d6:	4603      	mov	r3, r0
 80188d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80188da:	7dfb      	ldrb	r3, [r7, #23]
 80188dc:	089b      	lsrs	r3, r3, #2
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	3305      	adds	r3, #5
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	031b      	lsls	r3, r3, #12
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	79fb      	ldrb	r3, [r7, #7]
 80188ea:	b29b      	uxth	r3, r3
 80188ec:	4313      	orrs	r3, r2
 80188ee:	b29a      	uxth	r2, r3
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	68dc      	ldr	r4, [r3, #12]
 80188f4:	4610      	mov	r0, r2
 80188f6:	f7fa fa23 	bl	8012d40 <lwip_htons>
 80188fa:	4603      	mov	r3, r0
 80188fc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80188fe:	693b      	ldr	r3, [r7, #16]
 8018900:	68db      	ldr	r3, [r3, #12]
 8018902:	2200      	movs	r2, #0
 8018904:	749a      	strb	r2, [r3, #18]
 8018906:	2200      	movs	r2, #0
 8018908:	74da      	strb	r2, [r3, #19]
  return seg;
 801890a:	693b      	ldr	r3, [r7, #16]
}
 801890c:	4618      	mov	r0, r3
 801890e:	371c      	adds	r7, #28
 8018910:	46bd      	mov	sp, r7
 8018912:	bd90      	pop	{r4, r7, pc}
 8018914:	080208e0 	.word	0x080208e0
 8018918:	08020914 	.word	0x08020914
 801891c:	08020934 	.word	0x08020934
 8018920:	0802095c 	.word	0x0802095c
 8018924:	08020980 	.word	0x08020980

08018928 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018928:	b590      	push	{r4, r7, lr}
 801892a:	b08b      	sub	sp, #44	@ 0x2c
 801892c:	af02      	add	r7, sp, #8
 801892e:	6078      	str	r0, [r7, #4]
 8018930:	460b      	mov	r3, r1
 8018932:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018934:	2300      	movs	r3, #0
 8018936:	61fb      	str	r3, [r7, #28]
 8018938:	2300      	movs	r3, #0
 801893a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801893c:	2300      	movs	r3, #0
 801893e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d106      	bne.n	8018954 <tcp_split_unsent_seg+0x2c>
 8018946:	4b95      	ldr	r3, [pc, #596]	@ (8018b9c <tcp_split_unsent_seg+0x274>)
 8018948:	f240 324b 	movw	r2, #843	@ 0x34b
 801894c:	4994      	ldr	r1, [pc, #592]	@ (8018ba0 <tcp_split_unsent_seg+0x278>)
 801894e:	4895      	ldr	r0, [pc, #596]	@ (8018ba4 <tcp_split_unsent_seg+0x27c>)
 8018950:	f005 fb3e 	bl	801dfd0 <iprintf>

  useg = pcb->unsent;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018958:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801895a:	697b      	ldr	r3, [r7, #20]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d102      	bne.n	8018966 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018960:	f04f 33ff 	mov.w	r3, #4294967295
 8018964:	e116      	b.n	8018b94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018966:	887b      	ldrh	r3, [r7, #2]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d109      	bne.n	8018980 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801896c:	4b8b      	ldr	r3, [pc, #556]	@ (8018b9c <tcp_split_unsent_seg+0x274>)
 801896e:	f240 3253 	movw	r2, #851	@ 0x353
 8018972:	498d      	ldr	r1, [pc, #564]	@ (8018ba8 <tcp_split_unsent_seg+0x280>)
 8018974:	488b      	ldr	r0, [pc, #556]	@ (8018ba4 <tcp_split_unsent_seg+0x27c>)
 8018976:	f005 fb2b 	bl	801dfd0 <iprintf>
    return ERR_VAL;
 801897a:	f06f 0305 	mvn.w	r3, #5
 801897e:	e109      	b.n	8018b94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018980:	697b      	ldr	r3, [r7, #20]
 8018982:	891b      	ldrh	r3, [r3, #8]
 8018984:	887a      	ldrh	r2, [r7, #2]
 8018986:	429a      	cmp	r2, r3
 8018988:	d301      	bcc.n	801898e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801898a:	2300      	movs	r3, #0
 801898c:	e102      	b.n	8018b94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018992:	887a      	ldrh	r2, [r7, #2]
 8018994:	429a      	cmp	r2, r3
 8018996:	d906      	bls.n	80189a6 <tcp_split_unsent_seg+0x7e>
 8018998:	4b80      	ldr	r3, [pc, #512]	@ (8018b9c <tcp_split_unsent_seg+0x274>)
 801899a:	f240 325b 	movw	r2, #859	@ 0x35b
 801899e:	4983      	ldr	r1, [pc, #524]	@ (8018bac <tcp_split_unsent_seg+0x284>)
 80189a0:	4880      	ldr	r0, [pc, #512]	@ (8018ba4 <tcp_split_unsent_seg+0x27c>)
 80189a2:	f005 fb15 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	891b      	ldrh	r3, [r3, #8]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d106      	bne.n	80189bc <tcp_split_unsent_seg+0x94>
 80189ae:	4b7b      	ldr	r3, [pc, #492]	@ (8018b9c <tcp_split_unsent_seg+0x274>)
 80189b0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80189b4:	497e      	ldr	r1, [pc, #504]	@ (8018bb0 <tcp_split_unsent_seg+0x288>)
 80189b6:	487b      	ldr	r0, [pc, #492]	@ (8018ba4 <tcp_split_unsent_seg+0x27c>)
 80189b8:	f005 fb0a 	bl	801dfd0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80189bc:	697b      	ldr	r3, [r7, #20]
 80189be:	7a9b      	ldrb	r3, [r3, #10]
 80189c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80189c2:	7bfb      	ldrb	r3, [r7, #15]
 80189c4:	009b      	lsls	r3, r3, #2
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	f003 0304 	and.w	r3, r3, #4
 80189cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	891a      	ldrh	r2, [r3, #8]
 80189d2:	887b      	ldrh	r3, [r7, #2]
 80189d4:	1ad3      	subs	r3, r2, r3
 80189d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80189d8:	7bbb      	ldrb	r3, [r7, #14]
 80189da:	b29a      	uxth	r2, r3
 80189dc:	89bb      	ldrh	r3, [r7, #12]
 80189de:	4413      	add	r3, r2
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80189e6:	4619      	mov	r1, r3
 80189e8:	2036      	movs	r0, #54	@ 0x36
 80189ea:	f7fb fab3 	bl	8013f54 <pbuf_alloc>
 80189ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80189f0:	693b      	ldr	r3, [r7, #16]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	f000 80b7 	beq.w	8018b66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	891a      	ldrh	r2, [r3, #8]
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	891b      	ldrh	r3, [r3, #8]
 8018a02:	1ad3      	subs	r3, r2, r3
 8018a04:	b29a      	uxth	r2, r3
 8018a06:	887b      	ldrh	r3, [r7, #2]
 8018a08:	4413      	add	r3, r2
 8018a0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	6858      	ldr	r0, [r3, #4]
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	685a      	ldr	r2, [r3, #4]
 8018a14:	7bbb      	ldrb	r3, [r7, #14]
 8018a16:	18d1      	adds	r1, r2, r3
 8018a18:	897b      	ldrh	r3, [r7, #10]
 8018a1a:	89ba      	ldrh	r2, [r7, #12]
 8018a1c:	f7fb ff84 	bl	8014928 <pbuf_copy_partial>
 8018a20:	4603      	mov	r3, r0
 8018a22:	461a      	mov	r2, r3
 8018a24:	89bb      	ldrh	r3, [r7, #12]
 8018a26:	4293      	cmp	r3, r2
 8018a28:	f040 809f 	bne.w	8018b6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	899b      	ldrh	r3, [r3, #12]
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7fa f983 	bl	8012d40 <lwip_htons>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018a44:	2300      	movs	r3, #0
 8018a46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018a48:	7efb      	ldrb	r3, [r7, #27]
 8018a4a:	f003 0308 	and.w	r3, r3, #8
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d007      	beq.n	8018a62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018a52:	7efb      	ldrb	r3, [r7, #27]
 8018a54:	f023 0308 	bic.w	r3, r3, #8
 8018a58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018a5a:	7ebb      	ldrb	r3, [r7, #26]
 8018a5c:	f043 0308 	orr.w	r3, r3, #8
 8018a60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018a62:	7efb      	ldrb	r3, [r7, #27]
 8018a64:	f003 0301 	and.w	r3, r3, #1
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d007      	beq.n	8018a7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018a6c:	7efb      	ldrb	r3, [r7, #27]
 8018a6e:	f023 0301 	bic.w	r3, r3, #1
 8018a72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018a74:	7ebb      	ldrb	r3, [r7, #26]
 8018a76:	f043 0301 	orr.w	r3, r3, #1
 8018a7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	68db      	ldr	r3, [r3, #12]
 8018a80:	685b      	ldr	r3, [r3, #4]
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7fa f972 	bl	8012d6c <lwip_htonl>
 8018a88:	4602      	mov	r2, r0
 8018a8a:	887b      	ldrh	r3, [r7, #2]
 8018a8c:	18d1      	adds	r1, r2, r3
 8018a8e:	7eba      	ldrb	r2, [r7, #26]
 8018a90:	7bfb      	ldrb	r3, [r7, #15]
 8018a92:	9300      	str	r3, [sp, #0]
 8018a94:	460b      	mov	r3, r1
 8018a96:	6939      	ldr	r1, [r7, #16]
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f7ff fea9 	bl	80187f0 <tcp_create_segment>
 8018a9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d063      	beq.n	8018b6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fb fdc4 	bl	8014638 <pbuf_clen>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018aba:	1a9b      	subs	r3, r3, r2
 8018abc:	b29a      	uxth	r2, r3
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	6858      	ldr	r0, [r3, #4]
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	685b      	ldr	r3, [r3, #4]
 8018acc:	891a      	ldrh	r2, [r3, #8]
 8018ace:	89bb      	ldrh	r3, [r7, #12]
 8018ad0:	1ad3      	subs	r3, r2, r3
 8018ad2:	b29b      	uxth	r3, r3
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	f7fb fb9b 	bl	8014210 <pbuf_realloc>
  useg->len -= remainder;
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	891a      	ldrh	r2, [r3, #8]
 8018ade:	89bb      	ldrh	r3, [r7, #12]
 8018ae0:	1ad3      	subs	r3, r2, r3
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	899b      	ldrh	r3, [r3, #12]
 8018aee:	b29c      	uxth	r4, r3
 8018af0:	7efb      	ldrb	r3, [r7, #27]
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7fa f923 	bl	8012d40 <lwip_htons>
 8018afa:	4603      	mov	r3, r0
 8018afc:	461a      	mov	r2, r3
 8018afe:	697b      	ldr	r3, [r7, #20]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	4322      	orrs	r2, r4
 8018b04:	b292      	uxth	r2, r2
 8018b06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	685b      	ldr	r3, [r3, #4]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7fb fd93 	bl	8014638 <pbuf_clen>
 8018b12:	4603      	mov	r3, r0
 8018b14:	461a      	mov	r2, r3
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b1c:	4413      	add	r3, r2
 8018b1e:	b29a      	uxth	r2, r3
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018b26:	69fb      	ldr	r3, [r7, #28]
 8018b28:	685b      	ldr	r3, [r3, #4]
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	f7fb fd84 	bl	8014638 <pbuf_clen>
 8018b30:	4603      	mov	r3, r0
 8018b32:	461a      	mov	r2, r3
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018b3a:	4413      	add	r3, r2
 8018b3c:	b29a      	uxth	r2, r3
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	681a      	ldr	r2, [r3, #0]
 8018b48:	69fb      	ldr	r3, [r7, #28]
 8018b4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	69fa      	ldr	r2, [r7, #28]
 8018b50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018b52:	69fb      	ldr	r3, [r7, #28]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d103      	bne.n	8018b62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018b62:	2300      	movs	r3, #0
 8018b64:	e016      	b.n	8018b94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018b66:	bf00      	nop
 8018b68:	e002      	b.n	8018b70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b6a:	bf00      	nop
 8018b6c:	e000      	b.n	8018b70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d006      	beq.n	8018b84 <tcp_split_unsent_seg+0x25c>
 8018b76:	4b09      	ldr	r3, [pc, #36]	@ (8018b9c <tcp_split_unsent_seg+0x274>)
 8018b78:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018b7c:	490d      	ldr	r1, [pc, #52]	@ (8018bb4 <tcp_split_unsent_seg+0x28c>)
 8018b7e:	4809      	ldr	r0, [pc, #36]	@ (8018ba4 <tcp_split_unsent_seg+0x27c>)
 8018b80:	f005 fa26 	bl	801dfd0 <iprintf>
  if (p != NULL) {
 8018b84:	693b      	ldr	r3, [r7, #16]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d002      	beq.n	8018b90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018b8a:	6938      	ldr	r0, [r7, #16]
 8018b8c:	f7fb fcc6 	bl	801451c <pbuf_free>
  }

  return ERR_MEM;
 8018b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3724      	adds	r7, #36	@ 0x24
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd90      	pop	{r4, r7, pc}
 8018b9c:	080208e0 	.word	0x080208e0
 8018ba0:	08020c74 	.word	0x08020c74
 8018ba4:	08020934 	.word	0x08020934
 8018ba8:	08020c98 	.word	0x08020c98
 8018bac:	08020cbc 	.word	0x08020cbc
 8018bb0:	08020ccc 	.word	0x08020ccc
 8018bb4:	08020cdc 	.word	0x08020cdc

08018bb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018bb8:	b590      	push	{r4, r7, lr}
 8018bba:	b085      	sub	sp, #20
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d106      	bne.n	8018bd4 <tcp_send_fin+0x1c>
 8018bc6:	4b21      	ldr	r3, [pc, #132]	@ (8018c4c <tcp_send_fin+0x94>)
 8018bc8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018bcc:	4920      	ldr	r1, [pc, #128]	@ (8018c50 <tcp_send_fin+0x98>)
 8018bce:	4821      	ldr	r0, [pc, #132]	@ (8018c54 <tcp_send_fin+0x9c>)
 8018bd0:	f005 f9fe 	bl	801dfd0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d02e      	beq.n	8018c3a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018be0:	60fb      	str	r3, [r7, #12]
 8018be2:	e002      	b.n	8018bea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d1f8      	bne.n	8018be4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	899b      	ldrh	r3, [r3, #12]
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fa f8a0 	bl	8012d40 <lwip_htons>
 8018c00:	4603      	mov	r3, r0
 8018c02:	b2db      	uxtb	r3, r3
 8018c04:	f003 0307 	and.w	r3, r3, #7
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d116      	bne.n	8018c3a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	68db      	ldr	r3, [r3, #12]
 8018c10:	899b      	ldrh	r3, [r3, #12]
 8018c12:	b29c      	uxth	r4, r3
 8018c14:	2001      	movs	r0, #1
 8018c16:	f7fa f893 	bl	8012d40 <lwip_htons>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	461a      	mov	r2, r3
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	68db      	ldr	r3, [r3, #12]
 8018c22:	4322      	orrs	r2, r4
 8018c24:	b292      	uxth	r2, r2
 8018c26:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	8b5b      	ldrh	r3, [r3, #26]
 8018c2c:	f043 0320 	orr.w	r3, r3, #32
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018c36:	2300      	movs	r3, #0
 8018c38:	e004      	b.n	8018c44 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018c3a:	2101      	movs	r1, #1
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f000 f80b 	bl	8018c58 <tcp_enqueue_flags>
 8018c42:	4603      	mov	r3, r0
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3714      	adds	r7, #20
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd90      	pop	{r4, r7, pc}
 8018c4c:	080208e0 	.word	0x080208e0
 8018c50:	08020ce8 	.word	0x08020ce8
 8018c54:	08020934 	.word	0x08020934

08018c58 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b08a      	sub	sp, #40	@ 0x28
 8018c5c:	af02      	add	r7, sp, #8
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	460b      	mov	r3, r1
 8018c62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018c64:	2300      	movs	r3, #0
 8018c66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018c6c:	78fb      	ldrb	r3, [r7, #3]
 8018c6e:	f003 0303 	and.w	r3, r3, #3
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d106      	bne.n	8018c84 <tcp_enqueue_flags+0x2c>
 8018c76:	4b67      	ldr	r3, [pc, #412]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018c78:	f240 4211 	movw	r2, #1041	@ 0x411
 8018c7c:	4966      	ldr	r1, [pc, #408]	@ (8018e18 <tcp_enqueue_flags+0x1c0>)
 8018c7e:	4867      	ldr	r0, [pc, #412]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018c80:	f005 f9a6 	bl	801dfd0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <tcp_enqueue_flags+0x40>
 8018c8a:	4b62      	ldr	r3, [pc, #392]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018c8c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018c90:	4963      	ldr	r1, [pc, #396]	@ (8018e20 <tcp_enqueue_flags+0x1c8>)
 8018c92:	4862      	ldr	r0, [pc, #392]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018c94:	f005 f99c 	bl	801dfd0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018c98:	78fb      	ldrb	r3, [r7, #3]
 8018c9a:	f003 0302 	and.w	r3, r3, #2
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d001      	beq.n	8018ca6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018ca2:	2301      	movs	r3, #1
 8018ca4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ca6:	7ffb      	ldrb	r3, [r7, #31]
 8018ca8:	009b      	lsls	r3, r3, #2
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	f003 0304 	and.w	r3, r3, #4
 8018cb0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018cb2:	7dfb      	ldrb	r3, [r7, #23]
 8018cb4:	b29b      	uxth	r3, r3
 8018cb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018cba:	4619      	mov	r1, r3
 8018cbc:	2036      	movs	r0, #54	@ 0x36
 8018cbe:	f7fb f949 	bl	8013f54 <pbuf_alloc>
 8018cc2:	6138      	str	r0, [r7, #16]
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d109      	bne.n	8018cde <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	8b5b      	ldrh	r3, [r3, #26]
 8018cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cd2:	b29a      	uxth	r2, r3
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cdc:	e095      	b.n	8018e0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	895a      	ldrh	r2, [r3, #10]
 8018ce2:	7dfb      	ldrb	r3, [r7, #23]
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	429a      	cmp	r2, r3
 8018ce8:	d206      	bcs.n	8018cf8 <tcp_enqueue_flags+0xa0>
 8018cea:	4b4a      	ldr	r3, [pc, #296]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018cec:	f240 4239 	movw	r2, #1081	@ 0x439
 8018cf0:	494c      	ldr	r1, [pc, #304]	@ (8018e24 <tcp_enqueue_flags+0x1cc>)
 8018cf2:	484a      	ldr	r0, [pc, #296]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018cf4:	f005 f96c 	bl	801dfd0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8018cfc:	78fa      	ldrb	r2, [r7, #3]
 8018cfe:	7ffb      	ldrb	r3, [r7, #31]
 8018d00:	9300      	str	r3, [sp, #0]
 8018d02:	460b      	mov	r3, r1
 8018d04:	6939      	ldr	r1, [r7, #16]
 8018d06:	6878      	ldr	r0, [r7, #4]
 8018d08:	f7ff fd72 	bl	80187f0 <tcp_create_segment>
 8018d0c:	60f8      	str	r0, [r7, #12]
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d109      	bne.n	8018d28 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	8b5b      	ldrh	r3, [r3, #26]
 8018d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d1c:	b29a      	uxth	r2, r3
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018d22:	f04f 33ff 	mov.w	r3, #4294967295
 8018d26:	e070      	b.n	8018e0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	68db      	ldr	r3, [r3, #12]
 8018d2c:	f003 0303 	and.w	r3, r3, #3
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d006      	beq.n	8018d42 <tcp_enqueue_flags+0xea>
 8018d34:	4b37      	ldr	r3, [pc, #220]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018d36:	f240 4242 	movw	r2, #1090	@ 0x442
 8018d3a:	493b      	ldr	r1, [pc, #236]	@ (8018e28 <tcp_enqueue_flags+0x1d0>)
 8018d3c:	4837      	ldr	r0, [pc, #220]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018d3e:	f005 f947 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	891b      	ldrh	r3, [r3, #8]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d006      	beq.n	8018d58 <tcp_enqueue_flags+0x100>
 8018d4a:	4b32      	ldr	r3, [pc, #200]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018d4c:	f240 4243 	movw	r2, #1091	@ 0x443
 8018d50:	4936      	ldr	r1, [pc, #216]	@ (8018e2c <tcp_enqueue_flags+0x1d4>)
 8018d52:	4832      	ldr	r0, [pc, #200]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018d54:	f005 f93c 	bl	801dfd0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d103      	bne.n	8018d68 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	68fa      	ldr	r2, [r7, #12]
 8018d64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018d66:	e00d      	b.n	8018d84 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d6c:	61bb      	str	r3, [r7, #24]
 8018d6e:	e002      	b.n	8018d76 <tcp_enqueue_flags+0x11e>
 8018d70:	69bb      	ldr	r3, [r7, #24]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	61bb      	str	r3, [r7, #24]
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d1f8      	bne.n	8018d70 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018d7e:	69bb      	ldr	r3, [r7, #24]
 8018d80:	68fa      	ldr	r2, [r7, #12]
 8018d82:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	2200      	movs	r2, #0
 8018d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018d8c:	78fb      	ldrb	r3, [r7, #3]
 8018d8e:	f003 0302 	and.w	r3, r3, #2
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d104      	bne.n	8018da0 <tcp_enqueue_flags+0x148>
 8018d96:	78fb      	ldrb	r3, [r7, #3]
 8018d98:	f003 0301 	and.w	r3, r3, #1
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d004      	beq.n	8018daa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018da4:	1c5a      	adds	r2, r3, #1
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018daa:	78fb      	ldrb	r3, [r7, #3]
 8018dac:	f003 0301 	and.w	r3, r3, #1
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d006      	beq.n	8018dc2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	8b5b      	ldrh	r3, [r3, #26]
 8018db8:	f043 0320 	orr.w	r3, r3, #32
 8018dbc:	b29a      	uxth	r2, r3
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	685b      	ldr	r3, [r3, #4]
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fb fc36 	bl	8014638 <pbuf_clen>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	461a      	mov	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018dd6:	4413      	add	r3, r2
 8018dd8:	b29a      	uxth	r2, r3
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d00e      	beq.n	8018e08 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d10a      	bne.n	8018e08 <tcp_enqueue_flags+0x1b0>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d106      	bne.n	8018e08 <tcp_enqueue_flags+0x1b0>
 8018dfa:	4b06      	ldr	r3, [pc, #24]	@ (8018e14 <tcp_enqueue_flags+0x1bc>)
 8018dfc:	f240 4265 	movw	r2, #1125	@ 0x465
 8018e00:	490b      	ldr	r1, [pc, #44]	@ (8018e30 <tcp_enqueue_flags+0x1d8>)
 8018e02:	4806      	ldr	r0, [pc, #24]	@ (8018e1c <tcp_enqueue_flags+0x1c4>)
 8018e04:	f005 f8e4 	bl	801dfd0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018e08:	2300      	movs	r3, #0
}
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	3720      	adds	r7, #32
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	080208e0 	.word	0x080208e0
 8018e18:	08020d04 	.word	0x08020d04
 8018e1c:	08020934 	.word	0x08020934
 8018e20:	08020d5c 	.word	0x08020d5c
 8018e24:	08020d7c 	.word	0x08020d7c
 8018e28:	08020db8 	.word	0x08020db8
 8018e2c:	08020dd0 	.word	0x08020dd0
 8018e30:	08020dfc 	.word	0x08020dfc

08018e34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018e34:	b5b0      	push	{r4, r5, r7, lr}
 8018e36:	b08a      	sub	sp, #40	@ 0x28
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d106      	bne.n	8018e50 <tcp_output+0x1c>
 8018e42:	4b8a      	ldr	r3, [pc, #552]	@ (801906c <tcp_output+0x238>)
 8018e44:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018e48:	4989      	ldr	r1, [pc, #548]	@ (8019070 <tcp_output+0x23c>)
 8018e4a:	488a      	ldr	r0, [pc, #552]	@ (8019074 <tcp_output+0x240>)
 8018e4c:	f005 f8c0 	bl	801dfd0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	7d1b      	ldrb	r3, [r3, #20]
 8018e54:	2b01      	cmp	r3, #1
 8018e56:	d106      	bne.n	8018e66 <tcp_output+0x32>
 8018e58:	4b84      	ldr	r3, [pc, #528]	@ (801906c <tcp_output+0x238>)
 8018e5a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018e5e:	4986      	ldr	r1, [pc, #536]	@ (8019078 <tcp_output+0x244>)
 8018e60:	4884      	ldr	r0, [pc, #528]	@ (8019074 <tcp_output+0x240>)
 8018e62:	f005 f8b5 	bl	801dfd0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018e66:	4b85      	ldr	r3, [pc, #532]	@ (801907c <tcp_output+0x248>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	687a      	ldr	r2, [r7, #4]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d101      	bne.n	8018e74 <tcp_output+0x40>
    return ERR_OK;
 8018e70:	2300      	movs	r3, #0
 8018e72:	e1ce      	b.n	8019212 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018e80:	4293      	cmp	r3, r2
 8018e82:	bf28      	it	cs
 8018e84:	4613      	movcs	r3, r2
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d10b      	bne.n	8018eae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	8b5b      	ldrh	r3, [r3, #26]
 8018e9a:	f003 0302 	and.w	r3, r3, #2
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	f000 81aa 	beq.w	80191f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018ea4:	6878      	ldr	r0, [r7, #4]
 8018ea6:	f000 fdcb 	bl	8019a40 <tcp_send_empty_ack>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	e1b1      	b.n	8019212 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018eae:	6879      	ldr	r1, [r7, #4]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	3304      	adds	r3, #4
 8018eb4:	461a      	mov	r2, r3
 8018eb6:	6878      	ldr	r0, [r7, #4]
 8018eb8:	f7ff fc7e 	bl	80187b8 <tcp_route>
 8018ebc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d102      	bne.n	8018eca <tcp_output+0x96>
    return ERR_RTE;
 8018ec4:	f06f 0303 	mvn.w	r3, #3
 8018ec8:	e1a3      	b.n	8019212 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d003      	beq.n	8018ed8 <tcp_output+0xa4>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d111      	bne.n	8018efc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d002      	beq.n	8018ee4 <tcp_output+0xb0>
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	3304      	adds	r3, #4
 8018ee2:	e000      	b.n	8018ee6 <tcp_output+0xb2>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d102      	bne.n	8018ef4 <tcp_output+0xc0>
      return ERR_RTE;
 8018eee:	f06f 0303 	mvn.w	r3, #3
 8018ef2:	e18e      	b.n	8019212 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	681a      	ldr	r2, [r3, #0]
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7f9 ff32 	bl	8012d6c <lwip_htonl>
 8018f08:	4602      	mov	r2, r0
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f0e:	1ad3      	subs	r3, r2, r3
 8018f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f12:	8912      	ldrh	r2, [r2, #8]
 8018f14:	4413      	add	r3, r2
 8018f16:	69ba      	ldr	r2, [r7, #24]
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d227      	bcs.n	8018f6c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018f22:	461a      	mov	r2, r3
 8018f24:	69bb      	ldr	r3, [r7, #24]
 8018f26:	4293      	cmp	r3, r2
 8018f28:	d114      	bne.n	8018f54 <tcp_output+0x120>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d110      	bne.n	8018f54 <tcp_output+0x120>
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d10b      	bne.n	8018f54 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	2200      	movs	r2, #0
 8018f40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2201      	movs	r2, #1
 8018f48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2200      	movs	r2, #0
 8018f50:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	8b5b      	ldrh	r3, [r3, #26]
 8018f58:	f003 0302 	and.w	r3, r3, #2
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	f000 814d 	beq.w	80191fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018f62:	6878      	ldr	r0, [r7, #4]
 8018f64:	f000 fd6c 	bl	8019a40 <tcp_send_empty_ack>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	e152      	b.n	8019212 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f78:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018f7a:	6a3b      	ldr	r3, [r7, #32]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f000 811c 	beq.w	80191ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018f82:	e002      	b.n	8018f8a <tcp_output+0x156>
 8018f84:	6a3b      	ldr	r3, [r7, #32]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	623b      	str	r3, [r7, #32]
 8018f8a:	6a3b      	ldr	r3, [r7, #32]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d1f8      	bne.n	8018f84 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018f92:	e112      	b.n	80191ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f96:	68db      	ldr	r3, [r3, #12]
 8018f98:	899b      	ldrh	r3, [r3, #12]
 8018f9a:	b29b      	uxth	r3, r3
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7f9 fecf 	bl	8012d40 <lwip_htons>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	f003 0304 	and.w	r3, r3, #4
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d006      	beq.n	8018fbc <tcp_output+0x188>
 8018fae:	4b2f      	ldr	r3, [pc, #188]	@ (801906c <tcp_output+0x238>)
 8018fb0:	f240 5236 	movw	r2, #1334	@ 0x536
 8018fb4:	4932      	ldr	r1, [pc, #200]	@ (8019080 <tcp_output+0x24c>)
 8018fb6:	482f      	ldr	r0, [pc, #188]	@ (8019074 <tcp_output+0x240>)
 8018fb8:	f005 f80a 	bl	801dfd0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d01f      	beq.n	8019004 <tcp_output+0x1d0>
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	8b5b      	ldrh	r3, [r3, #26]
 8018fc8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d119      	bne.n	8019004 <tcp_output+0x1d0>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00b      	beq.n	8018ff0 <tcp_output+0x1bc>
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d110      	bne.n	8019004 <tcp_output+0x1d0>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fe6:	891a      	ldrh	r2, [r3, #8]
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d209      	bcs.n	8019004 <tcp_output+0x1d0>
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d004      	beq.n	8019004 <tcp_output+0x1d0>
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019000:	2b08      	cmp	r3, #8
 8019002:	d901      	bls.n	8019008 <tcp_output+0x1d4>
 8019004:	2301      	movs	r3, #1
 8019006:	e000      	b.n	801900a <tcp_output+0x1d6>
 8019008:	2300      	movs	r3, #0
 801900a:	2b00      	cmp	r3, #0
 801900c:	d106      	bne.n	801901c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	8b5b      	ldrh	r3, [r3, #26]
 8019012:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019016:	2b00      	cmp	r3, #0
 8019018:	f000 80e4 	beq.w	80191e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	7d1b      	ldrb	r3, [r3, #20]
 8019020:	2b02      	cmp	r3, #2
 8019022:	d00d      	beq.n	8019040 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019026:	68db      	ldr	r3, [r3, #12]
 8019028:	899b      	ldrh	r3, [r3, #12]
 801902a:	b29c      	uxth	r4, r3
 801902c:	2010      	movs	r0, #16
 801902e:	f7f9 fe87 	bl	8012d40 <lwip_htons>
 8019032:	4603      	mov	r3, r0
 8019034:	461a      	mov	r2, r3
 8019036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019038:	68db      	ldr	r3, [r3, #12]
 801903a:	4322      	orrs	r2, r4
 801903c:	b292      	uxth	r2, r2
 801903e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019040:	697a      	ldr	r2, [r7, #20]
 8019042:	6879      	ldr	r1, [r7, #4]
 8019044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019046:	f000 f909 	bl	801925c <tcp_output_segment>
 801904a:	4603      	mov	r3, r0
 801904c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801904e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d016      	beq.n	8019084 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	8b5b      	ldrh	r3, [r3, #26]
 801905a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801905e:	b29a      	uxth	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	835a      	strh	r2, [r3, #26]
      return err;
 8019064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019068:	e0d3      	b.n	8019212 <tcp_output+0x3de>
 801906a:	bf00      	nop
 801906c:	080208e0 	.word	0x080208e0
 8019070:	08020e24 	.word	0x08020e24
 8019074:	08020934 	.word	0x08020934
 8019078:	08020e3c 	.word	0x08020e3c
 801907c:	200277fc 	.word	0x200277fc
 8019080:	08020e64 	.word	0x08020e64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	7d1b      	ldrb	r3, [r3, #20]
 8019090:	2b02      	cmp	r3, #2
 8019092:	d006      	beq.n	80190a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	8b5b      	ldrh	r3, [r3, #26]
 8019098:	f023 0303 	bic.w	r3, r3, #3
 801909c:	b29a      	uxth	r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80190a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190a4:	68db      	ldr	r3, [r3, #12]
 80190a6:	685b      	ldr	r3, [r3, #4]
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7f9 fe5f 	bl	8012d6c <lwip_htonl>
 80190ae:	4604      	mov	r4, r0
 80190b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190b2:	891b      	ldrh	r3, [r3, #8]
 80190b4:	461d      	mov	r5, r3
 80190b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	899b      	ldrh	r3, [r3, #12]
 80190bc:	b29b      	uxth	r3, r3
 80190be:	4618      	mov	r0, r3
 80190c0:	f7f9 fe3e 	bl	8012d40 <lwip_htons>
 80190c4:	4603      	mov	r3, r0
 80190c6:	b2db      	uxtb	r3, r3
 80190c8:	f003 0303 	and.w	r3, r3, #3
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d001      	beq.n	80190d4 <tcp_output+0x2a0>
 80190d0:	2301      	movs	r3, #1
 80190d2:	e000      	b.n	80190d6 <tcp_output+0x2a2>
 80190d4:	2300      	movs	r3, #0
 80190d6:	442b      	add	r3, r5
 80190d8:	4423      	add	r3, r4
 80190da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	1ad3      	subs	r3, r2, r3
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	da02      	bge.n	80190ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	68ba      	ldr	r2, [r7, #8]
 80190ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80190ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190f0:	891b      	ldrh	r3, [r3, #8]
 80190f2:	461c      	mov	r4, r3
 80190f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190f6:	68db      	ldr	r3, [r3, #12]
 80190f8:	899b      	ldrh	r3, [r3, #12]
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7f9 fe1f 	bl	8012d40 <lwip_htons>
 8019102:	4603      	mov	r3, r0
 8019104:	b2db      	uxtb	r3, r3
 8019106:	f003 0303 	and.w	r3, r3, #3
 801910a:	2b00      	cmp	r3, #0
 801910c:	d001      	beq.n	8019112 <tcp_output+0x2de>
 801910e:	2301      	movs	r3, #1
 8019110:	e000      	b.n	8019114 <tcp_output+0x2e0>
 8019112:	2300      	movs	r3, #0
 8019114:	4423      	add	r3, r4
 8019116:	2b00      	cmp	r3, #0
 8019118:	d049      	beq.n	80191ae <tcp_output+0x37a>
      seg->next = NULL;
 801911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801911c:	2200      	movs	r2, #0
 801911e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019124:	2b00      	cmp	r3, #0
 8019126:	d105      	bne.n	8019134 <tcp_output+0x300>
        pcb->unacked = seg;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801912c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019130:	623b      	str	r3, [r7, #32]
 8019132:	e03f      	b.n	80191b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019136:	68db      	ldr	r3, [r3, #12]
 8019138:	685b      	ldr	r3, [r3, #4]
 801913a:	4618      	mov	r0, r3
 801913c:	f7f9 fe16 	bl	8012d6c <lwip_htonl>
 8019140:	4604      	mov	r4, r0
 8019142:	6a3b      	ldr	r3, [r7, #32]
 8019144:	68db      	ldr	r3, [r3, #12]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	4618      	mov	r0, r3
 801914a:	f7f9 fe0f 	bl	8012d6c <lwip_htonl>
 801914e:	4603      	mov	r3, r0
 8019150:	1ae3      	subs	r3, r4, r3
 8019152:	2b00      	cmp	r3, #0
 8019154:	da24      	bge.n	80191a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	3370      	adds	r3, #112	@ 0x70
 801915a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801915c:	e002      	b.n	8019164 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801915e:	69fb      	ldr	r3, [r7, #28]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019164:	69fb      	ldr	r3, [r7, #28]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d011      	beq.n	8019190 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801916c:	69fb      	ldr	r3, [r7, #28]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	4618      	mov	r0, r3
 8019176:	f7f9 fdf9 	bl	8012d6c <lwip_htonl>
 801917a:	4604      	mov	r4, r0
 801917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801917e:	68db      	ldr	r3, [r3, #12]
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	4618      	mov	r0, r3
 8019184:	f7f9 fdf2 	bl	8012d6c <lwip_htonl>
 8019188:	4603      	mov	r3, r0
 801918a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801918c:	2b00      	cmp	r3, #0
 801918e:	dbe6      	blt.n	801915e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019190:	69fb      	ldr	r3, [r7, #28]
 8019192:	681a      	ldr	r2, [r3, #0]
 8019194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019196:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801919c:	601a      	str	r2, [r3, #0]
 801919e:	e009      	b.n	80191b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80191a0:	6a3b      	ldr	r3, [r7, #32]
 80191a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	623b      	str	r3, [r7, #32]
 80191ac:	e002      	b.n	80191b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80191ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80191b0:	f7fc fc45 	bl	8015a3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80191ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d012      	beq.n	80191e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80191c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	685b      	ldr	r3, [r3, #4]
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7f9 fdd0 	bl	8012d6c <lwip_htonl>
 80191cc:	4602      	mov	r2, r0
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80191d2:	1ad3      	subs	r3, r2, r3
 80191d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191d6:	8912      	ldrh	r2, [r2, #8]
 80191d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80191da:	69ba      	ldr	r2, [r7, #24]
 80191dc:	429a      	cmp	r2, r3
 80191de:	f4bf aed9 	bcs.w	8018f94 <tcp_output+0x160>
 80191e2:	e000      	b.n	80191e6 <tcp_output+0x3b2>
      break;
 80191e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d108      	bne.n	8019200 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2200      	movs	r2, #0
 80191f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80191f6:	e004      	b.n	8019202 <tcp_output+0x3ce>
    goto output_done;
 80191f8:	bf00      	nop
 80191fa:	e002      	b.n	8019202 <tcp_output+0x3ce>
    goto output_done;
 80191fc:	bf00      	nop
 80191fe:	e000      	b.n	8019202 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019200:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	8b5b      	ldrh	r3, [r3, #26]
 8019206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801920a:	b29a      	uxth	r2, r3
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019210:	2300      	movs	r3, #0
}
 8019212:	4618      	mov	r0, r3
 8019214:	3728      	adds	r7, #40	@ 0x28
 8019216:	46bd      	mov	sp, r7
 8019218:	bdb0      	pop	{r4, r5, r7, pc}
 801921a:	bf00      	nop

0801921c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d106      	bne.n	8019238 <tcp_output_segment_busy+0x1c>
 801922a:	4b09      	ldr	r3, [pc, #36]	@ (8019250 <tcp_output_segment_busy+0x34>)
 801922c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019230:	4908      	ldr	r1, [pc, #32]	@ (8019254 <tcp_output_segment_busy+0x38>)
 8019232:	4809      	ldr	r0, [pc, #36]	@ (8019258 <tcp_output_segment_busy+0x3c>)
 8019234:	f004 fecc 	bl	801dfd0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	685b      	ldr	r3, [r3, #4]
 801923c:	7b9b      	ldrb	r3, [r3, #14]
 801923e:	2b01      	cmp	r3, #1
 8019240:	d001      	beq.n	8019246 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019242:	2301      	movs	r3, #1
 8019244:	e000      	b.n	8019248 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019246:	2300      	movs	r3, #0
}
 8019248:	4618      	mov	r0, r3
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}
 8019250:	080208e0 	.word	0x080208e0
 8019254:	08020e7c 	.word	0x08020e7c
 8019258:	08020934 	.word	0x08020934

0801925c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801925c:	b5b0      	push	{r4, r5, r7, lr}
 801925e:	b08c      	sub	sp, #48	@ 0x30
 8019260:	af04      	add	r7, sp, #16
 8019262:	60f8      	str	r0, [r7, #12]
 8019264:	60b9      	str	r1, [r7, #8]
 8019266:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d106      	bne.n	801927c <tcp_output_segment+0x20>
 801926e:	4b64      	ldr	r3, [pc, #400]	@ (8019400 <tcp_output_segment+0x1a4>)
 8019270:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019274:	4963      	ldr	r1, [pc, #396]	@ (8019404 <tcp_output_segment+0x1a8>)
 8019276:	4864      	ldr	r0, [pc, #400]	@ (8019408 <tcp_output_segment+0x1ac>)
 8019278:	f004 feaa 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d106      	bne.n	8019290 <tcp_output_segment+0x34>
 8019282:	4b5f      	ldr	r3, [pc, #380]	@ (8019400 <tcp_output_segment+0x1a4>)
 8019284:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019288:	4960      	ldr	r1, [pc, #384]	@ (801940c <tcp_output_segment+0x1b0>)
 801928a:	485f      	ldr	r0, [pc, #380]	@ (8019408 <tcp_output_segment+0x1ac>)
 801928c:	f004 fea0 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d106      	bne.n	80192a4 <tcp_output_segment+0x48>
 8019296:	4b5a      	ldr	r3, [pc, #360]	@ (8019400 <tcp_output_segment+0x1a4>)
 8019298:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801929c:	495c      	ldr	r1, [pc, #368]	@ (8019410 <tcp_output_segment+0x1b4>)
 801929e:	485a      	ldr	r0, [pc, #360]	@ (8019408 <tcp_output_segment+0x1ac>)
 80192a0:	f004 fe96 	bl	801dfd0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80192a4:	68f8      	ldr	r0, [r7, #12]
 80192a6:	f7ff ffb9 	bl	801921c <tcp_output_segment_busy>
 80192aa:	4603      	mov	r3, r0
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d001      	beq.n	80192b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80192b0:	2300      	movs	r3, #0
 80192b2:	e0a1      	b.n	80193f8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	68dc      	ldr	r4, [r3, #12]
 80192bc:	4610      	mov	r0, r2
 80192be:	f7f9 fd55 	bl	8012d6c <lwip_htonl>
 80192c2:	4603      	mov	r3, r0
 80192c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	68dc      	ldr	r4, [r3, #12]
 80192ce:	4610      	mov	r0, r2
 80192d0:	f7f9 fd36 	bl	8012d40 <lwip_htons>
 80192d4:	4603      	mov	r3, r0
 80192d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192dc:	68ba      	ldr	r2, [r7, #8]
 80192de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80192e0:	441a      	add	r2, r3
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	3314      	adds	r3, #20
 80192ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	7a9b      	ldrb	r3, [r3, #10]
 80192f2:	f003 0301 	and.w	r3, r3, #1
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d015      	beq.n	8019326 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	3304      	adds	r3, #4
 80192fe:	461a      	mov	r2, r3
 8019300:	6879      	ldr	r1, [r7, #4]
 8019302:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019306:	f7fc fe91 	bl	801602c <tcp_eff_send_mss_netif>
 801930a:	4603      	mov	r3, r0
 801930c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801930e:	8b7b      	ldrh	r3, [r7, #26]
 8019310:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019314:	4618      	mov	r0, r3
 8019316:	f7f9 fd29 	bl	8012d6c <lwip_htonl>
 801931a:	4602      	mov	r2, r0
 801931c:	69fb      	ldr	r3, [r7, #28]
 801931e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019320:	69fb      	ldr	r3, [r7, #28]
 8019322:	3304      	adds	r3, #4
 8019324:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019326:	68bb      	ldr	r3, [r7, #8]
 8019328:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801932c:	2b00      	cmp	r3, #0
 801932e:	da02      	bge.n	8019336 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	2200      	movs	r2, #0
 8019334:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019336:	68bb      	ldr	r3, [r7, #8]
 8019338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801933a:	2b00      	cmp	r3, #0
 801933c:	d10c      	bne.n	8019358 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801933e:	4b35      	ldr	r3, [pc, #212]	@ (8019414 <tcp_output_segment+0x1b8>)
 8019340:	681a      	ldr	r2, [r3, #0]
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	68db      	ldr	r3, [r3, #12]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	4618      	mov	r0, r3
 801934e:	f7f9 fd0d 	bl	8012d6c <lwip_htonl>
 8019352:	4602      	mov	r2, r0
 8019354:	68bb      	ldr	r3, [r7, #8]
 8019356:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	68da      	ldr	r2, [r3, #12]
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	685b      	ldr	r3, [r3, #4]
 8019360:	685b      	ldr	r3, [r3, #4]
 8019362:	1ad3      	subs	r3, r2, r3
 8019364:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	8959      	ldrh	r1, [r3, #10]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	8b3a      	ldrh	r2, [r7, #24]
 8019372:	1a8a      	subs	r2, r1, r2
 8019374:	b292      	uxth	r2, r2
 8019376:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	685b      	ldr	r3, [r3, #4]
 801937c:	8919      	ldrh	r1, [r3, #8]
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	685b      	ldr	r3, [r3, #4]
 8019382:	8b3a      	ldrh	r2, [r7, #24]
 8019384:	1a8a      	subs	r2, r1, r2
 8019386:	b292      	uxth	r2, r2
 8019388:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	685b      	ldr	r3, [r3, #4]
 801938e:	68fa      	ldr	r2, [r7, #12]
 8019390:	68d2      	ldr	r2, [r2, #12]
 8019392:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	2200      	movs	r2, #0
 801939a:	741a      	strb	r2, [r3, #16]
 801939c:	2200      	movs	r2, #0
 801939e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	68da      	ldr	r2, [r3, #12]
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	7a9b      	ldrb	r3, [r3, #10]
 80193a8:	f003 0301 	and.w	r3, r3, #1
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d001      	beq.n	80193b4 <tcp_output_segment+0x158>
 80193b0:	2318      	movs	r3, #24
 80193b2:	e000      	b.n	80193b6 <tcp_output_segment+0x15a>
 80193b4:	2314      	movs	r3, #20
 80193b6:	4413      	add	r3, r2
 80193b8:	69fa      	ldr	r2, [r7, #28]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d006      	beq.n	80193cc <tcp_output_segment+0x170>
 80193be:	4b10      	ldr	r3, [pc, #64]	@ (8019400 <tcp_output_segment+0x1a4>)
 80193c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80193c4:	4914      	ldr	r1, [pc, #80]	@ (8019418 <tcp_output_segment+0x1bc>)
 80193c6:	4810      	ldr	r0, [pc, #64]	@ (8019408 <tcp_output_segment+0x1ac>)
 80193c8:	f004 fe02 	bl	801dfd0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6858      	ldr	r0, [r3, #4]
 80193d0:	68b9      	ldr	r1, [r7, #8]
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	1d1c      	adds	r4, r3, #4
 80193d6:	68bb      	ldr	r3, [r7, #8]
 80193d8:	7add      	ldrb	r5, [r3, #11]
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	7a9b      	ldrb	r3, [r3, #10]
 80193de:	687a      	ldr	r2, [r7, #4]
 80193e0:	9202      	str	r2, [sp, #8]
 80193e2:	2206      	movs	r2, #6
 80193e4:	9201      	str	r2, [sp, #4]
 80193e6:	9300      	str	r3, [sp, #0]
 80193e8:	462b      	mov	r3, r5
 80193ea:	4622      	mov	r2, r4
 80193ec:	f002 fd12 	bl	801be14 <ip4_output_if>
 80193f0:	4603      	mov	r3, r0
 80193f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80193f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80193f8:	4618      	mov	r0, r3
 80193fa:	3720      	adds	r7, #32
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bdb0      	pop	{r4, r5, r7, pc}
 8019400:	080208e0 	.word	0x080208e0
 8019404:	08020ea4 	.word	0x08020ea4
 8019408:	08020934 	.word	0x08020934
 801940c:	08020ec4 	.word	0x08020ec4
 8019410:	08020ee4 	.word	0x08020ee4
 8019414:	200277b0 	.word	0x200277b0
 8019418:	08020f08 	.word	0x08020f08

0801941c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801941c:	b5b0      	push	{r4, r5, r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d106      	bne.n	8019438 <tcp_rexmit_rto_prepare+0x1c>
 801942a:	4b31      	ldr	r3, [pc, #196]	@ (80194f0 <tcp_rexmit_rto_prepare+0xd4>)
 801942c:	f240 6263 	movw	r2, #1635	@ 0x663
 8019430:	4930      	ldr	r1, [pc, #192]	@ (80194f4 <tcp_rexmit_rto_prepare+0xd8>)
 8019432:	4831      	ldr	r0, [pc, #196]	@ (80194f8 <tcp_rexmit_rto_prepare+0xdc>)
 8019434:	f004 fdcc 	bl	801dfd0 <iprintf>

  if (pcb->unacked == NULL) {
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801943c:	2b00      	cmp	r3, #0
 801943e:	d102      	bne.n	8019446 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019440:	f06f 0305 	mvn.w	r3, #5
 8019444:	e050      	b.n	80194e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801944a:	60fb      	str	r3, [r7, #12]
 801944c:	e00b      	b.n	8019466 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801944e:	68f8      	ldr	r0, [r7, #12]
 8019450:	f7ff fee4 	bl	801921c <tcp_output_segment_busy>
 8019454:	4603      	mov	r3, r0
 8019456:	2b00      	cmp	r3, #0
 8019458:	d002      	beq.n	8019460 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801945a:	f06f 0305 	mvn.w	r3, #5
 801945e:	e043      	b.n	80194e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	60fb      	str	r3, [r7, #12]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d1ef      	bne.n	801944e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801946e:	68f8      	ldr	r0, [r7, #12]
 8019470:	f7ff fed4 	bl	801921c <tcp_output_segment_busy>
 8019474:	4603      	mov	r3, r0
 8019476:	2b00      	cmp	r3, #0
 8019478:	d002      	beq.n	8019480 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801947a:	f06f 0305 	mvn.w	r3, #5
 801947e:	e033      	b.n	80194e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2200      	movs	r2, #0
 8019494:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	8b5b      	ldrh	r3, [r3, #26]
 801949a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801949e:	b29a      	uxth	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	685b      	ldr	r3, [r3, #4]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7f9 fc5e 	bl	8012d6c <lwip_htonl>
 80194b0:	4604      	mov	r4, r0
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	891b      	ldrh	r3, [r3, #8]
 80194b6:	461d      	mov	r5, r3
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	68db      	ldr	r3, [r3, #12]
 80194bc:	899b      	ldrh	r3, [r3, #12]
 80194be:	b29b      	uxth	r3, r3
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7f9 fc3d 	bl	8012d40 <lwip_htons>
 80194c6:	4603      	mov	r3, r0
 80194c8:	b2db      	uxtb	r3, r3
 80194ca:	f003 0303 	and.w	r3, r3, #3
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d001      	beq.n	80194d6 <tcp_rexmit_rto_prepare+0xba>
 80194d2:	2301      	movs	r3, #1
 80194d4:	e000      	b.n	80194d8 <tcp_rexmit_rto_prepare+0xbc>
 80194d6:	2300      	movs	r3, #0
 80194d8:	442b      	add	r3, r5
 80194da:	18e2      	adds	r2, r4, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2200      	movs	r2, #0
 80194e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80194e6:	2300      	movs	r3, #0
}
 80194e8:	4618      	mov	r0, r3
 80194ea:	3710      	adds	r7, #16
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bdb0      	pop	{r4, r5, r7, pc}
 80194f0:	080208e0 	.word	0x080208e0
 80194f4:	08020f1c 	.word	0x08020f1c
 80194f8:	08020934 	.word	0x08020934

080194fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d106      	bne.n	8019518 <tcp_rexmit_rto_commit+0x1c>
 801950a:	4b0d      	ldr	r3, [pc, #52]	@ (8019540 <tcp_rexmit_rto_commit+0x44>)
 801950c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019510:	490c      	ldr	r1, [pc, #48]	@ (8019544 <tcp_rexmit_rto_commit+0x48>)
 8019512:	480d      	ldr	r0, [pc, #52]	@ (8019548 <tcp_rexmit_rto_commit+0x4c>)
 8019514:	f004 fd5c 	bl	801dfd0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801951e:	2bff      	cmp	r3, #255	@ 0xff
 8019520:	d007      	beq.n	8019532 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019528:	3301      	adds	r3, #1
 801952a:	b2da      	uxtb	r2, r3
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019532:	6878      	ldr	r0, [r7, #4]
 8019534:	f7ff fc7e 	bl	8018e34 <tcp_output>
}
 8019538:	bf00      	nop
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}
 8019540:	080208e0 	.word	0x080208e0
 8019544:	08020f40 	.word	0x08020f40
 8019548:	08020934 	.word	0x08020934

0801954c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b082      	sub	sp, #8
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d106      	bne.n	8019568 <tcp_rexmit_rto+0x1c>
 801955a:	4b0a      	ldr	r3, [pc, #40]	@ (8019584 <tcp_rexmit_rto+0x38>)
 801955c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019560:	4909      	ldr	r1, [pc, #36]	@ (8019588 <tcp_rexmit_rto+0x3c>)
 8019562:	480a      	ldr	r0, [pc, #40]	@ (801958c <tcp_rexmit_rto+0x40>)
 8019564:	f004 fd34 	bl	801dfd0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7ff ff57 	bl	801941c <tcp_rexmit_rto_prepare>
 801956e:	4603      	mov	r3, r0
 8019570:	2b00      	cmp	r3, #0
 8019572:	d102      	bne.n	801957a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f7ff ffc1 	bl	80194fc <tcp_rexmit_rto_commit>
  }
}
 801957a:	bf00      	nop
 801957c:	3708      	adds	r7, #8
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}
 8019582:	bf00      	nop
 8019584:	080208e0 	.word	0x080208e0
 8019588:	08020f64 	.word	0x08020f64
 801958c:	08020934 	.word	0x08020934

08019590 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019590:	b590      	push	{r4, r7, lr}
 8019592:	b085      	sub	sp, #20
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d106      	bne.n	80195ac <tcp_rexmit+0x1c>
 801959e:	4b2f      	ldr	r3, [pc, #188]	@ (801965c <tcp_rexmit+0xcc>)
 80195a0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80195a4:	492e      	ldr	r1, [pc, #184]	@ (8019660 <tcp_rexmit+0xd0>)
 80195a6:	482f      	ldr	r0, [pc, #188]	@ (8019664 <tcp_rexmit+0xd4>)
 80195a8:	f004 fd12 	bl	801dfd0 <iprintf>

  if (pcb->unacked == NULL) {
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d102      	bne.n	80195ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80195b4:	f06f 0305 	mvn.w	r3, #5
 80195b8:	e04c      	b.n	8019654 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80195c0:	68b8      	ldr	r0, [r7, #8]
 80195c2:	f7ff fe2b 	bl	801921c <tcp_output_segment_busy>
 80195c6:	4603      	mov	r3, r0
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d002      	beq.n	80195d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80195cc:	f06f 0305 	mvn.w	r3, #5
 80195d0:	e040      	b.n	8019654 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	336c      	adds	r3, #108	@ 0x6c
 80195de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80195e0:	e002      	b.n	80195e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d011      	beq.n	8019614 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	68db      	ldr	r3, [r3, #12]
 80195f6:	685b      	ldr	r3, [r3, #4]
 80195f8:	4618      	mov	r0, r3
 80195fa:	f7f9 fbb7 	bl	8012d6c <lwip_htonl>
 80195fe:	4604      	mov	r4, r0
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	68db      	ldr	r3, [r3, #12]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	4618      	mov	r0, r3
 8019608:	f7f9 fbb0 	bl	8012d6c <lwip_htonl>
 801960c:	4603      	mov	r3, r0
 801960e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019610:	2b00      	cmp	r3, #0
 8019612:	dbe6      	blt.n	80195e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	681a      	ldr	r2, [r3, #0]
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	68ba      	ldr	r2, [r7, #8]
 8019620:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019622:	68bb      	ldr	r3, [r7, #8]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d103      	bne.n	8019632 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2200      	movs	r2, #0
 801962e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019638:	2bff      	cmp	r3, #255	@ 0xff
 801963a:	d007      	beq.n	801964c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019642:	3301      	adds	r3, #1
 8019644:	b2da      	uxtb	r2, r3
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2200      	movs	r2, #0
 8019650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019652:	2300      	movs	r3, #0
}
 8019654:	4618      	mov	r0, r3
 8019656:	3714      	adds	r7, #20
 8019658:	46bd      	mov	sp, r7
 801965a:	bd90      	pop	{r4, r7, pc}
 801965c:	080208e0 	.word	0x080208e0
 8019660:	08020f80 	.word	0x08020f80
 8019664:	08020934 	.word	0x08020934

08019668 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d106      	bne.n	8019684 <tcp_rexmit_fast+0x1c>
 8019676:	4b2a      	ldr	r3, [pc, #168]	@ (8019720 <tcp_rexmit_fast+0xb8>)
 8019678:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801967c:	4929      	ldr	r1, [pc, #164]	@ (8019724 <tcp_rexmit_fast+0xbc>)
 801967e:	482a      	ldr	r0, [pc, #168]	@ (8019728 <tcp_rexmit_fast+0xc0>)
 8019680:	f004 fca6 	bl	801dfd0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019688:	2b00      	cmp	r3, #0
 801968a:	d045      	beq.n	8019718 <tcp_rexmit_fast+0xb0>
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	8b5b      	ldrh	r3, [r3, #26]
 8019690:	f003 0304 	and.w	r3, r3, #4
 8019694:	2b00      	cmp	r3, #0
 8019696:	d13f      	bne.n	8019718 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	f7ff ff79 	bl	8019590 <tcp_rexmit>
 801969e:	4603      	mov	r3, r0
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d139      	bne.n	8019718 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80196b0:	4293      	cmp	r3, r2
 80196b2:	bf28      	it	cs
 80196b4:	4613      	movcs	r3, r2
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	da00      	bge.n	80196be <tcp_rexmit_fast+0x56>
 80196bc:	3301      	adds	r3, #1
 80196be:	105b      	asrs	r3, r3, #1
 80196c0:	b29a      	uxth	r2, r3
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80196ce:	461a      	mov	r2, r3
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196d4:	005b      	lsls	r3, r3, #1
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d206      	bcs.n	80196e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196de:	005b      	lsls	r3, r3, #1
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196f2:	4619      	mov	r1, r3
 80196f4:	0049      	lsls	r1, r1, #1
 80196f6:	440b      	add	r3, r1
 80196f8:	b29b      	uxth	r3, r3
 80196fa:	4413      	add	r3, r2
 80196fc:	b29a      	uxth	r2, r3
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	8b5b      	ldrh	r3, [r3, #26]
 8019708:	f043 0304 	orr.w	r3, r3, #4
 801970c:	b29a      	uxth	r2, r3
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2200      	movs	r2, #0
 8019716:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019718:	bf00      	nop
 801971a:	3708      	adds	r7, #8
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}
 8019720:	080208e0 	.word	0x080208e0
 8019724:	08020f98 	.word	0x08020f98
 8019728:	08020934 	.word	0x08020934

0801972c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b086      	sub	sp, #24
 8019730:	af00      	add	r7, sp, #0
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	607b      	str	r3, [r7, #4]
 8019736:	460b      	mov	r3, r1
 8019738:	817b      	strh	r3, [r7, #10]
 801973a:	4613      	mov	r3, r2
 801973c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801973e:	897a      	ldrh	r2, [r7, #10]
 8019740:	893b      	ldrh	r3, [r7, #8]
 8019742:	4413      	add	r3, r2
 8019744:	b29b      	uxth	r3, r3
 8019746:	3314      	adds	r3, #20
 8019748:	b29b      	uxth	r3, r3
 801974a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801974e:	4619      	mov	r1, r3
 8019750:	2022      	movs	r0, #34	@ 0x22
 8019752:	f7fa fbff 	bl	8013f54 <pbuf_alloc>
 8019756:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d04d      	beq.n	80197fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801975e:	897b      	ldrh	r3, [r7, #10]
 8019760:	3313      	adds	r3, #19
 8019762:	697a      	ldr	r2, [r7, #20]
 8019764:	8952      	ldrh	r2, [r2, #10]
 8019766:	4293      	cmp	r3, r2
 8019768:	db06      	blt.n	8019778 <tcp_output_alloc_header_common+0x4c>
 801976a:	4b26      	ldr	r3, [pc, #152]	@ (8019804 <tcp_output_alloc_header_common+0xd8>)
 801976c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019770:	4925      	ldr	r1, [pc, #148]	@ (8019808 <tcp_output_alloc_header_common+0xdc>)
 8019772:	4826      	ldr	r0, [pc, #152]	@ (801980c <tcp_output_alloc_header_common+0xe0>)
 8019774:	f004 fc2c 	bl	801dfd0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801977e:	8c3b      	ldrh	r3, [r7, #32]
 8019780:	4618      	mov	r0, r3
 8019782:	f7f9 fadd 	bl	8012d40 <lwip_htons>
 8019786:	4603      	mov	r3, r0
 8019788:	461a      	mov	r2, r3
 801978a:	693b      	ldr	r3, [r7, #16]
 801978c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801978e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019790:	4618      	mov	r0, r3
 8019792:	f7f9 fad5 	bl	8012d40 <lwip_htons>
 8019796:	4603      	mov	r3, r0
 8019798:	461a      	mov	r2, r3
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	687a      	ldr	r2, [r7, #4]
 80197a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80197a4:	68f8      	ldr	r0, [r7, #12]
 80197a6:	f7f9 fae1 	bl	8012d6c <lwip_htonl>
 80197aa:	4602      	mov	r2, r0
 80197ac:	693b      	ldr	r3, [r7, #16]
 80197ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80197b0:	897b      	ldrh	r3, [r7, #10]
 80197b2:	089b      	lsrs	r3, r3, #2
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	3305      	adds	r3, #5
 80197b8:	b29b      	uxth	r3, r3
 80197ba:	031b      	lsls	r3, r3, #12
 80197bc:	b29a      	uxth	r2, r3
 80197be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	4313      	orrs	r3, r2
 80197c6:	b29b      	uxth	r3, r3
 80197c8:	4618      	mov	r0, r3
 80197ca:	f7f9 fab9 	bl	8012d40 <lwip_htons>
 80197ce:	4603      	mov	r3, r0
 80197d0:	461a      	mov	r2, r3
 80197d2:	693b      	ldr	r3, [r7, #16]
 80197d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80197d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80197d8:	4618      	mov	r0, r3
 80197da:	f7f9 fab1 	bl	8012d40 <lwip_htons>
 80197de:	4603      	mov	r3, r0
 80197e0:	461a      	mov	r2, r3
 80197e2:	693b      	ldr	r3, [r7, #16]
 80197e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	2200      	movs	r2, #0
 80197ea:	741a      	strb	r2, [r3, #16]
 80197ec:	2200      	movs	r2, #0
 80197ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	2200      	movs	r2, #0
 80197f4:	749a      	strb	r2, [r3, #18]
 80197f6:	2200      	movs	r2, #0
 80197f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80197fa:	697b      	ldr	r3, [r7, #20]
}
 80197fc:	4618      	mov	r0, r3
 80197fe:	3718      	adds	r7, #24
 8019800:	46bd      	mov	sp, r7
 8019802:	bd80      	pop	{r7, pc}
 8019804:	080208e0 	.word	0x080208e0
 8019808:	08020fb8 	.word	0x08020fb8
 801980c:	08020934 	.word	0x08020934

08019810 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019810:	b5b0      	push	{r4, r5, r7, lr}
 8019812:	b08a      	sub	sp, #40	@ 0x28
 8019814:	af04      	add	r7, sp, #16
 8019816:	60f8      	str	r0, [r7, #12]
 8019818:	607b      	str	r3, [r7, #4]
 801981a:	460b      	mov	r3, r1
 801981c:	817b      	strh	r3, [r7, #10]
 801981e:	4613      	mov	r3, r2
 8019820:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d106      	bne.n	8019836 <tcp_output_alloc_header+0x26>
 8019828:	4b15      	ldr	r3, [pc, #84]	@ (8019880 <tcp_output_alloc_header+0x70>)
 801982a:	f240 7242 	movw	r2, #1858	@ 0x742
 801982e:	4915      	ldr	r1, [pc, #84]	@ (8019884 <tcp_output_alloc_header+0x74>)
 8019830:	4815      	ldr	r0, [pc, #84]	@ (8019888 <tcp_output_alloc_header+0x78>)
 8019832:	f004 fbcd 	bl	801dfd0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	8adb      	ldrh	r3, [r3, #22]
 801983e:	68fa      	ldr	r2, [r7, #12]
 8019840:	8b12      	ldrh	r2, [r2, #24]
 8019842:	68f9      	ldr	r1, [r7, #12]
 8019844:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019846:	893d      	ldrh	r5, [r7, #8]
 8019848:	897c      	ldrh	r4, [r7, #10]
 801984a:	9103      	str	r1, [sp, #12]
 801984c:	2110      	movs	r1, #16
 801984e:	9102      	str	r1, [sp, #8]
 8019850:	9201      	str	r2, [sp, #4]
 8019852:	9300      	str	r3, [sp, #0]
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	462a      	mov	r2, r5
 8019858:	4621      	mov	r1, r4
 801985a:	f7ff ff67 	bl	801972c <tcp_output_alloc_header_common>
 801985e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d006      	beq.n	8019874 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801986a:	68fa      	ldr	r2, [r7, #12]
 801986c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801986e:	441a      	add	r2, r3
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019874:	697b      	ldr	r3, [r7, #20]
}
 8019876:	4618      	mov	r0, r3
 8019878:	3718      	adds	r7, #24
 801987a:	46bd      	mov	sp, r7
 801987c:	bdb0      	pop	{r4, r5, r7, pc}
 801987e:	bf00      	nop
 8019880:	080208e0 	.word	0x080208e0
 8019884:	08020fe8 	.word	0x08020fe8
 8019888:	08020934 	.word	0x08020934

0801988c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b088      	sub	sp, #32
 8019890:	af00      	add	r7, sp, #0
 8019892:	60f8      	str	r0, [r7, #12]
 8019894:	60b9      	str	r1, [r7, #8]
 8019896:	4611      	mov	r1, r2
 8019898:	461a      	mov	r2, r3
 801989a:	460b      	mov	r3, r1
 801989c:	71fb      	strb	r3, [r7, #7]
 801989e:	4613      	mov	r3, r2
 80198a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80198a2:	2300      	movs	r3, #0
 80198a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d106      	bne.n	80198ba <tcp_output_fill_options+0x2e>
 80198ac:	4b12      	ldr	r3, [pc, #72]	@ (80198f8 <tcp_output_fill_options+0x6c>)
 80198ae:	f240 7256 	movw	r2, #1878	@ 0x756
 80198b2:	4912      	ldr	r1, [pc, #72]	@ (80198fc <tcp_output_fill_options+0x70>)
 80198b4:	4812      	ldr	r0, [pc, #72]	@ (8019900 <tcp_output_fill_options+0x74>)
 80198b6:	f004 fb8b 	bl	801dfd0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80198c0:	69bb      	ldr	r3, [r7, #24]
 80198c2:	3314      	adds	r3, #20
 80198c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80198c6:	8bfb      	ldrh	r3, [r7, #30]
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	461a      	mov	r2, r3
 80198cc:	79fb      	ldrb	r3, [r7, #7]
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	f003 0304 	and.w	r3, r3, #4
 80198d4:	4413      	add	r3, r2
 80198d6:	3314      	adds	r3, #20
 80198d8:	69ba      	ldr	r2, [r7, #24]
 80198da:	4413      	add	r3, r2
 80198dc:	697a      	ldr	r2, [r7, #20]
 80198de:	429a      	cmp	r2, r3
 80198e0:	d006      	beq.n	80198f0 <tcp_output_fill_options+0x64>
 80198e2:	4b05      	ldr	r3, [pc, #20]	@ (80198f8 <tcp_output_fill_options+0x6c>)
 80198e4:	f240 7275 	movw	r2, #1909	@ 0x775
 80198e8:	4906      	ldr	r1, [pc, #24]	@ (8019904 <tcp_output_fill_options+0x78>)
 80198ea:	4805      	ldr	r0, [pc, #20]	@ (8019900 <tcp_output_fill_options+0x74>)
 80198ec:	f004 fb70 	bl	801dfd0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80198f0:	bf00      	nop
 80198f2:	3720      	adds	r7, #32
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	080208e0 	.word	0x080208e0
 80198fc:	08021010 	.word	0x08021010
 8019900:	08020934 	.word	0x08020934
 8019904:	08020f08 	.word	0x08020f08

08019908 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b08a      	sub	sp, #40	@ 0x28
 801990c:	af04      	add	r7, sp, #16
 801990e:	60f8      	str	r0, [r7, #12]
 8019910:	60b9      	str	r1, [r7, #8]
 8019912:	607a      	str	r2, [r7, #4]
 8019914:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d106      	bne.n	801992a <tcp_output_control_segment+0x22>
 801991c:	4b1c      	ldr	r3, [pc, #112]	@ (8019990 <tcp_output_control_segment+0x88>)
 801991e:	f240 7287 	movw	r2, #1927	@ 0x787
 8019922:	491c      	ldr	r1, [pc, #112]	@ (8019994 <tcp_output_control_segment+0x8c>)
 8019924:	481c      	ldr	r0, [pc, #112]	@ (8019998 <tcp_output_control_segment+0x90>)
 8019926:	f004 fb53 	bl	801dfd0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801992a:	683a      	ldr	r2, [r7, #0]
 801992c:	6879      	ldr	r1, [r7, #4]
 801992e:	68f8      	ldr	r0, [r7, #12]
 8019930:	f7fe ff42 	bl	80187b8 <tcp_route>
 8019934:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d102      	bne.n	8019942 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801993c:	23fc      	movs	r3, #252	@ 0xfc
 801993e:	75fb      	strb	r3, [r7, #23]
 8019940:	e01c      	b.n	801997c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d006      	beq.n	8019956 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	7adb      	ldrb	r3, [r3, #11]
 801994c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	7a9b      	ldrb	r3, [r3, #10]
 8019952:	757b      	strb	r3, [r7, #21]
 8019954:	e003      	b.n	801995e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019956:	23ff      	movs	r3, #255	@ 0xff
 8019958:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801995a:	2300      	movs	r3, #0
 801995c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801995e:	7dba      	ldrb	r2, [r7, #22]
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	9302      	str	r3, [sp, #8]
 8019964:	2306      	movs	r3, #6
 8019966:	9301      	str	r3, [sp, #4]
 8019968:	7d7b      	ldrb	r3, [r7, #21]
 801996a:	9300      	str	r3, [sp, #0]
 801996c:	4613      	mov	r3, r2
 801996e:	683a      	ldr	r2, [r7, #0]
 8019970:	6879      	ldr	r1, [r7, #4]
 8019972:	68b8      	ldr	r0, [r7, #8]
 8019974:	f002 fa4e 	bl	801be14 <ip4_output_if>
 8019978:	4603      	mov	r3, r0
 801997a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801997c:	68b8      	ldr	r0, [r7, #8]
 801997e:	f7fa fdcd 	bl	801451c <pbuf_free>
  return err;
 8019982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019986:	4618      	mov	r0, r3
 8019988:	3718      	adds	r7, #24
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
 801998e:	bf00      	nop
 8019990:	080208e0 	.word	0x080208e0
 8019994:	08021038 	.word	0x08021038
 8019998:	08020934 	.word	0x08020934

0801999c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801999c:	b590      	push	{r4, r7, lr}
 801999e:	b08b      	sub	sp, #44	@ 0x2c
 80199a0:	af04      	add	r7, sp, #16
 80199a2:	60f8      	str	r0, [r7, #12]
 80199a4:	60b9      	str	r1, [r7, #8]
 80199a6:	607a      	str	r2, [r7, #4]
 80199a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80199aa:	683b      	ldr	r3, [r7, #0]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d106      	bne.n	80199be <tcp_rst+0x22>
 80199b0:	4b1f      	ldr	r3, [pc, #124]	@ (8019a30 <tcp_rst+0x94>)
 80199b2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80199b6:	491f      	ldr	r1, [pc, #124]	@ (8019a34 <tcp_rst+0x98>)
 80199b8:	481f      	ldr	r0, [pc, #124]	@ (8019a38 <tcp_rst+0x9c>)
 80199ba:	f004 fb09 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80199be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d106      	bne.n	80199d2 <tcp_rst+0x36>
 80199c4:	4b1a      	ldr	r3, [pc, #104]	@ (8019a30 <tcp_rst+0x94>)
 80199c6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80199ca:	491c      	ldr	r1, [pc, #112]	@ (8019a3c <tcp_rst+0xa0>)
 80199cc:	481a      	ldr	r0, [pc, #104]	@ (8019a38 <tcp_rst+0x9c>)
 80199ce:	f004 faff 	bl	801dfd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80199d2:	2300      	movs	r3, #0
 80199d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80199d6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80199da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80199dc:	7dfb      	ldrb	r3, [r7, #23]
 80199de:	b29c      	uxth	r4, r3
 80199e0:	68b8      	ldr	r0, [r7, #8]
 80199e2:	f7f9 f9c3 	bl	8012d6c <lwip_htonl>
 80199e6:	4602      	mov	r2, r0
 80199e8:	8abb      	ldrh	r3, [r7, #20]
 80199ea:	9303      	str	r3, [sp, #12]
 80199ec:	2314      	movs	r3, #20
 80199ee:	9302      	str	r3, [sp, #8]
 80199f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80199f2:	9301      	str	r3, [sp, #4]
 80199f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	4613      	mov	r3, r2
 80199fa:	2200      	movs	r2, #0
 80199fc:	4621      	mov	r1, r4
 80199fe:	6878      	ldr	r0, [r7, #4]
 8019a00:	f7ff fe94 	bl	801972c <tcp_output_alloc_header_common>
 8019a04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d00c      	beq.n	8019a26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019a0c:	7dfb      	ldrb	r3, [r7, #23]
 8019a0e:	2200      	movs	r2, #0
 8019a10:	6939      	ldr	r1, [r7, #16]
 8019a12:	68f8      	ldr	r0, [r7, #12]
 8019a14:	f7ff ff3a 	bl	801988c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a1a:	683a      	ldr	r2, [r7, #0]
 8019a1c:	6939      	ldr	r1, [r7, #16]
 8019a1e:	68f8      	ldr	r0, [r7, #12]
 8019a20:	f7ff ff72 	bl	8019908 <tcp_output_control_segment>
 8019a24:	e000      	b.n	8019a28 <tcp_rst+0x8c>
    return;
 8019a26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019a28:	371c      	adds	r7, #28
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	bd90      	pop	{r4, r7, pc}
 8019a2e:	bf00      	nop
 8019a30:	080208e0 	.word	0x080208e0
 8019a34:	08021064 	.word	0x08021064
 8019a38:	08020934 	.word	0x08020934
 8019a3c:	08021080 	.word	0x08021080

08019a40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019a40:	b590      	push	{r4, r7, lr}
 8019a42:	b087      	sub	sp, #28
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d106      	bne.n	8019a64 <tcp_send_empty_ack+0x24>
 8019a56:	4b28      	ldr	r3, [pc, #160]	@ (8019af8 <tcp_send_empty_ack+0xb8>)
 8019a58:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019a5c:	4927      	ldr	r1, [pc, #156]	@ (8019afc <tcp_send_empty_ack+0xbc>)
 8019a5e:	4828      	ldr	r0, [pc, #160]	@ (8019b00 <tcp_send_empty_ack+0xc0>)
 8019a60:	f004 fab6 	bl	801dfd0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a64:	7dfb      	ldrb	r3, [r7, #23]
 8019a66:	009b      	lsls	r3, r3, #2
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	f003 0304 	and.w	r3, r3, #4
 8019a6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019a70:	7d7b      	ldrb	r3, [r7, #21]
 8019a72:	b29c      	uxth	r4, r3
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f7f9 f977 	bl	8012d6c <lwip_htonl>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2200      	movs	r2, #0
 8019a82:	4621      	mov	r1, r4
 8019a84:	6878      	ldr	r0, [r7, #4]
 8019a86:	f7ff fec3 	bl	8019810 <tcp_output_alloc_header>
 8019a8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019a8c:	693b      	ldr	r3, [r7, #16]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d109      	bne.n	8019aa6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	8b5b      	ldrh	r3, [r3, #26]
 8019a96:	f043 0303 	orr.w	r3, r3, #3
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019aa0:	f06f 0301 	mvn.w	r3, #1
 8019aa4:	e023      	b.n	8019aee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019aa6:	7dbb      	ldrb	r3, [r7, #22]
 8019aa8:	7dfa      	ldrb	r2, [r7, #23]
 8019aaa:	6939      	ldr	r1, [r7, #16]
 8019aac:	6878      	ldr	r0, [r7, #4]
 8019aae:	f7ff feed 	bl	801988c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	3304      	adds	r3, #4
 8019ab8:	6939      	ldr	r1, [r7, #16]
 8019aba:	6878      	ldr	r0, [r7, #4]
 8019abc:	f7ff ff24 	bl	8019908 <tcp_output_control_segment>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d007      	beq.n	8019adc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	8b5b      	ldrh	r3, [r3, #26]
 8019ad0:	f043 0303 	orr.w	r3, r3, #3
 8019ad4:	b29a      	uxth	r2, r3
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	835a      	strh	r2, [r3, #26]
 8019ada:	e006      	b.n	8019aea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	8b5b      	ldrh	r3, [r3, #26]
 8019ae0:	f023 0303 	bic.w	r3, r3, #3
 8019ae4:	b29a      	uxth	r2, r3
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	371c      	adds	r7, #28
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd90      	pop	{r4, r7, pc}
 8019af6:	bf00      	nop
 8019af8:	080208e0 	.word	0x080208e0
 8019afc:	0802109c 	.word	0x0802109c
 8019b00:	08020934 	.word	0x08020934

08019b04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019b04:	b590      	push	{r4, r7, lr}
 8019b06:	b087      	sub	sp, #28
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d106      	bne.n	8019b24 <tcp_keepalive+0x20>
 8019b16:	4b18      	ldr	r3, [pc, #96]	@ (8019b78 <tcp_keepalive+0x74>)
 8019b18:	f640 0224 	movw	r2, #2084	@ 0x824
 8019b1c:	4917      	ldr	r1, [pc, #92]	@ (8019b7c <tcp_keepalive+0x78>)
 8019b1e:	4818      	ldr	r0, [pc, #96]	@ (8019b80 <tcp_keepalive+0x7c>)
 8019b20:	f004 fa56 	bl	801dfd0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019b24:	7dfb      	ldrb	r3, [r7, #23]
 8019b26:	b29c      	uxth	r4, r3
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b2c:	3b01      	subs	r3, #1
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f7f9 f91c 	bl	8012d6c <lwip_htonl>
 8019b34:	4603      	mov	r3, r0
 8019b36:	2200      	movs	r2, #0
 8019b38:	4621      	mov	r1, r4
 8019b3a:	6878      	ldr	r0, [r7, #4]
 8019b3c:	f7ff fe68 	bl	8019810 <tcp_output_alloc_header>
 8019b40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d102      	bne.n	8019b4e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019b48:	f04f 33ff 	mov.w	r3, #4294967295
 8019b4c:	e010      	b.n	8019b70 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019b4e:	7dfb      	ldrb	r3, [r7, #23]
 8019b50:	2200      	movs	r2, #0
 8019b52:	6939      	ldr	r1, [r7, #16]
 8019b54:	6878      	ldr	r0, [r7, #4]
 8019b56:	f7ff fe99 	bl	801988c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019b5a:	687a      	ldr	r2, [r7, #4]
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	3304      	adds	r3, #4
 8019b60:	6939      	ldr	r1, [r7, #16]
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	f7ff fed0 	bl	8019908 <tcp_output_control_segment>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	371c      	adds	r7, #28
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd90      	pop	{r4, r7, pc}
 8019b78:	080208e0 	.word	0x080208e0
 8019b7c:	080210bc 	.word	0x080210bc
 8019b80:	08020934 	.word	0x08020934

08019b84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019b84:	b590      	push	{r4, r7, lr}
 8019b86:	b08b      	sub	sp, #44	@ 0x2c
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d106      	bne.n	8019ba6 <tcp_zero_window_probe+0x22>
 8019b98:	4b4c      	ldr	r3, [pc, #304]	@ (8019ccc <tcp_zero_window_probe+0x148>)
 8019b9a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8019b9e:	494c      	ldr	r1, [pc, #304]	@ (8019cd0 <tcp_zero_window_probe+0x14c>)
 8019ba0:	484c      	ldr	r0, [pc, #304]	@ (8019cd4 <tcp_zero_window_probe+0x150>)
 8019ba2:	f004 fa15 	bl	801dfd0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019baa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019bac:	6a3b      	ldr	r3, [r7, #32]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d101      	bne.n	8019bb6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	e086      	b.n	8019cc4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019bbc:	2bff      	cmp	r3, #255	@ 0xff
 8019bbe:	d007      	beq.n	8019bd0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019bc6:	3301      	adds	r3, #1
 8019bc8:	b2da      	uxtb	r2, r3
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019bd0:	6a3b      	ldr	r3, [r7, #32]
 8019bd2:	68db      	ldr	r3, [r3, #12]
 8019bd4:	899b      	ldrh	r3, [r3, #12]
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7f9 f8b1 	bl	8012d40 <lwip_htons>
 8019bde:	4603      	mov	r3, r0
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	f003 0301 	and.w	r3, r3, #1
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d005      	beq.n	8019bf6 <tcp_zero_window_probe+0x72>
 8019bea:	6a3b      	ldr	r3, [r7, #32]
 8019bec:	891b      	ldrh	r3, [r3, #8]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d101      	bne.n	8019bf6 <tcp_zero_window_probe+0x72>
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	e000      	b.n	8019bf8 <tcp_zero_window_probe+0x74>
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019bfa:	7ffb      	ldrb	r3, [r7, #31]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	bf0c      	ite	eq
 8019c00:	2301      	moveq	r3, #1
 8019c02:	2300      	movne	r3, #0
 8019c04:	b2db      	uxtb	r3, r3
 8019c06:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c0c:	b299      	uxth	r1, r3
 8019c0e:	6a3b      	ldr	r3, [r7, #32]
 8019c10:	68db      	ldr	r3, [r3, #12]
 8019c12:	685b      	ldr	r3, [r3, #4]
 8019c14:	8bba      	ldrh	r2, [r7, #28]
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f7ff fdfa 	bl	8019810 <tcp_output_alloc_header>
 8019c1c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019c1e:	69bb      	ldr	r3, [r7, #24]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d102      	bne.n	8019c2a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019c24:	f04f 33ff 	mov.w	r3, #4294967295
 8019c28:	e04c      	b.n	8019cc4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019c2a:	69bb      	ldr	r3, [r7, #24]
 8019c2c:	685b      	ldr	r3, [r3, #4]
 8019c2e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019c30:	7ffb      	ldrb	r3, [r7, #31]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d011      	beq.n	8019c5a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	899b      	ldrh	r3, [r3, #12]
 8019c3a:	b29b      	uxth	r3, r3
 8019c3c:	b21b      	sxth	r3, r3
 8019c3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019c42:	b21c      	sxth	r4, r3
 8019c44:	2011      	movs	r0, #17
 8019c46:	f7f9 f87b 	bl	8012d40 <lwip_htons>
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	b21b      	sxth	r3, r3
 8019c4e:	4323      	orrs	r3, r4
 8019c50:	b21b      	sxth	r3, r3
 8019c52:	b29a      	uxth	r2, r3
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	819a      	strh	r2, [r3, #12]
 8019c58:	e010      	b.n	8019c7c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019c5a:	69bb      	ldr	r3, [r7, #24]
 8019c5c:	685b      	ldr	r3, [r3, #4]
 8019c5e:	3314      	adds	r3, #20
 8019c60:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019c62:	6a3b      	ldr	r3, [r7, #32]
 8019c64:	6858      	ldr	r0, [r3, #4]
 8019c66:	6a3b      	ldr	r3, [r7, #32]
 8019c68:	685b      	ldr	r3, [r3, #4]
 8019c6a:	891a      	ldrh	r2, [r3, #8]
 8019c6c:	6a3b      	ldr	r3, [r7, #32]
 8019c6e:	891b      	ldrh	r3, [r3, #8]
 8019c70:	1ad3      	subs	r3, r2, r3
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	2201      	movs	r2, #1
 8019c76:	6939      	ldr	r1, [r7, #16]
 8019c78:	f7fa fe56 	bl	8014928 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019c7c:	6a3b      	ldr	r3, [r7, #32]
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	685b      	ldr	r3, [r3, #4]
 8019c82:	4618      	mov	r0, r3
 8019c84:	f7f9 f872 	bl	8012d6c <lwip_htonl>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	1ad3      	subs	r3, r2, r3
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	da02      	bge.n	8019ca0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	68fa      	ldr	r2, [r7, #12]
 8019c9e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	69b9      	ldr	r1, [r7, #24]
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f7ff fdef 	bl	801988c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019cae:	687a      	ldr	r2, [r7, #4]
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	3304      	adds	r3, #4
 8019cb4:	69b9      	ldr	r1, [r7, #24]
 8019cb6:	6878      	ldr	r0, [r7, #4]
 8019cb8:	f7ff fe26 	bl	8019908 <tcp_output_control_segment>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019cc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	372c      	adds	r7, #44	@ 0x2c
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd90      	pop	{r4, r7, pc}
 8019ccc:	080208e0 	.word	0x080208e0
 8019cd0:	080210d8 	.word	0x080210d8
 8019cd4:	08020934 	.word	0x08020934

08019cd8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019ce0:	f7fa ff10 	bl	8014b04 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8019d10 <tcpip_tcp_timer+0x38>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d103      	bne.n	8019cf4 <tcpip_tcp_timer+0x1c>
 8019cec:	4b09      	ldr	r3, [pc, #36]	@ (8019d14 <tcpip_tcp_timer+0x3c>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d005      	beq.n	8019d00 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	4908      	ldr	r1, [pc, #32]	@ (8019d18 <tcpip_tcp_timer+0x40>)
 8019cf8:	20fa      	movs	r0, #250	@ 0xfa
 8019cfa:	f000 f8f3 	bl	8019ee4 <sys_timeout>
 8019cfe:	e003      	b.n	8019d08 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019d00:	4b06      	ldr	r3, [pc, #24]	@ (8019d1c <tcpip_tcp_timer+0x44>)
 8019d02:	2200      	movs	r2, #0
 8019d04:	601a      	str	r2, [r3, #0]
  }
}
 8019d06:	bf00      	nop
 8019d08:	bf00      	nop
 8019d0a:	3708      	adds	r7, #8
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}
 8019d10:	200277bc 	.word	0x200277bc
 8019d14:	200277c0 	.word	0x200277c0
 8019d18:	08019cd9 	.word	0x08019cd9
 8019d1c:	20027808 	.word	0x20027808

08019d20 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019d24:	4b0a      	ldr	r3, [pc, #40]	@ (8019d50 <tcp_timer_needed+0x30>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d10f      	bne.n	8019d4c <tcp_timer_needed+0x2c>
 8019d2c:	4b09      	ldr	r3, [pc, #36]	@ (8019d54 <tcp_timer_needed+0x34>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d103      	bne.n	8019d3c <tcp_timer_needed+0x1c>
 8019d34:	4b08      	ldr	r3, [pc, #32]	@ (8019d58 <tcp_timer_needed+0x38>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d007      	beq.n	8019d4c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019d3c:	4b04      	ldr	r3, [pc, #16]	@ (8019d50 <tcp_timer_needed+0x30>)
 8019d3e:	2201      	movs	r2, #1
 8019d40:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019d42:	2200      	movs	r2, #0
 8019d44:	4905      	ldr	r1, [pc, #20]	@ (8019d5c <tcp_timer_needed+0x3c>)
 8019d46:	20fa      	movs	r0, #250	@ 0xfa
 8019d48:	f000 f8cc 	bl	8019ee4 <sys_timeout>
  }
}
 8019d4c:	bf00      	nop
 8019d4e:	bd80      	pop	{r7, pc}
 8019d50:	20027808 	.word	0x20027808
 8019d54:	200277bc 	.word	0x200277bc
 8019d58:	200277c0 	.word	0x200277c0
 8019d5c:	08019cd9 	.word	0x08019cd9

08019d60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b086      	sub	sp, #24
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	60f8      	str	r0, [r7, #12]
 8019d68:	60b9      	str	r1, [r7, #8]
 8019d6a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019d6c:	200a      	movs	r0, #10
 8019d6e:	f7f9 fcbb 	bl	80136e8 <memp_malloc>
 8019d72:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019d74:	693b      	ldr	r3, [r7, #16]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d109      	bne.n	8019d8e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019d7a:	693b      	ldr	r3, [r7, #16]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d151      	bne.n	8019e24 <sys_timeout_abs+0xc4>
 8019d80:	4b2a      	ldr	r3, [pc, #168]	@ (8019e2c <sys_timeout_abs+0xcc>)
 8019d82:	22be      	movs	r2, #190	@ 0xbe
 8019d84:	492a      	ldr	r1, [pc, #168]	@ (8019e30 <sys_timeout_abs+0xd0>)
 8019d86:	482b      	ldr	r0, [pc, #172]	@ (8019e34 <sys_timeout_abs+0xd4>)
 8019d88:	f004 f922 	bl	801dfd0 <iprintf>
    return;
 8019d8c:	e04a      	b.n	8019e24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	2200      	movs	r2, #0
 8019d92:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	68ba      	ldr	r2, [r7, #8]
 8019d98:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019d9a:	693b      	ldr	r3, [r7, #16]
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	68fa      	ldr	r2, [r7, #12]
 8019da4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019da6:	4b24      	ldr	r3, [pc, #144]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d103      	bne.n	8019db6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019dae:	4a22      	ldr	r2, [pc, #136]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019db0:	693b      	ldr	r3, [r7, #16]
 8019db2:	6013      	str	r3, [r2, #0]
    return;
 8019db4:	e037      	b.n	8019e26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	685a      	ldr	r2, [r3, #4]
 8019dba:	4b1f      	ldr	r3, [pc, #124]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	0fdb      	lsrs	r3, r3, #31
 8019dc4:	f003 0301 	and.w	r3, r3, #1
 8019dc8:	b2db      	uxtb	r3, r3
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d007      	beq.n	8019dde <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019dce:	4b1a      	ldr	r3, [pc, #104]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019dd0:	681a      	ldr	r2, [r3, #0]
 8019dd2:	693b      	ldr	r3, [r7, #16]
 8019dd4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019dd6:	4a18      	ldr	r2, [pc, #96]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019dd8:	693b      	ldr	r3, [r7, #16]
 8019dda:	6013      	str	r3, [r2, #0]
 8019ddc:	e023      	b.n	8019e26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019dde:	4b16      	ldr	r3, [pc, #88]	@ (8019e38 <sys_timeout_abs+0xd8>)
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	617b      	str	r3, [r7, #20]
 8019de4:	e01a      	b.n	8019e1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019de6:	697b      	ldr	r3, [r7, #20]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d00b      	beq.n	8019e06 <sys_timeout_abs+0xa6>
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	685a      	ldr	r2, [r3, #4]
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	685b      	ldr	r3, [r3, #4]
 8019df8:	1ad3      	subs	r3, r2, r3
 8019dfa:	0fdb      	lsrs	r3, r3, #31
 8019dfc:	f003 0301 	and.w	r3, r3, #1
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d007      	beq.n	8019e16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	681a      	ldr	r2, [r3, #0]
 8019e0a:	693b      	ldr	r3, [r7, #16]
 8019e0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019e0e:	697b      	ldr	r3, [r7, #20]
 8019e10:	693a      	ldr	r2, [r7, #16]
 8019e12:	601a      	str	r2, [r3, #0]
        break;
 8019e14:	e007      	b.n	8019e26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019e16:	697b      	ldr	r3, [r7, #20]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	617b      	str	r3, [r7, #20]
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d1e1      	bne.n	8019de6 <sys_timeout_abs+0x86>
 8019e22:	e000      	b.n	8019e26 <sys_timeout_abs+0xc6>
    return;
 8019e24:	bf00      	nop
      }
    }
  }
}
 8019e26:	3718      	adds	r7, #24
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}
 8019e2c:	080210fc 	.word	0x080210fc
 8019e30:	08021130 	.word	0x08021130
 8019e34:	08021170 	.word	0x08021170
 8019e38:	20027800 	.word	0x20027800

08019e3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b086      	sub	sp, #24
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019e48:	697b      	ldr	r3, [r7, #20]
 8019e4a:	685b      	ldr	r3, [r3, #4]
 8019e4c:	4798      	blx	r3

  now = sys_now();
 8019e4e:	f7f4 facf 	bl	800e3f0 <sys_now>
 8019e52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019e54:	697b      	ldr	r3, [r7, #20]
 8019e56:	681a      	ldr	r2, [r3, #0]
 8019e58:	4b0f      	ldr	r3, [pc, #60]	@ (8019e98 <lwip_cyclic_timer+0x5c>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	4413      	add	r3, r2
 8019e5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019e60:	68fa      	ldr	r2, [r7, #12]
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	1ad3      	subs	r3, r2, r3
 8019e66:	0fdb      	lsrs	r3, r3, #31
 8019e68:	f003 0301 	and.w	r3, r3, #1
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d009      	beq.n	8019e86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019e72:	697b      	ldr	r3, [r7, #20]
 8019e74:	681a      	ldr	r2, [r3, #0]
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	4413      	add	r3, r2
 8019e7a:	687a      	ldr	r2, [r7, #4]
 8019e7c:	4907      	ldr	r1, [pc, #28]	@ (8019e9c <lwip_cyclic_timer+0x60>)
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7ff ff6e 	bl	8019d60 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019e84:	e004      	b.n	8019e90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019e86:	687a      	ldr	r2, [r7, #4]
 8019e88:	4904      	ldr	r1, [pc, #16]	@ (8019e9c <lwip_cyclic_timer+0x60>)
 8019e8a:	68f8      	ldr	r0, [r7, #12]
 8019e8c:	f7ff ff68 	bl	8019d60 <sys_timeout_abs>
}
 8019e90:	bf00      	nop
 8019e92:	3718      	adds	r7, #24
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd80      	pop	{r7, pc}
 8019e98:	20027804 	.word	0x20027804
 8019e9c:	08019e3d 	.word	0x08019e3d

08019ea0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	607b      	str	r3, [r7, #4]
 8019eaa:	e00e      	b.n	8019eca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019eac:	4a0b      	ldr	r2, [pc, #44]	@ (8019edc <sys_timeouts_init+0x3c>)
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	00db      	lsls	r3, r3, #3
 8019eb8:	4a08      	ldr	r2, [pc, #32]	@ (8019edc <sys_timeouts_init+0x3c>)
 8019eba:	4413      	add	r3, r2
 8019ebc:	461a      	mov	r2, r3
 8019ebe:	4908      	ldr	r1, [pc, #32]	@ (8019ee0 <sys_timeouts_init+0x40>)
 8019ec0:	f000 f810 	bl	8019ee4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	3301      	adds	r3, #1
 8019ec8:	607b      	str	r3, [r7, #4]
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	2b02      	cmp	r3, #2
 8019ece:	d9ed      	bls.n	8019eac <sys_timeouts_init+0xc>
  }
}
 8019ed0:	bf00      	nop
 8019ed2:	bf00      	nop
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
 8019eda:	bf00      	nop
 8019edc:	080222d0 	.word	0x080222d0
 8019ee0:	08019e3d 	.word	0x08019e3d

08019ee4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b086      	sub	sp, #24
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	60f8      	str	r0, [r7, #12]
 8019eec:	60b9      	str	r1, [r7, #8]
 8019eee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019ef6:	d306      	bcc.n	8019f06 <sys_timeout+0x22>
 8019ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8019f24 <sys_timeout+0x40>)
 8019efa:	f240 1229 	movw	r2, #297	@ 0x129
 8019efe:	490a      	ldr	r1, [pc, #40]	@ (8019f28 <sys_timeout+0x44>)
 8019f00:	480a      	ldr	r0, [pc, #40]	@ (8019f2c <sys_timeout+0x48>)
 8019f02:	f004 f865 	bl	801dfd0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019f06:	f7f4 fa73 	bl	800e3f0 <sys_now>
 8019f0a:	4602      	mov	r2, r0
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	4413      	add	r3, r2
 8019f10:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019f12:	687a      	ldr	r2, [r7, #4]
 8019f14:	68b9      	ldr	r1, [r7, #8]
 8019f16:	6978      	ldr	r0, [r7, #20]
 8019f18:	f7ff ff22 	bl	8019d60 <sys_timeout_abs>
#endif
}
 8019f1c:	bf00      	nop
 8019f1e:	3718      	adds	r7, #24
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}
 8019f24:	080210fc 	.word	0x080210fc
 8019f28:	08021198 	.word	0x08021198
 8019f2c:	08021170 	.word	0x08021170

08019f30 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b084      	sub	sp, #16
 8019f34:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019f36:	f7f4 fa5b 	bl	800e3f0 <sys_now>
 8019f3a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019f3c:	4b17      	ldr	r3, [pc, #92]	@ (8019f9c <sys_check_timeouts+0x6c>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d022      	beq.n	8019f8e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	68fa      	ldr	r2, [r7, #12]
 8019f4e:	1ad3      	subs	r3, r2, r3
 8019f50:	0fdb      	lsrs	r3, r3, #31
 8019f52:	f003 0301 	and.w	r3, r3, #1
 8019f56:	b2db      	uxtb	r3, r3
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d11a      	bne.n	8019f92 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	4a0e      	ldr	r2, [pc, #56]	@ (8019f9c <sys_check_timeouts+0x6c>)
 8019f62:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	689b      	ldr	r3, [r3, #8]
 8019f68:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019f6a:	68bb      	ldr	r3, [r7, #8]
 8019f6c:	68db      	ldr	r3, [r3, #12]
 8019f6e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	4a0a      	ldr	r2, [pc, #40]	@ (8019fa0 <sys_check_timeouts+0x70>)
 8019f76:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019f78:	68b9      	ldr	r1, [r7, #8]
 8019f7a:	200a      	movs	r0, #10
 8019f7c:	f7f9 fc2a 	bl	80137d4 <memp_free>
    if (handler != NULL) {
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d0da      	beq.n	8019f3c <sys_check_timeouts+0xc>
      handler(arg);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	6838      	ldr	r0, [r7, #0]
 8019f8a:	4798      	blx	r3
  do {
 8019f8c:	e7d6      	b.n	8019f3c <sys_check_timeouts+0xc>
      return;
 8019f8e:	bf00      	nop
 8019f90:	e000      	b.n	8019f94 <sys_check_timeouts+0x64>
      return;
 8019f92:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019f94:	3710      	adds	r7, #16
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}
 8019f9a:	bf00      	nop
 8019f9c:	20027800 	.word	0x20027800
 8019fa0:	20027804 	.word	0x20027804

08019fa4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019fa4:	b580      	push	{r7, lr}
 8019fa6:	b082      	sub	sp, #8
 8019fa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019faa:	4b16      	ldr	r3, [pc, #88]	@ (801a004 <sys_timeouts_sleeptime+0x60>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d102      	bne.n	8019fb8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fb6:	e020      	b.n	8019ffa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019fb8:	f7f4 fa1a 	bl	800e3f0 <sys_now>
 8019fbc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019fbe:	4b11      	ldr	r3, [pc, #68]	@ (801a004 <sys_timeouts_sleeptime+0x60>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	685a      	ldr	r2, [r3, #4]
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	1ad3      	subs	r3, r2, r3
 8019fc8:	0fdb      	lsrs	r3, r3, #31
 8019fca:	f003 0301 	and.w	r3, r3, #1
 8019fce:	b2db      	uxtb	r3, r3
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d001      	beq.n	8019fd8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e010      	b.n	8019ffa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019fd8:	4b0a      	ldr	r3, [pc, #40]	@ (801a004 <sys_timeouts_sleeptime+0x60>)
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	685a      	ldr	r2, [r3, #4]
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	1ad3      	subs	r3, r2, r3
 8019fe2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019fe4:	683b      	ldr	r3, [r7, #0]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	da06      	bge.n	8019ff8 <sys_timeouts_sleeptime+0x54>
 8019fea:	4b07      	ldr	r3, [pc, #28]	@ (801a008 <sys_timeouts_sleeptime+0x64>)
 8019fec:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019ff0:	4906      	ldr	r1, [pc, #24]	@ (801a00c <sys_timeouts_sleeptime+0x68>)
 8019ff2:	4807      	ldr	r0, [pc, #28]	@ (801a010 <sys_timeouts_sleeptime+0x6c>)
 8019ff4:	f003 ffec 	bl	801dfd0 <iprintf>
    return ret;
 8019ff8:	683b      	ldr	r3, [r7, #0]
  }
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3708      	adds	r7, #8
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	20027800 	.word	0x20027800
 801a008:	080210fc 	.word	0x080210fc
 801a00c:	080211d0 	.word	0x080211d0
 801a010:	08021170 	.word	0x08021170

0801a014 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a014:	b580      	push	{r7, lr}
 801a016:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a018:	f003 feda 	bl	801ddd0 <rand>
 801a01c:	4603      	mov	r3, r0
 801a01e:	b29b      	uxth	r3, r3
 801a020:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a024:	b29b      	uxth	r3, r3
 801a026:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a02a:	b29a      	uxth	r2, r3
 801a02c:	4b01      	ldr	r3, [pc, #4]	@ (801a034 <udp_init+0x20>)
 801a02e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a030:	bf00      	nop
 801a032:	bd80      	pop	{r7, pc}
 801a034:	2000002c 	.word	0x2000002c

0801a038 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a038:	b480      	push	{r7}
 801a03a:	b083      	sub	sp, #12
 801a03c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a03e:	2300      	movs	r3, #0
 801a040:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a042:	4b17      	ldr	r3, [pc, #92]	@ (801a0a0 <udp_new_port+0x68>)
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	1c5a      	adds	r2, r3, #1
 801a048:	b291      	uxth	r1, r2
 801a04a:	4a15      	ldr	r2, [pc, #84]	@ (801a0a0 <udp_new_port+0x68>)
 801a04c:	8011      	strh	r1, [r2, #0]
 801a04e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a052:	4293      	cmp	r3, r2
 801a054:	d103      	bne.n	801a05e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a056:	4b12      	ldr	r3, [pc, #72]	@ (801a0a0 <udp_new_port+0x68>)
 801a058:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a05c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a05e:	4b11      	ldr	r3, [pc, #68]	@ (801a0a4 <udp_new_port+0x6c>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	603b      	str	r3, [r7, #0]
 801a064:	e011      	b.n	801a08a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	8a5a      	ldrh	r2, [r3, #18]
 801a06a:	4b0d      	ldr	r3, [pc, #52]	@ (801a0a0 <udp_new_port+0x68>)
 801a06c:	881b      	ldrh	r3, [r3, #0]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d108      	bne.n	801a084 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a072:	88fb      	ldrh	r3, [r7, #6]
 801a074:	3301      	adds	r3, #1
 801a076:	80fb      	strh	r3, [r7, #6]
 801a078:	88fb      	ldrh	r3, [r7, #6]
 801a07a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a07e:	d3e0      	bcc.n	801a042 <udp_new_port+0xa>
        return 0;
 801a080:	2300      	movs	r3, #0
 801a082:	e007      	b.n	801a094 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	603b      	str	r3, [r7, #0]
 801a08a:	683b      	ldr	r3, [r7, #0]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d1ea      	bne.n	801a066 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a090:	4b03      	ldr	r3, [pc, #12]	@ (801a0a0 <udp_new_port+0x68>)
 801a092:	881b      	ldrh	r3, [r3, #0]
}
 801a094:	4618      	mov	r0, r3
 801a096:	370c      	adds	r7, #12
 801a098:	46bd      	mov	sp, r7
 801a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09e:	4770      	bx	lr
 801a0a0:	2000002c 	.word	0x2000002c
 801a0a4:	2002780c 	.word	0x2002780c

0801a0a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b084      	sub	sp, #16
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	60f8      	str	r0, [r7, #12]
 801a0b0:	60b9      	str	r1, [r7, #8]
 801a0b2:	4613      	mov	r3, r2
 801a0b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d105      	bne.n	801a0c8 <udp_input_local_match+0x20>
 801a0bc:	4b27      	ldr	r3, [pc, #156]	@ (801a15c <udp_input_local_match+0xb4>)
 801a0be:	2287      	movs	r2, #135	@ 0x87
 801a0c0:	4927      	ldr	r1, [pc, #156]	@ (801a160 <udp_input_local_match+0xb8>)
 801a0c2:	4828      	ldr	r0, [pc, #160]	@ (801a164 <udp_input_local_match+0xbc>)
 801a0c4:	f003 ff84 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a0c8:	68bb      	ldr	r3, [r7, #8]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d105      	bne.n	801a0da <udp_input_local_match+0x32>
 801a0ce:	4b23      	ldr	r3, [pc, #140]	@ (801a15c <udp_input_local_match+0xb4>)
 801a0d0:	2288      	movs	r2, #136	@ 0x88
 801a0d2:	4925      	ldr	r1, [pc, #148]	@ (801a168 <udp_input_local_match+0xc0>)
 801a0d4:	4823      	ldr	r0, [pc, #140]	@ (801a164 <udp_input_local_match+0xbc>)
 801a0d6:	f003 ff7b 	bl	801dfd0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	7a1b      	ldrb	r3, [r3, #8]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d00b      	beq.n	801a0fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	7a1a      	ldrb	r2, [r3, #8]
 801a0e6:	4b21      	ldr	r3, [pc, #132]	@ (801a16c <udp_input_local_match+0xc4>)
 801a0e8:	685b      	ldr	r3, [r3, #4]
 801a0ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a0ee:	3301      	adds	r3, #1
 801a0f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	d001      	beq.n	801a0fa <udp_input_local_match+0x52>
    return 0;
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	e02b      	b.n	801a152 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a0fa:	79fb      	ldrb	r3, [r7, #7]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d018      	beq.n	801a132 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d013      	beq.n	801a12e <udp_input_local_match+0x86>
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d00f      	beq.n	801a12e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a10e:	4b17      	ldr	r3, [pc, #92]	@ (801a16c <udp_input_local_match+0xc4>)
 801a110:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a116:	d00a      	beq.n	801a12e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	4b13      	ldr	r3, [pc, #76]	@ (801a16c <udp_input_local_match+0xc4>)
 801a11e:	695b      	ldr	r3, [r3, #20]
 801a120:	405a      	eors	r2, r3
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	3308      	adds	r3, #8
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d110      	bne.n	801a150 <udp_input_local_match+0xa8>
          return 1;
 801a12e:	2301      	movs	r3, #1
 801a130:	e00f      	b.n	801a152 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d009      	beq.n	801a14c <udp_input_local_match+0xa4>
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d005      	beq.n	801a14c <udp_input_local_match+0xa4>
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	681a      	ldr	r2, [r3, #0]
 801a144:	4b09      	ldr	r3, [pc, #36]	@ (801a16c <udp_input_local_match+0xc4>)
 801a146:	695b      	ldr	r3, [r3, #20]
 801a148:	429a      	cmp	r2, r3
 801a14a:	d101      	bne.n	801a150 <udp_input_local_match+0xa8>
        return 1;
 801a14c:	2301      	movs	r3, #1
 801a14e:	e000      	b.n	801a152 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a150:	2300      	movs	r3, #0
}
 801a152:	4618      	mov	r0, r3
 801a154:	3710      	adds	r7, #16
 801a156:	46bd      	mov	sp, r7
 801a158:	bd80      	pop	{r7, pc}
 801a15a:	bf00      	nop
 801a15c:	080211e4 	.word	0x080211e4
 801a160:	08021214 	.word	0x08021214
 801a164:	08021238 	.word	0x08021238
 801a168:	08021260 	.word	0x08021260
 801a16c:	200246b0 	.word	0x200246b0

0801a170 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a170:	b590      	push	{r4, r7, lr}
 801a172:	b08d      	sub	sp, #52	@ 0x34
 801a174:	af02      	add	r7, sp, #8
 801a176:	6078      	str	r0, [r7, #4]
 801a178:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a17a:	2300      	movs	r3, #0
 801a17c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d105      	bne.n	801a190 <udp_input+0x20>
 801a184:	4b7c      	ldr	r3, [pc, #496]	@ (801a378 <udp_input+0x208>)
 801a186:	22cf      	movs	r2, #207	@ 0xcf
 801a188:	497c      	ldr	r1, [pc, #496]	@ (801a37c <udp_input+0x20c>)
 801a18a:	487d      	ldr	r0, [pc, #500]	@ (801a380 <udp_input+0x210>)
 801a18c:	f003 ff20 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a190:	683b      	ldr	r3, [r7, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d105      	bne.n	801a1a2 <udp_input+0x32>
 801a196:	4b78      	ldr	r3, [pc, #480]	@ (801a378 <udp_input+0x208>)
 801a198:	22d0      	movs	r2, #208	@ 0xd0
 801a19a:	497a      	ldr	r1, [pc, #488]	@ (801a384 <udp_input+0x214>)
 801a19c:	4878      	ldr	r0, [pc, #480]	@ (801a380 <udp_input+0x210>)
 801a19e:	f003 ff17 	bl	801dfd0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	895b      	ldrh	r3, [r3, #10]
 801a1a6:	2b07      	cmp	r3, #7
 801a1a8:	d803      	bhi.n	801a1b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a1aa:	6878      	ldr	r0, [r7, #4]
 801a1ac:	f7fa f9b6 	bl	801451c <pbuf_free>
    goto end;
 801a1b0:	e0de      	b.n	801a370 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	685b      	ldr	r3, [r3, #4]
 801a1b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a1b8:	4b73      	ldr	r3, [pc, #460]	@ (801a388 <udp_input+0x218>)
 801a1ba:	695b      	ldr	r3, [r3, #20]
 801a1bc:	4a72      	ldr	r2, [pc, #456]	@ (801a388 <udp_input+0x218>)
 801a1be:	6812      	ldr	r2, [r2, #0]
 801a1c0:	4611      	mov	r1, r2
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f001 fefe 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a1cc:	697b      	ldr	r3, [r7, #20]
 801a1ce:	881b      	ldrh	r3, [r3, #0]
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	f7f8 fdb4 	bl	8012d40 <lwip_htons>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a1dc:	697b      	ldr	r3, [r7, #20]
 801a1de:	885b      	ldrh	r3, [r3, #2]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7f8 fdac 	bl	8012d40 <lwip_htons>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1f8:	4b64      	ldr	r3, [pc, #400]	@ (801a38c <udp_input+0x21c>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1fe:	e054      	b.n	801a2aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a202:	8a5b      	ldrh	r3, [r3, #18]
 801a204:	89fa      	ldrh	r2, [r7, #14]
 801a206:	429a      	cmp	r2, r3
 801a208:	d14a      	bne.n	801a2a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a20a:	7cfb      	ldrb	r3, [r7, #19]
 801a20c:	461a      	mov	r2, r3
 801a20e:	6839      	ldr	r1, [r7, #0]
 801a210:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a212:	f7ff ff49 	bl	801a0a8 <udp_input_local_match>
 801a216:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d041      	beq.n	801a2a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a21e:	7c1b      	ldrb	r3, [r3, #16]
 801a220:	f003 0304 	and.w	r3, r3, #4
 801a224:	2b00      	cmp	r3, #0
 801a226:	d11d      	bne.n	801a264 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a228:	69fb      	ldr	r3, [r7, #28]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d102      	bne.n	801a234 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a230:	61fb      	str	r3, [r7, #28]
 801a232:	e017      	b.n	801a264 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a234:	7cfb      	ldrb	r3, [r7, #19]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d014      	beq.n	801a264 <udp_input+0xf4>
 801a23a:	4b53      	ldr	r3, [pc, #332]	@ (801a388 <udp_input+0x218>)
 801a23c:	695b      	ldr	r3, [r3, #20]
 801a23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a242:	d10f      	bne.n	801a264 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	681a      	ldr	r2, [r3, #0]
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	3304      	adds	r3, #4
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	429a      	cmp	r2, r3
 801a250:	d008      	beq.n	801a264 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	683b      	ldr	r3, [r7, #0]
 801a258:	3304      	adds	r3, #4
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	429a      	cmp	r2, r3
 801a25e:	d101      	bne.n	801a264 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a262:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a266:	8a9b      	ldrh	r3, [r3, #20]
 801a268:	8a3a      	ldrh	r2, [r7, #16]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d118      	bne.n	801a2a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a270:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a272:	2b00      	cmp	r3, #0
 801a274:	d005      	beq.n	801a282 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a278:	685a      	ldr	r2, [r3, #4]
 801a27a:	4b43      	ldr	r3, [pc, #268]	@ (801a388 <udp_input+0x218>)
 801a27c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a27e:	429a      	cmp	r2, r3
 801a280:	d10e      	bne.n	801a2a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a282:	6a3b      	ldr	r3, [r7, #32]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d014      	beq.n	801a2b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a28a:	68da      	ldr	r2, [r3, #12]
 801a28c:	6a3b      	ldr	r3, [r7, #32]
 801a28e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a290:	4b3e      	ldr	r3, [pc, #248]	@ (801a38c <udp_input+0x21c>)
 801a292:	681a      	ldr	r2, [r3, #0]
 801a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a296:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a298:	4a3c      	ldr	r2, [pc, #240]	@ (801a38c <udp_input+0x21c>)
 801a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a29c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a29e:	e008      	b.n	801a2b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2a6:	68db      	ldr	r3, [r3, #12]
 801a2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d1a7      	bne.n	801a200 <udp_input+0x90>
 801a2b0:	e000      	b.n	801a2b4 <udp_input+0x144>
        break;
 801a2b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d101      	bne.n	801a2be <udp_input+0x14e>
    pcb = uncon_pcb;
 801a2ba:	69fb      	ldr	r3, [r7, #28]
 801a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d002      	beq.n	801a2ca <udp_input+0x15a>
    for_us = 1;
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	76fb      	strb	r3, [r7, #27]
 801a2c8:	e00a      	b.n	801a2e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a2ca:	683b      	ldr	r3, [r7, #0]
 801a2cc:	3304      	adds	r3, #4
 801a2ce:	681a      	ldr	r2, [r3, #0]
 801a2d0:	4b2d      	ldr	r3, [pc, #180]	@ (801a388 <udp_input+0x218>)
 801a2d2:	695b      	ldr	r3, [r3, #20]
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	bf0c      	ite	eq
 801a2d8:	2301      	moveq	r3, #1
 801a2da:	2300      	movne	r3, #0
 801a2dc:	b2db      	uxtb	r3, r3
 801a2de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a2e0:	7efb      	ldrb	r3, [r7, #27]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d041      	beq.n	801a36a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a2e6:	2108      	movs	r1, #8
 801a2e8:	6878      	ldr	r0, [r7, #4]
 801a2ea:	f7fa f891 	bl	8014410 <pbuf_remove_header>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d00a      	beq.n	801a30a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a2f4:	4b20      	ldr	r3, [pc, #128]	@ (801a378 <udp_input+0x208>)
 801a2f6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a2fa:	4925      	ldr	r1, [pc, #148]	@ (801a390 <udp_input+0x220>)
 801a2fc:	4820      	ldr	r0, [pc, #128]	@ (801a380 <udp_input+0x210>)
 801a2fe:	f003 fe67 	bl	801dfd0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a302:	6878      	ldr	r0, [r7, #4]
 801a304:	f7fa f90a 	bl	801451c <pbuf_free>
      goto end;
 801a308:	e032      	b.n	801a370 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d012      	beq.n	801a336 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a312:	699b      	ldr	r3, [r3, #24]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d00a      	beq.n	801a32e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a31a:	699c      	ldr	r4, [r3, #24]
 801a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a31e:	69d8      	ldr	r0, [r3, #28]
 801a320:	8a3b      	ldrh	r3, [r7, #16]
 801a322:	9300      	str	r3, [sp, #0]
 801a324:	4b1b      	ldr	r3, [pc, #108]	@ (801a394 <udp_input+0x224>)
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a32a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a32c:	e021      	b.n	801a372 <udp_input+0x202>
        pbuf_free(p);
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7fa f8f4 	bl	801451c <pbuf_free>
        goto end;
 801a334:	e01c      	b.n	801a370 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a336:	7cfb      	ldrb	r3, [r7, #19]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d112      	bne.n	801a362 <udp_input+0x1f2>
 801a33c:	4b12      	ldr	r3, [pc, #72]	@ (801a388 <udp_input+0x218>)
 801a33e:	695b      	ldr	r3, [r3, #20]
 801a340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a344:	2be0      	cmp	r3, #224	@ 0xe0
 801a346:	d00c      	beq.n	801a362 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a348:	4b0f      	ldr	r3, [pc, #60]	@ (801a388 <udp_input+0x218>)
 801a34a:	899b      	ldrh	r3, [r3, #12]
 801a34c:	3308      	adds	r3, #8
 801a34e:	b29b      	uxth	r3, r3
 801a350:	b21b      	sxth	r3, r3
 801a352:	4619      	mov	r1, r3
 801a354:	6878      	ldr	r0, [r7, #4]
 801a356:	f7fa f8ce 	bl	80144f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a35a:	2103      	movs	r1, #3
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f001 fb11 	bl	801b984 <icmp_dest_unreach>
      pbuf_free(p);
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7fa f8da 	bl	801451c <pbuf_free>
  return;
 801a368:	e003      	b.n	801a372 <udp_input+0x202>
    pbuf_free(p);
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f7fa f8d6 	bl	801451c <pbuf_free>
  return;
 801a370:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a372:	372c      	adds	r7, #44	@ 0x2c
 801a374:	46bd      	mov	sp, r7
 801a376:	bd90      	pop	{r4, r7, pc}
 801a378:	080211e4 	.word	0x080211e4
 801a37c:	08021288 	.word	0x08021288
 801a380:	08021238 	.word	0x08021238
 801a384:	080212a0 	.word	0x080212a0
 801a388:	200246b0 	.word	0x200246b0
 801a38c:	2002780c 	.word	0x2002780c
 801a390:	080212bc 	.word	0x080212bc
 801a394:	200246c0 	.word	0x200246c0

0801a398 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b088      	sub	sp, #32
 801a39c:	af02      	add	r7, sp, #8
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	607a      	str	r2, [r7, #4]
 801a3a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d109      	bne.n	801a3c0 <udp_sendto+0x28>
 801a3ac:	4b23      	ldr	r3, [pc, #140]	@ (801a43c <udp_sendto+0xa4>)
 801a3ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a3b2:	4923      	ldr	r1, [pc, #140]	@ (801a440 <udp_sendto+0xa8>)
 801a3b4:	4823      	ldr	r0, [pc, #140]	@ (801a444 <udp_sendto+0xac>)
 801a3b6:	f003 fe0b 	bl	801dfd0 <iprintf>
 801a3ba:	f06f 030f 	mvn.w	r3, #15
 801a3be:	e038      	b.n	801a432 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d109      	bne.n	801a3da <udp_sendto+0x42>
 801a3c6:	4b1d      	ldr	r3, [pc, #116]	@ (801a43c <udp_sendto+0xa4>)
 801a3c8:	f240 2219 	movw	r2, #537	@ 0x219
 801a3cc:	491e      	ldr	r1, [pc, #120]	@ (801a448 <udp_sendto+0xb0>)
 801a3ce:	481d      	ldr	r0, [pc, #116]	@ (801a444 <udp_sendto+0xac>)
 801a3d0:	f003 fdfe 	bl	801dfd0 <iprintf>
 801a3d4:	f06f 030f 	mvn.w	r3, #15
 801a3d8:	e02b      	b.n	801a432 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d109      	bne.n	801a3f4 <udp_sendto+0x5c>
 801a3e0:	4b16      	ldr	r3, [pc, #88]	@ (801a43c <udp_sendto+0xa4>)
 801a3e2:	f240 221a 	movw	r2, #538	@ 0x21a
 801a3e6:	4919      	ldr	r1, [pc, #100]	@ (801a44c <udp_sendto+0xb4>)
 801a3e8:	4816      	ldr	r0, [pc, #88]	@ (801a444 <udp_sendto+0xac>)
 801a3ea:	f003 fdf1 	bl	801dfd0 <iprintf>
 801a3ee:	f06f 030f 	mvn.w	r3, #15
 801a3f2:	e01e      	b.n	801a432 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	7a1b      	ldrb	r3, [r3, #8]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d006      	beq.n	801a40a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	7a1b      	ldrb	r3, [r3, #8]
 801a400:	4618      	mov	r0, r3
 801a402:	f7f9 fcfd 	bl	8013e00 <netif_get_by_index>
 801a406:	6178      	str	r0, [r7, #20]
 801a408:	e003      	b.n	801a412 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f001 fb44 	bl	801ba98 <ip4_route>
 801a410:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d102      	bne.n	801a41e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a418:	f06f 0303 	mvn.w	r3, #3
 801a41c:	e009      	b.n	801a432 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a41e:	887a      	ldrh	r2, [r7, #2]
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	9300      	str	r3, [sp, #0]
 801a424:	4613      	mov	r3, r2
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	68b9      	ldr	r1, [r7, #8]
 801a42a:	68f8      	ldr	r0, [r7, #12]
 801a42c:	f000 f810 	bl	801a450 <udp_sendto_if>
 801a430:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a432:	4618      	mov	r0, r3
 801a434:	3718      	adds	r7, #24
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	bf00      	nop
 801a43c:	080211e4 	.word	0x080211e4
 801a440:	08021308 	.word	0x08021308
 801a444:	08021238 	.word	0x08021238
 801a448:	08021320 	.word	0x08021320
 801a44c:	0802133c 	.word	0x0802133c

0801a450 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b088      	sub	sp, #32
 801a454:	af02      	add	r7, sp, #8
 801a456:	60f8      	str	r0, [r7, #12]
 801a458:	60b9      	str	r1, [r7, #8]
 801a45a:	607a      	str	r2, [r7, #4]
 801a45c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d109      	bne.n	801a478 <udp_sendto_if+0x28>
 801a464:	4b2e      	ldr	r3, [pc, #184]	@ (801a520 <udp_sendto_if+0xd0>)
 801a466:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a46a:	492e      	ldr	r1, [pc, #184]	@ (801a524 <udp_sendto_if+0xd4>)
 801a46c:	482e      	ldr	r0, [pc, #184]	@ (801a528 <udp_sendto_if+0xd8>)
 801a46e:	f003 fdaf 	bl	801dfd0 <iprintf>
 801a472:	f06f 030f 	mvn.w	r3, #15
 801a476:	e04f      	b.n	801a518 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d109      	bne.n	801a492 <udp_sendto_if+0x42>
 801a47e:	4b28      	ldr	r3, [pc, #160]	@ (801a520 <udp_sendto_if+0xd0>)
 801a480:	f240 2281 	movw	r2, #641	@ 0x281
 801a484:	4929      	ldr	r1, [pc, #164]	@ (801a52c <udp_sendto_if+0xdc>)
 801a486:	4828      	ldr	r0, [pc, #160]	@ (801a528 <udp_sendto_if+0xd8>)
 801a488:	f003 fda2 	bl	801dfd0 <iprintf>
 801a48c:	f06f 030f 	mvn.w	r3, #15
 801a490:	e042      	b.n	801a518 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d109      	bne.n	801a4ac <udp_sendto_if+0x5c>
 801a498:	4b21      	ldr	r3, [pc, #132]	@ (801a520 <udp_sendto_if+0xd0>)
 801a49a:	f240 2282 	movw	r2, #642	@ 0x282
 801a49e:	4924      	ldr	r1, [pc, #144]	@ (801a530 <udp_sendto_if+0xe0>)
 801a4a0:	4821      	ldr	r0, [pc, #132]	@ (801a528 <udp_sendto_if+0xd8>)
 801a4a2:	f003 fd95 	bl	801dfd0 <iprintf>
 801a4a6:	f06f 030f 	mvn.w	r3, #15
 801a4aa:	e035      	b.n	801a518 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a4ac:	6a3b      	ldr	r3, [r7, #32]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d109      	bne.n	801a4c6 <udp_sendto_if+0x76>
 801a4b2:	4b1b      	ldr	r3, [pc, #108]	@ (801a520 <udp_sendto_if+0xd0>)
 801a4b4:	f240 2283 	movw	r2, #643	@ 0x283
 801a4b8:	491e      	ldr	r1, [pc, #120]	@ (801a534 <udp_sendto_if+0xe4>)
 801a4ba:	481b      	ldr	r0, [pc, #108]	@ (801a528 <udp_sendto_if+0xd8>)
 801a4bc:	f003 fd88 	bl	801dfd0 <iprintf>
 801a4c0:	f06f 030f 	mvn.w	r3, #15
 801a4c4:	e028      	b.n	801a518 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d009      	beq.n	801a4e0 <udp_sendto_if+0x90>
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d005      	beq.n	801a4e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a4dc:	2be0      	cmp	r3, #224	@ 0xe0
 801a4de:	d103      	bne.n	801a4e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a4e0:	6a3b      	ldr	r3, [r7, #32]
 801a4e2:	3304      	adds	r3, #4
 801a4e4:	617b      	str	r3, [r7, #20]
 801a4e6:	e00b      	b.n	801a500 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681a      	ldr	r2, [r3, #0]
 801a4ec:	6a3b      	ldr	r3, [r7, #32]
 801a4ee:	3304      	adds	r3, #4
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	d002      	beq.n	801a4fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a4f6:	f06f 0303 	mvn.w	r3, #3
 801a4fa:	e00d      	b.n	801a518 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a500:	887a      	ldrh	r2, [r7, #2]
 801a502:	697b      	ldr	r3, [r7, #20]
 801a504:	9301      	str	r3, [sp, #4]
 801a506:	6a3b      	ldr	r3, [r7, #32]
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	4613      	mov	r3, r2
 801a50c:	687a      	ldr	r2, [r7, #4]
 801a50e:	68b9      	ldr	r1, [r7, #8]
 801a510:	68f8      	ldr	r0, [r7, #12]
 801a512:	f000 f811 	bl	801a538 <udp_sendto_if_src>
 801a516:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a518:	4618      	mov	r0, r3
 801a51a:	3718      	adds	r7, #24
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}
 801a520:	080211e4 	.word	0x080211e4
 801a524:	08021358 	.word	0x08021358
 801a528:	08021238 	.word	0x08021238
 801a52c:	08021374 	.word	0x08021374
 801a530:	08021390 	.word	0x08021390
 801a534:	080213b0 	.word	0x080213b0

0801a538 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b08c      	sub	sp, #48	@ 0x30
 801a53c:	af04      	add	r7, sp, #16
 801a53e:	60f8      	str	r0, [r7, #12]
 801a540:	60b9      	str	r1, [r7, #8]
 801a542:	607a      	str	r2, [r7, #4]
 801a544:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d109      	bne.n	801a560 <udp_sendto_if_src+0x28>
 801a54c:	4b65      	ldr	r3, [pc, #404]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a54e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801a552:	4965      	ldr	r1, [pc, #404]	@ (801a6e8 <udp_sendto_if_src+0x1b0>)
 801a554:	4865      	ldr	r0, [pc, #404]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a556:	f003 fd3b 	bl	801dfd0 <iprintf>
 801a55a:	f06f 030f 	mvn.w	r3, #15
 801a55e:	e0bc      	b.n	801a6da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d109      	bne.n	801a57a <udp_sendto_if_src+0x42>
 801a566:	4b5f      	ldr	r3, [pc, #380]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a568:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801a56c:	4960      	ldr	r1, [pc, #384]	@ (801a6f0 <udp_sendto_if_src+0x1b8>)
 801a56e:	485f      	ldr	r0, [pc, #380]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a570:	f003 fd2e 	bl	801dfd0 <iprintf>
 801a574:	f06f 030f 	mvn.w	r3, #15
 801a578:	e0af      	b.n	801a6da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d109      	bne.n	801a594 <udp_sendto_if_src+0x5c>
 801a580:	4b58      	ldr	r3, [pc, #352]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a582:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a586:	495b      	ldr	r1, [pc, #364]	@ (801a6f4 <udp_sendto_if_src+0x1bc>)
 801a588:	4858      	ldr	r0, [pc, #352]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a58a:	f003 fd21 	bl	801dfd0 <iprintf>
 801a58e:	f06f 030f 	mvn.w	r3, #15
 801a592:	e0a2      	b.n	801a6da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a596:	2b00      	cmp	r3, #0
 801a598:	d109      	bne.n	801a5ae <udp_sendto_if_src+0x76>
 801a59a:	4b52      	ldr	r3, [pc, #328]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a59c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801a5a0:	4955      	ldr	r1, [pc, #340]	@ (801a6f8 <udp_sendto_if_src+0x1c0>)
 801a5a2:	4852      	ldr	r0, [pc, #328]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a5a4:	f003 fd14 	bl	801dfd0 <iprintf>
 801a5a8:	f06f 030f 	mvn.w	r3, #15
 801a5ac:	e095      	b.n	801a6da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d109      	bne.n	801a5c8 <udp_sendto_if_src+0x90>
 801a5b4:	4b4b      	ldr	r3, [pc, #300]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a5b6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801a5ba:	4950      	ldr	r1, [pc, #320]	@ (801a6fc <udp_sendto_if_src+0x1c4>)
 801a5bc:	484b      	ldr	r0, [pc, #300]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a5be:	f003 fd07 	bl	801dfd0 <iprintf>
 801a5c2:	f06f 030f 	mvn.w	r3, #15
 801a5c6:	e088      	b.n	801a6da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	8a5b      	ldrh	r3, [r3, #18]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d10f      	bne.n	801a5f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a5d0:	68f9      	ldr	r1, [r7, #12]
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	8a5b      	ldrh	r3, [r3, #18]
 801a5d6:	461a      	mov	r2, r3
 801a5d8:	68f8      	ldr	r0, [r7, #12]
 801a5da:	f000 f893 	bl	801a704 <udp_bind>
 801a5de:	4603      	mov	r3, r0
 801a5e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a5e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d002      	beq.n	801a5f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a5ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a5ee:	e074      	b.n	801a6da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	891b      	ldrh	r3, [r3, #8]
 801a5f4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a5f8:	4293      	cmp	r3, r2
 801a5fa:	d902      	bls.n	801a602 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a5fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a600:	e06b      	b.n	801a6da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a602:	2108      	movs	r1, #8
 801a604:	68b8      	ldr	r0, [r7, #8]
 801a606:	f7f9 fef3 	bl	80143f0 <pbuf_add_header>
 801a60a:	4603      	mov	r3, r0
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d015      	beq.n	801a63c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a610:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a614:	2108      	movs	r1, #8
 801a616:	2022      	movs	r0, #34	@ 0x22
 801a618:	f7f9 fc9c 	bl	8013f54 <pbuf_alloc>
 801a61c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d102      	bne.n	801a62a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a624:	f04f 33ff 	mov.w	r3, #4294967295
 801a628:	e057      	b.n	801a6da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	891b      	ldrh	r3, [r3, #8]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d006      	beq.n	801a640 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a632:	68b9      	ldr	r1, [r7, #8]
 801a634:	69f8      	ldr	r0, [r7, #28]
 801a636:	f7fa f895 	bl	8014764 <pbuf_chain>
 801a63a:	e001      	b.n	801a640 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a640:	69fb      	ldr	r3, [r7, #28]
 801a642:	895b      	ldrh	r3, [r3, #10]
 801a644:	2b07      	cmp	r3, #7
 801a646:	d806      	bhi.n	801a656 <udp_sendto_if_src+0x11e>
 801a648:	4b26      	ldr	r3, [pc, #152]	@ (801a6e4 <udp_sendto_if_src+0x1ac>)
 801a64a:	f240 320d 	movw	r2, #781	@ 0x30d
 801a64e:	492c      	ldr	r1, [pc, #176]	@ (801a700 <udp_sendto_if_src+0x1c8>)
 801a650:	4826      	ldr	r0, [pc, #152]	@ (801a6ec <udp_sendto_if_src+0x1b4>)
 801a652:	f003 fcbd 	bl	801dfd0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a656:	69fb      	ldr	r3, [r7, #28]
 801a658:	685b      	ldr	r3, [r3, #4]
 801a65a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	8a5b      	ldrh	r3, [r3, #18]
 801a660:	4618      	mov	r0, r3
 801a662:	f7f8 fb6d 	bl	8012d40 <lwip_htons>
 801a666:	4603      	mov	r3, r0
 801a668:	461a      	mov	r2, r3
 801a66a:	697b      	ldr	r3, [r7, #20]
 801a66c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a66e:	887b      	ldrh	r3, [r7, #2]
 801a670:	4618      	mov	r0, r3
 801a672:	f7f8 fb65 	bl	8012d40 <lwip_htons>
 801a676:	4603      	mov	r3, r0
 801a678:	461a      	mov	r2, r3
 801a67a:	697b      	ldr	r3, [r7, #20]
 801a67c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a67e:	697b      	ldr	r3, [r7, #20]
 801a680:	2200      	movs	r2, #0
 801a682:	719a      	strb	r2, [r3, #6]
 801a684:	2200      	movs	r2, #0
 801a686:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	891b      	ldrh	r3, [r3, #8]
 801a68c:	4618      	mov	r0, r3
 801a68e:	f7f8 fb57 	bl	8012d40 <lwip_htons>
 801a692:	4603      	mov	r3, r0
 801a694:	461a      	mov	r2, r3
 801a696:	697b      	ldr	r3, [r7, #20]
 801a698:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a69a:	2311      	movs	r3, #17
 801a69c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	7adb      	ldrb	r3, [r3, #11]
 801a6a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	7a9b      	ldrb	r3, [r3, #10]
 801a6a8:	7cb9      	ldrb	r1, [r7, #18]
 801a6aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a6ac:	9202      	str	r2, [sp, #8]
 801a6ae:	7cfa      	ldrb	r2, [r7, #19]
 801a6b0:	9201      	str	r2, [sp, #4]
 801a6b2:	9300      	str	r3, [sp, #0]
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	687a      	ldr	r2, [r7, #4]
 801a6b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a6ba:	69f8      	ldr	r0, [r7, #28]
 801a6bc:	f001 fbd4 	bl	801be68 <ip4_output_if_src>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a6c4:	69fa      	ldr	r2, [r7, #28]
 801a6c6:	68bb      	ldr	r3, [r7, #8]
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d004      	beq.n	801a6d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a6cc:	69f8      	ldr	r0, [r7, #28]
 801a6ce:	f7f9 ff25 	bl	801451c <pbuf_free>
    q = NULL;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a6d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3720      	adds	r7, #32
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	080211e4 	.word	0x080211e4
 801a6e8:	080213d0 	.word	0x080213d0
 801a6ec:	08021238 	.word	0x08021238
 801a6f0:	080213f0 	.word	0x080213f0
 801a6f4:	08021410 	.word	0x08021410
 801a6f8:	08021434 	.word	0x08021434
 801a6fc:	08021458 	.word	0x08021458
 801a700:	0802147c 	.word	0x0802147c

0801a704 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a704:	b580      	push	{r7, lr}
 801a706:	b086      	sub	sp, #24
 801a708:	af00      	add	r7, sp, #0
 801a70a:	60f8      	str	r0, [r7, #12]
 801a70c:	60b9      	str	r1, [r7, #8]
 801a70e:	4613      	mov	r3, r2
 801a710:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d101      	bne.n	801a71c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a718:	4b39      	ldr	r3, [pc, #228]	@ (801a800 <udp_bind+0xfc>)
 801a71a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d109      	bne.n	801a736 <udp_bind+0x32>
 801a722:	4b38      	ldr	r3, [pc, #224]	@ (801a804 <udp_bind+0x100>)
 801a724:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a728:	4937      	ldr	r1, [pc, #220]	@ (801a808 <udp_bind+0x104>)
 801a72a:	4838      	ldr	r0, [pc, #224]	@ (801a80c <udp_bind+0x108>)
 801a72c:	f003 fc50 	bl	801dfd0 <iprintf>
 801a730:	f06f 030f 	mvn.w	r3, #15
 801a734:	e060      	b.n	801a7f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a736:	2300      	movs	r3, #0
 801a738:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a73a:	4b35      	ldr	r3, [pc, #212]	@ (801a810 <udp_bind+0x10c>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	617b      	str	r3, [r7, #20]
 801a740:	e009      	b.n	801a756 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a742:	68fa      	ldr	r2, [r7, #12]
 801a744:	697b      	ldr	r3, [r7, #20]
 801a746:	429a      	cmp	r2, r3
 801a748:	d102      	bne.n	801a750 <udp_bind+0x4c>
      rebind = 1;
 801a74a:	2301      	movs	r3, #1
 801a74c:	74fb      	strb	r3, [r7, #19]
      break;
 801a74e:	e005      	b.n	801a75c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	68db      	ldr	r3, [r3, #12]
 801a754:	617b      	str	r3, [r7, #20]
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d1f2      	bne.n	801a742 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a75c:	88fb      	ldrh	r3, [r7, #6]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d109      	bne.n	801a776 <udp_bind+0x72>
    port = udp_new_port();
 801a762:	f7ff fc69 	bl	801a038 <udp_new_port>
 801a766:	4603      	mov	r3, r0
 801a768:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a76a:	88fb      	ldrh	r3, [r7, #6]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d12c      	bne.n	801a7ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a770:	f06f 0307 	mvn.w	r3, #7
 801a774:	e040      	b.n	801a7f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a776:	4b26      	ldr	r3, [pc, #152]	@ (801a810 <udp_bind+0x10c>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	617b      	str	r3, [r7, #20]
 801a77c:	e022      	b.n	801a7c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a77e:	68fa      	ldr	r2, [r7, #12]
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	429a      	cmp	r2, r3
 801a784:	d01b      	beq.n	801a7be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	8a5b      	ldrh	r3, [r3, #18]
 801a78a:	88fa      	ldrh	r2, [r7, #6]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d116      	bne.n	801a7be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a798:	429a      	cmp	r2, r3
 801a79a:	d00d      	beq.n	801a7b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d00a      	beq.n	801a7b8 <udp_bind+0xb4>
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d006      	beq.n	801a7b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a7aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d003      	beq.n	801a7b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a7b0:	697b      	ldr	r3, [r7, #20]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d102      	bne.n	801a7be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a7b8:	f06f 0307 	mvn.w	r3, #7
 801a7bc:	e01c      	b.n	801a7f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a7be:	697b      	ldr	r3, [r7, #20]
 801a7c0:	68db      	ldr	r3, [r3, #12]
 801a7c2:	617b      	str	r3, [r7, #20]
 801a7c4:	697b      	ldr	r3, [r7, #20]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d1d9      	bne.n	801a77e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d002      	beq.n	801a7d6 <udp_bind+0xd2>
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	e000      	b.n	801a7d8 <udp_bind+0xd4>
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	68fa      	ldr	r2, [r7, #12]
 801a7da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	88fa      	ldrh	r2, [r7, #6]
 801a7e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a7e2:	7cfb      	ldrb	r3, [r7, #19]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d106      	bne.n	801a7f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a7e8:	4b09      	ldr	r3, [pc, #36]	@ (801a810 <udp_bind+0x10c>)
 801a7ea:	681a      	ldr	r2, [r3, #0]
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a7f0:	4a07      	ldr	r2, [pc, #28]	@ (801a810 <udp_bind+0x10c>)
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a7f6:	2300      	movs	r3, #0
}
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	3718      	adds	r7, #24
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}
 801a800:	080222e8 	.word	0x080222e8
 801a804:	080211e4 	.word	0x080211e4
 801a808:	080214ac 	.word	0x080214ac
 801a80c:	08021238 	.word	0x08021238
 801a810:	2002780c 	.word	0x2002780c

0801a814 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b084      	sub	sp, #16
 801a818:	af00      	add	r7, sp, #0
 801a81a:	60f8      	str	r0, [r7, #12]
 801a81c:	60b9      	str	r1, [r7, #8]
 801a81e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d107      	bne.n	801a836 <udp_recv+0x22>
 801a826:	4b08      	ldr	r3, [pc, #32]	@ (801a848 <udp_recv+0x34>)
 801a828:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a82c:	4907      	ldr	r1, [pc, #28]	@ (801a84c <udp_recv+0x38>)
 801a82e:	4808      	ldr	r0, [pc, #32]	@ (801a850 <udp_recv+0x3c>)
 801a830:	f003 fbce 	bl	801dfd0 <iprintf>
 801a834:	e005      	b.n	801a842 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	68ba      	ldr	r2, [r7, #8]
 801a83a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	687a      	ldr	r2, [r7, #4]
 801a840:	61da      	str	r2, [r3, #28]
}
 801a842:	3710      	adds	r7, #16
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}
 801a848:	080211e4 	.word	0x080211e4
 801a84c:	08021518 	.word	0x08021518
 801a850:	08021238 	.word	0x08021238

0801a854 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b082      	sub	sp, #8
 801a858:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a85a:	2000      	movs	r0, #0
 801a85c:	f7f8 ff44 	bl	80136e8 <memp_malloc>
 801a860:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d007      	beq.n	801a878 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a868:	2220      	movs	r2, #32
 801a86a:	2100      	movs	r1, #0
 801a86c:	6878      	ldr	r0, [r7, #4]
 801a86e:	f003 fd07 	bl	801e280 <memset>
    pcb->ttl = UDP_TTL;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	22ff      	movs	r2, #255	@ 0xff
 801a876:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a878:	687b      	ldr	r3, [r7, #4]
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	3708      	adds	r7, #8
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}
	...

0801a884 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a884:	b480      	push	{r7}
 801a886:	b085      	sub	sp, #20
 801a888:	af00      	add	r7, sp, #0
 801a88a:	6078      	str	r0, [r7, #4]
 801a88c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d01e      	beq.n	801a8d2 <udp_netif_ip_addr_changed+0x4e>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d01a      	beq.n	801a8d2 <udp_netif_ip_addr_changed+0x4e>
 801a89c:	683b      	ldr	r3, [r7, #0]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d017      	beq.n	801a8d2 <udp_netif_ip_addr_changed+0x4e>
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d013      	beq.n	801a8d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a8aa:	4b0d      	ldr	r3, [pc, #52]	@ (801a8e0 <udp_netif_ip_addr_changed+0x5c>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	60fb      	str	r3, [r7, #12]
 801a8b0:	e00c      	b.n	801a8cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	681a      	ldr	r2, [r3, #0]
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d103      	bne.n	801a8c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	681a      	ldr	r2, [r3, #0]
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	68db      	ldr	r3, [r3, #12]
 801a8ca:	60fb      	str	r3, [r7, #12]
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d1ef      	bne.n	801a8b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a8d2:	bf00      	nop
 801a8d4:	3714      	adds	r7, #20
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	2002780c 	.word	0x2002780c

0801a8e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b082      	sub	sp, #8
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a8ec:	4915      	ldr	r1, [pc, #84]	@ (801a944 <etharp_free_entry+0x60>)
 801a8ee:	687a      	ldr	r2, [r7, #4]
 801a8f0:	4613      	mov	r3, r2
 801a8f2:	005b      	lsls	r3, r3, #1
 801a8f4:	4413      	add	r3, r2
 801a8f6:	00db      	lsls	r3, r3, #3
 801a8f8:	440b      	add	r3, r1
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d013      	beq.n	801a928 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a900:	4910      	ldr	r1, [pc, #64]	@ (801a944 <etharp_free_entry+0x60>)
 801a902:	687a      	ldr	r2, [r7, #4]
 801a904:	4613      	mov	r3, r2
 801a906:	005b      	lsls	r3, r3, #1
 801a908:	4413      	add	r3, r2
 801a90a:	00db      	lsls	r3, r3, #3
 801a90c:	440b      	add	r3, r1
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	4618      	mov	r0, r3
 801a912:	f7f9 fe03 	bl	801451c <pbuf_free>
    arp_table[i].q = NULL;
 801a916:	490b      	ldr	r1, [pc, #44]	@ (801a944 <etharp_free_entry+0x60>)
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	4613      	mov	r3, r2
 801a91c:	005b      	lsls	r3, r3, #1
 801a91e:	4413      	add	r3, r2
 801a920:	00db      	lsls	r3, r3, #3
 801a922:	440b      	add	r3, r1
 801a924:	2200      	movs	r2, #0
 801a926:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a928:	4906      	ldr	r1, [pc, #24]	@ (801a944 <etharp_free_entry+0x60>)
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	4613      	mov	r3, r2
 801a92e:	005b      	lsls	r3, r3, #1
 801a930:	4413      	add	r3, r2
 801a932:	00db      	lsls	r3, r3, #3
 801a934:	440b      	add	r3, r1
 801a936:	3314      	adds	r3, #20
 801a938:	2200      	movs	r2, #0
 801a93a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a93c:	bf00      	nop
 801a93e:	3708      	adds	r7, #8
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	20027810 	.word	0x20027810

0801a948 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a94e:	2300      	movs	r3, #0
 801a950:	607b      	str	r3, [r7, #4]
 801a952:	e096      	b.n	801aa82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a954:	494f      	ldr	r1, [pc, #316]	@ (801aa94 <etharp_tmr+0x14c>)
 801a956:	687a      	ldr	r2, [r7, #4]
 801a958:	4613      	mov	r3, r2
 801a95a:	005b      	lsls	r3, r3, #1
 801a95c:	4413      	add	r3, r2
 801a95e:	00db      	lsls	r3, r3, #3
 801a960:	440b      	add	r3, r1
 801a962:	3314      	adds	r3, #20
 801a964:	781b      	ldrb	r3, [r3, #0]
 801a966:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a968:	78fb      	ldrb	r3, [r7, #3]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	f000 8086 	beq.w	801aa7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a970:	4948      	ldr	r1, [pc, #288]	@ (801aa94 <etharp_tmr+0x14c>)
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	4613      	mov	r3, r2
 801a976:	005b      	lsls	r3, r3, #1
 801a978:	4413      	add	r3, r2
 801a97a:	00db      	lsls	r3, r3, #3
 801a97c:	440b      	add	r3, r1
 801a97e:	3312      	adds	r3, #18
 801a980:	881b      	ldrh	r3, [r3, #0]
 801a982:	3301      	adds	r3, #1
 801a984:	b298      	uxth	r0, r3
 801a986:	4943      	ldr	r1, [pc, #268]	@ (801aa94 <etharp_tmr+0x14c>)
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	4613      	mov	r3, r2
 801a98c:	005b      	lsls	r3, r3, #1
 801a98e:	4413      	add	r3, r2
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	440b      	add	r3, r1
 801a994:	3312      	adds	r3, #18
 801a996:	4602      	mov	r2, r0
 801a998:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a99a:	493e      	ldr	r1, [pc, #248]	@ (801aa94 <etharp_tmr+0x14c>)
 801a99c:	687a      	ldr	r2, [r7, #4]
 801a99e:	4613      	mov	r3, r2
 801a9a0:	005b      	lsls	r3, r3, #1
 801a9a2:	4413      	add	r3, r2
 801a9a4:	00db      	lsls	r3, r3, #3
 801a9a6:	440b      	add	r3, r1
 801a9a8:	3312      	adds	r3, #18
 801a9aa:	881b      	ldrh	r3, [r3, #0]
 801a9ac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a9b0:	d215      	bcs.n	801a9de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a9b2:	4938      	ldr	r1, [pc, #224]	@ (801aa94 <etharp_tmr+0x14c>)
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	4613      	mov	r3, r2
 801a9b8:	005b      	lsls	r3, r3, #1
 801a9ba:	4413      	add	r3, r2
 801a9bc:	00db      	lsls	r3, r3, #3
 801a9be:	440b      	add	r3, r1
 801a9c0:	3314      	adds	r3, #20
 801a9c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a9c4:	2b01      	cmp	r3, #1
 801a9c6:	d10e      	bne.n	801a9e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a9c8:	4932      	ldr	r1, [pc, #200]	@ (801aa94 <etharp_tmr+0x14c>)
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	005b      	lsls	r3, r3, #1
 801a9d0:	4413      	add	r3, r2
 801a9d2:	00db      	lsls	r3, r3, #3
 801a9d4:	440b      	add	r3, r1
 801a9d6:	3312      	adds	r3, #18
 801a9d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a9da:	2b04      	cmp	r3, #4
 801a9dc:	d903      	bls.n	801a9e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f7ff ff80 	bl	801a8e4 <etharp_free_entry>
 801a9e4:	e04a      	b.n	801aa7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a9e6:	492b      	ldr	r1, [pc, #172]	@ (801aa94 <etharp_tmr+0x14c>)
 801a9e8:	687a      	ldr	r2, [r7, #4]
 801a9ea:	4613      	mov	r3, r2
 801a9ec:	005b      	lsls	r3, r3, #1
 801a9ee:	4413      	add	r3, r2
 801a9f0:	00db      	lsls	r3, r3, #3
 801a9f2:	440b      	add	r3, r1
 801a9f4:	3314      	adds	r3, #20
 801a9f6:	781b      	ldrb	r3, [r3, #0]
 801a9f8:	2b03      	cmp	r3, #3
 801a9fa:	d10a      	bne.n	801aa12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a9fc:	4925      	ldr	r1, [pc, #148]	@ (801aa94 <etharp_tmr+0x14c>)
 801a9fe:	687a      	ldr	r2, [r7, #4]
 801aa00:	4613      	mov	r3, r2
 801aa02:	005b      	lsls	r3, r3, #1
 801aa04:	4413      	add	r3, r2
 801aa06:	00db      	lsls	r3, r3, #3
 801aa08:	440b      	add	r3, r1
 801aa0a:	3314      	adds	r3, #20
 801aa0c:	2204      	movs	r2, #4
 801aa0e:	701a      	strb	r2, [r3, #0]
 801aa10:	e034      	b.n	801aa7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801aa12:	4920      	ldr	r1, [pc, #128]	@ (801aa94 <etharp_tmr+0x14c>)
 801aa14:	687a      	ldr	r2, [r7, #4]
 801aa16:	4613      	mov	r3, r2
 801aa18:	005b      	lsls	r3, r3, #1
 801aa1a:	4413      	add	r3, r2
 801aa1c:	00db      	lsls	r3, r3, #3
 801aa1e:	440b      	add	r3, r1
 801aa20:	3314      	adds	r3, #20
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	2b04      	cmp	r3, #4
 801aa26:	d10a      	bne.n	801aa3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801aa28:	491a      	ldr	r1, [pc, #104]	@ (801aa94 <etharp_tmr+0x14c>)
 801aa2a:	687a      	ldr	r2, [r7, #4]
 801aa2c:	4613      	mov	r3, r2
 801aa2e:	005b      	lsls	r3, r3, #1
 801aa30:	4413      	add	r3, r2
 801aa32:	00db      	lsls	r3, r3, #3
 801aa34:	440b      	add	r3, r1
 801aa36:	3314      	adds	r3, #20
 801aa38:	2202      	movs	r2, #2
 801aa3a:	701a      	strb	r2, [r3, #0]
 801aa3c:	e01e      	b.n	801aa7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aa3e:	4915      	ldr	r1, [pc, #84]	@ (801aa94 <etharp_tmr+0x14c>)
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	4613      	mov	r3, r2
 801aa44:	005b      	lsls	r3, r3, #1
 801aa46:	4413      	add	r3, r2
 801aa48:	00db      	lsls	r3, r3, #3
 801aa4a:	440b      	add	r3, r1
 801aa4c:	3314      	adds	r3, #20
 801aa4e:	781b      	ldrb	r3, [r3, #0]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d113      	bne.n	801aa7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801aa54:	490f      	ldr	r1, [pc, #60]	@ (801aa94 <etharp_tmr+0x14c>)
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	4613      	mov	r3, r2
 801aa5a:	005b      	lsls	r3, r3, #1
 801aa5c:	4413      	add	r3, r2
 801aa5e:	00db      	lsls	r3, r3, #3
 801aa60:	440b      	add	r3, r1
 801aa62:	3308      	adds	r3, #8
 801aa64:	6818      	ldr	r0, [r3, #0]
 801aa66:	687a      	ldr	r2, [r7, #4]
 801aa68:	4613      	mov	r3, r2
 801aa6a:	005b      	lsls	r3, r3, #1
 801aa6c:	4413      	add	r3, r2
 801aa6e:	00db      	lsls	r3, r3, #3
 801aa70:	4a08      	ldr	r2, [pc, #32]	@ (801aa94 <etharp_tmr+0x14c>)
 801aa72:	4413      	add	r3, r2
 801aa74:	3304      	adds	r3, #4
 801aa76:	4619      	mov	r1, r3
 801aa78:	f000 fe6e 	bl	801b758 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	3301      	adds	r3, #1
 801aa80:	607b      	str	r3, [r7, #4]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	2b09      	cmp	r3, #9
 801aa86:	f77f af65 	ble.w	801a954 <etharp_tmr+0xc>
      }
    }
  }
}
 801aa8a:	bf00      	nop
 801aa8c:	bf00      	nop
 801aa8e:	3708      	adds	r7, #8
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}
 801aa94:	20027810 	.word	0x20027810

0801aa98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b08a      	sub	sp, #40	@ 0x28
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	60f8      	str	r0, [r7, #12]
 801aaa0:	460b      	mov	r3, r1
 801aaa2:	607a      	str	r2, [r7, #4]
 801aaa4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801aaa6:	230a      	movs	r3, #10
 801aaa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801aaaa:	230a      	movs	r3, #10
 801aaac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801aaae:	230a      	movs	r3, #10
 801aab0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801aab2:	2300      	movs	r3, #0
 801aab4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801aab6:	230a      	movs	r3, #10
 801aab8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801aaba:	2300      	movs	r3, #0
 801aabc:	83bb      	strh	r3, [r7, #28]
 801aabe:	2300      	movs	r3, #0
 801aac0:	837b      	strh	r3, [r7, #26]
 801aac2:	2300      	movs	r3, #0
 801aac4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aac6:	2300      	movs	r3, #0
 801aac8:	843b      	strh	r3, [r7, #32]
 801aaca:	e0ae      	b.n	801ac2a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801aacc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aad0:	49a6      	ldr	r1, [pc, #664]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801aad2:	4613      	mov	r3, r2
 801aad4:	005b      	lsls	r3, r3, #1
 801aad6:	4413      	add	r3, r2
 801aad8:	00db      	lsls	r3, r3, #3
 801aada:	440b      	add	r3, r1
 801aadc:	3314      	adds	r3, #20
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801aae2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aae6:	2b0a      	cmp	r3, #10
 801aae8:	d105      	bne.n	801aaf6 <etharp_find_entry+0x5e>
 801aaea:	7dfb      	ldrb	r3, [r7, #23]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d102      	bne.n	801aaf6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801aaf0:	8c3b      	ldrh	r3, [r7, #32]
 801aaf2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801aaf4:	e095      	b.n	801ac22 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801aaf6:	7dfb      	ldrb	r3, [r7, #23]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	f000 8092 	beq.w	801ac22 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801aafe:	7dfb      	ldrb	r3, [r7, #23]
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d009      	beq.n	801ab18 <etharp_find_entry+0x80>
 801ab04:	7dfb      	ldrb	r3, [r7, #23]
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d806      	bhi.n	801ab18 <etharp_find_entry+0x80>
 801ab0a:	4b99      	ldr	r3, [pc, #612]	@ (801ad70 <etharp_find_entry+0x2d8>)
 801ab0c:	f240 1223 	movw	r2, #291	@ 0x123
 801ab10:	4998      	ldr	r1, [pc, #608]	@ (801ad74 <etharp_find_entry+0x2dc>)
 801ab12:	4899      	ldr	r0, [pc, #612]	@ (801ad78 <etharp_find_entry+0x2e0>)
 801ab14:	f003 fa5c 	bl	801dfd0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d020      	beq.n	801ab60 <etharp_find_entry+0xc8>
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	6819      	ldr	r1, [r3, #0]
 801ab22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab26:	4891      	ldr	r0, [pc, #580]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ab28:	4613      	mov	r3, r2
 801ab2a:	005b      	lsls	r3, r3, #1
 801ab2c:	4413      	add	r3, r2
 801ab2e:	00db      	lsls	r3, r3, #3
 801ab30:	4403      	add	r3, r0
 801ab32:	3304      	adds	r3, #4
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	4299      	cmp	r1, r3
 801ab38:	d112      	bne.n	801ab60 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d00c      	beq.n	801ab5a <etharp_find_entry+0xc2>
 801ab40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab44:	4989      	ldr	r1, [pc, #548]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ab46:	4613      	mov	r3, r2
 801ab48:	005b      	lsls	r3, r3, #1
 801ab4a:	4413      	add	r3, r2
 801ab4c:	00db      	lsls	r3, r3, #3
 801ab4e:	440b      	add	r3, r1
 801ab50:	3308      	adds	r3, #8
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	687a      	ldr	r2, [r7, #4]
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d102      	bne.n	801ab60 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ab5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ab5e:	e100      	b.n	801ad62 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ab60:	7dfb      	ldrb	r3, [r7, #23]
 801ab62:	2b01      	cmp	r3, #1
 801ab64:	d140      	bne.n	801abe8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ab66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab6a:	4980      	ldr	r1, [pc, #512]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ab6c:	4613      	mov	r3, r2
 801ab6e:	005b      	lsls	r3, r3, #1
 801ab70:	4413      	add	r3, r2
 801ab72:	00db      	lsls	r3, r3, #3
 801ab74:	440b      	add	r3, r1
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d01a      	beq.n	801abb2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ab7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab80:	497a      	ldr	r1, [pc, #488]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ab82:	4613      	mov	r3, r2
 801ab84:	005b      	lsls	r3, r3, #1
 801ab86:	4413      	add	r3, r2
 801ab88:	00db      	lsls	r3, r3, #3
 801ab8a:	440b      	add	r3, r1
 801ab8c:	3312      	adds	r3, #18
 801ab8e:	881b      	ldrh	r3, [r3, #0]
 801ab90:	8bba      	ldrh	r2, [r7, #28]
 801ab92:	429a      	cmp	r2, r3
 801ab94:	d845      	bhi.n	801ac22 <etharp_find_entry+0x18a>
            old_queue = i;
 801ab96:	8c3b      	ldrh	r3, [r7, #32]
 801ab98:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ab9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab9e:	4973      	ldr	r1, [pc, #460]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801aba0:	4613      	mov	r3, r2
 801aba2:	005b      	lsls	r3, r3, #1
 801aba4:	4413      	add	r3, r2
 801aba6:	00db      	lsls	r3, r3, #3
 801aba8:	440b      	add	r3, r1
 801abaa:	3312      	adds	r3, #18
 801abac:	881b      	ldrh	r3, [r3, #0]
 801abae:	83bb      	strh	r3, [r7, #28]
 801abb0:	e037      	b.n	801ac22 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801abb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abb6:	496d      	ldr	r1, [pc, #436]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801abb8:	4613      	mov	r3, r2
 801abba:	005b      	lsls	r3, r3, #1
 801abbc:	4413      	add	r3, r2
 801abbe:	00db      	lsls	r3, r3, #3
 801abc0:	440b      	add	r3, r1
 801abc2:	3312      	adds	r3, #18
 801abc4:	881b      	ldrh	r3, [r3, #0]
 801abc6:	8b7a      	ldrh	r2, [r7, #26]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d82a      	bhi.n	801ac22 <etharp_find_entry+0x18a>
            old_pending = i;
 801abcc:	8c3b      	ldrh	r3, [r7, #32]
 801abce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801abd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abd4:	4965      	ldr	r1, [pc, #404]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801abd6:	4613      	mov	r3, r2
 801abd8:	005b      	lsls	r3, r3, #1
 801abda:	4413      	add	r3, r2
 801abdc:	00db      	lsls	r3, r3, #3
 801abde:	440b      	add	r3, r1
 801abe0:	3312      	adds	r3, #18
 801abe2:	881b      	ldrh	r3, [r3, #0]
 801abe4:	837b      	strh	r3, [r7, #26]
 801abe6:	e01c      	b.n	801ac22 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801abe8:	7dfb      	ldrb	r3, [r7, #23]
 801abea:	2b01      	cmp	r3, #1
 801abec:	d919      	bls.n	801ac22 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801abee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abf2:	495e      	ldr	r1, [pc, #376]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801abf4:	4613      	mov	r3, r2
 801abf6:	005b      	lsls	r3, r3, #1
 801abf8:	4413      	add	r3, r2
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	440b      	add	r3, r1
 801abfe:	3312      	adds	r3, #18
 801ac00:	881b      	ldrh	r3, [r3, #0]
 801ac02:	8b3a      	ldrh	r2, [r7, #24]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d80c      	bhi.n	801ac22 <etharp_find_entry+0x18a>
            old_stable = i;
 801ac08:	8c3b      	ldrh	r3, [r7, #32]
 801ac0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801ac0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac10:	4956      	ldr	r1, [pc, #344]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ac12:	4613      	mov	r3, r2
 801ac14:	005b      	lsls	r3, r3, #1
 801ac16:	4413      	add	r3, r2
 801ac18:	00db      	lsls	r3, r3, #3
 801ac1a:	440b      	add	r3, r1
 801ac1c:	3312      	adds	r3, #18
 801ac1e:	881b      	ldrh	r3, [r3, #0]
 801ac20:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac22:	8c3b      	ldrh	r3, [r7, #32]
 801ac24:	3301      	adds	r3, #1
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	843b      	strh	r3, [r7, #32]
 801ac2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac2e:	2b09      	cmp	r3, #9
 801ac30:	f77f af4c 	ble.w	801aacc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ac34:	7afb      	ldrb	r3, [r7, #11]
 801ac36:	f003 0302 	and.w	r3, r3, #2
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d108      	bne.n	801ac50 <etharp_find_entry+0x1b8>
 801ac3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac42:	2b0a      	cmp	r3, #10
 801ac44:	d107      	bne.n	801ac56 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ac46:	7afb      	ldrb	r3, [r7, #11]
 801ac48:	f003 0301 	and.w	r3, r3, #1
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d102      	bne.n	801ac56 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ac50:	f04f 33ff 	mov.w	r3, #4294967295
 801ac54:	e085      	b.n	801ad62 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ac56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac5a:	2b09      	cmp	r3, #9
 801ac5c:	dc02      	bgt.n	801ac64 <etharp_find_entry+0x1cc>
    i = empty;
 801ac5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ac60:	843b      	strh	r3, [r7, #32]
 801ac62:	e039      	b.n	801acd8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ac64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801ac68:	2b09      	cmp	r3, #9
 801ac6a:	dc14      	bgt.n	801ac96 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ac6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac6e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ac70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac74:	493d      	ldr	r1, [pc, #244]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ac76:	4613      	mov	r3, r2
 801ac78:	005b      	lsls	r3, r3, #1
 801ac7a:	4413      	add	r3, r2
 801ac7c:	00db      	lsls	r3, r3, #3
 801ac7e:	440b      	add	r3, r1
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d018      	beq.n	801acb8 <etharp_find_entry+0x220>
 801ac86:	4b3a      	ldr	r3, [pc, #232]	@ (801ad70 <etharp_find_entry+0x2d8>)
 801ac88:	f240 126d 	movw	r2, #365	@ 0x16d
 801ac8c:	493b      	ldr	r1, [pc, #236]	@ (801ad7c <etharp_find_entry+0x2e4>)
 801ac8e:	483a      	ldr	r0, [pc, #232]	@ (801ad78 <etharp_find_entry+0x2e0>)
 801ac90:	f003 f99e 	bl	801dfd0 <iprintf>
 801ac94:	e010      	b.n	801acb8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ac96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ac9a:	2b09      	cmp	r3, #9
 801ac9c:	dc02      	bgt.n	801aca4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ac9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801aca0:	843b      	strh	r3, [r7, #32]
 801aca2:	e009      	b.n	801acb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801aca4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801aca8:	2b09      	cmp	r3, #9
 801acaa:	dc02      	bgt.n	801acb2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801acac:	8bfb      	ldrh	r3, [r7, #30]
 801acae:	843b      	strh	r3, [r7, #32]
 801acb0:	e002      	b.n	801acb8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801acb2:	f04f 33ff 	mov.w	r3, #4294967295
 801acb6:	e054      	b.n	801ad62 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801acb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801acbc:	2b09      	cmp	r3, #9
 801acbe:	dd06      	ble.n	801acce <etharp_find_entry+0x236>
 801acc0:	4b2b      	ldr	r3, [pc, #172]	@ (801ad70 <etharp_find_entry+0x2d8>)
 801acc2:	f240 127f 	movw	r2, #383	@ 0x17f
 801acc6:	492e      	ldr	r1, [pc, #184]	@ (801ad80 <etharp_find_entry+0x2e8>)
 801acc8:	482b      	ldr	r0, [pc, #172]	@ (801ad78 <etharp_find_entry+0x2e0>)
 801acca:	f003 f981 	bl	801dfd0 <iprintf>
    etharp_free_entry(i);
 801acce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801acd2:	4618      	mov	r0, r3
 801acd4:	f7ff fe06 	bl	801a8e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801acd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801acdc:	2b09      	cmp	r3, #9
 801acde:	dd06      	ble.n	801acee <etharp_find_entry+0x256>
 801ace0:	4b23      	ldr	r3, [pc, #140]	@ (801ad70 <etharp_find_entry+0x2d8>)
 801ace2:	f240 1283 	movw	r2, #387	@ 0x183
 801ace6:	4926      	ldr	r1, [pc, #152]	@ (801ad80 <etharp_find_entry+0x2e8>)
 801ace8:	4823      	ldr	r0, [pc, #140]	@ (801ad78 <etharp_find_entry+0x2e0>)
 801acea:	f003 f971 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801acee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acf2:	491e      	ldr	r1, [pc, #120]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801acf4:	4613      	mov	r3, r2
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	4413      	add	r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	440b      	add	r3, r1
 801acfe:	3314      	adds	r3, #20
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d006      	beq.n	801ad14 <etharp_find_entry+0x27c>
 801ad06:	4b1a      	ldr	r3, [pc, #104]	@ (801ad70 <etharp_find_entry+0x2d8>)
 801ad08:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801ad0c:	491d      	ldr	r1, [pc, #116]	@ (801ad84 <etharp_find_entry+0x2ec>)
 801ad0e:	481a      	ldr	r0, [pc, #104]	@ (801ad78 <etharp_find_entry+0x2e0>)
 801ad10:	f003 f95e 	bl	801dfd0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d00b      	beq.n	801ad32 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ad1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	6819      	ldr	r1, [r3, #0]
 801ad22:	4812      	ldr	r0, [pc, #72]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ad24:	4613      	mov	r3, r2
 801ad26:	005b      	lsls	r3, r3, #1
 801ad28:	4413      	add	r3, r2
 801ad2a:	00db      	lsls	r3, r3, #3
 801ad2c:	4403      	add	r3, r0
 801ad2e:	3304      	adds	r3, #4
 801ad30:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ad32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad36:	490d      	ldr	r1, [pc, #52]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ad38:	4613      	mov	r3, r2
 801ad3a:	005b      	lsls	r3, r3, #1
 801ad3c:	4413      	add	r3, r2
 801ad3e:	00db      	lsls	r3, r3, #3
 801ad40:	440b      	add	r3, r1
 801ad42:	3312      	adds	r3, #18
 801ad44:	2200      	movs	r2, #0
 801ad46:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801ad48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad4c:	4907      	ldr	r1, [pc, #28]	@ (801ad6c <etharp_find_entry+0x2d4>)
 801ad4e:	4613      	mov	r3, r2
 801ad50:	005b      	lsls	r3, r3, #1
 801ad52:	4413      	add	r3, r2
 801ad54:	00db      	lsls	r3, r3, #3
 801ad56:	440b      	add	r3, r1
 801ad58:	3308      	adds	r3, #8
 801ad5a:	687a      	ldr	r2, [r7, #4]
 801ad5c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801ad5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801ad62:	4618      	mov	r0, r3
 801ad64:	3728      	adds	r7, #40	@ 0x28
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}
 801ad6a:	bf00      	nop
 801ad6c:	20027810 	.word	0x20027810
 801ad70:	08021548 	.word	0x08021548
 801ad74:	08021580 	.word	0x08021580
 801ad78:	080215c0 	.word	0x080215c0
 801ad7c:	080215e8 	.word	0x080215e8
 801ad80:	08021600 	.word	0x08021600
 801ad84:	08021614 	.word	0x08021614

0801ad88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b088      	sub	sp, #32
 801ad8c:	af02      	add	r7, sp, #8
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	60b9      	str	r1, [r7, #8]
 801ad92:	607a      	str	r2, [r7, #4]
 801ad94:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ad9c:	2b06      	cmp	r3, #6
 801ad9e:	d006      	beq.n	801adae <etharp_update_arp_entry+0x26>
 801ada0:	4b48      	ldr	r3, [pc, #288]	@ (801aec4 <etharp_update_arp_entry+0x13c>)
 801ada2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ada6:	4948      	ldr	r1, [pc, #288]	@ (801aec8 <etharp_update_arp_entry+0x140>)
 801ada8:	4848      	ldr	r0, [pc, #288]	@ (801aecc <etharp_update_arp_entry+0x144>)
 801adaa:	f003 f911 	bl	801dfd0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d012      	beq.n	801adda <etharp_update_arp_entry+0x52>
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d00e      	beq.n	801adda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	68f9      	ldr	r1, [r7, #12]
 801adc2:	4618      	mov	r0, r3
 801adc4:	f001 f8fe 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801adc8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d105      	bne.n	801adda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801add6:	2be0      	cmp	r3, #224	@ 0xe0
 801add8:	d102      	bne.n	801ade0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801adda:	f06f 030f 	mvn.w	r3, #15
 801adde:	e06c      	b.n	801aeba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ade0:	78fb      	ldrb	r3, [r7, #3]
 801ade2:	68fa      	ldr	r2, [r7, #12]
 801ade4:	4619      	mov	r1, r3
 801ade6:	68b8      	ldr	r0, [r7, #8]
 801ade8:	f7ff fe56 	bl	801aa98 <etharp_find_entry>
 801adec:	4603      	mov	r3, r0
 801adee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801adf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	da02      	bge.n	801adfe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801adf8:	8afb      	ldrh	r3, [r7, #22]
 801adfa:	b25b      	sxtb	r3, r3
 801adfc:	e05d      	b.n	801aeba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801adfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae02:	4933      	ldr	r1, [pc, #204]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae04:	4613      	mov	r3, r2
 801ae06:	005b      	lsls	r3, r3, #1
 801ae08:	4413      	add	r3, r2
 801ae0a:	00db      	lsls	r3, r3, #3
 801ae0c:	440b      	add	r3, r1
 801ae0e:	3314      	adds	r3, #20
 801ae10:	2202      	movs	r2, #2
 801ae12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ae14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae18:	492d      	ldr	r1, [pc, #180]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae1a:	4613      	mov	r3, r2
 801ae1c:	005b      	lsls	r3, r3, #1
 801ae1e:	4413      	add	r3, r2
 801ae20:	00db      	lsls	r3, r3, #3
 801ae22:	440b      	add	r3, r1
 801ae24:	3308      	adds	r3, #8
 801ae26:	68fa      	ldr	r2, [r7, #12]
 801ae28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ae2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae2e:	4613      	mov	r3, r2
 801ae30:	005b      	lsls	r3, r3, #1
 801ae32:	4413      	add	r3, r2
 801ae34:	00db      	lsls	r3, r3, #3
 801ae36:	3308      	adds	r3, #8
 801ae38:	4a25      	ldr	r2, [pc, #148]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae3a:	4413      	add	r3, r2
 801ae3c:	3304      	adds	r3, #4
 801ae3e:	2206      	movs	r2, #6
 801ae40:	6879      	ldr	r1, [r7, #4]
 801ae42:	4618      	mov	r0, r3
 801ae44:	f003 faef 	bl	801e426 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ae48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae4c:	4920      	ldr	r1, [pc, #128]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae4e:	4613      	mov	r3, r2
 801ae50:	005b      	lsls	r3, r3, #1
 801ae52:	4413      	add	r3, r2
 801ae54:	00db      	lsls	r3, r3, #3
 801ae56:	440b      	add	r3, r1
 801ae58:	3312      	adds	r3, #18
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ae5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae62:	491b      	ldr	r1, [pc, #108]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae64:	4613      	mov	r3, r2
 801ae66:	005b      	lsls	r3, r3, #1
 801ae68:	4413      	add	r3, r2
 801ae6a:	00db      	lsls	r3, r3, #3
 801ae6c:	440b      	add	r3, r1
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d021      	beq.n	801aeb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ae74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae78:	4915      	ldr	r1, [pc, #84]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae7a:	4613      	mov	r3, r2
 801ae7c:	005b      	lsls	r3, r3, #1
 801ae7e:	4413      	add	r3, r2
 801ae80:	00db      	lsls	r3, r3, #3
 801ae82:	440b      	add	r3, r1
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ae88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae8c:	4910      	ldr	r1, [pc, #64]	@ (801aed0 <etharp_update_arp_entry+0x148>)
 801ae8e:	4613      	mov	r3, r2
 801ae90:	005b      	lsls	r3, r3, #1
 801ae92:	4413      	add	r3, r2
 801ae94:	00db      	lsls	r3, r3, #3
 801ae96:	440b      	add	r3, r1
 801ae98:	2200      	movs	r2, #0
 801ae9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801aea2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	6939      	ldr	r1, [r7, #16]
 801aeac:	68f8      	ldr	r0, [r7, #12]
 801aeae:	f001 ff97 	bl	801cde0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801aeb2:	6938      	ldr	r0, [r7, #16]
 801aeb4:	f7f9 fb32 	bl	801451c <pbuf_free>
  }
  return ERR_OK;
 801aeb8:	2300      	movs	r3, #0
}
 801aeba:	4618      	mov	r0, r3
 801aebc:	3718      	adds	r7, #24
 801aebe:	46bd      	mov	sp, r7
 801aec0:	bd80      	pop	{r7, pc}
 801aec2:	bf00      	nop
 801aec4:	08021548 	.word	0x08021548
 801aec8:	08021640 	.word	0x08021640
 801aecc:	080215c0 	.word	0x080215c0
 801aed0:	20027810 	.word	0x20027810

0801aed4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b084      	sub	sp, #16
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aedc:	2300      	movs	r3, #0
 801aede:	60fb      	str	r3, [r7, #12]
 801aee0:	e01e      	b.n	801af20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801aee2:	4913      	ldr	r1, [pc, #76]	@ (801af30 <etharp_cleanup_netif+0x5c>)
 801aee4:	68fa      	ldr	r2, [r7, #12]
 801aee6:	4613      	mov	r3, r2
 801aee8:	005b      	lsls	r3, r3, #1
 801aeea:	4413      	add	r3, r2
 801aeec:	00db      	lsls	r3, r3, #3
 801aeee:	440b      	add	r3, r1
 801aef0:	3314      	adds	r3, #20
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801aef6:	7afb      	ldrb	r3, [r7, #11]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d00e      	beq.n	801af1a <etharp_cleanup_netif+0x46>
 801aefc:	490c      	ldr	r1, [pc, #48]	@ (801af30 <etharp_cleanup_netif+0x5c>)
 801aefe:	68fa      	ldr	r2, [r7, #12]
 801af00:	4613      	mov	r3, r2
 801af02:	005b      	lsls	r3, r3, #1
 801af04:	4413      	add	r3, r2
 801af06:	00db      	lsls	r3, r3, #3
 801af08:	440b      	add	r3, r1
 801af0a:	3308      	adds	r3, #8
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	687a      	ldr	r2, [r7, #4]
 801af10:	429a      	cmp	r2, r3
 801af12:	d102      	bne.n	801af1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801af14:	68f8      	ldr	r0, [r7, #12]
 801af16:	f7ff fce5 	bl	801a8e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	3301      	adds	r3, #1
 801af1e:	60fb      	str	r3, [r7, #12]
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	2b09      	cmp	r3, #9
 801af24:	dddd      	ble.n	801aee2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801af26:	bf00      	nop
 801af28:	bf00      	nop
 801af2a:	3710      	adds	r7, #16
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}
 801af30:	20027810 	.word	0x20027810

0801af34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801af34:	b5b0      	push	{r4, r5, r7, lr}
 801af36:	b08a      	sub	sp, #40	@ 0x28
 801af38:	af04      	add	r7, sp, #16
 801af3a:	6078      	str	r0, [r7, #4]
 801af3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d107      	bne.n	801af54 <etharp_input+0x20>
 801af44:	4b3d      	ldr	r3, [pc, #244]	@ (801b03c <etharp_input+0x108>)
 801af46:	f240 228a 	movw	r2, #650	@ 0x28a
 801af4a:	493d      	ldr	r1, [pc, #244]	@ (801b040 <etharp_input+0x10c>)
 801af4c:	483d      	ldr	r0, [pc, #244]	@ (801b044 <etharp_input+0x110>)
 801af4e:	f003 f83f 	bl	801dfd0 <iprintf>
 801af52:	e06f      	b.n	801b034 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	685b      	ldr	r3, [r3, #4]
 801af58:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801af5a:	693b      	ldr	r3, [r7, #16]
 801af5c:	881b      	ldrh	r3, [r3, #0]
 801af5e:	b29b      	uxth	r3, r3
 801af60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af64:	d10c      	bne.n	801af80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af66:	693b      	ldr	r3, [r7, #16]
 801af68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801af6a:	2b06      	cmp	r3, #6
 801af6c:	d108      	bne.n	801af80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af72:	2b04      	cmp	r3, #4
 801af74:	d104      	bne.n	801af80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801af76:	693b      	ldr	r3, [r7, #16]
 801af78:	885b      	ldrh	r3, [r3, #2]
 801af7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af7c:	2b08      	cmp	r3, #8
 801af7e:	d003      	beq.n	801af88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f7f9 facb 	bl	801451c <pbuf_free>
    return;
 801af86:	e055      	b.n	801b034 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801af88:	693b      	ldr	r3, [r7, #16]
 801af8a:	330e      	adds	r3, #14
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801af90:	693b      	ldr	r3, [r7, #16]
 801af92:	3318      	adds	r3, #24
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	3304      	adds	r3, #4
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d102      	bne.n	801afa8 <etharp_input+0x74>
    for_us = 0;
 801afa2:	2300      	movs	r3, #0
 801afa4:	75fb      	strb	r3, [r7, #23]
 801afa6:	e009      	b.n	801afbc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801afa8:	68ba      	ldr	r2, [r7, #8]
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	3304      	adds	r3, #4
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	429a      	cmp	r2, r3
 801afb2:	bf0c      	ite	eq
 801afb4:	2301      	moveq	r3, #1
 801afb6:	2300      	movne	r3, #0
 801afb8:	b2db      	uxtb	r3, r3
 801afba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801afbc:	693b      	ldr	r3, [r7, #16]
 801afbe:	f103 0208 	add.w	r2, r3, #8
 801afc2:	7dfb      	ldrb	r3, [r7, #23]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d001      	beq.n	801afcc <etharp_input+0x98>
 801afc8:	2301      	movs	r3, #1
 801afca:	e000      	b.n	801afce <etharp_input+0x9a>
 801afcc:	2302      	movs	r3, #2
 801afce:	f107 010c 	add.w	r1, r7, #12
 801afd2:	6838      	ldr	r0, [r7, #0]
 801afd4:	f7ff fed8 	bl	801ad88 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801afd8:	693b      	ldr	r3, [r7, #16]
 801afda:	88db      	ldrh	r3, [r3, #6]
 801afdc:	b29b      	uxth	r3, r3
 801afde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801afe2:	d003      	beq.n	801afec <etharp_input+0xb8>
 801afe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801afe8:	d01e      	beq.n	801b028 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801afea:	e020      	b.n	801b02e <etharp_input+0xfa>
      if (for_us) {
 801afec:	7dfb      	ldrb	r3, [r7, #23]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d01c      	beq.n	801b02c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801aff2:	683b      	ldr	r3, [r7, #0]
 801aff4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801aff8:	693b      	ldr	r3, [r7, #16]
 801affa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b004:	683b      	ldr	r3, [r7, #0]
 801b006:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b008:	693a      	ldr	r2, [r7, #16]
 801b00a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b00c:	2102      	movs	r1, #2
 801b00e:	9103      	str	r1, [sp, #12]
 801b010:	f107 010c 	add.w	r1, r7, #12
 801b014:	9102      	str	r1, [sp, #8]
 801b016:	9201      	str	r2, [sp, #4]
 801b018:	9300      	str	r3, [sp, #0]
 801b01a:	462b      	mov	r3, r5
 801b01c:	4622      	mov	r2, r4
 801b01e:	4601      	mov	r1, r0
 801b020:	6838      	ldr	r0, [r7, #0]
 801b022:	f000 faeb 	bl	801b5fc <etharp_raw>
      break;
 801b026:	e001      	b.n	801b02c <etharp_input+0xf8>
      break;
 801b028:	bf00      	nop
 801b02a:	e000      	b.n	801b02e <etharp_input+0xfa>
      break;
 801b02c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b02e:	6878      	ldr	r0, [r7, #4]
 801b030:	f7f9 fa74 	bl	801451c <pbuf_free>
}
 801b034:	3718      	adds	r7, #24
 801b036:	46bd      	mov	sp, r7
 801b038:	bdb0      	pop	{r4, r5, r7, pc}
 801b03a:	bf00      	nop
 801b03c:	08021548 	.word	0x08021548
 801b040:	08021698 	.word	0x08021698
 801b044:	080215c0 	.word	0x080215c0

0801b048 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b086      	sub	sp, #24
 801b04c:	af02      	add	r7, sp, #8
 801b04e:	60f8      	str	r0, [r7, #12]
 801b050:	60b9      	str	r1, [r7, #8]
 801b052:	4613      	mov	r3, r2
 801b054:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b056:	79fa      	ldrb	r2, [r7, #7]
 801b058:	4944      	ldr	r1, [pc, #272]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b05a:	4613      	mov	r3, r2
 801b05c:	005b      	lsls	r3, r3, #1
 801b05e:	4413      	add	r3, r2
 801b060:	00db      	lsls	r3, r3, #3
 801b062:	440b      	add	r3, r1
 801b064:	3314      	adds	r3, #20
 801b066:	781b      	ldrb	r3, [r3, #0]
 801b068:	2b01      	cmp	r3, #1
 801b06a:	d806      	bhi.n	801b07a <etharp_output_to_arp_index+0x32>
 801b06c:	4b40      	ldr	r3, [pc, #256]	@ (801b170 <etharp_output_to_arp_index+0x128>)
 801b06e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b072:	4940      	ldr	r1, [pc, #256]	@ (801b174 <etharp_output_to_arp_index+0x12c>)
 801b074:	4840      	ldr	r0, [pc, #256]	@ (801b178 <etharp_output_to_arp_index+0x130>)
 801b076:	f002 ffab 	bl	801dfd0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b07a:	79fa      	ldrb	r2, [r7, #7]
 801b07c:	493b      	ldr	r1, [pc, #236]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b07e:	4613      	mov	r3, r2
 801b080:	005b      	lsls	r3, r3, #1
 801b082:	4413      	add	r3, r2
 801b084:	00db      	lsls	r3, r3, #3
 801b086:	440b      	add	r3, r1
 801b088:	3314      	adds	r3, #20
 801b08a:	781b      	ldrb	r3, [r3, #0]
 801b08c:	2b02      	cmp	r3, #2
 801b08e:	d153      	bne.n	801b138 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b090:	79fa      	ldrb	r2, [r7, #7]
 801b092:	4936      	ldr	r1, [pc, #216]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b094:	4613      	mov	r3, r2
 801b096:	005b      	lsls	r3, r3, #1
 801b098:	4413      	add	r3, r2
 801b09a:	00db      	lsls	r3, r3, #3
 801b09c:	440b      	add	r3, r1
 801b09e:	3312      	adds	r3, #18
 801b0a0:	881b      	ldrh	r3, [r3, #0]
 801b0a2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b0a6:	d919      	bls.n	801b0dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b0a8:	79fa      	ldrb	r2, [r7, #7]
 801b0aa:	4613      	mov	r3, r2
 801b0ac:	005b      	lsls	r3, r3, #1
 801b0ae:	4413      	add	r3, r2
 801b0b0:	00db      	lsls	r3, r3, #3
 801b0b2:	4a2e      	ldr	r2, [pc, #184]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b0b4:	4413      	add	r3, r2
 801b0b6:	3304      	adds	r3, #4
 801b0b8:	4619      	mov	r1, r3
 801b0ba:	68f8      	ldr	r0, [r7, #12]
 801b0bc:	f000 fb4c 	bl	801b758 <etharp_request>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d138      	bne.n	801b138 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b0c6:	79fa      	ldrb	r2, [r7, #7]
 801b0c8:	4928      	ldr	r1, [pc, #160]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b0ca:	4613      	mov	r3, r2
 801b0cc:	005b      	lsls	r3, r3, #1
 801b0ce:	4413      	add	r3, r2
 801b0d0:	00db      	lsls	r3, r3, #3
 801b0d2:	440b      	add	r3, r1
 801b0d4:	3314      	adds	r3, #20
 801b0d6:	2203      	movs	r2, #3
 801b0d8:	701a      	strb	r2, [r3, #0]
 801b0da:	e02d      	b.n	801b138 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b0dc:	79fa      	ldrb	r2, [r7, #7]
 801b0de:	4923      	ldr	r1, [pc, #140]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b0e0:	4613      	mov	r3, r2
 801b0e2:	005b      	lsls	r3, r3, #1
 801b0e4:	4413      	add	r3, r2
 801b0e6:	00db      	lsls	r3, r3, #3
 801b0e8:	440b      	add	r3, r1
 801b0ea:	3312      	adds	r3, #18
 801b0ec:	881b      	ldrh	r3, [r3, #0]
 801b0ee:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b0f2:	d321      	bcc.n	801b138 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b0f4:	79fa      	ldrb	r2, [r7, #7]
 801b0f6:	4613      	mov	r3, r2
 801b0f8:	005b      	lsls	r3, r3, #1
 801b0fa:	4413      	add	r3, r2
 801b0fc:	00db      	lsls	r3, r3, #3
 801b0fe:	4a1b      	ldr	r2, [pc, #108]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b100:	4413      	add	r3, r2
 801b102:	1d19      	adds	r1, r3, #4
 801b104:	79fa      	ldrb	r2, [r7, #7]
 801b106:	4613      	mov	r3, r2
 801b108:	005b      	lsls	r3, r3, #1
 801b10a:	4413      	add	r3, r2
 801b10c:	00db      	lsls	r3, r3, #3
 801b10e:	3308      	adds	r3, #8
 801b110:	4a16      	ldr	r2, [pc, #88]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b112:	4413      	add	r3, r2
 801b114:	3304      	adds	r3, #4
 801b116:	461a      	mov	r2, r3
 801b118:	68f8      	ldr	r0, [r7, #12]
 801b11a:	f000 fafb 	bl	801b714 <etharp_request_dst>
 801b11e:	4603      	mov	r3, r0
 801b120:	2b00      	cmp	r3, #0
 801b122:	d109      	bne.n	801b138 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b124:	79fa      	ldrb	r2, [r7, #7]
 801b126:	4911      	ldr	r1, [pc, #68]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b128:	4613      	mov	r3, r2
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	4413      	add	r3, r2
 801b12e:	00db      	lsls	r3, r3, #3
 801b130:	440b      	add	r3, r1
 801b132:	3314      	adds	r3, #20
 801b134:	2203      	movs	r2, #3
 801b136:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b13e:	79fa      	ldrb	r2, [r7, #7]
 801b140:	4613      	mov	r3, r2
 801b142:	005b      	lsls	r3, r3, #1
 801b144:	4413      	add	r3, r2
 801b146:	00db      	lsls	r3, r3, #3
 801b148:	3308      	adds	r3, #8
 801b14a:	4a08      	ldr	r2, [pc, #32]	@ (801b16c <etharp_output_to_arp_index+0x124>)
 801b14c:	4413      	add	r3, r2
 801b14e:	3304      	adds	r3, #4
 801b150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b154:	9200      	str	r2, [sp, #0]
 801b156:	460a      	mov	r2, r1
 801b158:	68b9      	ldr	r1, [r7, #8]
 801b15a:	68f8      	ldr	r0, [r7, #12]
 801b15c:	f001 fe40 	bl	801cde0 <ethernet_output>
 801b160:	4603      	mov	r3, r0
}
 801b162:	4618      	mov	r0, r3
 801b164:	3710      	adds	r7, #16
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}
 801b16a:	bf00      	nop
 801b16c:	20027810 	.word	0x20027810
 801b170:	08021548 	.word	0x08021548
 801b174:	080216b8 	.word	0x080216b8
 801b178:	080215c0 	.word	0x080215c0

0801b17c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b08a      	sub	sp, #40	@ 0x28
 801b180:	af02      	add	r7, sp, #8
 801b182:	60f8      	str	r0, [r7, #12]
 801b184:	60b9      	str	r1, [r7, #8]
 801b186:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d106      	bne.n	801b1a0 <etharp_output+0x24>
 801b192:	4b73      	ldr	r3, [pc, #460]	@ (801b360 <etharp_output+0x1e4>)
 801b194:	f240 321e 	movw	r2, #798	@ 0x31e
 801b198:	4972      	ldr	r1, [pc, #456]	@ (801b364 <etharp_output+0x1e8>)
 801b19a:	4873      	ldr	r0, [pc, #460]	@ (801b368 <etharp_output+0x1ec>)
 801b19c:	f002 ff18 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d106      	bne.n	801b1b4 <etharp_output+0x38>
 801b1a6:	4b6e      	ldr	r3, [pc, #440]	@ (801b360 <etharp_output+0x1e4>)
 801b1a8:	f240 321f 	movw	r2, #799	@ 0x31f
 801b1ac:	496f      	ldr	r1, [pc, #444]	@ (801b36c <etharp_output+0x1f0>)
 801b1ae:	486e      	ldr	r0, [pc, #440]	@ (801b368 <etharp_output+0x1ec>)
 801b1b0:	f002 ff0e 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d106      	bne.n	801b1c8 <etharp_output+0x4c>
 801b1ba:	4b69      	ldr	r3, [pc, #420]	@ (801b360 <etharp_output+0x1e4>)
 801b1bc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b1c0:	496b      	ldr	r1, [pc, #428]	@ (801b370 <etharp_output+0x1f4>)
 801b1c2:	4869      	ldr	r0, [pc, #420]	@ (801b368 <etharp_output+0x1ec>)
 801b1c4:	f002 ff04 	bl	801dfd0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	68f9      	ldr	r1, [r7, #12]
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f000 fef8 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d002      	beq.n	801b1e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b1da:	4b66      	ldr	r3, [pc, #408]	@ (801b374 <etharp_output+0x1f8>)
 801b1dc:	61fb      	str	r3, [r7, #28]
 801b1de:	e0af      	b.n	801b340 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b1e8:	2be0      	cmp	r3, #224	@ 0xe0
 801b1ea:	d118      	bne.n	801b21e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b1f4:	235e      	movs	r3, #94	@ 0x5e
 801b1f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b202:	b2db      	uxtb	r3, r3
 801b204:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	3302      	adds	r3, #2
 801b20a:	781b      	ldrb	r3, [r3, #0]
 801b20c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	3303      	adds	r3, #3
 801b212:	781b      	ldrb	r3, [r3, #0]
 801b214:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b216:	f107 0310 	add.w	r3, r7, #16
 801b21a:	61fb      	str	r3, [r7, #28]
 801b21c:	e090      	b.n	801b340 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681a      	ldr	r2, [r3, #0]
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	3304      	adds	r3, #4
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	405a      	eors	r2, r3
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	3308      	adds	r3, #8
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4013      	ands	r3, r2
 801b232:	2b00      	cmp	r3, #0
 801b234:	d012      	beq.n	801b25c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b23c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b240:	4293      	cmp	r3, r2
 801b242:	d00b      	beq.n	801b25c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	330c      	adds	r3, #12
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d003      	beq.n	801b256 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	330c      	adds	r3, #12
 801b252:	61bb      	str	r3, [r7, #24]
 801b254:	e002      	b.n	801b25c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b256:	f06f 0303 	mvn.w	r3, #3
 801b25a:	e07d      	b.n	801b358 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b25c:	4b46      	ldr	r3, [pc, #280]	@ (801b378 <etharp_output+0x1fc>)
 801b25e:	781b      	ldrb	r3, [r3, #0]
 801b260:	4619      	mov	r1, r3
 801b262:	4a46      	ldr	r2, [pc, #280]	@ (801b37c <etharp_output+0x200>)
 801b264:	460b      	mov	r3, r1
 801b266:	005b      	lsls	r3, r3, #1
 801b268:	440b      	add	r3, r1
 801b26a:	00db      	lsls	r3, r3, #3
 801b26c:	4413      	add	r3, r2
 801b26e:	3314      	adds	r3, #20
 801b270:	781b      	ldrb	r3, [r3, #0]
 801b272:	2b01      	cmp	r3, #1
 801b274:	d925      	bls.n	801b2c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b276:	4b40      	ldr	r3, [pc, #256]	@ (801b378 <etharp_output+0x1fc>)
 801b278:	781b      	ldrb	r3, [r3, #0]
 801b27a:	4619      	mov	r1, r3
 801b27c:	4a3f      	ldr	r2, [pc, #252]	@ (801b37c <etharp_output+0x200>)
 801b27e:	460b      	mov	r3, r1
 801b280:	005b      	lsls	r3, r3, #1
 801b282:	440b      	add	r3, r1
 801b284:	00db      	lsls	r3, r3, #3
 801b286:	4413      	add	r3, r2
 801b288:	3308      	adds	r3, #8
 801b28a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b28c:	68fa      	ldr	r2, [r7, #12]
 801b28e:	429a      	cmp	r2, r3
 801b290:	d117      	bne.n	801b2c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b292:	69bb      	ldr	r3, [r7, #24]
 801b294:	681a      	ldr	r2, [r3, #0]
 801b296:	4b38      	ldr	r3, [pc, #224]	@ (801b378 <etharp_output+0x1fc>)
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	4618      	mov	r0, r3
 801b29c:	4937      	ldr	r1, [pc, #220]	@ (801b37c <etharp_output+0x200>)
 801b29e:	4603      	mov	r3, r0
 801b2a0:	005b      	lsls	r3, r3, #1
 801b2a2:	4403      	add	r3, r0
 801b2a4:	00db      	lsls	r3, r3, #3
 801b2a6:	440b      	add	r3, r1
 801b2a8:	3304      	adds	r3, #4
 801b2aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	d108      	bne.n	801b2c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b2b0:	4b31      	ldr	r3, [pc, #196]	@ (801b378 <etharp_output+0x1fc>)
 801b2b2:	781b      	ldrb	r3, [r3, #0]
 801b2b4:	461a      	mov	r2, r3
 801b2b6:	68b9      	ldr	r1, [r7, #8]
 801b2b8:	68f8      	ldr	r0, [r7, #12]
 801b2ba:	f7ff fec5 	bl	801b048 <etharp_output_to_arp_index>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	e04a      	b.n	801b358 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	75fb      	strb	r3, [r7, #23]
 801b2c6:	e031      	b.n	801b32c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b2c8:	7dfa      	ldrb	r2, [r7, #23]
 801b2ca:	492c      	ldr	r1, [pc, #176]	@ (801b37c <etharp_output+0x200>)
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	005b      	lsls	r3, r3, #1
 801b2d0:	4413      	add	r3, r2
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	440b      	add	r3, r1
 801b2d6:	3314      	adds	r3, #20
 801b2d8:	781b      	ldrb	r3, [r3, #0]
 801b2da:	2b01      	cmp	r3, #1
 801b2dc:	d923      	bls.n	801b326 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b2de:	7dfa      	ldrb	r2, [r7, #23]
 801b2e0:	4926      	ldr	r1, [pc, #152]	@ (801b37c <etharp_output+0x200>)
 801b2e2:	4613      	mov	r3, r2
 801b2e4:	005b      	lsls	r3, r3, #1
 801b2e6:	4413      	add	r3, r2
 801b2e8:	00db      	lsls	r3, r3, #3
 801b2ea:	440b      	add	r3, r1
 801b2ec:	3308      	adds	r3, #8
 801b2ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b2f0:	68fa      	ldr	r2, [r7, #12]
 801b2f2:	429a      	cmp	r2, r3
 801b2f4:	d117      	bne.n	801b326 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b2f6:	69bb      	ldr	r3, [r7, #24]
 801b2f8:	6819      	ldr	r1, [r3, #0]
 801b2fa:	7dfa      	ldrb	r2, [r7, #23]
 801b2fc:	481f      	ldr	r0, [pc, #124]	@ (801b37c <etharp_output+0x200>)
 801b2fe:	4613      	mov	r3, r2
 801b300:	005b      	lsls	r3, r3, #1
 801b302:	4413      	add	r3, r2
 801b304:	00db      	lsls	r3, r3, #3
 801b306:	4403      	add	r3, r0
 801b308:	3304      	adds	r3, #4
 801b30a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b30c:	4299      	cmp	r1, r3
 801b30e:	d10a      	bne.n	801b326 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b310:	4a19      	ldr	r2, [pc, #100]	@ (801b378 <etharp_output+0x1fc>)
 801b312:	7dfb      	ldrb	r3, [r7, #23]
 801b314:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b316:	7dfb      	ldrb	r3, [r7, #23]
 801b318:	461a      	mov	r2, r3
 801b31a:	68b9      	ldr	r1, [r7, #8]
 801b31c:	68f8      	ldr	r0, [r7, #12]
 801b31e:	f7ff fe93 	bl	801b048 <etharp_output_to_arp_index>
 801b322:	4603      	mov	r3, r0
 801b324:	e018      	b.n	801b358 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b326:	7dfb      	ldrb	r3, [r7, #23]
 801b328:	3301      	adds	r3, #1
 801b32a:	75fb      	strb	r3, [r7, #23]
 801b32c:	7dfb      	ldrb	r3, [r7, #23]
 801b32e:	2b09      	cmp	r3, #9
 801b330:	d9ca      	bls.n	801b2c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b332:	68ba      	ldr	r2, [r7, #8]
 801b334:	69b9      	ldr	r1, [r7, #24]
 801b336:	68f8      	ldr	r0, [r7, #12]
 801b338:	f000 f822 	bl	801b380 <etharp_query>
 801b33c:	4603      	mov	r3, r0
 801b33e:	e00b      	b.n	801b358 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b346:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b34a:	9300      	str	r3, [sp, #0]
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	68b9      	ldr	r1, [r7, #8]
 801b350:	68f8      	ldr	r0, [r7, #12]
 801b352:	f001 fd45 	bl	801cde0 <ethernet_output>
 801b356:	4603      	mov	r3, r0
}
 801b358:	4618      	mov	r0, r3
 801b35a:	3720      	adds	r7, #32
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd80      	pop	{r7, pc}
 801b360:	08021548 	.word	0x08021548
 801b364:	08021698 	.word	0x08021698
 801b368:	080215c0 	.word	0x080215c0
 801b36c:	080216e8 	.word	0x080216e8
 801b370:	08021688 	.word	0x08021688
 801b374:	080222ec 	.word	0x080222ec
 801b378:	20027900 	.word	0x20027900
 801b37c:	20027810 	.word	0x20027810

0801b380 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b08c      	sub	sp, #48	@ 0x30
 801b384:	af02      	add	r7, sp, #8
 801b386:	60f8      	str	r0, [r7, #12]
 801b388:	60b9      	str	r1, [r7, #8]
 801b38a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	3326      	adds	r3, #38	@ 0x26
 801b390:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b392:	23ff      	movs	r3, #255	@ 0xff
 801b394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b398:	2300      	movs	r3, #0
 801b39a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	68f9      	ldr	r1, [r7, #12]
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f000 fe0e 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801b3a8:	4603      	mov	r3, r0
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d10c      	bne.n	801b3c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b3b6:	2be0      	cmp	r3, #224	@ 0xe0
 801b3b8:	d006      	beq.n	801b3c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b3ba:	68bb      	ldr	r3, [r7, #8]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d003      	beq.n	801b3c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d102      	bne.n	801b3ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b3c8:	f06f 030f 	mvn.w	r3, #15
 801b3cc:	e101      	b.n	801b5d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b3ce:	68fa      	ldr	r2, [r7, #12]
 801b3d0:	2101      	movs	r1, #1
 801b3d2:	68b8      	ldr	r0, [r7, #8]
 801b3d4:	f7ff fb60 	bl	801aa98 <etharp_find_entry>
 801b3d8:	4603      	mov	r3, r0
 801b3da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b3dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	da02      	bge.n	801b3ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b3e4:	8a7b      	ldrh	r3, [r7, #18]
 801b3e6:	b25b      	sxtb	r3, r3
 801b3e8:	e0f3      	b.n	801b5d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b3ea:	8a7b      	ldrh	r3, [r7, #18]
 801b3ec:	2b7e      	cmp	r3, #126	@ 0x7e
 801b3ee:	d906      	bls.n	801b3fe <etharp_query+0x7e>
 801b3f0:	4b7a      	ldr	r3, [pc, #488]	@ (801b5dc <etharp_query+0x25c>)
 801b3f2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b3f6:	497a      	ldr	r1, [pc, #488]	@ (801b5e0 <etharp_query+0x260>)
 801b3f8:	487a      	ldr	r0, [pc, #488]	@ (801b5e4 <etharp_query+0x264>)
 801b3fa:	f002 fde9 	bl	801dfd0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b3fe:	8a7b      	ldrh	r3, [r7, #18]
 801b400:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b402:	7c7a      	ldrb	r2, [r7, #17]
 801b404:	4978      	ldr	r1, [pc, #480]	@ (801b5e8 <etharp_query+0x268>)
 801b406:	4613      	mov	r3, r2
 801b408:	005b      	lsls	r3, r3, #1
 801b40a:	4413      	add	r3, r2
 801b40c:	00db      	lsls	r3, r3, #3
 801b40e:	440b      	add	r3, r1
 801b410:	3314      	adds	r3, #20
 801b412:	781b      	ldrb	r3, [r3, #0]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d115      	bne.n	801b444 <etharp_query+0xc4>
    is_new_entry = 1;
 801b418:	2301      	movs	r3, #1
 801b41a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b41c:	7c7a      	ldrb	r2, [r7, #17]
 801b41e:	4972      	ldr	r1, [pc, #456]	@ (801b5e8 <etharp_query+0x268>)
 801b420:	4613      	mov	r3, r2
 801b422:	005b      	lsls	r3, r3, #1
 801b424:	4413      	add	r3, r2
 801b426:	00db      	lsls	r3, r3, #3
 801b428:	440b      	add	r3, r1
 801b42a:	3314      	adds	r3, #20
 801b42c:	2201      	movs	r2, #1
 801b42e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b430:	7c7a      	ldrb	r2, [r7, #17]
 801b432:	496d      	ldr	r1, [pc, #436]	@ (801b5e8 <etharp_query+0x268>)
 801b434:	4613      	mov	r3, r2
 801b436:	005b      	lsls	r3, r3, #1
 801b438:	4413      	add	r3, r2
 801b43a:	00db      	lsls	r3, r3, #3
 801b43c:	440b      	add	r3, r1
 801b43e:	3308      	adds	r3, #8
 801b440:	68fa      	ldr	r2, [r7, #12]
 801b442:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b444:	7c7a      	ldrb	r2, [r7, #17]
 801b446:	4968      	ldr	r1, [pc, #416]	@ (801b5e8 <etharp_query+0x268>)
 801b448:	4613      	mov	r3, r2
 801b44a:	005b      	lsls	r3, r3, #1
 801b44c:	4413      	add	r3, r2
 801b44e:	00db      	lsls	r3, r3, #3
 801b450:	440b      	add	r3, r1
 801b452:	3314      	adds	r3, #20
 801b454:	781b      	ldrb	r3, [r3, #0]
 801b456:	2b01      	cmp	r3, #1
 801b458:	d011      	beq.n	801b47e <etharp_query+0xfe>
 801b45a:	7c7a      	ldrb	r2, [r7, #17]
 801b45c:	4962      	ldr	r1, [pc, #392]	@ (801b5e8 <etharp_query+0x268>)
 801b45e:	4613      	mov	r3, r2
 801b460:	005b      	lsls	r3, r3, #1
 801b462:	4413      	add	r3, r2
 801b464:	00db      	lsls	r3, r3, #3
 801b466:	440b      	add	r3, r1
 801b468:	3314      	adds	r3, #20
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	2b01      	cmp	r3, #1
 801b46e:	d806      	bhi.n	801b47e <etharp_query+0xfe>
 801b470:	4b5a      	ldr	r3, [pc, #360]	@ (801b5dc <etharp_query+0x25c>)
 801b472:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b476:	495d      	ldr	r1, [pc, #372]	@ (801b5ec <etharp_query+0x26c>)
 801b478:	485a      	ldr	r0, [pc, #360]	@ (801b5e4 <etharp_query+0x264>)
 801b47a:	f002 fda9 	bl	801dfd0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b47e:	6a3b      	ldr	r3, [r7, #32]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d102      	bne.n	801b48a <etharp_query+0x10a>
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d10c      	bne.n	801b4a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b48a:	68b9      	ldr	r1, [r7, #8]
 801b48c:	68f8      	ldr	r0, [r7, #12]
 801b48e:	f000 f963 	bl	801b758 <etharp_request>
 801b492:	4603      	mov	r3, r0
 801b494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d102      	bne.n	801b4a4 <etharp_query+0x124>
      return result;
 801b49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b4a2:	e096      	b.n	801b5d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d106      	bne.n	801b4b8 <etharp_query+0x138>
 801b4aa:	4b4c      	ldr	r3, [pc, #304]	@ (801b5dc <etharp_query+0x25c>)
 801b4ac:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b4b0:	494f      	ldr	r1, [pc, #316]	@ (801b5f0 <etharp_query+0x270>)
 801b4b2:	484c      	ldr	r0, [pc, #304]	@ (801b5e4 <etharp_query+0x264>)
 801b4b4:	f002 fd8c 	bl	801dfd0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b4b8:	7c7a      	ldrb	r2, [r7, #17]
 801b4ba:	494b      	ldr	r1, [pc, #300]	@ (801b5e8 <etharp_query+0x268>)
 801b4bc:	4613      	mov	r3, r2
 801b4be:	005b      	lsls	r3, r3, #1
 801b4c0:	4413      	add	r3, r2
 801b4c2:	00db      	lsls	r3, r3, #3
 801b4c4:	440b      	add	r3, r1
 801b4c6:	3314      	adds	r3, #20
 801b4c8:	781b      	ldrb	r3, [r3, #0]
 801b4ca:	2b01      	cmp	r3, #1
 801b4cc:	d917      	bls.n	801b4fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b4ce:	4a49      	ldr	r2, [pc, #292]	@ (801b5f4 <etharp_query+0x274>)
 801b4d0:	7c7b      	ldrb	r3, [r7, #17]
 801b4d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b4d4:	7c7a      	ldrb	r2, [r7, #17]
 801b4d6:	4613      	mov	r3, r2
 801b4d8:	005b      	lsls	r3, r3, #1
 801b4da:	4413      	add	r3, r2
 801b4dc:	00db      	lsls	r3, r3, #3
 801b4de:	3308      	adds	r3, #8
 801b4e0:	4a41      	ldr	r2, [pc, #260]	@ (801b5e8 <etharp_query+0x268>)
 801b4e2:	4413      	add	r3, r2
 801b4e4:	3304      	adds	r3, #4
 801b4e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b4ea:	9200      	str	r2, [sp, #0]
 801b4ec:	697a      	ldr	r2, [r7, #20]
 801b4ee:	6879      	ldr	r1, [r7, #4]
 801b4f0:	68f8      	ldr	r0, [r7, #12]
 801b4f2:	f001 fc75 	bl	801cde0 <ethernet_output>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b4fc:	e067      	b.n	801b5ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b4fe:	7c7a      	ldrb	r2, [r7, #17]
 801b500:	4939      	ldr	r1, [pc, #228]	@ (801b5e8 <etharp_query+0x268>)
 801b502:	4613      	mov	r3, r2
 801b504:	005b      	lsls	r3, r3, #1
 801b506:	4413      	add	r3, r2
 801b508:	00db      	lsls	r3, r3, #3
 801b50a:	440b      	add	r3, r1
 801b50c:	3314      	adds	r3, #20
 801b50e:	781b      	ldrb	r3, [r3, #0]
 801b510:	2b01      	cmp	r3, #1
 801b512:	d15c      	bne.n	801b5ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b514:	2300      	movs	r3, #0
 801b516:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b51c:	e01c      	b.n	801b558 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	895a      	ldrh	r2, [r3, #10]
 801b522:	69fb      	ldr	r3, [r7, #28]
 801b524:	891b      	ldrh	r3, [r3, #8]
 801b526:	429a      	cmp	r2, r3
 801b528:	d10a      	bne.n	801b540 <etharp_query+0x1c0>
 801b52a:	69fb      	ldr	r3, [r7, #28]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d006      	beq.n	801b540 <etharp_query+0x1c0>
 801b532:	4b2a      	ldr	r3, [pc, #168]	@ (801b5dc <etharp_query+0x25c>)
 801b534:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b538:	492f      	ldr	r1, [pc, #188]	@ (801b5f8 <etharp_query+0x278>)
 801b53a:	482a      	ldr	r0, [pc, #168]	@ (801b5e4 <etharp_query+0x264>)
 801b53c:	f002 fd48 	bl	801dfd0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	7b1b      	ldrb	r3, [r3, #12]
 801b544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d002      	beq.n	801b552 <etharp_query+0x1d2>
        copy_needed = 1;
 801b54c:	2301      	movs	r3, #1
 801b54e:	61bb      	str	r3, [r7, #24]
        break;
 801b550:	e005      	b.n	801b55e <etharp_query+0x1de>
      }
      p = p->next;
 801b552:	69fb      	ldr	r3, [r7, #28]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b558:	69fb      	ldr	r3, [r7, #28]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d1df      	bne.n	801b51e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b55e:	69bb      	ldr	r3, [r7, #24]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d007      	beq.n	801b574 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b564:	687a      	ldr	r2, [r7, #4]
 801b566:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b56a:	200e      	movs	r0, #14
 801b56c:	f7f9 fa4e 	bl	8014a0c <pbuf_clone>
 801b570:	61f8      	str	r0, [r7, #28]
 801b572:	e004      	b.n	801b57e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b578:	69f8      	ldr	r0, [r7, #28]
 801b57a:	f7f9 f875 	bl	8014668 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b57e:	69fb      	ldr	r3, [r7, #28]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d021      	beq.n	801b5c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b584:	7c7a      	ldrb	r2, [r7, #17]
 801b586:	4918      	ldr	r1, [pc, #96]	@ (801b5e8 <etharp_query+0x268>)
 801b588:	4613      	mov	r3, r2
 801b58a:	005b      	lsls	r3, r3, #1
 801b58c:	4413      	add	r3, r2
 801b58e:	00db      	lsls	r3, r3, #3
 801b590:	440b      	add	r3, r1
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d00a      	beq.n	801b5ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b598:	7c7a      	ldrb	r2, [r7, #17]
 801b59a:	4913      	ldr	r1, [pc, #76]	@ (801b5e8 <etharp_query+0x268>)
 801b59c:	4613      	mov	r3, r2
 801b59e:	005b      	lsls	r3, r3, #1
 801b5a0:	4413      	add	r3, r2
 801b5a2:	00db      	lsls	r3, r3, #3
 801b5a4:	440b      	add	r3, r1
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7f8 ffb7 	bl	801451c <pbuf_free>
      }
      arp_table[i].q = p;
 801b5ae:	7c7a      	ldrb	r2, [r7, #17]
 801b5b0:	490d      	ldr	r1, [pc, #52]	@ (801b5e8 <etharp_query+0x268>)
 801b5b2:	4613      	mov	r3, r2
 801b5b4:	005b      	lsls	r3, r3, #1
 801b5b6:	4413      	add	r3, r2
 801b5b8:	00db      	lsls	r3, r3, #3
 801b5ba:	440b      	add	r3, r1
 801b5bc:	69fa      	ldr	r2, [r7, #28]
 801b5be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b5c6:	e002      	b.n	801b5ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b5c8:	23ff      	movs	r3, #255	@ 0xff
 801b5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b5ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	3728      	adds	r7, #40	@ 0x28
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
 801b5da:	bf00      	nop
 801b5dc:	08021548 	.word	0x08021548
 801b5e0:	080216f4 	.word	0x080216f4
 801b5e4:	080215c0 	.word	0x080215c0
 801b5e8:	20027810 	.word	0x20027810
 801b5ec:	08021704 	.word	0x08021704
 801b5f0:	080216e8 	.word	0x080216e8
 801b5f4:	20027900 	.word	0x20027900
 801b5f8:	0802172c 	.word	0x0802172c

0801b5fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b08a      	sub	sp, #40	@ 0x28
 801b600:	af02      	add	r7, sp, #8
 801b602:	60f8      	str	r0, [r7, #12]
 801b604:	60b9      	str	r1, [r7, #8]
 801b606:	607a      	str	r2, [r7, #4]
 801b608:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b60a:	2300      	movs	r3, #0
 801b60c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d106      	bne.n	801b622 <etharp_raw+0x26>
 801b614:	4b3a      	ldr	r3, [pc, #232]	@ (801b700 <etharp_raw+0x104>)
 801b616:	f240 4257 	movw	r2, #1111	@ 0x457
 801b61a:	493a      	ldr	r1, [pc, #232]	@ (801b704 <etharp_raw+0x108>)
 801b61c:	483a      	ldr	r0, [pc, #232]	@ (801b708 <etharp_raw+0x10c>)
 801b61e:	f002 fcd7 	bl	801dfd0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b622:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b626:	211c      	movs	r1, #28
 801b628:	200e      	movs	r0, #14
 801b62a:	f7f8 fc93 	bl	8013f54 <pbuf_alloc>
 801b62e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b630:	69bb      	ldr	r3, [r7, #24]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d102      	bne.n	801b63c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b636:	f04f 33ff 	mov.w	r3, #4294967295
 801b63a:	e05d      	b.n	801b6f8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b63c:	69bb      	ldr	r3, [r7, #24]
 801b63e:	895b      	ldrh	r3, [r3, #10]
 801b640:	2b1b      	cmp	r3, #27
 801b642:	d806      	bhi.n	801b652 <etharp_raw+0x56>
 801b644:	4b2e      	ldr	r3, [pc, #184]	@ (801b700 <etharp_raw+0x104>)
 801b646:	f240 4262 	movw	r2, #1122	@ 0x462
 801b64a:	4930      	ldr	r1, [pc, #192]	@ (801b70c <etharp_raw+0x110>)
 801b64c:	482e      	ldr	r0, [pc, #184]	@ (801b708 <etharp_raw+0x10c>)
 801b64e:	f002 fcbf 	bl	801dfd0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b652:	69bb      	ldr	r3, [r7, #24]
 801b654:	685b      	ldr	r3, [r3, #4]
 801b656:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b658:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7f7 fb70 	bl	8012d40 <lwip_htons>
 801b660:	4603      	mov	r3, r0
 801b662:	461a      	mov	r2, r3
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b66e:	2b06      	cmp	r3, #6
 801b670:	d006      	beq.n	801b680 <etharp_raw+0x84>
 801b672:	4b23      	ldr	r3, [pc, #140]	@ (801b700 <etharp_raw+0x104>)
 801b674:	f240 4269 	movw	r2, #1129	@ 0x469
 801b678:	4925      	ldr	r1, [pc, #148]	@ (801b710 <etharp_raw+0x114>)
 801b67a:	4823      	ldr	r0, [pc, #140]	@ (801b708 <etharp_raw+0x10c>)
 801b67c:	f002 fca8 	bl	801dfd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	3308      	adds	r3, #8
 801b684:	2206      	movs	r2, #6
 801b686:	6839      	ldr	r1, [r7, #0]
 801b688:	4618      	mov	r0, r3
 801b68a:	f002 fecc 	bl	801e426 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	3312      	adds	r3, #18
 801b692:	2206      	movs	r2, #6
 801b694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b696:	4618      	mov	r0, r3
 801b698:	f002 fec5 	bl	801e426 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b69c:	697b      	ldr	r3, [r7, #20]
 801b69e:	330e      	adds	r3, #14
 801b6a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b6a2:	6812      	ldr	r2, [r2, #0]
 801b6a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	3318      	adds	r3, #24
 801b6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b6ac:	6812      	ldr	r2, [r2, #0]
 801b6ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b6b0:	697b      	ldr	r3, [r7, #20]
 801b6b2:	2200      	movs	r2, #0
 801b6b4:	701a      	strb	r2, [r3, #0]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	f042 0201 	orr.w	r2, r2, #1
 801b6bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	f042 0208 	orr.w	r2, r2, #8
 801b6c6:	709a      	strb	r2, [r3, #2]
 801b6c8:	2200      	movs	r2, #0
 801b6ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	2206      	movs	r2, #6
 801b6d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	2204      	movs	r2, #4
 801b6d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b6d8:	f640 0306 	movw	r3, #2054	@ 0x806
 801b6dc:	9300      	str	r3, [sp, #0]
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	68ba      	ldr	r2, [r7, #8]
 801b6e2:	69b9      	ldr	r1, [r7, #24]
 801b6e4:	68f8      	ldr	r0, [r7, #12]
 801b6e6:	f001 fb7b 	bl	801cde0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b6ea:	69b8      	ldr	r0, [r7, #24]
 801b6ec:	f7f8 ff16 	bl	801451c <pbuf_free>
  p = NULL;
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b6f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3720      	adds	r7, #32
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	08021548 	.word	0x08021548
 801b704:	08021698 	.word	0x08021698
 801b708:	080215c0 	.word	0x080215c0
 801b70c:	08021748 	.word	0x08021748
 801b710:	0802177c 	.word	0x0802177c

0801b714 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b088      	sub	sp, #32
 801b718:	af04      	add	r7, sp, #16
 801b71a:	60f8      	str	r0, [r7, #12]
 801b71c:	60b9      	str	r1, [r7, #8]
 801b71e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b730:	2201      	movs	r2, #1
 801b732:	9203      	str	r2, [sp, #12]
 801b734:	68ba      	ldr	r2, [r7, #8]
 801b736:	9202      	str	r2, [sp, #8]
 801b738:	4a06      	ldr	r2, [pc, #24]	@ (801b754 <etharp_request_dst+0x40>)
 801b73a:	9201      	str	r2, [sp, #4]
 801b73c:	9300      	str	r3, [sp, #0]
 801b73e:	4603      	mov	r3, r0
 801b740:	687a      	ldr	r2, [r7, #4]
 801b742:	68f8      	ldr	r0, [r7, #12]
 801b744:	f7ff ff5a 	bl	801b5fc <etharp_raw>
 801b748:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b74a:	4618      	mov	r0, r3
 801b74c:	3710      	adds	r7, #16
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	080222f4 	.word	0x080222f4

0801b758 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
 801b760:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b762:	4a05      	ldr	r2, [pc, #20]	@ (801b778 <etharp_request+0x20>)
 801b764:	6839      	ldr	r1, [r7, #0]
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	f7ff ffd4 	bl	801b714 <etharp_request_dst>
 801b76c:	4603      	mov	r3, r0
}
 801b76e:	4618      	mov	r0, r3
 801b770:	3708      	adds	r7, #8
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	080222ec 	.word	0x080222ec

0801b77c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b08e      	sub	sp, #56	@ 0x38
 801b780:	af04      	add	r7, sp, #16
 801b782:	6078      	str	r0, [r7, #4]
 801b784:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b786:	4b79      	ldr	r3, [pc, #484]	@ (801b96c <icmp_input+0x1f0>)
 801b788:	689b      	ldr	r3, [r3, #8]
 801b78a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78e:	781b      	ldrb	r3, [r3, #0]
 801b790:	f003 030f 	and.w	r3, r3, #15
 801b794:	b2db      	uxtb	r3, r3
 801b796:	009b      	lsls	r3, r3, #2
 801b798:	b2db      	uxtb	r3, r3
 801b79a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b79c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b79e:	2b13      	cmp	r3, #19
 801b7a0:	f240 80cd 	bls.w	801b93e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	895b      	ldrh	r3, [r3, #10]
 801b7a8:	2b03      	cmp	r3, #3
 801b7aa:	f240 80ca 	bls.w	801b942 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	781b      	ldrb	r3, [r3, #0]
 801b7b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b7b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	f000 80b7 	beq.w	801b930 <icmp_input+0x1b4>
 801b7c2:	2b08      	cmp	r3, #8
 801b7c4:	f040 80b7 	bne.w	801b936 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b7c8:	4b69      	ldr	r3, [pc, #420]	@ (801b970 <icmp_input+0x1f4>)
 801b7ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b7cc:	4b67      	ldr	r3, [pc, #412]	@ (801b96c <icmp_input+0x1f0>)
 801b7ce:	695b      	ldr	r3, [r3, #20]
 801b7d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b7d4:	2be0      	cmp	r3, #224	@ 0xe0
 801b7d6:	f000 80bb 	beq.w	801b950 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b7da:	4b64      	ldr	r3, [pc, #400]	@ (801b96c <icmp_input+0x1f0>)
 801b7dc:	695b      	ldr	r3, [r3, #20]
 801b7de:	4a63      	ldr	r2, [pc, #396]	@ (801b96c <icmp_input+0x1f0>)
 801b7e0:	6812      	ldr	r2, [r2, #0]
 801b7e2:	4611      	mov	r1, r2
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f000 fbed 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	f040 80b1 	bne.w	801b954 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	891b      	ldrh	r3, [r3, #8]
 801b7f6:	2b07      	cmp	r3, #7
 801b7f8:	f240 80a5 	bls.w	801b946 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b7fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b7fe:	330e      	adds	r3, #14
 801b800:	4619      	mov	r1, r3
 801b802:	6878      	ldr	r0, [r7, #4]
 801b804:	f7f8 fdf4 	bl	80143f0 <pbuf_add_header>
 801b808:	4603      	mov	r3, r0
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d04b      	beq.n	801b8a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	891a      	ldrh	r2, [r3, #8]
 801b812:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b814:	4413      	add	r3, r2
 801b816:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	891b      	ldrh	r3, [r3, #8]
 801b81c:	8b7a      	ldrh	r2, [r7, #26]
 801b81e:	429a      	cmp	r2, r3
 801b820:	f0c0 809a 	bcc.w	801b958 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b824:	8b7b      	ldrh	r3, [r7, #26]
 801b826:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b82a:	4619      	mov	r1, r3
 801b82c:	200e      	movs	r0, #14
 801b82e:	f7f8 fb91 	bl	8013f54 <pbuf_alloc>
 801b832:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b834:	697b      	ldr	r3, [r7, #20]
 801b836:	2b00      	cmp	r3, #0
 801b838:	f000 8090 	beq.w	801b95c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b83c:	697b      	ldr	r3, [r7, #20]
 801b83e:	895b      	ldrh	r3, [r3, #10]
 801b840:	461a      	mov	r2, r3
 801b842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b844:	3308      	adds	r3, #8
 801b846:	429a      	cmp	r2, r3
 801b848:	d203      	bcs.n	801b852 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b84a:	6978      	ldr	r0, [r7, #20]
 801b84c:	f7f8 fe66 	bl	801451c <pbuf_free>
          goto icmperr;
 801b850:	e085      	b.n	801b95e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b852:	697b      	ldr	r3, [r7, #20]
 801b854:	685b      	ldr	r3, [r3, #4]
 801b856:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b85a:	4618      	mov	r0, r3
 801b85c:	f002 fde3 	bl	801e426 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b860:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b862:	4619      	mov	r1, r3
 801b864:	6978      	ldr	r0, [r7, #20]
 801b866:	f7f8 fdd3 	bl	8014410 <pbuf_remove_header>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d009      	beq.n	801b884 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b870:	4b40      	ldr	r3, [pc, #256]	@ (801b974 <icmp_input+0x1f8>)
 801b872:	22b6      	movs	r2, #182	@ 0xb6
 801b874:	4940      	ldr	r1, [pc, #256]	@ (801b978 <icmp_input+0x1fc>)
 801b876:	4841      	ldr	r0, [pc, #260]	@ (801b97c <icmp_input+0x200>)
 801b878:	f002 fbaa 	bl	801dfd0 <iprintf>
          pbuf_free(r);
 801b87c:	6978      	ldr	r0, [r7, #20]
 801b87e:	f7f8 fe4d 	bl	801451c <pbuf_free>
          goto icmperr;
 801b882:	e06c      	b.n	801b95e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b884:	6879      	ldr	r1, [r7, #4]
 801b886:	6978      	ldr	r0, [r7, #20]
 801b888:	f7f8 ff7c 	bl	8014784 <pbuf_copy>
 801b88c:	4603      	mov	r3, r0
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d003      	beq.n	801b89a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b892:	6978      	ldr	r0, [r7, #20]
 801b894:	f7f8 fe42 	bl	801451c <pbuf_free>
          goto icmperr;
 801b898:	e061      	b.n	801b95e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b89a:	6878      	ldr	r0, [r7, #4]
 801b89c:	f7f8 fe3e 	bl	801451c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b8a0:	697b      	ldr	r3, [r7, #20]
 801b8a2:	607b      	str	r3, [r7, #4]
 801b8a4:	e00f      	b.n	801b8c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b8a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8a8:	330e      	adds	r3, #14
 801b8aa:	4619      	mov	r1, r3
 801b8ac:	6878      	ldr	r0, [r7, #4]
 801b8ae:	f7f8 fdaf 	bl	8014410 <pbuf_remove_header>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d006      	beq.n	801b8c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b8b8:	4b2e      	ldr	r3, [pc, #184]	@ (801b974 <icmp_input+0x1f8>)
 801b8ba:	22c7      	movs	r2, #199	@ 0xc7
 801b8bc:	4930      	ldr	r1, [pc, #192]	@ (801b980 <icmp_input+0x204>)
 801b8be:	482f      	ldr	r0, [pc, #188]	@ (801b97c <icmp_input+0x200>)
 801b8c0:	f002 fb86 	bl	801dfd0 <iprintf>
          goto icmperr;
 801b8c4:	e04b      	b.n	801b95e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	685b      	ldr	r3, [r3, #4]
 801b8ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b8cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b8ce:	4619      	mov	r1, r3
 801b8d0:	6878      	ldr	r0, [r7, #4]
 801b8d2:	f7f8 fd8d 	bl	80143f0 <pbuf_add_header>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d12b      	bne.n	801b934 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b8e2:	69fb      	ldr	r3, [r7, #28]
 801b8e4:	681a      	ldr	r2, [r3, #0]
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b8ea:	4b20      	ldr	r3, [pc, #128]	@ (801b96c <icmp_input+0x1f0>)
 801b8ec:	691a      	ldr	r2, [r3, #16]
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b8f2:	693b      	ldr	r3, [r7, #16]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b8f8:	693b      	ldr	r3, [r7, #16]
 801b8fa:	2200      	movs	r2, #0
 801b8fc:	709a      	strb	r2, [r3, #2]
 801b8fe:	2200      	movs	r2, #0
 801b900:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	22ff      	movs	r2, #255	@ 0xff
 801b906:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	2200      	movs	r2, #0
 801b90c:	729a      	strb	r2, [r3, #10]
 801b90e:	2200      	movs	r2, #0
 801b910:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b912:	683b      	ldr	r3, [r7, #0]
 801b914:	9302      	str	r3, [sp, #8]
 801b916:	2301      	movs	r3, #1
 801b918:	9301      	str	r3, [sp, #4]
 801b91a:	2300      	movs	r3, #0
 801b91c:	9300      	str	r3, [sp, #0]
 801b91e:	23ff      	movs	r3, #255	@ 0xff
 801b920:	2200      	movs	r2, #0
 801b922:	69f9      	ldr	r1, [r7, #28]
 801b924:	6878      	ldr	r0, [r7, #4]
 801b926:	f000 fa75 	bl	801be14 <ip4_output_if>
 801b92a:	4603      	mov	r3, r0
 801b92c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b92e:	e001      	b.n	801b934 <icmp_input+0x1b8>
      break;
 801b930:	bf00      	nop
 801b932:	e000      	b.n	801b936 <icmp_input+0x1ba>
      break;
 801b934:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b936:	6878      	ldr	r0, [r7, #4]
 801b938:	f7f8 fdf0 	bl	801451c <pbuf_free>
  return;
 801b93c:	e013      	b.n	801b966 <icmp_input+0x1ea>
    goto lenerr;
 801b93e:	bf00      	nop
 801b940:	e002      	b.n	801b948 <icmp_input+0x1cc>
    goto lenerr;
 801b942:	bf00      	nop
 801b944:	e000      	b.n	801b948 <icmp_input+0x1cc>
        goto lenerr;
 801b946:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b948:	6878      	ldr	r0, [r7, #4]
 801b94a:	f7f8 fde7 	bl	801451c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b94e:	e00a      	b.n	801b966 <icmp_input+0x1ea>
        goto icmperr;
 801b950:	bf00      	nop
 801b952:	e004      	b.n	801b95e <icmp_input+0x1e2>
        goto icmperr;
 801b954:	bf00      	nop
 801b956:	e002      	b.n	801b95e <icmp_input+0x1e2>
          goto icmperr;
 801b958:	bf00      	nop
 801b95a:	e000      	b.n	801b95e <icmp_input+0x1e2>
          goto icmperr;
 801b95c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b95e:	6878      	ldr	r0, [r7, #4]
 801b960:	f7f8 fddc 	bl	801451c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b964:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b966:	3728      	adds	r7, #40	@ 0x28
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd80      	pop	{r7, pc}
 801b96c:	200246b0 	.word	0x200246b0
 801b970:	200246c4 	.word	0x200246c4
 801b974:	080217c0 	.word	0x080217c0
 801b978:	080217f8 	.word	0x080217f8
 801b97c:	08021830 	.word	0x08021830
 801b980:	08021858 	.word	0x08021858

0801b984 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b082      	sub	sp, #8
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
 801b98c:	460b      	mov	r3, r1
 801b98e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b990:	78fb      	ldrb	r3, [r7, #3]
 801b992:	461a      	mov	r2, r3
 801b994:	2103      	movs	r1, #3
 801b996:	6878      	ldr	r0, [r7, #4]
 801b998:	f000 f814 	bl	801b9c4 <icmp_send_response>
}
 801b99c:	bf00      	nop
 801b99e:	3708      	adds	r7, #8
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}

0801b9a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b082      	sub	sp, #8
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	460b      	mov	r3, r1
 801b9ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b9b0:	78fb      	ldrb	r3, [r7, #3]
 801b9b2:	461a      	mov	r2, r3
 801b9b4:	210b      	movs	r1, #11
 801b9b6:	6878      	ldr	r0, [r7, #4]
 801b9b8:	f000 f804 	bl	801b9c4 <icmp_send_response>
}
 801b9bc:	bf00      	nop
 801b9be:	3708      	adds	r7, #8
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bd80      	pop	{r7, pc}

0801b9c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b08c      	sub	sp, #48	@ 0x30
 801b9c8:	af04      	add	r7, sp, #16
 801b9ca:	6078      	str	r0, [r7, #4]
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	70fb      	strb	r3, [r7, #3]
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b9d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b9d8:	2124      	movs	r1, #36	@ 0x24
 801b9da:	2022      	movs	r0, #34	@ 0x22
 801b9dc:	f7f8 faba 	bl	8013f54 <pbuf_alloc>
 801b9e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b9e2:	69fb      	ldr	r3, [r7, #28]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d04c      	beq.n	801ba82 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b9e8:	69fb      	ldr	r3, [r7, #28]
 801b9ea:	895b      	ldrh	r3, [r3, #10]
 801b9ec:	2b23      	cmp	r3, #35	@ 0x23
 801b9ee:	d806      	bhi.n	801b9fe <icmp_send_response+0x3a>
 801b9f0:	4b26      	ldr	r3, [pc, #152]	@ (801ba8c <icmp_send_response+0xc8>)
 801b9f2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b9f6:	4926      	ldr	r1, [pc, #152]	@ (801ba90 <icmp_send_response+0xcc>)
 801b9f8:	4826      	ldr	r0, [pc, #152]	@ (801ba94 <icmp_send_response+0xd0>)
 801b9fa:	f002 fae9 	bl	801dfd0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	685b      	ldr	r3, [r3, #4]
 801ba02:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ba04:	69fb      	ldr	r3, [r7, #28]
 801ba06:	685b      	ldr	r3, [r3, #4]
 801ba08:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	78fa      	ldrb	r2, [r7, #3]
 801ba0e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	78ba      	ldrb	r2, [r7, #2]
 801ba14:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	2200      	movs	r2, #0
 801ba1a:	711a      	strb	r2, [r3, #4]
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ba20:	697b      	ldr	r3, [r7, #20]
 801ba22:	2200      	movs	r2, #0
 801ba24:	719a      	strb	r2, [r3, #6]
 801ba26:	2200      	movs	r2, #0
 801ba28:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ba2a:	69fb      	ldr	r3, [r7, #28]
 801ba2c:	685b      	ldr	r3, [r3, #4]
 801ba2e:	f103 0008 	add.w	r0, r3, #8
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	685b      	ldr	r3, [r3, #4]
 801ba36:	221c      	movs	r2, #28
 801ba38:	4619      	mov	r1, r3
 801ba3a:	f002 fcf4 	bl	801e426 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ba3e:	69bb      	ldr	r3, [r7, #24]
 801ba40:	68db      	ldr	r3, [r3, #12]
 801ba42:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ba44:	f107 030c 	add.w	r3, r7, #12
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f000 f825 	bl	801ba98 <ip4_route>
 801ba4e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d011      	beq.n	801ba7a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	2200      	movs	r2, #0
 801ba5a:	709a      	strb	r2, [r3, #2]
 801ba5c:	2200      	movs	r2, #0
 801ba5e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ba60:	f107 020c 	add.w	r2, r7, #12
 801ba64:	693b      	ldr	r3, [r7, #16]
 801ba66:	9302      	str	r3, [sp, #8]
 801ba68:	2301      	movs	r3, #1
 801ba6a:	9301      	str	r3, [sp, #4]
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	9300      	str	r3, [sp, #0]
 801ba70:	23ff      	movs	r3, #255	@ 0xff
 801ba72:	2100      	movs	r1, #0
 801ba74:	69f8      	ldr	r0, [r7, #28]
 801ba76:	f000 f9cd 	bl	801be14 <ip4_output_if>
  }
  pbuf_free(q);
 801ba7a:	69f8      	ldr	r0, [r7, #28]
 801ba7c:	f7f8 fd4e 	bl	801451c <pbuf_free>
 801ba80:	e000      	b.n	801ba84 <icmp_send_response+0xc0>
    return;
 801ba82:	bf00      	nop
}
 801ba84:	3720      	adds	r7, #32
 801ba86:	46bd      	mov	sp, r7
 801ba88:	bd80      	pop	{r7, pc}
 801ba8a:	bf00      	nop
 801ba8c:	080217c0 	.word	0x080217c0
 801ba90:	0802188c 	.word	0x0802188c
 801ba94:	08021830 	.word	0x08021830

0801ba98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ba98:	b480      	push	{r7}
 801ba9a:	b085      	sub	sp, #20
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801baa0:	4b33      	ldr	r3, [pc, #204]	@ (801bb70 <ip4_route+0xd8>)
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	60fb      	str	r3, [r7, #12]
 801baa6:	e036      	b.n	801bb16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801baae:	f003 0301 	and.w	r3, r3, #1
 801bab2:	b2db      	uxtb	r3, r3
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d02b      	beq.n	801bb10 <ip4_route+0x78>
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801babe:	089b      	lsrs	r3, r3, #2
 801bac0:	f003 0301 	and.w	r3, r3, #1
 801bac4:	b2db      	uxtb	r3, r3
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d022      	beq.n	801bb10 <ip4_route+0x78>
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	3304      	adds	r3, #4
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d01d      	beq.n	801bb10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681a      	ldr	r2, [r3, #0]
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	3304      	adds	r3, #4
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	405a      	eors	r2, r3
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	3308      	adds	r3, #8
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	4013      	ands	r3, r2
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d101      	bne.n	801baf0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	e038      	b.n	801bb62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801baf6:	f003 0302 	and.w	r3, r3, #2
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d108      	bne.n	801bb10 <ip4_route+0x78>
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681a      	ldr	r2, [r3, #0]
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	330c      	adds	r3, #12
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	429a      	cmp	r2, r3
 801bb0a:	d101      	bne.n	801bb10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	e028      	b.n	801bb62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	60fb      	str	r3, [r7, #12]
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d1c5      	bne.n	801baa8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bb1c:	4b15      	ldr	r3, [pc, #84]	@ (801bb74 <ip4_route+0xdc>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d01a      	beq.n	801bb5a <ip4_route+0xc2>
 801bb24:	4b13      	ldr	r3, [pc, #76]	@ (801bb74 <ip4_route+0xdc>)
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb2c:	f003 0301 	and.w	r3, r3, #1
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d012      	beq.n	801bb5a <ip4_route+0xc2>
 801bb34:	4b0f      	ldr	r3, [pc, #60]	@ (801bb74 <ip4_route+0xdc>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb3c:	f003 0304 	and.w	r3, r3, #4
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d00a      	beq.n	801bb5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bb44:	4b0b      	ldr	r3, [pc, #44]	@ (801bb74 <ip4_route+0xdc>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	3304      	adds	r3, #4
 801bb4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d004      	beq.n	801bb5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	b2db      	uxtb	r3, r3
 801bb56:	2b7f      	cmp	r3, #127	@ 0x7f
 801bb58:	d101      	bne.n	801bb5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	e001      	b.n	801bb62 <ip4_route+0xca>
  }

  return netif_default;
 801bb5e:	4b05      	ldr	r3, [pc, #20]	@ (801bb74 <ip4_route+0xdc>)
 801bb60:	681b      	ldr	r3, [r3, #0]
}
 801bb62:	4618      	mov	r0, r3
 801bb64:	3714      	adds	r7, #20
 801bb66:	46bd      	mov	sp, r7
 801bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb6c:	4770      	bx	lr
 801bb6e:	bf00      	nop
 801bb70:	200277a4 	.word	0x200277a4
 801bb74:	200277a8 	.word	0x200277a8

0801bb78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b082      	sub	sp, #8
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb86:	f003 0301 	and.w	r3, r3, #1
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d016      	beq.n	801bbbe <ip4_input_accept+0x46>
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	3304      	adds	r3, #4
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d011      	beq.n	801bbbe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bb9a:	4b0b      	ldr	r3, [pc, #44]	@ (801bbc8 <ip4_input_accept+0x50>)
 801bb9c:	695a      	ldr	r2, [r3, #20]
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	3304      	adds	r3, #4
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d008      	beq.n	801bbba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bba8:	4b07      	ldr	r3, [pc, #28]	@ (801bbc8 <ip4_input_accept+0x50>)
 801bbaa:	695b      	ldr	r3, [r3, #20]
 801bbac:	6879      	ldr	r1, [r7, #4]
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f000 fa08 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801bbb4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d001      	beq.n	801bbbe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bbba:	2301      	movs	r3, #1
 801bbbc:	e000      	b.n	801bbc0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bbbe:	2300      	movs	r3, #0
}
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	3708      	adds	r7, #8
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bd80      	pop	{r7, pc}
 801bbc8:	200246b0 	.word	0x200246b0

0801bbcc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b086      	sub	sp, #24
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
 801bbd4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	685b      	ldr	r3, [r3, #4]
 801bbda:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bbdc:	697b      	ldr	r3, [r7, #20]
 801bbde:	781b      	ldrb	r3, [r3, #0]
 801bbe0:	091b      	lsrs	r3, r3, #4
 801bbe2:	b2db      	uxtb	r3, r3
 801bbe4:	2b04      	cmp	r3, #4
 801bbe6:	d004      	beq.n	801bbf2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bbe8:	6878      	ldr	r0, [r7, #4]
 801bbea:	f7f8 fc97 	bl	801451c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bbee:	2300      	movs	r3, #0
 801bbf0:	e107      	b.n	801be02 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	f003 030f 	and.w	r3, r3, #15
 801bbfa:	b2db      	uxtb	r3, r3
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	b2db      	uxtb	r3, r3
 801bc00:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bc02:	697b      	ldr	r3, [r7, #20]
 801bc04:	885b      	ldrh	r3, [r3, #2]
 801bc06:	b29b      	uxth	r3, r3
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f7 f899 	bl	8012d40 <lwip_htons>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	891b      	ldrh	r3, [r3, #8]
 801bc16:	89ba      	ldrh	r2, [r7, #12]
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	d204      	bcs.n	801bc26 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bc1c:	89bb      	ldrh	r3, [r7, #12]
 801bc1e:	4619      	mov	r1, r3
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f7f8 faf5 	bl	8014210 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	895b      	ldrh	r3, [r3, #10]
 801bc2a:	89fa      	ldrh	r2, [r7, #14]
 801bc2c:	429a      	cmp	r2, r3
 801bc2e:	d807      	bhi.n	801bc40 <ip4_input+0x74>
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	891b      	ldrh	r3, [r3, #8]
 801bc34:	89ba      	ldrh	r2, [r7, #12]
 801bc36:	429a      	cmp	r2, r3
 801bc38:	d802      	bhi.n	801bc40 <ip4_input+0x74>
 801bc3a:	89fb      	ldrh	r3, [r7, #14]
 801bc3c:	2b13      	cmp	r3, #19
 801bc3e:	d804      	bhi.n	801bc4a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bc40:	6878      	ldr	r0, [r7, #4]
 801bc42:	f7f8 fc6b 	bl	801451c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bc46:	2300      	movs	r3, #0
 801bc48:	e0db      	b.n	801be02 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	691b      	ldr	r3, [r3, #16]
 801bc4e:	4a6f      	ldr	r2, [pc, #444]	@ (801be0c <ip4_input+0x240>)
 801bc50:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	68db      	ldr	r3, [r3, #12]
 801bc56:	4a6d      	ldr	r2, [pc, #436]	@ (801be0c <ip4_input+0x240>)
 801bc58:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bc5a:	4b6c      	ldr	r3, [pc, #432]	@ (801be0c <ip4_input+0x240>)
 801bc5c:	695b      	ldr	r3, [r3, #20]
 801bc5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc62:	2be0      	cmp	r3, #224	@ 0xe0
 801bc64:	d112      	bne.n	801bc8c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bc6c:	f003 0301 	and.w	r3, r3, #1
 801bc70:	b2db      	uxtb	r3, r3
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d007      	beq.n	801bc86 <ip4_input+0xba>
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	3304      	adds	r3, #4
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d002      	beq.n	801bc86 <ip4_input+0xba>
      netif = inp;
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	613b      	str	r3, [r7, #16]
 801bc84:	e02a      	b.n	801bcdc <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc86:	2300      	movs	r3, #0
 801bc88:	613b      	str	r3, [r7, #16]
 801bc8a:	e027      	b.n	801bcdc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bc8c:	6838      	ldr	r0, [r7, #0]
 801bc8e:	f7ff ff73 	bl	801bb78 <ip4_input_accept>
 801bc92:	4603      	mov	r3, r0
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d002      	beq.n	801bc9e <ip4_input+0xd2>
      netif = inp;
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	613b      	str	r3, [r7, #16]
 801bc9c:	e01e      	b.n	801bcdc <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc9e:	2300      	movs	r3, #0
 801bca0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bca2:	4b5a      	ldr	r3, [pc, #360]	@ (801be0c <ip4_input+0x240>)
 801bca4:	695b      	ldr	r3, [r3, #20]
 801bca6:	b2db      	uxtb	r3, r3
 801bca8:	2b7f      	cmp	r3, #127	@ 0x7f
 801bcaa:	d017      	beq.n	801bcdc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bcac:	4b58      	ldr	r3, [pc, #352]	@ (801be10 <ip4_input+0x244>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	613b      	str	r3, [r7, #16]
 801bcb2:	e00e      	b.n	801bcd2 <ip4_input+0x106>
          if (netif == inp) {
 801bcb4:	693a      	ldr	r2, [r7, #16]
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d006      	beq.n	801bcca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bcbc:	6938      	ldr	r0, [r7, #16]
 801bcbe:	f7ff ff5b 	bl	801bb78 <ip4_input_accept>
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d108      	bne.n	801bcda <ip4_input+0x10e>
 801bcc8:	e000      	b.n	801bccc <ip4_input+0x100>
            continue;
 801bcca:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bccc:	693b      	ldr	r3, [r7, #16]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	613b      	str	r3, [r7, #16]
 801bcd2:	693b      	ldr	r3, [r7, #16]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d1ed      	bne.n	801bcb4 <ip4_input+0xe8>
 801bcd8:	e000      	b.n	801bcdc <ip4_input+0x110>
            break;
 801bcda:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bcdc:	4b4b      	ldr	r3, [pc, #300]	@ (801be0c <ip4_input+0x240>)
 801bcde:	691b      	ldr	r3, [r3, #16]
 801bce0:	6839      	ldr	r1, [r7, #0]
 801bce2:	4618      	mov	r0, r3
 801bce4:	f000 f96e 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801bce8:	4603      	mov	r3, r0
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d105      	bne.n	801bcfa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bcee:	4b47      	ldr	r3, [pc, #284]	@ (801be0c <ip4_input+0x240>)
 801bcf0:	691b      	ldr	r3, [r3, #16]
 801bcf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bcf6:	2be0      	cmp	r3, #224	@ 0xe0
 801bcf8:	d104      	bne.n	801bd04 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bcfa:	6878      	ldr	r0, [r7, #4]
 801bcfc:	f7f8 fc0e 	bl	801451c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bd00:	2300      	movs	r3, #0
 801bd02:	e07e      	b.n	801be02 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bd04:	693b      	ldr	r3, [r7, #16]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d104      	bne.n	801bd14 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bd0a:	6878      	ldr	r0, [r7, #4]
 801bd0c:	f7f8 fc06 	bl	801451c <pbuf_free>
    return ERR_OK;
 801bd10:	2300      	movs	r3, #0
 801bd12:	e076      	b.n	801be02 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	88db      	ldrh	r3, [r3, #6]
 801bd18:	b29b      	uxth	r3, r3
 801bd1a:	461a      	mov	r2, r3
 801bd1c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bd20:	4013      	ands	r3, r2
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d00b      	beq.n	801bd3e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bd26:	6878      	ldr	r0, [r7, #4]
 801bd28:	f000 fc92 	bl	801c650 <ip4_reass>
 801bd2c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d101      	bne.n	801bd38 <ip4_input+0x16c>
      return ERR_OK;
 801bd34:	2300      	movs	r3, #0
 801bd36:	e064      	b.n	801be02 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bd3e:	4a33      	ldr	r2, [pc, #204]	@ (801be0c <ip4_input+0x240>)
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bd44:	4a31      	ldr	r2, [pc, #196]	@ (801be0c <ip4_input+0x240>)
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bd4a:	4a30      	ldr	r2, [pc, #192]	@ (801be0c <ip4_input+0x240>)
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	781b      	ldrb	r3, [r3, #0]
 801bd54:	f003 030f 	and.w	r3, r3, #15
 801bd58:	b2db      	uxtb	r3, r3
 801bd5a:	009b      	lsls	r3, r3, #2
 801bd5c:	b2db      	uxtb	r3, r3
 801bd5e:	461a      	mov	r2, r3
 801bd60:	4b2a      	ldr	r3, [pc, #168]	@ (801be0c <ip4_input+0x240>)
 801bd62:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bd64:	89fb      	ldrh	r3, [r7, #14]
 801bd66:	4619      	mov	r1, r3
 801bd68:	6878      	ldr	r0, [r7, #4]
 801bd6a:	f7f8 fb51 	bl	8014410 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	7a5b      	ldrb	r3, [r3, #9]
 801bd72:	2b11      	cmp	r3, #17
 801bd74:	d006      	beq.n	801bd84 <ip4_input+0x1b8>
 801bd76:	2b11      	cmp	r3, #17
 801bd78:	dc13      	bgt.n	801bda2 <ip4_input+0x1d6>
 801bd7a:	2b01      	cmp	r3, #1
 801bd7c:	d00c      	beq.n	801bd98 <ip4_input+0x1cc>
 801bd7e:	2b06      	cmp	r3, #6
 801bd80:	d005      	beq.n	801bd8e <ip4_input+0x1c2>
 801bd82:	e00e      	b.n	801bda2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bd84:	6839      	ldr	r1, [r7, #0]
 801bd86:	6878      	ldr	r0, [r7, #4]
 801bd88:	f7fe f9f2 	bl	801a170 <udp_input>
        break;
 801bd8c:	e026      	b.n	801bddc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bd8e:	6839      	ldr	r1, [r7, #0]
 801bd90:	6878      	ldr	r0, [r7, #4]
 801bd92:	f7fa fa09 	bl	80161a8 <tcp_input>
        break;
 801bd96:	e021      	b.n	801bddc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bd98:	6839      	ldr	r1, [r7, #0]
 801bd9a:	6878      	ldr	r0, [r7, #4]
 801bd9c:	f7ff fcee 	bl	801b77c <icmp_input>
        break;
 801bda0:	e01c      	b.n	801bddc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bda2:	4b1a      	ldr	r3, [pc, #104]	@ (801be0c <ip4_input+0x240>)
 801bda4:	695b      	ldr	r3, [r3, #20]
 801bda6:	6939      	ldr	r1, [r7, #16]
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f000 f90b 	bl	801bfc4 <ip4_addr_isbroadcast_u32>
 801bdae:	4603      	mov	r3, r0
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d10f      	bne.n	801bdd4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bdb4:	4b15      	ldr	r3, [pc, #84]	@ (801be0c <ip4_input+0x240>)
 801bdb6:	695b      	ldr	r3, [r3, #20]
 801bdb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bdbc:	2be0      	cmp	r3, #224	@ 0xe0
 801bdbe:	d009      	beq.n	801bdd4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bdc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bdc4:	4619      	mov	r1, r3
 801bdc6:	6878      	ldr	r0, [r7, #4]
 801bdc8:	f7f8 fb95 	bl	80144f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bdcc:	2102      	movs	r1, #2
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f7ff fdd8 	bl	801b984 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f7f8 fba1 	bl	801451c <pbuf_free>
        break;
 801bdda:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bddc:	4b0b      	ldr	r3, [pc, #44]	@ (801be0c <ip4_input+0x240>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bde2:	4b0a      	ldr	r3, [pc, #40]	@ (801be0c <ip4_input+0x240>)
 801bde4:	2200      	movs	r2, #0
 801bde6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bde8:	4b08      	ldr	r3, [pc, #32]	@ (801be0c <ip4_input+0x240>)
 801bdea:	2200      	movs	r2, #0
 801bdec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bdee:	4b07      	ldr	r3, [pc, #28]	@ (801be0c <ip4_input+0x240>)
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bdf4:	4b05      	ldr	r3, [pc, #20]	@ (801be0c <ip4_input+0x240>)
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bdfa:	4b04      	ldr	r3, [pc, #16]	@ (801be0c <ip4_input+0x240>)
 801bdfc:	2200      	movs	r2, #0
 801bdfe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801be00:	2300      	movs	r3, #0
}
 801be02:	4618      	mov	r0, r3
 801be04:	3718      	adds	r7, #24
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}
 801be0a:	bf00      	nop
 801be0c:	200246b0 	.word	0x200246b0
 801be10:	200277a4 	.word	0x200277a4

0801be14 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b08a      	sub	sp, #40	@ 0x28
 801be18:	af04      	add	r7, sp, #16
 801be1a:	60f8      	str	r0, [r7, #12]
 801be1c:	60b9      	str	r1, [r7, #8]
 801be1e:	607a      	str	r2, [r7, #4]
 801be20:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801be22:	68bb      	ldr	r3, [r7, #8]
 801be24:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d009      	beq.n	801be40 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d003      	beq.n	801be3a <ip4_output_if+0x26>
 801be32:	68bb      	ldr	r3, [r7, #8]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d102      	bne.n	801be40 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be3c:	3304      	adds	r3, #4
 801be3e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801be40:	78fa      	ldrb	r2, [r7, #3]
 801be42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be44:	9302      	str	r3, [sp, #8]
 801be46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801be4a:	9301      	str	r3, [sp, #4]
 801be4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801be50:	9300      	str	r3, [sp, #0]
 801be52:	4613      	mov	r3, r2
 801be54:	687a      	ldr	r2, [r7, #4]
 801be56:	6979      	ldr	r1, [r7, #20]
 801be58:	68f8      	ldr	r0, [r7, #12]
 801be5a:	f000 f805 	bl	801be68 <ip4_output_if_src>
 801be5e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801be60:	4618      	mov	r0, r3
 801be62:	3718      	adds	r7, #24
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}

0801be68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b088      	sub	sp, #32
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	60f8      	str	r0, [r7, #12]
 801be70:	60b9      	str	r1, [r7, #8]
 801be72:	607a      	str	r2, [r7, #4]
 801be74:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	7b9b      	ldrb	r3, [r3, #14]
 801be7a:	2b01      	cmp	r3, #1
 801be7c:	d006      	beq.n	801be8c <ip4_output_if_src+0x24>
 801be7e:	4b4b      	ldr	r3, [pc, #300]	@ (801bfac <ip4_output_if_src+0x144>)
 801be80:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801be84:	494a      	ldr	r1, [pc, #296]	@ (801bfb0 <ip4_output_if_src+0x148>)
 801be86:	484b      	ldr	r0, [pc, #300]	@ (801bfb4 <ip4_output_if_src+0x14c>)
 801be88:	f002 f8a2 	bl	801dfd0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d060      	beq.n	801bf54 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801be92:	2314      	movs	r3, #20
 801be94:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801be96:	2114      	movs	r1, #20
 801be98:	68f8      	ldr	r0, [r7, #12]
 801be9a:	f7f8 faa9 	bl	80143f0 <pbuf_add_header>
 801be9e:	4603      	mov	r3, r0
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d002      	beq.n	801beaa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bea4:	f06f 0301 	mvn.w	r3, #1
 801bea8:	e07c      	b.n	801bfa4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	895b      	ldrh	r3, [r3, #10]
 801beb4:	2b13      	cmp	r3, #19
 801beb6:	d806      	bhi.n	801bec6 <ip4_output_if_src+0x5e>
 801beb8:	4b3c      	ldr	r3, [pc, #240]	@ (801bfac <ip4_output_if_src+0x144>)
 801beba:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bebe:	493e      	ldr	r1, [pc, #248]	@ (801bfb8 <ip4_output_if_src+0x150>)
 801bec0:	483c      	ldr	r0, [pc, #240]	@ (801bfb4 <ip4_output_if_src+0x14c>)
 801bec2:	f002 f885 	bl	801dfd0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bec6:	69fb      	ldr	r3, [r7, #28]
 801bec8:	78fa      	ldrb	r2, [r7, #3]
 801beca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801becc:	69fb      	ldr	r3, [r7, #28]
 801bece:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bed2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	681a      	ldr	r2, [r3, #0]
 801bed8:	69fb      	ldr	r3, [r7, #28]
 801beda:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bedc:	8b7b      	ldrh	r3, [r7, #26]
 801bede:	089b      	lsrs	r3, r3, #2
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	b2db      	uxtb	r3, r3
 801bee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bee8:	b2da      	uxtb	r2, r3
 801beea:	69fb      	ldr	r3, [r7, #28]
 801beec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801beee:	69fb      	ldr	r3, [r7, #28]
 801bef0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bef4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	891b      	ldrh	r3, [r3, #8]
 801befa:	4618      	mov	r0, r3
 801befc:	f7f6 ff20 	bl	8012d40 <lwip_htons>
 801bf00:	4603      	mov	r3, r0
 801bf02:	461a      	mov	r2, r3
 801bf04:	69fb      	ldr	r3, [r7, #28]
 801bf06:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	719a      	strb	r2, [r3, #6]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bf12:	4b2a      	ldr	r3, [pc, #168]	@ (801bfbc <ip4_output_if_src+0x154>)
 801bf14:	881b      	ldrh	r3, [r3, #0]
 801bf16:	4618      	mov	r0, r3
 801bf18:	f7f6 ff12 	bl	8012d40 <lwip_htons>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	461a      	mov	r2, r3
 801bf20:	69fb      	ldr	r3, [r7, #28]
 801bf22:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bf24:	4b25      	ldr	r3, [pc, #148]	@ (801bfbc <ip4_output_if_src+0x154>)
 801bf26:	881b      	ldrh	r3, [r3, #0]
 801bf28:	3301      	adds	r3, #1
 801bf2a:	b29a      	uxth	r2, r3
 801bf2c:	4b23      	ldr	r3, [pc, #140]	@ (801bfbc <ip4_output_if_src+0x154>)
 801bf2e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bf30:	68bb      	ldr	r3, [r7, #8]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d104      	bne.n	801bf40 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bf36:	4b22      	ldr	r3, [pc, #136]	@ (801bfc0 <ip4_output_if_src+0x158>)
 801bf38:	681a      	ldr	r2, [r3, #0]
 801bf3a:	69fb      	ldr	r3, [r7, #28]
 801bf3c:	60da      	str	r2, [r3, #12]
 801bf3e:	e003      	b.n	801bf48 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bf40:	68bb      	ldr	r3, [r7, #8]
 801bf42:	681a      	ldr	r2, [r3, #0]
 801bf44:	69fb      	ldr	r3, [r7, #28]
 801bf46:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bf48:	69fb      	ldr	r3, [r7, #28]
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	729a      	strb	r2, [r3, #10]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	72da      	strb	r2, [r3, #11]
 801bf52:	e00f      	b.n	801bf74 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	895b      	ldrh	r3, [r3, #10]
 801bf58:	2b13      	cmp	r3, #19
 801bf5a:	d802      	bhi.n	801bf62 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bf5c:	f06f 0301 	mvn.w	r3, #1
 801bf60:	e020      	b.n	801bfa4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	685b      	ldr	r3, [r3, #4]
 801bf66:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bf68:	69fb      	ldr	r3, [r7, #28]
 801bf6a:	691b      	ldr	r3, [r3, #16]
 801bf6c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bf6e:	f107 0314 	add.w	r3, r7, #20
 801bf72:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d00c      	beq.n	801bf96 <ip4_output_if_src+0x12e>
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	891a      	ldrh	r2, [r3, #8]
 801bf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf84:	429a      	cmp	r2, r3
 801bf86:	d906      	bls.n	801bf96 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bf88:	687a      	ldr	r2, [r7, #4]
 801bf8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bf8c:	68f8      	ldr	r0, [r7, #12]
 801bf8e:	f000 fd53 	bl	801ca38 <ip4_frag>
 801bf92:	4603      	mov	r3, r0
 801bf94:	e006      	b.n	801bfa4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf98:	695b      	ldr	r3, [r3, #20]
 801bf9a:	687a      	ldr	r2, [r7, #4]
 801bf9c:	68f9      	ldr	r1, [r7, #12]
 801bf9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bfa0:	4798      	blx	r3
 801bfa2:	4603      	mov	r3, r0
}
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3720      	adds	r7, #32
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}
 801bfac:	080218b8 	.word	0x080218b8
 801bfb0:	080218ec 	.word	0x080218ec
 801bfb4:	080218f8 	.word	0x080218f8
 801bfb8:	08021920 	.word	0x08021920
 801bfbc:	20027902 	.word	0x20027902
 801bfc0:	080222e8 	.word	0x080222e8

0801bfc4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
 801bfcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfd8:	d002      	beq.n	801bfe0 <ip4_addr_isbroadcast_u32+0x1c>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d101      	bne.n	801bfe4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	e02a      	b.n	801c03a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bfea:	f003 0302 	and.w	r3, r3, #2
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d101      	bne.n	801bff6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bff2:	2300      	movs	r3, #0
 801bff4:	e021      	b.n	801c03a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bff6:	683b      	ldr	r3, [r7, #0]
 801bff8:	3304      	adds	r3, #4
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	429a      	cmp	r2, r3
 801c000:	d101      	bne.n	801c006 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c002:	2300      	movs	r3, #0
 801c004:	e019      	b.n	801c03a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c006:	68fa      	ldr	r2, [r7, #12]
 801c008:	683b      	ldr	r3, [r7, #0]
 801c00a:	3304      	adds	r3, #4
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	405a      	eors	r2, r3
 801c010:	683b      	ldr	r3, [r7, #0]
 801c012:	3308      	adds	r3, #8
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4013      	ands	r3, r2
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d10d      	bne.n	801c038 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c01c:	683b      	ldr	r3, [r7, #0]
 801c01e:	3308      	adds	r3, #8
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	43da      	mvns	r2, r3
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c028:	683b      	ldr	r3, [r7, #0]
 801c02a:	3308      	adds	r3, #8
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c030:	429a      	cmp	r2, r3
 801c032:	d101      	bne.n	801c038 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c034:	2301      	movs	r3, #1
 801c036:	e000      	b.n	801c03a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c038:	2300      	movs	r3, #0
  }
}
 801c03a:	4618      	mov	r0, r3
 801c03c:	3714      	adds	r7, #20
 801c03e:	46bd      	mov	sp, r7
 801c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c044:	4770      	bx	lr
	...

0801c048 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b084      	sub	sp, #16
 801c04c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c04e:	2300      	movs	r3, #0
 801c050:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c052:	4b12      	ldr	r3, [pc, #72]	@ (801c09c <ip_reass_tmr+0x54>)
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c058:	e018      	b.n	801c08c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	7fdb      	ldrb	r3, [r3, #31]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d00b      	beq.n	801c07a <ip_reass_tmr+0x32>
      r->timer--;
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	7fdb      	ldrb	r3, [r3, #31]
 801c066:	3b01      	subs	r3, #1
 801c068:	b2da      	uxtb	r2, r3
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	60fb      	str	r3, [r7, #12]
 801c078:	e008      	b.n	801c08c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c084:	68b9      	ldr	r1, [r7, #8]
 801c086:	6878      	ldr	r0, [r7, #4]
 801c088:	f000 f80a 	bl	801c0a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d1e3      	bne.n	801c05a <ip_reass_tmr+0x12>
    }
  }
}
 801c092:	bf00      	nop
 801c094:	bf00      	nop
 801c096:	3710      	adds	r7, #16
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	20027904 	.word	0x20027904

0801c0a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	b088      	sub	sp, #32
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c0ae:	683a      	ldr	r2, [r7, #0]
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d105      	bne.n	801c0c2 <ip_reass_free_complete_datagram+0x22>
 801c0b6:	4b45      	ldr	r3, [pc, #276]	@ (801c1cc <ip_reass_free_complete_datagram+0x12c>)
 801c0b8:	22ab      	movs	r2, #171	@ 0xab
 801c0ba:	4945      	ldr	r1, [pc, #276]	@ (801c1d0 <ip_reass_free_complete_datagram+0x130>)
 801c0bc:	4845      	ldr	r0, [pc, #276]	@ (801c1d4 <ip_reass_free_complete_datagram+0x134>)
 801c0be:	f001 ff87 	bl	801dfd0 <iprintf>
  if (prev != NULL) {
 801c0c2:	683b      	ldr	r3, [r7, #0]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d00a      	beq.n	801c0de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	687a      	ldr	r2, [r7, #4]
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	d005      	beq.n	801c0de <ip_reass_free_complete_datagram+0x3e>
 801c0d2:	4b3e      	ldr	r3, [pc, #248]	@ (801c1cc <ip_reass_free_complete_datagram+0x12c>)
 801c0d4:	22ad      	movs	r2, #173	@ 0xad
 801c0d6:	4940      	ldr	r1, [pc, #256]	@ (801c1d8 <ip_reass_free_complete_datagram+0x138>)
 801c0d8:	483e      	ldr	r0, [pc, #248]	@ (801c1d4 <ip_reass_free_complete_datagram+0x134>)
 801c0da:	f001 ff79 	bl	801dfd0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	685b      	ldr	r3, [r3, #4]
 801c0e2:	685b      	ldr	r3, [r3, #4]
 801c0e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c0e6:	697b      	ldr	r3, [r7, #20]
 801c0e8:	889b      	ldrh	r3, [r3, #4]
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d12a      	bne.n	801c146 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	685b      	ldr	r3, [r3, #4]
 801c0f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c0f6:	697b      	ldr	r3, [r7, #20]
 801c0f8:	681a      	ldr	r2, [r3, #0]
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c0fe:	69bb      	ldr	r3, [r7, #24]
 801c100:	6858      	ldr	r0, [r3, #4]
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	3308      	adds	r3, #8
 801c106:	2214      	movs	r2, #20
 801c108:	4619      	mov	r1, r3
 801c10a:	f002 f98c 	bl	801e426 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c10e:	2101      	movs	r1, #1
 801c110:	69b8      	ldr	r0, [r7, #24]
 801c112:	f7ff fc47 	bl	801b9a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c116:	69b8      	ldr	r0, [r7, #24]
 801c118:	f7f8 fa8e 	bl	8014638 <pbuf_clen>
 801c11c:	4603      	mov	r3, r0
 801c11e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c120:	8bfa      	ldrh	r2, [r7, #30]
 801c122:	8a7b      	ldrh	r3, [r7, #18]
 801c124:	4413      	add	r3, r2
 801c126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c12a:	db05      	blt.n	801c138 <ip_reass_free_complete_datagram+0x98>
 801c12c:	4b27      	ldr	r3, [pc, #156]	@ (801c1cc <ip_reass_free_complete_datagram+0x12c>)
 801c12e:	22bc      	movs	r2, #188	@ 0xbc
 801c130:	492a      	ldr	r1, [pc, #168]	@ (801c1dc <ip_reass_free_complete_datagram+0x13c>)
 801c132:	4828      	ldr	r0, [pc, #160]	@ (801c1d4 <ip_reass_free_complete_datagram+0x134>)
 801c134:	f001 ff4c 	bl	801dfd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c138:	8bfa      	ldrh	r2, [r7, #30]
 801c13a:	8a7b      	ldrh	r3, [r7, #18]
 801c13c:	4413      	add	r3, r2
 801c13e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c140:	69b8      	ldr	r0, [r7, #24]
 801c142:	f7f8 f9eb 	bl	801451c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	685b      	ldr	r3, [r3, #4]
 801c14a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c14c:	e01f      	b.n	801c18e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c14e:	69bb      	ldr	r3, [r7, #24]
 801c150:	685b      	ldr	r3, [r3, #4]
 801c152:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c154:	69bb      	ldr	r3, [r7, #24]
 801c156:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c15e:	68f8      	ldr	r0, [r7, #12]
 801c160:	f7f8 fa6a 	bl	8014638 <pbuf_clen>
 801c164:	4603      	mov	r3, r0
 801c166:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c168:	8bfa      	ldrh	r2, [r7, #30]
 801c16a:	8a7b      	ldrh	r3, [r7, #18]
 801c16c:	4413      	add	r3, r2
 801c16e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c172:	db05      	blt.n	801c180 <ip_reass_free_complete_datagram+0xe0>
 801c174:	4b15      	ldr	r3, [pc, #84]	@ (801c1cc <ip_reass_free_complete_datagram+0x12c>)
 801c176:	22cc      	movs	r2, #204	@ 0xcc
 801c178:	4918      	ldr	r1, [pc, #96]	@ (801c1dc <ip_reass_free_complete_datagram+0x13c>)
 801c17a:	4816      	ldr	r0, [pc, #88]	@ (801c1d4 <ip_reass_free_complete_datagram+0x134>)
 801c17c:	f001 ff28 	bl	801dfd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c180:	8bfa      	ldrh	r2, [r7, #30]
 801c182:	8a7b      	ldrh	r3, [r7, #18]
 801c184:	4413      	add	r3, r2
 801c186:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c188:	68f8      	ldr	r0, [r7, #12]
 801c18a:	f7f8 f9c7 	bl	801451c <pbuf_free>
  while (p != NULL) {
 801c18e:	69bb      	ldr	r3, [r7, #24]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d1dc      	bne.n	801c14e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c194:	6839      	ldr	r1, [r7, #0]
 801c196:	6878      	ldr	r0, [r7, #4]
 801c198:	f000 f8c2 	bl	801c320 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c19c:	4b10      	ldr	r3, [pc, #64]	@ (801c1e0 <ip_reass_free_complete_datagram+0x140>)
 801c19e:	881b      	ldrh	r3, [r3, #0]
 801c1a0:	8bfa      	ldrh	r2, [r7, #30]
 801c1a2:	429a      	cmp	r2, r3
 801c1a4:	d905      	bls.n	801c1b2 <ip_reass_free_complete_datagram+0x112>
 801c1a6:	4b09      	ldr	r3, [pc, #36]	@ (801c1cc <ip_reass_free_complete_datagram+0x12c>)
 801c1a8:	22d2      	movs	r2, #210	@ 0xd2
 801c1aa:	490e      	ldr	r1, [pc, #56]	@ (801c1e4 <ip_reass_free_complete_datagram+0x144>)
 801c1ac:	4809      	ldr	r0, [pc, #36]	@ (801c1d4 <ip_reass_free_complete_datagram+0x134>)
 801c1ae:	f001 ff0f 	bl	801dfd0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c1b2:	4b0b      	ldr	r3, [pc, #44]	@ (801c1e0 <ip_reass_free_complete_datagram+0x140>)
 801c1b4:	881a      	ldrh	r2, [r3, #0]
 801c1b6:	8bfb      	ldrh	r3, [r7, #30]
 801c1b8:	1ad3      	subs	r3, r2, r3
 801c1ba:	b29a      	uxth	r2, r3
 801c1bc:	4b08      	ldr	r3, [pc, #32]	@ (801c1e0 <ip_reass_free_complete_datagram+0x140>)
 801c1be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c1c0:	8bfb      	ldrh	r3, [r7, #30]
}
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	3720      	adds	r7, #32
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	08021950 	.word	0x08021950
 801c1d0:	0802198c 	.word	0x0802198c
 801c1d4:	08021998 	.word	0x08021998
 801c1d8:	080219c0 	.word	0x080219c0
 801c1dc:	080219d4 	.word	0x080219d4
 801c1e0:	20027908 	.word	0x20027908
 801c1e4:	080219f4 	.word	0x080219f4

0801c1e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c1e8:	b580      	push	{r7, lr}
 801c1ea:	b08a      	sub	sp, #40	@ 0x28
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	6078      	str	r0, [r7, #4]
 801c1f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c1fe:	2300      	movs	r3, #0
 801c200:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c202:	2300      	movs	r3, #0
 801c204:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c206:	4b28      	ldr	r3, [pc, #160]	@ (801c2a8 <ip_reass_remove_oldest_datagram+0xc0>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c20c:	e030      	b.n	801c270 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c210:	695a      	ldr	r2, [r3, #20]
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	68db      	ldr	r3, [r3, #12]
 801c216:	429a      	cmp	r2, r3
 801c218:	d10c      	bne.n	801c234 <ip_reass_remove_oldest_datagram+0x4c>
 801c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c21c:	699a      	ldr	r2, [r3, #24]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	691b      	ldr	r3, [r3, #16]
 801c222:	429a      	cmp	r2, r3
 801c224:	d106      	bne.n	801c234 <ip_reass_remove_oldest_datagram+0x4c>
 801c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c228:	899a      	ldrh	r2, [r3, #12]
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	889b      	ldrh	r3, [r3, #4]
 801c22e:	b29b      	uxth	r3, r3
 801c230:	429a      	cmp	r2, r3
 801c232:	d014      	beq.n	801c25e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	3301      	adds	r3, #1
 801c238:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c23a:	6a3b      	ldr	r3, [r7, #32]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d104      	bne.n	801c24a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c242:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c244:	69fb      	ldr	r3, [r7, #28]
 801c246:	61bb      	str	r3, [r7, #24]
 801c248:	e009      	b.n	801c25e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c24c:	7fda      	ldrb	r2, [r3, #31]
 801c24e:	6a3b      	ldr	r3, [r7, #32]
 801c250:	7fdb      	ldrb	r3, [r3, #31]
 801c252:	429a      	cmp	r2, r3
 801c254:	d803      	bhi.n	801c25e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c258:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c25a:	69fb      	ldr	r3, [r7, #28]
 801c25c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d001      	beq.n	801c26a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c268:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c272:	2b00      	cmp	r3, #0
 801c274:	d1cb      	bne.n	801c20e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c276:	6a3b      	ldr	r3, [r7, #32]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d008      	beq.n	801c28e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c27c:	69b9      	ldr	r1, [r7, #24]
 801c27e:	6a38      	ldr	r0, [r7, #32]
 801c280:	f7ff ff0e 	bl	801c0a0 <ip_reass_free_complete_datagram>
 801c284:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c286:	697a      	ldr	r2, [r7, #20]
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	4413      	add	r3, r2
 801c28c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c28e:	697a      	ldr	r2, [r7, #20]
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	429a      	cmp	r2, r3
 801c294:	da02      	bge.n	801c29c <ip_reass_remove_oldest_datagram+0xb4>
 801c296:	693b      	ldr	r3, [r7, #16]
 801c298:	2b01      	cmp	r3, #1
 801c29a:	dcac      	bgt.n	801c1f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c29c:	697b      	ldr	r3, [r7, #20]
}
 801c29e:	4618      	mov	r0, r3
 801c2a0:	3728      	adds	r7, #40	@ 0x28
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	bd80      	pop	{r7, pc}
 801c2a6:	bf00      	nop
 801c2a8:	20027904 	.word	0x20027904

0801c2ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b084      	sub	sp, #16
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	6078      	str	r0, [r7, #4]
 801c2b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c2b6:	2004      	movs	r0, #4
 801c2b8:	f7f7 fa16 	bl	80136e8 <memp_malloc>
 801c2bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d110      	bne.n	801c2e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c2c4:	6839      	ldr	r1, [r7, #0]
 801c2c6:	6878      	ldr	r0, [r7, #4]
 801c2c8:	f7ff ff8e 	bl	801c1e8 <ip_reass_remove_oldest_datagram>
 801c2cc:	4602      	mov	r2, r0
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	4293      	cmp	r3, r2
 801c2d2:	dc03      	bgt.n	801c2dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c2d4:	2004      	movs	r0, #4
 801c2d6:	f7f7 fa07 	bl	80136e8 <memp_malloc>
 801c2da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d101      	bne.n	801c2e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	e016      	b.n	801c314 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c2e6:	2220      	movs	r2, #32
 801c2e8:	2100      	movs	r1, #0
 801c2ea:	68f8      	ldr	r0, [r7, #12]
 801c2ec:	f001 ffc8 	bl	801e280 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	220f      	movs	r2, #15
 801c2f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c2f6:	4b09      	ldr	r3, [pc, #36]	@ (801c31c <ip_reass_enqueue_new_datagram+0x70>)
 801c2f8:	681a      	ldr	r2, [r3, #0]
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c2fe:	4a07      	ldr	r2, [pc, #28]	@ (801c31c <ip_reass_enqueue_new_datagram+0x70>)
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	3308      	adds	r3, #8
 801c308:	2214      	movs	r2, #20
 801c30a:	6879      	ldr	r1, [r7, #4]
 801c30c:	4618      	mov	r0, r3
 801c30e:	f002 f88a 	bl	801e426 <memcpy>
  return ipr;
 801c312:	68fb      	ldr	r3, [r7, #12]
}
 801c314:	4618      	mov	r0, r3
 801c316:	3710      	adds	r7, #16
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd80      	pop	{r7, pc}
 801c31c:	20027904 	.word	0x20027904

0801c320 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c320:	b580      	push	{r7, lr}
 801c322:	b082      	sub	sp, #8
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
 801c328:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c32a:	4b10      	ldr	r3, [pc, #64]	@ (801c36c <ip_reass_dequeue_datagram+0x4c>)
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	429a      	cmp	r2, r3
 801c332:	d104      	bne.n	801c33e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	4a0c      	ldr	r2, [pc, #48]	@ (801c36c <ip_reass_dequeue_datagram+0x4c>)
 801c33a:	6013      	str	r3, [r2, #0]
 801c33c:	e00d      	b.n	801c35a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	2b00      	cmp	r3, #0
 801c342:	d106      	bne.n	801c352 <ip_reass_dequeue_datagram+0x32>
 801c344:	4b0a      	ldr	r3, [pc, #40]	@ (801c370 <ip_reass_dequeue_datagram+0x50>)
 801c346:	f240 1245 	movw	r2, #325	@ 0x145
 801c34a:	490a      	ldr	r1, [pc, #40]	@ (801c374 <ip_reass_dequeue_datagram+0x54>)
 801c34c:	480a      	ldr	r0, [pc, #40]	@ (801c378 <ip_reass_dequeue_datagram+0x58>)
 801c34e:	f001 fe3f 	bl	801dfd0 <iprintf>
    prev->next = ipr->next;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c35a:	6879      	ldr	r1, [r7, #4]
 801c35c:	2004      	movs	r0, #4
 801c35e:	f7f7 fa39 	bl	80137d4 <memp_free>
}
 801c362:	bf00      	nop
 801c364:	3708      	adds	r7, #8
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}
 801c36a:	bf00      	nop
 801c36c:	20027904 	.word	0x20027904
 801c370:	08021950 	.word	0x08021950
 801c374:	08021a18 	.word	0x08021a18
 801c378:	08021998 	.word	0x08021998

0801c37c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b08c      	sub	sp, #48	@ 0x30
 801c380:	af00      	add	r7, sp, #0
 801c382:	60f8      	str	r0, [r7, #12]
 801c384:	60b9      	str	r1, [r7, #8]
 801c386:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c388:	2300      	movs	r3, #0
 801c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c38c:	2301      	movs	r3, #1
 801c38e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c390:	68bb      	ldr	r3, [r7, #8]
 801c392:	685b      	ldr	r3, [r3, #4]
 801c394:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c396:	69fb      	ldr	r3, [r7, #28]
 801c398:	885b      	ldrh	r3, [r3, #2]
 801c39a:	b29b      	uxth	r3, r3
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7f6 fccf 	bl	8012d40 <lwip_htons>
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c3a6:	69fb      	ldr	r3, [r7, #28]
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	f003 030f 	and.w	r3, r3, #15
 801c3ae:	b2db      	uxtb	r3, r3
 801c3b0:	009b      	lsls	r3, r3, #2
 801c3b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c3b4:	7e7b      	ldrb	r3, [r7, #25]
 801c3b6:	b29b      	uxth	r3, r3
 801c3b8:	8b7a      	ldrh	r2, [r7, #26]
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d202      	bcs.n	801c3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c3be:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c2:	e135      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c3c4:	7e7b      	ldrb	r3, [r7, #25]
 801c3c6:	b29b      	uxth	r3, r3
 801c3c8:	8b7a      	ldrh	r2, [r7, #26]
 801c3ca:	1ad3      	subs	r3, r2, r3
 801c3cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c3ce:	69fb      	ldr	r3, [r7, #28]
 801c3d0:	88db      	ldrh	r3, [r3, #6]
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7f6 fcb3 	bl	8012d40 <lwip_htons>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3e0:	b29b      	uxth	r3, r3
 801c3e2:	00db      	lsls	r3, r3, #3
 801c3e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c3e6:	68bb      	ldr	r3, [r7, #8]
 801c3e8:	685b      	ldr	r3, [r3, #4]
 801c3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	701a      	strb	r2, [r3, #0]
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	705a      	strb	r2, [r3, #1]
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	709a      	strb	r2, [r3, #2]
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c400:	8afa      	ldrh	r2, [r7, #22]
 801c402:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c404:	8afa      	ldrh	r2, [r7, #22]
 801c406:	8b7b      	ldrh	r3, [r7, #26]
 801c408:	4413      	add	r3, r2
 801c40a:	b29a      	uxth	r2, r3
 801c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c40e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c412:	88db      	ldrh	r3, [r3, #6]
 801c414:	b29b      	uxth	r3, r3
 801c416:	8afa      	ldrh	r2, [r7, #22]
 801c418:	429a      	cmp	r2, r3
 801c41a:	d902      	bls.n	801c422 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295
 801c420:	e106      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	627b      	str	r3, [r7, #36]	@ 0x24
 801c428:	e068      	b.n	801c4fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c42c:	685b      	ldr	r3, [r3, #4]
 801c42e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c432:	889b      	ldrh	r3, [r3, #4]
 801c434:	b29a      	uxth	r2, r3
 801c436:	693b      	ldr	r3, [r7, #16]
 801c438:	889b      	ldrh	r3, [r3, #4]
 801c43a:	b29b      	uxth	r3, r3
 801c43c:	429a      	cmp	r2, r3
 801c43e:	d235      	bcs.n	801c4ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c444:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d020      	beq.n	801c48e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c44e:	889b      	ldrh	r3, [r3, #4]
 801c450:	b29a      	uxth	r2, r3
 801c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c454:	88db      	ldrh	r3, [r3, #6]
 801c456:	b29b      	uxth	r3, r3
 801c458:	429a      	cmp	r2, r3
 801c45a:	d307      	bcc.n	801c46c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c45e:	88db      	ldrh	r3, [r3, #6]
 801c460:	b29a      	uxth	r2, r3
 801c462:	693b      	ldr	r3, [r7, #16]
 801c464:	889b      	ldrh	r3, [r3, #4]
 801c466:	b29b      	uxth	r3, r3
 801c468:	429a      	cmp	r2, r3
 801c46a:	d902      	bls.n	801c472 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c46c:	f04f 33ff 	mov.w	r3, #4294967295
 801c470:	e0de      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c474:	68ba      	ldr	r2, [r7, #8]
 801c476:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c47a:	88db      	ldrh	r3, [r3, #6]
 801c47c:	b29a      	uxth	r2, r3
 801c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c480:	889b      	ldrh	r3, [r3, #4]
 801c482:	b29b      	uxth	r3, r3
 801c484:	429a      	cmp	r2, r3
 801c486:	d03d      	beq.n	801c504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c488:	2300      	movs	r3, #0
 801c48a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c48c:	e03a      	b.n	801c504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c490:	88db      	ldrh	r3, [r3, #6]
 801c492:	b29a      	uxth	r2, r3
 801c494:	693b      	ldr	r3, [r7, #16]
 801c496:	889b      	ldrh	r3, [r3, #4]
 801c498:	b29b      	uxth	r3, r3
 801c49a:	429a      	cmp	r2, r3
 801c49c:	d902      	bls.n	801c4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c49e:	f04f 33ff 	mov.w	r3, #4294967295
 801c4a2:	e0c5      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	68ba      	ldr	r2, [r7, #8]
 801c4a8:	605a      	str	r2, [r3, #4]
      break;
 801c4aa:	e02b      	b.n	801c504 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ae:	889b      	ldrh	r3, [r3, #4]
 801c4b0:	b29a      	uxth	r2, r3
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	889b      	ldrh	r3, [r3, #4]
 801c4b6:	b29b      	uxth	r3, r3
 801c4b8:	429a      	cmp	r2, r3
 801c4ba:	d102      	bne.n	801c4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c4bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c4c0:	e0b6      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4c4:	889b      	ldrh	r3, [r3, #4]
 801c4c6:	b29a      	uxth	r2, r3
 801c4c8:	693b      	ldr	r3, [r7, #16]
 801c4ca:	88db      	ldrh	r3, [r3, #6]
 801c4cc:	b29b      	uxth	r3, r3
 801c4ce:	429a      	cmp	r2, r3
 801c4d0:	d202      	bcs.n	801c4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c4d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c4d6:	e0ab      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d009      	beq.n	801c4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e0:	88db      	ldrh	r3, [r3, #6]
 801c4e2:	b29a      	uxth	r2, r3
 801c4e4:	693b      	ldr	r3, [r7, #16]
 801c4e6:	889b      	ldrh	r3, [r3, #4]
 801c4e8:	b29b      	uxth	r3, r3
 801c4ea:	429a      	cmp	r2, r3
 801c4ec:	d001      	beq.n	801c4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c4f8:	693b      	ldr	r3, [r7, #16]
 801c4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d193      	bne.n	801c42a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c502:	e000      	b.n	801c506 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c504:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d12d      	bne.n	801c568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d01c      	beq.n	801c54c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c514:	88db      	ldrh	r3, [r3, #6]
 801c516:	b29a      	uxth	r2, r3
 801c518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c51a:	889b      	ldrh	r3, [r3, #4]
 801c51c:	b29b      	uxth	r3, r3
 801c51e:	429a      	cmp	r2, r3
 801c520:	d906      	bls.n	801c530 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c522:	4b45      	ldr	r3, [pc, #276]	@ (801c638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c524:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c528:	4944      	ldr	r1, [pc, #272]	@ (801c63c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c52a:	4845      	ldr	r0, [pc, #276]	@ (801c640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c52c:	f001 fd50 	bl	801dfd0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c532:	68ba      	ldr	r2, [r7, #8]
 801c534:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c538:	88db      	ldrh	r3, [r3, #6]
 801c53a:	b29a      	uxth	r2, r3
 801c53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c53e:	889b      	ldrh	r3, [r3, #4]
 801c540:	b29b      	uxth	r3, r3
 801c542:	429a      	cmp	r2, r3
 801c544:	d010      	beq.n	801c568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c546:	2300      	movs	r3, #0
 801c548:	623b      	str	r3, [r7, #32]
 801c54a:	e00d      	b.n	801c568 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	685b      	ldr	r3, [r3, #4]
 801c550:	2b00      	cmp	r3, #0
 801c552:	d006      	beq.n	801c562 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c554:	4b38      	ldr	r3, [pc, #224]	@ (801c638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c556:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c55a:	493a      	ldr	r1, [pc, #232]	@ (801c644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c55c:	4838      	ldr	r0, [pc, #224]	@ (801c640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c55e:	f001 fd37 	bl	801dfd0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	68ba      	ldr	r2, [r7, #8]
 801c566:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d105      	bne.n	801c57a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	7f9b      	ldrb	r3, [r3, #30]
 801c572:	f003 0301 	and.w	r3, r3, #1
 801c576:	2b00      	cmp	r3, #0
 801c578:	d059      	beq.n	801c62e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c57a:	6a3b      	ldr	r3, [r7, #32]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d04f      	beq.n	801c620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d006      	beq.n	801c596 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	685b      	ldr	r3, [r3, #4]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	889b      	ldrh	r3, [r3, #4]
 801c590:	b29b      	uxth	r3, r3
 801c592:	2b00      	cmp	r3, #0
 801c594:	d002      	beq.n	801c59c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c596:	2300      	movs	r3, #0
 801c598:	623b      	str	r3, [r7, #32]
 801c59a:	e041      	b.n	801c620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c59e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c5a6:	e012      	b.n	801c5ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5aa:	685b      	ldr	r3, [r3, #4]
 801c5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5b0:	88db      	ldrh	r3, [r3, #6]
 801c5b2:	b29a      	uxth	r2, r3
 801c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5b6:	889b      	ldrh	r3, [r3, #4]
 801c5b8:	b29b      	uxth	r3, r3
 801c5ba:	429a      	cmp	r2, r3
 801c5bc:	d002      	beq.n	801c5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c5be:	2300      	movs	r3, #0
 801c5c0:	623b      	str	r3, [r7, #32]
            break;
 801c5c2:	e007      	b.n	801c5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d1e9      	bne.n	801c5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c5d4:	6a3b      	ldr	r3, [r7, #32]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d022      	beq.n	801c620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	685b      	ldr	r3, [r3, #4]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d106      	bne.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c5e2:	4b15      	ldr	r3, [pc, #84]	@ (801c638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5e4:	f240 12df 	movw	r2, #479	@ 0x1df
 801c5e8:	4917      	ldr	r1, [pc, #92]	@ (801c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5ea:	4815      	ldr	r0, [pc, #84]	@ (801c640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5ec:	f001 fcf0 	bl	801dfd0 <iprintf>
          LWIP_ASSERT("sanity check",
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	685b      	ldr	r3, [r3, #4]
 801c5f4:	685b      	ldr	r3, [r3, #4]
 801c5f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d106      	bne.n	801c60a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c5fc:	4b0e      	ldr	r3, [pc, #56]	@ (801c638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5fe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c602:	4911      	ldr	r1, [pc, #68]	@ (801c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c604:	480e      	ldr	r0, [pc, #56]	@ (801c640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c606:	f001 fce3 	bl	801dfd0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d006      	beq.n	801c620 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c612:	4b09      	ldr	r3, [pc, #36]	@ (801c638 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c614:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c618:	490c      	ldr	r1, [pc, #48]	@ (801c64c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c61a:	4809      	ldr	r0, [pc, #36]	@ (801c640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c61c:	f001 fcd8 	bl	801dfd0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c620:	6a3b      	ldr	r3, [r7, #32]
 801c622:	2b00      	cmp	r3, #0
 801c624:	bf14      	ite	ne
 801c626:	2301      	movne	r3, #1
 801c628:	2300      	moveq	r3, #0
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	e000      	b.n	801c630 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c62e:	2300      	movs	r3, #0
}
 801c630:	4618      	mov	r0, r3
 801c632:	3730      	adds	r7, #48	@ 0x30
 801c634:	46bd      	mov	sp, r7
 801c636:	bd80      	pop	{r7, pc}
 801c638:	08021950 	.word	0x08021950
 801c63c:	08021a34 	.word	0x08021a34
 801c640:	08021998 	.word	0x08021998
 801c644:	08021a54 	.word	0x08021a54
 801c648:	08021a8c 	.word	0x08021a8c
 801c64c:	08021a9c 	.word	0x08021a9c

0801c650 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b08e      	sub	sp, #56	@ 0x38
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	f003 030f 	and.w	r3, r3, #15
 801c666:	b2db      	uxtb	r3, r3
 801c668:	009b      	lsls	r3, r3, #2
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	2b14      	cmp	r3, #20
 801c66e:	f040 8171 	bne.w	801c954 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c674:	88db      	ldrh	r3, [r3, #6]
 801c676:	b29b      	uxth	r3, r3
 801c678:	4618      	mov	r0, r3
 801c67a:	f7f6 fb61 	bl	8012d40 <lwip_htons>
 801c67e:	4603      	mov	r3, r0
 801c680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c684:	b29b      	uxth	r3, r3
 801c686:	00db      	lsls	r3, r3, #3
 801c688:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c68c:	885b      	ldrh	r3, [r3, #2]
 801c68e:	b29b      	uxth	r3, r3
 801c690:	4618      	mov	r0, r3
 801c692:	f7f6 fb55 	bl	8012d40 <lwip_htons>
 801c696:	4603      	mov	r3, r0
 801c698:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c69c:	781b      	ldrb	r3, [r3, #0]
 801c69e:	f003 030f 	and.w	r3, r3, #15
 801c6a2:	b2db      	uxtb	r3, r3
 801c6a4:	009b      	lsls	r3, r3, #2
 801c6a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c6aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c6ae:	b29b      	uxth	r3, r3
 801c6b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	f0c0 8150 	bcc.w	801c958 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c6b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c6bc:	b29b      	uxth	r3, r3
 801c6be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c6c0:	1ad3      	subs	r3, r2, r3
 801c6c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c6c4:	6878      	ldr	r0, [r7, #4]
 801c6c6:	f7f7 ffb7 	bl	8014638 <pbuf_clen>
 801c6ca:	4603      	mov	r3, r0
 801c6cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c6ce:	4b8c      	ldr	r3, [pc, #560]	@ (801c900 <ip4_reass+0x2b0>)
 801c6d0:	881b      	ldrh	r3, [r3, #0]
 801c6d2:	461a      	mov	r2, r3
 801c6d4:	8c3b      	ldrh	r3, [r7, #32]
 801c6d6:	4413      	add	r3, r2
 801c6d8:	2b0a      	cmp	r3, #10
 801c6da:	dd10      	ble.n	801c6fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c6dc:	8c3b      	ldrh	r3, [r7, #32]
 801c6de:	4619      	mov	r1, r3
 801c6e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6e2:	f7ff fd81 	bl	801c1e8 <ip_reass_remove_oldest_datagram>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f000 8137 	beq.w	801c95c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c6ee:	4b84      	ldr	r3, [pc, #528]	@ (801c900 <ip4_reass+0x2b0>)
 801c6f0:	881b      	ldrh	r3, [r3, #0]
 801c6f2:	461a      	mov	r2, r3
 801c6f4:	8c3b      	ldrh	r3, [r7, #32]
 801c6f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c6f8:	2b0a      	cmp	r3, #10
 801c6fa:	f300 812f 	bgt.w	801c95c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6fe:	4b81      	ldr	r3, [pc, #516]	@ (801c904 <ip4_reass+0x2b4>)
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	633b      	str	r3, [r7, #48]	@ 0x30
 801c704:	e015      	b.n	801c732 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c708:	695a      	ldr	r2, [r3, #20]
 801c70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c70c:	68db      	ldr	r3, [r3, #12]
 801c70e:	429a      	cmp	r2, r3
 801c710:	d10c      	bne.n	801c72c <ip4_reass+0xdc>
 801c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c714:	699a      	ldr	r2, [r3, #24]
 801c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c718:	691b      	ldr	r3, [r3, #16]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d106      	bne.n	801c72c <ip4_reass+0xdc>
 801c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c720:	899a      	ldrh	r2, [r3, #12]
 801c722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c724:	889b      	ldrh	r3, [r3, #4]
 801c726:	b29b      	uxth	r3, r3
 801c728:	429a      	cmp	r2, r3
 801c72a:	d006      	beq.n	801c73a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	633b      	str	r3, [r7, #48]	@ 0x30
 801c732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c734:	2b00      	cmp	r3, #0
 801c736:	d1e6      	bne.n	801c706 <ip4_reass+0xb6>
 801c738:	e000      	b.n	801c73c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c73a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d109      	bne.n	801c756 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c742:	8c3b      	ldrh	r3, [r7, #32]
 801c744:	4619      	mov	r1, r3
 801c746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c748:	f7ff fdb0 	bl	801c2ac <ip_reass_enqueue_new_datagram>
 801c74c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c750:	2b00      	cmp	r3, #0
 801c752:	d11c      	bne.n	801c78e <ip4_reass+0x13e>
      goto nullreturn;
 801c754:	e105      	b.n	801c962 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c758:	88db      	ldrh	r3, [r3, #6]
 801c75a:	b29b      	uxth	r3, r3
 801c75c:	4618      	mov	r0, r3
 801c75e:	f7f6 faef 	bl	8012d40 <lwip_htons>
 801c762:	4603      	mov	r3, r0
 801c764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d110      	bne.n	801c78e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c76e:	89db      	ldrh	r3, [r3, #14]
 801c770:	4618      	mov	r0, r3
 801c772:	f7f6 fae5 	bl	8012d40 <lwip_htons>
 801c776:	4603      	mov	r3, r0
 801c778:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d006      	beq.n	801c78e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c782:	3308      	adds	r3, #8
 801c784:	2214      	movs	r2, #20
 801c786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c788:	4618      	mov	r0, r3
 801c78a:	f001 fe4c 	bl	801e426 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c790:	88db      	ldrh	r3, [r3, #6]
 801c792:	b29b      	uxth	r3, r3
 801c794:	f003 0320 	and.w	r3, r3, #32
 801c798:	2b00      	cmp	r3, #0
 801c79a:	bf0c      	ite	eq
 801c79c:	2301      	moveq	r3, #1
 801c79e:	2300      	movne	r3, #0
 801c7a0:	b2db      	uxtb	r3, r3
 801c7a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c7a4:	69fb      	ldr	r3, [r7, #28]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d00e      	beq.n	801c7c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c7aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c7ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7ae:	4413      	add	r3, r2
 801c7b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c7b2:	8b7a      	ldrh	r2, [r7, #26]
 801c7b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	f0c0 80a0 	bcc.w	801c8fc <ip4_reass+0x2ac>
 801c7bc:	8b7b      	ldrh	r3, [r7, #26]
 801c7be:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c7c2:	4293      	cmp	r3, r2
 801c7c4:	f200 809a 	bhi.w	801c8fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c7c8:	69fa      	ldr	r2, [r7, #28]
 801c7ca:	6879      	ldr	r1, [r7, #4]
 801c7cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c7ce:	f7ff fdd5 	bl	801c37c <ip_reass_chain_frag_into_datagram_and_validate>
 801c7d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7da:	f000 809b 	beq.w	801c914 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c7de:	4b48      	ldr	r3, [pc, #288]	@ (801c900 <ip4_reass+0x2b0>)
 801c7e0:	881a      	ldrh	r2, [r3, #0]
 801c7e2:	8c3b      	ldrh	r3, [r7, #32]
 801c7e4:	4413      	add	r3, r2
 801c7e6:	b29a      	uxth	r2, r3
 801c7e8:	4b45      	ldr	r3, [pc, #276]	@ (801c900 <ip4_reass+0x2b0>)
 801c7ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d00d      	beq.n	801c80e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c7f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c7f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7f6:	4413      	add	r3, r2
 801c7f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7fc:	8a7a      	ldrh	r2, [r7, #18]
 801c7fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c802:	7f9b      	ldrb	r3, [r3, #30]
 801c804:	f043 0301 	orr.w	r3, r3, #1
 801c808:	b2da      	uxtb	r2, r3
 801c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c80c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	2b01      	cmp	r3, #1
 801c812:	d171      	bne.n	801c8f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c816:	8b9b      	ldrh	r3, [r3, #28]
 801c818:	3314      	adds	r3, #20
 801c81a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c81e:	685b      	ldr	r3, [r3, #4]
 801c820:	685b      	ldr	r3, [r3, #4]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c830:	3308      	adds	r3, #8
 801c832:	2214      	movs	r2, #20
 801c834:	4619      	mov	r1, r3
 801c836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c838:	f001 fdf5 	bl	801e426 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c83c:	8a3b      	ldrh	r3, [r7, #16]
 801c83e:	4618      	mov	r0, r3
 801c840:	f7f6 fa7e 	bl	8012d40 <lwip_htons>
 801c844:	4603      	mov	r3, r0
 801c846:	461a      	mov	r2, r3
 801c848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c84a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c84e:	2200      	movs	r2, #0
 801c850:	719a      	strb	r2, [r3, #6]
 801c852:	2200      	movs	r2, #0
 801c854:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c858:	2200      	movs	r2, #0
 801c85a:	729a      	strb	r2, [r3, #10]
 801c85c:	2200      	movs	r2, #0
 801c85e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c862:	685b      	ldr	r3, [r3, #4]
 801c864:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c866:	e00d      	b.n	801c884 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c86a:	685b      	ldr	r3, [r3, #4]
 801c86c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c86e:	2114      	movs	r1, #20
 801c870:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c872:	f7f7 fdcd 	bl	8014410 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c876:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c878:	6878      	ldr	r0, [r7, #4]
 801c87a:	f7f7 ff1d 	bl	80146b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c886:	2b00      	cmp	r3, #0
 801c888:	d1ee      	bne.n	801c868 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c88a:	4b1e      	ldr	r3, [pc, #120]	@ (801c904 <ip4_reass+0x2b4>)
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c890:	429a      	cmp	r2, r3
 801c892:	d102      	bne.n	801c89a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c894:	2300      	movs	r3, #0
 801c896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c898:	e010      	b.n	801c8bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c89a:	4b1a      	ldr	r3, [pc, #104]	@ (801c904 <ip4_reass+0x2b4>)
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c8a0:	e007      	b.n	801c8b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d006      	beq.n	801c8ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d1f4      	bne.n	801c8a2 <ip4_reass+0x252>
 801c8b8:	e000      	b.n	801c8bc <ip4_reass+0x26c>
          break;
 801c8ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c8bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c8be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c8c0:	f7ff fd2e 	bl	801c320 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c8c4:	6878      	ldr	r0, [r7, #4]
 801c8c6:	f7f7 feb7 	bl	8014638 <pbuf_clen>
 801c8ca:	4603      	mov	r3, r0
 801c8cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c8ce:	4b0c      	ldr	r3, [pc, #48]	@ (801c900 <ip4_reass+0x2b0>)
 801c8d0:	881b      	ldrh	r3, [r3, #0]
 801c8d2:	8c3a      	ldrh	r2, [r7, #32]
 801c8d4:	429a      	cmp	r2, r3
 801c8d6:	d906      	bls.n	801c8e6 <ip4_reass+0x296>
 801c8d8:	4b0b      	ldr	r3, [pc, #44]	@ (801c908 <ip4_reass+0x2b8>)
 801c8da:	f240 229b 	movw	r2, #667	@ 0x29b
 801c8de:	490b      	ldr	r1, [pc, #44]	@ (801c90c <ip4_reass+0x2bc>)
 801c8e0:	480b      	ldr	r0, [pc, #44]	@ (801c910 <ip4_reass+0x2c0>)
 801c8e2:	f001 fb75 	bl	801dfd0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c8e6:	4b06      	ldr	r3, [pc, #24]	@ (801c900 <ip4_reass+0x2b0>)
 801c8e8:	881a      	ldrh	r2, [r3, #0]
 801c8ea:	8c3b      	ldrh	r3, [r7, #32]
 801c8ec:	1ad3      	subs	r3, r2, r3
 801c8ee:	b29a      	uxth	r2, r3
 801c8f0:	4b03      	ldr	r3, [pc, #12]	@ (801c900 <ip4_reass+0x2b0>)
 801c8f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	e038      	b.n	801c96a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	e036      	b.n	801c96a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c8fc:	bf00      	nop
 801c8fe:	e00a      	b.n	801c916 <ip4_reass+0x2c6>
 801c900:	20027908 	.word	0x20027908
 801c904:	20027904 	.word	0x20027904
 801c908:	08021950 	.word	0x08021950
 801c90c:	08021ac0 	.word	0x08021ac0
 801c910:	08021998 	.word	0x08021998
    goto nullreturn_ipr;
 801c914:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d106      	bne.n	801c92a <ip4_reass+0x2da>
 801c91c:	4b15      	ldr	r3, [pc, #84]	@ (801c974 <ip4_reass+0x324>)
 801c91e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c922:	4915      	ldr	r1, [pc, #84]	@ (801c978 <ip4_reass+0x328>)
 801c924:	4815      	ldr	r0, [pc, #84]	@ (801c97c <ip4_reass+0x32c>)
 801c926:	f001 fb53 	bl	801dfd0 <iprintf>
  if (ipr->p == NULL) {
 801c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c92c:	685b      	ldr	r3, [r3, #4]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d116      	bne.n	801c960 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c932:	4b13      	ldr	r3, [pc, #76]	@ (801c980 <ip4_reass+0x330>)
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c938:	429a      	cmp	r2, r3
 801c93a:	d006      	beq.n	801c94a <ip4_reass+0x2fa>
 801c93c:	4b0d      	ldr	r3, [pc, #52]	@ (801c974 <ip4_reass+0x324>)
 801c93e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c942:	4910      	ldr	r1, [pc, #64]	@ (801c984 <ip4_reass+0x334>)
 801c944:	480d      	ldr	r0, [pc, #52]	@ (801c97c <ip4_reass+0x32c>)
 801c946:	f001 fb43 	bl	801dfd0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c94a:	2100      	movs	r1, #0
 801c94c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c94e:	f7ff fce7 	bl	801c320 <ip_reass_dequeue_datagram>
 801c952:	e006      	b.n	801c962 <ip4_reass+0x312>
    goto nullreturn;
 801c954:	bf00      	nop
 801c956:	e004      	b.n	801c962 <ip4_reass+0x312>
    goto nullreturn;
 801c958:	bf00      	nop
 801c95a:	e002      	b.n	801c962 <ip4_reass+0x312>
      goto nullreturn;
 801c95c:	bf00      	nop
 801c95e:	e000      	b.n	801c962 <ip4_reass+0x312>
  }

nullreturn:
 801c960:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c962:	6878      	ldr	r0, [r7, #4]
 801c964:	f7f7 fdda 	bl	801451c <pbuf_free>
  return NULL;
 801c968:	2300      	movs	r3, #0
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	3738      	adds	r7, #56	@ 0x38
 801c96e:	46bd      	mov	sp, r7
 801c970:	bd80      	pop	{r7, pc}
 801c972:	bf00      	nop
 801c974:	08021950 	.word	0x08021950
 801c978:	08021adc 	.word	0x08021adc
 801c97c:	08021998 	.word	0x08021998
 801c980:	20027904 	.word	0x20027904
 801c984:	08021ae8 	.word	0x08021ae8

0801c988 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c988:	b580      	push	{r7, lr}
 801c98a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c98c:	2005      	movs	r0, #5
 801c98e:	f7f6 feab 	bl	80136e8 <memp_malloc>
 801c992:	4603      	mov	r3, r0
}
 801c994:	4618      	mov	r0, r3
 801c996:	bd80      	pop	{r7, pc}

0801c998 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c998:	b580      	push	{r7, lr}
 801c99a:	b082      	sub	sp, #8
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d106      	bne.n	801c9b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c9a6:	4b07      	ldr	r3, [pc, #28]	@ (801c9c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c9a8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c9ac:	4906      	ldr	r1, [pc, #24]	@ (801c9c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c9ae:	4807      	ldr	r0, [pc, #28]	@ (801c9cc <ip_frag_free_pbuf_custom_ref+0x34>)
 801c9b0:	f001 fb0e 	bl	801dfd0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c9b4:	6879      	ldr	r1, [r7, #4]
 801c9b6:	2005      	movs	r0, #5
 801c9b8:	f7f6 ff0c 	bl	80137d4 <memp_free>
}
 801c9bc:	bf00      	nop
 801c9be:	3708      	adds	r7, #8
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}
 801c9c4:	08021950 	.word	0x08021950
 801c9c8:	08021b08 	.word	0x08021b08
 801c9cc:	08021998 	.word	0x08021998

0801c9d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c9d0:	b580      	push	{r7, lr}
 801c9d2:	b084      	sub	sp, #16
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d106      	bne.n	801c9f0 <ipfrag_free_pbuf_custom+0x20>
 801c9e2:	4b11      	ldr	r3, [pc, #68]	@ (801ca28 <ipfrag_free_pbuf_custom+0x58>)
 801c9e4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c9e8:	4910      	ldr	r1, [pc, #64]	@ (801ca2c <ipfrag_free_pbuf_custom+0x5c>)
 801c9ea:	4811      	ldr	r0, [pc, #68]	@ (801ca30 <ipfrag_free_pbuf_custom+0x60>)
 801c9ec:	f001 faf0 	bl	801dfd0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c9f0:	68fa      	ldr	r2, [r7, #12]
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	429a      	cmp	r2, r3
 801c9f6:	d006      	beq.n	801ca06 <ipfrag_free_pbuf_custom+0x36>
 801c9f8:	4b0b      	ldr	r3, [pc, #44]	@ (801ca28 <ipfrag_free_pbuf_custom+0x58>)
 801c9fa:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c9fe:	490d      	ldr	r1, [pc, #52]	@ (801ca34 <ipfrag_free_pbuf_custom+0x64>)
 801ca00:	480b      	ldr	r0, [pc, #44]	@ (801ca30 <ipfrag_free_pbuf_custom+0x60>)
 801ca02:	f001 fae5 	bl	801dfd0 <iprintf>
  if (pcr->original != NULL) {
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	695b      	ldr	r3, [r3, #20]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d004      	beq.n	801ca18 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	695b      	ldr	r3, [r3, #20]
 801ca12:	4618      	mov	r0, r3
 801ca14:	f7f7 fd82 	bl	801451c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ca18:	68f8      	ldr	r0, [r7, #12]
 801ca1a:	f7ff ffbd 	bl	801c998 <ip_frag_free_pbuf_custom_ref>
}
 801ca1e:	bf00      	nop
 801ca20:	3710      	adds	r7, #16
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	bf00      	nop
 801ca28:	08021950 	.word	0x08021950
 801ca2c:	08021b14 	.word	0x08021b14
 801ca30:	08021998 	.word	0x08021998
 801ca34:	08021b20 	.word	0x08021b20

0801ca38 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b094      	sub	sp, #80	@ 0x50
 801ca3c:	af02      	add	r7, sp, #8
 801ca3e:	60f8      	str	r0, [r7, #12]
 801ca40:	60b9      	str	r1, [r7, #8]
 801ca42:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ca44:	2300      	movs	r3, #0
 801ca46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ca4a:	68bb      	ldr	r3, [r7, #8]
 801ca4c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ca4e:	3b14      	subs	r3, #20
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	da00      	bge.n	801ca56 <ip4_frag+0x1e>
 801ca54:	3307      	adds	r3, #7
 801ca56:	10db      	asrs	r3, r3, #3
 801ca58:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ca5a:	2314      	movs	r3, #20
 801ca5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ca64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ca68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca6a:	781b      	ldrb	r3, [r3, #0]
 801ca6c:	f003 030f 	and.w	r3, r3, #15
 801ca70:	b2db      	uxtb	r3, r3
 801ca72:	009b      	lsls	r3, r3, #2
 801ca74:	b2db      	uxtb	r3, r3
 801ca76:	2b14      	cmp	r3, #20
 801ca78:	d002      	beq.n	801ca80 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ca7a:	f06f 0305 	mvn.w	r3, #5
 801ca7e:	e110      	b.n	801cca2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	895b      	ldrh	r3, [r3, #10]
 801ca84:	2b13      	cmp	r3, #19
 801ca86:	d809      	bhi.n	801ca9c <ip4_frag+0x64>
 801ca88:	4b88      	ldr	r3, [pc, #544]	@ (801ccac <ip4_frag+0x274>)
 801ca8a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ca8e:	4988      	ldr	r1, [pc, #544]	@ (801ccb0 <ip4_frag+0x278>)
 801ca90:	4888      	ldr	r0, [pc, #544]	@ (801ccb4 <ip4_frag+0x27c>)
 801ca92:	f001 fa9d 	bl	801dfd0 <iprintf>
 801ca96:	f06f 0305 	mvn.w	r3, #5
 801ca9a:	e102      	b.n	801cca2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca9e:	88db      	ldrh	r3, [r3, #6]
 801caa0:	b29b      	uxth	r3, r3
 801caa2:	4618      	mov	r0, r3
 801caa4:	f7f6 f94c 	bl	8012d40 <lwip_htons>
 801caa8:	4603      	mov	r3, r0
 801caaa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801caac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801caae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cab2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801cab6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cabc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	891b      	ldrh	r3, [r3, #8]
 801cac2:	3b14      	subs	r3, #20
 801cac4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801cac8:	e0e1      	b.n	801cc8e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801caca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cacc:	00db      	lsls	r3, r3, #3
 801cace:	b29b      	uxth	r3, r3
 801cad0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cad4:	4293      	cmp	r3, r2
 801cad6:	bf28      	it	cs
 801cad8:	4613      	movcs	r3, r2
 801cada:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801cadc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cae0:	2114      	movs	r1, #20
 801cae2:	200e      	movs	r0, #14
 801cae4:	f7f7 fa36 	bl	8013f54 <pbuf_alloc>
 801cae8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801caea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caec:	2b00      	cmp	r3, #0
 801caee:	f000 80d5 	beq.w	801cc9c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caf4:	895b      	ldrh	r3, [r3, #10]
 801caf6:	2b13      	cmp	r3, #19
 801caf8:	d806      	bhi.n	801cb08 <ip4_frag+0xd0>
 801cafa:	4b6c      	ldr	r3, [pc, #432]	@ (801ccac <ip4_frag+0x274>)
 801cafc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cb00:	496d      	ldr	r1, [pc, #436]	@ (801ccb8 <ip4_frag+0x280>)
 801cb02:	486c      	ldr	r0, [pc, #432]	@ (801ccb4 <ip4_frag+0x27c>)
 801cb04:	f001 fa64 	bl	801dfd0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb0a:	685b      	ldr	r3, [r3, #4]
 801cb0c:	2214      	movs	r2, #20
 801cb0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cb10:	4618      	mov	r0, r3
 801cb12:	f001 fc88 	bl	801e426 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb18:	685b      	ldr	r3, [r3, #4]
 801cb1a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cb1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cb1e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cb22:	e064      	b.n	801cbee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	895a      	ldrh	r2, [r3, #10]
 801cb28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb2a:	1ad3      	subs	r3, r2, r3
 801cb2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	895b      	ldrh	r3, [r3, #10]
 801cb32:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cb34:	429a      	cmp	r2, r3
 801cb36:	d906      	bls.n	801cb46 <ip4_frag+0x10e>
 801cb38:	4b5c      	ldr	r3, [pc, #368]	@ (801ccac <ip4_frag+0x274>)
 801cb3a:	f240 322d 	movw	r2, #813	@ 0x32d
 801cb3e:	495f      	ldr	r1, [pc, #380]	@ (801ccbc <ip4_frag+0x284>)
 801cb40:	485c      	ldr	r0, [pc, #368]	@ (801ccb4 <ip4_frag+0x27c>)
 801cb42:	f001 fa45 	bl	801dfd0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cb46:	8bfa      	ldrh	r2, [r7, #30]
 801cb48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb4c:	4293      	cmp	r3, r2
 801cb4e:	bf28      	it	cs
 801cb50:	4613      	movcs	r3, r2
 801cb52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cb56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d105      	bne.n	801cb6a <ip4_frag+0x132>
        poff = 0;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	60fb      	str	r3, [r7, #12]
        continue;
 801cb68:	e041      	b.n	801cbee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cb6a:	f7ff ff0d 	bl	801c988 <ip_frag_alloc_pbuf_custom_ref>
 801cb6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cb70:	69bb      	ldr	r3, [r7, #24]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d103      	bne.n	801cb7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cb76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb78:	f7f7 fcd0 	bl	801451c <pbuf_free>
        goto memerr;
 801cb7c:	e08f      	b.n	801cc9e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb86:	4413      	add	r3, r2
 801cb88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cb8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cb90:	9201      	str	r2, [sp, #4]
 801cb92:	9300      	str	r3, [sp, #0]
 801cb94:	4603      	mov	r3, r0
 801cb96:	2241      	movs	r2, #65	@ 0x41
 801cb98:	2000      	movs	r0, #0
 801cb9a:	f7f7 fb05 	bl	80141a8 <pbuf_alloced_custom>
 801cb9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cba0:	697b      	ldr	r3, [r7, #20]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d106      	bne.n	801cbb4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cba6:	69b8      	ldr	r0, [r7, #24]
 801cba8:	f7ff fef6 	bl	801c998 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cbac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cbae:	f7f7 fcb5 	bl	801451c <pbuf_free>
        goto memerr;
 801cbb2:	e074      	b.n	801cc9e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cbb4:	68f8      	ldr	r0, [r7, #12]
 801cbb6:	f7f7 fd57 	bl	8014668 <pbuf_ref>
      pcr->original = p;
 801cbba:	69bb      	ldr	r3, [r7, #24]
 801cbbc:	68fa      	ldr	r2, [r7, #12]
 801cbbe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cbc0:	69bb      	ldr	r3, [r7, #24]
 801cbc2:	4a3f      	ldr	r2, [pc, #252]	@ (801ccc0 <ip4_frag+0x288>)
 801cbc4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cbc6:	6979      	ldr	r1, [r7, #20]
 801cbc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cbca:	f7f7 fd75 	bl	80146b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cbce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cbd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbd6:	1ad3      	subs	r3, r2, r3
 801cbd8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cbdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d004      	beq.n	801cbee <ip4_frag+0x1b6>
        poff = 0;
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cbee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d196      	bne.n	801cb24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cbf6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cbf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbfc:	4413      	add	r3, r2
 801cbfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cc00:	68bb      	ldr	r3, [r7, #8]
 801cc02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cc04:	f1a3 0213 	sub.w	r2, r3, #19
 801cc08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	bfcc      	ite	gt
 801cc10:	2301      	movgt	r3, #1
 801cc12:	2300      	movle	r3, #0
 801cc14:	b2db      	uxtb	r3, r3
 801cc16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cc18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cc1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cc20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cc22:	6a3b      	ldr	r3, [r7, #32]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d002      	beq.n	801cc2e <ip4_frag+0x1f6>
 801cc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d003      	beq.n	801cc36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cc2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cc30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cc34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cc36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f7f6 f881 	bl	8012d40 <lwip_htons>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	461a      	mov	r2, r3
 801cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cc46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc48:	3314      	adds	r3, #20
 801cc4a:	b29b      	uxth	r3, r3
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	f7f6 f877 	bl	8012d40 <lwip_htons>
 801cc52:	4603      	mov	r3, r0
 801cc54:	461a      	mov	r2, r3
 801cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	729a      	strb	r2, [r3, #10]
 801cc60:	2200      	movs	r2, #0
 801cc62:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cc64:	68bb      	ldr	r3, [r7, #8]
 801cc66:	695b      	ldr	r3, [r3, #20]
 801cc68:	687a      	ldr	r2, [r7, #4]
 801cc6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc6c:	68b8      	ldr	r0, [r7, #8]
 801cc6e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cc70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc72:	f7f7 fc53 	bl	801451c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cc76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc7c:	1ad3      	subs	r3, r2, r3
 801cc7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cc82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cc86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc88:	4413      	add	r3, r2
 801cc8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cc8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	f47f af19 	bne.w	801caca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	e002      	b.n	801cca2 <ip4_frag+0x26a>
      goto memerr;
 801cc9c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cc9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3748      	adds	r7, #72	@ 0x48
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}
 801ccaa:	bf00      	nop
 801ccac:	08021950 	.word	0x08021950
 801ccb0:	08021b2c 	.word	0x08021b2c
 801ccb4:	08021998 	.word	0x08021998
 801ccb8:	08021b48 	.word	0x08021b48
 801ccbc:	08021b68 	.word	0x08021b68
 801ccc0:	0801c9d1 	.word	0x0801c9d1

0801ccc4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b086      	sub	sp, #24
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ccce:	230e      	movs	r3, #14
 801ccd0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	895b      	ldrh	r3, [r3, #10]
 801ccd6:	2b0e      	cmp	r3, #14
 801ccd8:	d96e      	bls.n	801cdb8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	7bdb      	ldrb	r3, [r3, #15]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d106      	bne.n	801ccf0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cce8:	3301      	adds	r3, #1
 801ccea:	b2da      	uxtb	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	685b      	ldr	r3, [r3, #4]
 801ccf4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	7b1a      	ldrb	r2, [r3, #12]
 801ccfa:	7b5b      	ldrb	r3, [r3, #13]
 801ccfc:	021b      	lsls	r3, r3, #8
 801ccfe:	4313      	orrs	r3, r2
 801cd00:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801cd02:	693b      	ldr	r3, [r7, #16]
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	f003 0301 	and.w	r3, r3, #1
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d023      	beq.n	801cd56 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801cd0e:	693b      	ldr	r3, [r7, #16]
 801cd10:	781b      	ldrb	r3, [r3, #0]
 801cd12:	2b01      	cmp	r3, #1
 801cd14:	d10f      	bne.n	801cd36 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cd16:	693b      	ldr	r3, [r7, #16]
 801cd18:	785b      	ldrb	r3, [r3, #1]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d11b      	bne.n	801cd56 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801cd1e:	693b      	ldr	r3, [r7, #16]
 801cd20:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cd22:	2b5e      	cmp	r3, #94	@ 0x5e
 801cd24:	d117      	bne.n	801cd56 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	7b5b      	ldrb	r3, [r3, #13]
 801cd2a:	f043 0310 	orr.w	r3, r3, #16
 801cd2e:	b2da      	uxtb	r2, r3
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	735a      	strb	r2, [r3, #13]
 801cd34:	e00f      	b.n	801cd56 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cd36:	693b      	ldr	r3, [r7, #16]
 801cd38:	2206      	movs	r2, #6
 801cd3a:	4928      	ldr	r1, [pc, #160]	@ (801cddc <ethernet_input+0x118>)
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	f001 fa8f 	bl	801e260 <memcmp>
 801cd42:	4603      	mov	r3, r0
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d106      	bne.n	801cd56 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	7b5b      	ldrb	r3, [r3, #13]
 801cd4c:	f043 0308 	orr.w	r3, r3, #8
 801cd50:	b2da      	uxtb	r2, r3
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cd56:	89fb      	ldrh	r3, [r7, #14]
 801cd58:	2b08      	cmp	r3, #8
 801cd5a:	d003      	beq.n	801cd64 <ethernet_input+0xa0>
 801cd5c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cd60:	d014      	beq.n	801cd8c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cd62:	e032      	b.n	801cdca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd64:	683b      	ldr	r3, [r7, #0]
 801cd66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd6a:	f003 0308 	and.w	r3, r3, #8
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d024      	beq.n	801cdbc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd72:	8afb      	ldrh	r3, [r7, #22]
 801cd74:	4619      	mov	r1, r3
 801cd76:	6878      	ldr	r0, [r7, #4]
 801cd78:	f7f7 fb4a 	bl	8014410 <pbuf_remove_header>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d11e      	bne.n	801cdc0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cd82:	6839      	ldr	r1, [r7, #0]
 801cd84:	6878      	ldr	r0, [r7, #4]
 801cd86:	f7fe ff21 	bl	801bbcc <ip4_input>
      break;
 801cd8a:	e013      	b.n	801cdb4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd8c:	683b      	ldr	r3, [r7, #0]
 801cd8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd92:	f003 0308 	and.w	r3, r3, #8
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d014      	beq.n	801cdc4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd9a:	8afb      	ldrh	r3, [r7, #22]
 801cd9c:	4619      	mov	r1, r3
 801cd9e:	6878      	ldr	r0, [r7, #4]
 801cda0:	f7f7 fb36 	bl	8014410 <pbuf_remove_header>
 801cda4:	4603      	mov	r3, r0
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d10e      	bne.n	801cdc8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cdaa:	6839      	ldr	r1, [r7, #0]
 801cdac:	6878      	ldr	r0, [r7, #4]
 801cdae:	f7fe f8c1 	bl	801af34 <etharp_input>
      break;
 801cdb2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	e00c      	b.n	801cdd2 <ethernet_input+0x10e>
    goto free_and_return;
 801cdb8:	bf00      	nop
 801cdba:	e006      	b.n	801cdca <ethernet_input+0x106>
        goto free_and_return;
 801cdbc:	bf00      	nop
 801cdbe:	e004      	b.n	801cdca <ethernet_input+0x106>
        goto free_and_return;
 801cdc0:	bf00      	nop
 801cdc2:	e002      	b.n	801cdca <ethernet_input+0x106>
        goto free_and_return;
 801cdc4:	bf00      	nop
 801cdc6:	e000      	b.n	801cdca <ethernet_input+0x106>
        goto free_and_return;
 801cdc8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cdca:	6878      	ldr	r0, [r7, #4]
 801cdcc:	f7f7 fba6 	bl	801451c <pbuf_free>
  return ERR_OK;
 801cdd0:	2300      	movs	r3, #0
}
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	3718      	adds	r7, #24
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	bd80      	pop	{r7, pc}
 801cdda:	bf00      	nop
 801cddc:	080222ec 	.word	0x080222ec

0801cde0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cde0:	b580      	push	{r7, lr}
 801cde2:	b086      	sub	sp, #24
 801cde4:	af00      	add	r7, sp, #0
 801cde6:	60f8      	str	r0, [r7, #12]
 801cde8:	60b9      	str	r1, [r7, #8]
 801cdea:	607a      	str	r2, [r7, #4]
 801cdec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cdee:	8c3b      	ldrh	r3, [r7, #32]
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7f5 ffa5 	bl	8012d40 <lwip_htons>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cdfa:	210e      	movs	r1, #14
 801cdfc:	68b8      	ldr	r0, [r7, #8]
 801cdfe:	f7f7 faf7 	bl	80143f0 <pbuf_add_header>
 801ce02:	4603      	mov	r3, r0
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d125      	bne.n	801ce54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ce08:	68bb      	ldr	r3, [r7, #8]
 801ce0a:	685b      	ldr	r3, [r3, #4]
 801ce0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ce0e:	693b      	ldr	r3, [r7, #16]
 801ce10:	8afa      	ldrh	r2, [r7, #22]
 801ce12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ce14:	693b      	ldr	r3, [r7, #16]
 801ce16:	2206      	movs	r2, #6
 801ce18:	6839      	ldr	r1, [r7, #0]
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	f001 fb03 	bl	801e426 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ce20:	693b      	ldr	r3, [r7, #16]
 801ce22:	3306      	adds	r3, #6
 801ce24:	2206      	movs	r2, #6
 801ce26:	6879      	ldr	r1, [r7, #4]
 801ce28:	4618      	mov	r0, r3
 801ce2a:	f001 fafc 	bl	801e426 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ce34:	2b06      	cmp	r3, #6
 801ce36:	d006      	beq.n	801ce46 <ethernet_output+0x66>
 801ce38:	4b0a      	ldr	r3, [pc, #40]	@ (801ce64 <ethernet_output+0x84>)
 801ce3a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ce3e:	490a      	ldr	r1, [pc, #40]	@ (801ce68 <ethernet_output+0x88>)
 801ce40:	480a      	ldr	r0, [pc, #40]	@ (801ce6c <ethernet_output+0x8c>)
 801ce42:	f001 f8c5 	bl	801dfd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	699b      	ldr	r3, [r3, #24]
 801ce4a:	68b9      	ldr	r1, [r7, #8]
 801ce4c:	68f8      	ldr	r0, [r7, #12]
 801ce4e:	4798      	blx	r3
 801ce50:	4603      	mov	r3, r0
 801ce52:	e002      	b.n	801ce5a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ce54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ce56:	f06f 0301 	mvn.w	r3, #1
}
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	3718      	adds	r7, #24
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	bd80      	pop	{r7, pc}
 801ce62:	bf00      	nop
 801ce64:	08021b78 	.word	0x08021b78
 801ce68:	08021bb0 	.word	0x08021bb0
 801ce6c:	08021be4 	.word	0x08021be4

0801ce70 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b082      	sub	sp, #8
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
 801ce78:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	2104      	movs	r1, #4
 801ce80:	4618      	mov	r0, r3
 801ce82:	f7f2 f8ed 	bl	800f060 <osMessageQueueNew>
 801ce86:	4602      	mov	r2, r0
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d102      	bne.n	801ce9a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ce94:	f04f 33ff 	mov.w	r3, #4294967295
 801ce98:	e000      	b.n	801ce9c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ce9a:	2300      	movs	r3, #0
}
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	3708      	adds	r7, #8
 801cea0:	46bd      	mov	sp, r7
 801cea2:	bd80      	pop	{r7, pc}

0801cea4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b084      	sub	sp, #16
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	6078      	str	r0, [r7, #4]
 801ceac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	6818      	ldr	r0, [r3, #0]
 801ceb2:	4639      	mov	r1, r7
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	2200      	movs	r2, #0
 801ceb8:	f7f2 f958 	bl	800f16c <osMessageQueuePut>
 801cebc:	4603      	mov	r3, r0
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d102      	bne.n	801cec8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801cec2:	2300      	movs	r3, #0
 801cec4:	73fb      	strb	r3, [r7, #15]
 801cec6:	e001      	b.n	801cecc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801cec8:	23ff      	movs	r3, #255	@ 0xff
 801ceca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801cecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ced0:	4618      	mov	r0, r3
 801ced2:	3710      	adds	r7, #16
 801ced4:	46bd      	mov	sp, r7
 801ced6:	bd80      	pop	{r7, pc}

0801ced8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b086      	sub	sp, #24
 801cedc:	af00      	add	r7, sp, #0
 801cede:	60f8      	str	r0, [r7, #12]
 801cee0:	60b9      	str	r1, [r7, #8]
 801cee2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801cee4:	f7f1 fd1e 	bl	800e924 <osKernelGetTickCount>
 801cee8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d013      	beq.n	801cf18 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	6818      	ldr	r0, [r3, #0]
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	2200      	movs	r2, #0
 801cef8:	68b9      	ldr	r1, [r7, #8]
 801cefa:	f7f2 f9ab 	bl	800f254 <osMessageQueueGet>
 801cefe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cf00:	693b      	ldr	r3, [r7, #16]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d105      	bne.n	801cf12 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801cf06:	f7f1 fd0d 	bl	800e924 <osKernelGetTickCount>
 801cf0a:	4602      	mov	r2, r0
 801cf0c:	697b      	ldr	r3, [r7, #20]
 801cf0e:	1ad3      	subs	r3, r2, r3
 801cf10:	e00f      	b.n	801cf32 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cf12:	f04f 33ff 	mov.w	r3, #4294967295
 801cf16:	e00c      	b.n	801cf32 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	6818      	ldr	r0, [r3, #0]
 801cf1c:	f04f 33ff 	mov.w	r3, #4294967295
 801cf20:	2200      	movs	r2, #0
 801cf22:	68b9      	ldr	r1, [r7, #8]
 801cf24:	f7f2 f996 	bl	800f254 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cf28:	f7f1 fcfc 	bl	800e924 <osKernelGetTickCount>
 801cf2c:	4602      	mov	r2, r0
 801cf2e:	697b      	ldr	r3, [r7, #20]
 801cf30:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cf32:	4618      	mov	r0, r3
 801cf34:	3718      	adds	r7, #24
 801cf36:	46bd      	mov	sp, r7
 801cf38:	bd80      	pop	{r7, pc}

0801cf3a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cf3a:	b480      	push	{r7}
 801cf3c:	b083      	sub	sp, #12
 801cf3e:	af00      	add	r7, sp, #0
 801cf40:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d101      	bne.n	801cf4e <sys_mbox_valid+0x14>
    return 0;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	e000      	b.n	801cf50 <sys_mbox_valid+0x16>
  else
    return 1;
 801cf4e:	2301      	movs	r3, #1
}
 801cf50:	4618      	mov	r0, r3
 801cf52:	370c      	adds	r7, #12
 801cf54:	46bd      	mov	sp, r7
 801cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5a:	4770      	bx	lr

0801cf5c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801cf60:	2000      	movs	r0, #0
 801cf62:	f7f1 fddb 	bl	800eb1c <osMutexNew>
 801cf66:	4603      	mov	r3, r0
 801cf68:	4a01      	ldr	r2, [pc, #4]	@ (801cf70 <sys_init+0x14>)
 801cf6a:	6013      	str	r3, [r2, #0]
#endif
}
 801cf6c:	bf00      	nop
 801cf6e:	bd80      	pop	{r7, pc}
 801cf70:	2002790c 	.word	0x2002790c

0801cf74 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b082      	sub	sp, #8
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cf7c:	2000      	movs	r0, #0
 801cf7e:	f7f1 fdcd 	bl	800eb1c <osMutexNew>
 801cf82:	4602      	mov	r2, r0
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d102      	bne.n	801cf96 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cf90:	f04f 33ff 	mov.w	r3, #4294967295
 801cf94:	e000      	b.n	801cf98 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cf96:	2300      	movs	r3, #0
}
 801cf98:	4618      	mov	r0, r3
 801cf9a:	3708      	adds	r7, #8
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd80      	pop	{r7, pc}

0801cfa0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b082      	sub	sp, #8
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	f04f 31ff 	mov.w	r1, #4294967295
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	f7f1 fe4d 	bl	800ec50 <osMutexAcquire>
#endif
}
 801cfb6:	bf00      	nop
 801cfb8:	3708      	adds	r7, #8
 801cfba:	46bd      	mov	sp, r7
 801cfbc:	bd80      	pop	{r7, pc}

0801cfbe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cfbe:	b580      	push	{r7, lr}
 801cfc0:	b082      	sub	sp, #8
 801cfc2:	af00      	add	r7, sp, #0
 801cfc4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f7f1 fe9e 	bl	800ed0c <osMutexRelease>
}
 801cfd0:	bf00      	nop
 801cfd2:	3708      	adds	r7, #8
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}

0801cfd8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	b08e      	sub	sp, #56	@ 0x38
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	60f8      	str	r0, [r7, #12]
 801cfe0:	60b9      	str	r1, [r7, #8]
 801cfe2:	607a      	str	r2, [r7, #4]
 801cfe4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cfe6:	f107 0314 	add.w	r3, r7, #20
 801cfea:	2224      	movs	r2, #36	@ 0x24
 801cfec:	2100      	movs	r1, #0
 801cfee:	4618      	mov	r0, r3
 801cff0:	f001 f946 	bl	801e280 <memset>
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	617b      	str	r3, [r7, #20]
 801cff8:	683b      	ldr	r3, [r7, #0]
 801cffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d000:	f107 0314 	add.w	r3, r7, #20
 801d004:	461a      	mov	r2, r3
 801d006:	6879      	ldr	r1, [r7, #4]
 801d008:	68b8      	ldr	r0, [r7, #8]
 801d00a:	f7f1 fcb3 	bl	800e974 <osThreadNew>
 801d00e:	4603      	mov	r3, r0
#endif
}
 801d010:	4618      	mov	r0, r3
 801d012:	3738      	adds	r7, #56	@ 0x38
 801d014:	46bd      	mov	sp, r7
 801d016:	bd80      	pop	{r7, pc}

0801d018 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d01c:	4b04      	ldr	r3, [pc, #16]	@ (801d030 <sys_arch_protect+0x18>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	f04f 31ff 	mov.w	r1, #4294967295
 801d024:	4618      	mov	r0, r3
 801d026:	f7f1 fe13 	bl	800ec50 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d02a:	2301      	movs	r3, #1
}
 801d02c:	4618      	mov	r0, r3
 801d02e:	bd80      	pop	{r7, pc}
 801d030:	2002790c 	.word	0x2002790c

0801d034 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b082      	sub	sp, #8
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d03c:	4b04      	ldr	r3, [pc, #16]	@ (801d050 <sys_arch_unprotect+0x1c>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	4618      	mov	r0, r3
 801d042:	f7f1 fe63 	bl	800ed0c <osMutexRelease>
}
 801d046:	bf00      	nop
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}
 801d04e:	bf00      	nop
 801d050:	2002790c 	.word	0x2002790c

0801d054 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result adc_testing(test_command_t* command){
 801d054:	b580      	push	{r7, lr}
 801d056:	b088      	sub	sp, #32
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d102      	bne.n	801d068 <adc_testing+0x14>
//        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d062:	f04f 33ff 	mov.w	r3, #4294967295
 801d066:	e087      	b.n	801d178 <adc_testing+0x124>
	}
	uint32_t expected_adc_result = command->bit_pattern[0];
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	79db      	ldrb	r3, [r3, #7]
 801d06c:	61fb      	str	r3, [r7, #28]
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d06e:	69fb      	ldr	r3, [r7, #28]
 801d070:	ee07 3a90 	vmov	s15, r3
 801d074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d078:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 801d180 <adc_testing+0x12c>
 801d07c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d084:	ee17 3a90 	vmov	r3, s15
 801d088:	61bb      	str	r3, [r7, #24]

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801d08a:	2100      	movs	r1, #0
 801d08c:	483d      	ldr	r0, [pc, #244]	@ (801d184 <adc_testing+0x130>)
 801d08e:	f7e6 fc15 	bl	80038bc <HAL_DAC_Start>
 801d092:	4603      	mov	r3, r0
 801d094:	75bb      	strb	r3, [r7, #22]
    if (status != HAL_OK) {
 801d096:	7dbb      	ldrb	r3, [r7, #22]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d001      	beq.n	801d0a0 <adc_testing+0x4c>
//        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status); // Debug printf
        return TEST_FAIL;
 801d09c:	23ff      	movs	r3, #255	@ 0xff
 801d09e:	e06b      	b.n	801d178 <adc_testing+0x124>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	75fb      	strb	r3, [r7, #23]
 801d0a4:	e062      	b.n	801d16c <adc_testing+0x118>

		if(i < command->bit_pattern_length){
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	799b      	ldrb	r3, [r3, #6]
 801d0aa:	7dfa      	ldrb	r2, [r7, #23]
 801d0ac:	429a      	cmp	r2, r3
 801d0ae:	d214      	bcs.n	801d0da <adc_testing+0x86>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801d0b0:	7dfb      	ldrb	r3, [r7, #23]
 801d0b2:	687a      	ldr	r2, [r7, #4]
 801d0b4:	4413      	add	r3, r2
 801d0b6:	79db      	ldrb	r3, [r3, #7]
 801d0b8:	61fb      	str	r3, [r7, #28]
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d0ba:	69fb      	ldr	r3, [r7, #28]
 801d0bc:	ee07 3a90 	vmov	s15, r3
 801d0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0c4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801d180 <adc_testing+0x12c>
 801d0c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d0d0:	edc7 7a00 	vstr	s15, [r7]
 801d0d4:	783b      	ldrb	r3, [r7, #0]
 801d0d6:	b2db      	uxtb	r3, r3
 801d0d8:	61bb      	str	r3, [r7, #24]
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801d0da:	69fb      	ldr	r3, [r7, #28]
 801d0dc:	2208      	movs	r2, #8
 801d0de:	2100      	movs	r1, #0
 801d0e0:	4828      	ldr	r0, [pc, #160]	@ (801d184 <adc_testing+0x130>)
 801d0e2:	f7e6 fc98 	bl	8003a16 <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801d0e6:	2001      	movs	r0, #1
 801d0e8:	f7e5 fba4 	bl	8002834 <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801d0ec:	4826      	ldr	r0, [pc, #152]	@ (801d188 <adc_testing+0x134>)
 801d0ee:	f7e5 fc3d 	bl	800296c <HAL_ADC_Start_IT>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d0f6:	7dbb      	ldrb	r3, [r7, #22]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d004      	beq.n	801d106 <adc_testing+0xb2>
//	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status); // Debug printf
	    	HAL_ADC_Stop(&hadc1);
 801d0fc:	4822      	ldr	r0, [pc, #136]	@ (801d188 <adc_testing+0x134>)
 801d0fe:	f7e5 fc01 	bl	8002904 <HAL_ADC_Stop>
	        return TEST_FAIL;
 801d102:	23ff      	movs	r3, #255	@ 0xff
 801d104:	e038      	b.n	801d178 <adc_testing+0x124>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801d106:	4b21      	ldr	r3, [pc, #132]	@ (801d18c <adc_testing+0x138>)
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	f04f 31ff 	mov.w	r1, #4294967295
 801d10e:	4618      	mov	r0, r3
 801d110:	f7f2 ffb4 	bl	801007c <xQueueSemaphoreTake>
 801d114:	4603      	mov	r3, r0
 801d116:	2b01      	cmp	r3, #1
 801d118:	d111      	bne.n	801d13e <adc_testing+0xea>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801d11a:	481b      	ldr	r0, [pc, #108]	@ (801d188 <adc_testing+0x134>)
 801d11c:	f7e5 fe0e 	bl	8002d3c <HAL_ADC_GetValue>
 801d120:	6138      	str	r0, [r7, #16]
	         HAL_ADC_Stop(&hadc1);
	         return TEST_FAIL;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801d122:	693a      	ldr	r2, [r7, #16]
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	1ad3      	subs	r3, r2, r3
 801d128:	60fb      	str	r3, [r7, #12]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	bfb8      	it	lt
 801d130:	425b      	neglt	r3, r3
 801d132:	60fb      	str	r3, [r7, #12]

		if (difference > adc_tolerance)
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	69ba      	ldr	r2, [r7, #24]
 801d138:	429a      	cmp	r2, r3
 801d13a:	d20a      	bcs.n	801d152 <adc_testing+0xfe>
 801d13c:	e004      	b.n	801d148 <adc_testing+0xf4>
	         HAL_ADC_Stop(&hadc1);
 801d13e:	4812      	ldr	r0, [pc, #72]	@ (801d188 <adc_testing+0x134>)
 801d140:	f7e5 fbe0 	bl	8002904 <HAL_ADC_Stop>
	         return TEST_FAIL;
 801d144:	23ff      	movs	r3, #255	@ 0xff
 801d146:	e017      	b.n	801d178 <adc_testing+0x124>
		{
//			  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value); // Debug printf
			  HAL_ADC_Stop(&hadc1);
 801d148:	480f      	ldr	r0, [pc, #60]	@ (801d188 <adc_testing+0x134>)
 801d14a:	f7e5 fbdb 	bl	8002904 <HAL_ADC_Stop>
			  return TEST_FAIL;
 801d14e:	23ff      	movs	r3, #255	@ 0xff
 801d150:	e012      	b.n	801d178 <adc_testing+0x124>
//				// Debug printf
//			  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
//			  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801d152:	480d      	ldr	r0, [pc, #52]	@ (801d188 <adc_testing+0x134>)
 801d154:	f7e5 fbd6 	bl	8002904 <HAL_ADC_Stop>
 801d158:	4603      	mov	r3, r0
 801d15a:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d15c:	7dbb      	ldrb	r3, [r7, #22]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d001      	beq.n	801d166 <adc_testing+0x112>
//			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status); // Debug printf
	         return TEST_FAIL;
 801d162:	23ff      	movs	r3, #255	@ 0xff
 801d164:	e008      	b.n	801d178 <adc_testing+0x124>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d166:	7dfb      	ldrb	r3, [r7, #23]
 801d168:	3301      	adds	r3, #1
 801d16a:	75fb      	strb	r3, [r7, #23]
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	795b      	ldrb	r3, [r3, #5]
 801d170:	7dfa      	ldrb	r2, [r7, #23]
 801d172:	429a      	cmp	r2, r3
 801d174:	d397      	bcc.n	801d0a6 <adc_testing+0x52>
		}
	} // end of iterations

	return TEST_PASS;
 801d176:	2301      	movs	r3, #1
}
 801d178:	4618      	mov	r0, r3
 801d17a:	3720      	adds	r7, #32
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}
 801d180:	3dcccccd 	.word	0x3dcccccd
 801d184:	20000254 	.word	0x20000254
 801d188:	200001e8 	.word	0x200001e8
 801d18c:	20000dc4 	.word	0x20000dc4

0801d190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b084      	sub	sp, #16
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d198:	2300      	movs	r3, #0
 801d19a:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801d19c:	4b0b      	ldr	r3, [pc, #44]	@ (801d1cc <HAL_ADC_ConvCpltCallback+0x3c>)
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	f107 020c 	add.w	r2, r7, #12
 801d1a4:	4611      	mov	r1, r2
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f7f2 fde7 	bl	800fd7a <xQueueGiveFromISR>
//	printf("ADC complete callback fired and gave a semaphore\n\r"); // Debug printf
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d007      	beq.n	801d1c2 <HAL_ADC_ConvCpltCallback+0x32>
 801d1b2:	4b07      	ldr	r3, [pc, #28]	@ (801d1d0 <HAL_ADC_ConvCpltCallback+0x40>)
 801d1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d1b8:	601a      	str	r2, [r3, #0]
 801d1ba:	f3bf 8f4f 	dsb	sy
 801d1be:	f3bf 8f6f 	isb	sy
}
 801d1c2:	bf00      	nop
 801d1c4:	3710      	adds	r7, #16
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	bd80      	pop	{r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	20000dc4 	.word	0x20000dc4
 801d1d0:	e000ed04 	.word	0xe000ed04

0801d1d4 <i2c_testing>:
/*
 * @brief Performs a test on the I2C peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result i2c_testing(test_command_t* command){
 801d1d4:	b580      	push	{r7, lr}
 801d1d6:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801d1da:	af00      	add	r7, sp, #0
 801d1dc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1e4:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1e6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1f4:	461a      	mov	r2, r3
 801d1f6:	2100      	movs	r1, #0
 801d1f8:	f001 f842 	bl	801e280 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1fc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d200:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d204:	4618      	mov	r0, r3
 801d206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d20a:	461a      	mov	r2, r3
 801d20c:	2100      	movs	r1, #0
 801d20e:	f001 f837 	bl	801e280 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d212:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d216:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801d21a:	4618      	mov	r0, r3
 801d21c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d220:	461a      	mov	r2, r3
 801d222:	2100      	movs	r1, #0
 801d224:	f001 f82c 	bl	801e280 <memset>

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d228:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d22c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d102      	bne.n	801d23c <i2c_testing+0x68>
//        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d236:	f04f 33ff 	mov.w	r3, #4294967295
 801d23a:	e128      	b.n	801d48e <i2c_testing+0x2ba>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d23c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d240:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	1dd9      	adds	r1, r3, #7
 801d248:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d24c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	799b      	ldrb	r3, [r3, #6]
 801d254:	461a      	mov	r2, r3
 801d256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d25a:	4618      	mov	r0, r3
 801d25c:	f001 f8e3 	bl	801e426 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d260:	2300      	movs	r3, #0
 801d262:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d266:	e106      	b.n	801d476 <i2c_testing+0x2a2>
//	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d268:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d26c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	799b      	ldrb	r3, [r3, #6]
 801d274:	461a      	mov	r2, r3
 801d276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d27a:	2100      	movs	r1, #0
 801d27c:	4618      	mov	r0, r3
 801d27e:	f000 ffff 	bl	801e280 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d282:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d286:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	799b      	ldrb	r3, [r3, #6]
 801d28e:	461a      	mov	r2, r3
 801d290:	f107 0308 	add.w	r3, r7, #8
 801d294:	4619      	mov	r1, r3
 801d296:	4880      	ldr	r0, [pc, #512]	@ (801d498 <i2c_testing+0x2c4>)
 801d298:	f7e9 f91a 	bl	80064d0 <HAL_I2C_Slave_Receive_DMA>
 801d29c:	4603      	mov	r3, r0
 801d29e:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d2a2:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d007      	beq.n	801d2ba <i2c_testing+0xe6>
	        printf("Failed to start slave receive DMA: %d\n\r", status); // Debug printf
 801d2aa:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2ae:	4619      	mov	r1, r3
 801d2b0:	487a      	ldr	r0, [pc, #488]	@ (801d49c <i2c_testing+0x2c8>)
 801d2b2:	f000 fe8d 	bl	801dfd0 <iprintf>
	        return TEST_FAIL;
 801d2b6:	23ff      	movs	r3, #255	@ 0xff
 801d2b8:	e0e9      	b.n	801d48e <i2c_testing+0x2ba>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801d2ba:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2be:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	799b      	ldrb	r3, [r3, #6]
 801d2c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801d2ca:	21f0      	movs	r1, #240	@ 0xf0
 801d2cc:	4874      	ldr	r0, [pc, #464]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d2ce:	f7e8 ffeb 	bl	80062a8 <HAL_I2C_Master_Transmit_DMA>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d2d8:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d00d      	beq.n	801d2fc <i2c_testing+0x128>
	        printf("Failed to send DMA on I2C sender: %d\n\r", status); // Debug printf
 801d2e0:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2e4:	4619      	mov	r1, r3
 801d2e6:	486f      	ldr	r0, [pc, #444]	@ (801d4a4 <i2c_testing+0x2d0>)
 801d2e8:	f000 fe72 	bl	801dfd0 <iprintf>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801d2ec:	486c      	ldr	r0, [pc, #432]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d2ee:	f000 f93d 	bl	801d56c <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d2f2:	4869      	ldr	r0, [pc, #420]	@ (801d498 <i2c_testing+0x2c4>)
 801d2f4:	f000 f93a 	bl	801d56c <i2c_reset>
	        return TEST_FAIL;
 801d2f8:	23ff      	movs	r3, #255	@ 0xff
 801d2fa:	e0c8      	b.n	801d48e <i2c_testing+0x2ba>
	    }

	    // --- 3. WAIT FOR BOTH TX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801d2fc:	4b6a      	ldr	r3, [pc, #424]	@ (801d4a8 <i2c_testing+0x2d4>)
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d304:	4618      	mov	r0, r3
 801d306:	f7f2 feb9 	bl	801007c <xQueueSemaphoreTake>
 801d30a:	4603      	mov	r3, r0
 801d30c:	2b01      	cmp	r3, #1
 801d30e:	d00a      	beq.n	801d326 <i2c_testing+0x152>
	         printf("Master TX timeout\n\r"); // Debug printf
 801d310:	4866      	ldr	r0, [pc, #408]	@ (801d4ac <i2c_testing+0x2d8>)
 801d312:	f000 fe5d 	bl	801dfd0 <iprintf>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d316:	4862      	ldr	r0, [pc, #392]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d318:	f000 f928 	bl	801d56c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d31c:	485e      	ldr	r0, [pc, #376]	@ (801d498 <i2c_testing+0x2c4>)
 801d31e:	f000 f925 	bl	801d56c <i2c_reset>
	         return TEST_FAIL;
 801d322:	23ff      	movs	r3, #255	@ 0xff
 801d324:	e0b3      	b.n	801d48e <i2c_testing+0x2ba>
	    }
        else
        {
        	HAL_Delay(1);
 801d326:	2001      	movs	r0, #1
 801d328:	f7e5 fa84 	bl	8002834 <HAL_Delay>

        	status = HAL_I2C_Slave_Transmit_IT(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d32c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d330:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	799b      	ldrb	r3, [r3, #6]
 801d338:	461a      	mov	r2, r3
 801d33a:	f107 0308 	add.w	r3, r7, #8
 801d33e:	4619      	mov	r1, r3
 801d340:	4855      	ldr	r0, [pc, #340]	@ (801d498 <i2c_testing+0x2c4>)
 801d342:	f7e8 ff43 	bl	80061cc <HAL_I2C_Slave_Transmit_IT>
 801d346:	4603      	mov	r3, r0
 801d348:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			 if (status != HAL_OK){
 801d34c:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d350:	2b00      	cmp	r3, #0
 801d352:	d00d      	beq.n	801d370 <i2c_testing+0x19c>
				 printf("Failed to echo send on I2C receiver: %d\n\r", status);
 801d354:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d358:	4619      	mov	r1, r3
 801d35a:	4855      	ldr	r0, [pc, #340]	@ (801d4b0 <i2c_testing+0x2dc>)
 801d35c:	f000 fe38 	bl	801dfd0 <iprintf>
				 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d360:	484f      	ldr	r0, [pc, #316]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d362:	f000 f903 	bl	801d56c <i2c_reset>
				 i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d366:	484c      	ldr	r0, [pc, #304]	@ (801d498 <i2c_testing+0x2c4>)
 801d368:	f000 f900 	bl	801d56c <i2c_reset>
				 return TEST_FAIL;
 801d36c:	23ff      	movs	r3, #255	@ 0xff
 801d36e:	e08e      	b.n	801d48e <i2c_testing+0x2ba>
			 }
        	// Arm sender receive before receiver transmits back
			 status = HAL_I2C_Master_Receive_IT(I2C_SENDER, I2C_SLAVE_ADDR, rx_buffer, command->bit_pattern_length);
 801d370:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d374:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	799b      	ldrb	r3, [r3, #6]
 801d37c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801d380:	21f0      	movs	r1, #240	@ 0xf0
 801d382:	4847      	ldr	r0, [pc, #284]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d384:	f7e8 feb2 	bl	80060ec <HAL_I2C_Master_Receive_IT>
 801d388:	4603      	mov	r3, r0
 801d38a:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			if (status != HAL_OK) {
 801d38e:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d392:	2b00      	cmp	r3, #0
 801d394:	d007      	beq.n	801d3a6 <i2c_testing+0x1d2>
				printf("Sender Failed to start receive back: %d\n\r", status);
 801d396:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d39a:	4619      	mov	r1, r3
 801d39c:	4845      	ldr	r0, [pc, #276]	@ (801d4b4 <i2c_testing+0x2e0>)
 801d39e:	f000 fe17 	bl	801dfd0 <iprintf>
				return TEST_FAIL;
 801d3a2:	23ff      	movs	r3, #255	@ 0xff
 801d3a4:	e073      	b.n	801d48e <i2c_testing+0x2ba>
			}

        }
	    //  WAIT FOR BOTH RX DMA COMPLETION
	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801d3a6:	4b44      	ldr	r3, [pc, #272]	@ (801d4b8 <i2c_testing+0x2e4>)
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7f2 fe64 	bl	801007c <xQueueSemaphoreTake>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	2b01      	cmp	r3, #1
 801d3b8:	d00a      	beq.n	801d3d0 <i2c_testing+0x1fc>
	         printf("Slave RX timeout\n\r"); // Debug printf
 801d3ba:	4840      	ldr	r0, [pc, #256]	@ (801d4bc <i2c_testing+0x2e8>)
 801d3bc:	f000 fe08 	bl	801dfd0 <iprintf>
			 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d3c0:	4837      	ldr	r0, [pc, #220]	@ (801d4a0 <i2c_testing+0x2cc>)
 801d3c2:	f000 f8d3 	bl	801d56c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d3c6:	4834      	ldr	r0, [pc, #208]	@ (801d498 <i2c_testing+0x2c4>)
 801d3c8:	f000 f8d0 	bl	801d56c <i2c_reset>
	         return TEST_FAIL;
 801d3cc:	23ff      	movs	r3, #255	@ 0xff
 801d3ce:	e05e      	b.n	801d48e <i2c_testing+0x2ba>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801d3d0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3d4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	799b      	ldrb	r3, [r3, #6]
 801d3dc:	2b64      	cmp	r3, #100	@ 0x64
 801d3de:	d925      	bls.n	801d42c <i2c_testing+0x258>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d3e0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3e4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	799b      	ldrb	r3, [r3, #6]
 801d3ec:	461a      	mov	r2, r3
 801d3ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d3f2:	4611      	mov	r1, r2
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7e3 fefd 	bl	80011f4 <calculate_crc>
 801d3fa:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d3fe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d402:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	799b      	ldrb	r3, [r3, #6]
 801d40a:	461a      	mov	r2, r3
 801d40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d410:	4611      	mov	r1, r2
 801d412:	4618      	mov	r0, r3
 801d414:	f7e3 feee 	bl	80011f4 <calculate_crc>
 801d418:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
	        if (sent_crc != received_crc) {
 801d41c:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801d420:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801d424:	429a      	cmp	r2, r3
 801d426:	d01e      	beq.n	801d466 <i2c_testing+0x292>
//	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            return TEST_FAIL;
 801d428:	23ff      	movs	r3, #255	@ 0xff
 801d42a:	e030      	b.n	801d48e <i2c_testing+0x2ba>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d42c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d430:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	799b      	ldrb	r3, [r3, #6]
 801d438:	461a      	mov	r2, r3
 801d43a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801d43e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d442:	4618      	mov	r0, r3
 801d444:	f000 ff0c 	bl	801e260 <memcmp>
 801d448:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
	        if (comp != 0) {
 801d44c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801d450:	2b00      	cmp	r3, #0
 801d452:	d008      	beq.n	801d466 <i2c_testing+0x292>
	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
 801d454:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d458:	3301      	adds	r3, #1
 801d45a:	4619      	mov	r1, r3
 801d45c:	4818      	ldr	r0, [pc, #96]	@ (801d4c0 <i2c_testing+0x2ec>)
 801d45e:	f000 fdb7 	bl	801dfd0 <iprintf>
	            return TEST_FAIL;
 801d462:	23ff      	movs	r3, #255	@ 0xff
 801d464:	e013      	b.n	801d48e <i2c_testing+0x2ba>
	        }
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10);
 801d466:	200a      	movs	r0, #10
 801d468:	f7f1 fb2a 	bl	800eac0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d46c:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d470:	3301      	adds	r3, #1
 801d472:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d476:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d47a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	795b      	ldrb	r3, [r3, #5]
 801d482:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801d486:	429a      	cmp	r2, r3
 801d488:	f4ff aeee 	bcc.w	801d268 <i2c_testing+0x94>
	}
    return TEST_PASS;
 801d48c:	2301      	movs	r3, #1
}
 801d48e:	4618      	mov	r0, r3
 801d490:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801d494:	46bd      	mov	sp, r7
 801d496:	bd80      	pop	{r7, pc}
 801d498:	20000268 	.word	0x20000268
 801d49c:	08021c0c 	.word	0x08021c0c
 801d4a0:	200002bc 	.word	0x200002bc
 801d4a4:	08021c34 	.word	0x08021c34
 801d4a8:	20000dbc 	.word	0x20000dbc
 801d4ac:	08021c5c 	.word	0x08021c5c
 801d4b0:	08021c70 	.word	0x08021c70
 801d4b4:	08021c9c 	.word	0x08021c9c
 801d4b8:	20000db8 	.word	0x20000db8
 801d4bc:	08021cc8 	.word	0x08021cc8
 801d4c0:	08021cdc 	.word	0x08021cdc

0801d4c4 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b084      	sub	sp, #16
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	681a      	ldr	r2, [r3, #0]
 801d4d4:	4b0d      	ldr	r3, [pc, #52]	@ (801d50c <HAL_I2C_MasterTxCpltCallback+0x48>)
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	429a      	cmp	r2, r3
 801d4da:	d107      	bne.n	801d4ec <HAL_I2C_MasterTxCpltCallback+0x28>
    {
//        printf("Master TX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801d4dc:	4b0c      	ldr	r3, [pc, #48]	@ (801d510 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	f107 020c 	add.w	r2, r7, #12
 801d4e4:	4611      	mov	r1, r2
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f7f2 fc47 	bl	800fd7a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d007      	beq.n	801d502 <HAL_I2C_MasterTxCpltCallback+0x3e>
 801d4f2:	4b08      	ldr	r3, [pc, #32]	@ (801d514 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801d4f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d4f8:	601a      	str	r2, [r3, #0]
 801d4fa:	f3bf 8f4f 	dsb	sy
 801d4fe:	f3bf 8f6f 	isb	sy
}
 801d502:	bf00      	nop
 801d504:	3710      	adds	r7, #16
 801d506:	46bd      	mov	sp, r7
 801d508:	bd80      	pop	{r7, pc}
 801d50a:	bf00      	nop
 801d50c:	200002bc 	.word	0x200002bc
 801d510:	20000dbc 	.word	0x20000dbc
 801d514:	e000ed04 	.word	0xe000ed04

0801d518 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b084      	sub	sp, #16
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d520:	2300      	movs	r3, #0
 801d522:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	681a      	ldr	r2, [r3, #0]
 801d528:	4b0d      	ldr	r3, [pc, #52]	@ (801d560 <HAL_I2C_MasterRxCpltCallback+0x48>)
 801d52a:	681b      	ldr	r3, [r3, #0]
 801d52c:	429a      	cmp	r2, r3
 801d52e:	d107      	bne.n	801d540 <HAL_I2C_MasterRxCpltCallback+0x28>
    {
//        printf("Master RX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801d530:	4b0c      	ldr	r3, [pc, #48]	@ (801d564 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	f107 020c 	add.w	r2, r7, #12
 801d538:	4611      	mov	r1, r2
 801d53a:	4618      	mov	r0, r3
 801d53c:	f7f2 fc1d 	bl	800fd7a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d007      	beq.n	801d556 <HAL_I2C_MasterRxCpltCallback+0x3e>
 801d546:	4b08      	ldr	r3, [pc, #32]	@ (801d568 <HAL_I2C_MasterRxCpltCallback+0x50>)
 801d548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d54c:	601a      	str	r2, [r3, #0]
 801d54e:	f3bf 8f4f 	dsb	sy
 801d552:	f3bf 8f6f 	isb	sy
}
 801d556:	bf00      	nop
 801d558:	3710      	adds	r7, #16
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bd80      	pop	{r7, pc}
 801d55e:	bf00      	nop
 801d560:	200002bc 	.word	0x200002bc
 801d564:	20000db8 	.word	0x20000db8
 801d568:	e000ed04 	.word	0xe000ed04

0801d56c <i2c_reset>:
// reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801d56c:	b580      	push	{r7, lr}
 801d56e:	b082      	sub	sp, #8
 801d570:	af00      	add	r7, sp, #0
 801d572:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f7e8 fd89 	bl	800608c <HAL_I2C_DeInit>
 801d57a:	4603      	mov	r3, r0
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d001      	beq.n	801d584 <i2c_reset+0x18>
        // Log a fatal error, the peripheral is in an unrecoverable state
        Error_Handler();
 801d580:	f7e3 ff44 	bl	800140c <Error_Handler>
//        printf("Failed to de-initialize I2C peripheral!\n\r"); // Debug printf
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801d584:	6878      	ldr	r0, [r7, #4]
 801d586:	f7e8 fce5 	bl	8005f54 <HAL_I2C_Init>
 801d58a:	4603      	mov	r3, r0
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d001      	beq.n	801d594 <i2c_reset+0x28>
        // Log a fatal error
        Error_Handler();
 801d590:	f7e3 ff3c 	bl	800140c <Error_Handler>
//        printf("Failed to re-initialize I2C peripheral!\n\r"); // Debug printf
    }
}
 801d594:	bf00      	nop
 801d596:	3708      	adds	r7, #8
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd80      	pop	{r7, pc}

0801d59c <spi_testing>:
/*
 * @brief Performs a test on the SPI peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result spi_testing(test_command_t* command){
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b086      	sub	sp, #24
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
//	static uint8_t echo_rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
//	static uint8_t echo_tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d105      	bne.n	801d5b6 <spi_testing+0x1a>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n");
 801d5aa:	488b      	ldr	r0, [pc, #556]	@ (801d7d8 <spi_testing+0x23c>)
 801d5ac:	f000 fd78 	bl	801e0a0 <puts>
        return TEST_ERR;
 801d5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b4:	e10b      	b.n	801d7ce <spi_testing+0x232>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	1dd9      	adds	r1, r3, #7
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	799b      	ldrb	r3, [r3, #6]
 801d5be:	461a      	mov	r2, r3
 801d5c0:	4886      	ldr	r0, [pc, #536]	@ (801d7dc <spi_testing+0x240>)
 801d5c2:	f000 ff30 	bl	801e426 <memcpy>

	for(uint8_t i = 0; i < command->iterations; i++)
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	75fb      	strb	r3, [r7, #23]
 801d5ca:	e0f9      	b.n	801d7c0 <spi_testing+0x224>
	{
	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801d5cc:	7dfb      	ldrb	r3, [r7, #23]
 801d5ce:	1c59      	adds	r1, r3, #1
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	795b      	ldrb	r3, [r3, #5]
 801d5d4:	461a      	mov	r2, r3
 801d5d6:	4882      	ldr	r0, [pc, #520]	@ (801d7e0 <spi_testing+0x244>)
 801d5d8:	f000 fcfa 	bl	801dfd0 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	799b      	ldrb	r3, [r3, #6]
 801d5e0:	461a      	mov	r2, r3
 801d5e2:	2100      	movs	r1, #0
 801d5e4:	487f      	ldr	r0, [pc, #508]	@ (801d7e4 <spi_testing+0x248>)
 801d5e6:	f000 fe4b 	bl	801e280 <memset>

	    HAL_SPI_Abort(SPI_SENDER);
 801d5ea:	487f      	ldr	r0, [pc, #508]	@ (801d7e8 <spi_testing+0x24c>)
 801d5ec:	f7ec fca0 	bl	8009f30 <HAL_SPI_Abort>
	    HAL_SPI_Abort(SPI_RECEIVER);
 801d5f0:	487e      	ldr	r0, [pc, #504]	@ (801d7ec <spi_testing+0x250>)
 801d5f2:	f7ec fc9d 	bl	8009f30 <HAL_SPI_Abort>

	    // 1. Prepare Slave for a Receive Operation
	    status = HAL_SPI_TransmitReceive_DMA(SPI_RECEIVER, echo_tx_buffer, echo_rx_buffer, command->bit_pattern_length);
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	799b      	ldrb	r3, [r3, #6]
 801d5fa:	4a7d      	ldr	r2, [pc, #500]	@ (801d7f0 <spi_testing+0x254>)
 801d5fc:	497d      	ldr	r1, [pc, #500]	@ (801d7f4 <spi_testing+0x258>)
 801d5fe:	487b      	ldr	r0, [pc, #492]	@ (801d7ec <spi_testing+0x250>)
 801d600:	f7ec fafc 	bl	8009bfc <HAL_SPI_TransmitReceive_DMA>
 801d604:	4603      	mov	r3, r0
 801d606:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d608:	7dbb      	ldrb	r3, [r7, #22]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d006      	beq.n	801d61c <spi_testing+0x80>
	        printf("Failed to start slave receive: %d\n\r", status);
 801d60e:	7dbb      	ldrb	r3, [r7, #22]
 801d610:	4619      	mov	r1, r3
 801d612:	4879      	ldr	r0, [pc, #484]	@ (801d7f8 <spi_testing+0x25c>)
 801d614:	f000 fcdc 	bl	801dfd0 <iprintf>
	        return TEST_FAIL;
 801d618:	23ff      	movs	r3, #255	@ 0xff
 801d61a:	e0d8      	b.n	801d7ce <spi_testing+0x232>
	    }

	    // 2. Master Transmits data
	    status = HAL_SPI_TransmitReceive_DMA(SPI_SENDER, tx_buffer, rx_buffer, command->bit_pattern_length);
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	799b      	ldrb	r3, [r3, #6]
 801d620:	4a70      	ldr	r2, [pc, #448]	@ (801d7e4 <spi_testing+0x248>)
 801d622:	496e      	ldr	r1, [pc, #440]	@ (801d7dc <spi_testing+0x240>)
 801d624:	4870      	ldr	r0, [pc, #448]	@ (801d7e8 <spi_testing+0x24c>)
 801d626:	f7ec fae9 	bl	8009bfc <HAL_SPI_TransmitReceive_DMA>
 801d62a:	4603      	mov	r3, r0
 801d62c:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d62e:	7dbb      	ldrb	r3, [r7, #22]
 801d630:	2b00      	cmp	r3, #0
 801d632:	d009      	beq.n	801d648 <spi_testing+0xac>
	        printf("Failed to start master transmit: %d\n\r", status);
 801d634:	7dbb      	ldrb	r3, [r7, #22]
 801d636:	4619      	mov	r1, r3
 801d638:	4870      	ldr	r0, [pc, #448]	@ (801d7fc <spi_testing+0x260>)
 801d63a:	f000 fcc9 	bl	801dfd0 <iprintf>
	        HAL_SPI_DMAStop(SPI_RECEIVER);
 801d63e:	486b      	ldr	r0, [pc, #428]	@ (801d7ec <spi_testing+0x250>)
 801d640:	f7ec fd96 	bl	800a170 <HAL_SPI_DMAStop>
	        return TEST_FAIL;
 801d644:	23ff      	movs	r3, #255	@ 0xff
 801d646:	e0c2      	b.n	801d7ce <spi_testing+0x232>
	    }

	    // 3. Wait for the Master's Transmit to complete
	    if (xSemaphoreTake(SpiTxHandle, TIMEOUT) != pdPASS) {
 801d648:	4b6d      	ldr	r3, [pc, #436]	@ (801d800 <spi_testing+0x264>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d650:	4618      	mov	r0, r3
 801d652:	f7f2 fd13 	bl	801007c <xQueueSemaphoreTake>
 801d656:	4603      	mov	r3, r0
 801d658:	2b01      	cmp	r3, #1
 801d65a:	d00a      	beq.n	801d672 <spi_testing+0xd6>
	         printf("Master TX timeout\n\r");
 801d65c:	4869      	ldr	r0, [pc, #420]	@ (801d804 <spi_testing+0x268>)
 801d65e:	f000 fcb7 	bl	801dfd0 <iprintf>
	         HAL_SPI_Abort(SPI_SENDER);
 801d662:	4861      	ldr	r0, [pc, #388]	@ (801d7e8 <spi_testing+0x24c>)
 801d664:	f7ec fc64 	bl	8009f30 <HAL_SPI_Abort>
	         HAL_SPI_Abort(SPI_RECEIVER);
 801d668:	4860      	ldr	r0, [pc, #384]	@ (801d7ec <spi_testing+0x250>)
 801d66a:	f7ec fc61 	bl	8009f30 <HAL_SPI_Abort>
		     return TEST_FAIL;
 801d66e:	23ff      	movs	r3, #255	@ 0xff
 801d670:	e0ad      	b.n	801d7ce <spi_testing+0x232>
	    else
	    {

	    }
	    // 4. Wait for the Slave's Receive to complete, which triggers its echo back
	    if (xSemaphoreTake(SpiSlaveRxHandle, TIMEOUT) != pdPASS) {
 801d672:	4b65      	ldr	r3, [pc, #404]	@ (801d808 <spi_testing+0x26c>)
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d67a:	4618      	mov	r0, r3
 801d67c:	f7f2 fcfe 	bl	801007c <xQueueSemaphoreTake>
 801d680:	4603      	mov	r3, r0
 801d682:	2b01      	cmp	r3, #1
 801d684:	d00a      	beq.n	801d69c <spi_testing+0x100>
	         printf("Slave RX timeout\n\r");
 801d686:	4861      	ldr	r0, [pc, #388]	@ (801d80c <spi_testing+0x270>)
 801d688:	f000 fca2 	bl	801dfd0 <iprintf>
	         HAL_SPI_Abort(SPI_SENDER);
 801d68c:	4856      	ldr	r0, [pc, #344]	@ (801d7e8 <spi_testing+0x24c>)
 801d68e:	f7ec fc4f 	bl	8009f30 <HAL_SPI_Abort>
	         HAL_SPI_Abort(SPI_RECEIVER);
 801d692:	4856      	ldr	r0, [pc, #344]	@ (801d7ec <spi_testing+0x250>)
 801d694:	f7ec fc4c 	bl	8009f30 <HAL_SPI_Abort>
	         return TEST_FAIL;
 801d698:	23ff      	movs	r3, #255	@ 0xff
 801d69a:	e098      	b.n	801d7ce <spi_testing+0x232>
	    }
	    else
	    {
	    	// 5. Now, prepare Master to Receive the Echoed data
		    status = HAL_SPI_Receive_DMA(SPI_SENDER, rx_buffer, command->bit_pattern_length);
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	799b      	ldrb	r3, [r3, #6]
 801d6a0:	461a      	mov	r2, r3
 801d6a2:	4950      	ldr	r1, [pc, #320]	@ (801d7e4 <spi_testing+0x248>)
 801d6a4:	4850      	ldr	r0, [pc, #320]	@ (801d7e8 <spi_testing+0x24c>)
 801d6a6:	f7ec f975 	bl	8009994 <HAL_SPI_Receive_DMA>
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) {
 801d6ae:	7dbb      	ldrb	r3, [r7, #22]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d00c      	beq.n	801d6ce <spi_testing+0x132>
		        printf("Failed to start master Rx: %d\n\r", status);
 801d6b4:	7dbb      	ldrb	r3, [r7, #22]
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	4855      	ldr	r0, [pc, #340]	@ (801d810 <spi_testing+0x274>)
 801d6ba:	f000 fc89 	bl	801dfd0 <iprintf>
		        HAL_SPI_Abort(SPI_SENDER);
 801d6be:	484a      	ldr	r0, [pc, #296]	@ (801d7e8 <spi_testing+0x24c>)
 801d6c0:	f7ec fc36 	bl	8009f30 <HAL_SPI_Abort>
		        HAL_SPI_Abort(SPI_RECEIVER);
 801d6c4:	4849      	ldr	r0, [pc, #292]	@ (801d7ec <spi_testing+0x250>)
 801d6c6:	f7ec fc33 	bl	8009f30 <HAL_SPI_Abort>
		        return TEST_FAIL;
 801d6ca:	23ff      	movs	r3, #255	@ 0xff
 801d6cc:	e07f      	b.n	801d7ce <spi_testing+0x232>
		    }
		    status = HAL_SPI_Transmit_DMA(SPI_RECEIVER, echo_tx_buffer, command->bit_pattern_length);
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	799b      	ldrb	r3, [r3, #6]
 801d6d2:	461a      	mov	r2, r3
 801d6d4:	4947      	ldr	r1, [pc, #284]	@ (801d7f4 <spi_testing+0x258>)
 801d6d6:	4845      	ldr	r0, [pc, #276]	@ (801d7ec <spi_testing+0x250>)
 801d6d8:	f7ec f858 	bl	800978c <HAL_SPI_Transmit_DMA>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) {
 801d6e0:	7dbb      	ldrb	r3, [r7, #22]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d00c      	beq.n	801d700 <spi_testing+0x164>
		        printf("Failed to start slave transmit: %d\n\r", status);
 801d6e6:	7dbb      	ldrb	r3, [r7, #22]
 801d6e8:	4619      	mov	r1, r3
 801d6ea:	484a      	ldr	r0, [pc, #296]	@ (801d814 <spi_testing+0x278>)
 801d6ec:	f000 fc70 	bl	801dfd0 <iprintf>
		        HAL_SPI_Abort(SPI_RECEIVER);
 801d6f0:	483e      	ldr	r0, [pc, #248]	@ (801d7ec <spi_testing+0x250>)
 801d6f2:	f7ec fc1d 	bl	8009f30 <HAL_SPI_Abort>
		        HAL_SPI_Abort(SPI_SENDER);
 801d6f6:	483c      	ldr	r0, [pc, #240]	@ (801d7e8 <spi_testing+0x24c>)
 801d6f8:	f7ec fc1a 	bl	8009f30 <HAL_SPI_Abort>
		        return TEST_FAIL;
 801d6fc:	23ff      	movs	r3, #255	@ 0xff
 801d6fe:	e066      	b.n	801d7ce <spi_testing+0x232>
		    }
	    }

	    // 6. Wait for Master's final Receive to complete
	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801d700:	4b45      	ldr	r3, [pc, #276]	@ (801d818 <spi_testing+0x27c>)
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d708:	4618      	mov	r0, r3
 801d70a:	f7f2 fcb7 	bl	801007c <xQueueSemaphoreTake>
 801d70e:	4603      	mov	r3, r0
 801d710:	2b01      	cmp	r3, #1
 801d712:	d00a      	beq.n	801d72a <spi_testing+0x18e>
	         printf("Master RX timeout\n\r");
 801d714:	4841      	ldr	r0, [pc, #260]	@ (801d81c <spi_testing+0x280>)
 801d716:	f000 fc5b 	bl	801dfd0 <iprintf>
	         HAL_SPI_Abort(SPI_SENDER);
 801d71a:	4833      	ldr	r0, [pc, #204]	@ (801d7e8 <spi_testing+0x24c>)
 801d71c:	f7ec fc08 	bl	8009f30 <HAL_SPI_Abort>
	         HAL_SPI_Abort(SPI_RECEIVER);
 801d720:	4832      	ldr	r0, [pc, #200]	@ (801d7ec <spi_testing+0x250>)
 801d722:	f7ec fc05 	bl	8009f30 <HAL_SPI_Abort>
	         return TEST_FAIL;
 801d726:	23ff      	movs	r3, #255	@ 0xff
 801d728:	e051      	b.n	801d7ce <spi_testing+0x232>
	    }

	    // 7. Compare Sent vs. Received data
	    if (command->bit_pattern_length > 100) {
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	799b      	ldrb	r3, [r3, #6]
 801d72e:	2b64      	cmp	r3, #100	@ 0x64
 801d730:	d919      	bls.n	801d766 <spi_testing+0x1ca>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	799b      	ldrb	r3, [r3, #6]
 801d736:	4619      	mov	r1, r3
 801d738:	4828      	ldr	r0, [pc, #160]	@ (801d7dc <spi_testing+0x240>)
 801d73a:	f7e3 fd5b 	bl	80011f4 <calculate_crc>
 801d73e:	60f8      	str	r0, [r7, #12]
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	799b      	ldrb	r3, [r3, #6]
 801d744:	4619      	mov	r1, r3
 801d746:	4827      	ldr	r0, [pc, #156]	@ (801d7e4 <spi_testing+0x248>)
 801d748:	f7e3 fd54 	bl	80011f4 <calculate_crc>
 801d74c:	60b8      	str	r0, [r7, #8]
	        if (sent_crc != received_crc) {
 801d74e:	68fa      	ldr	r2, [r7, #12]
 801d750:	68bb      	ldr	r3, [r7, #8]
 801d752:	429a      	cmp	r2, r3
 801d754:	d028      	beq.n	801d7a8 <spi_testing+0x20c>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801d756:	7dfb      	ldrb	r3, [r7, #23]
 801d758:	3301      	adds	r3, #1
 801d75a:	4619      	mov	r1, r3
 801d75c:	4830      	ldr	r0, [pc, #192]	@ (801d820 <spi_testing+0x284>)
 801d75e:	f000 fc37 	bl	801dfd0 <iprintf>
	            return TEST_FAIL;
 801d762:	23ff      	movs	r3, #255	@ 0xff
 801d764:	e033      	b.n	801d7ce <spi_testing+0x232>
	        }
	    }
	    else
	    {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	799b      	ldrb	r3, [r3, #6]
 801d76a:	461a      	mov	r2, r3
 801d76c:	491d      	ldr	r1, [pc, #116]	@ (801d7e4 <spi_testing+0x248>)
 801d76e:	481b      	ldr	r0, [pc, #108]	@ (801d7dc <spi_testing+0x240>)
 801d770:	f000 fd76 	bl	801e260 <memcmp>
 801d774:	6138      	str	r0, [r7, #16]
	        if (comp != 0) {
 801d776:	693b      	ldr	r3, [r7, #16]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d015      	beq.n	801d7a8 <spi_testing+0x20c>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801d77c:	7dfb      	ldrb	r3, [r7, #23]
 801d77e:	3301      	adds	r3, #1
 801d780:	4619      	mov	r1, r3
 801d782:	4828      	ldr	r0, [pc, #160]	@ (801d824 <spi_testing+0x288>)
 801d784:	f000 fc24 	bl	801dfd0 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	799b      	ldrb	r3, [r3, #6]
 801d78c:	4a13      	ldr	r2, [pc, #76]	@ (801d7dc <spi_testing+0x240>)
 801d78e:	4619      	mov	r1, r3
 801d790:	4825      	ldr	r0, [pc, #148]	@ (801d828 <spi_testing+0x28c>)
 801d792:	f000 fc1d 	bl	801dfd0 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	799b      	ldrb	r3, [r3, #6]
 801d79a:	4a12      	ldr	r2, [pc, #72]	@ (801d7e4 <spi_testing+0x248>)
 801d79c:	4619      	mov	r1, r3
 801d79e:	4823      	ldr	r0, [pc, #140]	@ (801d82c <spi_testing+0x290>)
 801d7a0:	f000 fc16 	bl	801dfd0 <iprintf>
	            return TEST_FAIL;
 801d7a4:	23ff      	movs	r3, #255	@ 0xff
 801d7a6:	e012      	b.n	801d7ce <spi_testing+0x232>
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801d7a8:	7dfb      	ldrb	r3, [r7, #23]
 801d7aa:	3301      	adds	r3, #1
 801d7ac:	4619      	mov	r1, r3
 801d7ae:	4820      	ldr	r0, [pc, #128]	@ (801d830 <spi_testing+0x294>)
 801d7b0:	f000 fc0e 	bl	801dfd0 <iprintf>

        osDelay(10);
 801d7b4:	200a      	movs	r0, #10
 801d7b6:	f7f1 f983 	bl	800eac0 <osDelay>
	for(uint8_t i = 0; i < command->iterations; i++)
 801d7ba:	7dfb      	ldrb	r3, [r7, #23]
 801d7bc:	3301      	adds	r3, #1
 801d7be:	75fb      	strb	r3, [r7, #23]
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	795b      	ldrb	r3, [r3, #5]
 801d7c4:	7dfa      	ldrb	r2, [r7, #23]
 801d7c6:	429a      	cmp	r2, r3
 801d7c8:	f4ff af00 	bcc.w	801d5cc <spi_testing+0x30>
	}

    return TEST_PASS;
 801d7cc:	2301      	movs	r3, #1
}
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	3718      	adds	r7, #24
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}
 801d7d6:	bf00      	nop
 801d7d8:	08021d00 	.word	0x08021d00
 801d7dc:	20027b10 	.word	0x20027b10
 801d7e0:	08021d34 	.word	0x08021d34
 801d7e4:	20027c10 	.word	0x20027c10
 801d7e8:	200003d0 	.word	0x200003d0
 801d7ec:	20000434 	.word	0x20000434
 801d7f0:	20027910 	.word	0x20027910
 801d7f4:	20027a10 	.word	0x20027a10
 801d7f8:	08021d54 	.word	0x08021d54
 801d7fc:	08021d78 	.word	0x08021d78
 801d800:	20000dcc 	.word	0x20000dcc
 801d804:	08021da0 	.word	0x08021da0
 801d808:	20000dd0 	.word	0x20000dd0
 801d80c:	08021db4 	.word	0x08021db4
 801d810:	08021dc8 	.word	0x08021dc8
 801d814:	08021de8 	.word	0x08021de8
 801d818:	20000dc0 	.word	0x20000dc0
 801d81c:	08021e10 	.word	0x08021e10
 801d820:	08021e24 	.word	0x08021e24
 801d824:	08021e50 	.word	0x08021e50
 801d828:	08021e70 	.word	0x08021e70
 801d82c:	08021e7c 	.word	0x08021e7c
 801d830:	08021e88 	.word	0x08021e88

0801d834 <HAL_SPI_TxCpltCallback>:

// Tx Complete Callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d834:	b580      	push	{r7, lr}
 801d836:	b084      	sub	sp, #16
 801d838:	af00      	add	r7, sp, #0
 801d83a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d83c:	2300      	movs	r3, #0
 801d83e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_SENDER->Instance)
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	681a      	ldr	r2, [r3, #0]
 801d844:	4b13      	ldr	r3, [pc, #76]	@ (801d894 <HAL_SPI_TxCpltCallback+0x60>)
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	429a      	cmp	r2, r3
 801d84a:	d10b      	bne.n	801d864 <HAL_SPI_TxCpltCallback+0x30>
    {
        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d84c:	4b12      	ldr	r3, [pc, #72]	@ (801d898 <HAL_SPI_TxCpltCallback+0x64>)
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	f107 020c 	add.w	r2, r7, #12
 801d854:	4611      	mov	r1, r2
 801d856:	4618      	mov	r0, r3
 801d858:	f7f2 fa8f 	bl	800fd7a <xQueueGiveFromISR>
        printf("Master Tx callback fired\n\r");
 801d85c:	480f      	ldr	r0, [pc, #60]	@ (801d89c <HAL_SPI_TxCpltCallback+0x68>)
 801d85e:	f000 fbb7 	bl	801dfd0 <iprintf>
 801d862:	e008      	b.n	801d876 <HAL_SPI_TxCpltCallback+0x42>
    }
    else if(hspi->Instance == SPI_RECEIVER->Instance)
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	681a      	ldr	r2, [r3, #0]
 801d868:	4b0d      	ldr	r3, [pc, #52]	@ (801d8a0 <HAL_SPI_TxCpltCallback+0x6c>)
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d102      	bne.n	801d876 <HAL_SPI_TxCpltCallback+0x42>
    {
        printf("Slave Tx callback fired\n\r");
 801d870:	480c      	ldr	r0, [pc, #48]	@ (801d8a4 <HAL_SPI_TxCpltCallback+0x70>)
 801d872:	f000 fbad 	bl	801dfd0 <iprintf>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d007      	beq.n	801d88c <HAL_SPI_TxCpltCallback+0x58>
 801d87c:	4b0a      	ldr	r3, [pc, #40]	@ (801d8a8 <HAL_SPI_TxCpltCallback+0x74>)
 801d87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d882:	601a      	str	r2, [r3, #0]
 801d884:	f3bf 8f4f 	dsb	sy
 801d888:	f3bf 8f6f 	isb	sy
}
 801d88c:	bf00      	nop
 801d88e:	3710      	adds	r7, #16
 801d890:	46bd      	mov	sp, r7
 801d892:	bd80      	pop	{r7, pc}
 801d894:	200003d0 	.word	0x200003d0
 801d898:	20000dcc 	.word	0x20000dcc
 801d89c:	08021ea8 	.word	0x08021ea8
 801d8a0:	20000434 	.word	0x20000434
 801d8a4:	08021ec4 	.word	0x08021ec4
 801d8a8:	e000ed04 	.word	0xe000ed04

0801d8ac <HAL_SPI_RxCpltCallback>:

// Rx Complete Callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b084      	sub	sp, #16
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	681a      	ldr	r2, [r3, #0]
 801d8bc:	4b17      	ldr	r3, [pc, #92]	@ (801d91c <HAL_SPI_RxCpltCallback+0x70>)
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	429a      	cmp	r2, r3
 801d8c2:	d10b      	bne.n	801d8dc <HAL_SPI_RxCpltCallback+0x30>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d8c4:	4b16      	ldr	r3, [pc, #88]	@ (801d920 <HAL_SPI_RxCpltCallback+0x74>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	f107 020c 	add.w	r2, r7, #12
 801d8cc:	4611      	mov	r1, r2
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7f2 fa53 	bl	800fd7a <xQueueGiveFromISR>
        printf("Slave Rx callback fired, starting echo\n\r");
 801d8d4:	4813      	ldr	r0, [pc, #76]	@ (801d924 <HAL_SPI_RxCpltCallback+0x78>)
 801d8d6:	f000 fb7b 	bl	801dfd0 <iprintf>
 801d8da:	e010      	b.n	801d8fe <HAL_SPI_RxCpltCallback+0x52>
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681a      	ldr	r2, [r3, #0]
 801d8e0:	4b11      	ldr	r3, [pc, #68]	@ (801d928 <HAL_SPI_RxCpltCallback+0x7c>)
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d10a      	bne.n	801d8fe <HAL_SPI_RxCpltCallback+0x52>
    {
        printf("Master Rx callback fired\n\r");
 801d8e8:	4810      	ldr	r0, [pc, #64]	@ (801d92c <HAL_SPI_RxCpltCallback+0x80>)
 801d8ea:	f000 fb71 	bl	801dfd0 <iprintf>
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801d8ee:	4b10      	ldr	r3, [pc, #64]	@ (801d930 <HAL_SPI_RxCpltCallback+0x84>)
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	f107 020c 	add.w	r2, r7, #12
 801d8f6:	4611      	mov	r1, r2
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7f2 fa3e 	bl	800fd7a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	2b00      	cmp	r3, #0
 801d902:	d007      	beq.n	801d914 <HAL_SPI_RxCpltCallback+0x68>
 801d904:	4b0b      	ldr	r3, [pc, #44]	@ (801d934 <HAL_SPI_RxCpltCallback+0x88>)
 801d906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d90a:	601a      	str	r2, [r3, #0]
 801d90c:	f3bf 8f4f 	dsb	sy
 801d910:	f3bf 8f6f 	isb	sy
}
 801d914:	bf00      	nop
 801d916:	3710      	adds	r7, #16
 801d918:	46bd      	mov	sp, r7
 801d91a:	bd80      	pop	{r7, pc}
 801d91c:	20000434 	.word	0x20000434
 801d920:	20000dd0 	.word	0x20000dd0
 801d924:	08021ee0 	.word	0x08021ee0
 801d928:	200003d0 	.word	0x200003d0
 801d92c:	08021f0c 	.word	0x08021f0c
 801d930:	20000dc0 	.word	0x20000dc0
 801d934:	e000ed04 	.word	0xe000ed04

0801d938 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b084      	sub	sp, #16
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d940:	2300      	movs	r3, #0
 801d942:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	681a      	ldr	r2, [r3, #0]
 801d948:	4b1b      	ldr	r3, [pc, #108]	@ (801d9b8 <HAL_SPI_TxRxCpltCallback+0x80>)
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	429a      	cmp	r2, r3
 801d94e:	d113      	bne.n	801d978 <HAL_SPI_TxRxCpltCallback+0x40>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d950:	4b1a      	ldr	r3, [pc, #104]	@ (801d9bc <HAL_SPI_TxRxCpltCallback+0x84>)
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	f107 020c 	add.w	r2, r7, #12
 801d958:	4611      	mov	r1, r2
 801d95a:	4618      	mov	r0, r3
 801d95c:	f7f2 fa0d 	bl	800fd7a <xQueueGiveFromISR>
        printf("Slave TxRx callback fired\n\r");
 801d960:	4817      	ldr	r0, [pc, #92]	@ (801d9c0 <HAL_SPI_TxRxCpltCallback+0x88>)
 801d962:	f000 fb35 	bl	801dfd0 <iprintf>
        memcpy(echo_tx_buffer,echo_rx_buffer, SPI_RECEIVER->RxXferSize);
 801d966:	4b14      	ldr	r3, [pc, #80]	@ (801d9b8 <HAL_SPI_TxRxCpltCallback+0x80>)
 801d968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801d96c:	461a      	mov	r2, r3
 801d96e:	4915      	ldr	r1, [pc, #84]	@ (801d9c4 <HAL_SPI_TxRxCpltCallback+0x8c>)
 801d970:	4815      	ldr	r0, [pc, #84]	@ (801d9c8 <HAL_SPI_TxRxCpltCallback+0x90>)
 801d972:	f000 fd58 	bl	801e426 <memcpy>
 801d976:	e010      	b.n	801d99a <HAL_SPI_TxRxCpltCallback+0x62>
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	681a      	ldr	r2, [r3, #0]
 801d97c:	4b13      	ldr	r3, [pc, #76]	@ (801d9cc <HAL_SPI_TxRxCpltCallback+0x94>)
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	429a      	cmp	r2, r3
 801d982:	d10a      	bne.n	801d99a <HAL_SPI_TxRxCpltCallback+0x62>
    {
        printf("Master TxRx callback fired\n\r");
 801d984:	4812      	ldr	r0, [pc, #72]	@ (801d9d0 <HAL_SPI_TxRxCpltCallback+0x98>)
 801d986:	f000 fb23 	bl	801dfd0 <iprintf>
//        if (!g_master_flag){
//        	g_master_flag++;
        	xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d98a:	4b12      	ldr	r3, [pc, #72]	@ (801d9d4 <HAL_SPI_TxRxCpltCallback+0x9c>)
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	f107 020c 	add.w	r2, r7, #12
 801d992:	4611      	mov	r1, r2
 801d994:	4618      	mov	r0, r3
 801d996:	f7f2 f9f0 	bl	800fd7a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d007      	beq.n	801d9b0 <HAL_SPI_TxRxCpltCallback+0x78>
 801d9a0:	4b0d      	ldr	r3, [pc, #52]	@ (801d9d8 <HAL_SPI_TxRxCpltCallback+0xa0>)
 801d9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d9a6:	601a      	str	r2, [r3, #0]
 801d9a8:	f3bf 8f4f 	dsb	sy
 801d9ac:	f3bf 8f6f 	isb	sy
}
 801d9b0:	bf00      	nop
 801d9b2:	3710      	adds	r7, #16
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	bd80      	pop	{r7, pc}
 801d9b8:	20000434 	.word	0x20000434
 801d9bc:	20000dd0 	.word	0x20000dd0
 801d9c0:	08021f28 	.word	0x08021f28
 801d9c4:	20027910 	.word	0x20027910
 801d9c8:	20027a10 	.word	0x20027a10
 801d9cc:	200003d0 	.word	0x200003d0
 801d9d0:	08021f44 	.word	0x08021f44
 801d9d4:	20000dcc 	.word	0x20000dcc
 801d9d8:	e000ed04 	.word	0xe000ed04

0801d9dc <timer_testing>:
/*
 * @brief Performs a test on the TIMER using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result timer_testing(test_command_t* command){
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b084      	sub	sp, #16
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]

	uint16_t start_val ,end_val;

	if (command == NULL) {
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d102      	bne.n	801d9f0 <timer_testing+0x14>
//        printf("Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d9ea:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ee:	e022      	b.n	801da36 <timer_testing+0x5a>
	}

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim7);
 801d9f0:	4813      	ldr	r0, [pc, #76]	@ (801da40 <timer_testing+0x64>)
 801d9f2:	f7ed fa89 	bl	800af08 <HAL_TIM_Base_Start_IT>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	73fb      	strb	r3, [r7, #15]
 801d9fa:	e013      	b.n	801da24 <timer_testing+0x48>

	    if (xSemaphoreTake(TimSemHandle, pdMS_TO_TICKS(200)) != pdPASS) {
 801d9fc:	4b11      	ldr	r3, [pc, #68]	@ (801da44 <timer_testing+0x68>)
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	21c8      	movs	r1, #200	@ 0xc8
 801da02:	4618      	mov	r0, r3
 801da04:	f7f2 fb3a 	bl	801007c <xQueueSemaphoreTake>
 801da08:	4603      	mov	r3, r0
 801da0a:	2b01      	cmp	r3, #1
 801da0c:	d004      	beq.n	801da18 <timer_testing+0x3c>
//			printf("Fail on iteration %u.\n\r",i+1); // Debug printf
	         vPortFree(command);
 801da0e:	6878      	ldr	r0, [r7, #4]
 801da10:	f7f4 fed8 	bl	80127c4 <vPortFree>
	         return TEST_FAIL;
 801da14:	23ff      	movs	r3, #255	@ 0xff
 801da16:	e00e      	b.n	801da36 <timer_testing+0x5a>
	    }

//		printf("success on iteration %u.\n\r", i + 1); // Debug printf
        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801da18:	200a      	movs	r0, #10
 801da1a:	f7f1 f851 	bl	800eac0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801da1e:	7bfb      	ldrb	r3, [r7, #15]
 801da20:	3301      	adds	r3, #1
 801da22:	73fb      	strb	r3, [r7, #15]
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	795b      	ldrb	r3, [r3, #5]
 801da28:	7bfa      	ldrb	r2, [r7, #15]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d3e6      	bcc.n	801d9fc <timer_testing+0x20>
	}// end of iterations

    // Stop Timer after the test is complete
	HAL_TIM_Base_Stop_IT(&htim7);
 801da2e:	4804      	ldr	r0, [pc, #16]	@ (801da40 <timer_testing+0x64>)
 801da30:	f7ed fae2 	bl	800aff8 <HAL_TIM_Base_Stop_IT>

    return TEST_PASS;
 801da34:	2301      	movs	r3, #1
}
 801da36:	4618      	mov	r0, r3
 801da38:	3710      	adds	r7, #16
 801da3a:	46bd      	mov	sp, r7
 801da3c:	bd80      	pop	{r7, pc}
 801da3e:	bf00      	nop
 801da40:	20000618 	.word	0x20000618
 801da44:	20000dc8 	.word	0x20000dc8

0801da48 <uart_testing>:
/*
 * @brief Performs a test on the UART peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result uart_testing(test_command_t* command){
 801da48:	b580      	push	{r7, lr}
 801da4a:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801da4e:	af00      	add	r7, sp, #0
 801da50:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da54:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801da58:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801da5a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801da62:	4618      	mov	r0, r3
 801da64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801da68:	461a      	mov	r2, r3
 801da6a:	2100      	movs	r1, #0
 801da6c:	f000 fc08 	bl	801e280 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801da70:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da74:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801da78:	4618      	mov	r0, r3
 801da7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801da7e:	461a      	mov	r2, r3
 801da80:	2100      	movs	r1, #0
 801da82:	f000 fbfd 	bl	801e280 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801da86:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da8a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801da8e:	4618      	mov	r0, r3
 801da90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801da94:	461a      	mov	r2, r3
 801da96:	2100      	movs	r1, #0
 801da98:	f000 fbf2 	bl	801e280 <memset>

	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801da9c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801daa0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d105      	bne.n	801dab6 <uart_testing+0x6e>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
 801daaa:	4890      	ldr	r0, [pc, #576]	@ (801dcec <uart_testing+0x2a4>)
 801daac:	f000 fa90 	bl	801dfd0 <iprintf>
        return TEST_ERR;
 801dab0:	f04f 33ff 	mov.w	r3, #4294967295
 801dab4:	e115      	b.n	801dce2 <uart_testing+0x29a>
	}

	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801dab6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801daba:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	1dd9      	adds	r1, r3, #7
 801dac2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dac6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	799b      	ldrb	r3, [r3, #6]
 801dace:	461a      	mov	r2, r3
 801dad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dad4:	4618      	mov	r0, r3
 801dad6:	f000 fca6 	bl	801e426 <memcpy>

    for(uint8_t i=0 ; i< command->iterations ; i++){
 801dada:	2300      	movs	r3, #0
 801dadc:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dae0:	e0f3      	b.n	801dcca <uart_testing+0x282>
//        printf("UART_TEST: Iteration %u/%u:\n\r", i + 1, command->iterations); // Debug printf
        memset(rx_buffer, 0, command->bit_pattern_length);
 801dae2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dae6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	799b      	ldrb	r3, [r3, #6]
 801daee:	461a      	mov	r2, r3
 801daf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801daf4:	2100      	movs	r1, #0
 801daf6:	4618      	mov	r0, r3
 801daf8:	f000 fbc2 	bl	801e280 <memset>

        // RECEIVER start to RECEIVE DMA
        rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, echo_buffer, command->bit_pattern_length);
 801dafc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db00:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	799b      	ldrb	r3, [r3, #6]
 801db08:	461a      	mov	r2, r3
 801db0a:	f107 0308 	add.w	r3, r7, #8
 801db0e:	4619      	mov	r1, r3
 801db10:	4877      	ldr	r0, [pc, #476]	@ (801dcf0 <uart_testing+0x2a8>)
 801db12:	f7ed ff19 	bl	800b948 <HAL_UART_Receive_DMA>
 801db16:	4603      	mov	r3, r0
 801db18:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
        if (rx_status != HAL_OK) {
 801db1c:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801db20:	2b00      	cmp	r3, #0
 801db22:	d007      	beq.n	801db34 <uart_testing+0xec>
            printf("Receiver Failed to start receive: %d\n\r", rx_status);
 801db24:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801db28:	4619      	mov	r1, r3
 801db2a:	4872      	ldr	r0, [pc, #456]	@ (801dcf4 <uart_testing+0x2ac>)
 801db2c:	f000 fa50 	bl	801dfd0 <iprintf>
            return TEST_FAIL;
 801db30:	23ff      	movs	r3, #255	@ 0xff
 801db32:	e0d6      	b.n	801dce2 <uart_testing+0x29a>
        }
        // Arm sender receive before receiver transmits back
        if (HAL_UART_Receive_IT(UART_SENDER, rx_buffer, command->bit_pattern_length) != HAL_OK) {
 801db34:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db38:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	799b      	ldrb	r3, [r3, #6]
 801db40:	461a      	mov	r2, r3
 801db42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801db46:	4619      	mov	r1, r3
 801db48:	486b      	ldr	r0, [pc, #428]	@ (801dcf8 <uart_testing+0x2b0>)
 801db4a:	f7ed fe3d 	bl	800b7c8 <HAL_UART_Receive_IT>
 801db4e:	4603      	mov	r3, r0
 801db50:	2b00      	cmp	r3, #0
 801db52:	d007      	beq.n	801db64 <uart_testing+0x11c>
            HAL_UART_Abort(UART_RECEIVER);
 801db54:	4866      	ldr	r0, [pc, #408]	@ (801dcf0 <uart_testing+0x2a8>)
 801db56:	f7ed ff3b 	bl	800b9d0 <HAL_UART_Abort>
            printf("Sender Failed to start receive back\n\r");
 801db5a:	4868      	ldr	r0, [pc, #416]	@ (801dcfc <uart_testing+0x2b4>)
 801db5c:	f000 fa38 	bl	801dfd0 <iprintf>
            return TEST_FAIL;
 801db60:	23ff      	movs	r3, #255	@ 0xff
 801db62:	e0be      	b.n	801dce2 <uart_testing+0x29a>
        }

        // SENDER TRANSMIT a block of data via DMA
        tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801db64:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db68:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	799b      	ldrb	r3, [r3, #6]
 801db70:	461a      	mov	r2, r3
 801db72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801db76:	4619      	mov	r1, r3
 801db78:	485f      	ldr	r0, [pc, #380]	@ (801dcf8 <uart_testing+0x2b0>)
 801db7a:	f7ed fe69 	bl	800b850 <HAL_UART_Transmit_DMA>
 801db7e:	4603      	mov	r3, r0
 801db80:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
        if (tx_status != HAL_OK) {
 801db84:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d00a      	beq.n	801dba2 <uart_testing+0x15a>
            printf("Failed to send on UART sender: %d\n\r", tx_status);
 801db8c:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801db90:	4619      	mov	r1, r3
 801db92:	485b      	ldr	r0, [pc, #364]	@ (801dd00 <uart_testing+0x2b8>)
 801db94:	f000 fa1c 	bl	801dfd0 <iprintf>
            HAL_UART_Abort(UART_RECEIVER);
 801db98:	4855      	ldr	r0, [pc, #340]	@ (801dcf0 <uart_testing+0x2a8>)
 801db9a:	f7ed ff19 	bl	800b9d0 <HAL_UART_Abort>
            return TEST_FAIL;
 801db9e:	23ff      	movs	r3, #255	@ 0xff
 801dba0:	e09f      	b.n	801dce2 <uart_testing+0x29a>
        }
        // WAIT FOR TX COMPLETION
        if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801dba2:	4b58      	ldr	r3, [pc, #352]	@ (801dd04 <uart_testing+0x2bc>)
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dbaa:	4618      	mov	r0, r3
 801dbac:	f7f2 fa66 	bl	801007c <xQueueSemaphoreTake>
 801dbb0:	4603      	mov	r3, r0
 801dbb2:	2b01      	cmp	r3, #1
 801dbb4:	d00a      	beq.n	801dbcc <uart_testing+0x184>
             printf("fail to get TxSemaphore\n\r");
 801dbb6:	4854      	ldr	r0, [pc, #336]	@ (801dd08 <uart_testing+0x2c0>)
 801dbb8:	f000 fa0a 	bl	801dfd0 <iprintf>
             HAL_UART_Abort(UART_RECEIVER);
 801dbbc:	484c      	ldr	r0, [pc, #304]	@ (801dcf0 <uart_testing+0x2a8>)
 801dbbe:	f7ed ff07 	bl	800b9d0 <HAL_UART_Abort>
             HAL_UART_Abort(UART_SENDER);
 801dbc2:	484d      	ldr	r0, [pc, #308]	@ (801dcf8 <uart_testing+0x2b0>)
 801dbc4:	f7ed ff04 	bl	800b9d0 <HAL_UART_Abort>
             return TEST_FAIL;
 801dbc8:	23ff      	movs	r3, #255	@ 0xff
 801dbca:	e08a      	b.n	801dce2 <uart_testing+0x29a>
        }
        else
        {
			 if (HAL_UART_Transmit_IT(UART_RECEIVER, echo_buffer, command->bit_pattern_length) != HAL_OK){
 801dbcc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbd0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	799b      	ldrb	r3, [r3, #6]
 801dbd8:	461a      	mov	r2, r3
 801dbda:	f107 0308 	add.w	r3, r7, #8
 801dbde:	4619      	mov	r1, r3
 801dbe0:	4843      	ldr	r0, [pc, #268]	@ (801dcf0 <uart_testing+0x2a8>)
 801dbe2:	f7ed fd93 	bl	800b70c <HAL_UART_Transmit_IT>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d00d      	beq.n	801dc08 <uart_testing+0x1c0>
				 printf("Failed to echo send on UART receiver: %d\n\r", tx_status);
 801dbec:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dbf0:	4619      	mov	r1, r3
 801dbf2:	4846      	ldr	r0, [pc, #280]	@ (801dd0c <uart_testing+0x2c4>)
 801dbf4:	f000 f9ec 	bl	801dfd0 <iprintf>
				 HAL_UART_Abort(UART_RECEIVER);
 801dbf8:	483d      	ldr	r0, [pc, #244]	@ (801dcf0 <uart_testing+0x2a8>)
 801dbfa:	f7ed fee9 	bl	800b9d0 <HAL_UART_Abort>
				 HAL_UART_Abort(UART_SENDER);
 801dbfe:	483e      	ldr	r0, [pc, #248]	@ (801dcf8 <uart_testing+0x2b0>)
 801dc00:	f7ed fee6 	bl	800b9d0 <HAL_UART_Abort>
				 return TEST_FAIL;
 801dc04:	23ff      	movs	r3, #255	@ 0xff
 801dc06:	e06c      	b.n	801dce2 <uart_testing+0x29a>
			 }
        }

        // WAIT FOR RECEIVER RX COMPLETION
        if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801dc08:	4b41      	ldr	r3, [pc, #260]	@ (801dd10 <uart_testing+0x2c8>)
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dc10:	4618      	mov	r0, r3
 801dc12:	f7f2 fa33 	bl	801007c <xQueueSemaphoreTake>
 801dc16:	4603      	mov	r3, r0
 801dc18:	2b01      	cmp	r3, #1
 801dc1a:	d00a      	beq.n	801dc32 <uart_testing+0x1ea>
            printf("fail to get RxSemaphore\n\r");
 801dc1c:	483d      	ldr	r0, [pc, #244]	@ (801dd14 <uart_testing+0x2cc>)
 801dc1e:	f000 f9d7 	bl	801dfd0 <iprintf>
            HAL_UART_Abort(UART_SENDER);
 801dc22:	4835      	ldr	r0, [pc, #212]	@ (801dcf8 <uart_testing+0x2b0>)
 801dc24:	f7ed fed4 	bl	800b9d0 <HAL_UART_Abort>
            HAL_UART_Abort(UART_RECEIVER);
 801dc28:	4831      	ldr	r0, [pc, #196]	@ (801dcf0 <uart_testing+0x2a8>)
 801dc2a:	f7ed fed1 	bl	800b9d0 <HAL_UART_Abort>
            return TEST_FAIL;
 801dc2e:	23ff      	movs	r3, #255	@ 0xff
 801dc30:	e057      	b.n	801dce2 <uart_testing+0x29a>
        }

	    // COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801dc32:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc36:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc3a:	681b      	ldr	r3, [r3, #0]
 801dc3c:	799b      	ldrb	r3, [r3, #6]
 801dc3e:	2b64      	cmp	r3, #100	@ 0x64
 801dc40:	d925      	bls.n	801dc8e <uart_testing+0x246>
//			printf("bit_pattern_length more than 100\n\r"); // Debug printf

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801dc42:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc46:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	799b      	ldrb	r3, [r3, #6]
 801dc4e:	461a      	mov	r2, r3
 801dc50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dc54:	4611      	mov	r1, r2
 801dc56:	4618      	mov	r0, r3
 801dc58:	f7e3 facc 	bl	80011f4 <calculate_crc>
 801dc5c:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801dc60:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc64:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	799b      	ldrb	r3, [r3, #6]
 801dc6c:	461a      	mov	r2, r3
 801dc6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dc72:	4611      	mov	r1, r2
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7e3 fabd 	bl	80011f4 <calculate_crc>
 801dc7a:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
			if (sent_crc != received_crc) {
 801dc7e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801dc82:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801dc86:	429a      	cmp	r2, r3
 801dc88:	d017      	beq.n	801dcba <uart_testing+0x272>
				// Debug printf
//				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
//					   i + 1, sent_crc, received_crc);
				return TEST_FAIL;
 801dc8a:	23ff      	movs	r3, #255	@ 0xff
 801dc8c:	e029      	b.n	801dce2 <uart_testing+0x29a>
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801dc8e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc92:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	799b      	ldrb	r3, [r3, #6]
 801dc9a:	461a      	mov	r2, r3
 801dc9c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801dca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dca4:	4618      	mov	r0, r3
 801dca6:	f000 fadb 	bl	801e260 <memcmp>
 801dcaa:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
			if (comp != 0) {
 801dcae:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d001      	beq.n	801dcba <uart_testing+0x272>
//				// Debug printf
//				printf("Data mismatch on iteration %u.\n\r", i + 1);
//				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
//				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
				return TEST_FAIL;
 801dcb6:	23ff      	movs	r3, #255	@ 0xff
 801dcb8:	e013      	b.n	801dce2 <uart_testing+0x29a>
			}
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801dcba:	200a      	movs	r0, #10
 801dcbc:	f7f0 ff00 	bl	800eac0 <osDelay>
    for(uint8_t i=0 ; i< command->iterations ; i++){
 801dcc0:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801dcc4:	3301      	adds	r3, #1
 801dcc6:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dcca:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dcce:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	795b      	ldrb	r3, [r3, #5]
 801dcd6:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801dcda:	429a      	cmp	r2, r3
 801dcdc:	f4ff af01 	bcc.w	801dae2 <uart_testing+0x9a>
	}
    return TEST_PASS;
 801dce0:	2301      	movs	r3, #1
}
 801dce2:	4618      	mov	r0, r3
 801dce4:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801dce8:	46bd      	mov	sp, r7
 801dcea:	bd80      	pop	{r7, pc}
 801dcec:	08021f64 	.word	0x08021f64
 801dcf0:	20000664 	.word	0x20000664
 801dcf4:	08021f9c 	.word	0x08021f9c
 801dcf8:	200006ec 	.word	0x200006ec
 801dcfc:	08021fc4 	.word	0x08021fc4
 801dd00:	08021fec 	.word	0x08021fec
 801dd04:	20000db4 	.word	0x20000db4
 801dd08:	08022010 	.word	0x08022010
 801dd0c:	0802202c 	.word	0x0802202c
 801dd10:	20000db0 	.word	0x20000db0
 801dd14:	08022058 	.word	0x08022058

0801dd18 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dd18:	b480      	push	{r7}
 801dd1a:	b085      	sub	sp, #20
 801dd1c:	af00      	add	r7, sp, #0
 801dd1e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801dd20:	2300      	movs	r3, #0
 801dd22:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	681a      	ldr	r2, [r3, #0]
 801dd28:	4b09      	ldr	r3, [pc, #36]	@ (801dd50 <HAL_UART_TxCpltCallback+0x38>)
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	429a      	cmp	r2, r3
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d007      	beq.n	801dd44 <HAL_UART_TxCpltCallback+0x2c>
 801dd34:	4b07      	ldr	r3, [pc, #28]	@ (801dd54 <HAL_UART_TxCpltCallback+0x3c>)
 801dd36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801dd3a:	601a      	str	r2, [r3, #0]
 801dd3c:	f3bf 8f4f 	dsb	sy
 801dd40:	f3bf 8f6f 	isb	sy
}
 801dd44:	bf00      	nop
 801dd46:	3714      	adds	r7, #20
 801dd48:	46bd      	mov	sp, r7
 801dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd4e:	4770      	bx	lr
 801dd50:	20000664 	.word	0x20000664
 801dd54:	e000ed04 	.word	0xe000ed04

0801dd58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801dd58:	b580      	push	{r7, lr}
 801dd5a:	b084      	sub	sp, #16
 801dd5c:	af00      	add	r7, sp, #0
 801dd5e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801dd60:	2300      	movs	r3, #0
 801dd62:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	681a      	ldr	r2, [r3, #0]
 801dd68:	4b14      	ldr	r3, [pc, #80]	@ (801ddbc <HAL_UART_RxCpltCallback+0x64>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	429a      	cmp	r2, r3
 801dd6e:	d108      	bne.n	801dd82 <HAL_UART_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801dd70:	4b13      	ldr	r3, [pc, #76]	@ (801ddc0 <HAL_UART_RxCpltCallback+0x68>)
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	f107 020c 	add.w	r2, r7, #12
 801dd78:	4611      	mov	r1, r2
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f7f1 fffd 	bl	800fd7a <xQueueGiveFromISR>
 801dd80:	e00d      	b.n	801dd9e <HAL_UART_RxCpltCallback+0x46>
//        printf("Receiver Rx callback fired \n\r"); // Debug printf
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	681a      	ldr	r2, [r3, #0]
 801dd86:	4b0f      	ldr	r3, [pc, #60]	@ (801ddc4 <HAL_UART_RxCpltCallback+0x6c>)
 801dd88:	681b      	ldr	r3, [r3, #0]
 801dd8a:	429a      	cmp	r2, r3
 801dd8c:	d107      	bne.n	801dd9e <HAL_UART_RxCpltCallback+0x46>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801dd8e:	4b0e      	ldr	r3, [pc, #56]	@ (801ddc8 <HAL_UART_RxCpltCallback+0x70>)
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	f107 020c 	add.w	r2, r7, #12
 801dd96:	4611      	mov	r1, r2
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7f1 ffee 	bl	800fd7a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d007      	beq.n	801ddb4 <HAL_UART_RxCpltCallback+0x5c>
 801dda4:	4b09      	ldr	r3, [pc, #36]	@ (801ddcc <HAL_UART_RxCpltCallback+0x74>)
 801dda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ddaa:	601a      	str	r2, [r3, #0]
 801ddac:	f3bf 8f4f 	dsb	sy
 801ddb0:	f3bf 8f6f 	isb	sy
}
 801ddb4:	bf00      	nop
 801ddb6:	3710      	adds	r7, #16
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}
 801ddbc:	20000664 	.word	0x20000664
 801ddc0:	20000db4 	.word	0x20000db4
 801ddc4:	200006ec 	.word	0x200006ec
 801ddc8:	20000db0 	.word	0x20000db0
 801ddcc:	e000ed04 	.word	0xe000ed04

0801ddd0 <rand>:
 801ddd0:	4b16      	ldr	r3, [pc, #88]	@ (801de2c <rand+0x5c>)
 801ddd2:	b510      	push	{r4, lr}
 801ddd4:	681c      	ldr	r4, [r3, #0]
 801ddd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ddd8:	b9b3      	cbnz	r3, 801de08 <rand+0x38>
 801ddda:	2018      	movs	r0, #24
 801dddc:	f000 fb9a 	bl	801e514 <malloc>
 801dde0:	4602      	mov	r2, r0
 801dde2:	6320      	str	r0, [r4, #48]	@ 0x30
 801dde4:	b920      	cbnz	r0, 801ddf0 <rand+0x20>
 801dde6:	4b12      	ldr	r3, [pc, #72]	@ (801de30 <rand+0x60>)
 801dde8:	4812      	ldr	r0, [pc, #72]	@ (801de34 <rand+0x64>)
 801ddea:	2152      	movs	r1, #82	@ 0x52
 801ddec:	f000 fb2a 	bl	801e444 <__assert_func>
 801ddf0:	4911      	ldr	r1, [pc, #68]	@ (801de38 <rand+0x68>)
 801ddf2:	4b12      	ldr	r3, [pc, #72]	@ (801de3c <rand+0x6c>)
 801ddf4:	e9c0 1300 	strd	r1, r3, [r0]
 801ddf8:	4b11      	ldr	r3, [pc, #68]	@ (801de40 <rand+0x70>)
 801ddfa:	6083      	str	r3, [r0, #8]
 801ddfc:	230b      	movs	r3, #11
 801ddfe:	8183      	strh	r3, [r0, #12]
 801de00:	2100      	movs	r1, #0
 801de02:	2001      	movs	r0, #1
 801de04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801de08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801de0a:	480e      	ldr	r0, [pc, #56]	@ (801de44 <rand+0x74>)
 801de0c:	690b      	ldr	r3, [r1, #16]
 801de0e:	694c      	ldr	r4, [r1, #20]
 801de10:	4a0d      	ldr	r2, [pc, #52]	@ (801de48 <rand+0x78>)
 801de12:	4358      	muls	r0, r3
 801de14:	fb02 0004 	mla	r0, r2, r4, r0
 801de18:	fba3 3202 	umull	r3, r2, r3, r2
 801de1c:	3301      	adds	r3, #1
 801de1e:	eb40 0002 	adc.w	r0, r0, r2
 801de22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801de26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801de2a:	bd10      	pop	{r4, pc}
 801de2c:	2000003c 	.word	0x2000003c
 801de30:	080222fa 	.word	0x080222fa
 801de34:	08022311 	.word	0x08022311
 801de38:	abcd330e 	.word	0xabcd330e
 801de3c:	e66d1234 	.word	0xe66d1234
 801de40:	0005deec 	.word	0x0005deec
 801de44:	5851f42d 	.word	0x5851f42d
 801de48:	4c957f2d 	.word	0x4c957f2d

0801de4c <std>:
 801de4c:	2300      	movs	r3, #0
 801de4e:	b510      	push	{r4, lr}
 801de50:	4604      	mov	r4, r0
 801de52:	e9c0 3300 	strd	r3, r3, [r0]
 801de56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de5a:	6083      	str	r3, [r0, #8]
 801de5c:	8181      	strh	r1, [r0, #12]
 801de5e:	6643      	str	r3, [r0, #100]	@ 0x64
 801de60:	81c2      	strh	r2, [r0, #14]
 801de62:	6183      	str	r3, [r0, #24]
 801de64:	4619      	mov	r1, r3
 801de66:	2208      	movs	r2, #8
 801de68:	305c      	adds	r0, #92	@ 0x5c
 801de6a:	f000 fa09 	bl	801e280 <memset>
 801de6e:	4b0d      	ldr	r3, [pc, #52]	@ (801dea4 <std+0x58>)
 801de70:	6263      	str	r3, [r4, #36]	@ 0x24
 801de72:	4b0d      	ldr	r3, [pc, #52]	@ (801dea8 <std+0x5c>)
 801de74:	62a3      	str	r3, [r4, #40]	@ 0x28
 801de76:	4b0d      	ldr	r3, [pc, #52]	@ (801deac <std+0x60>)
 801de78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801de7a:	4b0d      	ldr	r3, [pc, #52]	@ (801deb0 <std+0x64>)
 801de7c:	6323      	str	r3, [r4, #48]	@ 0x30
 801de7e:	4b0d      	ldr	r3, [pc, #52]	@ (801deb4 <std+0x68>)
 801de80:	6224      	str	r4, [r4, #32]
 801de82:	429c      	cmp	r4, r3
 801de84:	d006      	beq.n	801de94 <std+0x48>
 801de86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801de8a:	4294      	cmp	r4, r2
 801de8c:	d002      	beq.n	801de94 <std+0x48>
 801de8e:	33d0      	adds	r3, #208	@ 0xd0
 801de90:	429c      	cmp	r4, r3
 801de92:	d105      	bne.n	801dea0 <std+0x54>
 801de94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801de98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de9c:	f000 bac0 	b.w	801e420 <__retarget_lock_init_recursive>
 801dea0:	bd10      	pop	{r4, pc}
 801dea2:	bf00      	nop
 801dea4:	0801e0b1 	.word	0x0801e0b1
 801dea8:	0801e0d3 	.word	0x0801e0d3
 801deac:	0801e10b 	.word	0x0801e10b
 801deb0:	0801e12f 	.word	0x0801e12f
 801deb4:	20027d10 	.word	0x20027d10

0801deb8 <stdio_exit_handler>:
 801deb8:	4a02      	ldr	r2, [pc, #8]	@ (801dec4 <stdio_exit_handler+0xc>)
 801deba:	4903      	ldr	r1, [pc, #12]	@ (801dec8 <stdio_exit_handler+0x10>)
 801debc:	4803      	ldr	r0, [pc, #12]	@ (801decc <stdio_exit_handler+0x14>)
 801debe:	f000 b869 	b.w	801df94 <_fwalk_sglue>
 801dec2:	bf00      	nop
 801dec4:	20000030 	.word	0x20000030
 801dec8:	0801ed25 	.word	0x0801ed25
 801decc:	20000040 	.word	0x20000040

0801ded0 <cleanup_stdio>:
 801ded0:	6841      	ldr	r1, [r0, #4]
 801ded2:	4b0c      	ldr	r3, [pc, #48]	@ (801df04 <cleanup_stdio+0x34>)
 801ded4:	4299      	cmp	r1, r3
 801ded6:	b510      	push	{r4, lr}
 801ded8:	4604      	mov	r4, r0
 801deda:	d001      	beq.n	801dee0 <cleanup_stdio+0x10>
 801dedc:	f000 ff22 	bl	801ed24 <_fflush_r>
 801dee0:	68a1      	ldr	r1, [r4, #8]
 801dee2:	4b09      	ldr	r3, [pc, #36]	@ (801df08 <cleanup_stdio+0x38>)
 801dee4:	4299      	cmp	r1, r3
 801dee6:	d002      	beq.n	801deee <cleanup_stdio+0x1e>
 801dee8:	4620      	mov	r0, r4
 801deea:	f000 ff1b 	bl	801ed24 <_fflush_r>
 801deee:	68e1      	ldr	r1, [r4, #12]
 801def0:	4b06      	ldr	r3, [pc, #24]	@ (801df0c <cleanup_stdio+0x3c>)
 801def2:	4299      	cmp	r1, r3
 801def4:	d004      	beq.n	801df00 <cleanup_stdio+0x30>
 801def6:	4620      	mov	r0, r4
 801def8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801defc:	f000 bf12 	b.w	801ed24 <_fflush_r>
 801df00:	bd10      	pop	{r4, pc}
 801df02:	bf00      	nop
 801df04:	20027d10 	.word	0x20027d10
 801df08:	20027d78 	.word	0x20027d78
 801df0c:	20027de0 	.word	0x20027de0

0801df10 <global_stdio_init.part.0>:
 801df10:	b510      	push	{r4, lr}
 801df12:	4b0b      	ldr	r3, [pc, #44]	@ (801df40 <global_stdio_init.part.0+0x30>)
 801df14:	4c0b      	ldr	r4, [pc, #44]	@ (801df44 <global_stdio_init.part.0+0x34>)
 801df16:	4a0c      	ldr	r2, [pc, #48]	@ (801df48 <global_stdio_init.part.0+0x38>)
 801df18:	601a      	str	r2, [r3, #0]
 801df1a:	4620      	mov	r0, r4
 801df1c:	2200      	movs	r2, #0
 801df1e:	2104      	movs	r1, #4
 801df20:	f7ff ff94 	bl	801de4c <std>
 801df24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801df28:	2201      	movs	r2, #1
 801df2a:	2109      	movs	r1, #9
 801df2c:	f7ff ff8e 	bl	801de4c <std>
 801df30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801df34:	2202      	movs	r2, #2
 801df36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df3a:	2112      	movs	r1, #18
 801df3c:	f7ff bf86 	b.w	801de4c <std>
 801df40:	20027e48 	.word	0x20027e48
 801df44:	20027d10 	.word	0x20027d10
 801df48:	0801deb9 	.word	0x0801deb9

0801df4c <__sfp_lock_acquire>:
 801df4c:	4801      	ldr	r0, [pc, #4]	@ (801df54 <__sfp_lock_acquire+0x8>)
 801df4e:	f000 ba68 	b.w	801e422 <__retarget_lock_acquire_recursive>
 801df52:	bf00      	nop
 801df54:	20027e51 	.word	0x20027e51

0801df58 <__sfp_lock_release>:
 801df58:	4801      	ldr	r0, [pc, #4]	@ (801df60 <__sfp_lock_release+0x8>)
 801df5a:	f000 ba63 	b.w	801e424 <__retarget_lock_release_recursive>
 801df5e:	bf00      	nop
 801df60:	20027e51 	.word	0x20027e51

0801df64 <__sinit>:
 801df64:	b510      	push	{r4, lr}
 801df66:	4604      	mov	r4, r0
 801df68:	f7ff fff0 	bl	801df4c <__sfp_lock_acquire>
 801df6c:	6a23      	ldr	r3, [r4, #32]
 801df6e:	b11b      	cbz	r3, 801df78 <__sinit+0x14>
 801df70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df74:	f7ff bff0 	b.w	801df58 <__sfp_lock_release>
 801df78:	4b04      	ldr	r3, [pc, #16]	@ (801df8c <__sinit+0x28>)
 801df7a:	6223      	str	r3, [r4, #32]
 801df7c:	4b04      	ldr	r3, [pc, #16]	@ (801df90 <__sinit+0x2c>)
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d1f5      	bne.n	801df70 <__sinit+0xc>
 801df84:	f7ff ffc4 	bl	801df10 <global_stdio_init.part.0>
 801df88:	e7f2      	b.n	801df70 <__sinit+0xc>
 801df8a:	bf00      	nop
 801df8c:	0801ded1 	.word	0x0801ded1
 801df90:	20027e48 	.word	0x20027e48

0801df94 <_fwalk_sglue>:
 801df94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df98:	4607      	mov	r7, r0
 801df9a:	4688      	mov	r8, r1
 801df9c:	4614      	mov	r4, r2
 801df9e:	2600      	movs	r6, #0
 801dfa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dfa4:	f1b9 0901 	subs.w	r9, r9, #1
 801dfa8:	d505      	bpl.n	801dfb6 <_fwalk_sglue+0x22>
 801dfaa:	6824      	ldr	r4, [r4, #0]
 801dfac:	2c00      	cmp	r4, #0
 801dfae:	d1f7      	bne.n	801dfa0 <_fwalk_sglue+0xc>
 801dfb0:	4630      	mov	r0, r6
 801dfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfb6:	89ab      	ldrh	r3, [r5, #12]
 801dfb8:	2b01      	cmp	r3, #1
 801dfba:	d907      	bls.n	801dfcc <_fwalk_sglue+0x38>
 801dfbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dfc0:	3301      	adds	r3, #1
 801dfc2:	d003      	beq.n	801dfcc <_fwalk_sglue+0x38>
 801dfc4:	4629      	mov	r1, r5
 801dfc6:	4638      	mov	r0, r7
 801dfc8:	47c0      	blx	r8
 801dfca:	4306      	orrs	r6, r0
 801dfcc:	3568      	adds	r5, #104	@ 0x68
 801dfce:	e7e9      	b.n	801dfa4 <_fwalk_sglue+0x10>

0801dfd0 <iprintf>:
 801dfd0:	b40f      	push	{r0, r1, r2, r3}
 801dfd2:	b507      	push	{r0, r1, r2, lr}
 801dfd4:	4906      	ldr	r1, [pc, #24]	@ (801dff0 <iprintf+0x20>)
 801dfd6:	ab04      	add	r3, sp, #16
 801dfd8:	6808      	ldr	r0, [r1, #0]
 801dfda:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfde:	6881      	ldr	r1, [r0, #8]
 801dfe0:	9301      	str	r3, [sp, #4]
 801dfe2:	f000 fb77 	bl	801e6d4 <_vfiprintf_r>
 801dfe6:	b003      	add	sp, #12
 801dfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfec:	b004      	add	sp, #16
 801dfee:	4770      	bx	lr
 801dff0:	2000003c 	.word	0x2000003c

0801dff4 <_puts_r>:
 801dff4:	6a03      	ldr	r3, [r0, #32]
 801dff6:	b570      	push	{r4, r5, r6, lr}
 801dff8:	6884      	ldr	r4, [r0, #8]
 801dffa:	4605      	mov	r5, r0
 801dffc:	460e      	mov	r6, r1
 801dffe:	b90b      	cbnz	r3, 801e004 <_puts_r+0x10>
 801e000:	f7ff ffb0 	bl	801df64 <__sinit>
 801e004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e006:	07db      	lsls	r3, r3, #31
 801e008:	d405      	bmi.n	801e016 <_puts_r+0x22>
 801e00a:	89a3      	ldrh	r3, [r4, #12]
 801e00c:	0598      	lsls	r0, r3, #22
 801e00e:	d402      	bmi.n	801e016 <_puts_r+0x22>
 801e010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e012:	f000 fa06 	bl	801e422 <__retarget_lock_acquire_recursive>
 801e016:	89a3      	ldrh	r3, [r4, #12]
 801e018:	0719      	lsls	r1, r3, #28
 801e01a:	d502      	bpl.n	801e022 <_puts_r+0x2e>
 801e01c:	6923      	ldr	r3, [r4, #16]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d135      	bne.n	801e08e <_puts_r+0x9a>
 801e022:	4621      	mov	r1, r4
 801e024:	4628      	mov	r0, r5
 801e026:	f000 f8c5 	bl	801e1b4 <__swsetup_r>
 801e02a:	b380      	cbz	r0, 801e08e <_puts_r+0x9a>
 801e02c:	f04f 35ff 	mov.w	r5, #4294967295
 801e030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e032:	07da      	lsls	r2, r3, #31
 801e034:	d405      	bmi.n	801e042 <_puts_r+0x4e>
 801e036:	89a3      	ldrh	r3, [r4, #12]
 801e038:	059b      	lsls	r3, r3, #22
 801e03a:	d402      	bmi.n	801e042 <_puts_r+0x4e>
 801e03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e03e:	f000 f9f1 	bl	801e424 <__retarget_lock_release_recursive>
 801e042:	4628      	mov	r0, r5
 801e044:	bd70      	pop	{r4, r5, r6, pc}
 801e046:	2b00      	cmp	r3, #0
 801e048:	da04      	bge.n	801e054 <_puts_r+0x60>
 801e04a:	69a2      	ldr	r2, [r4, #24]
 801e04c:	429a      	cmp	r2, r3
 801e04e:	dc17      	bgt.n	801e080 <_puts_r+0x8c>
 801e050:	290a      	cmp	r1, #10
 801e052:	d015      	beq.n	801e080 <_puts_r+0x8c>
 801e054:	6823      	ldr	r3, [r4, #0]
 801e056:	1c5a      	adds	r2, r3, #1
 801e058:	6022      	str	r2, [r4, #0]
 801e05a:	7019      	strb	r1, [r3, #0]
 801e05c:	68a3      	ldr	r3, [r4, #8]
 801e05e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e062:	3b01      	subs	r3, #1
 801e064:	60a3      	str	r3, [r4, #8]
 801e066:	2900      	cmp	r1, #0
 801e068:	d1ed      	bne.n	801e046 <_puts_r+0x52>
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	da11      	bge.n	801e092 <_puts_r+0x9e>
 801e06e:	4622      	mov	r2, r4
 801e070:	210a      	movs	r1, #10
 801e072:	4628      	mov	r0, r5
 801e074:	f000 f85f 	bl	801e136 <__swbuf_r>
 801e078:	3001      	adds	r0, #1
 801e07a:	d0d7      	beq.n	801e02c <_puts_r+0x38>
 801e07c:	250a      	movs	r5, #10
 801e07e:	e7d7      	b.n	801e030 <_puts_r+0x3c>
 801e080:	4622      	mov	r2, r4
 801e082:	4628      	mov	r0, r5
 801e084:	f000 f857 	bl	801e136 <__swbuf_r>
 801e088:	3001      	adds	r0, #1
 801e08a:	d1e7      	bne.n	801e05c <_puts_r+0x68>
 801e08c:	e7ce      	b.n	801e02c <_puts_r+0x38>
 801e08e:	3e01      	subs	r6, #1
 801e090:	e7e4      	b.n	801e05c <_puts_r+0x68>
 801e092:	6823      	ldr	r3, [r4, #0]
 801e094:	1c5a      	adds	r2, r3, #1
 801e096:	6022      	str	r2, [r4, #0]
 801e098:	220a      	movs	r2, #10
 801e09a:	701a      	strb	r2, [r3, #0]
 801e09c:	e7ee      	b.n	801e07c <_puts_r+0x88>
	...

0801e0a0 <puts>:
 801e0a0:	4b02      	ldr	r3, [pc, #8]	@ (801e0ac <puts+0xc>)
 801e0a2:	4601      	mov	r1, r0
 801e0a4:	6818      	ldr	r0, [r3, #0]
 801e0a6:	f7ff bfa5 	b.w	801dff4 <_puts_r>
 801e0aa:	bf00      	nop
 801e0ac:	2000003c 	.word	0x2000003c

0801e0b0 <__sread>:
 801e0b0:	b510      	push	{r4, lr}
 801e0b2:	460c      	mov	r4, r1
 801e0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0b8:	f000 f96a 	bl	801e390 <_read_r>
 801e0bc:	2800      	cmp	r0, #0
 801e0be:	bfab      	itete	ge
 801e0c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e0c2:	89a3      	ldrhlt	r3, [r4, #12]
 801e0c4:	181b      	addge	r3, r3, r0
 801e0c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e0ca:	bfac      	ite	ge
 801e0cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e0ce:	81a3      	strhlt	r3, [r4, #12]
 801e0d0:	bd10      	pop	{r4, pc}

0801e0d2 <__swrite>:
 801e0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0d6:	461f      	mov	r7, r3
 801e0d8:	898b      	ldrh	r3, [r1, #12]
 801e0da:	05db      	lsls	r3, r3, #23
 801e0dc:	4605      	mov	r5, r0
 801e0de:	460c      	mov	r4, r1
 801e0e0:	4616      	mov	r6, r2
 801e0e2:	d505      	bpl.n	801e0f0 <__swrite+0x1e>
 801e0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0e8:	2302      	movs	r3, #2
 801e0ea:	2200      	movs	r2, #0
 801e0ec:	f000 f93e 	bl	801e36c <_lseek_r>
 801e0f0:	89a3      	ldrh	r3, [r4, #12]
 801e0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e0fa:	81a3      	strh	r3, [r4, #12]
 801e0fc:	4632      	mov	r2, r6
 801e0fe:	463b      	mov	r3, r7
 801e100:	4628      	mov	r0, r5
 801e102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e106:	f000 b955 	b.w	801e3b4 <_write_r>

0801e10a <__sseek>:
 801e10a:	b510      	push	{r4, lr}
 801e10c:	460c      	mov	r4, r1
 801e10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e112:	f000 f92b 	bl	801e36c <_lseek_r>
 801e116:	1c43      	adds	r3, r0, #1
 801e118:	89a3      	ldrh	r3, [r4, #12]
 801e11a:	bf15      	itete	ne
 801e11c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e11e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e126:	81a3      	strheq	r3, [r4, #12]
 801e128:	bf18      	it	ne
 801e12a:	81a3      	strhne	r3, [r4, #12]
 801e12c:	bd10      	pop	{r4, pc}

0801e12e <__sclose>:
 801e12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e132:	f000 b8ad 	b.w	801e290 <_close_r>

0801e136 <__swbuf_r>:
 801e136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e138:	460e      	mov	r6, r1
 801e13a:	4614      	mov	r4, r2
 801e13c:	4605      	mov	r5, r0
 801e13e:	b118      	cbz	r0, 801e148 <__swbuf_r+0x12>
 801e140:	6a03      	ldr	r3, [r0, #32]
 801e142:	b90b      	cbnz	r3, 801e148 <__swbuf_r+0x12>
 801e144:	f7ff ff0e 	bl	801df64 <__sinit>
 801e148:	69a3      	ldr	r3, [r4, #24]
 801e14a:	60a3      	str	r3, [r4, #8]
 801e14c:	89a3      	ldrh	r3, [r4, #12]
 801e14e:	071a      	lsls	r2, r3, #28
 801e150:	d501      	bpl.n	801e156 <__swbuf_r+0x20>
 801e152:	6923      	ldr	r3, [r4, #16]
 801e154:	b943      	cbnz	r3, 801e168 <__swbuf_r+0x32>
 801e156:	4621      	mov	r1, r4
 801e158:	4628      	mov	r0, r5
 801e15a:	f000 f82b 	bl	801e1b4 <__swsetup_r>
 801e15e:	b118      	cbz	r0, 801e168 <__swbuf_r+0x32>
 801e160:	f04f 37ff 	mov.w	r7, #4294967295
 801e164:	4638      	mov	r0, r7
 801e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e168:	6823      	ldr	r3, [r4, #0]
 801e16a:	6922      	ldr	r2, [r4, #16]
 801e16c:	1a98      	subs	r0, r3, r2
 801e16e:	6963      	ldr	r3, [r4, #20]
 801e170:	b2f6      	uxtb	r6, r6
 801e172:	4283      	cmp	r3, r0
 801e174:	4637      	mov	r7, r6
 801e176:	dc05      	bgt.n	801e184 <__swbuf_r+0x4e>
 801e178:	4621      	mov	r1, r4
 801e17a:	4628      	mov	r0, r5
 801e17c:	f000 fdd2 	bl	801ed24 <_fflush_r>
 801e180:	2800      	cmp	r0, #0
 801e182:	d1ed      	bne.n	801e160 <__swbuf_r+0x2a>
 801e184:	68a3      	ldr	r3, [r4, #8]
 801e186:	3b01      	subs	r3, #1
 801e188:	60a3      	str	r3, [r4, #8]
 801e18a:	6823      	ldr	r3, [r4, #0]
 801e18c:	1c5a      	adds	r2, r3, #1
 801e18e:	6022      	str	r2, [r4, #0]
 801e190:	701e      	strb	r6, [r3, #0]
 801e192:	6962      	ldr	r2, [r4, #20]
 801e194:	1c43      	adds	r3, r0, #1
 801e196:	429a      	cmp	r2, r3
 801e198:	d004      	beq.n	801e1a4 <__swbuf_r+0x6e>
 801e19a:	89a3      	ldrh	r3, [r4, #12]
 801e19c:	07db      	lsls	r3, r3, #31
 801e19e:	d5e1      	bpl.n	801e164 <__swbuf_r+0x2e>
 801e1a0:	2e0a      	cmp	r6, #10
 801e1a2:	d1df      	bne.n	801e164 <__swbuf_r+0x2e>
 801e1a4:	4621      	mov	r1, r4
 801e1a6:	4628      	mov	r0, r5
 801e1a8:	f000 fdbc 	bl	801ed24 <_fflush_r>
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	d0d9      	beq.n	801e164 <__swbuf_r+0x2e>
 801e1b0:	e7d6      	b.n	801e160 <__swbuf_r+0x2a>
	...

0801e1b4 <__swsetup_r>:
 801e1b4:	b538      	push	{r3, r4, r5, lr}
 801e1b6:	4b29      	ldr	r3, [pc, #164]	@ (801e25c <__swsetup_r+0xa8>)
 801e1b8:	4605      	mov	r5, r0
 801e1ba:	6818      	ldr	r0, [r3, #0]
 801e1bc:	460c      	mov	r4, r1
 801e1be:	b118      	cbz	r0, 801e1c8 <__swsetup_r+0x14>
 801e1c0:	6a03      	ldr	r3, [r0, #32]
 801e1c2:	b90b      	cbnz	r3, 801e1c8 <__swsetup_r+0x14>
 801e1c4:	f7ff fece 	bl	801df64 <__sinit>
 801e1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1cc:	0719      	lsls	r1, r3, #28
 801e1ce:	d422      	bmi.n	801e216 <__swsetup_r+0x62>
 801e1d0:	06da      	lsls	r2, r3, #27
 801e1d2:	d407      	bmi.n	801e1e4 <__swsetup_r+0x30>
 801e1d4:	2209      	movs	r2, #9
 801e1d6:	602a      	str	r2, [r5, #0]
 801e1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1dc:	81a3      	strh	r3, [r4, #12]
 801e1de:	f04f 30ff 	mov.w	r0, #4294967295
 801e1e2:	e033      	b.n	801e24c <__swsetup_r+0x98>
 801e1e4:	0758      	lsls	r0, r3, #29
 801e1e6:	d512      	bpl.n	801e20e <__swsetup_r+0x5a>
 801e1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e1ea:	b141      	cbz	r1, 801e1fe <__swsetup_r+0x4a>
 801e1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e1f0:	4299      	cmp	r1, r3
 801e1f2:	d002      	beq.n	801e1fa <__swsetup_r+0x46>
 801e1f4:	4628      	mov	r0, r5
 801e1f6:	f000 f943 	bl	801e480 <_free_r>
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	6363      	str	r3, [r4, #52]	@ 0x34
 801e1fe:	89a3      	ldrh	r3, [r4, #12]
 801e200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e204:	81a3      	strh	r3, [r4, #12]
 801e206:	2300      	movs	r3, #0
 801e208:	6063      	str	r3, [r4, #4]
 801e20a:	6923      	ldr	r3, [r4, #16]
 801e20c:	6023      	str	r3, [r4, #0]
 801e20e:	89a3      	ldrh	r3, [r4, #12]
 801e210:	f043 0308 	orr.w	r3, r3, #8
 801e214:	81a3      	strh	r3, [r4, #12]
 801e216:	6923      	ldr	r3, [r4, #16]
 801e218:	b94b      	cbnz	r3, 801e22e <__swsetup_r+0x7a>
 801e21a:	89a3      	ldrh	r3, [r4, #12]
 801e21c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e224:	d003      	beq.n	801e22e <__swsetup_r+0x7a>
 801e226:	4621      	mov	r1, r4
 801e228:	4628      	mov	r0, r5
 801e22a:	f000 fddb 	bl	801ede4 <__smakebuf_r>
 801e22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e232:	f013 0201 	ands.w	r2, r3, #1
 801e236:	d00a      	beq.n	801e24e <__swsetup_r+0x9a>
 801e238:	2200      	movs	r2, #0
 801e23a:	60a2      	str	r2, [r4, #8]
 801e23c:	6962      	ldr	r2, [r4, #20]
 801e23e:	4252      	negs	r2, r2
 801e240:	61a2      	str	r2, [r4, #24]
 801e242:	6922      	ldr	r2, [r4, #16]
 801e244:	b942      	cbnz	r2, 801e258 <__swsetup_r+0xa4>
 801e246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e24a:	d1c5      	bne.n	801e1d8 <__swsetup_r+0x24>
 801e24c:	bd38      	pop	{r3, r4, r5, pc}
 801e24e:	0799      	lsls	r1, r3, #30
 801e250:	bf58      	it	pl
 801e252:	6962      	ldrpl	r2, [r4, #20]
 801e254:	60a2      	str	r2, [r4, #8]
 801e256:	e7f4      	b.n	801e242 <__swsetup_r+0x8e>
 801e258:	2000      	movs	r0, #0
 801e25a:	e7f7      	b.n	801e24c <__swsetup_r+0x98>
 801e25c:	2000003c 	.word	0x2000003c

0801e260 <memcmp>:
 801e260:	b510      	push	{r4, lr}
 801e262:	3901      	subs	r1, #1
 801e264:	4402      	add	r2, r0
 801e266:	4290      	cmp	r0, r2
 801e268:	d101      	bne.n	801e26e <memcmp+0xe>
 801e26a:	2000      	movs	r0, #0
 801e26c:	e005      	b.n	801e27a <memcmp+0x1a>
 801e26e:	7803      	ldrb	r3, [r0, #0]
 801e270:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e274:	42a3      	cmp	r3, r4
 801e276:	d001      	beq.n	801e27c <memcmp+0x1c>
 801e278:	1b18      	subs	r0, r3, r4
 801e27a:	bd10      	pop	{r4, pc}
 801e27c:	3001      	adds	r0, #1
 801e27e:	e7f2      	b.n	801e266 <memcmp+0x6>

0801e280 <memset>:
 801e280:	4402      	add	r2, r0
 801e282:	4603      	mov	r3, r0
 801e284:	4293      	cmp	r3, r2
 801e286:	d100      	bne.n	801e28a <memset+0xa>
 801e288:	4770      	bx	lr
 801e28a:	f803 1b01 	strb.w	r1, [r3], #1
 801e28e:	e7f9      	b.n	801e284 <memset+0x4>

0801e290 <_close_r>:
 801e290:	b538      	push	{r3, r4, r5, lr}
 801e292:	4d06      	ldr	r5, [pc, #24]	@ (801e2ac <_close_r+0x1c>)
 801e294:	2300      	movs	r3, #0
 801e296:	4604      	mov	r4, r0
 801e298:	4608      	mov	r0, r1
 801e29a:	602b      	str	r3, [r5, #0]
 801e29c:	f7e4 f8f0 	bl	8002480 <_close>
 801e2a0:	1c43      	adds	r3, r0, #1
 801e2a2:	d102      	bne.n	801e2aa <_close_r+0x1a>
 801e2a4:	682b      	ldr	r3, [r5, #0]
 801e2a6:	b103      	cbz	r3, 801e2aa <_close_r+0x1a>
 801e2a8:	6023      	str	r3, [r4, #0]
 801e2aa:	bd38      	pop	{r3, r4, r5, pc}
 801e2ac:	20027e4c 	.word	0x20027e4c

0801e2b0 <_reclaim_reent>:
 801e2b0:	4b2d      	ldr	r3, [pc, #180]	@ (801e368 <_reclaim_reent+0xb8>)
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	4283      	cmp	r3, r0
 801e2b6:	b570      	push	{r4, r5, r6, lr}
 801e2b8:	4604      	mov	r4, r0
 801e2ba:	d053      	beq.n	801e364 <_reclaim_reent+0xb4>
 801e2bc:	69c3      	ldr	r3, [r0, #28]
 801e2be:	b31b      	cbz	r3, 801e308 <_reclaim_reent+0x58>
 801e2c0:	68db      	ldr	r3, [r3, #12]
 801e2c2:	b163      	cbz	r3, 801e2de <_reclaim_reent+0x2e>
 801e2c4:	2500      	movs	r5, #0
 801e2c6:	69e3      	ldr	r3, [r4, #28]
 801e2c8:	68db      	ldr	r3, [r3, #12]
 801e2ca:	5959      	ldr	r1, [r3, r5]
 801e2cc:	b9b1      	cbnz	r1, 801e2fc <_reclaim_reent+0x4c>
 801e2ce:	3504      	adds	r5, #4
 801e2d0:	2d80      	cmp	r5, #128	@ 0x80
 801e2d2:	d1f8      	bne.n	801e2c6 <_reclaim_reent+0x16>
 801e2d4:	69e3      	ldr	r3, [r4, #28]
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	68d9      	ldr	r1, [r3, #12]
 801e2da:	f000 f8d1 	bl	801e480 <_free_r>
 801e2de:	69e3      	ldr	r3, [r4, #28]
 801e2e0:	6819      	ldr	r1, [r3, #0]
 801e2e2:	b111      	cbz	r1, 801e2ea <_reclaim_reent+0x3a>
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f000 f8cb 	bl	801e480 <_free_r>
 801e2ea:	69e3      	ldr	r3, [r4, #28]
 801e2ec:	689d      	ldr	r5, [r3, #8]
 801e2ee:	b15d      	cbz	r5, 801e308 <_reclaim_reent+0x58>
 801e2f0:	4629      	mov	r1, r5
 801e2f2:	4620      	mov	r0, r4
 801e2f4:	682d      	ldr	r5, [r5, #0]
 801e2f6:	f000 f8c3 	bl	801e480 <_free_r>
 801e2fa:	e7f8      	b.n	801e2ee <_reclaim_reent+0x3e>
 801e2fc:	680e      	ldr	r6, [r1, #0]
 801e2fe:	4620      	mov	r0, r4
 801e300:	f000 f8be 	bl	801e480 <_free_r>
 801e304:	4631      	mov	r1, r6
 801e306:	e7e1      	b.n	801e2cc <_reclaim_reent+0x1c>
 801e308:	6961      	ldr	r1, [r4, #20]
 801e30a:	b111      	cbz	r1, 801e312 <_reclaim_reent+0x62>
 801e30c:	4620      	mov	r0, r4
 801e30e:	f000 f8b7 	bl	801e480 <_free_r>
 801e312:	69e1      	ldr	r1, [r4, #28]
 801e314:	b111      	cbz	r1, 801e31c <_reclaim_reent+0x6c>
 801e316:	4620      	mov	r0, r4
 801e318:	f000 f8b2 	bl	801e480 <_free_r>
 801e31c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e31e:	b111      	cbz	r1, 801e326 <_reclaim_reent+0x76>
 801e320:	4620      	mov	r0, r4
 801e322:	f000 f8ad 	bl	801e480 <_free_r>
 801e326:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e328:	b111      	cbz	r1, 801e330 <_reclaim_reent+0x80>
 801e32a:	4620      	mov	r0, r4
 801e32c:	f000 f8a8 	bl	801e480 <_free_r>
 801e330:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e332:	b111      	cbz	r1, 801e33a <_reclaim_reent+0x8a>
 801e334:	4620      	mov	r0, r4
 801e336:	f000 f8a3 	bl	801e480 <_free_r>
 801e33a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e33c:	b111      	cbz	r1, 801e344 <_reclaim_reent+0x94>
 801e33e:	4620      	mov	r0, r4
 801e340:	f000 f89e 	bl	801e480 <_free_r>
 801e344:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e346:	b111      	cbz	r1, 801e34e <_reclaim_reent+0x9e>
 801e348:	4620      	mov	r0, r4
 801e34a:	f000 f899 	bl	801e480 <_free_r>
 801e34e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e350:	b111      	cbz	r1, 801e358 <_reclaim_reent+0xa8>
 801e352:	4620      	mov	r0, r4
 801e354:	f000 f894 	bl	801e480 <_free_r>
 801e358:	6a23      	ldr	r3, [r4, #32]
 801e35a:	b11b      	cbz	r3, 801e364 <_reclaim_reent+0xb4>
 801e35c:	4620      	mov	r0, r4
 801e35e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e362:	4718      	bx	r3
 801e364:	bd70      	pop	{r4, r5, r6, pc}
 801e366:	bf00      	nop
 801e368:	2000003c 	.word	0x2000003c

0801e36c <_lseek_r>:
 801e36c:	b538      	push	{r3, r4, r5, lr}
 801e36e:	4d07      	ldr	r5, [pc, #28]	@ (801e38c <_lseek_r+0x20>)
 801e370:	4604      	mov	r4, r0
 801e372:	4608      	mov	r0, r1
 801e374:	4611      	mov	r1, r2
 801e376:	2200      	movs	r2, #0
 801e378:	602a      	str	r2, [r5, #0]
 801e37a:	461a      	mov	r2, r3
 801e37c:	f7e4 f8a7 	bl	80024ce <_lseek>
 801e380:	1c43      	adds	r3, r0, #1
 801e382:	d102      	bne.n	801e38a <_lseek_r+0x1e>
 801e384:	682b      	ldr	r3, [r5, #0]
 801e386:	b103      	cbz	r3, 801e38a <_lseek_r+0x1e>
 801e388:	6023      	str	r3, [r4, #0]
 801e38a:	bd38      	pop	{r3, r4, r5, pc}
 801e38c:	20027e4c 	.word	0x20027e4c

0801e390 <_read_r>:
 801e390:	b538      	push	{r3, r4, r5, lr}
 801e392:	4d07      	ldr	r5, [pc, #28]	@ (801e3b0 <_read_r+0x20>)
 801e394:	4604      	mov	r4, r0
 801e396:	4608      	mov	r0, r1
 801e398:	4611      	mov	r1, r2
 801e39a:	2200      	movs	r2, #0
 801e39c:	602a      	str	r2, [r5, #0]
 801e39e:	461a      	mov	r2, r3
 801e3a0:	f7e4 f835 	bl	800240e <_read>
 801e3a4:	1c43      	adds	r3, r0, #1
 801e3a6:	d102      	bne.n	801e3ae <_read_r+0x1e>
 801e3a8:	682b      	ldr	r3, [r5, #0]
 801e3aa:	b103      	cbz	r3, 801e3ae <_read_r+0x1e>
 801e3ac:	6023      	str	r3, [r4, #0]
 801e3ae:	bd38      	pop	{r3, r4, r5, pc}
 801e3b0:	20027e4c 	.word	0x20027e4c

0801e3b4 <_write_r>:
 801e3b4:	b538      	push	{r3, r4, r5, lr}
 801e3b6:	4d07      	ldr	r5, [pc, #28]	@ (801e3d4 <_write_r+0x20>)
 801e3b8:	4604      	mov	r4, r0
 801e3ba:	4608      	mov	r0, r1
 801e3bc:	4611      	mov	r1, r2
 801e3be:	2200      	movs	r2, #0
 801e3c0:	602a      	str	r2, [r5, #0]
 801e3c2:	461a      	mov	r2, r3
 801e3c4:	f7e4 f840 	bl	8002448 <_write>
 801e3c8:	1c43      	adds	r3, r0, #1
 801e3ca:	d102      	bne.n	801e3d2 <_write_r+0x1e>
 801e3cc:	682b      	ldr	r3, [r5, #0]
 801e3ce:	b103      	cbz	r3, 801e3d2 <_write_r+0x1e>
 801e3d0:	6023      	str	r3, [r4, #0]
 801e3d2:	bd38      	pop	{r3, r4, r5, pc}
 801e3d4:	20027e4c 	.word	0x20027e4c

0801e3d8 <__libc_init_array>:
 801e3d8:	b570      	push	{r4, r5, r6, lr}
 801e3da:	4d0d      	ldr	r5, [pc, #52]	@ (801e410 <__libc_init_array+0x38>)
 801e3dc:	4c0d      	ldr	r4, [pc, #52]	@ (801e414 <__libc_init_array+0x3c>)
 801e3de:	1b64      	subs	r4, r4, r5
 801e3e0:	10a4      	asrs	r4, r4, #2
 801e3e2:	2600      	movs	r6, #0
 801e3e4:	42a6      	cmp	r6, r4
 801e3e6:	d109      	bne.n	801e3fc <__libc_init_array+0x24>
 801e3e8:	4d0b      	ldr	r5, [pc, #44]	@ (801e418 <__libc_init_array+0x40>)
 801e3ea:	4c0c      	ldr	r4, [pc, #48]	@ (801e41c <__libc_init_array+0x44>)
 801e3ec:	f000 fdb4 	bl	801ef58 <_init>
 801e3f0:	1b64      	subs	r4, r4, r5
 801e3f2:	10a4      	asrs	r4, r4, #2
 801e3f4:	2600      	movs	r6, #0
 801e3f6:	42a6      	cmp	r6, r4
 801e3f8:	d105      	bne.n	801e406 <__libc_init_array+0x2e>
 801e3fa:	bd70      	pop	{r4, r5, r6, pc}
 801e3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801e400:	4798      	blx	r3
 801e402:	3601      	adds	r6, #1
 801e404:	e7ee      	b.n	801e3e4 <__libc_init_array+0xc>
 801e406:	f855 3b04 	ldr.w	r3, [r5], #4
 801e40a:	4798      	blx	r3
 801e40c:	3601      	adds	r6, #1
 801e40e:	e7f2      	b.n	801e3f6 <__libc_init_array+0x1e>
 801e410:	080223e0 	.word	0x080223e0
 801e414:	080223e0 	.word	0x080223e0
 801e418:	080223e0 	.word	0x080223e0
 801e41c:	080223e4 	.word	0x080223e4

0801e420 <__retarget_lock_init_recursive>:
 801e420:	4770      	bx	lr

0801e422 <__retarget_lock_acquire_recursive>:
 801e422:	4770      	bx	lr

0801e424 <__retarget_lock_release_recursive>:
 801e424:	4770      	bx	lr

0801e426 <memcpy>:
 801e426:	440a      	add	r2, r1
 801e428:	4291      	cmp	r1, r2
 801e42a:	f100 33ff 	add.w	r3, r0, #4294967295
 801e42e:	d100      	bne.n	801e432 <memcpy+0xc>
 801e430:	4770      	bx	lr
 801e432:	b510      	push	{r4, lr}
 801e434:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e438:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e43c:	4291      	cmp	r1, r2
 801e43e:	d1f9      	bne.n	801e434 <memcpy+0xe>
 801e440:	bd10      	pop	{r4, pc}
	...

0801e444 <__assert_func>:
 801e444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e446:	4614      	mov	r4, r2
 801e448:	461a      	mov	r2, r3
 801e44a:	4b09      	ldr	r3, [pc, #36]	@ (801e470 <__assert_func+0x2c>)
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	4605      	mov	r5, r0
 801e450:	68d8      	ldr	r0, [r3, #12]
 801e452:	b14c      	cbz	r4, 801e468 <__assert_func+0x24>
 801e454:	4b07      	ldr	r3, [pc, #28]	@ (801e474 <__assert_func+0x30>)
 801e456:	9100      	str	r1, [sp, #0]
 801e458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e45c:	4906      	ldr	r1, [pc, #24]	@ (801e478 <__assert_func+0x34>)
 801e45e:	462b      	mov	r3, r5
 801e460:	f000 fc88 	bl	801ed74 <fiprintf>
 801e464:	f000 fd2c 	bl	801eec0 <abort>
 801e468:	4b04      	ldr	r3, [pc, #16]	@ (801e47c <__assert_func+0x38>)
 801e46a:	461c      	mov	r4, r3
 801e46c:	e7f3      	b.n	801e456 <__assert_func+0x12>
 801e46e:	bf00      	nop
 801e470:	2000003c 	.word	0x2000003c
 801e474:	08022369 	.word	0x08022369
 801e478:	08022376 	.word	0x08022376
 801e47c:	080223a4 	.word	0x080223a4

0801e480 <_free_r>:
 801e480:	b538      	push	{r3, r4, r5, lr}
 801e482:	4605      	mov	r5, r0
 801e484:	2900      	cmp	r1, #0
 801e486:	d041      	beq.n	801e50c <_free_r+0x8c>
 801e488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e48c:	1f0c      	subs	r4, r1, #4
 801e48e:	2b00      	cmp	r3, #0
 801e490:	bfb8      	it	lt
 801e492:	18e4      	addlt	r4, r4, r3
 801e494:	f000 f8e8 	bl	801e668 <__malloc_lock>
 801e498:	4a1d      	ldr	r2, [pc, #116]	@ (801e510 <_free_r+0x90>)
 801e49a:	6813      	ldr	r3, [r2, #0]
 801e49c:	b933      	cbnz	r3, 801e4ac <_free_r+0x2c>
 801e49e:	6063      	str	r3, [r4, #4]
 801e4a0:	6014      	str	r4, [r2, #0]
 801e4a2:	4628      	mov	r0, r5
 801e4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4a8:	f000 b8e4 	b.w	801e674 <__malloc_unlock>
 801e4ac:	42a3      	cmp	r3, r4
 801e4ae:	d908      	bls.n	801e4c2 <_free_r+0x42>
 801e4b0:	6820      	ldr	r0, [r4, #0]
 801e4b2:	1821      	adds	r1, r4, r0
 801e4b4:	428b      	cmp	r3, r1
 801e4b6:	bf01      	itttt	eq
 801e4b8:	6819      	ldreq	r1, [r3, #0]
 801e4ba:	685b      	ldreq	r3, [r3, #4]
 801e4bc:	1809      	addeq	r1, r1, r0
 801e4be:	6021      	streq	r1, [r4, #0]
 801e4c0:	e7ed      	b.n	801e49e <_free_r+0x1e>
 801e4c2:	461a      	mov	r2, r3
 801e4c4:	685b      	ldr	r3, [r3, #4]
 801e4c6:	b10b      	cbz	r3, 801e4cc <_free_r+0x4c>
 801e4c8:	42a3      	cmp	r3, r4
 801e4ca:	d9fa      	bls.n	801e4c2 <_free_r+0x42>
 801e4cc:	6811      	ldr	r1, [r2, #0]
 801e4ce:	1850      	adds	r0, r2, r1
 801e4d0:	42a0      	cmp	r0, r4
 801e4d2:	d10b      	bne.n	801e4ec <_free_r+0x6c>
 801e4d4:	6820      	ldr	r0, [r4, #0]
 801e4d6:	4401      	add	r1, r0
 801e4d8:	1850      	adds	r0, r2, r1
 801e4da:	4283      	cmp	r3, r0
 801e4dc:	6011      	str	r1, [r2, #0]
 801e4de:	d1e0      	bne.n	801e4a2 <_free_r+0x22>
 801e4e0:	6818      	ldr	r0, [r3, #0]
 801e4e2:	685b      	ldr	r3, [r3, #4]
 801e4e4:	6053      	str	r3, [r2, #4]
 801e4e6:	4408      	add	r0, r1
 801e4e8:	6010      	str	r0, [r2, #0]
 801e4ea:	e7da      	b.n	801e4a2 <_free_r+0x22>
 801e4ec:	d902      	bls.n	801e4f4 <_free_r+0x74>
 801e4ee:	230c      	movs	r3, #12
 801e4f0:	602b      	str	r3, [r5, #0]
 801e4f2:	e7d6      	b.n	801e4a2 <_free_r+0x22>
 801e4f4:	6820      	ldr	r0, [r4, #0]
 801e4f6:	1821      	adds	r1, r4, r0
 801e4f8:	428b      	cmp	r3, r1
 801e4fa:	bf04      	itt	eq
 801e4fc:	6819      	ldreq	r1, [r3, #0]
 801e4fe:	685b      	ldreq	r3, [r3, #4]
 801e500:	6063      	str	r3, [r4, #4]
 801e502:	bf04      	itt	eq
 801e504:	1809      	addeq	r1, r1, r0
 801e506:	6021      	streq	r1, [r4, #0]
 801e508:	6054      	str	r4, [r2, #4]
 801e50a:	e7ca      	b.n	801e4a2 <_free_r+0x22>
 801e50c:	bd38      	pop	{r3, r4, r5, pc}
 801e50e:	bf00      	nop
 801e510:	20027e58 	.word	0x20027e58

0801e514 <malloc>:
 801e514:	4b02      	ldr	r3, [pc, #8]	@ (801e520 <malloc+0xc>)
 801e516:	4601      	mov	r1, r0
 801e518:	6818      	ldr	r0, [r3, #0]
 801e51a:	f000 b825 	b.w	801e568 <_malloc_r>
 801e51e:	bf00      	nop
 801e520:	2000003c 	.word	0x2000003c

0801e524 <sbrk_aligned>:
 801e524:	b570      	push	{r4, r5, r6, lr}
 801e526:	4e0f      	ldr	r6, [pc, #60]	@ (801e564 <sbrk_aligned+0x40>)
 801e528:	460c      	mov	r4, r1
 801e52a:	6831      	ldr	r1, [r6, #0]
 801e52c:	4605      	mov	r5, r0
 801e52e:	b911      	cbnz	r1, 801e536 <sbrk_aligned+0x12>
 801e530:	f000 fcb6 	bl	801eea0 <_sbrk_r>
 801e534:	6030      	str	r0, [r6, #0]
 801e536:	4621      	mov	r1, r4
 801e538:	4628      	mov	r0, r5
 801e53a:	f000 fcb1 	bl	801eea0 <_sbrk_r>
 801e53e:	1c43      	adds	r3, r0, #1
 801e540:	d103      	bne.n	801e54a <sbrk_aligned+0x26>
 801e542:	f04f 34ff 	mov.w	r4, #4294967295
 801e546:	4620      	mov	r0, r4
 801e548:	bd70      	pop	{r4, r5, r6, pc}
 801e54a:	1cc4      	adds	r4, r0, #3
 801e54c:	f024 0403 	bic.w	r4, r4, #3
 801e550:	42a0      	cmp	r0, r4
 801e552:	d0f8      	beq.n	801e546 <sbrk_aligned+0x22>
 801e554:	1a21      	subs	r1, r4, r0
 801e556:	4628      	mov	r0, r5
 801e558:	f000 fca2 	bl	801eea0 <_sbrk_r>
 801e55c:	3001      	adds	r0, #1
 801e55e:	d1f2      	bne.n	801e546 <sbrk_aligned+0x22>
 801e560:	e7ef      	b.n	801e542 <sbrk_aligned+0x1e>
 801e562:	bf00      	nop
 801e564:	20027e54 	.word	0x20027e54

0801e568 <_malloc_r>:
 801e568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e56c:	1ccd      	adds	r5, r1, #3
 801e56e:	f025 0503 	bic.w	r5, r5, #3
 801e572:	3508      	adds	r5, #8
 801e574:	2d0c      	cmp	r5, #12
 801e576:	bf38      	it	cc
 801e578:	250c      	movcc	r5, #12
 801e57a:	2d00      	cmp	r5, #0
 801e57c:	4606      	mov	r6, r0
 801e57e:	db01      	blt.n	801e584 <_malloc_r+0x1c>
 801e580:	42a9      	cmp	r1, r5
 801e582:	d904      	bls.n	801e58e <_malloc_r+0x26>
 801e584:	230c      	movs	r3, #12
 801e586:	6033      	str	r3, [r6, #0]
 801e588:	2000      	movs	r0, #0
 801e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e58e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e664 <_malloc_r+0xfc>
 801e592:	f000 f869 	bl	801e668 <__malloc_lock>
 801e596:	f8d8 3000 	ldr.w	r3, [r8]
 801e59a:	461c      	mov	r4, r3
 801e59c:	bb44      	cbnz	r4, 801e5f0 <_malloc_r+0x88>
 801e59e:	4629      	mov	r1, r5
 801e5a0:	4630      	mov	r0, r6
 801e5a2:	f7ff ffbf 	bl	801e524 <sbrk_aligned>
 801e5a6:	1c43      	adds	r3, r0, #1
 801e5a8:	4604      	mov	r4, r0
 801e5aa:	d158      	bne.n	801e65e <_malloc_r+0xf6>
 801e5ac:	f8d8 4000 	ldr.w	r4, [r8]
 801e5b0:	4627      	mov	r7, r4
 801e5b2:	2f00      	cmp	r7, #0
 801e5b4:	d143      	bne.n	801e63e <_malloc_r+0xd6>
 801e5b6:	2c00      	cmp	r4, #0
 801e5b8:	d04b      	beq.n	801e652 <_malloc_r+0xea>
 801e5ba:	6823      	ldr	r3, [r4, #0]
 801e5bc:	4639      	mov	r1, r7
 801e5be:	4630      	mov	r0, r6
 801e5c0:	eb04 0903 	add.w	r9, r4, r3
 801e5c4:	f000 fc6c 	bl	801eea0 <_sbrk_r>
 801e5c8:	4581      	cmp	r9, r0
 801e5ca:	d142      	bne.n	801e652 <_malloc_r+0xea>
 801e5cc:	6821      	ldr	r1, [r4, #0]
 801e5ce:	1a6d      	subs	r5, r5, r1
 801e5d0:	4629      	mov	r1, r5
 801e5d2:	4630      	mov	r0, r6
 801e5d4:	f7ff ffa6 	bl	801e524 <sbrk_aligned>
 801e5d8:	3001      	adds	r0, #1
 801e5da:	d03a      	beq.n	801e652 <_malloc_r+0xea>
 801e5dc:	6823      	ldr	r3, [r4, #0]
 801e5de:	442b      	add	r3, r5
 801e5e0:	6023      	str	r3, [r4, #0]
 801e5e2:	f8d8 3000 	ldr.w	r3, [r8]
 801e5e6:	685a      	ldr	r2, [r3, #4]
 801e5e8:	bb62      	cbnz	r2, 801e644 <_malloc_r+0xdc>
 801e5ea:	f8c8 7000 	str.w	r7, [r8]
 801e5ee:	e00f      	b.n	801e610 <_malloc_r+0xa8>
 801e5f0:	6822      	ldr	r2, [r4, #0]
 801e5f2:	1b52      	subs	r2, r2, r5
 801e5f4:	d420      	bmi.n	801e638 <_malloc_r+0xd0>
 801e5f6:	2a0b      	cmp	r2, #11
 801e5f8:	d917      	bls.n	801e62a <_malloc_r+0xc2>
 801e5fa:	1961      	adds	r1, r4, r5
 801e5fc:	42a3      	cmp	r3, r4
 801e5fe:	6025      	str	r5, [r4, #0]
 801e600:	bf18      	it	ne
 801e602:	6059      	strne	r1, [r3, #4]
 801e604:	6863      	ldr	r3, [r4, #4]
 801e606:	bf08      	it	eq
 801e608:	f8c8 1000 	streq.w	r1, [r8]
 801e60c:	5162      	str	r2, [r4, r5]
 801e60e:	604b      	str	r3, [r1, #4]
 801e610:	4630      	mov	r0, r6
 801e612:	f000 f82f 	bl	801e674 <__malloc_unlock>
 801e616:	f104 000b 	add.w	r0, r4, #11
 801e61a:	1d23      	adds	r3, r4, #4
 801e61c:	f020 0007 	bic.w	r0, r0, #7
 801e620:	1ac2      	subs	r2, r0, r3
 801e622:	bf1c      	itt	ne
 801e624:	1a1b      	subne	r3, r3, r0
 801e626:	50a3      	strne	r3, [r4, r2]
 801e628:	e7af      	b.n	801e58a <_malloc_r+0x22>
 801e62a:	6862      	ldr	r2, [r4, #4]
 801e62c:	42a3      	cmp	r3, r4
 801e62e:	bf0c      	ite	eq
 801e630:	f8c8 2000 	streq.w	r2, [r8]
 801e634:	605a      	strne	r2, [r3, #4]
 801e636:	e7eb      	b.n	801e610 <_malloc_r+0xa8>
 801e638:	4623      	mov	r3, r4
 801e63a:	6864      	ldr	r4, [r4, #4]
 801e63c:	e7ae      	b.n	801e59c <_malloc_r+0x34>
 801e63e:	463c      	mov	r4, r7
 801e640:	687f      	ldr	r7, [r7, #4]
 801e642:	e7b6      	b.n	801e5b2 <_malloc_r+0x4a>
 801e644:	461a      	mov	r2, r3
 801e646:	685b      	ldr	r3, [r3, #4]
 801e648:	42a3      	cmp	r3, r4
 801e64a:	d1fb      	bne.n	801e644 <_malloc_r+0xdc>
 801e64c:	2300      	movs	r3, #0
 801e64e:	6053      	str	r3, [r2, #4]
 801e650:	e7de      	b.n	801e610 <_malloc_r+0xa8>
 801e652:	230c      	movs	r3, #12
 801e654:	6033      	str	r3, [r6, #0]
 801e656:	4630      	mov	r0, r6
 801e658:	f000 f80c 	bl	801e674 <__malloc_unlock>
 801e65c:	e794      	b.n	801e588 <_malloc_r+0x20>
 801e65e:	6005      	str	r5, [r0, #0]
 801e660:	e7d6      	b.n	801e610 <_malloc_r+0xa8>
 801e662:	bf00      	nop
 801e664:	20027e58 	.word	0x20027e58

0801e668 <__malloc_lock>:
 801e668:	4801      	ldr	r0, [pc, #4]	@ (801e670 <__malloc_lock+0x8>)
 801e66a:	f7ff beda 	b.w	801e422 <__retarget_lock_acquire_recursive>
 801e66e:	bf00      	nop
 801e670:	20027e50 	.word	0x20027e50

0801e674 <__malloc_unlock>:
 801e674:	4801      	ldr	r0, [pc, #4]	@ (801e67c <__malloc_unlock+0x8>)
 801e676:	f7ff bed5 	b.w	801e424 <__retarget_lock_release_recursive>
 801e67a:	bf00      	nop
 801e67c:	20027e50 	.word	0x20027e50

0801e680 <__sfputc_r>:
 801e680:	6893      	ldr	r3, [r2, #8]
 801e682:	3b01      	subs	r3, #1
 801e684:	2b00      	cmp	r3, #0
 801e686:	b410      	push	{r4}
 801e688:	6093      	str	r3, [r2, #8]
 801e68a:	da08      	bge.n	801e69e <__sfputc_r+0x1e>
 801e68c:	6994      	ldr	r4, [r2, #24]
 801e68e:	42a3      	cmp	r3, r4
 801e690:	db01      	blt.n	801e696 <__sfputc_r+0x16>
 801e692:	290a      	cmp	r1, #10
 801e694:	d103      	bne.n	801e69e <__sfputc_r+0x1e>
 801e696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e69a:	f7ff bd4c 	b.w	801e136 <__swbuf_r>
 801e69e:	6813      	ldr	r3, [r2, #0]
 801e6a0:	1c58      	adds	r0, r3, #1
 801e6a2:	6010      	str	r0, [r2, #0]
 801e6a4:	7019      	strb	r1, [r3, #0]
 801e6a6:	4608      	mov	r0, r1
 801e6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6ac:	4770      	bx	lr

0801e6ae <__sfputs_r>:
 801e6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6b0:	4606      	mov	r6, r0
 801e6b2:	460f      	mov	r7, r1
 801e6b4:	4614      	mov	r4, r2
 801e6b6:	18d5      	adds	r5, r2, r3
 801e6b8:	42ac      	cmp	r4, r5
 801e6ba:	d101      	bne.n	801e6c0 <__sfputs_r+0x12>
 801e6bc:	2000      	movs	r0, #0
 801e6be:	e007      	b.n	801e6d0 <__sfputs_r+0x22>
 801e6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6c4:	463a      	mov	r2, r7
 801e6c6:	4630      	mov	r0, r6
 801e6c8:	f7ff ffda 	bl	801e680 <__sfputc_r>
 801e6cc:	1c43      	adds	r3, r0, #1
 801e6ce:	d1f3      	bne.n	801e6b8 <__sfputs_r+0xa>
 801e6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e6d4 <_vfiprintf_r>:
 801e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d8:	460d      	mov	r5, r1
 801e6da:	b09d      	sub	sp, #116	@ 0x74
 801e6dc:	4614      	mov	r4, r2
 801e6de:	4698      	mov	r8, r3
 801e6e0:	4606      	mov	r6, r0
 801e6e2:	b118      	cbz	r0, 801e6ec <_vfiprintf_r+0x18>
 801e6e4:	6a03      	ldr	r3, [r0, #32]
 801e6e6:	b90b      	cbnz	r3, 801e6ec <_vfiprintf_r+0x18>
 801e6e8:	f7ff fc3c 	bl	801df64 <__sinit>
 801e6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e6ee:	07d9      	lsls	r1, r3, #31
 801e6f0:	d405      	bmi.n	801e6fe <_vfiprintf_r+0x2a>
 801e6f2:	89ab      	ldrh	r3, [r5, #12]
 801e6f4:	059a      	lsls	r2, r3, #22
 801e6f6:	d402      	bmi.n	801e6fe <_vfiprintf_r+0x2a>
 801e6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e6fa:	f7ff fe92 	bl	801e422 <__retarget_lock_acquire_recursive>
 801e6fe:	89ab      	ldrh	r3, [r5, #12]
 801e700:	071b      	lsls	r3, r3, #28
 801e702:	d501      	bpl.n	801e708 <_vfiprintf_r+0x34>
 801e704:	692b      	ldr	r3, [r5, #16]
 801e706:	b99b      	cbnz	r3, 801e730 <_vfiprintf_r+0x5c>
 801e708:	4629      	mov	r1, r5
 801e70a:	4630      	mov	r0, r6
 801e70c:	f7ff fd52 	bl	801e1b4 <__swsetup_r>
 801e710:	b170      	cbz	r0, 801e730 <_vfiprintf_r+0x5c>
 801e712:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e714:	07dc      	lsls	r4, r3, #31
 801e716:	d504      	bpl.n	801e722 <_vfiprintf_r+0x4e>
 801e718:	f04f 30ff 	mov.w	r0, #4294967295
 801e71c:	b01d      	add	sp, #116	@ 0x74
 801e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e722:	89ab      	ldrh	r3, [r5, #12]
 801e724:	0598      	lsls	r0, r3, #22
 801e726:	d4f7      	bmi.n	801e718 <_vfiprintf_r+0x44>
 801e728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e72a:	f7ff fe7b 	bl	801e424 <__retarget_lock_release_recursive>
 801e72e:	e7f3      	b.n	801e718 <_vfiprintf_r+0x44>
 801e730:	2300      	movs	r3, #0
 801e732:	9309      	str	r3, [sp, #36]	@ 0x24
 801e734:	2320      	movs	r3, #32
 801e736:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e73a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e73e:	2330      	movs	r3, #48	@ 0x30
 801e740:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e8f0 <_vfiprintf_r+0x21c>
 801e744:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e748:	f04f 0901 	mov.w	r9, #1
 801e74c:	4623      	mov	r3, r4
 801e74e:	469a      	mov	sl, r3
 801e750:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e754:	b10a      	cbz	r2, 801e75a <_vfiprintf_r+0x86>
 801e756:	2a25      	cmp	r2, #37	@ 0x25
 801e758:	d1f9      	bne.n	801e74e <_vfiprintf_r+0x7a>
 801e75a:	ebba 0b04 	subs.w	fp, sl, r4
 801e75e:	d00b      	beq.n	801e778 <_vfiprintf_r+0xa4>
 801e760:	465b      	mov	r3, fp
 801e762:	4622      	mov	r2, r4
 801e764:	4629      	mov	r1, r5
 801e766:	4630      	mov	r0, r6
 801e768:	f7ff ffa1 	bl	801e6ae <__sfputs_r>
 801e76c:	3001      	adds	r0, #1
 801e76e:	f000 80a7 	beq.w	801e8c0 <_vfiprintf_r+0x1ec>
 801e772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e774:	445a      	add	r2, fp
 801e776:	9209      	str	r2, [sp, #36]	@ 0x24
 801e778:	f89a 3000 	ldrb.w	r3, [sl]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	f000 809f 	beq.w	801e8c0 <_vfiprintf_r+0x1ec>
 801e782:	2300      	movs	r3, #0
 801e784:	f04f 32ff 	mov.w	r2, #4294967295
 801e788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e78c:	f10a 0a01 	add.w	sl, sl, #1
 801e790:	9304      	str	r3, [sp, #16]
 801e792:	9307      	str	r3, [sp, #28]
 801e794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e798:	931a      	str	r3, [sp, #104]	@ 0x68
 801e79a:	4654      	mov	r4, sl
 801e79c:	2205      	movs	r2, #5
 801e79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7a2:	4853      	ldr	r0, [pc, #332]	@ (801e8f0 <_vfiprintf_r+0x21c>)
 801e7a4:	f7e1 fd34 	bl	8000210 <memchr>
 801e7a8:	9a04      	ldr	r2, [sp, #16]
 801e7aa:	b9d8      	cbnz	r0, 801e7e4 <_vfiprintf_r+0x110>
 801e7ac:	06d1      	lsls	r1, r2, #27
 801e7ae:	bf44      	itt	mi
 801e7b0:	2320      	movmi	r3, #32
 801e7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e7b6:	0713      	lsls	r3, r2, #28
 801e7b8:	bf44      	itt	mi
 801e7ba:	232b      	movmi	r3, #43	@ 0x2b
 801e7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e7c0:	f89a 3000 	ldrb.w	r3, [sl]
 801e7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801e7c6:	d015      	beq.n	801e7f4 <_vfiprintf_r+0x120>
 801e7c8:	9a07      	ldr	r2, [sp, #28]
 801e7ca:	4654      	mov	r4, sl
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	f04f 0c0a 	mov.w	ip, #10
 801e7d2:	4621      	mov	r1, r4
 801e7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7d8:	3b30      	subs	r3, #48	@ 0x30
 801e7da:	2b09      	cmp	r3, #9
 801e7dc:	d94b      	bls.n	801e876 <_vfiprintf_r+0x1a2>
 801e7de:	b1b0      	cbz	r0, 801e80e <_vfiprintf_r+0x13a>
 801e7e0:	9207      	str	r2, [sp, #28]
 801e7e2:	e014      	b.n	801e80e <_vfiprintf_r+0x13a>
 801e7e4:	eba0 0308 	sub.w	r3, r0, r8
 801e7e8:	fa09 f303 	lsl.w	r3, r9, r3
 801e7ec:	4313      	orrs	r3, r2
 801e7ee:	9304      	str	r3, [sp, #16]
 801e7f0:	46a2      	mov	sl, r4
 801e7f2:	e7d2      	b.n	801e79a <_vfiprintf_r+0xc6>
 801e7f4:	9b03      	ldr	r3, [sp, #12]
 801e7f6:	1d19      	adds	r1, r3, #4
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	9103      	str	r1, [sp, #12]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	bfbb      	ittet	lt
 801e800:	425b      	neglt	r3, r3
 801e802:	f042 0202 	orrlt.w	r2, r2, #2
 801e806:	9307      	strge	r3, [sp, #28]
 801e808:	9307      	strlt	r3, [sp, #28]
 801e80a:	bfb8      	it	lt
 801e80c:	9204      	strlt	r2, [sp, #16]
 801e80e:	7823      	ldrb	r3, [r4, #0]
 801e810:	2b2e      	cmp	r3, #46	@ 0x2e
 801e812:	d10a      	bne.n	801e82a <_vfiprintf_r+0x156>
 801e814:	7863      	ldrb	r3, [r4, #1]
 801e816:	2b2a      	cmp	r3, #42	@ 0x2a
 801e818:	d132      	bne.n	801e880 <_vfiprintf_r+0x1ac>
 801e81a:	9b03      	ldr	r3, [sp, #12]
 801e81c:	1d1a      	adds	r2, r3, #4
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	9203      	str	r2, [sp, #12]
 801e822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e826:	3402      	adds	r4, #2
 801e828:	9305      	str	r3, [sp, #20]
 801e82a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e900 <_vfiprintf_r+0x22c>
 801e82e:	7821      	ldrb	r1, [r4, #0]
 801e830:	2203      	movs	r2, #3
 801e832:	4650      	mov	r0, sl
 801e834:	f7e1 fcec 	bl	8000210 <memchr>
 801e838:	b138      	cbz	r0, 801e84a <_vfiprintf_r+0x176>
 801e83a:	9b04      	ldr	r3, [sp, #16]
 801e83c:	eba0 000a 	sub.w	r0, r0, sl
 801e840:	2240      	movs	r2, #64	@ 0x40
 801e842:	4082      	lsls	r2, r0
 801e844:	4313      	orrs	r3, r2
 801e846:	3401      	adds	r4, #1
 801e848:	9304      	str	r3, [sp, #16]
 801e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e84e:	4829      	ldr	r0, [pc, #164]	@ (801e8f4 <_vfiprintf_r+0x220>)
 801e850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e854:	2206      	movs	r2, #6
 801e856:	f7e1 fcdb 	bl	8000210 <memchr>
 801e85a:	2800      	cmp	r0, #0
 801e85c:	d03f      	beq.n	801e8de <_vfiprintf_r+0x20a>
 801e85e:	4b26      	ldr	r3, [pc, #152]	@ (801e8f8 <_vfiprintf_r+0x224>)
 801e860:	bb1b      	cbnz	r3, 801e8aa <_vfiprintf_r+0x1d6>
 801e862:	9b03      	ldr	r3, [sp, #12]
 801e864:	3307      	adds	r3, #7
 801e866:	f023 0307 	bic.w	r3, r3, #7
 801e86a:	3308      	adds	r3, #8
 801e86c:	9303      	str	r3, [sp, #12]
 801e86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e870:	443b      	add	r3, r7
 801e872:	9309      	str	r3, [sp, #36]	@ 0x24
 801e874:	e76a      	b.n	801e74c <_vfiprintf_r+0x78>
 801e876:	fb0c 3202 	mla	r2, ip, r2, r3
 801e87a:	460c      	mov	r4, r1
 801e87c:	2001      	movs	r0, #1
 801e87e:	e7a8      	b.n	801e7d2 <_vfiprintf_r+0xfe>
 801e880:	2300      	movs	r3, #0
 801e882:	3401      	adds	r4, #1
 801e884:	9305      	str	r3, [sp, #20]
 801e886:	4619      	mov	r1, r3
 801e888:	f04f 0c0a 	mov.w	ip, #10
 801e88c:	4620      	mov	r0, r4
 801e88e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e892:	3a30      	subs	r2, #48	@ 0x30
 801e894:	2a09      	cmp	r2, #9
 801e896:	d903      	bls.n	801e8a0 <_vfiprintf_r+0x1cc>
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d0c6      	beq.n	801e82a <_vfiprintf_r+0x156>
 801e89c:	9105      	str	r1, [sp, #20]
 801e89e:	e7c4      	b.n	801e82a <_vfiprintf_r+0x156>
 801e8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8a4:	4604      	mov	r4, r0
 801e8a6:	2301      	movs	r3, #1
 801e8a8:	e7f0      	b.n	801e88c <_vfiprintf_r+0x1b8>
 801e8aa:	ab03      	add	r3, sp, #12
 801e8ac:	9300      	str	r3, [sp, #0]
 801e8ae:	462a      	mov	r2, r5
 801e8b0:	4b12      	ldr	r3, [pc, #72]	@ (801e8fc <_vfiprintf_r+0x228>)
 801e8b2:	a904      	add	r1, sp, #16
 801e8b4:	4630      	mov	r0, r6
 801e8b6:	f3af 8000 	nop.w
 801e8ba:	4607      	mov	r7, r0
 801e8bc:	1c78      	adds	r0, r7, #1
 801e8be:	d1d6      	bne.n	801e86e <_vfiprintf_r+0x19a>
 801e8c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e8c2:	07d9      	lsls	r1, r3, #31
 801e8c4:	d405      	bmi.n	801e8d2 <_vfiprintf_r+0x1fe>
 801e8c6:	89ab      	ldrh	r3, [r5, #12]
 801e8c8:	059a      	lsls	r2, r3, #22
 801e8ca:	d402      	bmi.n	801e8d2 <_vfiprintf_r+0x1fe>
 801e8cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e8ce:	f7ff fda9 	bl	801e424 <__retarget_lock_release_recursive>
 801e8d2:	89ab      	ldrh	r3, [r5, #12]
 801e8d4:	065b      	lsls	r3, r3, #25
 801e8d6:	f53f af1f 	bmi.w	801e718 <_vfiprintf_r+0x44>
 801e8da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e8dc:	e71e      	b.n	801e71c <_vfiprintf_r+0x48>
 801e8de:	ab03      	add	r3, sp, #12
 801e8e0:	9300      	str	r3, [sp, #0]
 801e8e2:	462a      	mov	r2, r5
 801e8e4:	4b05      	ldr	r3, [pc, #20]	@ (801e8fc <_vfiprintf_r+0x228>)
 801e8e6:	a904      	add	r1, sp, #16
 801e8e8:	4630      	mov	r0, r6
 801e8ea:	f000 f879 	bl	801e9e0 <_printf_i>
 801e8ee:	e7e4      	b.n	801e8ba <_vfiprintf_r+0x1e6>
 801e8f0:	080223a5 	.word	0x080223a5
 801e8f4:	080223af 	.word	0x080223af
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	0801e6af 	.word	0x0801e6af
 801e900:	080223ab 	.word	0x080223ab

0801e904 <_printf_common>:
 801e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e908:	4616      	mov	r6, r2
 801e90a:	4698      	mov	r8, r3
 801e90c:	688a      	ldr	r2, [r1, #8]
 801e90e:	690b      	ldr	r3, [r1, #16]
 801e910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e914:	4293      	cmp	r3, r2
 801e916:	bfb8      	it	lt
 801e918:	4613      	movlt	r3, r2
 801e91a:	6033      	str	r3, [r6, #0]
 801e91c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e920:	4607      	mov	r7, r0
 801e922:	460c      	mov	r4, r1
 801e924:	b10a      	cbz	r2, 801e92a <_printf_common+0x26>
 801e926:	3301      	adds	r3, #1
 801e928:	6033      	str	r3, [r6, #0]
 801e92a:	6823      	ldr	r3, [r4, #0]
 801e92c:	0699      	lsls	r1, r3, #26
 801e92e:	bf42      	ittt	mi
 801e930:	6833      	ldrmi	r3, [r6, #0]
 801e932:	3302      	addmi	r3, #2
 801e934:	6033      	strmi	r3, [r6, #0]
 801e936:	6825      	ldr	r5, [r4, #0]
 801e938:	f015 0506 	ands.w	r5, r5, #6
 801e93c:	d106      	bne.n	801e94c <_printf_common+0x48>
 801e93e:	f104 0a19 	add.w	sl, r4, #25
 801e942:	68e3      	ldr	r3, [r4, #12]
 801e944:	6832      	ldr	r2, [r6, #0]
 801e946:	1a9b      	subs	r3, r3, r2
 801e948:	42ab      	cmp	r3, r5
 801e94a:	dc26      	bgt.n	801e99a <_printf_common+0x96>
 801e94c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e950:	6822      	ldr	r2, [r4, #0]
 801e952:	3b00      	subs	r3, #0
 801e954:	bf18      	it	ne
 801e956:	2301      	movne	r3, #1
 801e958:	0692      	lsls	r2, r2, #26
 801e95a:	d42b      	bmi.n	801e9b4 <_printf_common+0xb0>
 801e95c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e960:	4641      	mov	r1, r8
 801e962:	4638      	mov	r0, r7
 801e964:	47c8      	blx	r9
 801e966:	3001      	adds	r0, #1
 801e968:	d01e      	beq.n	801e9a8 <_printf_common+0xa4>
 801e96a:	6823      	ldr	r3, [r4, #0]
 801e96c:	6922      	ldr	r2, [r4, #16]
 801e96e:	f003 0306 	and.w	r3, r3, #6
 801e972:	2b04      	cmp	r3, #4
 801e974:	bf02      	ittt	eq
 801e976:	68e5      	ldreq	r5, [r4, #12]
 801e978:	6833      	ldreq	r3, [r6, #0]
 801e97a:	1aed      	subeq	r5, r5, r3
 801e97c:	68a3      	ldr	r3, [r4, #8]
 801e97e:	bf0c      	ite	eq
 801e980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e984:	2500      	movne	r5, #0
 801e986:	4293      	cmp	r3, r2
 801e988:	bfc4      	itt	gt
 801e98a:	1a9b      	subgt	r3, r3, r2
 801e98c:	18ed      	addgt	r5, r5, r3
 801e98e:	2600      	movs	r6, #0
 801e990:	341a      	adds	r4, #26
 801e992:	42b5      	cmp	r5, r6
 801e994:	d11a      	bne.n	801e9cc <_printf_common+0xc8>
 801e996:	2000      	movs	r0, #0
 801e998:	e008      	b.n	801e9ac <_printf_common+0xa8>
 801e99a:	2301      	movs	r3, #1
 801e99c:	4652      	mov	r2, sl
 801e99e:	4641      	mov	r1, r8
 801e9a0:	4638      	mov	r0, r7
 801e9a2:	47c8      	blx	r9
 801e9a4:	3001      	adds	r0, #1
 801e9a6:	d103      	bne.n	801e9b0 <_printf_common+0xac>
 801e9a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9b0:	3501      	adds	r5, #1
 801e9b2:	e7c6      	b.n	801e942 <_printf_common+0x3e>
 801e9b4:	18e1      	adds	r1, r4, r3
 801e9b6:	1c5a      	adds	r2, r3, #1
 801e9b8:	2030      	movs	r0, #48	@ 0x30
 801e9ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e9be:	4422      	add	r2, r4
 801e9c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e9c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e9c8:	3302      	adds	r3, #2
 801e9ca:	e7c7      	b.n	801e95c <_printf_common+0x58>
 801e9cc:	2301      	movs	r3, #1
 801e9ce:	4622      	mov	r2, r4
 801e9d0:	4641      	mov	r1, r8
 801e9d2:	4638      	mov	r0, r7
 801e9d4:	47c8      	blx	r9
 801e9d6:	3001      	adds	r0, #1
 801e9d8:	d0e6      	beq.n	801e9a8 <_printf_common+0xa4>
 801e9da:	3601      	adds	r6, #1
 801e9dc:	e7d9      	b.n	801e992 <_printf_common+0x8e>
	...

0801e9e0 <_printf_i>:
 801e9e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e9e4:	7e0f      	ldrb	r7, [r1, #24]
 801e9e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e9e8:	2f78      	cmp	r7, #120	@ 0x78
 801e9ea:	4691      	mov	r9, r2
 801e9ec:	4680      	mov	r8, r0
 801e9ee:	460c      	mov	r4, r1
 801e9f0:	469a      	mov	sl, r3
 801e9f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e9f6:	d807      	bhi.n	801ea08 <_printf_i+0x28>
 801e9f8:	2f62      	cmp	r7, #98	@ 0x62
 801e9fa:	d80a      	bhi.n	801ea12 <_printf_i+0x32>
 801e9fc:	2f00      	cmp	r7, #0
 801e9fe:	f000 80d1 	beq.w	801eba4 <_printf_i+0x1c4>
 801ea02:	2f58      	cmp	r7, #88	@ 0x58
 801ea04:	f000 80b8 	beq.w	801eb78 <_printf_i+0x198>
 801ea08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ea0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ea10:	e03a      	b.n	801ea88 <_printf_i+0xa8>
 801ea12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ea16:	2b15      	cmp	r3, #21
 801ea18:	d8f6      	bhi.n	801ea08 <_printf_i+0x28>
 801ea1a:	a101      	add	r1, pc, #4	@ (adr r1, 801ea20 <_printf_i+0x40>)
 801ea1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ea20:	0801ea79 	.word	0x0801ea79
 801ea24:	0801ea8d 	.word	0x0801ea8d
 801ea28:	0801ea09 	.word	0x0801ea09
 801ea2c:	0801ea09 	.word	0x0801ea09
 801ea30:	0801ea09 	.word	0x0801ea09
 801ea34:	0801ea09 	.word	0x0801ea09
 801ea38:	0801ea8d 	.word	0x0801ea8d
 801ea3c:	0801ea09 	.word	0x0801ea09
 801ea40:	0801ea09 	.word	0x0801ea09
 801ea44:	0801ea09 	.word	0x0801ea09
 801ea48:	0801ea09 	.word	0x0801ea09
 801ea4c:	0801eb8b 	.word	0x0801eb8b
 801ea50:	0801eab7 	.word	0x0801eab7
 801ea54:	0801eb45 	.word	0x0801eb45
 801ea58:	0801ea09 	.word	0x0801ea09
 801ea5c:	0801ea09 	.word	0x0801ea09
 801ea60:	0801ebad 	.word	0x0801ebad
 801ea64:	0801ea09 	.word	0x0801ea09
 801ea68:	0801eab7 	.word	0x0801eab7
 801ea6c:	0801ea09 	.word	0x0801ea09
 801ea70:	0801ea09 	.word	0x0801ea09
 801ea74:	0801eb4d 	.word	0x0801eb4d
 801ea78:	6833      	ldr	r3, [r6, #0]
 801ea7a:	1d1a      	adds	r2, r3, #4
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	6032      	str	r2, [r6, #0]
 801ea80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ea84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ea88:	2301      	movs	r3, #1
 801ea8a:	e09c      	b.n	801ebc6 <_printf_i+0x1e6>
 801ea8c:	6833      	ldr	r3, [r6, #0]
 801ea8e:	6820      	ldr	r0, [r4, #0]
 801ea90:	1d19      	adds	r1, r3, #4
 801ea92:	6031      	str	r1, [r6, #0]
 801ea94:	0606      	lsls	r6, r0, #24
 801ea96:	d501      	bpl.n	801ea9c <_printf_i+0xbc>
 801ea98:	681d      	ldr	r5, [r3, #0]
 801ea9a:	e003      	b.n	801eaa4 <_printf_i+0xc4>
 801ea9c:	0645      	lsls	r5, r0, #25
 801ea9e:	d5fb      	bpl.n	801ea98 <_printf_i+0xb8>
 801eaa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eaa4:	2d00      	cmp	r5, #0
 801eaa6:	da03      	bge.n	801eab0 <_printf_i+0xd0>
 801eaa8:	232d      	movs	r3, #45	@ 0x2d
 801eaaa:	426d      	negs	r5, r5
 801eaac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eab0:	4858      	ldr	r0, [pc, #352]	@ (801ec14 <_printf_i+0x234>)
 801eab2:	230a      	movs	r3, #10
 801eab4:	e011      	b.n	801eada <_printf_i+0xfa>
 801eab6:	6821      	ldr	r1, [r4, #0]
 801eab8:	6833      	ldr	r3, [r6, #0]
 801eaba:	0608      	lsls	r0, r1, #24
 801eabc:	f853 5b04 	ldr.w	r5, [r3], #4
 801eac0:	d402      	bmi.n	801eac8 <_printf_i+0xe8>
 801eac2:	0649      	lsls	r1, r1, #25
 801eac4:	bf48      	it	mi
 801eac6:	b2ad      	uxthmi	r5, r5
 801eac8:	2f6f      	cmp	r7, #111	@ 0x6f
 801eaca:	4852      	ldr	r0, [pc, #328]	@ (801ec14 <_printf_i+0x234>)
 801eacc:	6033      	str	r3, [r6, #0]
 801eace:	bf14      	ite	ne
 801ead0:	230a      	movne	r3, #10
 801ead2:	2308      	moveq	r3, #8
 801ead4:	2100      	movs	r1, #0
 801ead6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801eada:	6866      	ldr	r6, [r4, #4]
 801eadc:	60a6      	str	r6, [r4, #8]
 801eade:	2e00      	cmp	r6, #0
 801eae0:	db05      	blt.n	801eaee <_printf_i+0x10e>
 801eae2:	6821      	ldr	r1, [r4, #0]
 801eae4:	432e      	orrs	r6, r5
 801eae6:	f021 0104 	bic.w	r1, r1, #4
 801eaea:	6021      	str	r1, [r4, #0]
 801eaec:	d04b      	beq.n	801eb86 <_printf_i+0x1a6>
 801eaee:	4616      	mov	r6, r2
 801eaf0:	fbb5 f1f3 	udiv	r1, r5, r3
 801eaf4:	fb03 5711 	mls	r7, r3, r1, r5
 801eaf8:	5dc7      	ldrb	r7, [r0, r7]
 801eafa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801eafe:	462f      	mov	r7, r5
 801eb00:	42bb      	cmp	r3, r7
 801eb02:	460d      	mov	r5, r1
 801eb04:	d9f4      	bls.n	801eaf0 <_printf_i+0x110>
 801eb06:	2b08      	cmp	r3, #8
 801eb08:	d10b      	bne.n	801eb22 <_printf_i+0x142>
 801eb0a:	6823      	ldr	r3, [r4, #0]
 801eb0c:	07df      	lsls	r7, r3, #31
 801eb0e:	d508      	bpl.n	801eb22 <_printf_i+0x142>
 801eb10:	6923      	ldr	r3, [r4, #16]
 801eb12:	6861      	ldr	r1, [r4, #4]
 801eb14:	4299      	cmp	r1, r3
 801eb16:	bfde      	ittt	le
 801eb18:	2330      	movle	r3, #48	@ 0x30
 801eb1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801eb1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801eb22:	1b92      	subs	r2, r2, r6
 801eb24:	6122      	str	r2, [r4, #16]
 801eb26:	f8cd a000 	str.w	sl, [sp]
 801eb2a:	464b      	mov	r3, r9
 801eb2c:	aa03      	add	r2, sp, #12
 801eb2e:	4621      	mov	r1, r4
 801eb30:	4640      	mov	r0, r8
 801eb32:	f7ff fee7 	bl	801e904 <_printf_common>
 801eb36:	3001      	adds	r0, #1
 801eb38:	d14a      	bne.n	801ebd0 <_printf_i+0x1f0>
 801eb3a:	f04f 30ff 	mov.w	r0, #4294967295
 801eb3e:	b004      	add	sp, #16
 801eb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb44:	6823      	ldr	r3, [r4, #0]
 801eb46:	f043 0320 	orr.w	r3, r3, #32
 801eb4a:	6023      	str	r3, [r4, #0]
 801eb4c:	4832      	ldr	r0, [pc, #200]	@ (801ec18 <_printf_i+0x238>)
 801eb4e:	2778      	movs	r7, #120	@ 0x78
 801eb50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801eb54:	6823      	ldr	r3, [r4, #0]
 801eb56:	6831      	ldr	r1, [r6, #0]
 801eb58:	061f      	lsls	r7, r3, #24
 801eb5a:	f851 5b04 	ldr.w	r5, [r1], #4
 801eb5e:	d402      	bmi.n	801eb66 <_printf_i+0x186>
 801eb60:	065f      	lsls	r7, r3, #25
 801eb62:	bf48      	it	mi
 801eb64:	b2ad      	uxthmi	r5, r5
 801eb66:	6031      	str	r1, [r6, #0]
 801eb68:	07d9      	lsls	r1, r3, #31
 801eb6a:	bf44      	itt	mi
 801eb6c:	f043 0320 	orrmi.w	r3, r3, #32
 801eb70:	6023      	strmi	r3, [r4, #0]
 801eb72:	b11d      	cbz	r5, 801eb7c <_printf_i+0x19c>
 801eb74:	2310      	movs	r3, #16
 801eb76:	e7ad      	b.n	801ead4 <_printf_i+0xf4>
 801eb78:	4826      	ldr	r0, [pc, #152]	@ (801ec14 <_printf_i+0x234>)
 801eb7a:	e7e9      	b.n	801eb50 <_printf_i+0x170>
 801eb7c:	6823      	ldr	r3, [r4, #0]
 801eb7e:	f023 0320 	bic.w	r3, r3, #32
 801eb82:	6023      	str	r3, [r4, #0]
 801eb84:	e7f6      	b.n	801eb74 <_printf_i+0x194>
 801eb86:	4616      	mov	r6, r2
 801eb88:	e7bd      	b.n	801eb06 <_printf_i+0x126>
 801eb8a:	6833      	ldr	r3, [r6, #0]
 801eb8c:	6825      	ldr	r5, [r4, #0]
 801eb8e:	6961      	ldr	r1, [r4, #20]
 801eb90:	1d18      	adds	r0, r3, #4
 801eb92:	6030      	str	r0, [r6, #0]
 801eb94:	062e      	lsls	r6, r5, #24
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	d501      	bpl.n	801eb9e <_printf_i+0x1be>
 801eb9a:	6019      	str	r1, [r3, #0]
 801eb9c:	e002      	b.n	801eba4 <_printf_i+0x1c4>
 801eb9e:	0668      	lsls	r0, r5, #25
 801eba0:	d5fb      	bpl.n	801eb9a <_printf_i+0x1ba>
 801eba2:	8019      	strh	r1, [r3, #0]
 801eba4:	2300      	movs	r3, #0
 801eba6:	6123      	str	r3, [r4, #16]
 801eba8:	4616      	mov	r6, r2
 801ebaa:	e7bc      	b.n	801eb26 <_printf_i+0x146>
 801ebac:	6833      	ldr	r3, [r6, #0]
 801ebae:	1d1a      	adds	r2, r3, #4
 801ebb0:	6032      	str	r2, [r6, #0]
 801ebb2:	681e      	ldr	r6, [r3, #0]
 801ebb4:	6862      	ldr	r2, [r4, #4]
 801ebb6:	2100      	movs	r1, #0
 801ebb8:	4630      	mov	r0, r6
 801ebba:	f7e1 fb29 	bl	8000210 <memchr>
 801ebbe:	b108      	cbz	r0, 801ebc4 <_printf_i+0x1e4>
 801ebc0:	1b80      	subs	r0, r0, r6
 801ebc2:	6060      	str	r0, [r4, #4]
 801ebc4:	6863      	ldr	r3, [r4, #4]
 801ebc6:	6123      	str	r3, [r4, #16]
 801ebc8:	2300      	movs	r3, #0
 801ebca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ebce:	e7aa      	b.n	801eb26 <_printf_i+0x146>
 801ebd0:	6923      	ldr	r3, [r4, #16]
 801ebd2:	4632      	mov	r2, r6
 801ebd4:	4649      	mov	r1, r9
 801ebd6:	4640      	mov	r0, r8
 801ebd8:	47d0      	blx	sl
 801ebda:	3001      	adds	r0, #1
 801ebdc:	d0ad      	beq.n	801eb3a <_printf_i+0x15a>
 801ebde:	6823      	ldr	r3, [r4, #0]
 801ebe0:	079b      	lsls	r3, r3, #30
 801ebe2:	d413      	bmi.n	801ec0c <_printf_i+0x22c>
 801ebe4:	68e0      	ldr	r0, [r4, #12]
 801ebe6:	9b03      	ldr	r3, [sp, #12]
 801ebe8:	4298      	cmp	r0, r3
 801ebea:	bfb8      	it	lt
 801ebec:	4618      	movlt	r0, r3
 801ebee:	e7a6      	b.n	801eb3e <_printf_i+0x15e>
 801ebf0:	2301      	movs	r3, #1
 801ebf2:	4632      	mov	r2, r6
 801ebf4:	4649      	mov	r1, r9
 801ebf6:	4640      	mov	r0, r8
 801ebf8:	47d0      	blx	sl
 801ebfa:	3001      	adds	r0, #1
 801ebfc:	d09d      	beq.n	801eb3a <_printf_i+0x15a>
 801ebfe:	3501      	adds	r5, #1
 801ec00:	68e3      	ldr	r3, [r4, #12]
 801ec02:	9903      	ldr	r1, [sp, #12]
 801ec04:	1a5b      	subs	r3, r3, r1
 801ec06:	42ab      	cmp	r3, r5
 801ec08:	dcf2      	bgt.n	801ebf0 <_printf_i+0x210>
 801ec0a:	e7eb      	b.n	801ebe4 <_printf_i+0x204>
 801ec0c:	2500      	movs	r5, #0
 801ec0e:	f104 0619 	add.w	r6, r4, #25
 801ec12:	e7f5      	b.n	801ec00 <_printf_i+0x220>
 801ec14:	080223b6 	.word	0x080223b6
 801ec18:	080223c7 	.word	0x080223c7

0801ec1c <__sflush_r>:
 801ec1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ec20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec24:	0716      	lsls	r6, r2, #28
 801ec26:	4605      	mov	r5, r0
 801ec28:	460c      	mov	r4, r1
 801ec2a:	d454      	bmi.n	801ecd6 <__sflush_r+0xba>
 801ec2c:	684b      	ldr	r3, [r1, #4]
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	dc02      	bgt.n	801ec38 <__sflush_r+0x1c>
 801ec32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	dd48      	ble.n	801ecca <__sflush_r+0xae>
 801ec38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec3a:	2e00      	cmp	r6, #0
 801ec3c:	d045      	beq.n	801ecca <__sflush_r+0xae>
 801ec3e:	2300      	movs	r3, #0
 801ec40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ec44:	682f      	ldr	r7, [r5, #0]
 801ec46:	6a21      	ldr	r1, [r4, #32]
 801ec48:	602b      	str	r3, [r5, #0]
 801ec4a:	d030      	beq.n	801ecae <__sflush_r+0x92>
 801ec4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ec4e:	89a3      	ldrh	r3, [r4, #12]
 801ec50:	0759      	lsls	r1, r3, #29
 801ec52:	d505      	bpl.n	801ec60 <__sflush_r+0x44>
 801ec54:	6863      	ldr	r3, [r4, #4]
 801ec56:	1ad2      	subs	r2, r2, r3
 801ec58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ec5a:	b10b      	cbz	r3, 801ec60 <__sflush_r+0x44>
 801ec5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ec5e:	1ad2      	subs	r2, r2, r3
 801ec60:	2300      	movs	r3, #0
 801ec62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec64:	6a21      	ldr	r1, [r4, #32]
 801ec66:	4628      	mov	r0, r5
 801ec68:	47b0      	blx	r6
 801ec6a:	1c43      	adds	r3, r0, #1
 801ec6c:	89a3      	ldrh	r3, [r4, #12]
 801ec6e:	d106      	bne.n	801ec7e <__sflush_r+0x62>
 801ec70:	6829      	ldr	r1, [r5, #0]
 801ec72:	291d      	cmp	r1, #29
 801ec74:	d82b      	bhi.n	801ecce <__sflush_r+0xb2>
 801ec76:	4a2a      	ldr	r2, [pc, #168]	@ (801ed20 <__sflush_r+0x104>)
 801ec78:	40ca      	lsrs	r2, r1
 801ec7a:	07d6      	lsls	r6, r2, #31
 801ec7c:	d527      	bpl.n	801ecce <__sflush_r+0xb2>
 801ec7e:	2200      	movs	r2, #0
 801ec80:	6062      	str	r2, [r4, #4]
 801ec82:	04d9      	lsls	r1, r3, #19
 801ec84:	6922      	ldr	r2, [r4, #16]
 801ec86:	6022      	str	r2, [r4, #0]
 801ec88:	d504      	bpl.n	801ec94 <__sflush_r+0x78>
 801ec8a:	1c42      	adds	r2, r0, #1
 801ec8c:	d101      	bne.n	801ec92 <__sflush_r+0x76>
 801ec8e:	682b      	ldr	r3, [r5, #0]
 801ec90:	b903      	cbnz	r3, 801ec94 <__sflush_r+0x78>
 801ec92:	6560      	str	r0, [r4, #84]	@ 0x54
 801ec94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec96:	602f      	str	r7, [r5, #0]
 801ec98:	b1b9      	cbz	r1, 801ecca <__sflush_r+0xae>
 801ec9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec9e:	4299      	cmp	r1, r3
 801eca0:	d002      	beq.n	801eca8 <__sflush_r+0x8c>
 801eca2:	4628      	mov	r0, r5
 801eca4:	f7ff fbec 	bl	801e480 <_free_r>
 801eca8:	2300      	movs	r3, #0
 801ecaa:	6363      	str	r3, [r4, #52]	@ 0x34
 801ecac:	e00d      	b.n	801ecca <__sflush_r+0xae>
 801ecae:	2301      	movs	r3, #1
 801ecb0:	4628      	mov	r0, r5
 801ecb2:	47b0      	blx	r6
 801ecb4:	4602      	mov	r2, r0
 801ecb6:	1c50      	adds	r0, r2, #1
 801ecb8:	d1c9      	bne.n	801ec4e <__sflush_r+0x32>
 801ecba:	682b      	ldr	r3, [r5, #0]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d0c6      	beq.n	801ec4e <__sflush_r+0x32>
 801ecc0:	2b1d      	cmp	r3, #29
 801ecc2:	d001      	beq.n	801ecc8 <__sflush_r+0xac>
 801ecc4:	2b16      	cmp	r3, #22
 801ecc6:	d11e      	bne.n	801ed06 <__sflush_r+0xea>
 801ecc8:	602f      	str	r7, [r5, #0]
 801ecca:	2000      	movs	r0, #0
 801eccc:	e022      	b.n	801ed14 <__sflush_r+0xf8>
 801ecce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ecd2:	b21b      	sxth	r3, r3
 801ecd4:	e01b      	b.n	801ed0e <__sflush_r+0xf2>
 801ecd6:	690f      	ldr	r7, [r1, #16]
 801ecd8:	2f00      	cmp	r7, #0
 801ecda:	d0f6      	beq.n	801ecca <__sflush_r+0xae>
 801ecdc:	0793      	lsls	r3, r2, #30
 801ecde:	680e      	ldr	r6, [r1, #0]
 801ece0:	bf08      	it	eq
 801ece2:	694b      	ldreq	r3, [r1, #20]
 801ece4:	600f      	str	r7, [r1, #0]
 801ece6:	bf18      	it	ne
 801ece8:	2300      	movne	r3, #0
 801ecea:	eba6 0807 	sub.w	r8, r6, r7
 801ecee:	608b      	str	r3, [r1, #8]
 801ecf0:	f1b8 0f00 	cmp.w	r8, #0
 801ecf4:	dde9      	ble.n	801ecca <__sflush_r+0xae>
 801ecf6:	6a21      	ldr	r1, [r4, #32]
 801ecf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ecfa:	4643      	mov	r3, r8
 801ecfc:	463a      	mov	r2, r7
 801ecfe:	4628      	mov	r0, r5
 801ed00:	47b0      	blx	r6
 801ed02:	2800      	cmp	r0, #0
 801ed04:	dc08      	bgt.n	801ed18 <__sflush_r+0xfc>
 801ed06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed0e:	81a3      	strh	r3, [r4, #12]
 801ed10:	f04f 30ff 	mov.w	r0, #4294967295
 801ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed18:	4407      	add	r7, r0
 801ed1a:	eba8 0800 	sub.w	r8, r8, r0
 801ed1e:	e7e7      	b.n	801ecf0 <__sflush_r+0xd4>
 801ed20:	20400001 	.word	0x20400001

0801ed24 <_fflush_r>:
 801ed24:	b538      	push	{r3, r4, r5, lr}
 801ed26:	690b      	ldr	r3, [r1, #16]
 801ed28:	4605      	mov	r5, r0
 801ed2a:	460c      	mov	r4, r1
 801ed2c:	b913      	cbnz	r3, 801ed34 <_fflush_r+0x10>
 801ed2e:	2500      	movs	r5, #0
 801ed30:	4628      	mov	r0, r5
 801ed32:	bd38      	pop	{r3, r4, r5, pc}
 801ed34:	b118      	cbz	r0, 801ed3e <_fflush_r+0x1a>
 801ed36:	6a03      	ldr	r3, [r0, #32]
 801ed38:	b90b      	cbnz	r3, 801ed3e <_fflush_r+0x1a>
 801ed3a:	f7ff f913 	bl	801df64 <__sinit>
 801ed3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d0f3      	beq.n	801ed2e <_fflush_r+0xa>
 801ed46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ed48:	07d0      	lsls	r0, r2, #31
 801ed4a:	d404      	bmi.n	801ed56 <_fflush_r+0x32>
 801ed4c:	0599      	lsls	r1, r3, #22
 801ed4e:	d402      	bmi.n	801ed56 <_fflush_r+0x32>
 801ed50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed52:	f7ff fb66 	bl	801e422 <__retarget_lock_acquire_recursive>
 801ed56:	4628      	mov	r0, r5
 801ed58:	4621      	mov	r1, r4
 801ed5a:	f7ff ff5f 	bl	801ec1c <__sflush_r>
 801ed5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ed60:	07da      	lsls	r2, r3, #31
 801ed62:	4605      	mov	r5, r0
 801ed64:	d4e4      	bmi.n	801ed30 <_fflush_r+0xc>
 801ed66:	89a3      	ldrh	r3, [r4, #12]
 801ed68:	059b      	lsls	r3, r3, #22
 801ed6a:	d4e1      	bmi.n	801ed30 <_fflush_r+0xc>
 801ed6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ed6e:	f7ff fb59 	bl	801e424 <__retarget_lock_release_recursive>
 801ed72:	e7dd      	b.n	801ed30 <_fflush_r+0xc>

0801ed74 <fiprintf>:
 801ed74:	b40e      	push	{r1, r2, r3}
 801ed76:	b503      	push	{r0, r1, lr}
 801ed78:	4601      	mov	r1, r0
 801ed7a:	ab03      	add	r3, sp, #12
 801ed7c:	4805      	ldr	r0, [pc, #20]	@ (801ed94 <fiprintf+0x20>)
 801ed7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed82:	6800      	ldr	r0, [r0, #0]
 801ed84:	9301      	str	r3, [sp, #4]
 801ed86:	f7ff fca5 	bl	801e6d4 <_vfiprintf_r>
 801ed8a:	b002      	add	sp, #8
 801ed8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed90:	b003      	add	sp, #12
 801ed92:	4770      	bx	lr
 801ed94:	2000003c 	.word	0x2000003c

0801ed98 <__swhatbuf_r>:
 801ed98:	b570      	push	{r4, r5, r6, lr}
 801ed9a:	460c      	mov	r4, r1
 801ed9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eda0:	2900      	cmp	r1, #0
 801eda2:	b096      	sub	sp, #88	@ 0x58
 801eda4:	4615      	mov	r5, r2
 801eda6:	461e      	mov	r6, r3
 801eda8:	da0d      	bge.n	801edc6 <__swhatbuf_r+0x2e>
 801edaa:	89a3      	ldrh	r3, [r4, #12]
 801edac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801edb0:	f04f 0100 	mov.w	r1, #0
 801edb4:	bf14      	ite	ne
 801edb6:	2340      	movne	r3, #64	@ 0x40
 801edb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801edbc:	2000      	movs	r0, #0
 801edbe:	6031      	str	r1, [r6, #0]
 801edc0:	602b      	str	r3, [r5, #0]
 801edc2:	b016      	add	sp, #88	@ 0x58
 801edc4:	bd70      	pop	{r4, r5, r6, pc}
 801edc6:	466a      	mov	r2, sp
 801edc8:	f000 f848 	bl	801ee5c <_fstat_r>
 801edcc:	2800      	cmp	r0, #0
 801edce:	dbec      	blt.n	801edaa <__swhatbuf_r+0x12>
 801edd0:	9901      	ldr	r1, [sp, #4]
 801edd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801edd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801edda:	4259      	negs	r1, r3
 801eddc:	4159      	adcs	r1, r3
 801edde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ede2:	e7eb      	b.n	801edbc <__swhatbuf_r+0x24>

0801ede4 <__smakebuf_r>:
 801ede4:	898b      	ldrh	r3, [r1, #12]
 801ede6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ede8:	079d      	lsls	r5, r3, #30
 801edea:	4606      	mov	r6, r0
 801edec:	460c      	mov	r4, r1
 801edee:	d507      	bpl.n	801ee00 <__smakebuf_r+0x1c>
 801edf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801edf4:	6023      	str	r3, [r4, #0]
 801edf6:	6123      	str	r3, [r4, #16]
 801edf8:	2301      	movs	r3, #1
 801edfa:	6163      	str	r3, [r4, #20]
 801edfc:	b003      	add	sp, #12
 801edfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee00:	ab01      	add	r3, sp, #4
 801ee02:	466a      	mov	r2, sp
 801ee04:	f7ff ffc8 	bl	801ed98 <__swhatbuf_r>
 801ee08:	9f00      	ldr	r7, [sp, #0]
 801ee0a:	4605      	mov	r5, r0
 801ee0c:	4639      	mov	r1, r7
 801ee0e:	4630      	mov	r0, r6
 801ee10:	f7ff fbaa 	bl	801e568 <_malloc_r>
 801ee14:	b948      	cbnz	r0, 801ee2a <__smakebuf_r+0x46>
 801ee16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee1a:	059a      	lsls	r2, r3, #22
 801ee1c:	d4ee      	bmi.n	801edfc <__smakebuf_r+0x18>
 801ee1e:	f023 0303 	bic.w	r3, r3, #3
 801ee22:	f043 0302 	orr.w	r3, r3, #2
 801ee26:	81a3      	strh	r3, [r4, #12]
 801ee28:	e7e2      	b.n	801edf0 <__smakebuf_r+0xc>
 801ee2a:	89a3      	ldrh	r3, [r4, #12]
 801ee2c:	6020      	str	r0, [r4, #0]
 801ee2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee32:	81a3      	strh	r3, [r4, #12]
 801ee34:	9b01      	ldr	r3, [sp, #4]
 801ee36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ee3a:	b15b      	cbz	r3, 801ee54 <__smakebuf_r+0x70>
 801ee3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee40:	4630      	mov	r0, r6
 801ee42:	f000 f81d 	bl	801ee80 <_isatty_r>
 801ee46:	b128      	cbz	r0, 801ee54 <__smakebuf_r+0x70>
 801ee48:	89a3      	ldrh	r3, [r4, #12]
 801ee4a:	f023 0303 	bic.w	r3, r3, #3
 801ee4e:	f043 0301 	orr.w	r3, r3, #1
 801ee52:	81a3      	strh	r3, [r4, #12]
 801ee54:	89a3      	ldrh	r3, [r4, #12]
 801ee56:	431d      	orrs	r5, r3
 801ee58:	81a5      	strh	r5, [r4, #12]
 801ee5a:	e7cf      	b.n	801edfc <__smakebuf_r+0x18>

0801ee5c <_fstat_r>:
 801ee5c:	b538      	push	{r3, r4, r5, lr}
 801ee5e:	4d07      	ldr	r5, [pc, #28]	@ (801ee7c <_fstat_r+0x20>)
 801ee60:	2300      	movs	r3, #0
 801ee62:	4604      	mov	r4, r0
 801ee64:	4608      	mov	r0, r1
 801ee66:	4611      	mov	r1, r2
 801ee68:	602b      	str	r3, [r5, #0]
 801ee6a:	f7e3 fb15 	bl	8002498 <_fstat>
 801ee6e:	1c43      	adds	r3, r0, #1
 801ee70:	d102      	bne.n	801ee78 <_fstat_r+0x1c>
 801ee72:	682b      	ldr	r3, [r5, #0]
 801ee74:	b103      	cbz	r3, 801ee78 <_fstat_r+0x1c>
 801ee76:	6023      	str	r3, [r4, #0]
 801ee78:	bd38      	pop	{r3, r4, r5, pc}
 801ee7a:	bf00      	nop
 801ee7c:	20027e4c 	.word	0x20027e4c

0801ee80 <_isatty_r>:
 801ee80:	b538      	push	{r3, r4, r5, lr}
 801ee82:	4d06      	ldr	r5, [pc, #24]	@ (801ee9c <_isatty_r+0x1c>)
 801ee84:	2300      	movs	r3, #0
 801ee86:	4604      	mov	r4, r0
 801ee88:	4608      	mov	r0, r1
 801ee8a:	602b      	str	r3, [r5, #0]
 801ee8c:	f7e3 fb14 	bl	80024b8 <_isatty>
 801ee90:	1c43      	adds	r3, r0, #1
 801ee92:	d102      	bne.n	801ee9a <_isatty_r+0x1a>
 801ee94:	682b      	ldr	r3, [r5, #0]
 801ee96:	b103      	cbz	r3, 801ee9a <_isatty_r+0x1a>
 801ee98:	6023      	str	r3, [r4, #0]
 801ee9a:	bd38      	pop	{r3, r4, r5, pc}
 801ee9c:	20027e4c 	.word	0x20027e4c

0801eea0 <_sbrk_r>:
 801eea0:	b538      	push	{r3, r4, r5, lr}
 801eea2:	4d06      	ldr	r5, [pc, #24]	@ (801eebc <_sbrk_r+0x1c>)
 801eea4:	2300      	movs	r3, #0
 801eea6:	4604      	mov	r4, r0
 801eea8:	4608      	mov	r0, r1
 801eeaa:	602b      	str	r3, [r5, #0]
 801eeac:	f7e3 fb1c 	bl	80024e8 <_sbrk>
 801eeb0:	1c43      	adds	r3, r0, #1
 801eeb2:	d102      	bne.n	801eeba <_sbrk_r+0x1a>
 801eeb4:	682b      	ldr	r3, [r5, #0]
 801eeb6:	b103      	cbz	r3, 801eeba <_sbrk_r+0x1a>
 801eeb8:	6023      	str	r3, [r4, #0]
 801eeba:	bd38      	pop	{r3, r4, r5, pc}
 801eebc:	20027e4c 	.word	0x20027e4c

0801eec0 <abort>:
 801eec0:	b508      	push	{r3, lr}
 801eec2:	2006      	movs	r0, #6
 801eec4:	f000 f82c 	bl	801ef20 <raise>
 801eec8:	2001      	movs	r0, #1
 801eeca:	f7e3 fa95 	bl	80023f8 <_exit>

0801eece <_raise_r>:
 801eece:	291f      	cmp	r1, #31
 801eed0:	b538      	push	{r3, r4, r5, lr}
 801eed2:	4605      	mov	r5, r0
 801eed4:	460c      	mov	r4, r1
 801eed6:	d904      	bls.n	801eee2 <_raise_r+0x14>
 801eed8:	2316      	movs	r3, #22
 801eeda:	6003      	str	r3, [r0, #0]
 801eedc:	f04f 30ff 	mov.w	r0, #4294967295
 801eee0:	bd38      	pop	{r3, r4, r5, pc}
 801eee2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eee4:	b112      	cbz	r2, 801eeec <_raise_r+0x1e>
 801eee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eeea:	b94b      	cbnz	r3, 801ef00 <_raise_r+0x32>
 801eeec:	4628      	mov	r0, r5
 801eeee:	f000 f831 	bl	801ef54 <_getpid_r>
 801eef2:	4622      	mov	r2, r4
 801eef4:	4601      	mov	r1, r0
 801eef6:	4628      	mov	r0, r5
 801eef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eefc:	f000 b818 	b.w	801ef30 <_kill_r>
 801ef00:	2b01      	cmp	r3, #1
 801ef02:	d00a      	beq.n	801ef1a <_raise_r+0x4c>
 801ef04:	1c59      	adds	r1, r3, #1
 801ef06:	d103      	bne.n	801ef10 <_raise_r+0x42>
 801ef08:	2316      	movs	r3, #22
 801ef0a:	6003      	str	r3, [r0, #0]
 801ef0c:	2001      	movs	r0, #1
 801ef0e:	e7e7      	b.n	801eee0 <_raise_r+0x12>
 801ef10:	2100      	movs	r1, #0
 801ef12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ef16:	4620      	mov	r0, r4
 801ef18:	4798      	blx	r3
 801ef1a:	2000      	movs	r0, #0
 801ef1c:	e7e0      	b.n	801eee0 <_raise_r+0x12>
	...

0801ef20 <raise>:
 801ef20:	4b02      	ldr	r3, [pc, #8]	@ (801ef2c <raise+0xc>)
 801ef22:	4601      	mov	r1, r0
 801ef24:	6818      	ldr	r0, [r3, #0]
 801ef26:	f7ff bfd2 	b.w	801eece <_raise_r>
 801ef2a:	bf00      	nop
 801ef2c:	2000003c 	.word	0x2000003c

0801ef30 <_kill_r>:
 801ef30:	b538      	push	{r3, r4, r5, lr}
 801ef32:	4d07      	ldr	r5, [pc, #28]	@ (801ef50 <_kill_r+0x20>)
 801ef34:	2300      	movs	r3, #0
 801ef36:	4604      	mov	r4, r0
 801ef38:	4608      	mov	r0, r1
 801ef3a:	4611      	mov	r1, r2
 801ef3c:	602b      	str	r3, [r5, #0]
 801ef3e:	f7e3 fa49 	bl	80023d4 <_kill>
 801ef42:	1c43      	adds	r3, r0, #1
 801ef44:	d102      	bne.n	801ef4c <_kill_r+0x1c>
 801ef46:	682b      	ldr	r3, [r5, #0]
 801ef48:	b103      	cbz	r3, 801ef4c <_kill_r+0x1c>
 801ef4a:	6023      	str	r3, [r4, #0]
 801ef4c:	bd38      	pop	{r3, r4, r5, pc}
 801ef4e:	bf00      	nop
 801ef50:	20027e4c 	.word	0x20027e4c

0801ef54 <_getpid_r>:
 801ef54:	f7e3 ba36 	b.w	80023c4 <_getpid>

0801ef58 <_init>:
 801ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef5a:	bf00      	nop
 801ef5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef5e:	bc08      	pop	{r3}
 801ef60:	469e      	mov	lr, r3
 801ef62:	4770      	bx	lr

0801ef64 <_fini>:
 801ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef66:	bf00      	nop
 801ef68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef6a:	bc08      	pop	{r3}
 801ef6c:	469e      	mov	lr, r3
 801ef6e:	4770      	bx	lr
