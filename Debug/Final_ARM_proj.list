
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c8  0801eee8  0801eee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080223b0  080223b0  000241cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080223b0  080223b0  000233b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223b8  080223b8  000241cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223b8  080223b8  000233b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080223bc  080223bc  000233bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080223c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0802244c  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080224ec  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027b10  200001cc  0802258c  000241cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20027cdc  0802258c  00024cdc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043539  00000000  00000000  000241fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e12  00000000  00000000  00067735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003198  00000000  00000000  00071548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000271e  00000000  00000000  000746e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000170a9  00000000  00000000  00076dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e711  00000000  00000000  0008dea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127790  00000000  00000000  000dc5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00203d48  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d7f4  00000000  00000000  00203d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  00211580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801eed0 	.word	0x0801eed0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801eed0 	.word	0x0801eed0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 ffd9 	bl	8002596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8d2 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fbf8 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fbc0 	bl	8000d70 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb5e 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb8c 	bl	8000d14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fb2a 	bl	8000c54 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 fa08 	bl	8000a18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa46 	bl	8000a98 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fa82 	bl	8000b14 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000610:	f000 f924 	bl	800085c <MX_ADC1_Init>
  MX_DAC_Init();
 8000614:	f000 f996 	bl	8000944 <MX_DAC_Init>
  MX_TIM7_Init();
 8000618:	f000 fab6 	bl	8000b88 <MX_TIM7_Init>
  MX_UART4_Init();
 800061c:	f000 faea 	bl	8000bf4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00e f80e 	bl	800e640 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <main+0x130>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00e fab7 	bl	800eb9c <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <main+0x134>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000634:	4a37      	ldr	r2, [pc, #220]	@ (8000714 <main+0x138>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00e faaf 	bl	800eb9c <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a35      	ldr	r2, [pc, #212]	@ (8000718 <main+0x13c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000644:	4a35      	ldr	r2, [pc, #212]	@ (800071c <main+0x140>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f00e faa7 	bl	800eb9c <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a33      	ldr	r2, [pc, #204]	@ (8000720 <main+0x144>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000654:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <main+0x148>)
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00e fa9f 	bl	800eb9c <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	@ (8000728 <main+0x14c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000664:	4a31      	ldr	r2, [pc, #196]	@ (800072c <main+0x150>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f00e fa97 	bl	800eb9c <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2f      	ldr	r2, [pc, #188]	@ (8000730 <main+0x154>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000674:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <main+0x158>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f00e fa8f 	bl	800eb9c <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a2d      	ldr	r2, [pc, #180]	@ (8000738 <main+0x15c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of TimSem */
  TimSemHandle = osSemaphoreNew(1, 0, &TimSem_attributes);
 8000684:	4a2d      	ldr	r2, [pc, #180]	@ (800073c <main+0x160>)
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f00e fa87 	bl	800eb9c <osSemaphoreNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <main+0x164>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <main+0x168>)
 8000696:	2100      	movs	r1, #0
 8000698:	2001      	movs	r0, #1
 800069a:	f00e fa7f 	bl	800eb9c <osSemaphoreNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <main+0x16c>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* creation of SpiSlaveRx */
  SpiSlaveRxHandle = osSemaphoreNew(1, 0, &SpiSlaveRx_attributes);
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x170>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f00e fa77 	bl	800eb9c <osSemaphoreNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <main+0x174>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <main+0x178>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	2010      	movs	r0, #16
 80006ba:	f00e fbc9 	bl	800ee50 <osMessageQueueNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <main+0x17c>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006c4:	4a25      	ldr	r2, [pc, #148]	@ (800075c <main+0x180>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4825      	ldr	r0, [pc, #148]	@ (8000760 <main+0x184>)
 80006ca:	f00e f84b 	bl	800e764 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <main+0x188>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <main+0x18c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4824      	ldr	r0, [pc, #144]	@ (800076c <main+0x190>)
 80006da:	f00e f843 	bl	800e764 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <main+0x194>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006e4:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <main+0x198>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <main+0x19c>)
 80006ea:	f00e f83b 	bl	800e764 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <main+0x1a0>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <main+0x1a4>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <main+0x1a8>)
 80006fa:	f00e f833 	bl	800e764 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0x1ac>)
 8000702:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f00d ffd0 	bl	800e6a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x12c>
 800070c:	080220f4 	.word	0x080220f4
 8000710:	20000c30 	.word	0x20000c30
 8000714:	08022104 	.word	0x08022104
 8000718:	20000c34 	.word	0x20000c34
 800071c:	08022114 	.word	0x08022114
 8000720:	20000c38 	.word	0x20000c38
 8000724:	08022124 	.word	0x08022124
 8000728:	20000c3c 	.word	0x20000c3c
 800072c:	08022134 	.word	0x08022134
 8000730:	20000c40 	.word	0x20000c40
 8000734:	08022144 	.word	0x08022144
 8000738:	20000c44 	.word	0x20000c44
 800073c:	08022154 	.word	0x08022154
 8000740:	20000c48 	.word	0x20000c48
 8000744:	08022164 	.word	0x08022164
 8000748:	20000c4c 	.word	0x20000c4c
 800074c:	08022174 	.word	0x08022174
 8000750:	20000c50 	.word	0x20000c50
 8000754:	080220dc 	.word	0x080220dc
 8000758:	20000c2c 	.word	0x20000c2c
 800075c:	0802204c 	.word	0x0802204c
 8000760:	080011c9 	.word	0x080011c9
 8000764:	20000c1c 	.word	0x20000c1c
 8000768:	08022070 	.word	0x08022070
 800076c:	080011dd 	.word	0x080011dd
 8000770:	20000c20 	.word	0x20000c20
 8000774:	08022094 	.word	0x08022094
 8000778:	08001221 	.word	0x08001221
 800077c:	20000c24 	.word	0x20000c24
 8000780:	080220b8 	.word	0x080220b8
 8000784:	08001235 	.word	0x08001235
 8000788:	20000c28 	.word	0x20000c28

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f01d fd2c 	bl	801e1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f007 fcfa 	bl	80081a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xc8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000800:	2348      	movs	r3, #72	@ 0x48
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fcd9 	bl	80081c8 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fdca 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f007 ff67 	bl	8008710 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f000 fdb4 	bl	80013b4 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 febb 	bl	8002638 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fd74 	bl	80013b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f002 f92d 	bl	8002b3c <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fd64 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_CRC_Init+0x3c>)
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <MX_CRC_Init+0x40>)
 8000908:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_CRC_Init+0x3c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CRC_Init+0x3c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_CRC_Init+0x3c>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_CRC_Init+0x3c>)
 800092a:	f002 fc79 	bl	8003220 <HAL_CRC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000934:	f000 fd3e 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000230 	.word	0x20000230
 8000940:	40023000 	.word	0x40023000

08000944 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DAC_Init+0x50>)
 8000956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_DAC_Init+0x4c>)
 800095a:	f002 fe6b 	bl	8003634 <HAL_DAC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000964:	f000 fd26 	bl	80013b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000978:	f002 ff5f 	bl	800383a <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fd17 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254
 8000994:	40007400 	.word	0x40007400

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C1_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009d4:	f005 f99c 	bl	8005d10 <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fce9 	bl	80013b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009e6:	f007 fa0d 	bl	8007e04 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fce0 	bl	80013b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009f8:	f007 fa4f 	bl	8007e9a <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fcd7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000268 	.word	0x20000268
 8000a10:	40005400 	.word	0x40005400
 8000a14:	00808cd2 	.word	0x00808cd2

08000a18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_I2C4_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_I2C4_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a54:	f005 f95c 	bl	8005d10 <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 fca9 	bl	80013b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a66:	f007 f9cd 	bl	8007e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fca0 	bl	80013b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a78:	f007 fa0f 	bl	8007e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fc97 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002bc 	.word	0x200002bc
 8000a90:	40006000 	.word	0x40006000
 8000a94:	00808cd2 	.word	0x00808cd2

08000a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_SPI1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ab2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000afa:	f008 fc51 	bl	80093a0 <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fc56 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <MX_SPI2_Init+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b6e:	f008 fc17 	bl	80093a0 <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 8000b78:	f000 fc1c 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000434 	.word	0x20000434
 8000b84:	40003800 	.word	0x40003800

08000b88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <MX_TIM7_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bae:	2263      	movs	r2, #99	@ 0x63
 8000bb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bba:	f00a f8ad 	bl	800ad18 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000bc4:	f000 fbf6 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bd6:	f00a fb75 	bl	800b2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 fbe8 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000498 	.word	0x20000498
 8000bf0:	40001400 	.word	0x40001400

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_UART4_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c38:	f00a fbf0 	bl	800b41c <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 fbb7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200004e4 	.word	0x200004e4
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f00a fbc0 	bl	800b41c <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fb87 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000056c 	.word	0x2000056c
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f00a fb90 	bl	800b41c <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 fb57 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200005f4 	.word	0x200005f4
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	f007 f8eb 	bl	8007f32 <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 fb27 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000073c 	.word	0x2000073c

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_DMA_Init+0x68>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <MX_DMA_Init+0x68>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_DMA_Init+0x68>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2106      	movs	r1, #6
 8000d92:	200b      	movs	r0, #11
 8000d94:	f002 fa0c 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d98:	200b      	movs	r0, #11
 8000d9a:	f002 fa25 	bl	80031e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2106      	movs	r1, #6
 8000da2:	200d      	movs	r0, #13
 8000da4:	f002 fa04 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000da8:	200d      	movs	r0, #13
 8000daa:	f002 fa1d 	bl	80031e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2106      	movs	r1, #6
 8000db2:	2010      	movs	r0, #16
 8000db4:	f002 f9fc 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000db8:	2010      	movs	r0, #16
 8000dba:	f002 fa15 	bl	80031e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2106      	movs	r1, #6
 8000dc2:	2011      	movs	r0, #17
 8000dc4:	f002 f9f4 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000dc8:	2011      	movs	r0, #17
 8000dca:	f002 fa0d 	bl	80031e8 <HAL_NVIC_EnableIRQ>

}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b51      	ldr	r3, [pc, #324]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a50      	ldr	r2, [pc, #320]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b48      	ldr	r3, [pc, #288]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b45      	ldr	r3, [pc, #276]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a44      	ldr	r2, [pc, #272]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b42      	ldr	r3, [pc, #264]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a38      	ldr	r2, [pc, #224]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a32      	ldr	r2, [pc, #200]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a2c      	ldr	r2, [pc, #176]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_GPIO_Init+0x15c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ea0:	4826      	ldr	r0, [pc, #152]	@ (8000f3c <MX_GPIO_Init+0x160>)
 8000ea2:	f004 fedd 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2140      	movs	r1, #64	@ 0x40
 8000eaa:	4825      	ldr	r0, [pc, #148]	@ (8000f40 <MX_GPIO_Init+0x164>)
 8000eac:	f004 fed8 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481f      	ldr	r0, [pc, #124]	@ (8000f44 <MX_GPIO_Init+0x168>)
 8000ec8:	f004 fc12 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ecc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <MX_GPIO_Init+0x160>)
 8000ee6:	f004 fc03 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eea:	2340      	movs	r3, #64	@ 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <MX_GPIO_Init+0x164>)
 8000f02:	f004 fbf5 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f06:	2380      	movs	r3, #128	@ 0x80
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <MX_GPIO_Init+0x164>)
 8000f1a:	f004 fbe9 	bl	80056f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2028      	movs	r0, #40	@ 0x28
 8000f24:	f002 f944 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f28:	2028      	movs	r0, #40	@ 0x28
 8000f2a:	f002 f95d 	bl	80031e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	@ 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40020800 	.word	0x40020800

08000f48 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <vApplicationStackOverflowHook+0x50>)
 8000f54:	f01c fff8 	bl	801df48 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	4810      	ldr	r0, [pc, #64]	@ (8000f9c <vApplicationStackOverflowHook+0x54>)
 8000f5c:	f01c fff4 	bl	801df48 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <vApplicationStackOverflowHook+0x58>)
 8000f66:	f01c ffef 	bl	801df48 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f6e:	b672      	cpsid	i
 8000f70:	f383 8811 	msr	BASEPRI, r3
 8000f74:	f3bf 8f6f 	isb	sy
 8000f78:	f3bf 8f4f 	dsb	sy
 8000f7c:	b662      	cpsie	i
 8000f7e:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f80:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f86:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <vApplicationStackOverflowHook+0x5c>)
 8000f88:	f004 fe83 	bl	8005c92 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f90:	f00d fc8e 	bl	800e8b0 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f94:	bf00      	nop
 8000f96:	e7f4      	b.n	8000f82 <vApplicationStackOverflowHook+0x3a>
 8000f98:	0801ef70 	.word	0x0801ef70
 8000f9c:	0801ef94 	.word	0x0801ef94
 8000fa0:	0801efa0 	.word	0x0801efa0
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    udp_pcb_handle = udp_new();
 8000fac:	f019 fb4a 	bl	801a644 <udp_new>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a13      	ldr	r2, [pc, #76]	@ (8001000 <udp_receive_init+0x58>)
 8000fb4:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <udp_receive_init+0x58>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 8000fbe:	4811      	ldr	r0, [pc, #68]	@ (8001004 <udp_receive_init+0x5c>)
 8000fc0:	f01c ffc2 	bl	801df48 <iprintf>
        return;
 8000fc4:	e01a      	b.n	8000ffc <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <udp_receive_init+0x58>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000fce:	490e      	ldr	r1, [pc, #56]	@ (8001008 <udp_receive_init+0x60>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f019 fa8f 	bl	801a4f4 <udp_bind>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 8000fdc:	480b      	ldr	r0, [pc, #44]	@ (800100c <udp_receive_init+0x64>)
 8000fde:	f01c ffb3 	bl	801df48 <iprintf>
        return;
 8000fe2:	e00b      	b.n	8000ffc <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <udp_receive_init+0x58>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4909      	ldr	r1, [pc, #36]	@ (8001010 <udp_receive_init+0x68>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f019 fb09 	bl	801a604 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 8000ff2:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000ff6:	4807      	ldr	r0, [pc, #28]	@ (8001014 <udp_receive_init+0x6c>)
 8000ff8:	f01c ffa6 	bl	801df48 <iprintf>
}
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000c54 	.word	0x20000c54
 8001004:	0801efb0 	.word	0x0801efb0
 8001008:	080222c0 	.word	0x080222c0
 800100c:	0801efcc 	.word	0x0801efcc
 8001010:	08001019 	.word	0x08001019
 8001014:	0801efe0 	.word	0x0801efe0

08001018 <udp_receive_callback>:
 * 1. alters it to a test_command_t struct
 * 2. sends it to execution queue.
 *
 * */
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d05e      	beq.n	80010ea <udp_receive_callback+0xd2>
        // Copy the sender's IP address
        ip_addr_copy(g_server_addr, *addr);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a35      	ldr	r2, [pc, #212]	@ (8001108 <udp_receive_callback+0xf0>)
 8001032:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        g_server_port = port;
 8001034:	4a35      	ldr	r2, [pc, #212]	@ (800110c <udp_receive_callback+0xf4>)
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800103a:	8013      	strh	r3, [r2, #0]

        if (p->len >= sizeof(test_command_t))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001044:	d942      	bls.n	80010cc <udp_receive_callback+0xb4>
        {
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8001046:	f240 1007 	movw	r0, #263	@ 0x107
 800104a:	f011 f9e5 	bl	8012418 <pvPortMalloc>
 800104e:	4603      	mov	r3, r0
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
            if (cmd != NULL)
 8001052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001054:	2b00      	cmp	r3, #0
 8001056:	d02a      	beq.n	80010ae <udp_receive_callback+0x96>
            {
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8001058:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f240 1207 	movw	r2, #263	@ 0x107
 8001062:	4619      	mov	r1, r3
 8001064:	f01d f99b 	bl	801e39e <memcpy>

	            // Send the POINTER to the newly allocated and copied* data to the queue
	            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS) // Pass address of pointer
 8001068:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <udp_receive_callback+0xf8>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001070:	2300      	movs	r3, #0
 8001072:	2201      	movs	r2, #1
 8001074:	f00e fbcc 	bl	800f810 <xQueueGenericSend>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00f      	beq.n	800109e <udp_receive_callback+0x86>
	            {
	            	result_pro_t response={NULL, TEST_ERR};
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001086:	863b      	strh	r3, [r7, #48]	@ 0x30
	            	send_response(response);
 8001088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001090:	f000 f844 	bl	800111c <send_response>
	                vPortFree(cmd); // If send fails, free the allocated memory
 8001094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001096:	4618      	mov	r0, r3
 8001098:	f011 fa8c 	bl	80125b4 <vPortFree>
 800109c:	e021      	b.n	80010e2 <udp_receive_callback+0xca>
	            } else {
	                // notify if successfully sent to queue
	                xTaskNotifyGive(performing_taskHandle);
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <udp_receive_callback+0xfc>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	2202      	movs	r2, #2
 80010a6:	2100      	movs	r1, #0
 80010a8:	f010 faf6 	bl	8011698 <xTaskGenericNotify>
 80010ac:	e019      	b.n	80010e2 <udp_receive_callback+0xca>
	            }
            }
            else{
            	result_pro_t response={NULL, TEST_ERR};
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b6:	853b      	strh	r3, [r7, #40]	@ 0x28
            	send_response(response);
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010c0:	f000 f82c 	bl	800111c <send_response>
                printf("Failed to allocate memory for test_command_t!\n\r"); // Debug printf
 80010c4:	4814      	ldr	r0, [pc, #80]	@ (8001118 <udp_receive_callback+0x100>)
 80010c6:	f01c ff3f 	bl	801df48 <iprintf>
 80010ca:	e00a      	b.n	80010e2 <udp_receive_callback+0xca>
            }
        } else {
        	result_pro_t response={NULL, TEST_ERR};
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d4:	843b      	strh	r3, [r7, #32]
        	send_response(response);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010de:	f000 f81d 	bl	800111c <send_response>
        }
        pbuf_free(p);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f013 f912 	bl	801430c <pbuf_free>
    }
    else{
    	result_pro_t response={NULL, TEST_ERR};
    	send_response(response);
    }
}
 80010e8:	e00a      	b.n	8001100 <udp_receive_callback+0xe8>
    	result_pro_t response={NULL, TEST_ERR};
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f2:	833b      	strh	r3, [r7, #24]
    	send_response(response);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010fc:	f000 f80e 	bl	800111c <send_response>
}
 8001100:	bf00      	nop
 8001102:	3738      	adds	r7, #56	@ 0x38
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000c58 	.word	0x20000c58
 800110c:	20000c5c 	.word	0x20000c5c
 8001110:	20000c2c 	.word	0x20000c2c
 8001114:	20000c28 	.word	0x20000c28
 8001118:	0801f004 	.word	0x0801f004

0800111c <send_response>:

int send_response(result_pro_t result)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	463b      	mov	r3, r7
 8001124:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&g_server_addr) == 0)
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <send_response+0x74>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d029      	beq.n	8001184 <send_response+0x68>
    {
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8001130:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001134:	2106      	movs	r1, #6
 8001136:	2036      	movs	r0, #54	@ 0x36
 8001138:	f012 fe04 	bl	8013d44 <pbuf_alloc>
 800113c:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d01c      	beq.n	800117e <send_response+0x62>
        {
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	461a      	mov	r2, r3
 800114a:	463b      	mov	r3, r7
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	6010      	str	r0, [r2, #0]
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &g_server_addr, g_server_port) != ERR_OK)
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <send_response+0x78>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <send_response+0x7c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <send_response+0x74>)
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	f019 f812 	bl	801a188 <udp_sendto>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <send_response+0x5a>
            {
                pbuf_free(p);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f013 f8ce 	bl	801430c <pbuf_free>
            	return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e008      	b.n	8001188 <send_response+0x6c>
            }
            // Free the pbuf
            pbuf_free(p);
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f013 f8c8 	bl	801430c <pbuf_free>
        }
    }
    else{
    	return -1;
    }
}
 800117c:	e004      	b.n	8001188 <send_response+0x6c>
        	return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e001      	b.n	8001188 <send_response+0x6c>
    	return -1;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000c58 	.word	0x20000c58
 8001194:	20000c54 	.word	0x20000c54
 8001198:	20000c5c 	.word	0x20000c5c

0800119c <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3303      	adds	r3, #3
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <calculate_crc+0x28>)
 80011b4:	f002 f898 	bl	80032e8 <HAL_CRC_Calculate>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000230 	.word	0x20000230

080011c8 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80011d0:	f00c fbd6 	bl	800d980 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f00d fb6b 	bl	800e8b0 <osDelay>
 80011da:	e7fb      	b.n	80011d4 <lwip_initiation+0xc>

080011dc <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <blinking_blue+0x1c>)
 80011e8:	f004 fd53 	bl	8005c92 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80011ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f0:	f00d fb5e 	bl	800e8b0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80011f4:	bf00      	nop
 80011f6:	e7f5      	b.n	80011e4 <blinking_blue+0x8>
 80011f8:	40020400 	.word	0x40020400

080011fc <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001204:	1d39      	adds	r1, r7, #4
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	2201      	movs	r2, #1
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <__io_putchar+0x20>)
 800120e:	f00a f953 	bl	800b4b8 <HAL_UART_Transmit>
    return ch;
 8001212:	687b      	ldr	r3, [r7, #4]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200005f4 	.word	0x200005f4

08001220 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001228:	f7ff febe 	bl	8000fa8 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f00d fb3f 	bl	800e8b0 <osDelay>
 8001232:	e7fb      	b.n	800122c <udp_function+0xc>

08001234 <perform_tests>:
* @param argument: Not used (using queue instead)
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	2001      	movs	r0, #1
 8001242:	f010 f9dd 	bl	8011600 <ulTaskNotifyTake>

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 8001246:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <perform_tests+0x114>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f107 0114 	add.w	r1, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00e fd23 	bl	800fc9c <xQueueReceive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 800125c:	483b      	ldr	r0, [pc, #236]	@ (800134c <perform_tests+0x118>)
 800125e:	f01c fe73 	bl	801df48 <iprintf>
 8001262:	e7eb      	b.n	800123c <perform_tests+0x8>
		continue;
	}
	result_pro_t response;

	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations < 1){
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <perform_tests+0x40>
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	795b      	ldrb	r3, [r3, #5]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d108      	bne.n	8001286 <perform_tests+0x52>
		response.test_result =TEST_ERR;
 8001274:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001278:	823b      	strh	r3, [r7, #16]
		send_response(response);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001282:	f7ff ff4b 	bl	800111c <send_response>
	}
	response.test_id = cmd->test_id;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60fb      	str	r3, [r7, #12]

	switch (cmd->peripheral){
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	3b01      	subs	r3, #1
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d845      	bhi.n	8001322 <perform_tests+0xee>
 8001296:	a201      	add	r2, pc, #4	@ (adr r2, 800129c <perform_tests+0x68>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012eb 	.word	0x080012eb
 80012a4:	08001323 	.word	0x08001323
 80012a8:	080012f9 	.word	0x080012f9
 80012ac:	08001323 	.word	0x08001323
 80012b0:	08001323 	.word	0x08001323
 80012b4:	08001323 	.word	0x08001323
 80012b8:	08001307 	.word	0x08001307
 80012bc:	08001323 	.word	0x08001323
 80012c0:	08001323 	.word	0x08001323
 80012c4:	08001323 	.word	0x08001323
 80012c8:	08001323 	.word	0x08001323
 80012cc:	08001323 	.word	0x08001323
 80012d0:	08001323 	.word	0x08001323
 80012d4:	08001323 	.word	0x08001323
 80012d8:	08001315 	.word	0x08001315
	case TIMER:
		response.test_result = timer_testing(cmd);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f01c faf0 	bl	801d8c4 <timer_testing>
 80012e4:	4603      	mov	r3, r0
 80012e6:	823b      	strh	r3, [r7, #16]
		break;
 80012e8:	e023      	b.n	8001332 <perform_tests+0xfe>
	case UART:
		response.test_result = uart_testing(cmd);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f01c fb21 	bl	801d934 <uart_testing>
 80012f2:	4603      	mov	r3, r0
 80012f4:	823b      	strh	r3, [r7, #16]
		break;
 80012f6:	e01c      	b.n	8001332 <perform_tests+0xfe>
	case SPI:
		response.test_result = spi_testing(cmd);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f01c f8b0 	bl	801d460 <spi_testing>
 8001300:	4603      	mov	r3, r0
 8001302:	823b      	strh	r3, [r7, #16]
		break;
 8001304:	e015      	b.n	8001332 <perform_tests+0xfe>
	case I2C:
		response.test_result = i2c_testing(cmd);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4618      	mov	r0, r3
 800130a:	f01b fe6d 	bl	801cfe8 <i2c_testing>
 800130e:	4603      	mov	r3, r0
 8001310:	823b      	strh	r3, [r7, #16]
		break;
 8001312:	e00e      	b.n	8001332 <perform_tests+0xfe>
	case ADC_P:
		response.test_result = adc_testing(cmd);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4618      	mov	r0, r3
 8001318:	f01b fd94 	bl	801ce44 <adc_testing>
 800131c:	4603      	mov	r3, r0
 800131e:	823b      	strh	r3, [r7, #16]
		break;
 8001320:	e007      	b.n	8001332 <perform_tests+0xfe>
	default:
		response.test_result = TEST_ERR;
 8001322:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001326:	823b      	strh	r3, [r7, #16]
        vPortFree(cmd);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4618      	mov	r0, r3
 800132c:	f011 f942 	bl	80125b4 <vPortFree>
        break;
 8001330:	bf00      	nop
	}
    osDelay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f00d fabc 	bl	800e8b0 <osDelay>
    send_response(response);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001340:	f7ff feec 	bl	800111c <send_response>
  {
 8001344:	e77a      	b.n	800123c <perform_tests+0x8>
 8001346:	bf00      	nop
 8001348:	20000c2c 	.word	0x20000c2c
 800134c:	0801f034 	.word	0x0801f034

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001362:	f001 f925 	bl	80025b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d114      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]

	    // Use the ISR-safe function to give the semaphore
	    xSemaphoreGiveFromISR(TimSemHandle, &xHigherPriorityTaskWoken);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f00e fbf3 	bl	800fb6a <xQueueGiveFromISR>

	    // Call this if a higher priority task was unblocked
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_TIM_PeriodElapsedCallback+0x4a>
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800138c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001000 	.word	0x40001000
 80013a8:	40001400 	.word	0x40001400
 80013ac:	20000c48 	.word	0x20000c48
 80013b0:	e000ed04 	.word	0xe000ed04

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_MspInit+0x6c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <HAL_MspInit+0x6c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_MspInit+0x6c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_MspInit+0x6c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <HAL_MspInit+0x6c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_MspInit+0x6c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	210f      	movs	r1, #15
 80013fa:	f06f 0001 	mvn.w	r0, #1
 80013fe:	f001 fed7 	bl	80031b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	2005      	movs	r0, #5
 8001408:	f001 fed2 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800140c:	2005      	movs	r0, #5
 800140e:	f001 feeb 	bl	80031e8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	2051      	movs	r0, #81	@ 0x51
 8001418:	f001 feca 	bl	80031b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800141c:	2051      	movs	r0, #81	@ 0x51
 800141e:	f001 fee3 	bl	80031e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <HAL_ADC_MspInit+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12b      	bne.n	80014aa <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_ADC_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <HAL_ADC_MspInit+0x8c>)
 8001496:	f004 f92b 	bl	80056f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2012      	movs	r0, #18
 80014a0:	f001 fe86 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014a4:	2012      	movs	r0, #18
 80014a6:	f001 fe9f 	bl	80031e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800

080014c0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_CRC_MspInit+0x38>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10b      	bne.n	80014ea <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_CRC_MspInit+0x3c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_CRC_MspInit+0x3c>)
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_CRC_MspInit+0x3c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023000 	.word	0x40023000
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_DAC_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12b      	bne.n	800157a <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 8001528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_DAC_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001552:	2310      	movs	r3, #16
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001556:	2303      	movs	r3, #3
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <HAL_DAC_MspInit+0x8c>)
 8001566:	f004 f8c3 	bl	80056f0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	2036      	movs	r0, #54	@ 0x36
 8001570:	f001 fe1e 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001574:	2036      	movs	r0, #54	@ 0x36
 8001576:	f001 fe37 	bl	80031e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40007400 	.word	0x40007400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0ac      	sub	sp, #176	@ 0xb0
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	2284      	movs	r2, #132	@ 0x84
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f01c fe21 	bl	801e1f8 <memset>
  if(hi2c->Instance==I2C1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a82      	ldr	r2, [pc, #520]	@ (80017c4 <HAL_I2C_MspInit+0x234>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d17b      	bne.n	80016b8 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 faf6 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015da:	f7ff feeb 	bl	80013b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b7a      	ldr	r3, [pc, #488]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a79      	ldr	r2, [pc, #484]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b77      	ldr	r3, [pc, #476]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001610:	2304      	movs	r3, #4
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161a:	4619      	mov	r1, r3
 800161c:	486b      	ldr	r0, [pc, #428]	@ (80017cc <HAL_I2C_MspInit+0x23c>)
 800161e:	f004 f867 	bl	80056f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001622:	4b69      	ldr	r3, [pc, #420]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a68      	ldr	r2, [pc, #416]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800163a:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800163c:	4a65      	ldr	r2, [pc, #404]	@ (80017d4 <HAL_I2C_MspInit+0x244>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001640:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001642:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001646:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001648:	4b61      	ldr	r3, [pc, #388]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164e:	4b60      	ldr	r3, [pc, #384]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001654:	4b5e      	ldr	r3, [pc, #376]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800165a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165c:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001662:	4b5b      	ldr	r3, [pc, #364]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001668:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800166e:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001674:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800167a:	4855      	ldr	r0, [pc, #340]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800167c:	f002 f940 	bl	8003900 <HAL_DMA_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001686:	f7ff fe95 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a50      	ldr	r2, [pc, #320]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 800168e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001690:	4a4f      	ldr	r2, [pc, #316]	@ (80017d0 <HAL_I2C_MspInit+0x240>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	201f      	movs	r0, #31
 800169c:	f001 fd88 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016a0:	201f      	movs	r0, #31
 80016a2:	f001 fda1 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2020      	movs	r0, #32
 80016ac:	f001 fd80 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016b0:	2020      	movs	r0, #32
 80016b2:	f001 fd99 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016b6:	e080      	b.n	80017ba <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a46      	ldr	r2, [pc, #280]	@ (80017d8 <HAL_I2C_MspInit+0x248>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d17b      	bne.n	80017ba <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fa74 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_MspInit+0x152>
      Error_Handler();
 80016de:	f7ff fe69 	bl	80013b4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a38      	ldr	r2, [pc, #224]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80016e8:	f043 0320 	orr.w	r3, r3, #32
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016fa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800171e:	4619      	mov	r1, r3
 8001720:	482e      	ldr	r0, [pc, #184]	@ (80017dc <HAL_I2C_MspInit+0x24c>)
 8001722:	f003 ffe5 	bl	80056f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 800172c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_I2C_MspInit+0x238>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001740:	4a28      	ldr	r2, [pc, #160]	@ (80017e4 <HAL_I2C_MspInit+0x254>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001746:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800174a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 800174e:	2240      	movs	r2, #64	@ 0x40
 8001750:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 800175a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800175e:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001780:	f002 f8be 	bl	8003900 <HAL_DMA_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 800178a:	f7ff fe13 	bl	80013b4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001792:	639a      	str	r2, [r3, #56]	@ 0x38
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_I2C_MspInit+0x250>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	205f      	movs	r0, #95	@ 0x5f
 80017a0:	f001 fd06 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80017a4:	205f      	movs	r0, #95	@ 0x5f
 80017a6:	f001 fd1f 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2105      	movs	r1, #5
 80017ae:	2060      	movs	r0, #96	@ 0x60
 80017b0:	f001 fcfe 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80017b4:	2060      	movs	r0, #96	@ 0x60
 80017b6:	f001 fd17 	bl	80031e8 <HAL_NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	37b0      	adds	r7, #176	@ 0xb0
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	20000310 	.word	0x20000310
 80017d4:	40026010 	.word	0x40026010
 80017d8:	40006000 	.word	0x40006000
 80017dc:	40021400 	.word	0x40021400
 80017e0:	20000370 	.word	0x20000370
 80017e4:	40026088 	.word	0x40026088

080017e8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_I2C_MspDeInit+0x94>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11b      	bne.n	8001832 <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_I2C_MspDeInit+0x98>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a20      	ldr	r2, [pc, #128]	@ (8001880 <HAL_I2C_MspDeInit+0x98>)
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800180a:	481e      	ldr	r0, [pc, #120]	@ (8001884 <HAL_I2C_MspDeInit+0x9c>)
 800180c:	f004 f91c 	bl	8005a48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001814:	481b      	ldr	r0, [pc, #108]	@ (8001884 <HAL_I2C_MspDeInit+0x9c>)
 8001816:	f004 f917 	bl	8005a48 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181e:	4618      	mov	r0, r3
 8001820:	f002 f91c 	bl	8003a5c <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001824:	201f      	movs	r0, #31
 8001826:	f001 fced 	bl	8003204 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800182a:	2020      	movs	r0, #32
 800182c:	f001 fcea 	bl	8003204 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001830:	e01f      	b.n	8001872 <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <HAL_I2C_MspDeInit+0xa0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d11a      	bne.n	8001872 <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_I2C_MspDeInit+0x98>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a0f      	ldr	r2, [pc, #60]	@ (8001880 <HAL_I2C_MspDeInit+0x98>)
 8001842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001848:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800184c:	480f      	ldr	r0, [pc, #60]	@ (800188c <HAL_I2C_MspDeInit+0xa4>)
 800184e:	f004 f8fb 	bl	8005a48 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8001852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001856:	480d      	ldr	r0, [pc, #52]	@ (800188c <HAL_I2C_MspDeInit+0xa4>)
 8001858:	f004 f8f6 	bl	8005a48 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001860:	4618      	mov	r0, r3
 8001862:	f002 f8fb 	bl	8003a5c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001866:	205f      	movs	r0, #95	@ 0x5f
 8001868:	f001 fccc 	bl	8003204 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 800186c:	2060      	movs	r0, #96	@ 0x60
 800186e:	f001 fcc9 	bl	8003204 <HAL_NVIC_DisableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40005400 	.word	0x40005400
 8001880:	40023800 	.word	0x40023800
 8001884:	40020400 	.word	0x40020400
 8001888:	40006000 	.word	0x40006000
 800188c:	40021400 	.word	0x40021400

08001890 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	@ 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <HAL_SPI_MspInit+0x168>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d14c      	bne.n	800194c <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b2:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a51      	ldr	r2, [pc, #324]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b4f      	ldr	r3, [pc, #316]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018fa:	2360      	movs	r3, #96	@ 0x60
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	483a      	ldr	r0, [pc, #232]	@ (8001a00 <HAL_SPI_MspInit+0x170>)
 8001916:	f003 feeb 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800191a:	2320      	movs	r3, #32
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	4833      	ldr	r0, [pc, #204]	@ (8001a04 <HAL_SPI_MspInit+0x174>)
 8001936:	f003 fedb 	bl	80056f0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 6, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2106      	movs	r1, #6
 800193e:	2023      	movs	r0, #35	@ 0x23
 8001940:	f001 fc36 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001944:	2023      	movs	r0, #35	@ 0x23
 8001946:	f001 fc4f 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800194a:	e051      	b.n	80019f0 <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2d      	ldr	r2, [pc, #180]	@ (8001a08 <HAL_SPI_MspInit+0x178>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d14c      	bne.n	80019f0 <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	4a28      	ldr	r2, [pc, #160]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_SPI_MspInit+0x16c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800199e:	230c      	movs	r3, #12
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ae:	2305      	movs	r3, #5
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4814      	ldr	r0, [pc, #80]	@ (8001a0c <HAL_SPI_MspInit+0x17c>)
 80019ba:	f003 fe99 	bl	80056f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d0:	2305      	movs	r3, #5
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_SPI_MspInit+0x174>)
 80019dc:	f003 fe88 	bl	80056f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2106      	movs	r1, #6
 80019e4:	2024      	movs	r0, #36	@ 0x24
 80019e6:	f001 fbe3 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019ea:	2024      	movs	r0, #36	@ 0x24
 80019ec:	f001 fbfc 	bl	80031e8 <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3738      	adds	r7, #56	@ 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	40020800 	.word	0x40020800

08001a10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_TIM_Base_MspInit+0x44>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2037      	movs	r0, #55	@ 0x37
 8001a40:	f001 fbb6 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a44:	2037      	movs	r0, #55	@ 0x37
 8001a46:	f001 fbcf 	bl	80031e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40001400 	.word	0x40001400
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0b0      	sub	sp, #192	@ 0xc0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a78:	2284      	movs	r2, #132	@ 0x84
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f01c fbbb 	bl	801e1f8 <memset>
  if(huart->Instance==UART4)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4aaf      	ldr	r2, [pc, #700]	@ (8001d44 <HAL_UART_MspInit+0x2e8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	f040 8095 	bne.w	8001bb8 <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001a94:	2340      	movs	r3, #64	@ 0x40
 8001a96:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 f88f 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001aa8:	f7ff fc84 	bl	80013b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aac:	4ba6      	ldr	r3, [pc, #664]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	4aa5      	ldr	r2, [pc, #660]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ab2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab8:	4ba3      	ldr	r3, [pc, #652]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	4a9f      	ldr	r2, [pc, #636]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	4b9a      	ldr	r3, [pc, #616]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	4a99      	ldr	r2, [pc, #612]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae8:	4b97      	ldr	r3, [pc, #604]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b16:	4619      	mov	r1, r3
 8001b18:	488c      	ldr	r0, [pc, #560]	@ (8001d4c <HAL_UART_MspInit+0x2f0>)
 8001b1a:	f003 fde9 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b42:	4619      	mov	r1, r3
 8001b44:	4882      	ldr	r0, [pc, #520]	@ (8001d50 <HAL_UART_MspInit+0x2f4>)
 8001b46:	f003 fdd3 	bl	80056f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001b4a:	4b82      	ldr	r3, [pc, #520]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b4c:	4a82      	ldr	r2, [pc, #520]	@ (8001d58 <HAL_UART_MspInit+0x2fc>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001b50:	4b80      	ldr	r3, [pc, #512]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b7e      	ldr	r3, [pc, #504]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b7b      	ldr	r3, [pc, #492]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6c:	4b79      	ldr	r3, [pc, #484]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b72:	4b78      	ldr	r3, [pc, #480]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b78:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7e:	4b75      	ldr	r3, [pc, #468]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b84:	4b73      	ldr	r3, [pc, #460]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b8a:	4872      	ldr	r0, [pc, #456]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b8c:	f001 feb8 	bl	8003900 <HAL_DMA_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001b96:	f7ff fc0d 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001b9e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	@ (8001d54 <HAL_UART_MspInit+0x2f8>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2106      	movs	r1, #6
 8001baa:	2034      	movs	r0, #52	@ 0x34
 8001bac:	f001 fb00 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bb0:	2034      	movs	r0, #52	@ 0x34
 8001bb2:	f001 fb19 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bb6:	e0c0      	b.n	8001d3a <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	@ (8001d5c <HAL_UART_MspInit+0x300>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d171      	bne.n	8001ca6 <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f006 fff6 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001bda:	f7ff fbeb 	bl	80013b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bde:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a59      	ldr	r2, [pc, #356]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b57      	ldr	r3, [pc, #348]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a53      	ldr	r2, [pc, #332]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b51      	ldr	r3, [pc, #324]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c0e:	2360      	movs	r3, #96	@ 0x60
 8001c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c26:	2307      	movs	r3, #7
 8001c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c30:	4619      	mov	r1, r3
 8001c32:	484b      	ldr	r0, [pc, #300]	@ (8001d60 <HAL_UART_MspInit+0x304>)
 8001c34:	f003 fd5c 	bl	80056f0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c38:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d68 <HAL_UART_MspInit+0x30c>)
 8001c3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c3e:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c48:	2240      	movs	r2, #64	@ 0x40
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c66:	4b3f      	ldr	r3, [pc, #252]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b3c      	ldr	r3, [pc, #240]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c78:	483a      	ldr	r0, [pc, #232]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c7a:	f001 fe41 	bl	8003900 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001c84:	f7ff fb96 	bl	80013b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c8e:	4a35      	ldr	r2, [pc, #212]	@ (8001d64 <HAL_UART_MspInit+0x308>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2106      	movs	r1, #6
 8001c98:	2026      	movs	r0, #38	@ 0x26
 8001c9a:	f001 fa89 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c9e:	2026      	movs	r0, #38	@ 0x26
 8001ca0:	f001 faa2 	bl	80031e8 <HAL_NVIC_EnableIRQ>
}
 8001ca4:	e049      	b.n	8001d3a <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART3)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a30      	ldr	r2, [pc, #192]	@ (8001d6c <HAL_UART_MspInit+0x310>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d144      	bne.n	8001d3a <HAL_UART_MspInit+0x2de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f006 ff7e 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001cca:	f7ff fb73 	bl	80013b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_UART_MspInit+0x2ec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d22:	4619      	mov	r1, r3
 8001d24:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <HAL_UART_MspInit+0x304>)
 8001d26:	f003 fce3 	bl	80056f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	2027      	movs	r0, #39	@ 0x27
 8001d30:	f001 fa3e 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d34:	2027      	movs	r0, #39	@ 0x27
 8001d36:	f001 fa57 	bl	80031e8 <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	37c0      	adds	r7, #192	@ 0xc0
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40004c00 	.word	0x40004c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020800 	.word	0x40020800
 8001d54:	2000067c 	.word	0x2000067c
 8001d58:	40026040 	.word	0x40026040
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	200006dc 	.word	0x200006dc
 8001d68:	400260a0 	.word	0x400260a0
 8001d6c:	40004800 	.word	0x40004800

08001d70 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0ac      	sub	sp, #176	@ 0xb0
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	2284      	movs	r2, #132	@ 0x84
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f01c fa31 	bl	801e1f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d9e:	d159      	bne.n	8001e54 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001da0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 ff05 	bl	8008bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001dbc:	f7ff fafa 	bl	80013b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001df2:	230a      	movs	r3, #10
 8001df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4818      	ldr	r0, [pc, #96]	@ (8001e60 <HAL_PCD_MspInit+0xf0>)
 8001e00:	f003 fc76 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4810      	ldr	r0, [pc, #64]	@ (8001e60 <HAL_PCD_MspInit+0xf0>)
 8001e20:	f003 fc66 	bl	80056f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e28:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e46:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <HAL_PCD_MspInit+0xec>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e54:	bf00      	nop
 8001e56:	37b0      	adds	r7, #176	@ 0xb0
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	@ 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e74:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <HAL_InitTick+0xe0>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_InitTick+0xe0>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e80:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <HAL_InitTick+0xe0>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8c:	f107 0210 	add.w	r2, r7, #16
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f006 fe60 	bl	8008b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ea6:	f006 fe31 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 8001eaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8001eac:	e004      	b.n	8001eb8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eae:	f006 fe2d 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eba:	4a23      	ldr	r2, [pc, #140]	@ (8001f48 <HAL_InitTick+0xe4>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001ec8:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_InitTick+0xec>)
 8001eca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001ece:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001eec:	4817      	ldr	r0, [pc, #92]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001eee:	f008 ff13 	bl	800ad18 <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11b      	bne.n	8001f38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f00:	4812      	ldr	r0, [pc, #72]	@ (8001f4c <HAL_InitTick+0xe8>)
 8001f02:	f008 ff61 	bl	800adc8 <HAL_TIM_Base_Start_IT>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f14:	2036      	movs	r0, #54	@ 0x36
 8001f16:	f001 f967 	bl	80031e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d808      	bhi.n	8001f32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	2036      	movs	r0, #54	@ 0x36
 8001f26:	f001 f943 	bl	80031b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_InitTick+0xf0>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e002      	b.n	8001f38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3738      	adds	r7, #56	@ 0x38
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	20000c60 	.word	0x20000c60
 8001f50:	40001000 	.word	0x40001000
 8001f54:	20000004 	.word	0x20000004

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001f66:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <HardFault_Handler+0x2c>)
 8001f68:	f01b ffee 	bl	801df48 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f70:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <HardFault_Handler+0x30>)
 8001f72:	f003 fe8e 	bl	8005c92 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	e002      	b.n	8001f82 <HardFault_Handler+0x22>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a03      	ldr	r2, [pc, #12]	@ (8001f94 <HardFault_Handler+0x34>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	ddf8      	ble.n	8001f7c <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001f8a:	e7ef      	b.n	8001f6c <HardFault_Handler+0xc>
 8001f8c:	0801f060 	.word	0x0801f060
 8001f90:	40020400 	.word	0x40020400
 8001f94:	000f423f 	.word	0x000f423f

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <MemManage_Handler+0x10>)
 8001f9e:	f01b ffd3 	bl	801df48 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa2:	bf00      	nop
 8001fa4:	e7fd      	b.n	8001fa2 <MemManage_Handler+0xa>
 8001fa6:	bf00      	nop
 8001fa8:	0801f060 	.word	0x0801f060

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <BusFault_Handler+0x10>)
 8001fb2:	f01b ffc9 	bl	801df48 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	bf00      	nop
 8001fb8:	e7fd      	b.n	8001fb6 <BusFault_Handler+0xa>
 8001fba:	bf00      	nop
 8001fbc:	0801f060 	.word	0x0801f060

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <DMA1_Stream0_IRQHandler+0x10>)
 8001fea:	f001 fe87 	bl	8003cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000310 	.word	0x20000310

08001ff8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <DMA1_Stream2_IRQHandler+0x10>)
 8001ffe:	f001 fe7d 	bl	8003cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000067c 	.word	0x2000067c

0800200c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA1_Stream5_IRQHandler+0x10>)
 8002012:	f001 fe73 	bl	8003cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000370 	.word	0x20000370

08002020 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Stream6_IRQHandler+0x10>)
 8002026:	f001 fe69 	bl	8003cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200006dc 	.word	0x200006dc

08002034 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <ADC_IRQHandler+0x10>)
 800203a:	f000 fc4d 	bl	80028d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200001e8 	.word	0x200001e8

08002048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <I2C1_EV_IRQHandler+0x10>)
 800204e:	f004 f9d3 	bl	80063f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000268 	.word	0x20000268

0800205c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <I2C1_ER_IRQHandler+0x10>)
 8002062:	f004 f9e3 	bl	800642c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000268 	.word	0x20000268

08002070 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <SPI1_IRQHandler+0x10>)
 8002076:	f007 fda1 	bl	8009bbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003d0 	.word	0x200003d0

08002084 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <SPI2_IRQHandler+0x10>)
 800208a:	f007 fd97 	bl	8009bbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000434 	.word	0x20000434

08002098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <USART2_IRQHandler+0x10>)
 800209e:	f009 fc89 	bl	800b9b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000056c 	.word	0x2000056c

080020ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <USART3_IRQHandler+0x10>)
 80020b2:	f009 fc7f 	bl	800b9b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200005f4 	.word	0x200005f4

080020c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80020c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020c8:	f003 fdfe 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <UART4_IRQHandler+0x10>)
 80020d6:	f009 fc6d 	bl	800b9b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004e4 	.word	0x200004e4

080020e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <TIM6_DAC_IRQHandler+0x20>)
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80020f2:	4804      	ldr	r0, [pc, #16]	@ (8002104 <TIM6_DAC_IRQHandler+0x20>)
 80020f4:	f001 fb17 	bl	8003726 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80020f8:	4803      	ldr	r0, [pc, #12]	@ (8002108 <TIM6_DAC_IRQHandler+0x24>)
 80020fa:	f008 ff0d 	bl	800af18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000254 	.word	0x20000254
 8002108:	20000c60 	.word	0x20000c60

0800210c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <TIM7_IRQHandler+0x10>)
 8002112:	f008 ff01 	bl	800af18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000498 	.word	0x20000498

08002120 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <ETH_IRQHandler+0x10>)
 8002126:	f002 fbfb 	bl	8004920 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000a038 	.word	0x2000a038

08002134 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <ETH_WKUP_IRQHandler+0x10>)
 800213a:	f002 fbf1 	bl	8004920 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000a038 	.word	0x2000a038

08002148 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <I2C4_EV_IRQHandler+0x10>)
 800215e:	f004 f94b 	bl	80063f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200002bc 	.word	0x200002bc

0800216c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <I2C4_ER_IRQHandler+0x10>)
 8002172:	f004 f95b 	bl	800642c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200002bc 	.word	0x200002bc

08002180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return 1;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_kill>:

int _kill(int pid, int sig)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <_kill+0x20>)
 800219c:	2216      	movs	r2, #22
 800219e:	601a      	str	r2, [r3, #0]
  return -1;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	20027ccc 	.word	0x20027ccc

080021b4 <_exit>:

void _exit (int status)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffe5 	bl	8002190 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <_exit+0x12>

080021ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e00a      	b.n	80021f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021dc:	f3af 8000 	nop.w
 80021e0:	4601      	mov	r1, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	b2ca      	uxtb	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf0      	blt.n	80021dc <_read+0x12>
  }

  return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e009      	b.n	800222a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ffec 	bl	80011fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbf1      	blt.n	8002216 <_write+0x12>
  }
  return len;
 8002232:	687b      	ldr	r3, [r7, #4]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_close>:

int _close(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002264:	605a      	str	r2, [r3, #4]
  return 0;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_isatty>:

int _isatty(int file)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d205      	bcs.n	80022e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <_sbrk+0x6c>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	e009      	b.n	80022f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20050000 	.word	0x20050000
 8002304:	00000400 	.word	0x00000400
 8002308:	20000cac 	.word	0x20000cac
 800230c:	20027ce0 	.word	0x20027ce0
 8002310:	20027ccc 	.word	0x20027ccc

08002314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <SystemInit+0x20>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <SystemInit+0x20>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002370 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800233c:	f7ff ffea 	bl	8002314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	@ (8002378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	@ (8002384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002366:	f01b fff3 	bl	801e350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7fe f937 	bl	80005dc <main>
  bx  lr    
 800236e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002370:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800237c:	080223c0 	.word	0x080223c0
  ldr r2, =_sbss
 8002380:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002384:	20027cdc 	.word	0x20027cdc

08002388 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <CAN1_RX0_IRQHandler>

0800238a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <LAN8742_RegisterBusIO+0x28>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <LAN8742_RegisterBusIO+0x28>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <LAN8742_RegisterBusIO+0x28>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e014      	b.n	80023e2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d139      	bne.n	800247e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e01c      	b.n	800245e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f107 020c 	add.w	r2, r7, #12
 800242c:	2112      	movs	r1, #18
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	4798      	blx	r3
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	da03      	bge.n	8002440 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002438:	f06f 0304 	mvn.w	r3, #4
 800243c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800243e:	e00b      	b.n	8002458 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	d105      	bne.n	8002458 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
         break;
 8002456:	e005      	b.n	8002464 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b1f      	cmp	r3, #31
 8002462:	d9df      	bls.n	8002424 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b1f      	cmp	r3, #31
 800246a:	d902      	bls.n	8002472 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800246c:	f06f 0302 	mvn.w	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800247e:	693b      	ldr	r3, [r7, #16]
 }
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6810      	ldr	r0, [r2, #0]
 800249c:	f107 020c 	add.w	r2, r7, #12
 80024a0:	2101      	movs	r1, #1
 80024a2:	4798      	blx	r3
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da02      	bge.n	80024b0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024aa:	f06f 0304 	mvn.w	r3, #4
 80024ae:	e06e      	b.n	800258e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6810      	ldr	r0, [r2, #0]
 80024b8:	f107 020c 	add.w	r2, r7, #12
 80024bc:	2101      	movs	r1, #1
 80024be:	4798      	blx	r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	da02      	bge.n	80024cc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024c6:	f06f 0304 	mvn.w	r3, #4
 80024ca:	e060      	b.n	800258e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e059      	b.n	800258e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6810      	ldr	r0, [r2, #0]
 80024e2:	f107 020c 	add.w	r2, r7, #12
 80024e6:	2100      	movs	r1, #0
 80024e8:	4798      	blx	r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da02      	bge.n	80024f6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024f0:	f06f 0304 	mvn.w	r3, #4
 80024f4:	e04b      	b.n	800258e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11b      	bne.n	8002538 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <LAN8742_GetLinkState+0x90>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002514:	2302      	movs	r3, #2
 8002516:	e03a      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002522:	2303      	movs	r3, #3
 8002524:	e033      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002530:	2304      	movs	r3, #4
 8002532:	e02c      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002534:	2305      	movs	r3, #5
 8002536:	e02a      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6810      	ldr	r0, [r2, #0]
 8002540:	f107 020c 	add.w	r2, r7, #12
 8002544:	211f      	movs	r1, #31
 8002546:	4798      	blx	r3
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	da02      	bge.n	8002554 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800254e:	f06f 0304 	mvn.w	r3, #4
 8002552:	e01c      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800255e:	2306      	movs	r3, #6
 8002560:	e015      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 031c 	and.w	r3, r3, #28
 8002568:	2b18      	cmp	r3, #24
 800256a:	d101      	bne.n	8002570 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800256c:	2302      	movs	r3, #2
 800256e:	e00e      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 031c 	and.w	r3, r3, #28
 8002576:	2b08      	cmp	r3, #8
 8002578:	d101      	bne.n	800257e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800257a:	2303      	movs	r3, #3
 800257c:	e007      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 031c 	and.w	r3, r3, #28
 8002584:	2b14      	cmp	r3, #20
 8002586:	d101      	bne.n	800258c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002588:	2304      	movs	r3, #4
 800258a:	e000      	b.n	800258e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800258c:	2305      	movs	r3, #5
    }
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259a:	2003      	movs	r0, #3
 800259c:	f000 fdfd 	bl	800319a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a0:	2005      	movs	r0, #5
 80025a2:	f7ff fc5f 	bl	8001e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a6:	f7fe ff0b 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000cb0 	.word	0x20000cb0

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000cb0 	.word	0x20000cb0

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d005      	beq.n	8002616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_Delay+0x44>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002616:	bf00      	nop
 8002618:	f7ff ffde 	bl	80025d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8f7      	bhi.n	8002618 <HAL_Delay+0x28>
  {
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008

08002638 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e031      	b.n	80026b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe feea 	bl	8001430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_ADC_Init+0x84>)
 800267c:	4013      	ands	r3, r2
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fbb2 	bl	8002df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffffeefd 	.word	0xffffeefd

080026c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Stop+0x16>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e01f      	b.n	8002716 <HAL_ADC_Stop+0x56>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_ADC_Stop+0x64>)
 8002702:	4013      	ands	r3, r2
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	ffffeefe 	.word	0xffffeefe

08002728 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Start_IT+0x1a>
 800273e:	2302      	movs	r3, #2
 8002740:	e0b5      	b.n	80028ae <HAL_ADC_Start_IT+0x186>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d018      	beq.n	800278a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002768:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <HAL_ADC_Start_IT+0x194>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a54      	ldr	r2, [pc, #336]	@ (80028c0 <HAL_ADC_Start_IT+0x198>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0c9a      	lsrs	r2, r3, #18
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800277c:	e002      	b.n	8002784 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3b01      	subs	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f9      	bne.n	800277e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d17d      	bne.n	8002894 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800279c:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <HAL_ADC_Start_IT+0x19c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d2:	d106      	bne.n	80027e2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	f023 0206 	bic.w	r2, r3, #6
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
 80027e0:	e002      	b.n	80027e8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027f8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <HAL_ADC_Start_IT+0x1a0>)
 8002806:	430b      	orrs	r3, r1
 8002808:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800280a:	4b30      	ldr	r3, [pc, #192]	@ (80028cc <HAL_ADC_Start_IT+0x1a4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d143      	bne.n	80028ac <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e03a      	b.n	80028ac <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a25      	ldr	r2, [pc, #148]	@ (80028d0 <HAL_ADC_Start_IT+0x1a8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10e      	bne.n	800285e <HAL_ADC_Start_IT+0x136>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800285c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_ADC_Start_IT+0x1a4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d120      	bne.n	80028ac <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_ADC_Start_IT+0x1ac>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d11b      	bne.n	80028ac <HAL_ADC_Start_IT+0x184>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d114      	bne.n	80028ac <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	e00b      	b.n	80028ac <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	fffff8fe 	.word	0xfffff8fe
 80028c8:	04000020 	.word	0x04000020
 80028cc:	40012300 	.word	0x40012300
 80028d0:	40012000 	.word	0x40012000
 80028d4:	40012200 	.word	0x40012200

080028d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d049      	beq.n	80029a2 <HAL_ADC_IRQHandler+0xca>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d046      	beq.n	80029a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12b      	bne.n	8002992 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d127      	bne.n	8002992 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0220 	bic.w	r2, r2, #32
 800296c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f01a fb06 	bl	801cfa4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0212 	mvn.w	r2, #18
 80029a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d057      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x190>
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d054      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d139      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d12b      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d124      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11d      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d119      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fac3 	bl	8002fe4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 020c 	mvn.w	r2, #12
 8002a66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d017      	beq.n	8002aae <HAL_ADC_IRQHandler+0x1d6>
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d014      	beq.n	8002aae <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10d      	bne.n	8002aae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f837 	bl	8002b12 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002abc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x218>
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f043 0202 	orr.w	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0220 	mvn.w	r2, #32
 8002ade:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f820 	bl	8002b26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0220 	mvn.w	r2, #32
 8002aee:	601a      	str	r2, [r3, #0]
  }
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e13a      	b.n	8002dce <HAL_ADC_ConfigChannel+0x292>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d93a      	bls.n	8002bde <HAL_ADC_ConfigChannel+0xa2>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b70:	d035      	beq.n	8002bde <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	3b1e      	subs	r3, #30
 8002b88:	2207      	movs	r2, #7
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	400a      	ands	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a8f      	ldr	r2, [pc, #572]	@ (8002ddc <HAL_ADC_ConfigChannel+0x2a0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	061a      	lsls	r2, r3, #24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	e039      	b.n	8002c2c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4403      	add	r3, r0
 8002bd0:	3b1e      	subs	r3, #30
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bdc:	e026      	b.n	8002c2c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4403      	add	r3, r0
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	409a      	lsls	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d824      	bhi.n	8002c7e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b05      	subs	r3, #5
 8002c46:	221f      	movs	r2, #31
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	400a      	ands	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b05      	subs	r3, #5
 8002c70:	fa00 f203 	lsl.w	r2, r0, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c7c:	e04c      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d824      	bhi.n	8002cd0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b23      	subs	r3, #35	@ 0x23
 8002c98:	221f      	movs	r2, #31
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b23      	subs	r3, #35	@ 0x23
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cce:	e023      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b41      	subs	r3, #65	@ 0x41
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b41      	subs	r3, #65	@ 0x41
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10a      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1fc>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d2a:	d105      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d36:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a28      	ldr	r2, [pc, #160]	@ (8002de0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10f      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x226>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b12      	cmp	r3, #18
 8002d48:	d10b      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d4a:	4b26      	ldr	r3, [pc, #152]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a25      	ldr	r2, [pc, #148]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d54:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d56:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d12b      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x288>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	@ (8002ddc <HAL_ADC_ConfigChannel+0x2a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x242>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b11      	cmp	r3, #17
 8002d7c:	d122      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d84:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d88:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d8a:	4b16      	ldr	r3, [pc, #88]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	@ (8002de4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <HAL_ADC_ConfigChannel+0x2a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_ADC_ConfigChannel+0x2ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <HAL_ADC_ConfigChannel+0x2b0>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9a      	lsrs	r2, r3, #18
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002db6:	e002      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f9      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	10000012 	.word	0x10000012
 8002de0:	40012000 	.word	0x40012000
 8002de4:	40012300 	.word	0x40012300
 8002de8:	20000000 	.word	0x20000000
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002df8:	4b78      	ldr	r3, [pc, #480]	@ (8002fdc <ADC_Init+0x1ec>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a77      	ldr	r2, [pc, #476]	@ (8002fdc <ADC_Init+0x1ec>)
 8002dfe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002e02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e04:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <ADC_Init+0x1ec>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4973      	ldr	r1, [pc, #460]	@ (8002fdc <ADC_Init+0x1ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	4a58      	ldr	r2, [pc, #352]	@ (8002fe0 <ADC_Init+0x1f0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e00f      	b.n	8002eea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0202 	bic.w	r2, r2, #2
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	005a      	lsls	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	3b01      	subs	r3, #1
 8002f44:	035a      	lsls	r2, r3, #13
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	051a      	lsls	r2, r3, #20
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fa2:	025a      	lsls	r2, r3, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	029a      	lsls	r2, r3, #10
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	0f000001 	.word	0x0f000001

08002fe4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <__NVIC_SetPriorityGrouping+0x40>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	05fa0000 	.word	0x05fa0000

08003040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <__NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0b      	blt.n	8003086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4907      	ldr	r1, [pc, #28]	@ (8003094 <__NVIC_EnableIRQ+0x38>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2001      	movs	r0, #1
 800307e:	fa00 f202 	lsl.w	r2, r0, r2
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db12      	blt.n	80030d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	490a      	ldr	r1, [pc, #40]	@ (80030dc <__NVIC_DisableIRQ+0x44>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	3320      	adds	r3, #32
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030c4:	f3bf 8f4f 	dsb	sy
}
 80030c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030ca:	f3bf 8f6f 	isb	sy
}
 80030ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	@ (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	@ (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	@ 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ff28 	bl	8002ff8 <__NVIC_SetPriorityGrouping>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c2:	f7ff ff3d 	bl	8003040 <__NVIC_GetPriorityGrouping>
 80031c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6978      	ldr	r0, [r7, #20]
 80031ce:	f7ff ffb1 	bl	8003134 <NVIC_EncodePriority>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff80 	bl	80030e0 <__NVIC_SetPriority>
}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff30 	bl	800305c <__NVIC_EnableIRQ>
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff40 	bl	8003098 <__NVIC_DisableIRQ>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e054      	b.n	80032dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7f5b      	ldrb	r3, [r3, #29]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe f93c 	bl	80014c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	791b      	ldrb	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	@ (80032e4 <HAL_CRC_Init+0xc4>)
 800325c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0218 	bic.w	r2, r2, #24
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	e00c      	b.n	800328a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	461a      	mov	r2, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f94c 	bl	8003518 <HAL_CRCEx_Polynomial_Set>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e028      	b.n	80032dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	795b      	ldrb	r3, [r3, #5]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f04f 32ff 	mov.w	r2, #4294967295
 800329a:	611a      	str	r2, [r3, #16]
 800329c:	e004      	b.n	80032a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6912      	ldr	r2, [r2, #16]
 80032a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	04c11db7 	.word	0x04c11db7

080032e8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2202      	movs	r2, #2
 80032fc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d006      	beq.n	8003324 <HAL_CRC_Calculate+0x3c>
 8003316:	2b03      	cmp	r3, #3
 8003318:	d829      	bhi.n	800336e <HAL_CRC_Calculate+0x86>
 800331a:	2b01      	cmp	r3, #1
 800331c:	d019      	beq.n	8003352 <HAL_CRC_Calculate+0x6a>
 800331e:	2b02      	cmp	r3, #2
 8003320:	d01e      	beq.n	8003360 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003322:	e024      	b.n	800336e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e00a      	b.n	8003340 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d3f0      	bcc.n	800332a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
      break;
 8003350:	e00e      	b.n	8003370 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f812 	bl	8003380 <CRC_Handle_8>
 800335c:	6138      	str	r0, [r7, #16]
      break;
 800335e:	e007      	b.n	8003370 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f89d 	bl	80034a4 <CRC_Handle_16>
 800336a:	6138      	str	r0, [r7, #16]
      break;
 800336c:	e000      	b.n	8003370 <HAL_CRC_Calculate+0x88>
      break;
 800336e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003376:	693b      	ldr	r3, [r7, #16]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	@ 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e023      	b.n	80033da <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3301      	adds	r3, #1
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	440b      	add	r3, r1
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80033ac:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	440b      	add	r3, r1
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80033bc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3303      	adds	r3, #3
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	440b      	add	r3, r1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80033d0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	3301      	adds	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3d6      	bcc.n	8003392 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d051      	beq.n	8003492 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4413      	add	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	7013      	strb	r3, [r2, #0]
 8003408:	e043      	b.n	8003492 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d118      	bne.n	8003446 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b21b      	sxth	r3, r3
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b21a      	sxth	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3301      	adds	r3, #1
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	440b      	add	r3, r1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b21b      	sxth	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	b21b      	sxth	r3, r3
 8003436:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	8b7a      	ldrh	r2, [r7, #26]
 8003442:	801a      	strh	r2, [r3, #0]
 8003444:	e025      	b.n	8003492 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d120      	bne.n	8003492 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b21b      	sxth	r3, r3
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3301      	adds	r3, #1
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	440b      	add	r3, r1
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b21b      	sxth	r3, r3
 800346e:	4313      	orrs	r3, r2
 8003470:	b21b      	sxth	r3, r3
 8003472:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	8b7a      	ldrh	r2, [r7, #26]
 800347e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3724      	adds	r7, #36	@ 0x24
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e013      	b.n	80034de <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	440b      	add	r3, r1
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3e6      	bcc.n	80034b6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	4413      	add	r3, r2
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003528:	231f      	movs	r3, #31
 800352a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
 800353a:	e063      	b.n	8003604 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800353c:	bf00      	nop
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	613a      	str	r2, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_CRCEx_Polynomial_Set+0x44>
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b18      	cmp	r3, #24
 8003560:	d846      	bhi.n	80035f0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003562:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	080035f7 	.word	0x080035f7
 800356c:	080035f1 	.word	0x080035f1
 8003570:	080035f1 	.word	0x080035f1
 8003574:	080035f1 	.word	0x080035f1
 8003578:	080035f1 	.word	0x080035f1
 800357c:	080035f1 	.word	0x080035f1
 8003580:	080035f1 	.word	0x080035f1
 8003584:	080035f1 	.word	0x080035f1
 8003588:	080035e5 	.word	0x080035e5
 800358c:	080035f1 	.word	0x080035f1
 8003590:	080035f1 	.word	0x080035f1
 8003594:	080035f1 	.word	0x080035f1
 8003598:	080035f1 	.word	0x080035f1
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	080035f1 	.word	0x080035f1
 80035a4:	080035f1 	.word	0x080035f1
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035f1 	.word	0x080035f1
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035f1 	.word	0x080035f1
 80035b8:	080035f1 	.word	0x080035f1
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	080035cd 	.word	0x080035cd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d913      	bls.n	80035fa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035d6:	e010      	b.n	80035fa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d90f      	bls.n	80035fe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035e2:	e00c      	b.n	80035fe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	d90b      	bls.n	8003602 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035ee:	e008      	b.n	8003602 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
        break;
 80035f4:	e006      	b.n	8003604 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035f6:	bf00      	nop
 80035f8:	e004      	b.n	8003604 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003602:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 0118 	bic.w	r1, r3, #24
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
}
 8003628:	4618      	mov	r0, r3
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e014      	b.n	8003670 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	791b      	ldrb	r3, [r3, #4]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd ff52 	bl	8001500 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e046      	b.n	800371a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	795b      	ldrb	r3, [r3, #5]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_DAC_Start+0x20>
 8003694:	2302      	movs	r3, #2
 8003696:	e040      	b.n	800371a <HAL_DAC_Start+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80036cc:	2b3c      	cmp	r3, #60	@ 0x3c
 80036ce:	d11d      	bne.n	800370c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	e014      	b.n	800370c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	213c      	movs	r1, #60	@ 0x3c
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0202 	orr.w	r2, r2, #2
 800370a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01d      	beq.n	8003784 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800377c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f851 	bl	8003826 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01d      	beq.n	80037ca <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d018      	beq.n	80037ca <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2204      	movs	r2, #4
 800379c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80037b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80037c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f891 	bl	80038ec <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e015      	b.n	800381a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	3308      	adds	r3, #8
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e004      	b.n	8003810 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3314      	adds	r3, #20
 800380e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	461a      	mov	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800383a:	b480      	push	{r7}
 800383c:	b089      	sub	sp, #36	@ 0x24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_DAC_ConfigChannel+0x1c>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e042      	b.n	80038e0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	795b      	ldrb	r3, [r3, #5]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_DAC_ConfigChannel+0x2c>
 8003862:	2302      	movs	r3, #2
 8003864:	e03c      	b.n	80038e0 <HAL_DAC_ConfigChannel+0xa6>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2202      	movs	r2, #2
 8003870:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	22c0      	movs	r2, #192	@ 0xc0
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	400a      	ands	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038de:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3724      	adds	r7, #36	@ 0x24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800390c:	f7fe fe64 	bl	80025d8 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e099      	b.n	8003a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800393c:	e00f      	b.n	800395e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393e:	f7fe fe4b 	bl	80025d8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b05      	cmp	r3, #5
 800394a:	d908      	bls.n	800395e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e078      	b.n	8003a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e8      	bne.n	800393e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <HAL_DMA_Init+0x158>)
 8003978:	4013      	ands	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	4313      	orrs	r3, r2
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d117      	bne.n	8003a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb81 	bl	800410c <DMA_CheckFifoParam>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2240      	movs	r2, #64	@ 0x40
 8003a14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e016      	b.n	8003a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb38 	bl	80040a0 <DMA_CalcBaseAndBitshift>
 8003a30:	4603      	mov	r3, r0
 8003a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a38:	223f      	movs	r2, #63	@ 0x3f
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	f010803f 	.word	0xf010803f

08003a5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e050      	b.n	8003b10 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e048      	b.n	8003b10 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2221      	movs	r2, #33	@ 0x21
 8003abc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 faee 	bl	80040a0 <DMA_CalcBaseAndBitshift>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	223f      	movs	r2, #63	@ 0x3f
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_DMA_Start_IT+0x26>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e048      	b.n	8003bd0 <HAL_DMA_Start_IT+0xb8>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d137      	bne.n	8003bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa6c 	bl	8004044 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	223f      	movs	r2, #63	@ 0x3f
 8003b72:	409a      	lsls	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0216 	orr.w	r2, r2, #22
 8003b86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b96:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e005      	b.n	8003bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003be6:	f7fe fcf7 	bl	80025d8 <HAL_GetTick>
 8003bea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d008      	beq.n	8003c0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	@ 0x80
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e052      	b.n	8003cb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0216 	bic.w	r2, r2, #22
 8003c18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_DMA_Abort+0x62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0208 	bic.w	r2, r2, #8
 8003c48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5a:	e013      	b.n	8003c84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5c:	f7fe fcbc 	bl	80025d8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d90c      	bls.n	8003c84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e015      	b.n	8003cb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e4      	bne.n	8003c5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c96:	223f      	movs	r2, #63	@ 0x3f
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d004      	beq.n	8003cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2280      	movs	r2, #128	@ 0x80
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00c      	b.n	8003cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2205      	movs	r2, #5
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d08:	4b8e      	ldr	r3, [pc, #568]	@ (8003f44 <HAL_DMA_IRQHandler+0x248>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a8e      	ldr	r2, [pc, #568]	@ (8003f48 <HAL_DMA_IRQHandler+0x24c>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	2208      	movs	r2, #8
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	2208      	movs	r2, #8
 8003d56:	409a      	lsls	r2, r3
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d60:	f043 0201 	orr.w	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	2204      	movs	r2, #4
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d012      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd8:	2210      	movs	r2, #16
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d043      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03c      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df6:	2210      	movs	r2, #16
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d024      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e01f      	b.n	8003e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01b      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
 8003e3c:	e016      	b.n	8003e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0208 	bic.w	r2, r2, #8
 8003e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	2220      	movs	r2, #32
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 808f 	beq.w	8003f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8087 	beq.w	8003f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	2220      	movs	r2, #32
 8003e94:	409a      	lsls	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d136      	bne.n	8003f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0216 	bic.w	r2, r2, #22
 8003eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x1da>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eea:	223f      	movs	r2, #63	@ 0x3f
 8003eec:	409a      	lsls	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d07e      	beq.n	8004008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
        }
        return;
 8003f12:	e079      	b.n	8004008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d031      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e02c      	b.n	8003f9c <HAL_DMA_IRQHandler+0x2a0>
 8003f42:	bf00      	nop
 8003f44:	20000000 	.word	0x20000000
 8003f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d023      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
 8003f5c:	e01e      	b.n	8003f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0210 	bic.w	r2, r2, #16
 8003f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d032      	beq.n	800400a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d307      	bcc.n	8003fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f2      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x2cc>
 8003fe2:	e000      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	e000      	b.n	800400a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004008:	bf00      	nop
    }
  }
}
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401e:	b2db      	uxtb	r3, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004060:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b40      	cmp	r3, #64	@ 0x40
 8004070:	d108      	bne.n	8004084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004082:	e007      	b.n	8004094 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3b10      	subs	r3, #16
 80040b0:	4a13      	ldr	r2, [pc, #76]	@ (8004100 <DMA_CalcBaseAndBitshift+0x60>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <DMA_CalcBaseAndBitshift+0x64>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d908      	bls.n	80040e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <DMA_CalcBaseAndBitshift+0x68>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80040de:	e006      	b.n	80040ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b08      	ldr	r3, [pc, #32]	@ (8004108 <DMA_CalcBaseAndBitshift+0x68>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	aaaaaaab 	.word	0xaaaaaaab
 8004104:	0802219c 	.word	0x0802219c
 8004108:	fffffc00 	.word	0xfffffc00

0800410c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11f      	bne.n	8004166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d856      	bhi.n	80041da <DMA_CheckFifoParam+0xce>
 800412c:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <DMA_CheckFifoParam+0x28>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004145 	.word	0x08004145
 8004138:	08004157 	.word	0x08004157
 800413c:	08004145 	.word	0x08004145
 8004140:	080041db 	.word	0x080041db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d046      	beq.n	80041de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e043      	b.n	80041de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800415e:	d140      	bne.n	80041e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e03d      	b.n	80041e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	d121      	bne.n	80041b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d837      	bhi.n	80041e6 <DMA_CheckFifoParam+0xda>
 8004176:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <DMA_CheckFifoParam+0x70>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	0800418d 	.word	0x0800418d
 8004180:	08004193 	.word	0x08004193
 8004184:	0800418d 	.word	0x0800418d
 8004188:	080041a5 	.word	0x080041a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e030      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d025      	beq.n	80041ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a2:	e022      	b.n	80041ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041b2:	e01c      	b.n	80041ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d903      	bls.n	80041c2 <DMA_CheckFifoParam+0xb6>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d003      	beq.n	80041c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041c0:	e018      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      break;
 80041c6:	e015      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e00b      	b.n	80041f2 <DMA_CheckFifoParam+0xe6>
      break;
 80041da:	bf00      	nop
 80041dc:	e00a      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e008      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
 80041e4:	e006      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
    }
  } 
  
  return status; 
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e086      	b.n	8004324 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f009 ffe1 	bl	800e1f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b3f      	ldr	r3, [pc, #252]	@ (800432c <HAL_ETH_Init+0x128>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	4a3e      	ldr	r2, [pc, #248]	@ (800432c <HAL_ETH_Init+0x128>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004238:	6453      	str	r3, [r2, #68]	@ 0x44
 800423a:	4b3c      	ldr	r3, [pc, #240]	@ (800432c <HAL_ETH_Init+0x128>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004246:	4b3a      	ldr	r3, [pc, #232]	@ (8004330 <HAL_ETH_Init+0x12c>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a39      	ldr	r2, [pc, #228]	@ (8004330 <HAL_ETH_Init+0x12c>)
 800424c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004250:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <HAL_ETH_Init+0x12c>)
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4935      	ldr	r1, [pc, #212]	@ (8004330 <HAL_ETH_Init+0x12c>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004260:	4b33      	ldr	r3, [pc, #204]	@ (8004330 <HAL_ETH_Init+0x12c>)
 8004262:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800427a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800427c:	f7fe f9ac 	bl	80025d8 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004282:	e011      	b.n	80042a8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004284:	f7fe f9a8 	bl	80025d8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004292:	d909      	bls.n	80042a8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	22e0      	movs	r2, #224	@ 0xe0
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e03d      	b.n	8004324 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e4      	bne.n	8004284 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ff5c 	bl	8005178 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 f807 	bl	80052d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 f85d 	bl	8005386 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	461a      	mov	r2, r3
 80042d2:	2100      	movs	r1, #0
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 ffc5 	bl	8005264 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80042e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_ETH_Init+0x130>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800430e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2210      	movs	r2, #16
 800431e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	40013800 	.word	0x40013800
 8004334:	00020060 	.word	0x00020060

08004338 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004346:	2b10      	cmp	r3, #16
 8004348:	d15f      	bne.n	800440a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9f6 	bl	8004750 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800436c:	2001      	movs	r0, #1
 800436e:	f7fe f93f 	bl	80025f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800438c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004390:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fd80 	bl	8004eb0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043c8:	2001      	movs	r0, #1
 80043ca:	f7fe f911 	bl	80025f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0204 	orr.w	r2, r2, #4
 80043e4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ee:	69d9      	ldr	r1, [r3, #28]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <HAL_ETH_Start_IT+0xdc>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043fc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2240      	movs	r2, #64	@ 0x40
 8004402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	0001a0c1 	.word	0x0001a0c1

08004418 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d16e      	bne.n	8004508 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_ETH_Stop_IT+0xfc>)
 8004442:	400b      	ands	r3, r1
 8004444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004448:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800445c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004460:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f023 0302 	bic.w	r3, r3, #2
 8004474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004478:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0204 	bic.w	r2, r2, #4
 8004488:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004492:	2001      	movs	r0, #1
 8004494:	f7fe f8ac 	bl	80025f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fd05 	bl	8004eb0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0208 	bic.w	r2, r2, #8
 80044b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7fe f896 	bl	80025f0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e00e      	b.n	80044f0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	3212      	adds	r2, #18
 80044d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044dc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	3301      	adds	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d9ed      	bls.n	80044d2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2210      	movs	r2, #16
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	fffe5f3e 	.word	0xfffe5f3e

08004518 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e045      	b.n	80045c8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d13f      	bne.n	80045c6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800454e:	2201      	movs	r2, #1
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 ff86 	bl	8005464 <ETH_Prepare_Tx_Descriptors>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	f043 0202 	orr.w	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e02a      	b.n	80045c8 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004572:	f3bf 8f4f 	dsb	sy
}
 8004576:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	2b03      	cmp	r3, #3
 8004588:	d904      	bls.n	8004594 <HAL_ETH_Transmit_IT+0x7c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	1f1a      	subs	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ae:	461a      	mov	r2, r3
 80045b0:	2304      	movs	r3, #4
 80045b2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0a4      	b.n	8004746 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d001      	beq.n	800460a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e09d      	b.n	8004746 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	3212      	adds	r2, #18
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004620:	f1c3 0304 	rsb	r3, r3, #4
 8004624:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004626:	e066      	b.n	80046f6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <HAL_ETH_ReadData+0x88>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d03c      	beq.n	80046d2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800467a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004690:	2301      	movs	r3, #1
 8004692:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f009 ff71 	bl	800e598 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	441a      	add	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2200      	movs	r2, #0
 80046d0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d902      	bls.n	80046e4 <HAL_ETH_ReadData+0x114>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b04      	subs	r3, #4
 80046e2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	3212      	adds	r2, #18
 80046ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ee:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3301      	adds	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db06      	blt.n	800470c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	429a      	cmp	r2, r3
 8004704:	d202      	bcs.n	800470c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d08d      	beq.n	8004628 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f815 	bl	8004750 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d108      	bne.n	8004744 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004764:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	3212      	adds	r2, #18
 800476c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004770:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004778:	e042      	b.n	8004800 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d112      	bne.n	80047a8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004782:	f107 0308 	add.w	r3, r7, #8
 8004786:	4618      	mov	r0, r3
 8004788:	f009 fed6 	bl	800e538 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	74fb      	strb	r3, [r7, #19]
 8004796:	e007      	b.n	80047a8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	461a      	mov	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d028      	beq.n	8004800 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	4b26      	ldr	r3, [pc, #152]	@ (8004854 <ETH_UpdateDescriptor+0x104>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	6053      	str	r3, [r2, #4]
 80047c2:	e005      	b.n	80047d0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d902      	bls.n	80047ee <ETH_UpdateDescriptor+0x9e>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3b04      	subs	r3, #4
 80047ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	3212      	adds	r2, #18
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <ETH_UpdateDescriptor+0xbc>
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1b6      	bne.n	800477a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	429a      	cmp	r2, r3
 8004814:	d01a      	beq.n	800484c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3303      	adds	r3, #3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004820:	f3bf 8f5f 	dmb	sy
}
 8004824:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	18ca      	adds	r2, r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800484c:	bf00      	nop
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	80004000 	.word	0x80004000

08004858 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3318      	adds	r3, #24
 8004864:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004876:	e047      	b.n	8004908 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004878:	2301      	movs	r3, #1
 800487a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3b01      	subs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3304      	adds	r3, #4
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3301      	adds	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d902      	bls.n	80048a4 <HAL_ETH_ReleaseTxPacket+0x4c>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3b04      	subs	r3, #4
 80048a2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02c      	beq.n	8004908 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	440b      	add	r3, r1
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db1f      	blt.n	8004904 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3304      	adds	r3, #4
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f009 fea3 	bl	800e61c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3304      	adds	r3, #4
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	3301      	adds	r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d902      	bls.n	80048f6 <HAL_ETH_ReleaseTxPacket+0x9e>
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3b04      	subs	r3, #4
 80048f4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004902:	e001      	b.n	8004908 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_ETH_ReleaseTxPacket+0xbc>
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1b1      	bne.n	8004878 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004948:	4b4b      	ldr	r3, [pc, #300]	@ (8004a78 <HAL_ETH_IRQHandler+0x158>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_ETH_IRQHandler+0x56>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800496a:	461a      	mov	r2, r3
 800496c:	4b43      	ldr	r3, [pc, #268]	@ (8004a7c <HAL_ETH_IRQHandler+0x15c>)
 800496e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f009 f97d 	bl	800dc70 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00f      	beq.n	80049a0 <HAL_ETH_IRQHandler+0x80>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004992:	461a      	mov	r2, r3
 8004994:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004998:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f009 f978 	bl	800dc90 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d042      	beq.n	8004a30 <HAL_ETH_IRQHandler+0x110>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d03d      	beq.n	8004a30 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f043 0208 	orr.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01a      	beq.n	8004a04 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <HAL_ETH_IRQHandler+0x160>)
 80049da:	4013      	ands	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80049f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049f8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	22e0      	movs	r2, #224	@ 0xe0
 80049fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a02:	e012      	b.n	8004a2a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a22:	461a      	mov	r2, r3
 8004a24:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a28:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f009 f940 	bl	800dcb0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00e      	beq.n	8004a58 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f81a 	bl	8004a84 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d006      	beq.n	8004a70 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a62:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <HAL_ETH_IRQHandler+0x158>)
 8004a64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004a68:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f814 	bl	8004a98 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40013c00 	.word	0x40013c00
 8004a7c:	00010040 	.word	0x00010040
 8004a80:	007e2000 	.word	0x007e2000

08004a84 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 031c 	and.w	r3, r3, #28
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	02db      	lsls	r3, r3, #11
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0302 	bic.w	r3, r3, #2
 8004aea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004afc:	f7fd fd6c 	bl	80025d8 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b02:	e00d      	b.n	8004b20 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b04:	f7fd fd68 	bl	80025d8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b12:	d301      	bcc.n	8004b18 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e010      	b.n	8004b3a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ec      	bne.n	8004b04 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 031c 	and.w	r3, r3, #28
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	02db      	lsls	r3, r3, #11
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	019b      	lsls	r3, r3, #6
 8004b70:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9c:	f7fd fd1c 	bl	80025d8 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ba2:	e00d      	b.n	8004bc0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ba4:	f7fd fd18 	bl	80025d8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb2:	d301      	bcc.n	8004bb8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e009      	b.n	8004bcc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ec      	bne.n	8004ba4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0e6      	b.n	8004db6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00b      	b.n	8004dee <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d105      	bne.n	8004dec <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f88a 	bl	8004efc <ETH_SetMACConfig>

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 031c 	bic.w	r3, r3, #28
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e10:	f003 fe70 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8004e14:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a14      	ldr	r2, [pc, #80]	@ (8004e6c <HAL_ETH_SetMDIOClockRange+0x74>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d804      	bhi.n	8004e28 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f043 0308 	orr.w	r3, r3, #8
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e019      	b.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a11      	ldr	r2, [pc, #68]	@ (8004e70 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d204      	bcs.n	8004e3a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f043 030c 	orr.w	r3, r3, #12
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e010      	b.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e74 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d90c      	bls.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d804      	bhi.n	8004e54 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e003      	b.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f043 0310 	orr.w	r3, r3, #16
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	611a      	str	r2, [r3, #16]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	02160ebf 	.word	0x02160ebf
 8004e70:	03938700 	.word	0x03938700
 8004e74:	05f5e0ff 	.word	0x05f5e0ff
 8004e78:	08f0d17f 	.word	0x08f0d17f

08004e7c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ed2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	f7fd fb85 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ef0:	6193      	str	r3, [r2, #24]
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4b53      	ldr	r3, [pc, #332]	@ (8005060 <ETH_SetMACConfig+0x164>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	7b9b      	ldrb	r3, [r3, #14]
 8004f1a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	7c12      	ldrb	r2, [r2, #16]
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d102      	bne.n	8004f2a <ETH_SetMACConfig+0x2e>
 8004f24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f28:	e000      	b.n	8004f2c <ETH_SetMACConfig+0x30>
 8004f2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7c52      	ldrb	r2, [r2, #17]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d102      	bne.n	8004f3c <ETH_SetMACConfig+0x40>
 8004f36:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f3a:	e000      	b.n	8004f3e <ETH_SetMACConfig+0x42>
 8004f3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f3e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7fdb      	ldrb	r3, [r3, #31]
 8004f4a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f4c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	7f92      	ldrb	r2, [r2, #30]
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d102      	bne.n	8004f62 <ETH_SetMACConfig+0x66>
 8004f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f60:	e000      	b.n	8004f64 <ETH_SetMACConfig+0x68>
 8004f62:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	7f1b      	ldrb	r3, [r3, #28]
 8004f6a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f6c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d102      	bne.n	8004f8c <ETH_SetMACConfig+0x90>
 8004f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8a:	e000      	b.n	8004f8e <ETH_SetMACConfig+0x92>
 8004f8c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	7bdb      	ldrb	r3, [r3, #15]
 8004f94:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f96:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fa4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7fd fb16 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004fea:	2a00      	cmp	r2, #0
 8004fec:	d101      	bne.n	8004ff2 <ETH_SetMACConfig+0xf6>
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	e000      	b.n	8004ff4 <ETH_SetMACConfig+0xf8>
 8004ff2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ff4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ffa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005002:	2a01      	cmp	r2, #1
 8005004:	d101      	bne.n	800500a <ETH_SetMACConfig+0x10e>
 8005006:	2208      	movs	r2, #8
 8005008:	e000      	b.n	800500c <ETH_SetMACConfig+0x110>
 800500a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800500c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005014:	2a01      	cmp	r2, #1
 8005016:	d101      	bne.n	800501c <ETH_SetMACConfig+0x120>
 8005018:	2204      	movs	r2, #4
 800501a:	e000      	b.n	800501e <ETH_SetMACConfig+0x122>
 800501c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800501e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005026:	2a01      	cmp	r2, #1
 8005028:	d101      	bne.n	800502e <ETH_SetMACConfig+0x132>
 800502a:	2202      	movs	r2, #2
 800502c:	e000      	b.n	8005030 <ETH_SetMACConfig+0x134>
 800502e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005030:	4313      	orrs	r3, r2
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005048:	2001      	movs	r0, #1
 800504a:	f7fd fad1 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	fd20810f 	.word	0xfd20810f

08005064 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4b3d      	ldr	r3, [pc, #244]	@ (8005174 <ETH_SetDMAConfig+0x110>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	7b1b      	ldrb	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <ETH_SetDMAConfig+0x2c>
 800508a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800508e:	e000      	b.n	8005092 <ETH_SetDMAConfig+0x2e>
 8005090:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	7b5b      	ldrb	r3, [r3, #13]
 8005096:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005098:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	7f52      	ldrb	r2, [r2, #29]
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d102      	bne.n	80050a8 <ETH_SetDMAConfig+0x44>
 80050a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050a6:	e000      	b.n	80050aa <ETH_SetDMAConfig+0x46>
 80050a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	7b9b      	ldrb	r3, [r3, #14]
 80050b0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050b2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	7f1b      	ldrb	r3, [r3, #28]
 80050be:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	7f9b      	ldrb	r3, [r3, #30]
 80050c6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050c8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050d6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050d8:	4313      	orrs	r3, r2
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e8:	461a      	mov	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fd fa78 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	791b      	ldrb	r3, [r3, #4]
 8005112:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005118:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800511e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005124:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800512c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800512e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005136:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800513c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005146:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800514a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005158:	2001      	movs	r0, #1
 800515a:	f7fd fa49 	bl	80025f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6013      	str	r3, [r2, #0]
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	f8de3f23 	.word	0xf8de3f23

08005178 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0a6      	sub	sp, #152	@ 0x98
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800518c:	2300      	movs	r3, #0
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051ba:	2300      	movs	r3, #0
 80051bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fe7f 	bl	8004efc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80051fe:	2301      	movs	r3, #1
 8005200:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005202:	2301      	movs	r3, #1
 8005204:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800520c:	2301      	movs	r3, #1
 800520e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800521a:	2300      	movs	r3, #0
 800521c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005220:	2300      	movs	r3, #0
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800522e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005232:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005234:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005238:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800523a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800523e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005246:	2300      	movs	r3, #0
 8005248:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff05 	bl	8005064 <ETH_SetDMAConfig>
}
 800525a:	bf00      	nop
 800525c:	3798      	adds	r7, #152	@ 0x98
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3305      	adds	r3, #5
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	3204      	adds	r2, #4
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <ETH_MACAddressConfig+0x68>)
 8005286:	4413      	add	r3, r2
 8005288:	461a      	mov	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3303      	adds	r3, #3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	061a      	lsls	r2, r3, #24
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3302      	adds	r3, #2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3301      	adds	r3, #1
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	4313      	orrs	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <ETH_MACAddressConfig+0x6c>)
 80052b6:	4413      	add	r3, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40028040 	.word	0x40028040
 80052d0:	40028044 	.word	0x40028044

080052d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e03e      	b.n	8005360 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68d9      	ldr	r1, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	440b      	add	r3, r1
 80052f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2200      	movs	r2, #0
 80052fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	3206      	adds	r2, #6
 8005314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d80c      	bhi.n	8005344 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	e004      	b.n	800534e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	461a      	mov	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d9bd      	bls.n	80052e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005378:	611a      	str	r2, [r3, #16]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e048      	b.n	8005426 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6919      	ldr	r1, [r3, #16]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2200      	movs	r2, #0
 80053bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	3212      	adds	r2, #18
 80053f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d80c      	bhi.n	8005416 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6919      	ldr	r1, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	440b      	add	r3, r1
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e004      	b.n	8005420 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	461a      	mov	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d9b3      	bls.n	8005394 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005456:	60da      	str	r2, [r3, #12]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005464:	b480      	push	{r7}
 8005466:	b091      	sub	sp, #68	@ 0x44
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3318      	adds	r3, #24
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054a6:	d007      	beq.n	80054b8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80054a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ac:	3304      	adds	r3, #4
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	e111      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80054bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054be:	3301      	adds	r3, #1
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4b86      	ldr	r3, [pc, #536]	@ (80056ec <ETH_Prepare_Tx_Descriptors+0x288>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054d6:	6852      	ldr	r2, [r2, #4]
 80054d8:	431a      	orrs	r2, r3
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800553e:	e082      	b.n	8005646 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e005      	b.n	800556c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800556c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556e:	3301      	adds	r3, #1
 8005570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005574:	2b03      	cmp	r3, #3
 8005576:	d902      	bls.n	800557e <ETH_Prepare_Tx_Descriptors+0x11a>
 8005578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557a:	3b04      	subs	r3, #4
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005594:	d007      	beq.n	80055a6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559a:	3304      	adds	r3, #4
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d029      	beq.n	80055fa <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055b8:	e019      	b.n	80055ee <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80055ba:	f3bf 8f5f 	dmb	sy
}
 80055be:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	3301      	adds	r3, #1
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d902      	bls.n	80055de <ETH_Prepare_Tx_Descriptors+0x17a>
 80055d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055da:	3b04      	subs	r3, #4
 80055dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	3301      	adds	r3, #1
 80055ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3e1      	bcc.n	80055ba <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80055f6:	2302      	movs	r3, #2
 80055f8:	e072      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005608:	3301      	adds	r3, #1
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b32      	ldr	r3, [pc, #200]	@ (80056ec <ETH_Prepare_Tx_Descriptors+0x288>)
 8005622:	4013      	ands	r3, r2
 8005624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005626:	6852      	ldr	r2, [r2, #4]
 8005628:	431a      	orrs	r2, r3
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	3301      	adds	r3, #1
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005634:	f3bf 8f5f 	dmb	sy
}
 8005638:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f47f af78 	bne.w	8005540 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e005      	b.n	8005670 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	6a3a      	ldr	r2, [r7, #32]
 8005680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005684:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005686:	f3bf 8f5f 	dmb	sy
}
 800568a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800569c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800569e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a0:	3304      	adds	r3, #4
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ac:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	613b      	str	r3, [r7, #16]
  return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	2301      	movs	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	4413      	add	r3, r2
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3744      	adds	r7, #68	@ 0x44
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	ffffe000 	.word	0xffffe000

080056f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	@ 0x24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e175      	b.n	80059fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005710:	2201      	movs	r2, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	f040 8164 	bne.w	80059f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d005      	beq.n	8005746 <HAL_GPIO_Init+0x56>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d130      	bne.n	80057a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800577c:	2201      	movs	r2, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 0201 	and.w	r2, r3, #1
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d017      	beq.n	80057e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d123      	bne.n	8005838 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	08da      	lsrs	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3208      	adds	r2, #8
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	220f      	movs	r2, #15
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	08da      	lsrs	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3208      	adds	r2, #8
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	2203      	movs	r2, #3
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80be 	beq.w	80059f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587a:	4b66      	ldr	r3, [pc, #408]	@ (8005a14 <HAL_GPIO_Init+0x324>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	4a65      	ldr	r2, [pc, #404]	@ (8005a14 <HAL_GPIO_Init+0x324>)
 8005880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005884:	6453      	str	r3, [r2, #68]	@ 0x44
 8005886:	4b63      	ldr	r3, [pc, #396]	@ (8005a14 <HAL_GPIO_Init+0x324>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005892:	4a61      	ldr	r2, [pc, #388]	@ (8005a18 <HAL_GPIO_Init+0x328>)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	3302      	adds	r3, #2
 800589a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	220f      	movs	r2, #15
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a58      	ldr	r2, [pc, #352]	@ (8005a1c <HAL_GPIO_Init+0x32c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d037      	beq.n	800592e <HAL_GPIO_Init+0x23e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a57      	ldr	r2, [pc, #348]	@ (8005a20 <HAL_GPIO_Init+0x330>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_GPIO_Init+0x23a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a56      	ldr	r2, [pc, #344]	@ (8005a24 <HAL_GPIO_Init+0x334>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02b      	beq.n	8005926 <HAL_GPIO_Init+0x236>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a55      	ldr	r2, [pc, #340]	@ (8005a28 <HAL_GPIO_Init+0x338>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d025      	beq.n	8005922 <HAL_GPIO_Init+0x232>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a54      	ldr	r2, [pc, #336]	@ (8005a2c <HAL_GPIO_Init+0x33c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_GPIO_Init+0x22e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a53      	ldr	r2, [pc, #332]	@ (8005a30 <HAL_GPIO_Init+0x340>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x22a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a52      	ldr	r2, [pc, #328]	@ (8005a34 <HAL_GPIO_Init+0x344>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x226>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a51      	ldr	r2, [pc, #324]	@ (8005a38 <HAL_GPIO_Init+0x348>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x222>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a50      	ldr	r2, [pc, #320]	@ (8005a3c <HAL_GPIO_Init+0x34c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x21e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4f      	ldr	r2, [pc, #316]	@ (8005a40 <HAL_GPIO_Init+0x350>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x21a>
 8005906:	2309      	movs	r3, #9
 8005908:	e012      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800590a:	230a      	movs	r3, #10
 800590c:	e010      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800590e:	2308      	movs	r3, #8
 8005910:	e00e      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005912:	2307      	movs	r3, #7
 8005914:	e00c      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005916:	2306      	movs	r3, #6
 8005918:	e00a      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800591a:	2305      	movs	r3, #5
 800591c:	e008      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800591e:	2304      	movs	r3, #4
 8005920:	e006      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005922:	2303      	movs	r3, #3
 8005924:	e004      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005926:	2302      	movs	r3, #2
 8005928:	e002      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800592e:	2300      	movs	r3, #0
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	f002 0203 	and.w	r2, r2, #3
 8005936:	0092      	lsls	r2, r2, #2
 8005938:	4093      	lsls	r3, r2
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005940:	4935      	ldr	r1, [pc, #212]	@ (8005a18 <HAL_GPIO_Init+0x328>)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	089b      	lsrs	r3, r3, #2
 8005946:	3302      	adds	r3, #2
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800594e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005972:	4a34      	ldr	r2, [pc, #208]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005978:	4b32      	ldr	r3, [pc, #200]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800599c:	4a29      	ldr	r2, [pc, #164]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059a2:	4b28      	ldr	r3, [pc, #160]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059f0:	4a14      	ldr	r2, [pc, #80]	@ (8005a44 <HAL_GPIO_Init+0x354>)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	f67f ae86 	bls.w	8005710 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	3724      	adds	r7, #36	@ 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40013800 	.word	0x40013800
 8005a1c:	40020000 	.word	0x40020000
 8005a20:	40020400 	.word	0x40020400
 8005a24:	40020800 	.word	0x40020800
 8005a28:	40020c00 	.word	0x40020c00
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40021400 	.word	0x40021400
 8005a34:	40021800 	.word	0x40021800
 8005a38:	40021c00 	.word	0x40021c00
 8005a3c:	40022000 	.word	0x40022000
 8005a40:	40022400 	.word	0x40022400
 8005a44:	40013c00 	.word	0x40013c00

08005a48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e0d9      	b.n	8005c18 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a64:	2201      	movs	r2, #1
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4013      	ands	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f040 80c9 	bne.w	8005c12 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005a80:	4a6b      	ldr	r2, [pc, #428]	@ (8005c30 <HAL_GPIO_DeInit+0x1e8>)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	220f      	movs	r2, #15
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a63      	ldr	r2, [pc, #396]	@ (8005c34 <HAL_GPIO_DeInit+0x1ec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d037      	beq.n	8005b1a <HAL_GPIO_DeInit+0xd2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a62      	ldr	r2, [pc, #392]	@ (8005c38 <HAL_GPIO_DeInit+0x1f0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d031      	beq.n	8005b16 <HAL_GPIO_DeInit+0xce>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a61      	ldr	r2, [pc, #388]	@ (8005c3c <HAL_GPIO_DeInit+0x1f4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02b      	beq.n	8005b12 <HAL_GPIO_DeInit+0xca>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a60      	ldr	r2, [pc, #384]	@ (8005c40 <HAL_GPIO_DeInit+0x1f8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d025      	beq.n	8005b0e <HAL_GPIO_DeInit+0xc6>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a5f      	ldr	r2, [pc, #380]	@ (8005c44 <HAL_GPIO_DeInit+0x1fc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01f      	beq.n	8005b0a <HAL_GPIO_DeInit+0xc2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c48 <HAL_GPIO_DeInit+0x200>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d019      	beq.n	8005b06 <HAL_GPIO_DeInit+0xbe>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8005c4c <HAL_GPIO_DeInit+0x204>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_GPIO_DeInit+0xba>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a5c      	ldr	r2, [pc, #368]	@ (8005c50 <HAL_GPIO_DeInit+0x208>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00d      	beq.n	8005afe <HAL_GPIO_DeInit+0xb6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a5b      	ldr	r2, [pc, #364]	@ (8005c54 <HAL_GPIO_DeInit+0x20c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <HAL_GPIO_DeInit+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a5a      	ldr	r2, [pc, #360]	@ (8005c58 <HAL_GPIO_DeInit+0x210>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d101      	bne.n	8005af6 <HAL_GPIO_DeInit+0xae>
 8005af2:	2309      	movs	r3, #9
 8005af4:	e012      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005af6:	230a      	movs	r3, #10
 8005af8:	e010      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005afa:	2308      	movs	r3, #8
 8005afc:	e00e      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005afe:	2307      	movs	r3, #7
 8005b00:	e00c      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b02:	2306      	movs	r3, #6
 8005b04:	e00a      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b06:	2305      	movs	r3, #5
 8005b08:	e008      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b0a:	2304      	movs	r3, #4
 8005b0c:	e006      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e004      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e002      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_GPIO_DeInit+0xd4>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	f002 0203 	and.w	r2, r2, #3
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	4093      	lsls	r3, r2
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d132      	bne.n	8005b92 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	4949      	ldr	r1, [pc, #292]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b3a:	4b48      	ldr	r3, [pc, #288]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	4946      	ldr	r1, [pc, #280]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b48:	4b44      	ldr	r3, [pc, #272]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	4942      	ldr	r1, [pc, #264]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b56:	4b41      	ldr	r3, [pc, #260]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	493f      	ldr	r1, [pc, #252]	@ (8005c5c <HAL_GPIO_DeInit+0x214>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	220f      	movs	r2, #15
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005b74:	4a2e      	ldr	r2, [pc, #184]	@ (8005c30 <HAL_GPIO_DeInit+0x1e8>)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	089b      	lsrs	r3, r3, #2
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	43da      	mvns	r2, r3
 8005b84:	482a      	ldr	r0, [pc, #168]	@ (8005c30 <HAL_GPIO_DeInit+0x1e8>)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	400a      	ands	r2, r1
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2103      	movs	r1, #3
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	08da      	lsrs	r2, r3, #3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3208      	adds	r2, #8
 8005bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	220f      	movs	r2, #15
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	08d2      	lsrs	r2, r2, #3
 8005bc8:	4019      	ands	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3208      	adds	r2, #8
 8005bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2103      	movs	r1, #3
 8005bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	401a      	ands	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	2101      	movs	r1, #1
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	2103      	movs	r1, #3
 8005c06:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b0f      	cmp	r3, #15
 8005c1c:	f67f af22 	bls.w	8005a64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40013800 	.word	0x40013800
 8005c34:	40020000 	.word	0x40020000
 8005c38:	40020400 	.word	0x40020400
 8005c3c:	40020800 	.word	0x40020800
 8005c40:	40020c00 	.word	0x40020c00
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40021400 	.word	0x40021400
 8005c4c:	40021800 	.word	0x40021800
 8005c50:	40021c00 	.word	0x40021c00
 8005c54:	40022000 	.word	0x40022000
 8005c58:	40022400 	.word	0x40022400
 8005c5c:	40013c00 	.word	0x40013c00

08005c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	807b      	strh	r3, [r7, #2]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c70:	787b      	ldrb	r3, [r7, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c7c:	e003      	b.n	8005c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c7e:	887b      	ldrh	r3, [r7, #2]
 8005c80:	041a      	lsls	r2, r3, #16
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	619a      	str	r2, [r3, #24]
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ca4:	887a      	ldrh	r2, [r7, #2]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	041a      	lsls	r2, r3, #16
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	43d9      	mvns	r1, r3
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	400b      	ands	r3, r1
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	619a      	str	r2, [r3, #24]
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cde:	4a05      	ldr	r2, [pc, #20]	@ (8005cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f806 	bl	8005cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40013c00 	.word	0x40013c00

08005cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e08b      	b.n	8005e3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fb fc2a 	bl	8001590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	@ 0x24
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	e006      	b.n	8005d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d108      	bne.n	8005db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	e007      	b.n	8005dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <HAL_I2C_Init+0x134>)
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	02008000 	.word	0x02008000

08005e48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e021      	b.n	8005e9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2224      	movs	r2, #36	@ 0x24
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fcb8 	bl	80017e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d153      	bne.n	8005f70 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed6:	d101      	bne.n	8005edc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e04a      	b.n	8005f72 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_I2C_Master_Receive_IT+0x42>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e043      	b.n	8005f72 <HAL_I2C_Master_Receive_IT+0xca>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2222      	movs	r2, #34	@ 0x22
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2210      	movs	r2, #16
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	893a      	ldrh	r2, [r7, #8]
 8005f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a19      	ldr	r2, [pc, #100]	@ (8005f7c <HAL_I2C_Master_Receive_IT+0xd4>)
 8005f18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <HAL_I2C_Master_Receive_IT+0xd8>)
 8005f1e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2bff      	cmp	r3, #255	@ 0xff
 8005f28:	d906      	bls.n	8005f38 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e007      	b.n	8005f48 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f46:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <HAL_I2C_Master_Receive_IT+0xdc>)
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 fe40 	bl	8007bdc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f64:	2102      	movs	r1, #2
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 fe6a 	bl	8007c40 <I2C_Enable_IRQ>

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	ffff0000 	.word	0xffff0000
 8005f80:	08006597 	.word	0x08006597
 8005f84:	80002400 	.word	0x80002400

08005f88 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d156      	bne.n	8006050 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e050      	b.n	8006052 <HAL_I2C_Slave_Transmit_IT+0xca>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2221      	movs	r2, #33	@ 0x21
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fdc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a19      	ldr	r2, [pc, #100]	@ (800605c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8005ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8005ffe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006008:	d117      	bne.n	800603a <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006042:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 fdfa 	bl	8007c40 <I2C_Enable_IRQ>

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	ffff0000 	.word	0xffff0000
 8006060:	0800681b 	.word	0x0800681b

08006064 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	460b      	mov	r3, r1
 8006072:	817b      	strh	r3, [r7, #10]
 8006074:	4613      	mov	r3, r2
 8006076:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 80ef 	bne.w	8006268 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006098:	d101      	bne.n	800609e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	e0e5      	b.n	800626a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_I2C_Master_Transmit_DMA+0x48>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0de      	b.n	800626a <HAL_I2C_Master_Transmit_DMA+0x206>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2221      	movs	r2, #33	@ 0x21
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2210      	movs	r2, #16
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	893a      	ldrh	r2, [r7, #8]
 80060d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a66      	ldr	r2, [pc, #408]	@ (8006274 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80060da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a66      	ldr	r2, [pc, #408]	@ (8006278 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80060e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2bff      	cmp	r3, #255	@ 0xff
 80060ea:	d906      	bls.n	80060fa <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	22ff      	movs	r2, #255	@ 0xff
 80060f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80060f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e007      	b.n	800610a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006108:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01a      	beq.n	8006148 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d074      	beq.n	800623a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d022      	beq.n	800619e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	4a47      	ldr	r2, [pc, #284]	@ (800627c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800615e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006164:	4a46      	ldr	r2, [pc, #280]	@ (8006280 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8006166:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616c:	2200      	movs	r2, #0
 800616e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006174:	2200      	movs	r2, #0
 8006176:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006188:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800618e:	f7fd fcc3 	bl	8003b18 <HAL_DMA_Start_IT>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d13a      	bne.n	8006212 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800619c:	e013      	b.n	80061c6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e051      	b.n	800626a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	3301      	adds	r3, #1
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	8979      	ldrh	r1, [r7, #10]
 80061d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006284 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f001 fcff 	bl	8007bdc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80061f8:	2110      	movs	r1, #16
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f001 fd20 	bl	8007c40 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e028      	b.n	8006264 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006226:	f043 0210 	orr.w	r2, r3, #16
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e017      	b.n	800626a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a12      	ldr	r2, [pc, #72]	@ (8006288 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800623e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	8979      	ldrh	r1, [r7, #10]
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f001 fcc4 	bl	8007bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800625c:	2101      	movs	r1, #1
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 fcee 	bl	8007c40 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	e000      	b.n	800626a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	ffff0000 	.word	0xffff0000
 8006278:	08006a23 	.word	0x08006a23
 800627c:	08007a4f 	.word	0x08007a4f
 8006280:	08007b2b 	.word	0x08007b2b
 8006284:	80002000 	.word	0x80002000
 8006288:	08006597 	.word	0x08006597

0800628c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 809b 	bne.w	80063de <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_I2C_Slave_Receive_DMA+0x28>
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e08f      	b.n	80063e0 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_I2C_Slave_Receive_DMA+0x42>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e088      	b.n	80063e0 <HAL_I2C_Slave_Receive_DMA+0x154>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2222      	movs	r2, #34	@ 0x22
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a38      	ldr	r2, [pc, #224]	@ (80063e8 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8006306:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a38      	ldr	r2, [pc, #224]	@ (80063ec <HAL_I2C_Slave_Receive_DMA+0x160>)
 800630c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d020      	beq.n	8006358 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631a:	4a35      	ldr	r2, [pc, #212]	@ (80063f0 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800631c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	4a34      	ldr	r2, [pc, #208]	@ (80063f4 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8006324:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006332:	2200      	movs	r2, #0
 8006334:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3324      	adds	r3, #36	@ 0x24
 8006340:	4619      	mov	r1, r3
 8006342:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006348:	f7fd fbe6 	bl	8003b18 <HAL_DMA_Start_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d12f      	bne.n	80063b6 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8006356:	e013      	b.n	8006380 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2228      	movs	r2, #40	@ 0x28
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e02f      	b.n	80063e0 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800638e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f001 fc4f 	bl	8007c40 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063b0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e014      	b.n	80063e0 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2228      	movs	r2, #40	@ 0x28
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ca:	f043 0210 	orr.w	r2, r3, #16
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	ffff0000 	.word	0xffff0000
 80063ec:	08006ec5 	.word	0x08006ec5
 80063f0:	08007ae5 	.word	0x08007ae5
 80063f4:	08007b2b 	.word	0x08007b2b

080063f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
  }
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	09db      	lsrs	r3, r3, #7
 8006454:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006460:	f043 0201 	orr.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006470:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	0a9b      	lsrs	r3, r3, #10
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d010      	beq.n	80064a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648e:	f043 0208 	orr.w	r2, r3, #8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800649e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	0a5b      	lsrs	r3, r3, #9
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	f043 0202 	orr.w	r2, r3, #2
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 030b 	and.w	r3, r3, #11
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f979 	bl	80077d8 <I2C_ITError>
  }
}
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
 8006522:	4613      	mov	r3, r2
 8006524:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af02      	add	r7, sp, #8
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <I2C_Master_ISR_IT+0x1e>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e12e      	b.n	8006812 <I2C_Master_ISR_IT+0x27c>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2210      	movs	r2, #16
 80065da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e0:	f043 0204 	orr.w	r2, r3, #4
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f001 fa0c 	bl	8007a06 <I2C_Flush_TXDR>
 80065ee:	e0fb      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d023      	beq.n	8006644 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01d      	beq.n	8006644 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0304 	bic.w	r3, r3, #4
 800660e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006642:	e0d1      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d12a      	bne.n	80066a6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006658:	2b00      	cmp	r3, #0
 800665a:	d024      	beq.n	80066a6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01e      	beq.n	80066a6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80ba 	beq.w	80067e8 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80066a4:	e0a0      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d06b      	beq.n	800678a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	099b      	lsrs	r3, r3, #6
 80066b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d065      	beq.n	800678a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d04e      	beq.n	8006766 <I2C_Master_ISR_IT+0x1d0>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d14a      	bne.n	8006766 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066dc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2bff      	cmp	r3, #255	@ 0xff
 80066e6:	d91c      	bls.n	8006722 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d103      	bne.n	8006704 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006702:	e002      	b.n	800670a <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	22ff      	movs	r2, #255	@ 0xff
 8006708:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670e:	b2da      	uxtb	r2, r3
 8006710:	8a79      	ldrh	r1, [r7, #18]
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f001 fa5e 	bl	8007bdc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006720:	e032      	b.n	8006788 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006730:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006734:	d00b      	beq.n	800674e <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006740:	8a79      	ldrh	r1, [r7, #18]
 8006742:	2000      	movs	r0, #0
 8006744:	9000      	str	r0, [sp, #0]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f001 fa48 	bl	8007bdc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800674c:	e01c      	b.n	8006788 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	b2da      	uxtb	r2, r3
 8006754:	8a79      	ldrh	r1, [r7, #18]
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 fa3c 	bl	8007bdc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006764:	e010      	b.n	8006788 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006774:	d003      	beq.n	800677e <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fd09 	bl	800718e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800677c:	e034      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800677e:	2140      	movs	r1, #64	@ 0x40
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 f829 	bl	80077d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006786:	e02f      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
 8006788:	e02e      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d028      	beq.n	80067e8 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	099b      	lsrs	r3, r3, #6
 800679a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d022      	beq.n	80067e8 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d119      	bne.n	80067e0 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ba:	d015      	beq.n	80067e8 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067c4:	d108      	bne.n	80067d8 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	e007      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fcd8 	bl	800718e <I2C_ITMasterSeqCplt>
 80067de:	e003      	b.n	80067e8 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067e0:	2140      	movs	r1, #64	@ 0x40
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fff8 	bl	80077d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fd5e 	bl	80072c4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <I2C_Slave_ISR_IT+0x24>
 800683a:	2302      	movs	r3, #2
 800683c:	e0ed      	b.n	8006a1a <I2C_Slave_ISR_IT+0x200>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800685e:	6939      	ldr	r1, [r7, #16]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fdf9 	bl	8007458 <I2C_ITSlaveCplt>
 8006866:	e0d3      	b.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d04d      	beq.n	8006910 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800687c:	2b00      	cmp	r3, #0
 800687e:	d047      	beq.n	8006910 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d128      	bne.n	80068dc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b28      	cmp	r3, #40	@ 0x28
 8006894:	d108      	bne.n	80068a8 <I2C_Slave_ISR_IT+0x8e>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800689c:	d104      	bne.n	80068a8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800689e:	6939      	ldr	r1, [r7, #16]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 ff43 	bl	800772c <I2C_ITListenCplt>
 80068a6:	e032      	b.n	800690e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b29      	cmp	r3, #41	@ 0x29
 80068b2:	d10e      	bne.n	80068d2 <I2C_Slave_ISR_IT+0xb8>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068ba:	d00a      	beq.n	80068d2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2210      	movs	r2, #16
 80068c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f001 f89e 	bl	8007a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fc9c 	bl	8007208 <I2C_ITSlaveSeqCplt>
 80068d0:	e01d      	b.n	800690e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2210      	movs	r2, #16
 80068d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068da:	e096      	b.n	8006a0a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2210      	movs	r2, #16
 80068e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e8:	f043 0204 	orr.w	r2, r3, #4
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <I2C_Slave_ISR_IT+0xe6>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068fc:	f040 8085 	bne.w	8006a0a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 ff66 	bl	80077d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800690c:	e07d      	b.n	8006a0a <I2C_Slave_ISR_IT+0x1f0>
 800690e:	e07c      	b.n	8006a0a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d030      	beq.n	800697e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006924:	2b00      	cmp	r3, #0
 8006926:	d02a      	beq.n	800697e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d14f      	bne.n	8006a0e <I2C_Slave_ISR_IT+0x1f4>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006974:	d04b      	beq.n	8006a0e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fc46 	bl	8007208 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800697c:	e047      	b.n	8006a0e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	08db      	lsrs	r3, r3, #3
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fb74 	bl	8007086 <I2C_ITAddrCplt>
 800699e:	e037      	b.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d031      	beq.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02b      	beq.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069f2:	e00d      	b.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069fa:	d002      	beq.n	8006a02 <I2C_Slave_ISR_IT+0x1e8>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fc00 	bl	8007208 <I2C_ITSlaveSeqCplt>
 8006a08:	e002      	b.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006a0e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b088      	sub	sp, #32
 8006a26:	af02      	add	r7, sp, #8
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <I2C_Master_ISR_DMA+0x1a>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0f0      	b.n	8006c1e <I2C_Master_ISR_DMA+0x1fc>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d017      	beq.n	8006a80 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d011      	beq.n	8006a80 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2210      	movs	r2, #16
 8006a62:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a70:	2120      	movs	r1, #32
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f001 f8e4 	bl	8007c40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 ffc4 	bl	8007a06 <I2C_Flush_TXDR>
 8006a7e:	e0c9      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8081 	beq.w	8006b90 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d07a      	beq.n	8006b90 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d05c      	beq.n	8006b6e <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2bff      	cmp	r3, #255	@ 0xff
 8006aca:	d914      	bls.n	8006af6 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d103      	bne.n	8006ae8 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ae6:	e002      	b.n	8006aee <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	22ff      	movs	r2, #255	@ 0xff
 8006aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006aee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e010      	b.n	8006b18 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b08:	d003      	beq.n	8006b12 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e002      	b.n	8006b18 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b16:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	8a79      	ldrh	r1, [r7, #18]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 f858 	bl	8007bdc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b22      	cmp	r3, #34	@ 0x22
 8006b48:	d108      	bne.n	8006b5c <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b5a:	e05b      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b6c:	e052      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b7c:	d003      	beq.n	8006b86 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fb05 	bl	800718e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006b84:	e046      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b86:	2140      	movs	r1, #64	@ 0x40
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fe25 	bl	80077d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b8e:	e041      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	099b      	lsrs	r3, r3, #6
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d029      	beq.n	8006bf0 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	099b      	lsrs	r3, r3, #6
 8006ba0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d023      	beq.n	8006bf0 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d119      	bne.n	8006be6 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc0:	d027      	beq.n	8006c12 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bca:	d108      	bne.n	8006bde <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bda:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006bdc:	e019      	b.n	8006c12 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fad5 	bl	800718e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006be4:	e015      	b.n	8006c12 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006be6:	2140      	movs	r1, #64	@ 0x40
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fdf5 	bl	80077d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006bee:	e010      	b.n	8006c12 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fb5a 	bl	80072c4 <I2C_ITMasterCplt>
 8006c10:	e000      	b.n	8006c14 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006c12:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006c34:	4b94      	ldr	r3, [pc, #592]	@ (8006e88 <I2C_Mem_ISR_DMA+0x260>)
 8006c36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <I2C_Mem_ISR_DMA+0x1e>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e139      	b.n	8006eba <I2C_Mem_ISR_DMA+0x292>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d017      	beq.n	8006c8a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	f043 0204 	orr.w	r2, r3, #4
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c7a:	2120      	movs	r1, #32
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 ffdf 	bl	8007c40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 febf 	bl	8007a06 <I2C_Flush_TXDR>
 8006c88:	e112      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00f      	beq.n	8006cb6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006caa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8006cb4:	e0fc      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d06e      	beq.n	8006da0 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	099b      	lsrs	r3, r3, #6
 8006cc6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d068      	beq.n	8006da0 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cce:	2101      	movs	r1, #1
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 f839 	bl	8007d48 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 ffb1 	bl	8007c40 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d056      	beq.n	8006d96 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2bff      	cmp	r3, #255	@ 0xff
 8006cf0:	d91e      	bls.n	8006d30 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d103      	bne.n	8006d0e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d0c:	e002      	b.n	8006d14 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	22ff      	movs	r2, #255	@ 0xff
 8006d12:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d18:	b299      	uxth	r1, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	2300      	movs	r3, #0
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 ff57 	bl	8007bdc <I2C_TransferConfig>
 8006d2e:	e011      	b.n	8006d54 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3e:	b299      	uxth	r1, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	2300      	movs	r3, #0
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 ff44 	bl	8007bdc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b22      	cmp	r3, #34	@ 0x22
 8006d70:	d108      	bne.n	8006d84 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d82:	e095      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d92:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d94:	e08c      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006d96:	2140      	movs	r1, #64	@ 0x40
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fd1d 	bl	80077d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006d9e:	e087      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	099b      	lsrs	r3, r3, #6
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d071      	beq.n	8006e90 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	099b      	lsrs	r3, r3, #6
 8006db0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d06b      	beq.n	8006e90 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006db8:	2101      	movs	r1, #1
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 ffc4 	bl	8007d48 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006dc0:	2110      	movs	r1, #16
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 ff3c 	bl	8007c40 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b22      	cmp	r3, #34	@ 0x22
 8006dd2:	d101      	bne.n	8006dd8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8006e8c <I2C_Mem_ISR_DMA+0x264>)
 8006dd6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2bff      	cmp	r3, #255	@ 0xff
 8006de0:	d91e      	bls.n	8006e20 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d103      	bne.n	8006dfe <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006dfc:	e002      	b.n	8006e04 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	22ff      	movs	r2, #255	@ 0xff
 8006e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fedf 	bl	8007bdc <I2C_TransferConfig>
 8006e1e:	e011      	b.n	8006e44 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2e:	b299      	uxth	r1, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fecc 	bl	8007bdc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b22      	cmp	r3, #34	@ 0x22
 8006e60:	d108      	bne.n	8006e74 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e70:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e72:	e01d      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e82:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e84:	e014      	b.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
 8006e86:	bf00      	nop
 8006e88:	80002000 	.word	0x80002000
 8006e8c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fa0a 	bl	80072c4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <I2C_Slave_ISR_DMA+0x24>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e0ca      	b.n	800707e <I2C_Slave_ISR_DMA+0x1ba>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 faa4 	bl	8007458 <I2C_ITSlaveCplt>
 8006f10:	e0b0      	b.n	8007074 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 809a 	beq.w	8007054 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8093 	beq.w	8007054 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	0b9b      	lsrs	r3, r3, #14
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0bdb      	lsrs	r3, r3, #15
 8006f3e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d07f      	beq.n	8007046 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	0bdb      	lsrs	r3, r3, #15
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	0b9b      	lsrs	r3, r3, #14
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d128      	bne.n	8006fe6 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b28      	cmp	r3, #40	@ 0x28
 8006f9e:	d108      	bne.n	8006fb2 <I2C_Slave_ISR_DMA+0xee>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fa6:	d104      	bne.n	8006fb2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fbbe 	bl	800772c <I2C_ITListenCplt>
 8006fb0:	e048      	b.n	8007044 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b29      	cmp	r3, #41	@ 0x29
 8006fbc:	d10e      	bne.n	8006fdc <I2C_Slave_ISR_DMA+0x118>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fc4:	d00a      	beq.n	8006fdc <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fd19 	bl	8007a06 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f917 	bl	8007208 <I2C_ITSlaveSeqCplt>
 8006fda:	e033      	b.n	8007044 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006fe4:	e034      	b.n	8007050 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2210      	movs	r2, #16
 8006fec:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f043 0204 	orr.w	r2, r3, #4
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007000:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <I2C_Slave_ISR_DMA+0x14c>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800700e:	d11f      	bne.n	8007050 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b21      	cmp	r3, #33	@ 0x21
 8007014:	d002      	beq.n	800701c <I2C_Slave_ISR_DMA+0x158>
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2b29      	cmp	r3, #41	@ 0x29
 800701a:	d103      	bne.n	8007024 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2221      	movs	r2, #33	@ 0x21
 8007020:	631a      	str	r2, [r3, #48]	@ 0x30
 8007022:	e008      	b.n	8007036 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b22      	cmp	r3, #34	@ 0x22
 8007028:	d002      	beq.n	8007030 <I2C_Slave_ISR_DMA+0x16c>
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	2b2a      	cmp	r3, #42	@ 0x2a
 800702e:	d102      	bne.n	8007036 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2222      	movs	r2, #34	@ 0x22
 8007034:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703a:	4619      	mov	r1, r3
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fbcb 	bl	80077d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8007042:	e005      	b.n	8007050 <I2C_Slave_ISR_DMA+0x18c>
 8007044:	e004      	b.n	8007050 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2210      	movs	r2, #16
 800704c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800704e:	e011      	b.n	8007074 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8007050:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007052:	e00f      	b.n	8007074 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f809 	bl	8007086 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800709c:	2b28      	cmp	r3, #40	@ 0x28
 800709e:	d16a      	bne.n	8007176 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070be:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070cc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80070da:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d138      	bne.n	8007156 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80070e4:	897b      	ldrh	r3, [r7, #10]
 80070e6:	09db      	lsrs	r3, r3, #7
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	89bb      	ldrh	r3, [r7, #12]
 80070ec:	4053      	eors	r3, r2
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f003 0306 	and.w	r3, r3, #6
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11c      	bne.n	8007132 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	2b02      	cmp	r3, #2
 800710c:	d13b      	bne.n	8007186 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2208      	movs	r2, #8
 800711a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007124:	89ba      	ldrh	r2, [r7, #12]
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff f9f3 	bl	8006516 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007130:	e029      	b.n	8007186 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007132:	893b      	ldrh	r3, [r7, #8]
 8007134:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007136:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fe04 	bl	8007d48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007148:	89ba      	ldrh	r2, [r7, #12]
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff f9e1 	bl	8006516 <HAL_I2C_AddrCallback>
}
 8007154:	e017      	b.n	8007186 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fdf4 	bl	8007d48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007168:	89ba      	ldrh	r2, [r7, #12]
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff f9d1 	bl	8006516 <HAL_I2C_AddrCallback>
}
 8007174:	e007      	b.n	8007186 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2208      	movs	r2, #8
 800717c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b21      	cmp	r3, #33	@ 0x21
 80071a8:	d115      	bne.n	80071d6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2211      	movs	r2, #17
 80071b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071be:	2101      	movs	r1, #1
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fdc1 	bl	8007d48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f016 f8da 	bl	801d388 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071d4:	e014      	b.n	8007200 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2212      	movs	r2, #18
 80071e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071ea:	2102      	movs	r1, #2
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fdab 	bl	8007d48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f016 f8ee 	bl	801d3dc <HAL_I2C_MasterRxCpltCallback>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0b9b      	lsrs	r3, r3, #14
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e00d      	b.n	800725a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	0bdb      	lsrs	r3, r3, #15
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007258:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b29      	cmp	r3, #41	@ 0x29
 8007264:	d112      	bne.n	800728c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2228      	movs	r2, #40	@ 0x28
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2221      	movs	r2, #33	@ 0x21
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007274:	2101      	movs	r1, #1
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fd66 	bl	8007d48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff f932 	bl	80064ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800728a:	e017      	b.n	80072bc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b2a      	cmp	r3, #42	@ 0x2a
 8007296:	d111      	bne.n	80072bc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2228      	movs	r2, #40	@ 0x28
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2222      	movs	r2, #34	@ 0x22
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80072a6:	2102      	movs	r1, #2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fd4d 	bl	8007d48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff f923 	bl	8006502 <HAL_I2C_SlaveRxCpltCallback>
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2220      	movs	r2, #32
 80072d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b21      	cmp	r3, #33	@ 0x21
 80072e4:	d107      	bne.n	80072f6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072e6:	2101      	movs	r1, #1
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fd2d 	bl	8007d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2211      	movs	r2, #17
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80072f4:	e00c      	b.n	8007310 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b22      	cmp	r3, #34	@ 0x22
 8007300:	d106      	bne.n	8007310 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007302:	2102      	movs	r1, #2
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fd1f 	bl	8007d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2212      	movs	r2, #18
 800730e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b4d      	ldr	r3, [pc, #308]	@ (8007450 <I2C_ITMasterCplt+0x18c>)
 800731c:	400b      	ands	r3, r1
 800731e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a4a      	ldr	r2, [pc, #296]	@ (8007454 <I2C_ITMasterCplt+0x190>)
 800732a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2210      	movs	r2, #16
 800733e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007344:	f043 0204 	orr.w	r2, r3, #4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b60      	cmp	r3, #96	@ 0x60
 8007356:	d10b      	bne.n	8007370 <I2C_ITMasterCplt+0xac>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	089b      	lsrs	r3, r3, #2
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	b2db      	uxtb	r3, r3
 800736c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800736e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fb48 	bl	8007a06 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b60      	cmp	r3, #96	@ 0x60
 8007386:	d002      	beq.n	800738e <I2C_ITMasterCplt+0xca>
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa1f 	bl	80077d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800739a:	e054      	b.n	8007446 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b21      	cmp	r3, #33	@ 0x21
 80073a6:	d124      	bne.n	80073f2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d10b      	bne.n	80073da <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff f8b7 	bl	8006546 <HAL_I2C_MemTxCpltCallback>
}
 80073d8:	e035      	b.n	8007446 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f015 ffcc 	bl	801d388 <HAL_I2C_MasterTxCpltCallback>
}
 80073f0:	e029      	b.n	8007446 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b22      	cmp	r3, #34	@ 0x22
 80073fc:	d123      	bne.n	8007446 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d10b      	bne.n	8007430 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff f896 	bl	800655a <HAL_I2C_MemRxCpltCallback>
}
 800742e:	e00a      	b.n	8007446 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f015 ffcb 	bl	801d3dc <HAL_I2C_MasterRxCpltCallback>
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	fe00e800 	.word	0xfe00e800
 8007454:	ffff0000 	.word	0xffff0000

08007458 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2220      	movs	r2, #32
 8007482:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007484:	7afb      	ldrb	r3, [r7, #11]
 8007486:	2b21      	cmp	r3, #33	@ 0x21
 8007488:	d002      	beq.n	8007490 <I2C_ITSlaveCplt+0x38>
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	2b29      	cmp	r3, #41	@ 0x29
 800748e:	d108      	bne.n	80074a2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007490:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc57 	bl	8007d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2221      	movs	r2, #33	@ 0x21
 800749e:	631a      	str	r2, [r3, #48]	@ 0x30
 80074a0:	e019      	b.n	80074d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	2b22      	cmp	r3, #34	@ 0x22
 80074a6:	d002      	beq.n	80074ae <I2C_ITSlaveCplt+0x56>
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ac:	d108      	bne.n	80074c0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80074ae:	f248 0102 	movw	r1, #32770	@ 0x8002
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fc48 	bl	8007d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2222      	movs	r2, #34	@ 0x22
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80074be:	e00a      	b.n	80074d6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	2b28      	cmp	r3, #40	@ 0x28
 80074c4:	d107      	bne.n	80074d6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80074c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc3c 	bl	8007d48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6859      	ldr	r1, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007724 <I2C_ITSlaveCplt+0x2cc>)
 80074f2:	400b      	ands	r3, r1
 80074f4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa85 	bl	8007a06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	0b9b      	lsrs	r3, r3, #14
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007516:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800752e:	e018      	b.n	8007562 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	0bdb      	lsrs	r3, r3, #15
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d012      	beq.n	8007562 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800754a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	b29a      	uxth	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	089b      	lsrs	r3, r3, #2
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d020      	beq.n	80075b0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 0304 	bic.w	r3, r3, #4
 8007574:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00c      	beq.n	80075b0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075be:	f043 0204 	orr.w	r2, r3, #4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d04a      	beq.n	8007668 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d044      	beq.n	8007668 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d128      	bne.n	800763a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b28      	cmp	r3, #40	@ 0x28
 80075f2:	d108      	bne.n	8007606 <I2C_ITSlaveCplt+0x1ae>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075fa:	d104      	bne.n	8007606 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80075fc:	6979      	ldr	r1, [r7, #20]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f894 	bl	800772c <I2C_ITListenCplt>
 8007604:	e030      	b.n	8007668 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b29      	cmp	r3, #41	@ 0x29
 8007610:	d10e      	bne.n	8007630 <I2C_ITSlaveCplt+0x1d8>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007618:	d00a      	beq.n	8007630 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2210      	movs	r2, #16
 8007620:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9ef 	bl	8007a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fded 	bl	8007208 <I2C_ITSlaveSeqCplt>
 800762e:	e01b      	b.n	8007668 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2210      	movs	r2, #16
 8007636:	61da      	str	r2, [r3, #28]
 8007638:	e016      	b.n	8007668 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2210      	movs	r2, #16
 8007640:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007646:	f043 0204 	orr.w	r2, r3, #4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <I2C_ITSlaveCplt+0x204>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800765a:	d105      	bne.n	8007668 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8b8 	bl	80077d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	2b00      	cmp	r3, #0
 800767c:	d010      	beq.n	80076a0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f8a7 	bl	80077d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b28      	cmp	r3, #40	@ 0x28
 8007694:	d141      	bne.n	800771a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f847 	bl	800772c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800769e:	e03c      	b.n	800771a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076a8:	d014      	beq.n	80076d4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fdac 	bl	8007208 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <I2C_ITSlaveCplt+0x2d0>)
 80076b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fe ff30 	bl	8006532 <HAL_I2C_ListenCpltCallback>
}
 80076d2:	e022      	b.n	800771a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b22      	cmp	r3, #34	@ 0x22
 80076de:	d10e      	bne.n	80076fe <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fe ff03 	bl	8006502 <HAL_I2C_SlaveRxCpltCallback>
}
 80076fc:	e00d      	b.n	800771a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fe feea 	bl	80064ee <HAL_I2C_SlaveTxCpltCallback>
}
 800771a:	bf00      	nop
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	fe00e800 	.word	0xfe00e800
 8007728:	ffff0000 	.word	0xffff0000

0800772c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a26      	ldr	r2, [pc, #152]	@ (80077d4 <I2C_ITListenCplt+0xa8>)
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	089b      	lsrs	r3, r3, #2
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d022      	beq.n	80077aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	f043 0204 	orr.w	r2, r3, #4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 faca 	bl	8007d48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2210      	movs	r2, #16
 80077ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fe feb4 	bl	8006532 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	ffff0000 	.word	0xffff0000

080077d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a6d      	ldr	r2, [pc, #436]	@ (80079ac <I2C_ITError+0x1d4>)
 80077f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b28      	cmp	r3, #40	@ 0x28
 800780e:	d005      	beq.n	800781c <I2C_ITError+0x44>
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b29      	cmp	r3, #41	@ 0x29
 8007814:	d002      	beq.n	800781c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b2a      	cmp	r3, #42	@ 0x2a
 800781a:	d10b      	bne.n	8007834 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800781c:	2103      	movs	r1, #3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa92 	bl	8007d48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2228      	movs	r2, #40	@ 0x28
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a60      	ldr	r2, [pc, #384]	@ (80079b0 <I2C_ITError+0x1d8>)
 8007830:	635a      	str	r2, [r3, #52]	@ 0x34
 8007832:	e030      	b.n	8007896 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007834:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa85 	bl	8007d48 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8e1 	bl	8007a06 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b60      	cmp	r3, #96	@ 0x60
 800784e:	d01f      	beq.n	8007890 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b20      	cmp	r3, #32
 8007864:	d114      	bne.n	8007890 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b10      	cmp	r3, #16
 8007872:	d109      	bne.n	8007888 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2210      	movs	r2, #16
 800787a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007880:	f043 0204 	orr.w	r2, r3, #4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2220      	movs	r2, #32
 800788e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d039      	beq.n	8007918 <I2C_ITError+0x140>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b11      	cmp	r3, #17
 80078a8:	d002      	beq.n	80078b0 <I2C_ITError+0xd8>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b21      	cmp	r3, #33	@ 0x21
 80078ae:	d133      	bne.n	8007918 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078be:	d107      	bne.n	80078d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fc fb9b 	bl	8004010 <HAL_DMA_GetState>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d017      	beq.n	8007910 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e4:	4a33      	ldr	r2, [pc, #204]	@ (80079b4 <I2C_ITError+0x1dc>)
 80078e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fc f9df 	bl	8003cb8 <HAL_DMA_Abort_IT>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d04d      	beq.n	800799c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800790a:	4610      	mov	r0, r2
 800790c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800790e:	e045      	b.n	800799c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f851 	bl	80079b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007916:	e041      	b.n	800799c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d039      	beq.n	8007994 <I2C_ITError+0x1bc>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b12      	cmp	r3, #18
 8007924:	d002      	beq.n	800792c <I2C_ITError+0x154>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b22      	cmp	r3, #34	@ 0x22
 800792a:	d133      	bne.n	8007994 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793a:	d107      	bne.n	800794c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800794a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	4618      	mov	r0, r3
 8007952:	f7fc fb5d 	bl	8004010 <HAL_DMA_GetState>
 8007956:	4603      	mov	r3, r0
 8007958:	2b01      	cmp	r3, #1
 800795a:	d017      	beq.n	800798c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	4a14      	ldr	r2, [pc, #80]	@ (80079b4 <I2C_ITError+0x1dc>)
 8007962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007970:	4618      	mov	r0, r3
 8007972:	f7fc f9a1 	bl	8003cb8 <HAL_DMA_Abort_IT>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d011      	beq.n	80079a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800798a:	e009      	b.n	80079a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f813 	bl	80079b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007992:	e005      	b.n	80079a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f80f 	bl	80079b8 <I2C_TreatErrorCallback>
  }
}
 800799a:	e002      	b.n	80079a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800799c:	bf00      	nop
 800799e:	e000      	b.n	80079a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079a0:	bf00      	nop
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	ffff0000 	.word	0xffff0000
 80079b0:	0800681b 	.word	0x0800681b
 80079b4:	08007b9f 	.word	0x08007b9f

080079b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b60      	cmp	r3, #96	@ 0x60
 80079ca:	d10e      	bne.n	80079ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fe fdcd 	bl	8006582 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079e8:	e009      	b.n	80079fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fe fdb8 	bl	800656e <HAL_I2C_ErrorCallback>
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d103      	bne.n	8007a24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d007      	beq.n	8007a42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	619a      	str	r2, [r3, #24]
  }
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a6a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a76:	2120      	movs	r1, #32
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f8e1 	bl	8007c40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007a7e:	e02d      	b.n	8007adc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007a88:	441a      	add	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2bff      	cmp	r3, #255	@ 0xff
 8007a96:	d903      	bls.n	8007aa0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	22ff      	movs	r2, #255	@ 0xff
 8007a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007a9e:	e004      	b.n	8007aaa <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3328      	adds	r3, #40	@ 0x28
 8007aba:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007ac0:	f7fc f82a 	bl	8003b18 <HAL_DMA_Start_IT>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007aca:	2110      	movs	r1, #16
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff fe83 	bl	80077d8 <I2C_ITError>
}
 8007ad2:	e003      	b.n	8007adc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007ad4:	2140      	movs	r1, #64	@ 0x40
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f8b2 	bl	8007c40 <I2C_Enable_IRQ>
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10e      	bne.n	8007b22 <I2C_DMASlaveReceiveCplt+0x3e>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b0a:	d00a      	beq.n	8007b22 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fb73 	bl	8007208 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007b50:	2301      	movs	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fc fa5d 	bl	800402c <HAL_DMA_GetError>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d00e      	beq.n	8007b96 <I2C_DMAError+0x6c>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b8c:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007b8e:	2110      	movs	r1, #16
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f7ff fe21 	bl	80077d8 <I2C_ITError>
  }
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb8:	2200      	movs	r2, #0
 8007bba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc8:	2200      	movs	r2, #0
 8007bca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fef3 	bl	80079b8 <I2C_TreatErrorCallback>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	460b      	mov	r3, r1
 8007be8:	817b      	strh	r3, [r7, #10]
 8007bea:	4613      	mov	r3, r2
 8007bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bee:	897b      	ldrh	r3, [r7, #10]
 8007bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bf4:	7a7b      	ldrb	r3, [r7, #9]
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bfc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c0a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	0d5b      	lsrs	r3, r3, #21
 8007c16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007c1a:	4b08      	ldr	r3, [pc, #32]	@ (8007c3c <I2C_TransferConfig+0x60>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	ea02 0103 	and.w	r1, r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	03ff63ff 	.word	0x03ff63ff

08007c40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c54:	4a39      	ldr	r2, [pc, #228]	@ (8007d3c <I2C_Enable_IRQ+0xfc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d032      	beq.n	8007cc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007c5e:	4a38      	ldr	r2, [pc, #224]	@ (8007d40 <I2C_Enable_IRQ+0x100>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d02d      	beq.n	8007cc0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007c68:	4a36      	ldr	r2, [pc, #216]	@ (8007d44 <I2C_Enable_IRQ+0x104>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d028      	beq.n	8007cc0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da03      	bge.n	8007c7e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007c7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c7e:	887b      	ldrh	r3, [r7, #2]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007c8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c90:	887b      	ldrh	r3, [r7, #2]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007ca0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ca2:	887b      	ldrh	r3, [r7, #2]
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d103      	bne.n	8007cb0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007cae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007cb0:	887b      	ldrh	r3, [r7, #2]
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d133      	bne.n	8007d1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f043 0320 	orr.w	r3, r3, #32
 8007cbc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007cbe:	e02e      	b.n	8007d1e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da03      	bge.n	8007cd0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007cce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cd0:	887b      	ldrh	r3, [r7, #2]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007ce0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ce2:	887b      	ldrh	r3, [r7, #2]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007cf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007cf4:	887b      	ldrh	r3, [r7, #2]
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d103      	bne.n	8007d02 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007d00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d103      	bne.n	8007d10 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007d0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	2b40      	cmp	r3, #64	@ 0x40
 8007d14:	d103      	bne.n	8007d1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	08006a23 	.word	0x08006a23
 8007d40:	08006ec5 	.word	0x08006ec5
 8007d44:	08006c29 	.word	0x08006c29

08007d48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007d58:	887b      	ldrh	r3, [r7, #2]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007d68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d76:	2b28      	cmp	r3, #40	@ 0x28
 8007d78:	d003      	beq.n	8007d82 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007d80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d82:	887b      	ldrh	r3, [r7, #2]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00f      	beq.n	8007dac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007d92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007da0:	2b28      	cmp	r3, #40	@ 0x28
 8007da2:	d003      	beq.n	8007dac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007daa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da03      	bge.n	8007dbc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007dba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	2b10      	cmp	r3, #16
 8007dc0:	d103      	bne.n	8007dca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007dc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007dca:	887b      	ldrh	r3, [r7, #2]
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d103      	bne.n	8007dd8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f043 0320 	orr.w	r3, r3, #32
 8007dd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	2b40      	cmp	r3, #64	@ 0x40
 8007ddc:	d103      	bne.n	8007de6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007de4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	43da      	mvns	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	400a      	ands	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d138      	bne.n	8007e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e032      	b.n	8007e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2224      	movs	r2, #36	@ 0x24
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e000      	b.n	8007e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e8c:	2302      	movs	r3, #2
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d139      	bne.n	8007f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e033      	b.n	8007f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2224      	movs	r2, #36	@ 0x24
 8007eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e000      	b.n	8007f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af02      	add	r7, sp, #8
 8007f38:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e108      	b.n	8008156 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7f9 ff06 	bl	8001d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2203      	movs	r2, #3
 8007f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f72:	d102      	bne.n	8007f7a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f005 fa62 	bl	800d448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7c1a      	ldrb	r2, [r3, #16]
 8007f8c:	f88d 2000 	strb.w	r2, [sp]
 8007f90:	3304      	adds	r3, #4
 8007f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f94:	f005 f9fe 	bl	800d394 <USB_CoreInit>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d005      	beq.n	8007faa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e0d5      	b.n	8008156 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f005 fa5a 	bl	800d46a <USB_SetCurrentMode>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0c6      	b.n	8008156 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e04a      	b.n	8008064 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007fce:	7bfa      	ldrb	r2, [r7, #15]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3315      	adds	r3, #21
 8007fde:	2201      	movs	r2, #1
 8007fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007fe2:	7bfa      	ldrb	r2, [r7, #15]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	3314      	adds	r3, #20
 8007ff2:	7bfa      	ldrb	r2, [r7, #15]
 8007ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ff6:	7bfa      	ldrb	r2, [r7, #15]
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	b298      	uxth	r0, r3
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	332e      	adds	r3, #46	@ 0x2e
 800800a:	4602      	mov	r2, r0
 800800c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800800e:	7bfa      	ldrb	r2, [r7, #15]
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	3318      	adds	r3, #24
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008022:	7bfa      	ldrb	r2, [r7, #15]
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	331c      	adds	r3, #28
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008036:	7bfa      	ldrb	r2, [r7, #15]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3320      	adds	r3, #32
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800804a:	7bfa      	ldrb	r2, [r7, #15]
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	3324      	adds	r3, #36	@ 0x24
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	3301      	adds	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	791b      	ldrb	r3, [r3, #4]
 8008068:	7bfa      	ldrb	r2, [r7, #15]
 800806a:	429a      	cmp	r2, r3
 800806c:	d3af      	bcc.n	8007fce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
 8008072:	e044      	b.n	80080fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800808a:	7bfa      	ldrb	r2, [r7, #15]
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800809c:	7bfa      	ldrb	r2, [r7, #15]
 800809e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080a0:	7bfa      	ldrb	r2, [r7, #15]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80080b2:	2200      	movs	r2, #0
 80080b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80080b6:	7bfa      	ldrb	r2, [r7, #15]
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4613      	mov	r3, r2
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080cc:	7bfa      	ldrb	r2, [r7, #15]
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080e2:	7bfa      	ldrb	r2, [r7, #15]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	3301      	adds	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	791b      	ldrb	r3, [r3, #4]
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	429a      	cmp	r2, r3
 8008106:	d3b5      	bcc.n	8008074 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7c1a      	ldrb	r2, [r3, #16]
 8008110:	f88d 2000 	strb.w	r2, [sp]
 8008114:	3304      	adds	r3, #4
 8008116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008118:	f005 f9f4 	bl	800d504 <USB_DevInit>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e013      	b.n	8008156 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7b1b      	ldrb	r3, [r3, #12]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d102      	bne.n	800814a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f80b 	bl	8008160 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f005 fbaf 	bl	800d8b2 <USB_DevDisconnect>

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800818e:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8008190:	4313      	orrs	r3, r2
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	10000003 	.word	0x10000003

080081a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a04      	ldr	r2, [pc, #16]	@ (80081c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b6:	6013      	str	r3, [r2, #0]
}
 80081b8:	bf00      	nop
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40007000 	.word	0x40007000

080081c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80081d0:	2300      	movs	r3, #0
 80081d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e291      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 8087 	beq.w	80082fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081ec:	4b96      	ldr	r3, [pc, #600]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 030c 	and.w	r3, r3, #12
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d00c      	beq.n	8008212 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081f8:	4b93      	ldr	r3, [pc, #588]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 030c 	and.w	r3, r3, #12
 8008200:	2b08      	cmp	r3, #8
 8008202:	d112      	bne.n	800822a <HAL_RCC_OscConfig+0x62>
 8008204:	4b90      	ldr	r3, [pc, #576]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800820c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008210:	d10b      	bne.n	800822a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008212:	4b8d      	ldr	r3, [pc, #564]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d06c      	beq.n	80082f8 <HAL_RCC_OscConfig+0x130>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d168      	bne.n	80082f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e26b      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008232:	d106      	bne.n	8008242 <HAL_RCC_OscConfig+0x7a>
 8008234:	4b84      	ldr	r3, [pc, #528]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a83      	ldr	r2, [pc, #524]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800823a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	e02e      	b.n	80082a0 <HAL_RCC_OscConfig+0xd8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10c      	bne.n	8008264 <HAL_RCC_OscConfig+0x9c>
 800824a:	4b7f      	ldr	r3, [pc, #508]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a7e      	ldr	r2, [pc, #504]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	4b7c      	ldr	r3, [pc, #496]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a7b      	ldr	r2, [pc, #492]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800825c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e01d      	b.n	80082a0 <HAL_RCC_OscConfig+0xd8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800826c:	d10c      	bne.n	8008288 <HAL_RCC_OscConfig+0xc0>
 800826e:	4b76      	ldr	r3, [pc, #472]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a75      	ldr	r2, [pc, #468]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	4b73      	ldr	r3, [pc, #460]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a72      	ldr	r2, [pc, #456]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	e00b      	b.n	80082a0 <HAL_RCC_OscConfig+0xd8>
 8008288:	4b6f      	ldr	r3, [pc, #444]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a6e      	ldr	r2, [pc, #440]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800828e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	4b6c      	ldr	r3, [pc, #432]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a6b      	ldr	r2, [pc, #428]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800829a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800829e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d013      	beq.n	80082d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a8:	f7fa f996 	bl	80025d8 <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082b0:	f7fa f992 	bl	80025d8 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b64      	cmp	r3, #100	@ 0x64
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e21f      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c2:	4b61      	ldr	r3, [pc, #388]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0xe8>
 80082ce:	e014      	b.n	80082fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d0:	f7fa f982 	bl	80025d8 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082d8:	f7fa f97e 	bl	80025d8 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b64      	cmp	r3, #100	@ 0x64
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e20b      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ea:	4b57      	ldr	r3, [pc, #348]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f0      	bne.n	80082d8 <HAL_RCC_OscConfig+0x110>
 80082f6:	e000      	b.n	80082fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d069      	beq.n	80083da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008306:	4b50      	ldr	r3, [pc, #320]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008312:	4b4d      	ldr	r3, [pc, #308]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 030c 	and.w	r3, r3, #12
 800831a:	2b08      	cmp	r3, #8
 800831c:	d11c      	bne.n	8008358 <HAL_RCC_OscConfig+0x190>
 800831e:	4b4a      	ldr	r3, [pc, #296]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d116      	bne.n	8008358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800832a:	4b47      	ldr	r3, [pc, #284]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_RCC_OscConfig+0x17a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d001      	beq.n	8008342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e1df      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008342:	4b41      	ldr	r3, [pc, #260]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	493d      	ldr	r1, [pc, #244]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008352:	4313      	orrs	r3, r2
 8008354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008356:	e040      	b.n	80083da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d023      	beq.n	80083a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008360:	4b39      	ldr	r3, [pc, #228]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a38      	ldr	r2, [pc, #224]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fa f934 	bl	80025d8 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008374:	f7fa f930 	bl	80025d8 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e1bd      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008386:	4b30      	ldr	r3, [pc, #192]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008392:	4b2d      	ldr	r3, [pc, #180]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	4929      	ldr	r1, [pc, #164]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	600b      	str	r3, [r1, #0]
 80083a6:	e018      	b.n	80083da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083a8:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a26      	ldr	r2, [pc, #152]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b4:	f7fa f910 	bl	80025d8 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083bc:	f7fa f90c 	bl	80025d8 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e199      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d038      	beq.n	8008458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d019      	beq.n	8008422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ee:	4b16      	ldr	r3, [pc, #88]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083f2:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fa:	f7fa f8ed 	bl	80025d8 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008400:	e008      	b.n	8008414 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008402:	f7fa f8e9 	bl	80025d8 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e176      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008414:	4b0c      	ldr	r3, [pc, #48]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f0      	beq.n	8008402 <HAL_RCC_OscConfig+0x23a>
 8008420:	e01a      	b.n	8008458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008422:	4b09      	ldr	r3, [pc, #36]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008426:	4a08      	ldr	r2, [pc, #32]	@ (8008448 <HAL_RCC_OscConfig+0x280>)
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842e:	f7fa f8d3 	bl	80025d8 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008434:	e00a      	b.n	800844c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008436:	f7fa f8cf 	bl	80025d8 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d903      	bls.n	800844c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e15c      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
 8008448:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800844c:	4b91      	ldr	r3, [pc, #580]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800844e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1ee      	bne.n	8008436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80a4 	beq.w	80085ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008466:	4b8b      	ldr	r3, [pc, #556]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10d      	bne.n	800848e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008472:	4b88      	ldr	r3, [pc, #544]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008476:	4a87      	ldr	r2, [pc, #540]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800847c:	6413      	str	r3, [r2, #64]	@ 0x40
 800847e:	4b85      	ldr	r3, [pc, #532]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008486:	60bb      	str	r3, [r7, #8]
 8008488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800848a:	2301      	movs	r3, #1
 800848c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800848e:	4b82      	ldr	r3, [pc, #520]	@ (8008698 <HAL_RCC_OscConfig+0x4d0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008496:	2b00      	cmp	r3, #0
 8008498:	d118      	bne.n	80084cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800849a:	4b7f      	ldr	r3, [pc, #508]	@ (8008698 <HAL_RCC_OscConfig+0x4d0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a7e      	ldr	r2, [pc, #504]	@ (8008698 <HAL_RCC_OscConfig+0x4d0>)
 80084a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084a6:	f7fa f897 	bl	80025d8 <HAL_GetTick>
 80084aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ae:	f7fa f893 	bl	80025d8 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b64      	cmp	r3, #100	@ 0x64
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e120      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084c0:	4b75      	ldr	r3, [pc, #468]	@ (8008698 <HAL_RCC_OscConfig+0x4d0>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0f0      	beq.n	80084ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d106      	bne.n	80084e2 <HAL_RCC_OscConfig+0x31a>
 80084d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084da:	f043 0301 	orr.w	r3, r3, #1
 80084de:	6713      	str	r3, [r2, #112]	@ 0x70
 80084e0:	e02d      	b.n	800853e <HAL_RCC_OscConfig+0x376>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10c      	bne.n	8008504 <HAL_RCC_OscConfig+0x33c>
 80084ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ee:	4a69      	ldr	r2, [pc, #420]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80084f6:	4b67      	ldr	r3, [pc, #412]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fa:	4a66      	ldr	r2, [pc, #408]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80084fc:	f023 0304 	bic.w	r3, r3, #4
 8008500:	6713      	str	r3, [r2, #112]	@ 0x70
 8008502:	e01c      	b.n	800853e <HAL_RCC_OscConfig+0x376>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b05      	cmp	r3, #5
 800850a:	d10c      	bne.n	8008526 <HAL_RCC_OscConfig+0x35e>
 800850c:	4b61      	ldr	r3, [pc, #388]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800850e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008510:	4a60      	ldr	r2, [pc, #384]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008512:	f043 0304 	orr.w	r3, r3, #4
 8008516:	6713      	str	r3, [r2, #112]	@ 0x70
 8008518:	4b5e      	ldr	r3, [pc, #376]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800851a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800851c:	4a5d      	ldr	r2, [pc, #372]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	6713      	str	r3, [r2, #112]	@ 0x70
 8008524:	e00b      	b.n	800853e <HAL_RCC_OscConfig+0x376>
 8008526:	4b5b      	ldr	r3, [pc, #364]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800852a:	4a5a      	ldr	r2, [pc, #360]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	6713      	str	r3, [r2, #112]	@ 0x70
 8008532:	4b58      	ldr	r3, [pc, #352]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008536:	4a57      	ldr	r2, [pc, #348]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008538:	f023 0304 	bic.w	r3, r3, #4
 800853c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d015      	beq.n	8008572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008546:	f7fa f847 	bl	80025d8 <HAL_GetTick>
 800854a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800854c:	e00a      	b.n	8008564 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800854e:	f7fa f843 	bl	80025d8 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e0ce      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008564:	4b4b      	ldr	r3, [pc, #300]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0ee      	beq.n	800854e <HAL_RCC_OscConfig+0x386>
 8008570:	e014      	b.n	800859c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008572:	f7fa f831 	bl	80025d8 <HAL_GetTick>
 8008576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008578:	e00a      	b.n	8008590 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857a:	f7fa f82d 	bl	80025d8 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008588:	4293      	cmp	r3, r2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e0b8      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008590:	4b40      	ldr	r3, [pc, #256]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1ee      	bne.n	800857a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d105      	bne.n	80085ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085a2:	4b3c      	ldr	r3, [pc, #240]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a6:	4a3b      	ldr	r2, [pc, #236]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80a4 	beq.w	8008700 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085b8:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 030c 	and.w	r3, r3, #12
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d06b      	beq.n	800869c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d149      	bne.n	8008660 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085cc:	4b31      	ldr	r3, [pc, #196]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a30      	ldr	r2, [pc, #192]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7f9 fffe 	bl	80025d8 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e0:	f7f9 fffa 	bl	80025d8 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e087      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	4b28      	ldr	r3, [pc, #160]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69da      	ldr	r2, [r3, #28]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860c:	019b      	lsls	r3, r3, #6
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008614:	085b      	lsrs	r3, r3, #1
 8008616:	3b01      	subs	r3, #1
 8008618:	041b      	lsls	r3, r3, #16
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008620:	061b      	lsls	r3, r3, #24
 8008622:	4313      	orrs	r3, r2
 8008624:	4a1b      	ldr	r2, [pc, #108]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800862a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800862c:	4b19      	ldr	r3, [pc, #100]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a18      	ldr	r2, [pc, #96]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008638:	f7f9 ffce 	bl	80025d8 <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008640:	f7f9 ffca 	bl	80025d8 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e057      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008652:	4b10      	ldr	r3, [pc, #64]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f0      	beq.n	8008640 <HAL_RCC_OscConfig+0x478>
 800865e:	e04f      	b.n	8008700 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008660:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a0b      	ldr	r2, [pc, #44]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800866a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7f9 ffb4 	bl	80025d8 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008674:	f7f9 ffb0 	bl	80025d8 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e03d      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008686:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <HAL_RCC_OscConfig+0x4cc>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x4ac>
 8008692:	e035      	b.n	8008700 <HAL_RCC_OscConfig+0x538>
 8008694:	40023800 	.word	0x40023800
 8008698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800869c:	4b1b      	ldr	r3, [pc, #108]	@ (800870c <HAL_RCC_OscConfig+0x544>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d028      	beq.n	80086fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d121      	bne.n	80086fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d11a      	bne.n	80086fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80086cc:	4013      	ands	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80086d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d111      	bne.n	80086fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	3b01      	subs	r3, #1
 80086e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d107      	bne.n	80086fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40023800 	.word	0x40023800

08008710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0d0      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008728:	4b6a      	ldr	r3, [pc, #424]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d910      	bls.n	8008758 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008736:	4b67      	ldr	r3, [pc, #412]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 020f 	bic.w	r2, r3, #15
 800873e:	4965      	ldr	r1, [pc, #404]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	4313      	orrs	r3, r2
 8008744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008746:	4b63      	ldr	r3, [pc, #396]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d001      	beq.n	8008758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0b8      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d020      	beq.n	80087a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008770:	4b59      	ldr	r3, [pc, #356]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4a58      	ldr	r2, [pc, #352]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800877a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008788:	4b53      	ldr	r3, [pc, #332]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	4a52      	ldr	r2, [pc, #328]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 800878e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008794:	4b50      	ldr	r3, [pc, #320]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	494d      	ldr	r1, [pc, #308]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d040      	beq.n	8008834 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d107      	bne.n	80087ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ba:	4b47      	ldr	r3, [pc, #284]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d115      	bne.n	80087f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e07f      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d107      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087d2:	4b41      	ldr	r3, [pc, #260]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e073      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087e2:	4b3d      	ldr	r3, [pc, #244]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e06b      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087f2:	4b39      	ldr	r3, [pc, #228]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f023 0203 	bic.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4936      	ldr	r1, [pc, #216]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008800:	4313      	orrs	r3, r2
 8008802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008804:	f7f9 fee8 	bl	80025d8 <HAL_GetTick>
 8008808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800880a:	e00a      	b.n	8008822 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800880c:	f7f9 fee4 	bl	80025d8 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800881a:	4293      	cmp	r3, r2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e053      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008822:	4b2d      	ldr	r3, [pc, #180]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 020c 	and.w	r2, r3, #12
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	429a      	cmp	r2, r3
 8008832:	d1eb      	bne.n	800880c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008834:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d210      	bcs.n	8008864 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008842:	4b24      	ldr	r3, [pc, #144]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 020f 	bic.w	r2, r3, #15
 800884a:	4922      	ldr	r1, [pc, #136]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	4313      	orrs	r3, r2
 8008850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008852:	4b20      	ldr	r3, [pc, #128]	@ (80088d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d001      	beq.n	8008864 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e032      	b.n	80088ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008870:	4b19      	ldr	r3, [pc, #100]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	4916      	ldr	r1, [pc, #88]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800888e:	4b12      	ldr	r3, [pc, #72]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	490e      	ldr	r1, [pc, #56]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80088a2:	f000 f821 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <HAL_RCC_ClockConfig+0x1c8>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	091b      	lsrs	r3, r3, #4
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	490a      	ldr	r1, [pc, #40]	@ (80088dc <HAL_RCC_ClockConfig+0x1cc>)
 80088b4:	5ccb      	ldrb	r3, [r1, r3]
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	4a09      	ldr	r2, [pc, #36]	@ (80088e0 <HAL_RCC_ClockConfig+0x1d0>)
 80088bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80088be:	4b09      	ldr	r3, [pc, #36]	@ (80088e4 <HAL_RCC_ClockConfig+0x1d4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f9 face 	bl	8001e64 <HAL_InitTick>

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40023c00 	.word	0x40023c00
 80088d8:	40023800 	.word	0x40023800
 80088dc:	08022184 	.word	0x08022184
 80088e0:	20000000 	.word	0x20000000
 80088e4:	20000004 	.word	0x20000004

080088e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088ec:	b094      	sub	sp, #80	@ 0x50
 80088ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f4:	2300      	movs	r3, #0
 80088f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f8:	2300      	movs	r3, #0
 80088fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008900:	4b79      	ldr	r3, [pc, #484]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 030c 	and.w	r3, r3, #12
 8008908:	2b08      	cmp	r3, #8
 800890a:	d00d      	beq.n	8008928 <HAL_RCC_GetSysClockFreq+0x40>
 800890c:	2b08      	cmp	r3, #8
 800890e:	f200 80e1 	bhi.w	8008ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_RCC_GetSysClockFreq+0x34>
 8008916:	2b04      	cmp	r3, #4
 8008918:	d003      	beq.n	8008922 <HAL_RCC_GetSysClockFreq+0x3a>
 800891a:	e0db      	b.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800891c:	4b73      	ldr	r3, [pc, #460]	@ (8008aec <HAL_RCC_GetSysClockFreq+0x204>)
 800891e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008920:	e0db      	b.n	8008ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008922:	4b73      	ldr	r3, [pc, #460]	@ (8008af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008926:	e0d8      	b.n	8008ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008928:	4b6f      	ldr	r3, [pc, #444]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008930:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008932:	4b6d      	ldr	r3, [pc, #436]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d063      	beq.n	8008a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800893e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	099b      	lsrs	r3, r3, #6
 8008944:	2200      	movs	r2, #0
 8008946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008948:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008950:	633b      	str	r3, [r7, #48]	@ 0x30
 8008952:	2300      	movs	r3, #0
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
 8008956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800895a:	4622      	mov	r2, r4
 800895c:	462b      	mov	r3, r5
 800895e:	f04f 0000 	mov.w	r0, #0
 8008962:	f04f 0100 	mov.w	r1, #0
 8008966:	0159      	lsls	r1, r3, #5
 8008968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800896c:	0150      	lsls	r0, r2, #5
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4621      	mov	r1, r4
 8008974:	1a51      	subs	r1, r2, r1
 8008976:	6139      	str	r1, [r7, #16]
 8008978:	4629      	mov	r1, r5
 800897a:	eb63 0301 	sbc.w	r3, r3, r1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800898c:	4659      	mov	r1, fp
 800898e:	018b      	lsls	r3, r1, #6
 8008990:	4651      	mov	r1, sl
 8008992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008996:	4651      	mov	r1, sl
 8008998:	018a      	lsls	r2, r1, #6
 800899a:	4651      	mov	r1, sl
 800899c:	ebb2 0801 	subs.w	r8, r2, r1
 80089a0:	4659      	mov	r1, fp
 80089a2:	eb63 0901 	sbc.w	r9, r3, r1
 80089a6:	f04f 0200 	mov.w	r2, #0
 80089aa:	f04f 0300 	mov.w	r3, #0
 80089ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089ba:	4690      	mov	r8, r2
 80089bc:	4699      	mov	r9, r3
 80089be:	4623      	mov	r3, r4
 80089c0:	eb18 0303 	adds.w	r3, r8, r3
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	462b      	mov	r3, r5
 80089c8:	eb49 0303 	adc.w	r3, r9, r3
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	f04f 0200 	mov.w	r2, #0
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80089da:	4629      	mov	r1, r5
 80089dc:	024b      	lsls	r3, r1, #9
 80089de:	4621      	mov	r1, r4
 80089e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089e4:	4621      	mov	r1, r4
 80089e6:	024a      	lsls	r2, r1, #9
 80089e8:	4610      	mov	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ee:	2200      	movs	r2, #0
 80089f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089f8:	f7f7 fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4613      	mov	r3, r2
 8008a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a04:	e058      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a06:	4b38      	ldr	r3, [pc, #224]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	099b      	lsrs	r3, r3, #6
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	4611      	mov	r1, r2
 8008a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a16:	623b      	str	r3, [r7, #32]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a20:	4642      	mov	r2, r8
 8008a22:	464b      	mov	r3, r9
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	0159      	lsls	r1, r3, #5
 8008a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a32:	0150      	lsls	r0, r2, #5
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4641      	mov	r1, r8
 8008a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008a3e:	4649      	mov	r1, r9
 8008a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a58:	ebb2 040a 	subs.w	r4, r2, sl
 8008a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	00eb      	lsls	r3, r5, #3
 8008a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a6e:	00e2      	lsls	r2, r4, #3
 8008a70:	4614      	mov	r4, r2
 8008a72:	461d      	mov	r5, r3
 8008a74:	4643      	mov	r3, r8
 8008a76:	18e3      	adds	r3, r4, r3
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	464b      	mov	r3, r9
 8008a7c:	eb45 0303 	adc.w	r3, r5, r3
 8008a80:	607b      	str	r3, [r7, #4]
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a8e:	4629      	mov	r1, r5
 8008a90:	028b      	lsls	r3, r1, #10
 8008a92:	4621      	mov	r1, r4
 8008a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a98:	4621      	mov	r1, r4
 8008a9a:	028a      	lsls	r2, r1, #10
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	61fa      	str	r2, [r7, #28]
 8008aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aac:	f7f7 fc00 	bl	80002b0 <__aeabi_uldivmod>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	0c1b      	lsrs	r3, r3, #16
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ad2:	e002      	b.n	8008ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <HAL_RCC_GetSysClockFreq+0x204>)
 8008ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3750      	adds	r7, #80	@ 0x50
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40023800 	.word	0x40023800
 8008aec:	00f42400 	.word	0x00f42400
 8008af0:	007a1200 	.word	0x007a1200

08008af4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008af8:	4b03      	ldr	r3, [pc, #12]	@ (8008b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008afa:	681b      	ldr	r3, [r3, #0]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000000 	.word	0x20000000

08008b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b10:	f7ff fff0 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	0a9b      	lsrs	r3, r3, #10
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	4903      	ldr	r1, [pc, #12]	@ (8008b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	08022194 	.word	0x08022194

08008b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b38:	f7ff ffdc 	bl	8008af4 <HAL_RCC_GetHCLKFreq>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4b05      	ldr	r3, [pc, #20]	@ (8008b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	0b5b      	lsrs	r3, r3, #13
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	4903      	ldr	r1, [pc, #12]	@ (8008b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b4a:	5ccb      	ldrb	r3, [r1, r3]
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40023800 	.word	0x40023800
 8008b58:	08022194 	.word	0x08022194

08008b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	220f      	movs	r2, #15
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b6c:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 0203 	and.w	r2, r3, #3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b78:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b84:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008b90:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	08db      	lsrs	r3, r3, #3
 8008b96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b9e:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <HAL_RCC_GetClockConfig+0x60>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 020f 	and.w	r2, r3, #15
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	40023c00 	.word	0x40023c00

08008bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008be8:	4b69      	ldr	r3, [pc, #420]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	4a68      	ldr	r2, [pc, #416]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008bf2:	6093      	str	r3, [r2, #8]
 8008bf4:	4b66      	ldr	r3, [pc, #408]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bfc:	4964      	ldr	r1, [pc, #400]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d017      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c28:	4959      	ldr	r1, [pc, #356]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c38:	d101      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d017      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c56:	4b4e      	ldr	r3, [pc, #312]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	494a      	ldr	r1, [pc, #296]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c74:	d101      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008c82:	2301      	movs	r3, #1
 8008c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008c92:	2301      	movs	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 808b 	beq.w	8008dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca8:	4a39      	ldr	r2, [pc, #228]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cb0:	4b37      	ldr	r3, [pc, #220]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cbc:	4b35      	ldr	r3, [pc, #212]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a34      	ldr	r2, [pc, #208]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc8:	f7f9 fc86 	bl	80025d8 <HAL_GetTick>
 8008ccc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cd0:	f7f9 fc82 	bl	80025d8 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	@ 0x64
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e357      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cee:	4b28      	ldr	r3, [pc, #160]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d035      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d02e      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d0c:	4b20      	ldr	r3, [pc, #128]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d16:	4b1e      	ldr	r3, [pc, #120]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d22:	4b1b      	ldr	r3, [pc, #108]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d26:	4a1a      	ldr	r2, [pc, #104]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008d2e:	4a18      	ldr	r2, [pc, #96]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d34:	4b16      	ldr	r3, [pc, #88]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d114      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7f9 fc4a 	bl	80025d8 <HAL_GetTick>
 8008d44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d46:	e00a      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d48:	f7f9 fc46 	bl	80025d8 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e319      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ee      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d76:	d111      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008d86:	400b      	ands	r3, r1
 8008d88:	4901      	ldr	r1, [pc, #4]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	608b      	str	r3, [r1, #8]
 8008d8e:	e00b      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008d90:	40023800 	.word	0x40023800
 8008d94:	40007000 	.word	0x40007000
 8008d98:	0ffffcff 	.word	0x0ffffcff
 8008d9c:	4baa      	ldr	r3, [pc, #680]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	4aa9      	ldr	r2, [pc, #676]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008da2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008da6:	6093      	str	r3, [r2, #8]
 8008da8:	4ba7      	ldr	r3, [pc, #668]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008daa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008db4:	49a4      	ldr	r1, [pc, #656]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d010      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008dc6:	4ba0      	ldr	r3, [pc, #640]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dcc:	4a9e      	ldr	r2, [pc, #632]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	4999      	ldr	r1, [pc, #612]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008df4:	4b94      	ldr	r3, [pc, #592]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e02:	4991      	ldr	r1, [pc, #580]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e16:	4b8c      	ldr	r3, [pc, #560]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e24:	4988      	ldr	r1, [pc, #544]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e38:	4b83      	ldr	r3, [pc, #524]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e46:	4980      	ldr	r1, [pc, #512]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e68:	4977      	ldr	r1, [pc, #476]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00a      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e7c:	4b72      	ldr	r3, [pc, #456]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e82:	f023 0203 	bic.w	r2, r3, #3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8a:	496f      	ldr	r1, [pc, #444]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea4:	f023 020c 	bic.w	r2, r3, #12
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eac:	4966      	ldr	r1, [pc, #408]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00a      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ec0:	4b61      	ldr	r3, [pc, #388]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ece:	495e      	ldr	r1, [pc, #376]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ee2:	4b59      	ldr	r3, [pc, #356]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	4955      	ldr	r1, [pc, #340]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f04:	4b50      	ldr	r3, [pc, #320]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	494d      	ldr	r1, [pc, #308]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008f26:	4b48      	ldr	r3, [pc, #288]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f34:	4944      	ldr	r1, [pc, #272]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008f48:	4b3f      	ldr	r3, [pc, #252]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f56:	493c      	ldr	r1, [pc, #240]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008f6a:	4b37      	ldr	r3, [pc, #220]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f78:	4933      	ldr	r1, [pc, #204]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f9a:	492b      	ldr	r1, [pc, #172]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d011      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fae:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fbc:	4922      	ldr	r1, [pc, #136]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fcc:	d101      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fee:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffc:	4912      	ldr	r1, [pc, #72]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009010:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009016:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	4909      	ldr	r1, [pc, #36]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d006      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80d9 	beq.w	80091ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800903c:	4b02      	ldr	r3, [pc, #8]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a01      	ldr	r2, [pc, #4]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009042:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009046:	e001      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009048:	40023800 	.word	0x40023800
 800904c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800904e:	f7f9 fac3 	bl	80025d8 <HAL_GetTick>
 8009052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009054:	e008      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009056:	f7f9 fabf 	bl	80025d8 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b64      	cmp	r3, #100	@ 0x64
 8009062:	d901      	bls.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e194      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009068:	4b6c      	ldr	r3, [pc, #432]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f0      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d021      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11d      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009088:	4b64      	ldr	r3, [pc, #400]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800908a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009096:	4b61      	ldr	r3, [pc, #388]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909c:	0e1b      	lsrs	r3, r3, #24
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	019a      	lsls	r2, r3, #6
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	041b      	lsls	r3, r3, #16
 80090ae:	431a      	orrs	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	071b      	lsls	r3, r3, #28
 80090bc:	4957      	ldr	r1, [pc, #348]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d8:	d00a      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02e      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090ee:	d129      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090f0:	4b4a      	ldr	r3, [pc, #296]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090fe:	4b47      	ldr	r3, [pc, #284]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009104:	0f1b      	lsrs	r3, r3, #28
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	019a      	lsls	r2, r3, #6
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	061b      	lsls	r3, r3, #24
 800911e:	431a      	orrs	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	071b      	lsls	r3, r3, #28
 8009124:	493d      	ldr	r1, [pc, #244]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800912c:	4b3b      	ldr	r3, [pc, #236]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800912e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009132:	f023 021f 	bic.w	r2, r3, #31
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913a:	3b01      	subs	r3, #1
 800913c:	4937      	ldr	r1, [pc, #220]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01d      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009150:	4b32      	ldr	r3, [pc, #200]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009156:	0e1b      	lsrs	r3, r3, #24
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800915e:	4b2f      	ldr	r3, [pc, #188]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009164:	0f1b      	lsrs	r3, r3, #28
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	019a      	lsls	r2, r3, #6
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	041b      	lsls	r3, r3, #16
 8009178:	431a      	orrs	r2, r3
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	061b      	lsls	r3, r3, #24
 800917e:	431a      	orrs	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	071b      	lsls	r3, r3, #28
 8009184:	4925      	ldr	r1, [pc, #148]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009186:	4313      	orrs	r3, r2
 8009188:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d011      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	019a      	lsls	r2, r3, #6
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	061b      	lsls	r3, r3, #24
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	071b      	lsls	r3, r3, #28
 80091b4:	4919      	ldr	r1, [pc, #100]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091bc:	4b17      	ldr	r3, [pc, #92]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a16      	ldr	r2, [pc, #88]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c8:	f7f9 fa06 	bl	80025d8 <HAL_GetTick>
 80091cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091ce:	e008      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091d0:	f7f9 fa02 	bl	80025d8 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	@ 0x64
 80091dc:	d901      	bls.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e0d7      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091e2:	4b0e      	ldr	r3, [pc, #56]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0f0      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	f040 80cd 	bne.w	8009390 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091f6:	4b09      	ldr	r3, [pc, #36]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a08      	ldr	r2, [pc, #32]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009202:	f7f9 f9e9 	bl	80025d8 <HAL_GetTick>
 8009206:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009208:	e00a      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800920a:	f7f9 f9e5 	bl	80025d8 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b64      	cmp	r3, #100	@ 0x64
 8009216:	d903      	bls.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e0ba      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800921c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009220:	4b5e      	ldr	r3, [pc, #376]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800922c:	d0ed      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800924a:	2b00      	cmp	r3, #0
 800924c:	d02e      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d12a      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009256:	4b51      	ldr	r3, [pc, #324]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800925c:	0c1b      	lsrs	r3, r3, #16
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009264:	4b4d      	ldr	r3, [pc, #308]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800926a:	0f1b      	lsrs	r3, r3, #28
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	019a      	lsls	r2, r3, #6
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	431a      	orrs	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	061b      	lsls	r3, r3, #24
 8009284:	431a      	orrs	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	071b      	lsls	r3, r3, #28
 800928a:	4944      	ldr	r1, [pc, #272]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009292:	4b42      	ldr	r3, [pc, #264]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009298:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	3b01      	subs	r3, #1
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	493d      	ldr	r1, [pc, #244]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d022      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c0:	d11d      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092c2:	4b36      	ldr	r3, [pc, #216]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c8:	0e1b      	lsrs	r3, r3, #24
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092d0:	4b32      	ldr	r3, [pc, #200]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	0f1b      	lsrs	r3, r3, #28
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	019a      	lsls	r2, r3, #6
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	041b      	lsls	r3, r3, #16
 80092ea:	431a      	orrs	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	061b      	lsls	r3, r3, #24
 80092f0:	431a      	orrs	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	071b      	lsls	r3, r3, #28
 80092f6:	4929      	ldr	r1, [pc, #164]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0308 	and.w	r3, r3, #8
 8009306:	2b00      	cmp	r3, #0
 8009308:	d028      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800930a:	4b24      	ldr	r3, [pc, #144]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009310:	0e1b      	lsrs	r3, r3, #24
 8009312:	f003 030f 	and.w	r3, r3, #15
 8009316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009318:	4b20      	ldr	r3, [pc, #128]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800931a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931e:	0c1b      	lsrs	r3, r3, #16
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	019a      	lsls	r2, r3, #6
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	041b      	lsls	r3, r3, #16
 8009330:	431a      	orrs	r2, r3
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	061b      	lsls	r3, r3, #24
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	071b      	lsls	r3, r3, #28
 800933e:	4917      	ldr	r1, [pc, #92]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009340:	4313      	orrs	r3, r2
 8009342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009346:	4b15      	ldr	r3, [pc, #84]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	4911      	ldr	r1, [pc, #68]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800935c:	4b0f      	ldr	r3, [pc, #60]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a0e      	ldr	r2, [pc, #56]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009368:	f7f9 f936 	bl	80025d8 <HAL_GetTick>
 800936c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800936e:	e008      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009370:	f7f9 f932 	bl	80025d8 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	2b64      	cmp	r3, #100	@ 0x64
 800937c:	d901      	bls.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e007      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009382:	4b06      	ldr	r3, [pc, #24]	@ (800939c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800938a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800938e:	d1ef      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3720      	adds	r7, #32
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40023800 	.word	0x40023800

080093a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e0c6      	b.n	8009540 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d108      	bne.n	80093cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093c2:	d009      	beq.n	80093d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	61da      	str	r2, [r3, #28]
 80093ca:	e005      	b.n	80093d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7f8 fa4f 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2202      	movs	r2, #2
 80093f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009408:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009412:	d902      	bls.n	800941a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	e002      	b.n	8009420 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800941a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800941e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009428:	d007      	beq.n	800943a <HAL_SPI_Init+0x9a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009432:	d002      	beq.n	800943a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947c:	ea42 0103 	orr.w	r1, r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009498:	d11b      	bne.n	80094d2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10b      	bne.n	80094ba <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094aa:	d903      	bls.n	80094b4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80094b2:	e002      	b.n	80094ba <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d107      	bne.n	80094d2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	f003 0204 	and.w	r2, r3, #4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80094f8:	ea42 0103 	orr.w	r1, r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009512:	d105      	bne.n	8009520 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	b292      	uxth	r2, r2
 800951e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69da      	ldr	r2, [r3, #28]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800952e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_SPI_Transmit_IT+0x1a>
 800955c:	88fb      	ldrh	r3, [r7, #6]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e082      	b.n	800966c <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b01      	cmp	r3, #1
 8009570:	d001      	beq.n	8009576 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8009572:	2302      	movs	r3, #2
 8009574:	e07a      	b.n	800966c <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_SPI_Transmit_IT+0x3c>
 8009580:	2302      	movs	r3, #2
 8009582:	e073      	b.n	800966c <HAL_SPI_Transmit_IT+0x124>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2203      	movs	r2, #3
 8009590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	88fa      	ldrh	r2, [r7, #6]
 80095a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	88fa      	ldrh	r2, [r7, #6]
 80095aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095d0:	d903      	bls.n	80095da <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4a28      	ldr	r2, [pc, #160]	@ (8009678 <HAL_SPI_Transmit_IT+0x130>)
 80095d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80095d8:	e002      	b.n	80095e0 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4a27      	ldr	r2, [pc, #156]	@ (800967c <HAL_SPI_Transmit_IT+0x134>)
 80095de:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095e8:	d10f      	bne.n	800960a <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009608:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009612:	d10f      	bne.n	8009634 <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009632:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800963e:	2b40      	cmp	r3, #64	@ 0x40
 8009640:	d007      	beq.n	8009652 <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009650:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8009668:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	0800a4e9 	.word	0x0800a4e9
 800967c:	0800a489 	.word	0x0800a489

08009680 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b01      	cmp	r3, #1
 8009698:	d001      	beq.n	800969e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800969a:	2302      	movs	r3, #2
 800969c:	e0ba      	b.n	8009814 <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <HAL_SPI_Receive_IT+0x2a>
 80096a4:	88fb      	ldrh	r3, [r7, #6]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e0b2      	b.n	8009814 <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d110      	bne.n	80096d8 <HAL_SPI_Receive_IT+0x58>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096be:	d10b      	bne.n	80096d8 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2204      	movs	r2, #4
 80096c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f8a8 	bl	8009824 <HAL_SPI_TransmitReceive_IT>
 80096d4:	4603      	mov	r3, r0
 80096d6:	e09d      	b.n	8009814 <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_SPI_Receive_IT+0x66>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e096      	b.n	8009814 <HAL_SPI_Receive_IT+0x194>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2204      	movs	r2, #4
 80096f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	88fa      	ldrh	r2, [r7, #6]
 8009706:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	88fa      	ldrh	r2, [r7, #6]
 800970e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009732:	d90b      	bls.n	800974c <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009742:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a35      	ldr	r2, [pc, #212]	@ (800981c <HAL_SPI_Receive_IT+0x19c>)
 8009748:	64da      	str	r2, [r3, #76]	@ 0x4c
 800974a:	e00a      	b.n	8009762 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800975a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4a30      	ldr	r2, [pc, #192]	@ (8009820 <HAL_SPI_Receive_IT+0x1a0>)
 8009760:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800976a:	d10f      	bne.n	800978c <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800977a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800978a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009794:	d11f      	bne.n	80097d6 <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097a4:	d806      	bhi.n	80097b4 <HAL_SPI_Receive_IT+0x134>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d102      	bne.n	80097b4 <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2202      	movs	r2, #2
 80097b2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e002      	b.n	80097dc <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e6:	2b40      	cmp	r3, #64	@ 0x40
 80097e8:	d007      	beq.n	80097fa <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097f8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009810:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	0800a401 	.word	0x0800a401
 8009820:	0800a341 	.word	0x0800a341

08009824 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009838:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d00c      	beq.n	8009860 <HAL_SPI_TransmitReceive_IT+0x3c>
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800984c:	d106      	bne.n	800985c <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <HAL_SPI_TransmitReceive_IT+0x38>
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	2b04      	cmp	r3, #4
 800985a:	d001      	beq.n	8009860 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800985c:	2302      	movs	r3, #2
 800985e:	e0a5      	b.n	80099ac <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_SPI_TransmitReceive_IT+0x4e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_SPI_TransmitReceive_IT+0x4e>
 800986c:	887b      	ldrh	r3, [r7, #2]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e09a      	b.n	80099ac <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_SPI_TransmitReceive_IT+0x60>
 8009880:	2302      	movs	r3, #2
 8009882:	e093      	b.n	80099ac <HAL_SPI_TransmitReceive_IT+0x188>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b04      	cmp	r3, #4
 8009896:	d003      	beq.n	80098a0 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2205      	movs	r2, #5
 800989c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	887a      	ldrh	r2, [r7, #2]
 80098b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	887a      	ldrh	r2, [r7, #2]
 80098b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	887a      	ldrh	r2, [r7, #2]
 80098c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	887a      	ldrh	r2, [r7, #2]
 80098ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80098d6:	d906      	bls.n	80098e6 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a37      	ldr	r2, [pc, #220]	@ (80099b8 <HAL_SPI_TransmitReceive_IT+0x194>)
 80098dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a36      	ldr	r2, [pc, #216]	@ (80099bc <HAL_SPI_TransmitReceive_IT+0x198>)
 80098e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80098e4:	e005      	b.n	80098f2 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4a35      	ldr	r2, [pc, #212]	@ (80099c0 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80098ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a35      	ldr	r2, [pc, #212]	@ (80099c4 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80098f0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098fa:	d11f      	bne.n	800993c <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2201      	movs	r2, #1
 8009900:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800990a:	d806      	bhi.n	800991a <HAL_SPI_TransmitReceive_IT+0xf6>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	2b02      	cmp	r3, #2
 8009912:	d102      	bne.n	800991a <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2202      	movs	r2, #2
 8009918:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e002      	b.n	8009942 <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800994a:	d802      	bhi.n	8009952 <HAL_SPI_TransmitReceive_IT+0x12e>
 800994c:	887b      	ldrh	r3, [r7, #2]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d908      	bls.n	8009964 <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009960:	605a      	str	r2, [r3, #4]
 8009962:	e007      	b.n	8009974 <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009972:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997e:	2b40      	cmp	r3, #64	@ 0x40
 8009980:	d007      	beq.n	8009992 <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009990:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80099a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	0800a1c9 	.word	0x0800a1c9
 80099bc:	0800a279 	.word	0x0800a279
 80099c0:	08009fd1 	.word	0x08009fd1
 80099c4:	0800a10d 	.word	0x0800a10d

080099c8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 80099d4:	2301      	movs	r3, #1
 80099d6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80099d8:	4b72      	ldr	r3, [pc, #456]	@ (8009ba4 <HAL_SPI_Abort_IT+0x1dc>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a72      	ldr	r2, [pc, #456]	@ (8009ba8 <HAL_SPI_Abort_IT+0x1e0>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	0a5b      	lsrs	r3, r3, #9
 80099e4:	2264      	movs	r2, #100	@ 0x64
 80099e6:	fb02 f303 	mul.w	r3, r2, r3
 80099ea:	613b      	str	r3, [r7, #16]
  count = resetcount;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0220 	bic.w	r2, r2, #32
 80099fe:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0a:	2b80      	cmp	r3, #128	@ 0x80
 8009a0c:	d117      	bne.n	8009a3e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a66      	ldr	r2, [pc, #408]	@ (8009bac <HAL_SPI_Abort_IT+0x1e4>)
 8009a12:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009a26:	e008      	b.n	8009a3a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	d1ec      	bne.n	8009a14 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b40      	cmp	r3, #64	@ 0x40
 8009a4a:	d117      	bne.n	8009a7c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a58      	ldr	r2, [pc, #352]	@ (8009bb0 <HAL_SPI_Abort_IT+0x1e8>)
 8009a50:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009a64:	e008      	b.n	8009a78 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b07      	cmp	r3, #7
 8009a76:	d1ec      	bne.n	8009a52 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d104      	bne.n	8009a9c <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a96:	4a47      	ldr	r2, [pc, #284]	@ (8009bb4 <HAL_SPI_Abort_IT+0x1ec>)
 8009a98:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a9a:	e003      	b.n	8009aa4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00f      	beq.n	8009acc <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d104      	bne.n	8009ac4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009abe:	4a3e      	ldr	r2, [pc, #248]	@ (8009bb8 <HAL_SPI_Abort_IT+0x1f0>)
 8009ac0:	651a      	str	r2, [r3, #80]	@ 0x50
 8009ac2:	e003      	b.n	8009acc <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac8:	2200      	movs	r2, #0
 8009aca:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d115      	bne.n	8009b06 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d011      	beq.n	8009b06 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fa f8e6 	bl	8003cb8 <HAL_DMA_Abort_IT>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d007      	beq.n	8009b02 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af6:	2200      	movs	r2, #0
 8009af8:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2240      	movs	r2, #64	@ 0x40
 8009afe:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b00:	e001      	b.n	8009b06 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d115      	bne.n	8009b40 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d011      	beq.n	8009b40 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fa f8c9 	bl	8003cb8 <HAL_DMA_Abort_IT>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d007      	beq.n	8009b3c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b30:	2200      	movs	r2, #0
 8009b32:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2240      	movs	r2, #64	@ 0x40
 8009b38:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b3a:	e001      	b.n	8009b40 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d129      	bne.n	8009b9a <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->TxXferCount = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	87da      	strh	r2, [r3, #62]	@ 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b58:	2b40      	cmp	r3, #64	@ 0x40
 8009b5a:	d102      	bne.n	8009b62 <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e002      	b.n	8009b68 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	60bb      	str	r3, [r7, #8]
 8009b8a:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f91b 	bl	8009dd0 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000000 	.word	0x20000000
 8009ba8:	057619f1 	.word	0x057619f1
 8009bac:	0800abd5 	.word	0x0800abd5
 8009bb0:	0800ab15 	.word	0x0800ab15
 8009bb4:	08009e0f 	.word	0x08009e0f
 8009bb8:	08009eed 	.word	0x08009eed

08009bbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	099b      	lsrs	r3, r3, #6
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10f      	bne.n	8009c00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	099b      	lsrs	r3, r3, #6
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
    return;
 8009bfe:	e0d7      	b.n	8009db0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00a      	beq.n	8009c22 <HAL_SPI_IRQHandler+0x66>
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	09db      	lsrs	r3, r3, #7
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
    return;
 8009c20:	e0c6      	b.n	8009db0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	095b      	lsrs	r3, r3, #5
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10c      	bne.n	8009c48 <HAL_SPI_IRQHandler+0x8c>
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	099b      	lsrs	r3, r3, #6
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 80b4 	beq.w	8009db0 <HAL_SPI_IRQHandler+0x1f4>
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80ad 	beq.w	8009db0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	099b      	lsrs	r3, r3, #6
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d023      	beq.n	8009caa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d011      	beq.n	8009c92 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	f043 0204 	orr.w	r2, r3, #4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	617b      	str	r3, [r7, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	617b      	str	r3, [r7, #20]
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	e00b      	b.n	8009caa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c92:	2300      	movs	r3, #0
 8009c94:	613b      	str	r3, [r7, #16]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	613b      	str	r3, [r7, #16]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	613b      	str	r3, [r7, #16]
 8009ca6:	693b      	ldr	r3, [r7, #16]
        return;
 8009ca8:	e082      	b.n	8009db0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d014      	beq.n	8009ce0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cba:	f043 0201 	orr.w	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	0a1b      	lsrs	r3, r3, #8
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00c      	beq.n	8009d06 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf0:	f043 0208 	orr.w	r2, r3, #8
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60bb      	str	r3, [r7, #8]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]
 8009d04:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d04f      	beq.n	8009dae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d1c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <HAL_SPI_IRQHandler+0x17e>
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d034      	beq.n	8009da4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0203 	bic.w	r2, r2, #3
 8009d48:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d011      	beq.n	8009d76 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d56:	4a18      	ldr	r2, [pc, #96]	@ (8009db8 <HAL_SPI_IRQHandler+0x1fc>)
 8009d58:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f9 ffaa 	bl	8003cb8 <HAL_DMA_Abort_IT>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d016      	beq.n	8009dac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d82:	4a0d      	ldr	r2, [pc, #52]	@ (8009db8 <HAL_SPI_IRQHandler+0x1fc>)
 8009d84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7f9 ff94 	bl	8003cb8 <HAL_DMA_Abort_IT>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009da2:	e003      	b.n	8009dac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f809 	bl	8009dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009daa:	e000      	b.n	8009dae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009dac:	bf00      	nop
    return;
 8009dae:	bf00      	nop
  }
}
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	08009de5 	.word	0x08009de5

08009dbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7ff ffdb 	bl	8009dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af02      	add	r7, sp, #8
 8009e14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1a:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e20:	2200      	movs	r2, #0
 8009e22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0202 	bic.w	r2, r2, #2
 8009e32:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009e34:	f7f8 fbd0 	bl	80025d8 <HAL_GetTick>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2164      	movs	r1, #100	@ 0x64
 8009e3e:	6978      	ldr	r0, [r7, #20]
 8009e40:	f000 fd1c 	bl	800a87c <SPI_EndRxTxTransaction>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2240      	movs	r2, #64	@ 0x40
 8009e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e5e:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009e60:	f7f8 fbba 	bl	80025d8 <HAL_GetTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	2364      	movs	r3, #100	@ 0x64
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009e70:	6978      	ldr	r0, [r7, #20]
 8009e72:	f000 fbf1 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SPI_DMATxAbortCallback+0x74>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2240      	movs	r2, #64	@ 0x40
 8009e80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d127      	bne.n	8009ee4 <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ea6:	2b40      	cmp	r3, #64	@ 0x40
 8009ea8:	d002      	beq.n	8009eb0 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009edc:	6978      	ldr	r0, [r7, #20]
 8009ede:	f7ff ff77 	bl	8009dd0 <HAL_SPI_AbortCpltCallback>
 8009ee2:	e000      	b.n	8009ee6 <SPI_DMATxAbortCallback+0xd8>
      return;
 8009ee4:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f08:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0e:	2200      	movs	r2, #0
 8009f10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0201 	bic.w	r2, r2, #1
 8009f20:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009f22:	f7f8 fb59 	bl	80025d8 <HAL_GetTick>
 8009f26:	4603      	mov	r3, r0
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	2364      	movs	r3, #100	@ 0x64
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2180      	movs	r1, #128	@ 0x80
 8009f30:	6978      	ldr	r0, [r7, #20]
 8009f32:	f000 fb09 	bl	800a548 <SPI_WaitFlagStateUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2240      	movs	r2, #64	@ 0x40
 8009f40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009f42:	f7f8 fb49 	bl	80025d8 <HAL_GetTick>
 8009f46:	4603      	mov	r3, r0
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	2364      	movs	r3, #100	@ 0x64
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f000 fb80 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <SPI_DMARxAbortCallback+0x78>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2240      	movs	r2, #64	@ 0x40
 8009f62:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d127      	bne.n	8009fc6 <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2200      	movs	r2, #0
 8009f82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f88:	2b40      	cmp	r3, #64	@ 0x40
 8009f8a:	d002      	beq.n	8009f92 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f92:	2300      	movs	r3, #0
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	613b      	str	r3, [r7, #16]
 8009fa6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009fbe:	6978      	ldr	r0, [r7, #20]
 8009fc0:	f7ff ff06 	bl	8009dd0 <HAL_SPI_AbortCpltCallback>
 8009fc4:	e000      	b.n	8009fc8 <SPI_DMARxAbortCallback+0xdc>
      return;
 8009fc6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
	...

08009fd0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d923      	bls.n	800a02c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fee:	b292      	uxth	r2, r2
 8009ff0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff6:	1c9a      	adds	r2, r3, #2
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b02      	subs	r3, #2
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a014:	b29b      	uxth	r3, r3
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11f      	bne.n	800a05a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	e016      	b.n	800a05a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f103 020c 	add.w	r2, r3, #12
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a060:	b29b      	uxth	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d120      	bne.n	800a0a8 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a06e:	d10b      	bne.n	800a088 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a07e:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a0b      	ldr	r2, [pc, #44]	@ (800a0b0 <SPI_2linesRxISR_8BIT+0xe0>)
 800a084:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800a086:	e00f      	b.n	800a0a8 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a096:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d102      	bne.n	800a0a8 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fc54 	bl	800a950 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800a0b5 	.word	0x0800a0b5

0800a0b4 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800a0d0:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10f      	bne.n	800a104 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a0f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fc26 	bl	800a950 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d912      	bls.n	800a144 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a122:	881a      	ldrh	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12e:	1c9a      	adds	r2, r3, #2
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a138:	b29b      	uxth	r3, r3
 800a13a:	3b02      	subs	r3, #2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a142:	e012      	b.n	800a16a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	330c      	adds	r3, #12
 800a14e:	7812      	ldrb	r2, [r2, #0]
 800a150:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a160:	b29b      	uxth	r3, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d126      	bne.n	800a1c2 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17c:	d110      	bne.n	800a1a0 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a18c:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a19c:	605a      	str	r2, [r3, #4]
      return;
 800a19e:	e010      	b.n	800a1c2 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fbc7 	bl	800a950 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	1c9a      	adds	r2, r3, #2
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a200:	b29b      	uxth	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d118      	bne.n	800a238 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a20e:	d103      	bne.n	800a218 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0b      	ldr	r2, [pc, #44]	@ (800a240 <SPI_2linesRxISR_16BIT+0x78>)
 800a214:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800a216:	e00f      	b.n	800a238 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a226:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d102      	bne.n	800a238 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fb8c 	bl	800a950 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	0800a245 	.word	0x0800a245

0800a244 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800a258:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a268:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb70 	bl	800a950 <SPI_CloseRxTx_ISR>
}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a284:	881a      	ldrh	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a290:	1c9a      	adds	r2, r3, #2
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	3b01      	subs	r3, #1
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d126      	bne.n	800a2fc <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b6:	d110      	bne.n	800a2da <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2c6:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2d6:	605a      	str	r2, [r3, #4]
      return;
 800a2d8:	e010      	b.n	800a2fc <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fb2a 	bl	800a950 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	330c      	adds	r3, #12
 800a314:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800a31e:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a324:	1e5a      	subs	r2, r3, #1
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fb68 	bl	800aa08 <SPI_CloseRx_ISR>
  }
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f103 020c 	add.w	r2, r3, #12
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a354:	7812      	ldrb	r2, [r2, #0]
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10c      	bne.n	800a39c <SPI_RxISR_8BIT+0x5c>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38a:	d107      	bne.n	800a39c <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a39a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3b0:	d103      	bne.n	800a3ba <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a04      	ldr	r2, [pc, #16]	@ (800a3c8 <SPI_RxISR_8BIT+0x88>)
 800a3b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800a3b8:	e002      	b.n	800a3c0 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fb24 	bl	800aa08 <SPI_CloseRx_ISR>
  }
}
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800a303 	.word	0x0800a303

0800a3cc <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800a3e0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a3f0:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb08 	bl	800aa08 <SPI_CloseRx_ISR>
}
 800a3f8:	bf00      	nop
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a412:	b292      	uxth	r2, r2
 800a414:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	1c9a      	adds	r2, r3, #2
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d10c      	bne.n	800a458 <SPI_RxISR_16BIT+0x58>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a446:	d107      	bne.n	800a458 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a456:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a45e:	b29b      	uxth	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10b      	bne.n	800a47c <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a46c:	d103      	bne.n	800a476 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a04      	ldr	r2, [pc, #16]	@ (800a484 <SPI_RxISR_16BIT+0x84>)
 800a472:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800a474:	e002      	b.n	800a47c <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fac6 	bl	800aa08 <SPI_CloseRx_ISR>
  }
}
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	0800a3cd 	.word	0x0800a3cd

0800a488 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	330c      	adds	r3, #12
 800a49a:	7812      	ldrb	r2, [r2, #0]
 800a49c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10f      	bne.n	800a4e0 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4c8:	d107      	bne.n	800a4da <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4d8:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fada 	bl	800aa94 <SPI_CloseTx_ISR>
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f4:	881a      	ldrh	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a500:	1c9a      	adds	r2, r3, #2
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a518:	b29b      	uxth	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10f      	bne.n	800a53e <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a526:	d107      	bne.n	800a538 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a536:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 faab 	bl	800aa94 <SPI_CloseTx_ISR>
  }
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a558:	f7f8 f83e 	bl	80025d8 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	4413      	add	r3, r2
 800a566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a568:	f7f8 f836 	bl	80025d8 <HAL_GetTick>
 800a56c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a56e:	4b39      	ldr	r3, [pc, #228]	@ (800a654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	015b      	lsls	r3, r3, #5
 800a574:	0d1b      	lsrs	r3, r3, #20
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a57e:	e055      	b.n	800a62c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a586:	d051      	beq.n	800a62c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a588:	f7f8 f826 	bl	80025d8 <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	429a      	cmp	r2, r3
 800a596:	d902      	bls.n	800a59e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d13d      	bne.n	800a61a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a5ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5b6:	d111      	bne.n	800a5dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5c0:	d004      	beq.n	800a5cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5ca:	d107      	bne.n	800a5dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5e4:	d10f      	bne.n	800a606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e018      	b.n	800a64c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e002      	b.n	800a62c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	3b01      	subs	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4013      	ands	r3, r2
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	429a      	cmp	r2, r3
 800a63a:	bf0c      	ite	eq
 800a63c:	2301      	moveq	r3, #1
 800a63e:	2300      	movne	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	429a      	cmp	r2, r3
 800a648:	d19a      	bne.n	800a580 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000000 	.word	0x20000000

0800a658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	@ 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a66a:	f7f7 ffb5 	bl	80025d8 <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a672:	1a9b      	subs	r3, r3, r2
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	4413      	add	r3, r2
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a67a:	f7f7 ffad 	bl	80025d8 <HAL_GetTick>
 800a67e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	330c      	adds	r3, #12
 800a686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a688:	4b3d      	ldr	r3, [pc, #244]	@ (800a780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	00da      	lsls	r2, r3, #3
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	0d1b      	lsrs	r3, r3, #20
 800a698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a6a0:	e061      	b.n	800a766 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6a8:	d107      	bne.n	800a6ba <SPI_WaitFifoStateUntilTimeout+0x62>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c0:	d051      	beq.n	800a766 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6c2:	f7f7 ff89 	bl	80025d8 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d902      	bls.n	800a6d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d13d      	bne.n	800a754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a6e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6f0:	d111      	bne.n	800a716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6fa:	d004      	beq.n	800a706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a704:	d107      	bne.n	800a716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a71e:	d10f      	bne.n	800a740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a73e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e011      	b.n	800a778 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a75e:	e002      	b.n	800a766 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	3b01      	subs	r3, #1
 800a764:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4013      	ands	r3, r2
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	d195      	bne.n	800a6a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3728      	adds	r7, #40	@ 0x28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000000 	.word	0x20000000

0800a784 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a798:	d111      	bne.n	800a7be <SPI_EndRxTransaction+0x3a>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a2:	d004      	beq.n	800a7ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ac:	d107      	bne.n	800a7be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7c6:	d112      	bne.n	800a7ee <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2180      	movs	r1, #128	@ 0x80
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff feb8 	bl	800a548 <SPI_WaitFlagStateUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d021      	beq.n	800a822 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7e2:	f043 0220 	orr.w	r2, r3, #32
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e03d      	b.n	800a86a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7ee:	4b21      	ldr	r3, [pc, #132]	@ (800a874 <SPI_EndRxTransaction+0xf0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a21      	ldr	r2, [pc, #132]	@ (800a878 <SPI_EndRxTransaction+0xf4>)
 800a7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f8:	0d5b      	lsrs	r3, r3, #21
 800a7fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a7fe:	fb02 f303 	mul.w	r3, r2, r3
 800a802:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a81a:	2b80      	cmp	r3, #128	@ 0x80
 800a81c:	d0f2      	beq.n	800a804 <SPI_EndRxTransaction+0x80>
 800a81e:	e000      	b.n	800a822 <SPI_EndRxTransaction+0x9e>
        break;
 800a820:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a82a:	d11d      	bne.n	800a868 <SPI_EndRxTransaction+0xe4>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a834:	d004      	beq.n	800a840 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a83e:	d113      	bne.n	800a868 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2200      	movs	r2, #0
 800a848:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff ff03 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a85c:	f043 0220 	orr.w	r2, r3, #32
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e000      	b.n	800a86a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000000 	.word	0x20000000
 800a878:	165e9f81 	.word	0x165e9f81

0800a87c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af02      	add	r7, sp, #8
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2200      	movs	r2, #0
 800a890:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fedf 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8a4:	f043 0220 	orr.w	r2, r3, #32
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e046      	b.n	800a93e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a8b0:	4b25      	ldr	r3, [pc, #148]	@ (800a948 <SPI_EndRxTxTransaction+0xcc>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a25      	ldr	r2, [pc, #148]	@ (800a94c <SPI_EndRxTxTransaction+0xd0>)
 800a8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ba:	0d5b      	lsrs	r3, r3, #21
 800a8bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a8c0:	fb02 f303 	mul.w	r3, r2, r3
 800a8c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8ce:	d112      	bne.n	800a8f6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2180      	movs	r1, #128	@ 0x80
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fe34 	bl	800a548 <SPI_WaitFlagStateUntilTimeout>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d016      	beq.n	800a914 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ea:	f043 0220 	orr.w	r2, r3, #32
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e023      	b.n	800a93e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00a      	beq.n	800a912 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a90c:	2b80      	cmp	r3, #128	@ 0x80
 800a90e:	d0f2      	beq.n	800a8f6 <SPI_EndRxTxTransaction+0x7a>
 800a910:	e000      	b.n	800a914 <SPI_EndRxTxTransaction+0x98>
        break;
 800a912:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff fe99 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a930:	f043 0220 	orr.w	r2, r3, #32
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e000      	b.n	800a93e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000000 	.word	0x20000000
 800a94c:	165e9f81 	.word	0x165e9f81

0800a950 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a958:	f7f7 fe3e 	bl	80025d8 <HAL_GetTick>
 800a95c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0220 	bic.w	r2, r2, #32
 800a96c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	2164      	movs	r1, #100	@ 0x64
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ff82 	bl	800a87c <SPI_EndRxTxTransaction>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a982:	f043 0220 	orr.w	r2, r3, #32
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b10      	cmp	r3, #16
 800a996:	d112      	bne.n	800a9be <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9a4:	f043 0202 	orr.w	r2, r3, #2
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a9b4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fa00 	bl	8009dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a9bc:	e020      	b.n	800aa00 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d115      	bne.n	800a9f2 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d107      	bne.n	800a9e2 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f012 fee6 	bl	801d7ac <HAL_SPI_RxCpltCallback>
}
 800a9e0:	e00e      	b.n	800aa00 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f012 ff24 	bl	801d838 <HAL_SPI_TxRxCpltCallback>
}
 800a9f0:	e006      	b.n	800aa00 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff f9de 	bl	8009dbc <HAL_SPI_ErrorCallback>
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800aa1e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aa20:	f7f7 fdda 	bl	80025d8 <HAL_GetTick>
 800aa24:	4603      	mov	r3, r0
 800aa26:	461a      	mov	r2, r3
 800aa28:	2164      	movs	r1, #100	@ 0x64
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff feaa 	bl	800a784 <SPI_EndRxTransaction>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa3a:	f043 0220 	orr.w	r2, r3, #32
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d10e      	bne.n	800aa76 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa5c:	f043 0202 	orr.w	r2, r3, #2
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800aa6c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff f9a4 	bl	8009dbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800aa74:	e00a      	b.n	800aa8c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f012 fe94 	bl	801d7ac <HAL_SPI_RxCpltCallback>
}
 800aa84:	e002      	b.n	800aa8c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff f998 	bl	8009dbc <HAL_SPI_ErrorCallback>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa9c:	f7f7 fd9c 	bl	80025d8 <HAL_GetTick>
 800aaa0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800aab0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	2164      	movs	r1, #100	@ 0x64
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff fee0 	bl	800a87c <SPI_EndRxTxTransaction>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d005      	beq.n	800aace <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aac6:	f043 0220 	orr.w	r2, r3, #32
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aad6:	2300      	movs	r3, #0
 800aad8:	60bb      	str	r3, [r7, #8]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	60bb      	str	r3, [r7, #8]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	60bb      	str	r3, [r7, #8]
 800aaea:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff f95d 	bl	8009dbc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ab02:	e002      	b.n	800ab0a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f012 fe15 	bl	801d734 <HAL_SPI_TxCpltCallback>
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab2a:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ab2c:	4b27      	ldr	r3, [pc, #156]	@ (800abcc <SPI_AbortRx_ISR+0xb8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a27      	ldr	r2, [pc, #156]	@ (800abd0 <SPI_AbortRx_ISR+0xbc>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	0a5b      	lsrs	r3, r3, #9
 800ab38:	2264      	movs	r2, #100	@ 0x64
 800ab3a:	fb02 f303 	mul.w	r3, r2, r3
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab4e:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800ab62:	e009      	b.n	800ab78 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab74:	2b40      	cmp	r3, #64	@ 0x40
 800ab76:	d0eb      	beq.n	800ab50 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab78:	f7f7 fd2e 	bl	80025d8 <HAL_GetTick>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2364      	movs	r3, #100	@ 0x64
 800ab82:	2200      	movs	r2, #0
 800ab84:	2180      	movs	r1, #128	@ 0x80
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff fcde 	bl	800a548 <SPI_WaitFlagStateUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2240      	movs	r2, #64	@ 0x40
 800ab96:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ab98:	f7f7 fd1e 	bl	80025d8 <HAL_GetTick>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	2364      	movs	r3, #100	@ 0x64
 800aba2:	2200      	movs	r2, #0
 800aba4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fd55 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2240      	movs	r2, #64	@ 0x40
 800abb8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2207      	movs	r2, #7
 800abbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20000000 	.word	0x20000000
 800abd0:	057619f1 	.word	0x057619f1

0800abd4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af02      	add	r7, sp, #8
 800abda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800abdc:	4b4c      	ldr	r3, [pc, #304]	@ (800ad10 <SPI_AbortTx_ISR+0x13c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a4c      	ldr	r2, [pc, #304]	@ (800ad14 <SPI_AbortTx_ISR+0x140>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	0a5b      	lsrs	r3, r3, #9
 800abe8:	2264      	movs	r2, #100	@ 0x64
 800abea:	fb02 f303 	mul.w	r3, r2, r3
 800abee:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abfe:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800ac12:	e009      	b.n	800ac28 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac24:	2b80      	cmp	r3, #128	@ 0x80
 800ac26:	d0eb      	beq.n	800ac00 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ac28:	f7f7 fcd6 	bl	80025d8 <HAL_GetTick>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2164      	movs	r1, #100	@ 0x64
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7ff fe22 	bl	800a87c <SPI_EndRxTxTransaction>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2240      	movs	r2, #64	@ 0x40
 800ac42:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac52:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ac54:	f7f7 fcc0 	bl	80025d8 <HAL_GetTick>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	2364      	movs	r3, #100	@ 0x64
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff fcf7 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2240      	movs	r2, #64	@ 0x40
 800ac74:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac80:	2b40      	cmp	r3, #64	@ 0x40
 800ac82:	d13c      	bne.n	800acfe <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac92:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800aca6:	e009      	b.n	800acbc <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3b01      	subs	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb8:	2b40      	cmp	r3, #64	@ 0x40
 800acba:	d0eb      	beq.n	800ac94 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800acbc:	f7f7 fc8c 	bl	80025d8 <HAL_GetTick>
 800acc0:	4603      	mov	r3, r0
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	2364      	movs	r3, #100	@ 0x64
 800acc6:	2200      	movs	r2, #0
 800acc8:	2180      	movs	r1, #128	@ 0x80
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fc3c 	bl	800a548 <SPI_WaitFlagStateUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2240      	movs	r2, #64	@ 0x40
 800acda:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800acdc:	f7f7 fc7c 	bl	80025d8 <HAL_GetTick>
 800ace0:	4603      	mov	r3, r0
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	2364      	movs	r3, #100	@ 0x64
 800ace6:	2200      	movs	r2, #0
 800ace8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fcb3 	bl	800a658 <SPI_WaitFifoStateUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2240      	movs	r2, #64	@ 0x40
 800acfc:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2207      	movs	r2, #7
 800ad02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000000 	.word	0x20000000
 800ad14:	057619f1 	.word	0x057619f1

0800ad18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e049      	b.n	800adbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7f6 fe66 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f000 fa0e 	bl	800b178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	d001      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e054      	b.n	800ae8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f042 0201 	orr.w	r2, r2, #1
 800adf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a26      	ldr	r2, [pc, #152]	@ (800ae98 <HAL_TIM_Base_Start_IT+0xd0>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d022      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d01d      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a22      	ldr	r2, [pc, #136]	@ (800ae9c <HAL_TIM_Base_Start_IT+0xd4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d018      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a21      	ldr	r2, [pc, #132]	@ (800aea0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d013      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1f      	ldr	r2, [pc, #124]	@ (800aea4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d00e      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aea8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d009      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a1c      	ldr	r2, [pc, #112]	@ (800aeac <HAL_TIM_Base_Start_IT+0xe4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <HAL_TIM_Base_Start_IT+0x80>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a1b      	ldr	r2, [pc, #108]	@ (800aeb0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d115      	bne.n	800ae74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	4b19      	ldr	r3, [pc, #100]	@ (800aeb4 <HAL_TIM_Base_Start_IT+0xec>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d015      	beq.n	800ae86 <HAL_TIM_Base_Start_IT+0xbe>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae60:	d011      	beq.n	800ae86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0201 	orr.w	r2, r2, #1
 800ae70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae72:	e008      	b.n	800ae86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e000      	b.n	800ae88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40000400 	.word	0x40000400
 800aea0:	40000800 	.word	0x40000800
 800aea4:	40000c00 	.word	0x40000c00
 800aea8:	40010400 	.word	0x40010400
 800aeac:	40014000 	.word	0x40014000
 800aeb0:	40001800 	.word	0x40001800
 800aeb4:	00010007 	.word	0x00010007

0800aeb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0201 	bic.w	r2, r2, #1
 800aece:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6a1a      	ldr	r2, [r3, #32]
 800aed6:	4b0f      	ldr	r3, [pc, #60]	@ (800af14 <HAL_TIM_Base_Stop_IT+0x5c>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10f      	bne.n	800aefe <HAL_TIM_Base_Stop_IT+0x46>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a1a      	ldr	r2, [r3, #32]
 800aee4:	f240 4344 	movw	r3, #1092	@ 0x444
 800aee8:	4013      	ands	r3, r2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d107      	bne.n	800aefe <HAL_TIM_Base_Stop_IT+0x46>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f022 0201 	bic.w	r2, r2, #1
 800aefc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	00111111 	.word	0x00111111

0800af18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d020      	beq.n	800af7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01b      	beq.n	800af7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f06f 0202 	mvn.w	r2, #2
 800af4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8e9 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800af68:	e005      	b.n	800af76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f8db 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8ec 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d020      	beq.n	800afc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01b      	beq.n	800afc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0204 	mvn.w	r2, #4
 800af98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2202      	movs	r2, #2
 800af9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f8c3 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800afb4:	e005      	b.n	800afc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f8b5 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8c6 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f003 0308 	and.w	r3, r3, #8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d020      	beq.n	800b014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d01b      	beq.n	800b014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f06f 0208 	mvn.w	r2, #8
 800afe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2204      	movs	r2, #4
 800afea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f89d 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800b000:	e005      	b.n	800b00e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f88f 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f8a0 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d020      	beq.n	800b060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f003 0310 	and.w	r3, r3, #16
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01b      	beq.n	800b060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0210 	mvn.w	r2, #16
 800b030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2208      	movs	r2, #8
 800b036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f877 	bl	800b13a <HAL_TIM_IC_CaptureCallback>
 800b04c:	e005      	b.n	800b05a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f869 	bl	800b126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f87a 	bl	800b14e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00c      	beq.n	800b084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f06f 0201 	mvn.w	r2, #1
 800b07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7f6 f966 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00c      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f9a1 	bl	800b3f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f999 	bl	800b408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00c      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f834 	bl	800b162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f003 0320 	and.w	r3, r3, #32
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00c      	beq.n	800b11e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f003 0320 	and.w	r3, r3, #32
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d007      	beq.n	800b11e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f06f 0220 	mvn.w	r2, #32
 800b116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f961 	bl	800b3e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b16a:	bf00      	nop
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
	...

0800b178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a43      	ldr	r2, [pc, #268]	@ (800b298 <TIM_Base_SetConfig+0x120>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d013      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b196:	d00f      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a40      	ldr	r2, [pc, #256]	@ (800b29c <TIM_Base_SetConfig+0x124>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00b      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a3f      	ldr	r2, [pc, #252]	@ (800b2a0 <TIM_Base_SetConfig+0x128>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d007      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a3e      	ldr	r2, [pc, #248]	@ (800b2a4 <TIM_Base_SetConfig+0x12c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d003      	beq.n	800b1b8 <TIM_Base_SetConfig+0x40>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a3d      	ldr	r2, [pc, #244]	@ (800b2a8 <TIM_Base_SetConfig+0x130>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d108      	bne.n	800b1ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a32      	ldr	r2, [pc, #200]	@ (800b298 <TIM_Base_SetConfig+0x120>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d02b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d8:	d027      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a2f      	ldr	r2, [pc, #188]	@ (800b29c <TIM_Base_SetConfig+0x124>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d023      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a2e      	ldr	r2, [pc, #184]	@ (800b2a0 <TIM_Base_SetConfig+0x128>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d01f      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a2d      	ldr	r2, [pc, #180]	@ (800b2a4 <TIM_Base_SetConfig+0x12c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a2c      	ldr	r2, [pc, #176]	@ (800b2a8 <TIM_Base_SetConfig+0x130>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d017      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a2b      	ldr	r2, [pc, #172]	@ (800b2ac <TIM_Base_SetConfig+0x134>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d013      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a2a      	ldr	r2, [pc, #168]	@ (800b2b0 <TIM_Base_SetConfig+0x138>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d00f      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a29      	ldr	r2, [pc, #164]	@ (800b2b4 <TIM_Base_SetConfig+0x13c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00b      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a28      	ldr	r2, [pc, #160]	@ (800b2b8 <TIM_Base_SetConfig+0x140>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d007      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a27      	ldr	r2, [pc, #156]	@ (800b2bc <TIM_Base_SetConfig+0x144>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d003      	beq.n	800b22a <TIM_Base_SetConfig+0xb2>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a26      	ldr	r2, [pc, #152]	@ (800b2c0 <TIM_Base_SetConfig+0x148>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d108      	bne.n	800b23c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a0e      	ldr	r2, [pc, #56]	@ (800b298 <TIM_Base_SetConfig+0x120>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d003      	beq.n	800b26a <TIM_Base_SetConfig+0xf2>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a10      	ldr	r2, [pc, #64]	@ (800b2a8 <TIM_Base_SetConfig+0x130>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d103      	bne.n	800b272 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	691a      	ldr	r2, [r3, #16]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f043 0204 	orr.w	r2, r3, #4
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	601a      	str	r2, [r3, #0]
}
 800b28a:	bf00      	nop
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	40010000 	.word	0x40010000
 800b29c:	40000400 	.word	0x40000400
 800b2a0:	40000800 	.word	0x40000800
 800b2a4:	40000c00 	.word	0x40000c00
 800b2a8:	40010400 	.word	0x40010400
 800b2ac:	40014000 	.word	0x40014000
 800b2b0:	40014400 	.word	0x40014400
 800b2b4:	40014800 	.word	0x40014800
 800b2b8:	40001800 	.word	0x40001800
 800b2bc:	40001c00 	.word	0x40001c00
 800b2c0:	40002000 	.word	0x40002000

0800b2c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d101      	bne.n	800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e06d      	b.n	800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a30      	ldr	r2, [pc, #192]	@ (800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d004      	beq.n	800b310 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a2f      	ldr	r2, [pc, #188]	@ (800b3c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d108      	bne.n	800b322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b316:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b328:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a20      	ldr	r2, [pc, #128]	@ (800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d022      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b34e:	d01d      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a1d      	ldr	r2, [pc, #116]	@ (800b3cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d018      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a1c      	ldr	r2, [pc, #112]	@ (800b3d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d013      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a1a      	ldr	r2, [pc, #104]	@ (800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d00e      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a15      	ldr	r2, [pc, #84]	@ (800b3c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d009      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a16      	ldr	r2, [pc, #88]	@ (800b3d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d004      	beq.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a15      	ldr	r2, [pc, #84]	@ (800b3dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d10c      	bne.n	800b3a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b392:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	40010000 	.word	0x40010000
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40000400 	.word	0x40000400
 800b3d0:	40000800 	.word	0x40000800
 800b3d4:	40000c00 	.word	0x40000c00
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	40001800 	.word	0x40001800

0800b3e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	e040      	b.n	800b4b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f6 fb0c 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2224      	movs	r2, #36	@ 0x24
 800b448:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f022 0201 	bic.w	r2, r2, #1
 800b458:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f820 	bl	800c4a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fdb9 	bl	800bfe0 <UART_SetConfig>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e01b      	b.n	800b4b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689a      	ldr	r2, [r3, #8]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0201 	orr.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 f89f 	bl	800c5ec <UART_CheckIdleState>
 800b4ae:	4603      	mov	r3, r0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	@ 0x28
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d177      	bne.n	800b5c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <HAL_UART_Transmit+0x24>
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e070      	b.n	800b5c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2221      	movs	r2, #33	@ 0x21
 800b4ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4ee:	f7f7 f873 	bl	80025d8 <HAL_GetTick>
 800b4f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	88fa      	ldrh	r2, [r7, #6]
 800b4f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	88fa      	ldrh	r2, [r7, #6]
 800b500:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b50c:	d108      	bne.n	800b520 <HAL_UART_Transmit+0x68>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d104      	bne.n	800b520 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b516:	2300      	movs	r3, #0
 800b518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	e003      	b.n	800b528 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b528:	e02f      	b.n	800b58a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2200      	movs	r2, #0
 800b532:	2180      	movs	r1, #128	@ 0x80
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f001 f8b0 	bl	800c69a <UART_WaitOnFlagUntilTimeout>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2220      	movs	r2, #32
 800b544:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e03b      	b.n	800b5c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10b      	bne.n	800b568 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	461a      	mov	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b55e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	3302      	adds	r3, #2
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	e007      	b.n	800b578 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	781a      	ldrb	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	3301      	adds	r3, #1
 800b576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b57e:	b29b      	uxth	r3, r3
 800b580:	3b01      	subs	r3, #1
 800b582:	b29a      	uxth	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b590:	b29b      	uxth	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1c9      	bne.n	800b52a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2200      	movs	r2, #0
 800b59e:	2140      	movs	r1, #64	@ 0x40
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f001 f87a 	bl	800c69a <UART_WaitOnFlagUntilTimeout>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e005      	b.n	800b5c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e000      	b.n	800b5c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b5c0:	2302      	movs	r3, #2
  }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b08b      	sub	sp, #44	@ 0x2c
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d147      	bne.n	800b672 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <HAL_UART_Transmit_IT+0x22>
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e040      	b.n	800b674 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	88fa      	ldrh	r2, [r7, #6]
 800b5fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	88fa      	ldrh	r2, [r7, #6]
 800b604:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2221      	movs	r2, #33	@ 0x21
 800b61a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b624:	d107      	bne.n	800b636 <HAL_UART_Transmit_IT+0x6a>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4a13      	ldr	r2, [pc, #76]	@ (800b680 <HAL_UART_Transmit_IT+0xb4>)
 800b632:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b634:	e002      	b.n	800b63c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	4a12      	ldr	r2, [pc, #72]	@ (800b684 <HAL_UART_Transmit_IT+0xb8>)
 800b63a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	613b      	str	r3, [r7, #16]
   return(result);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b650:	627b      	str	r3, [r7, #36]	@ 0x24
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	623b      	str	r3, [r7, #32]
 800b65c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65e:	69f9      	ldr	r1, [r7, #28]
 800b660:	6a3a      	ldr	r2, [r7, #32]
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	61bb      	str	r3, [r7, #24]
   return(result);
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e6      	bne.n	800b63c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b66e:	2300      	movs	r3, #0
 800b670:	e000      	b.n	800b674 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b672:	2302      	movs	r3, #2
  }
}
 800b674:	4618      	mov	r0, r3
 800b676:	372c      	adds	r7, #44	@ 0x2c
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	0800cf2f 	.word	0x0800cf2f
 800b684:	0800ce79 	.word	0x0800ce79

0800b688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	@ 0x28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	4613      	mov	r3, r2
 800b694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	d132      	bne.n	800b706 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <HAL_UART_Receive_IT+0x24>
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e02b      	b.n	800b708 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d018      	beq.n	800b6f6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	623b      	str	r3, [r7, #32]
 800b6e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	69f9      	ldr	r1, [r7, #28]
 800b6e8:	6a3a      	ldr	r2, [r7, #32]
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e6      	bne.n	800b6c4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b6f6:	88fb      	ldrh	r3, [r7, #6]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f001 f839 	bl	800c774 <UART_Start_Receive_IT>
 800b702:	4603      	mov	r3, r0
 800b704:	e000      	b.n	800b708 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b706:	2302      	movs	r3, #2
  }
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3728      	adds	r7, #40	@ 0x28
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08a      	sub	sp, #40	@ 0x28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4613      	mov	r3, r2
 800b71c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b722:	2b20      	cmp	r3, #32
 800b724:	d165      	bne.n	800b7f2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <HAL_UART_Transmit_DMA+0x22>
 800b72c:	88fb      	ldrh	r3, [r7, #6]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e05e      	b.n	800b7f4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	88fa      	ldrh	r2, [r7, #6]
 800b740:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	88fa      	ldrh	r2, [r7, #6]
 800b748:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2221      	movs	r2, #33	@ 0x21
 800b758:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d027      	beq.n	800b7b2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b766:	4a25      	ldr	r2, [pc, #148]	@ (800b7fc <HAL_UART_Transmit_DMA+0xec>)
 800b768:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b76e:	4a24      	ldr	r2, [pc, #144]	@ (800b800 <HAL_UART_Transmit_DMA+0xf0>)
 800b770:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b776:	4a23      	ldr	r2, [pc, #140]	@ (800b804 <HAL_UART_Transmit_DMA+0xf4>)
 800b778:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b77e:	2200      	movs	r2, #0
 800b780:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b78a:	4619      	mov	r1, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3328      	adds	r3, #40	@ 0x28
 800b792:	461a      	mov	r2, r3
 800b794:	88fb      	ldrh	r3, [r7, #6]
 800b796:	f7f8 f9bf 	bl	8003b18 <HAL_DMA_Start_IT>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d008      	beq.n	800b7b2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2210      	movs	r2, #16
 800b7a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e020      	b.n	800b7f4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2240      	movs	r2, #64	@ 0x40
 800b7b8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3308      	adds	r3, #8
 800b7c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7da:	623a      	str	r2, [r7, #32]
 800b7dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	69f9      	ldr	r1, [r7, #28]
 800b7e0:	6a3a      	ldr	r2, [r7, #32]
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e5      	bne.n	800b7ba <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e000      	b.n	800b7f4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b7f2:	2302      	movs	r3, #2
  }
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3728      	adds	r7, #40	@ 0x28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	0800cb55 	.word	0x0800cb55
 800b800:	0800cbeb 	.word	0x0800cbeb
 800b804:	0800cdd7 	.word	0x0800cdd7

0800b808 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08a      	sub	sp, #40	@ 0x28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d132      	bne.n	800b886 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <HAL_UART_Receive_DMA+0x24>
 800b826:	88fb      	ldrh	r3, [r7, #6]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e02b      	b.n	800b888 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d018      	beq.n	800b876 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	613b      	str	r3, [r7, #16]
   return(result);
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b858:	627b      	str	r3, [r7, #36]	@ 0x24
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	623b      	str	r3, [r7, #32]
 800b864:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	69f9      	ldr	r1, [r7, #28]
 800b868:	6a3a      	ldr	r2, [r7, #32]
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e6      	bne.n	800b844 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	461a      	mov	r2, r3
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f001 f83f 	bl	800c900 <UART_Start_Receive_DMA>
 800b882:	4603      	mov	r3, r0
 800b884:	e000      	b.n	800b888 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b886:	2302      	movs	r3, #2
  }
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3728      	adds	r7, #40	@ 0x28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b090      	sub	sp, #64	@ 0x40
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8a4:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8b0:	2b80      	cmp	r3, #128	@ 0x80
 800b8b2:	d139      	bne.n	800b928 <HAL_UART_DMAStop+0x98>
 800b8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b6:	2b21      	cmp	r3, #33	@ 0x21
 800b8b8:	d136      	bne.n	800b928 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e5      	bne.n	800b8ba <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d015      	beq.n	800b922 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f8 f96c 	bl	8003bd8 <HAL_DMA_Abort>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00d      	beq.n	800b922 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f8 fb8e 	bl	800402c <HAL_DMA_GetError>
 800b910:	4603      	mov	r3, r0
 800b912:	2b20      	cmp	r3, #32
 800b914:	d105      	bne.n	800b922 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2210      	movs	r2, #16
 800b91a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e044      	b.n	800b9ac <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 f88c 	bl	800ca40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b932:	2b40      	cmp	r3, #64	@ 0x40
 800b934:	d139      	bne.n	800b9aa <HAL_UART_DMAStop+0x11a>
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	2b22      	cmp	r3, #34	@ 0x22
 800b93a:	d136      	bne.n	800b9aa <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3308      	adds	r3, #8
 800b942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b952:	633b      	str	r3, [r7, #48]	@ 0x30
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3308      	adds	r3, #8
 800b95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95c:	61ba      	str	r2, [r7, #24]
 800b95e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	6979      	ldr	r1, [r7, #20]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	613b      	str	r3, [r7, #16]
   return(result);
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e5      	bne.n	800b93c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b974:	2b00      	cmp	r3, #0
 800b976:	d015      	beq.n	800b9a4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f8 f92b 	bl	8003bd8 <HAL_DMA_Abort>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00d      	beq.n	800b9a4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f8 fb4d 	bl	800402c <HAL_DMA_GetError>
 800b992:	4603      	mov	r3, r0
 800b994:	2b20      	cmp	r3, #32
 800b996:	d105      	bne.n	800b9a4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2210      	movs	r2, #16
 800b99c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e003      	b.n	800b9ac <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 f871 	bl	800ca8c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3740      	adds	r7, #64	@ 0x40
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b0ba      	sub	sp, #232	@ 0xe8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	69db      	ldr	r3, [r3, #28]
 800b9c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b9de:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b9e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d115      	bne.n	800ba1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00f      	beq.n	800ba1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba00:	f003 0320 	and.w	r3, r3, #32
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 82b1 	beq.w	800bf74 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
      }
      return;
 800ba1a:	e2ab      	b.n	800bf74 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 8117 	beq.w	800bc54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ba26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ba32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba36:	4b85      	ldr	r3, [pc, #532]	@ (800bc4c <HAL_UART_IRQHandler+0x298>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f000 810a 	beq.w	800bc54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d011      	beq.n	800ba70 <HAL_UART_IRQHandler+0xbc>
 800ba4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba66:	f043 0201 	orr.w	r2, r3, #1
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba74:	f003 0302 	and.w	r3, r3, #2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d011      	beq.n	800baa0 <HAL_UART_IRQHandler+0xec>
 800ba7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00b      	beq.n	800baa0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba96:	f043 0204 	orr.w	r2, r3, #4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800baa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d011      	beq.n	800bad0 <HAL_UART_IRQHandler+0x11c>
 800baac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00b      	beq.n	800bad0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2204      	movs	r2, #4
 800babe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac6:	f043 0202 	orr.w	r2, r3, #2
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bad4:	f003 0308 	and.w	r3, r3, #8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d017      	beq.n	800bb0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800badc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bae0:	f003 0320 	and.w	r3, r3, #32
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2208      	movs	r2, #8
 800bafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb02:	f043 0208 	orr.w	r2, r3, #8
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d012      	beq.n	800bb3e <HAL_UART_IRQHandler+0x18a>
 800bb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb34:	f043 0220 	orr.w	r2, r3, #32
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 8217 	beq.w	800bf78 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00d      	beq.n	800bb72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d007      	beq.n	800bb72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb86:	2b40      	cmp	r3, #64	@ 0x40
 800bb88:	d005      	beq.n	800bb96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d04f      	beq.n	800bc36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 ff78 	bl	800ca8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba6:	2b40      	cmp	r3, #64	@ 0x40
 800bba8:	d141      	bne.n	800bc2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbb8:	e853 3f00 	ldrex	r3, [r3]
 800bbbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bbda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bbe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bbee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1d9      	bne.n	800bbaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d013      	beq.n	800bc26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc02:	4a13      	ldr	r2, [pc, #76]	@ (800bc50 <HAL_UART_IRQHandler+0x29c>)
 800bc04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f8 f854 	bl	8003cb8 <HAL_DMA_Abort_IT>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d017      	beq.n	800bc46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc24:	e00f      	b.n	800bc46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f9c4 	bl	800bfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	e00b      	b.n	800bc46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9c0 	bl	800bfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc34:	e007      	b.n	800bc46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f9bc 	bl	800bfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bc44:	e198      	b.n	800bf78 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc46:	bf00      	nop
    return;
 800bc48:	e196      	b.n	800bf78 <HAL_UART_IRQHandler+0x5c4>
 800bc4a:	bf00      	nop
 800bc4c:	04000120 	.word	0x04000120
 800bc50:	0800ce55 	.word	0x0800ce55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	f040 8166 	bne.w	800bf2a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc62:	f003 0310 	and.w	r3, r3, #16
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 815f 	beq.w	800bf2a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8158 	beq.w	800bf2a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2210      	movs	r2, #16
 800bc80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc8c:	2b40      	cmp	r3, #64	@ 0x40
 800bc8e:	f040 80d0 	bne.w	800be32 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 80ab 	beq.w	800bdfe <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bcae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	f080 80a3 	bcs.w	800bdfe <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bccc:	f000 8086 	beq.w	800bddc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bcfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1da      	bne.n	800bcd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd2c:	f023 0301 	bic.w	r3, r3, #1
 800bd30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3308      	adds	r3, #8
 800bd3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1e1      	bne.n	800bd1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3308      	adds	r3, #8
 800bd76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e3      	bne.n	800bd56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bdaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdac:	f023 0310 	bic.w	r3, r3, #16
 800bdb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bdbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bdc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bdcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e4      	bne.n	800bd9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f7 fefe 	bl	8003bd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f8e6 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bdfc:	e0be      	b.n	800bf7c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800be04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be08:	429a      	cmp	r2, r3
 800be0a:	f040 80b7 	bne.w	800bf7c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be18:	f040 80b0 	bne.w	800bf7c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2202      	movs	r2, #2
 800be20:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f8cc 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
      return;
 800be30:	e0a4      	b.n	800bf7c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be3e:	b29b      	uxth	r3, r3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 8096 	beq.w	800bf80 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800be54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8091 	beq.w	800bf80 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be66:	e853 3f00 	ldrex	r3, [r3]
 800be6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be80:	647b      	str	r3, [r7, #68]	@ 0x44
 800be82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3308      	adds	r3, #8
 800be9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	e853 3f00 	ldrex	r3, [r3]
 800bea2:	623b      	str	r3, [r7, #32]
   return(result);
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	f023 0301 	bic.w	r3, r3, #1
 800beaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3308      	adds	r3, #8
 800beb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800beb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800beba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e3      	bne.n	800be94 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2220      	movs	r2, #32
 800bed0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	e853 3f00 	ldrex	r3, [r3]
 800beec:	60fb      	str	r3, [r7, #12]
   return(result);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f023 0310 	bic.w	r3, r3, #16
 800bef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bf02:	61fb      	str	r3, [r7, #28]
 800bf04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf06:	69b9      	ldr	r1, [r7, #24]
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e4      	bne.n	800bee0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f850 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf28:	e02a      	b.n	800bf80 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00e      	beq.n	800bf54 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d008      	beq.n	800bf54 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d01c      	beq.n	800bf84 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
    }
    return;
 800bf52:	e017      	b.n	800bf84 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d012      	beq.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
 800bf60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00c      	beq.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 f83e 	bl	800cfee <UART_EndTransmit_IT>
    return;
 800bf72:	e008      	b.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bf74:	bf00      	nop
 800bf76:	e006      	b.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
    return;
 800bf78:	bf00      	nop
 800bf7a:	e004      	b.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bf7c:	bf00      	nop
 800bf7e:	e002      	b.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bf80:	bf00      	nop
 800bf82:	e000      	b.n	800bf86 <HAL_UART_IRQHandler+0x5d2>
    return;
 800bf84:	bf00      	nop
  }

}
 800bf86:	37e8      	adds	r7, #232	@ 0xe8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	431a      	orrs	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	4313      	orrs	r3, r2
 800c002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	4ba6      	ldr	r3, [pc, #664]	@ (800c2a4 <UART_SetConfig+0x2c4>)
 800c00c:	4013      	ands	r3, r2
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	6812      	ldr	r2, [r2, #0]
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	430b      	orrs	r3, r1
 800c016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	430a      	orrs	r2, r1
 800c050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a94      	ldr	r2, [pc, #592]	@ (800c2a8 <UART_SetConfig+0x2c8>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d120      	bne.n	800c09e <UART_SetConfig+0xbe>
 800c05c:	4b93      	ldr	r3, [pc, #588]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	2b03      	cmp	r3, #3
 800c068:	d816      	bhi.n	800c098 <UART_SetConfig+0xb8>
 800c06a:	a201      	add	r2, pc, #4	@ (adr r2, 800c070 <UART_SetConfig+0x90>)
 800c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c070:	0800c081 	.word	0x0800c081
 800c074:	0800c08d 	.word	0x0800c08d
 800c078:	0800c087 	.word	0x0800c087
 800c07c:	0800c093 	.word	0x0800c093
 800c080:	2301      	movs	r3, #1
 800c082:	77fb      	strb	r3, [r7, #31]
 800c084:	e150      	b.n	800c328 <UART_SetConfig+0x348>
 800c086:	2302      	movs	r3, #2
 800c088:	77fb      	strb	r3, [r7, #31]
 800c08a:	e14d      	b.n	800c328 <UART_SetConfig+0x348>
 800c08c:	2304      	movs	r3, #4
 800c08e:	77fb      	strb	r3, [r7, #31]
 800c090:	e14a      	b.n	800c328 <UART_SetConfig+0x348>
 800c092:	2308      	movs	r3, #8
 800c094:	77fb      	strb	r3, [r7, #31]
 800c096:	e147      	b.n	800c328 <UART_SetConfig+0x348>
 800c098:	2310      	movs	r3, #16
 800c09a:	77fb      	strb	r3, [r7, #31]
 800c09c:	e144      	b.n	800c328 <UART_SetConfig+0x348>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a83      	ldr	r2, [pc, #524]	@ (800c2b0 <UART_SetConfig+0x2d0>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d132      	bne.n	800c10e <UART_SetConfig+0x12e>
 800c0a8:	4b80      	ldr	r3, [pc, #512]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ae:	f003 030c 	and.w	r3, r3, #12
 800c0b2:	2b0c      	cmp	r3, #12
 800c0b4:	d828      	bhi.n	800c108 <UART_SetConfig+0x128>
 800c0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0bc <UART_SetConfig+0xdc>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c0f1 	.word	0x0800c0f1
 800c0c0:	0800c109 	.word	0x0800c109
 800c0c4:	0800c109 	.word	0x0800c109
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c0fd 	.word	0x0800c0fd
 800c0d0:	0800c109 	.word	0x0800c109
 800c0d4:	0800c109 	.word	0x0800c109
 800c0d8:	0800c109 	.word	0x0800c109
 800c0dc:	0800c0f7 	.word	0x0800c0f7
 800c0e0:	0800c109 	.word	0x0800c109
 800c0e4:	0800c109 	.word	0x0800c109
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c103 	.word	0x0800c103
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	77fb      	strb	r3, [r7, #31]
 800c0f4:	e118      	b.n	800c328 <UART_SetConfig+0x348>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	77fb      	strb	r3, [r7, #31]
 800c0fa:	e115      	b.n	800c328 <UART_SetConfig+0x348>
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	77fb      	strb	r3, [r7, #31]
 800c100:	e112      	b.n	800c328 <UART_SetConfig+0x348>
 800c102:	2308      	movs	r3, #8
 800c104:	77fb      	strb	r3, [r7, #31]
 800c106:	e10f      	b.n	800c328 <UART_SetConfig+0x348>
 800c108:	2310      	movs	r3, #16
 800c10a:	77fb      	strb	r3, [r7, #31]
 800c10c:	e10c      	b.n	800c328 <UART_SetConfig+0x348>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a68      	ldr	r2, [pc, #416]	@ (800c2b4 <UART_SetConfig+0x2d4>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d120      	bne.n	800c15a <UART_SetConfig+0x17a>
 800c118:	4b64      	ldr	r3, [pc, #400]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c122:	2b30      	cmp	r3, #48	@ 0x30
 800c124:	d013      	beq.n	800c14e <UART_SetConfig+0x16e>
 800c126:	2b30      	cmp	r3, #48	@ 0x30
 800c128:	d814      	bhi.n	800c154 <UART_SetConfig+0x174>
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	d009      	beq.n	800c142 <UART_SetConfig+0x162>
 800c12e:	2b20      	cmp	r3, #32
 800c130:	d810      	bhi.n	800c154 <UART_SetConfig+0x174>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <UART_SetConfig+0x15c>
 800c136:	2b10      	cmp	r3, #16
 800c138:	d006      	beq.n	800c148 <UART_SetConfig+0x168>
 800c13a:	e00b      	b.n	800c154 <UART_SetConfig+0x174>
 800c13c:	2300      	movs	r3, #0
 800c13e:	77fb      	strb	r3, [r7, #31]
 800c140:	e0f2      	b.n	800c328 <UART_SetConfig+0x348>
 800c142:	2302      	movs	r3, #2
 800c144:	77fb      	strb	r3, [r7, #31]
 800c146:	e0ef      	b.n	800c328 <UART_SetConfig+0x348>
 800c148:	2304      	movs	r3, #4
 800c14a:	77fb      	strb	r3, [r7, #31]
 800c14c:	e0ec      	b.n	800c328 <UART_SetConfig+0x348>
 800c14e:	2308      	movs	r3, #8
 800c150:	77fb      	strb	r3, [r7, #31]
 800c152:	e0e9      	b.n	800c328 <UART_SetConfig+0x348>
 800c154:	2310      	movs	r3, #16
 800c156:	77fb      	strb	r3, [r7, #31]
 800c158:	e0e6      	b.n	800c328 <UART_SetConfig+0x348>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a56      	ldr	r2, [pc, #344]	@ (800c2b8 <UART_SetConfig+0x2d8>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d120      	bne.n	800c1a6 <UART_SetConfig+0x1c6>
 800c164:	4b51      	ldr	r3, [pc, #324]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c16a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c16e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c170:	d013      	beq.n	800c19a <UART_SetConfig+0x1ba>
 800c172:	2bc0      	cmp	r3, #192	@ 0xc0
 800c174:	d814      	bhi.n	800c1a0 <UART_SetConfig+0x1c0>
 800c176:	2b80      	cmp	r3, #128	@ 0x80
 800c178:	d009      	beq.n	800c18e <UART_SetConfig+0x1ae>
 800c17a:	2b80      	cmp	r3, #128	@ 0x80
 800c17c:	d810      	bhi.n	800c1a0 <UART_SetConfig+0x1c0>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <UART_SetConfig+0x1a8>
 800c182:	2b40      	cmp	r3, #64	@ 0x40
 800c184:	d006      	beq.n	800c194 <UART_SetConfig+0x1b4>
 800c186:	e00b      	b.n	800c1a0 <UART_SetConfig+0x1c0>
 800c188:	2300      	movs	r3, #0
 800c18a:	77fb      	strb	r3, [r7, #31]
 800c18c:	e0cc      	b.n	800c328 <UART_SetConfig+0x348>
 800c18e:	2302      	movs	r3, #2
 800c190:	77fb      	strb	r3, [r7, #31]
 800c192:	e0c9      	b.n	800c328 <UART_SetConfig+0x348>
 800c194:	2304      	movs	r3, #4
 800c196:	77fb      	strb	r3, [r7, #31]
 800c198:	e0c6      	b.n	800c328 <UART_SetConfig+0x348>
 800c19a:	2308      	movs	r3, #8
 800c19c:	77fb      	strb	r3, [r7, #31]
 800c19e:	e0c3      	b.n	800c328 <UART_SetConfig+0x348>
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	77fb      	strb	r3, [r7, #31]
 800c1a4:	e0c0      	b.n	800c328 <UART_SetConfig+0x348>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a44      	ldr	r2, [pc, #272]	@ (800c2bc <UART_SetConfig+0x2dc>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d125      	bne.n	800c1fc <UART_SetConfig+0x21c>
 800c1b0:	4b3e      	ldr	r3, [pc, #248]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1be:	d017      	beq.n	800c1f0 <UART_SetConfig+0x210>
 800c1c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1c4:	d817      	bhi.n	800c1f6 <UART_SetConfig+0x216>
 800c1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1ca:	d00b      	beq.n	800c1e4 <UART_SetConfig+0x204>
 800c1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1d0:	d811      	bhi.n	800c1f6 <UART_SetConfig+0x216>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <UART_SetConfig+0x1fe>
 800c1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1da:	d006      	beq.n	800c1ea <UART_SetConfig+0x20a>
 800c1dc:	e00b      	b.n	800c1f6 <UART_SetConfig+0x216>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	77fb      	strb	r3, [r7, #31]
 800c1e2:	e0a1      	b.n	800c328 <UART_SetConfig+0x348>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	77fb      	strb	r3, [r7, #31]
 800c1e8:	e09e      	b.n	800c328 <UART_SetConfig+0x348>
 800c1ea:	2304      	movs	r3, #4
 800c1ec:	77fb      	strb	r3, [r7, #31]
 800c1ee:	e09b      	b.n	800c328 <UART_SetConfig+0x348>
 800c1f0:	2308      	movs	r3, #8
 800c1f2:	77fb      	strb	r3, [r7, #31]
 800c1f4:	e098      	b.n	800c328 <UART_SetConfig+0x348>
 800c1f6:	2310      	movs	r3, #16
 800c1f8:	77fb      	strb	r3, [r7, #31]
 800c1fa:	e095      	b.n	800c328 <UART_SetConfig+0x348>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a2f      	ldr	r2, [pc, #188]	@ (800c2c0 <UART_SetConfig+0x2e0>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d125      	bne.n	800c252 <UART_SetConfig+0x272>
 800c206:	4b29      	ldr	r3, [pc, #164]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c20c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c214:	d017      	beq.n	800c246 <UART_SetConfig+0x266>
 800c216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c21a:	d817      	bhi.n	800c24c <UART_SetConfig+0x26c>
 800c21c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c220:	d00b      	beq.n	800c23a <UART_SetConfig+0x25a>
 800c222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c226:	d811      	bhi.n	800c24c <UART_SetConfig+0x26c>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <UART_SetConfig+0x254>
 800c22c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c230:	d006      	beq.n	800c240 <UART_SetConfig+0x260>
 800c232:	e00b      	b.n	800c24c <UART_SetConfig+0x26c>
 800c234:	2301      	movs	r3, #1
 800c236:	77fb      	strb	r3, [r7, #31]
 800c238:	e076      	b.n	800c328 <UART_SetConfig+0x348>
 800c23a:	2302      	movs	r3, #2
 800c23c:	77fb      	strb	r3, [r7, #31]
 800c23e:	e073      	b.n	800c328 <UART_SetConfig+0x348>
 800c240:	2304      	movs	r3, #4
 800c242:	77fb      	strb	r3, [r7, #31]
 800c244:	e070      	b.n	800c328 <UART_SetConfig+0x348>
 800c246:	2308      	movs	r3, #8
 800c248:	77fb      	strb	r3, [r7, #31]
 800c24a:	e06d      	b.n	800c328 <UART_SetConfig+0x348>
 800c24c:	2310      	movs	r3, #16
 800c24e:	77fb      	strb	r3, [r7, #31]
 800c250:	e06a      	b.n	800c328 <UART_SetConfig+0x348>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a1b      	ldr	r2, [pc, #108]	@ (800c2c4 <UART_SetConfig+0x2e4>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d138      	bne.n	800c2ce <UART_SetConfig+0x2ee>
 800c25c:	4b13      	ldr	r3, [pc, #76]	@ (800c2ac <UART_SetConfig+0x2cc>)
 800c25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c262:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c266:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c26a:	d017      	beq.n	800c29c <UART_SetConfig+0x2bc>
 800c26c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c270:	d82a      	bhi.n	800c2c8 <UART_SetConfig+0x2e8>
 800c272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c276:	d00b      	beq.n	800c290 <UART_SetConfig+0x2b0>
 800c278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c27c:	d824      	bhi.n	800c2c8 <UART_SetConfig+0x2e8>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <UART_SetConfig+0x2aa>
 800c282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c286:	d006      	beq.n	800c296 <UART_SetConfig+0x2b6>
 800c288:	e01e      	b.n	800c2c8 <UART_SetConfig+0x2e8>
 800c28a:	2300      	movs	r3, #0
 800c28c:	77fb      	strb	r3, [r7, #31]
 800c28e:	e04b      	b.n	800c328 <UART_SetConfig+0x348>
 800c290:	2302      	movs	r3, #2
 800c292:	77fb      	strb	r3, [r7, #31]
 800c294:	e048      	b.n	800c328 <UART_SetConfig+0x348>
 800c296:	2304      	movs	r3, #4
 800c298:	77fb      	strb	r3, [r7, #31]
 800c29a:	e045      	b.n	800c328 <UART_SetConfig+0x348>
 800c29c:	2308      	movs	r3, #8
 800c29e:	77fb      	strb	r3, [r7, #31]
 800c2a0:	e042      	b.n	800c328 <UART_SetConfig+0x348>
 800c2a2:	bf00      	nop
 800c2a4:	efff69f3 	.word	0xefff69f3
 800c2a8:	40011000 	.word	0x40011000
 800c2ac:	40023800 	.word	0x40023800
 800c2b0:	40004400 	.word	0x40004400
 800c2b4:	40004800 	.word	0x40004800
 800c2b8:	40004c00 	.word	0x40004c00
 800c2bc:	40005000 	.word	0x40005000
 800c2c0:	40011400 	.word	0x40011400
 800c2c4:	40007800 	.word	0x40007800
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	77fb      	strb	r3, [r7, #31]
 800c2cc:	e02c      	b.n	800c328 <UART_SetConfig+0x348>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a72      	ldr	r2, [pc, #456]	@ (800c49c <UART_SetConfig+0x4bc>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d125      	bne.n	800c324 <UART_SetConfig+0x344>
 800c2d8:	4b71      	ldr	r3, [pc, #452]	@ (800c4a0 <UART_SetConfig+0x4c0>)
 800c2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c2e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c2e6:	d017      	beq.n	800c318 <UART_SetConfig+0x338>
 800c2e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c2ec:	d817      	bhi.n	800c31e <UART_SetConfig+0x33e>
 800c2ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2f2:	d00b      	beq.n	800c30c <UART_SetConfig+0x32c>
 800c2f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2f8:	d811      	bhi.n	800c31e <UART_SetConfig+0x33e>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <UART_SetConfig+0x326>
 800c2fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c302:	d006      	beq.n	800c312 <UART_SetConfig+0x332>
 800c304:	e00b      	b.n	800c31e <UART_SetConfig+0x33e>
 800c306:	2300      	movs	r3, #0
 800c308:	77fb      	strb	r3, [r7, #31]
 800c30a:	e00d      	b.n	800c328 <UART_SetConfig+0x348>
 800c30c:	2302      	movs	r3, #2
 800c30e:	77fb      	strb	r3, [r7, #31]
 800c310:	e00a      	b.n	800c328 <UART_SetConfig+0x348>
 800c312:	2304      	movs	r3, #4
 800c314:	77fb      	strb	r3, [r7, #31]
 800c316:	e007      	b.n	800c328 <UART_SetConfig+0x348>
 800c318:	2308      	movs	r3, #8
 800c31a:	77fb      	strb	r3, [r7, #31]
 800c31c:	e004      	b.n	800c328 <UART_SetConfig+0x348>
 800c31e:	2310      	movs	r3, #16
 800c320:	77fb      	strb	r3, [r7, #31]
 800c322:	e001      	b.n	800c328 <UART_SetConfig+0x348>
 800c324:	2310      	movs	r3, #16
 800c326:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c330:	d15b      	bne.n	800c3ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c332:	7ffb      	ldrb	r3, [r7, #31]
 800c334:	2b08      	cmp	r3, #8
 800c336:	d828      	bhi.n	800c38a <UART_SetConfig+0x3aa>
 800c338:	a201      	add	r2, pc, #4	@ (adr r2, 800c340 <UART_SetConfig+0x360>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c365 	.word	0x0800c365
 800c344:	0800c36d 	.word	0x0800c36d
 800c348:	0800c375 	.word	0x0800c375
 800c34c:	0800c38b 	.word	0x0800c38b
 800c350:	0800c37b 	.word	0x0800c37b
 800c354:	0800c38b 	.word	0x0800c38b
 800c358:	0800c38b 	.word	0x0800c38b
 800c35c:	0800c38b 	.word	0x0800c38b
 800c360:	0800c383 	.word	0x0800c383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c364:	f7fc fbd2 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 800c368:	61b8      	str	r0, [r7, #24]
        break;
 800c36a:	e013      	b.n	800c394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c36c:	f7fc fbe2 	bl	8008b34 <HAL_RCC_GetPCLK2Freq>
 800c370:	61b8      	str	r0, [r7, #24]
        break;
 800c372:	e00f      	b.n	800c394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c374:	4b4b      	ldr	r3, [pc, #300]	@ (800c4a4 <UART_SetConfig+0x4c4>)
 800c376:	61bb      	str	r3, [r7, #24]
        break;
 800c378:	e00c      	b.n	800c394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c37a:	f7fc fab5 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800c37e:	61b8      	str	r0, [r7, #24]
        break;
 800c380:	e008      	b.n	800c394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c386:	61bb      	str	r3, [r7, #24]
        break;
 800c388:	e004      	b.n	800c394 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	77bb      	strb	r3, [r7, #30]
        break;
 800c392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d074      	beq.n	800c484 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	005a      	lsls	r2, r3, #1
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2b0f      	cmp	r3, #15
 800c3b4:	d916      	bls.n	800c3e4 <UART_SetConfig+0x404>
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3bc:	d212      	bcs.n	800c3e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	f023 030f 	bic.w	r3, r3, #15
 800c3c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	085b      	lsrs	r3, r3, #1
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	89fb      	ldrh	r3, [r7, #14]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	89fa      	ldrh	r2, [r7, #14]
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	e04f      	b.n	800c484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	77bb      	strb	r3, [r7, #30]
 800c3e8:	e04c      	b.n	800c484 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3ea:	7ffb      	ldrb	r3, [r7, #31]
 800c3ec:	2b08      	cmp	r3, #8
 800c3ee:	d828      	bhi.n	800c442 <UART_SetConfig+0x462>
 800c3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <UART_SetConfig+0x418>)
 800c3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f6:	bf00      	nop
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c425 	.word	0x0800c425
 800c400:	0800c42d 	.word	0x0800c42d
 800c404:	0800c443 	.word	0x0800c443
 800c408:	0800c433 	.word	0x0800c433
 800c40c:	0800c443 	.word	0x0800c443
 800c410:	0800c443 	.word	0x0800c443
 800c414:	0800c443 	.word	0x0800c443
 800c418:	0800c43b 	.word	0x0800c43b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c41c:	f7fc fb76 	bl	8008b0c <HAL_RCC_GetPCLK1Freq>
 800c420:	61b8      	str	r0, [r7, #24]
        break;
 800c422:	e013      	b.n	800c44c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c424:	f7fc fb86 	bl	8008b34 <HAL_RCC_GetPCLK2Freq>
 800c428:	61b8      	str	r0, [r7, #24]
        break;
 800c42a:	e00f      	b.n	800c44c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c42c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a4 <UART_SetConfig+0x4c4>)
 800c42e:	61bb      	str	r3, [r7, #24]
        break;
 800c430:	e00c      	b.n	800c44c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c432:	f7fc fa59 	bl	80088e8 <HAL_RCC_GetSysClockFreq>
 800c436:	61b8      	str	r0, [r7, #24]
        break;
 800c438:	e008      	b.n	800c44c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c43a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c43e:	61bb      	str	r3, [r7, #24]
        break;
 800c440:	e004      	b.n	800c44c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	77bb      	strb	r3, [r7, #30]
        break;
 800c44a:	bf00      	nop
    }

    if (pclk != 0U)
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d018      	beq.n	800c484 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	085a      	lsrs	r2, r3, #1
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	441a      	add	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	fbb2 f3f3 	udiv	r3, r2, r3
 800c464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b0f      	cmp	r3, #15
 800c46a:	d909      	bls.n	800c480 <UART_SetConfig+0x4a0>
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c472:	d205      	bcs.n	800c480 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60da      	str	r2, [r3, #12]
 800c47e:	e001      	b.n	800c484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c490:	7fbb      	ldrb	r3, [r7, #30]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3720      	adds	r7, #32
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	40007c00 	.word	0x40007c00
 800c4a0:	40023800 	.word	0x40023800
 800c4a4:	00f42400 	.word	0x00f42400

0800c4a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00a      	beq.n	800c4d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00a      	beq.n	800c4f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f8:	f003 0302 	and.w	r3, r3, #2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00a      	beq.n	800c516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	430a      	orrs	r2, r1
 800c514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00a      	beq.n	800c538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	430a      	orrs	r2, r1
 800c536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c53c:	f003 0310 	and.w	r3, r3, #16
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00a      	beq.n	800c55a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00a      	beq.n	800c57c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	430a      	orrs	r2, r1
 800c57a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01a      	beq.n	800c5be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	430a      	orrs	r2, r1
 800c59c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5a6:	d10a      	bne.n	800c5be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	430a      	orrs	r2, r1
 800c5bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00a      	beq.n	800c5e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	605a      	str	r2, [r3, #4]
  }
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b08c      	sub	sp, #48	@ 0x30
 800c5f0:	af02      	add	r7, sp, #8
 800c5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5fc:	f7f5 ffec 	bl	80025d8 <HAL_GetTick>
 800c600:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0308 	and.w	r3, r3, #8
 800c60c:	2b08      	cmp	r3, #8
 800c60e:	d12e      	bne.n	800c66e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	2200      	movs	r2, #0
 800c61a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f83b 	bl	800c69a <UART_WaitOnFlagUntilTimeout>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d021      	beq.n	800c66e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	e853 3f00 	ldrex	r3, [r3]
 800c636:	60fb      	str	r3, [r7, #12]
   return(result);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c63e:	623b      	str	r3, [r7, #32]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	461a      	mov	r2, r3
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64c:	69b9      	ldr	r1, [r7, #24]
 800c64e:	69fa      	ldr	r2, [r7, #28]
 800c650:	e841 2300 	strex	r3, r2, [r1]
 800c654:	617b      	str	r3, [r7, #20]
   return(result);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1e6      	bne.n	800c62a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2220      	movs	r2, #32
 800c660:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e011      	b.n	800c692 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2220      	movs	r2, #32
 800c678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3728      	adds	r7, #40	@ 0x28
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	603b      	str	r3, [r7, #0]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6aa:	e04f      	b.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d04b      	beq.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6b4:	f7f5 ff90 	bl	80025d8 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d302      	bcc.n	800c6ca <UART_WaitOnFlagUntilTimeout+0x30>
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e04e      	b.n	800c76c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d037      	beq.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2b80      	cmp	r3, #128	@ 0x80
 800c6e0:	d034      	beq.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b40      	cmp	r3, #64	@ 0x40
 800c6e6:	d031      	beq.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	f003 0308 	and.w	r3, r3, #8
 800c6f2:	2b08      	cmp	r3, #8
 800c6f4:	d110      	bne.n	800c718 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2208      	movs	r2, #8
 800c6fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 f9c4 	bl	800ca8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2208      	movs	r2, #8
 800c708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	e029      	b.n	800c76c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c726:	d111      	bne.n	800c74c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 f9aa 	bl	800ca8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2220      	movs	r2, #32
 800c73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e00f      	b.n	800c76c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	69da      	ldr	r2, [r3, #28]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4013      	ands	r3, r2
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	429a      	cmp	r2, r3
 800c75a:	bf0c      	ite	eq
 800c75c:	2301      	moveq	r3, #1
 800c75e:	2300      	movne	r3, #0
 800c760:	b2db      	uxtb	r3, r3
 800c762:	461a      	mov	r2, r3
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	429a      	cmp	r2, r3
 800c768:	d0a0      	beq.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c774:	b480      	push	{r7}
 800c776:	b097      	sub	sp, #92	@ 0x5c
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	88fa      	ldrh	r2, [r7, #6]
 800c78c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	88fa      	ldrh	r2, [r7, #6]
 800c794:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7a6:	d10e      	bne.n	800c7c6 <UART_Start_Receive_IT+0x52>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d105      	bne.n	800c7bc <UART_Start_Receive_IT+0x48>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c7b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c7ba:	e02d      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	22ff      	movs	r2, #255	@ 0xff
 800c7c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c7c4:	e028      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10d      	bne.n	800c7ea <UART_Start_Receive_IT+0x76>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <UART_Start_Receive_IT+0x6c>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	22ff      	movs	r2, #255	@ 0xff
 800c7da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c7de:	e01b      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	227f      	movs	r2, #127	@ 0x7f
 800c7e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c7e8:	e016      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7f2:	d10d      	bne.n	800c810 <UART_Start_Receive_IT+0x9c>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <UART_Start_Receive_IT+0x92>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	227f      	movs	r2, #127	@ 0x7f
 800c800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c804:	e008      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	223f      	movs	r2, #63	@ 0x3f
 800c80a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c80e:	e003      	b.n	800c818 <UART_Start_Receive_IT+0xa4>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2222      	movs	r2, #34	@ 0x22
 800c824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3308      	adds	r3, #8
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c832:	e853 3f00 	ldrex	r3, [r3]
 800c836:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83a:	f043 0301 	orr.w	r3, r3, #1
 800c83e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3308      	adds	r3, #8
 800c846:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c848:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c84a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c84e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e5      	bne.n	800c828 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c864:	d107      	bne.n	800c876 <UART_Start_Receive_IT+0x102>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d103      	bne.n	800c876 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	4a21      	ldr	r2, [pc, #132]	@ (800c8f8 <UART_Start_Receive_IT+0x184>)
 800c872:	669a      	str	r2, [r3, #104]	@ 0x68
 800c874:	e002      	b.n	800c87c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4a20      	ldr	r2, [pc, #128]	@ (800c8fc <UART_Start_Receive_IT+0x188>)
 800c87a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d019      	beq.n	800c8b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	e853 3f00 	ldrex	r3, [r3]
 800c890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c8a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e6      	bne.n	800c884 <UART_Start_Receive_IT+0x110>
 800c8b6:	e018      	b.n	800c8ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	f043 0320 	orr.w	r3, r3, #32
 800c8cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8d6:	623b      	str	r3, [r7, #32]
 800c8d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	69f9      	ldr	r1, [r7, #28]
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	375c      	adds	r7, #92	@ 0x5c
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	0800d1eb 	.word	0x0800d1eb
 800c8fc:	0800d043 	.word	0x0800d043

0800c900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b096      	sub	sp, #88	@ 0x58
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4613      	mov	r3, r2
 800c90c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	88fa      	ldrh	r2, [r7, #6]
 800c918:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2222      	movs	r2, #34	@ 0x22
 800c928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c930:	2b00      	cmp	r3, #0
 800c932:	d028      	beq.n	800c986 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c938:	4a3e      	ldr	r2, [pc, #248]	@ (800ca34 <UART_Start_Receive_DMA+0x134>)
 800c93a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c940:	4a3d      	ldr	r2, [pc, #244]	@ (800ca38 <UART_Start_Receive_DMA+0x138>)
 800c942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c948:	4a3c      	ldr	r2, [pc, #240]	@ (800ca3c <UART_Start_Receive_DMA+0x13c>)
 800c94a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c950:	2200      	movs	r2, #0
 800c952:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3324      	adds	r3, #36	@ 0x24
 800c95e:	4619      	mov	r1, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c964:	461a      	mov	r2, r3
 800c966:	88fb      	ldrh	r3, [r7, #6]
 800c968:	f7f7 f8d6 	bl	8003b18 <HAL_DMA_Start_IT>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d009      	beq.n	800c986 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2210      	movs	r2, #16
 800c976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e051      	b.n	800ca2a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d018      	beq.n	800c9c0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c996:	e853 3f00 	ldrex	r3, [r3]
 800c99a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c9b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9b4:	e841 2300 	strex	r3, r2, [r1]
 800c9b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e6      	bne.n	800c98e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ca:	e853 3f00 	ldrex	r3, [r3]
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c9e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800c9e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c9e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e5      	bne.n	800c9c0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	613b      	str	r3, [r7, #16]
   return(result);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca14:	623a      	str	r2, [r7, #32]
 800ca16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	69f9      	ldr	r1, [r7, #28]
 800ca1a:	6a3a      	ldr	r2, [r7, #32]
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e5      	bne.n	800c9f4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3758      	adds	r7, #88	@ 0x58
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	0800cc07 	.word	0x0800cc07
 800ca38:	0800cd65 	.word	0x0800cd65
 800ca3c:	0800cdd7 	.word	0x0800cdd7

0800ca40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b089      	sub	sp, #36	@ 0x24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	e853 3f00 	ldrex	r3, [r3]
 800ca54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	61bb      	str	r3, [r7, #24]
 800ca68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6979      	ldr	r1, [r7, #20]
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	613b      	str	r3, [r7, #16]
   return(result);
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e6      	bne.n	800ca48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ca80:	bf00      	nop
 800ca82:	3724      	adds	r7, #36	@ 0x24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b095      	sub	sp, #84	@ 0x54
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800caa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800caa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	461a      	mov	r2, r3
 800cab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e6      	bne.n	800ca94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3308      	adds	r3, #8
 800cacc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f023 0301 	bic.w	r3, r3, #1
 800cadc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3308      	adds	r3, #8
 800cae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e5      	bne.n	800cac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d118      	bne.n	800cb34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f023 0310 	bic.w	r3, r3, #16
 800cb16:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6979      	ldr	r1, [r7, #20]
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e6      	bne.n	800cb02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cb48:	bf00      	nop
 800cb4a:	3754      	adds	r7, #84	@ 0x54
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b090      	sub	sp, #64	@ 0x40
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb6a:	d037      	beq.n	800cbdc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3308      	adds	r3, #8
 800cb7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	623b      	str	r3, [r7, #32]
   return(result);
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3308      	adds	r3, #8
 800cb92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb94:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb9c:	e841 2300 	strex	r3, r2, [r1]
 800cba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e5      	bne.n	800cb74 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	e853 3f00 	ldrex	r3, [r3]
 800cbb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbc6:	61fb      	str	r3, [r7, #28]
 800cbc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbca:	69b9      	ldr	r1, [r7, #24]
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	e841 2300 	strex	r3, r2, [r1]
 800cbd2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1e6      	bne.n	800cba8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbda:	e002      	b.n	800cbe2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cbdc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cbde:	f011 f857 	bl	801dc90 <HAL_UART_TxCpltCallback>
}
 800cbe2:	bf00      	nop
 800cbe4:	3740      	adds	r7, #64	@ 0x40
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f7ff f9c7 	bl	800bf8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbfe:	bf00      	nop
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b09c      	sub	sp, #112	@ 0x70
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc1c:	d071      	beq.n	800cd02 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cc1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc20:	2200      	movs	r2, #0
 800cc22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc2e:	e853 3f00 	ldrex	r3, [r3]
 800cc32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cc34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc44:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc46:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc4c:	e841 2300 	strex	r3, r2, [r1]
 800cc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1e6      	bne.n	800cc26 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3308      	adds	r3, #8
 800cc5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6a:	f023 0301 	bic.w	r3, r3, #1
 800cc6e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3308      	adds	r3, #8
 800cc76:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cc78:	643a      	str	r2, [r7, #64]	@ 0x40
 800cc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e5      	bne.n	800cc58 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cca2:	663b      	str	r3, [r7, #96]	@ 0x60
 800cca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ccac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb4:	e841 2300 	strex	r3, r2, [r1]
 800ccb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e5      	bne.n	800cc8c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d118      	bne.n	800cd02 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f023 0310 	bic.w	r3, r3, #16
 800cce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccee:	61bb      	str	r3, [r7, #24]
 800ccf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6979      	ldr	r1, [r7, #20]
 800ccf4:	69ba      	ldr	r2, [r7, #24]
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	613b      	str	r3, [r7, #16]
   return(result);
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e6      	bne.n	800ccd0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd04:	2200      	movs	r2, #0
 800cd06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d122      	bne.n	800cd56 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800cd10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800cd22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd28:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d204      	bcs.n	800cd3a <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cd30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd32:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cd36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cd40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd50:	f7ff f93a 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd54:	e002      	b.n	800cd5c <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800cd56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd58:	f010 ffba 	bl	801dcd0 <HAL_UART_RxCpltCallback>
}
 800cd5c:	bf00      	nop
 800cd5e:	3770      	adds	r7, #112	@ 0x70
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2201      	movs	r2, #1
 800cd76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d123      	bne.n	800cdc8 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd86:	085b      	lsrs	r3, r3, #1
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd9e:	897a      	ldrh	r2, [r7, #10]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d803      	bhi.n	800cdac <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	897a      	ldrh	r2, [r7, #10]
 800cda8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff f901 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdc6:	e002      	b.n	800cdce <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7ff f8e9 	bl	800bfa0 <HAL_UART_RxHalfCpltCallback>
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b086      	sub	sp, #24
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cde8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdf0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdfc:	2b80      	cmp	r3, #128	@ 0x80
 800cdfe:	d109      	bne.n	800ce14 <UART_DMAError+0x3e>
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	2b21      	cmp	r3, #33	@ 0x21
 800ce04:	d106      	bne.n	800ce14 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800ce0e:	6978      	ldr	r0, [r7, #20]
 800ce10:	f7ff fe16 	bl	800ca40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce1e:	2b40      	cmp	r3, #64	@ 0x40
 800ce20:	d109      	bne.n	800ce36 <UART_DMAError+0x60>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b22      	cmp	r3, #34	@ 0x22
 800ce26:	d106      	bne.n	800ce36 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800ce30:	6978      	ldr	r0, [r7, #20]
 800ce32:	f7ff fe2b 	bl	800ca8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce3c:	f043 0210 	orr.w	r2, r3, #16
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce46:	6978      	ldr	r0, [r7, #20]
 800ce48:	f7ff f8b4 	bl	800bfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7ff f8a2 	bl	800bfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b08f      	sub	sp, #60	@ 0x3c
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce84:	2b21      	cmp	r3, #33	@ 0x21
 800ce86:	d14c      	bne.n	800cf22 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d132      	bne.n	800cefa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	e853 3f00 	ldrex	r3, [r3]
 800cea0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceb4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceba:	e841 2300 	strex	r3, r2, [r1]
 800cebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e6      	bne.n	800ce94 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	e853 3f00 	ldrex	r3, [r3]
 800ced2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceda:	633b      	str	r3, [r7, #48]	@ 0x30
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	461a      	mov	r2, r3
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	61bb      	str	r3, [r7, #24]
 800cee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee8:	6979      	ldr	r1, [r7, #20]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	e841 2300 	strex	r3, r2, [r1]
 800cef0:	613b      	str	r3, [r7, #16]
   return(result);
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e6      	bne.n	800cec6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cef8:	e013      	b.n	800cf22 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cefe:	781a      	ldrb	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800cf22:	bf00      	nop
 800cf24:	373c      	adds	r7, #60	@ 0x3c
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b091      	sub	sp, #68	@ 0x44
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf3a:	2b21      	cmp	r3, #33	@ 0x21
 800cf3c:	d151      	bne.n	800cfe2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d132      	bne.n	800cfb0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	e853 3f00 	ldrex	r3, [r3]
 800cf56:	623b      	str	r3, [r7, #32]
   return(result);
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf68:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf70:	e841 2300 	strex	r3, r2, [r1]
 800cf74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e6      	bne.n	800cf4a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	e853 3f00 	ldrex	r3, [r3]
 800cf88:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	69b9      	ldr	r1, [r7, #24]
 800cfa0:	69fa      	ldr	r2, [r7, #28]
 800cfa2:	e841 2300 	strex	r3, r2, [r1]
 800cfa6:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1e6      	bne.n	800cf7c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cfae:	e018      	b.n	800cfe2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfc4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfca:	1c9a      	adds	r2, r3, #2
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800cfe2:	bf00      	nop
 800cfe4:	3744      	adds	r7, #68	@ 0x44
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b088      	sub	sp, #32
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	e853 3f00 	ldrex	r3, [r3]
 800d002:	60bb      	str	r3, [r7, #8]
   return(result);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d00a:	61fb      	str	r3, [r7, #28]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d018:	6979      	ldr	r1, [r7, #20]
 800d01a:	69ba      	ldr	r2, [r7, #24]
 800d01c:	e841 2300 	strex	r3, r2, [r1]
 800d020:	613b      	str	r3, [r7, #16]
   return(result);
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1e6      	bne.n	800cff6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2220      	movs	r2, #32
 800d02c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f010 fe2b 	bl	801dc90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d03a:	bf00      	nop
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b09c      	sub	sp, #112	@ 0x70
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d050:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d05a:	2b22      	cmp	r3, #34	@ 0x22
 800d05c:	f040 80b9 	bne.w	800d1d2 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d066:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d06a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d06e:	b2d9      	uxtb	r1, r3
 800d070:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d074:	b2da      	uxtb	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d07a:	400a      	ands	r2, r1
 800d07c:	b2d2      	uxtb	r2, r2
 800d07e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f040 809c 	bne.w	800d1e2 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0b2:	e853 3f00 	ldrex	r3, [r3]
 800d0b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0d0:	e841 2300 	strex	r3, r2, [r1]
 800d0d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1e6      	bne.n	800d0aa <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3308      	adds	r3, #8
 800d0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	e853 3f00 	ldrex	r3, [r3]
 800d0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ee:	f023 0301 	bic.w	r3, r3, #1
 800d0f2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d104:	e841 2300 	strex	r3, r2, [r1]
 800d108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e5      	bne.n	800d0dc <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2220      	movs	r2, #32
 800d114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d018      	beq.n	800d164 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	e853 3f00 	ldrex	r3, [r3]
 800d13e:	623b      	str	r3, [r7, #32]
   return(result);
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d146:	663b      	str	r3, [r7, #96]	@ 0x60
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30
 800d152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d158:	e841 2300 	strex	r3, r2, [r1]
 800d15c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e6      	bne.n	800d132 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d12e      	bne.n	800d1ca <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	e853 3f00 	ldrex	r3, [r3]
 800d17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0310 	bic.w	r3, r3, #16
 800d186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	e841 2300 	strex	r3, r2, [r1]
 800d19c:	617b      	str	r3, [r7, #20]
   return(result);
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e6      	bne.n	800d172 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	69db      	ldr	r3, [r3, #28]
 800d1aa:	f003 0310 	and.w	r3, r3, #16
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	d103      	bne.n	800d1ba <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2210      	movs	r2, #16
 800d1b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7fe ff00 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1c8:	e00b      	b.n	800d1e2 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f010 fd80 	bl	801dcd0 <HAL_UART_RxCpltCallback>
}
 800d1d0:	e007      	b.n	800d1e2 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f042 0208 	orr.w	r2, r2, #8
 800d1e0:	619a      	str	r2, [r3, #24]
}
 800d1e2:	bf00      	nop
 800d1e4:	3770      	adds	r7, #112	@ 0x70
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b09c      	sub	sp, #112	@ 0x70
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1f8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d202:	2b22      	cmp	r3, #34	@ 0x22
 800d204:	f040 80b9 	bne.w	800d37a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d20e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d216:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d218:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d21c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d220:	4013      	ands	r3, r2
 800d222:	b29a      	uxth	r2, r3
 800d224:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d226:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22c:	1c9a      	adds	r2, r3, #2
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d238:	b29b      	uxth	r3, r3
 800d23a:	3b01      	subs	r3, #1
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f040 809c 	bne.w	800d38a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d266:	667b      	str	r3, [r7, #100]	@ 0x64
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d270:	657b      	str	r3, [r7, #84]	@ 0x54
 800d272:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d274:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d276:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d27e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e6      	bne.n	800d252 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3308      	adds	r3, #8
 800d28a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d296:	f023 0301 	bic.w	r3, r3, #1
 800d29a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d2a4:	643a      	str	r2, [r7, #64]	@ 0x40
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2ac:	e841 2300 	strex	r3, r2, [r1]
 800d2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e5      	bne.n	800d284 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2220      	movs	r2, #32
 800d2bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d018      	beq.n	800d30c <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	e853 3f00 	ldrex	r3, [r3]
 800d2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e6      	bne.n	800d2da <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d310:	2b01      	cmp	r3, #1
 800d312:	d12e      	bne.n	800d372 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	60bb      	str	r3, [r7, #8]
   return(result);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f023 0310 	bic.w	r3, r3, #16
 800d32e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	461a      	mov	r2, r3
 800d336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d338:	61bb      	str	r3, [r7, #24]
 800d33a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33c:	6979      	ldr	r1, [r7, #20]
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	613b      	str	r3, [r7, #16]
   return(result);
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e6      	bne.n	800d31a <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	f003 0310 	and.w	r3, r3, #16
 800d356:	2b10      	cmp	r3, #16
 800d358:	d103      	bne.n	800d362 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2210      	movs	r2, #16
 800d360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7fe fe2c 	bl	800bfc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d370:	e00b      	b.n	800d38a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f010 fcac 	bl	801dcd0 <HAL_UART_RxCpltCallback>
}
 800d378:	e007      	b.n	800d38a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	699a      	ldr	r2, [r3, #24]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f042 0208 	orr.w	r2, r2, #8
 800d388:	619a      	str	r2, [r3, #24]
}
 800d38a:	bf00      	nop
 800d38c:	3770      	adds	r7, #112	@ 0x70
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d394:	b084      	sub	sp, #16
 800d396:	b580      	push	{r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	f107 001c 	add.w	r0, r7, #28
 800d3a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d121      	bne.n	800d3f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68da      	ldr	r2, [r3, #12]
 800d3be:	4b21      	ldr	r3, [pc, #132]	@ (800d444 <USB_CoreInit+0xb0>)
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d3d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d105      	bne.n	800d3e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fa92 	bl	800d910 <USB_CoreReset>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
 800d3f0:	e010      	b.n	800d414 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa86 	bl	800d910 <USB_CoreReset>
 800d404:	4603      	mov	r3, r0
 800d406:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d40c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d414:	7fbb      	ldrb	r3, [r7, #30]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d10b      	bne.n	800d432 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f043 0206 	orr.w	r2, r3, #6
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f043 0220 	orr.w	r2, r3, #32
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d432:	7bfb      	ldrb	r3, [r7, #15]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d43e:	b004      	add	sp, #16
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	ffbdffbf 	.word	0xffbdffbf

0800d448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	f023 0201 	bic.w	r2, r3, #1
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b084      	sub	sp, #16
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	460b      	mov	r3, r1
 800d474:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d486:	78fb      	ldrb	r3, [r7, #3]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d115      	bne.n	800d4b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d498:	200a      	movs	r0, #10
 800d49a:	f7f5 f8a9 	bl	80025f0 <HAL_Delay>
      ms += 10U;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	330a      	adds	r3, #10
 800d4a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fa25 	bl	800d8f4 <USB_GetMode>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d01e      	beq.n	800d4ee <USB_SetCurrentMode+0x84>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4b4:	d9f0      	bls.n	800d498 <USB_SetCurrentMode+0x2e>
 800d4b6:	e01a      	b.n	800d4ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d4b8:	78fb      	ldrb	r3, [r7, #3]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d115      	bne.n	800d4ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d4ca:	200a      	movs	r0, #10
 800d4cc:	f7f5 f890 	bl	80025f0 <HAL_Delay>
      ms += 10U;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	330a      	adds	r3, #10
 800d4d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fa0c 	bl	800d8f4 <USB_GetMode>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <USB_SetCurrentMode+0x84>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4e6:	d9f0      	bls.n	800d4ca <USB_SetCurrentMode+0x60>
 800d4e8:	e001      	b.n	800d4ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e005      	b.n	800d4fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2bc8      	cmp	r3, #200	@ 0xc8
 800d4f2:	d101      	bne.n	800d4f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e000      	b.n	800d4fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
	...

0800d504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d504:	b084      	sub	sp, #16
 800d506:	b580      	push	{r7, lr}
 800d508:	b086      	sub	sp, #24
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d51e:	2300      	movs	r3, #0
 800d520:	613b      	str	r3, [r7, #16]
 800d522:	e009      	b.n	800d538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	3340      	adds	r3, #64	@ 0x40
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	3301      	adds	r3, #1
 800d536:	613b      	str	r3, [r7, #16]
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	2b0e      	cmp	r3, #14
 800d53c:	d9f2      	bls.n	800d524 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d53e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d542:	2b00      	cmp	r3, #0
 800d544:	d11c      	bne.n	800d580 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d554:	f043 0302 	orr.w	r3, r3, #2
 800d558:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d55e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e005      	b.n	800d58c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d584:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d592:	461a      	mov	r2, r3
 800d594:	2300      	movs	r3, #0
 800d596:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d598:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d10d      	bne.n	800d5bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d104      	bne.n	800d5b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f968 	bl	800d880 <USB_SetDevSpeed>
 800d5b0:	e008      	b.n	800d5c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f963 	bl	800d880 <USB_SetDevSpeed>
 800d5ba:	e003      	b.n	800d5c4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d5bc:	2103      	movs	r1, #3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f95e 	bl	800d880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d5c4:	2110      	movs	r1, #16
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f8fa 	bl	800d7c0 <USB_FlushTxFifo>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f924 	bl	800d824 <USB_FlushRxFifo>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d604:	461a      	mov	r2, r3
 800d606:	2300      	movs	r3, #0
 800d608:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	613b      	str	r3, [r7, #16]
 800d60e:	e043      	b.n	800d698 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d622:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d626:	d118      	bne.n	800d65a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10a      	bne.n	800d644 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	015a      	lsls	r2, r3, #5
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	4413      	add	r3, r2
 800d636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d63a:	461a      	mov	r2, r3
 800d63c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e013      	b.n	800d66c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	015a      	lsls	r2, r3, #5
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d650:	461a      	mov	r2, r3
 800d652:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	e008      	b.n	800d66c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	015a      	lsls	r2, r3, #5
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	4413      	add	r3, r2
 800d662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d666:	461a      	mov	r2, r3
 800d668:	2300      	movs	r3, #0
 800d66a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	015a      	lsls	r2, r3, #5
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d678:	461a      	mov	r2, r3
 800d67a:	2300      	movs	r3, #0
 800d67c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	4413      	add	r3, r2
 800d686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d68a:	461a      	mov	r2, r3
 800d68c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d690:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	3301      	adds	r3, #1
 800d696:	613b      	str	r3, [r7, #16]
 800d698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d69c:	461a      	mov	r2, r3
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d3b5      	bcc.n	800d610 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	613b      	str	r3, [r7, #16]
 800d6a8:	e043      	b.n	800d732 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	015a      	lsls	r2, r3, #5
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6c0:	d118      	bne.n	800d6f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10a      	bne.n	800d6de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	015a      	lsls	r2, r3, #5
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	e013      	b.n	800d706 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d6f0:	6013      	str	r3, [r2, #0]
 800d6f2:	e008      	b.n	800d706 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d700:	461a      	mov	r2, r3
 800d702:	2300      	movs	r3, #0
 800d704:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d712:	461a      	mov	r2, r3
 800d714:	2300      	movs	r3, #0
 800d716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	015a      	lsls	r2, r3, #5
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4413      	add	r3, r2
 800d720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d724:	461a      	mov	r2, r3
 800d726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d72a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	3301      	adds	r3, #1
 800d730:	613b      	str	r3, [r7, #16]
 800d732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d736:	461a      	mov	r2, r3
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d3b5      	bcc.n	800d6aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d750:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d75e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d764:	2b00      	cmp	r3, #0
 800d766:	d105      	bne.n	800d774 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	f043 0210 	orr.w	r2, r3, #16
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699a      	ldr	r2, [r3, #24]
 800d778:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b8 <USB_DevInit+0x2b4>)
 800d77a:	4313      	orrs	r3, r2
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d780:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d784:	2b00      	cmp	r3, #0
 800d786:	d005      	beq.n	800d794 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	f043 0208 	orr.w	r2, r3, #8
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d794:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d105      	bne.n	800d7a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	699a      	ldr	r2, [r3, #24]
 800d7a0:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <USB_DevInit+0x2b8>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d7a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7b4:	b004      	add	sp, #16
 800d7b6:	4770      	bx	lr
 800d7b8:	803c3800 	.word	0x803c3800
 800d7bc:	40000004 	.word	0x40000004

0800d7c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7da:	d901      	bls.n	800d7e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d7dc:	2303      	movs	r3, #3
 800d7de:	e01b      	b.n	800d818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	daf2      	bge.n	800d7ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	019b      	lsls	r3, r3, #6
 800d7f0:	f043 0220 	orr.w	r2, r3, #32
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d804:	d901      	bls.n	800d80a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e006      	b.n	800d818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	f003 0320 	and.w	r3, r3, #32
 800d812:	2b20      	cmp	r3, #32
 800d814:	d0f0      	beq.n	800d7f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3714      	adds	r7, #20
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d83c:	d901      	bls.n	800d842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	e018      	b.n	800d874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	daf2      	bge.n	800d830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2210      	movs	r2, #16
 800d852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3301      	adds	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d860:	d901      	bls.n	800d866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e006      	b.n	800d874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	f003 0310 	and.w	r3, r3, #16
 800d86e:	2b10      	cmp	r3, #16
 800d870:	d0f0      	beq.n	800d854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	78fb      	ldrb	r3, [r7, #3]
 800d89a:	68f9      	ldr	r1, [r7, #12]
 800d89c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b085      	sub	sp, #20
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8cc:	f023 0303 	bic.w	r3, r3, #3
 800d8d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8e0:	f043 0302 	orr.w	r3, r3, #2
 800d8e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	695b      	ldr	r3, [r3, #20]
 800d900:	f003 0301 	and.w	r3, r3, #1
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3301      	adds	r3, #1
 800d920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d928:	d901      	bls.n	800d92e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e022      	b.n	800d974 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	daf2      	bge.n	800d91c <USB_CoreReset+0xc>

  count = 10U;
 800d936:	230a      	movs	r3, #10
 800d938:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d93a:	e002      	b.n	800d942 <USB_CoreReset+0x32>
  {
    count--;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	3b01      	subs	r3, #1
 800d940:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1f9      	bne.n	800d93c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	f043 0201 	orr.w	r2, r3, #1
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3301      	adds	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d960:	d901      	bls.n	800d966 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d962:	2303      	movs	r3, #3
 800d964:	e006      	b.n	800d974 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d0f0      	beq.n	800d954 <USB_CoreReset+0x44>

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800d986:	4b92      	ldr	r3, [pc, #584]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d988:	22c0      	movs	r2, #192	@ 0xc0
 800d98a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800d98c:	4b90      	ldr	r3, [pc, #576]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d98e:	22a8      	movs	r2, #168	@ 0xa8
 800d990:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800d992:	4b8f      	ldr	r3, [pc, #572]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d994:	2201      	movs	r2, #1
 800d996:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800d998:	4b8d      	ldr	r3, [pc, #564]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d99a:	22a8      	movs	r2, #168	@ 0xa8
 800d99c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d99e:	4b8d      	ldr	r3, [pc, #564]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800d9a0:	22ff      	movs	r2, #255	@ 0xff
 800d9a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d9a4:	4b8b      	ldr	r3, [pc, #556]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800d9a6:	22ff      	movs	r2, #255	@ 0xff
 800d9a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800d9aa:	4b8a      	ldr	r3, [pc, #552]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800d9ac:	22ff      	movs	r2, #255	@ 0xff
 800d9ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d9b0:	4b88      	ldr	r3, [pc, #544]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800d9b6:	4b88      	ldr	r3, [pc, #544]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800d9bc:	4b86      	ldr	r3, [pc, #536]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800d9c2:	4b85      	ldr	r3, [pc, #532]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800d9c8:	4b83      	ldr	r3, [pc, #524]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	f005 f863 	bl	8012a9c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d9d6:	4b7e      	ldr	r3, [pc, #504]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	061a      	lsls	r2, r3, #24
 800d9dc:	4b7c      	ldr	r3, [pc, #496]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9de:	785b      	ldrb	r3, [r3, #1]
 800d9e0:	041b      	lsls	r3, r3, #16
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	4b7a      	ldr	r3, [pc, #488]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9e6:	789b      	ldrb	r3, [r3, #2]
 800d9e8:	021b      	lsls	r3, r3, #8
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	4a78      	ldr	r2, [pc, #480]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9ee:	78d2      	ldrb	r2, [r2, #3]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	061a      	lsls	r2, r3, #24
 800d9f4:	4b76      	ldr	r3, [pc, #472]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	0619      	lsls	r1, r3, #24
 800d9fa:	4b75      	ldr	r3, [pc, #468]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800d9fc:	785b      	ldrb	r3, [r3, #1]
 800d9fe:	041b      	lsls	r3, r3, #16
 800da00:	4319      	orrs	r1, r3
 800da02:	4b73      	ldr	r3, [pc, #460]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da04:	789b      	ldrb	r3, [r3, #2]
 800da06:	021b      	lsls	r3, r3, #8
 800da08:	430b      	orrs	r3, r1
 800da0a:	4971      	ldr	r1, [pc, #452]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da0c:	78c9      	ldrb	r1, [r1, #3]
 800da0e:	430b      	orrs	r3, r1
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800da16:	431a      	orrs	r2, r3
 800da18:	4b6d      	ldr	r3, [pc, #436]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	0619      	lsls	r1, r3, #24
 800da1e:	4b6c      	ldr	r3, [pc, #432]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	041b      	lsls	r3, r3, #16
 800da24:	4319      	orrs	r1, r3
 800da26:	4b6a      	ldr	r3, [pc, #424]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da28:	789b      	ldrb	r3, [r3, #2]
 800da2a:	021b      	lsls	r3, r3, #8
 800da2c:	430b      	orrs	r3, r1
 800da2e:	4968      	ldr	r1, [pc, #416]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da30:	78c9      	ldrb	r1, [r1, #3]
 800da32:	430b      	orrs	r3, r1
 800da34:	0a1b      	lsrs	r3, r3, #8
 800da36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800da3a:	431a      	orrs	r2, r3
 800da3c:	4b64      	ldr	r3, [pc, #400]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	0619      	lsls	r1, r3, #24
 800da42:	4b63      	ldr	r3, [pc, #396]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da44:	785b      	ldrb	r3, [r3, #1]
 800da46:	041b      	lsls	r3, r3, #16
 800da48:	4319      	orrs	r1, r3
 800da4a:	4b61      	ldr	r3, [pc, #388]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da4c:	789b      	ldrb	r3, [r3, #2]
 800da4e:	021b      	lsls	r3, r3, #8
 800da50:	430b      	orrs	r3, r1
 800da52:	495f      	ldr	r1, [pc, #380]	@ (800dbd0 <MX_LWIP_Init+0x250>)
 800da54:	78c9      	ldrb	r1, [r1, #3]
 800da56:	430b      	orrs	r3, r1
 800da58:	0e1b      	lsrs	r3, r3, #24
 800da5a:	4313      	orrs	r3, r2
 800da5c:	4a5f      	ldr	r2, [pc, #380]	@ (800dbdc <MX_LWIP_Init+0x25c>)
 800da5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800da60:	4b5c      	ldr	r3, [pc, #368]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	061a      	lsls	r2, r3, #24
 800da66:	4b5b      	ldr	r3, [pc, #364]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da68:	785b      	ldrb	r3, [r3, #1]
 800da6a:	041b      	lsls	r3, r3, #16
 800da6c:	431a      	orrs	r2, r3
 800da6e:	4b59      	ldr	r3, [pc, #356]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da70:	789b      	ldrb	r3, [r3, #2]
 800da72:	021b      	lsls	r3, r3, #8
 800da74:	4313      	orrs	r3, r2
 800da76:	4a57      	ldr	r2, [pc, #348]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da78:	78d2      	ldrb	r2, [r2, #3]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	061a      	lsls	r2, r3, #24
 800da7e:	4b55      	ldr	r3, [pc, #340]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	0619      	lsls	r1, r3, #24
 800da84:	4b53      	ldr	r3, [pc, #332]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da86:	785b      	ldrb	r3, [r3, #1]
 800da88:	041b      	lsls	r3, r3, #16
 800da8a:	4319      	orrs	r1, r3
 800da8c:	4b51      	ldr	r3, [pc, #324]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da8e:	789b      	ldrb	r3, [r3, #2]
 800da90:	021b      	lsls	r3, r3, #8
 800da92:	430b      	orrs	r3, r1
 800da94:	494f      	ldr	r1, [pc, #316]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800da96:	78c9      	ldrb	r1, [r1, #3]
 800da98:	430b      	orrs	r3, r1
 800da9a:	021b      	lsls	r3, r3, #8
 800da9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800daa0:	431a      	orrs	r2, r3
 800daa2:	4b4c      	ldr	r3, [pc, #304]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	0619      	lsls	r1, r3, #24
 800daa8:	4b4a      	ldr	r3, [pc, #296]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800daaa:	785b      	ldrb	r3, [r3, #1]
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	4319      	orrs	r1, r3
 800dab0:	4b48      	ldr	r3, [pc, #288]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800dab2:	789b      	ldrb	r3, [r3, #2]
 800dab4:	021b      	lsls	r3, r3, #8
 800dab6:	430b      	orrs	r3, r1
 800dab8:	4946      	ldr	r1, [pc, #280]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800daba:	78c9      	ldrb	r1, [r1, #3]
 800dabc:	430b      	orrs	r3, r1
 800dabe:	0a1b      	lsrs	r3, r3, #8
 800dac0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dac4:	431a      	orrs	r2, r3
 800dac6:	4b43      	ldr	r3, [pc, #268]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	0619      	lsls	r1, r3, #24
 800dacc:	4b41      	ldr	r3, [pc, #260]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800dace:	785b      	ldrb	r3, [r3, #1]
 800dad0:	041b      	lsls	r3, r3, #16
 800dad2:	4319      	orrs	r1, r3
 800dad4:	4b3f      	ldr	r3, [pc, #252]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800dad6:	789b      	ldrb	r3, [r3, #2]
 800dad8:	021b      	lsls	r3, r3, #8
 800dada:	430b      	orrs	r3, r1
 800dadc:	493d      	ldr	r1, [pc, #244]	@ (800dbd4 <MX_LWIP_Init+0x254>)
 800dade:	78c9      	ldrb	r1, [r1, #3]
 800dae0:	430b      	orrs	r3, r1
 800dae2:	0e1b      	lsrs	r3, r3, #24
 800dae4:	4313      	orrs	r3, r2
 800dae6:	4a3e      	ldr	r2, [pc, #248]	@ (800dbe0 <MX_LWIP_Init+0x260>)
 800dae8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800daea:	4b3b      	ldr	r3, [pc, #236]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	061a      	lsls	r2, r3, #24
 800daf0:	4b39      	ldr	r3, [pc, #228]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800daf2:	785b      	ldrb	r3, [r3, #1]
 800daf4:	041b      	lsls	r3, r3, #16
 800daf6:	431a      	orrs	r2, r3
 800daf8:	4b37      	ldr	r3, [pc, #220]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800dafa:	789b      	ldrb	r3, [r3, #2]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	4313      	orrs	r3, r2
 800db00:	4a35      	ldr	r2, [pc, #212]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db02:	78d2      	ldrb	r2, [r2, #3]
 800db04:	4313      	orrs	r3, r2
 800db06:	061a      	lsls	r2, r3, #24
 800db08:	4b33      	ldr	r3, [pc, #204]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	0619      	lsls	r1, r3, #24
 800db0e:	4b32      	ldr	r3, [pc, #200]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db10:	785b      	ldrb	r3, [r3, #1]
 800db12:	041b      	lsls	r3, r3, #16
 800db14:	4319      	orrs	r1, r3
 800db16:	4b30      	ldr	r3, [pc, #192]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db18:	789b      	ldrb	r3, [r3, #2]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	430b      	orrs	r3, r1
 800db1e:	492e      	ldr	r1, [pc, #184]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db20:	78c9      	ldrb	r1, [r1, #3]
 800db22:	430b      	orrs	r3, r1
 800db24:	021b      	lsls	r3, r3, #8
 800db26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db2a:	431a      	orrs	r2, r3
 800db2c:	4b2a      	ldr	r3, [pc, #168]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	0619      	lsls	r1, r3, #24
 800db32:	4b29      	ldr	r3, [pc, #164]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db34:	785b      	ldrb	r3, [r3, #1]
 800db36:	041b      	lsls	r3, r3, #16
 800db38:	4319      	orrs	r1, r3
 800db3a:	4b27      	ldr	r3, [pc, #156]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db3c:	789b      	ldrb	r3, [r3, #2]
 800db3e:	021b      	lsls	r3, r3, #8
 800db40:	430b      	orrs	r3, r1
 800db42:	4925      	ldr	r1, [pc, #148]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db44:	78c9      	ldrb	r1, [r1, #3]
 800db46:	430b      	orrs	r3, r1
 800db48:	0a1b      	lsrs	r3, r3, #8
 800db4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db4e:	431a      	orrs	r2, r3
 800db50:	4b21      	ldr	r3, [pc, #132]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	0619      	lsls	r1, r3, #24
 800db56:	4b20      	ldr	r3, [pc, #128]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db58:	785b      	ldrb	r3, [r3, #1]
 800db5a:	041b      	lsls	r3, r3, #16
 800db5c:	4319      	orrs	r1, r3
 800db5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db60:	789b      	ldrb	r3, [r3, #2]
 800db62:	021b      	lsls	r3, r3, #8
 800db64:	430b      	orrs	r3, r1
 800db66:	491c      	ldr	r1, [pc, #112]	@ (800dbd8 <MX_LWIP_Init+0x258>)
 800db68:	78c9      	ldrb	r1, [r1, #3]
 800db6a:	430b      	orrs	r3, r1
 800db6c:	0e1b      	lsrs	r3, r3, #24
 800db6e:	4313      	orrs	r3, r2
 800db70:	4a1c      	ldr	r2, [pc, #112]	@ (800dbe4 <MX_LWIP_Init+0x264>)
 800db72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800db74:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe8 <MX_LWIP_Init+0x268>)
 800db76:	9302      	str	r3, [sp, #8]
 800db78:	4b1c      	ldr	r3, [pc, #112]	@ (800dbec <MX_LWIP_Init+0x26c>)
 800db7a:	9301      	str	r3, [sp, #4]
 800db7c:	2300      	movs	r3, #0
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	4b18      	ldr	r3, [pc, #96]	@ (800dbe4 <MX_LWIP_Init+0x264>)
 800db82:	4a17      	ldr	r2, [pc, #92]	@ (800dbe0 <MX_LWIP_Init+0x260>)
 800db84:	4915      	ldr	r1, [pc, #84]	@ (800dbdc <MX_LWIP_Init+0x25c>)
 800db86:	481a      	ldr	r0, [pc, #104]	@ (800dbf0 <MX_LWIP_Init+0x270>)
 800db88:	f005 fd4e 	bl	8013628 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800db8c:	4818      	ldr	r0, [pc, #96]	@ (800dbf0 <MX_LWIP_Init+0x270>)
 800db8e:	f005 fefd 	bl	801398c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800db92:	4817      	ldr	r0, [pc, #92]	@ (800dbf0 <MX_LWIP_Init+0x270>)
 800db94:	f005 ff0a 	bl	80139ac <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800db98:	4916      	ldr	r1, [pc, #88]	@ (800dbf4 <MX_LWIP_Init+0x274>)
 800db9a:	4815      	ldr	r0, [pc, #84]	@ (800dbf0 <MX_LWIP_Init+0x270>)
 800db9c:	f006 f808 	bl	8013bb0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dba0:	2224      	movs	r2, #36	@ 0x24
 800dba2:	2100      	movs	r1, #0
 800dba4:	4814      	ldr	r0, [pc, #80]	@ (800dbf8 <MX_LWIP_Init+0x278>)
 800dba6:	f010 fb27 	bl	801e1f8 <memset>
  attributes.name = "EthLink";
 800dbaa:	4b13      	ldr	r3, [pc, #76]	@ (800dbf8 <MX_LWIP_Init+0x278>)
 800dbac:	4a13      	ldr	r2, [pc, #76]	@ (800dbfc <MX_LWIP_Init+0x27c>)
 800dbae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dbb0:	4b11      	ldr	r3, [pc, #68]	@ (800dbf8 <MX_LWIP_Init+0x278>)
 800dbb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dbb6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800dbb8:	4b0f      	ldr	r3, [pc, #60]	@ (800dbf8 <MX_LWIP_Init+0x278>)
 800dbba:	2210      	movs	r2, #16
 800dbbc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800dbbe:	4a0e      	ldr	r2, [pc, #56]	@ (800dbf8 <MX_LWIP_Init+0x278>)
 800dbc0:	490b      	ldr	r1, [pc, #44]	@ (800dbf0 <MX_LWIP_Init+0x270>)
 800dbc2:	480f      	ldr	r0, [pc, #60]	@ (800dc00 <MX_LWIP_Init+0x280>)
 800dbc4:	f000 fdce 	bl	800e764 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  // printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
/* USER CODE END 3 */
}
 800dbc8:	bf00      	nop
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	20000cf4 	.word	0x20000cf4
 800dbd4:	20000cf8 	.word	0x20000cf8
 800dbd8:	20000cfc 	.word	0x20000cfc
 800dbdc:	20000ce8 	.word	0x20000ce8
 800dbe0:	20000cec 	.word	0x20000cec
 800dbe4:	20000cf0 	.word	0x20000cf0
 800dbe8:	080129d9 	.word	0x080129d9
 800dbec:	0800e145 	.word	0x0800e145
 800dbf0:	20000cb4 	.word	0x20000cb4
 800dbf4:	0800dc05 	.word	0x0800dc05
 800dbf8:	20000d00 	.word	0x20000d00
 800dbfc:	0801f080 	.word	0x0801f080
 800dc00:	0800e41d 	.word	0x0800e41d

0800dc04 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800dc2a:	2320      	movs	r3, #32
 800dc2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dc2e:	f3bf 8f4f 	dsb	sy
}
 800dc32:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800dc34:	e00b      	b.n	800dc4e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800dc36:	4a0d      	ldr	r2, [pc, #52]	@ (800dc6c <SCB_InvalidateDCache_by_Addr+0x54>)
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	4413      	add	r3, r2
 800dc44:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	dcf0      	bgt.n	800dc36 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800dc54:	f3bf 8f4f 	dsb	sy
}
 800dc58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dc5a:	f3bf 8f6f 	isb	sy
}
 800dc5e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800dc60:	bf00      	nop
 800dc62:	371c      	adds	r7, #28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	e000ed00 	.word	0xe000ed00

0800dc70 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800dc78:	4b04      	ldr	r3, [pc, #16]	@ (800dc8c <HAL_ETH_RxCpltCallback+0x1c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f001 f88f 	bl	800eda0 <osSemaphoreRelease>
}
 800dc82:	bf00      	nop
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	2000a030 	.word	0x2000a030

0800dc90 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800dc98:	4b04      	ldr	r3, [pc, #16]	@ (800dcac <HAL_ETH_TxCpltCallback+0x1c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f001 f87f 	bl	800eda0 <osSemaphoreRelease>
}
 800dca2:	bf00      	nop
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	2000a034 	.word	0x2000a034

0800dcb0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f7 f8ec 	bl	8004e96 <HAL_ETH_GetDMAError>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcc4:	2b80      	cmp	r3, #128	@ 0x80
 800dcc6:	d104      	bne.n	800dcd2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800dcc8:	4b04      	ldr	r3, [pc, #16]	@ (800dcdc <HAL_ETH_ErrorCallback+0x2c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f001 f867 	bl	800eda0 <osSemaphoreRelease>
  }
}
 800dcd2:	bf00      	nop
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	2000a030 	.word	0x2000a030

0800dce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b0aa      	sub	sp, #168	@ 0xa8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800dcfa:	f107 0310 	add.w	r3, r7, #16
 800dcfe:	2264      	movs	r2, #100	@ 0x64
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f010 fa78 	bl	801e1f8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800dd08:	4b89      	ldr	r3, [pc, #548]	@ (800df30 <low_level_init+0x250>)
 800dd0a:	4a8a      	ldr	r2, [pc, #552]	@ (800df34 <low_level_init+0x254>)
 800dd0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800dd12:	2380      	movs	r3, #128	@ 0x80
 800dd14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800dd16:	23e1      	movs	r3, #225	@ 0xe1
 800dd18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800dd22:	2300      	movs	r3, #0
 800dd24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800dd26:	4a82      	ldr	r2, [pc, #520]	@ (800df30 <low_level_init+0x250>)
 800dd28:	f107 0308 	add.w	r3, r7, #8
 800dd2c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800dd2e:	4b80      	ldr	r3, [pc, #512]	@ (800df30 <low_level_init+0x250>)
 800dd30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800dd34:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800dd36:	4b7e      	ldr	r3, [pc, #504]	@ (800df30 <low_level_init+0x250>)
 800dd38:	4a7f      	ldr	r2, [pc, #508]	@ (800df38 <low_level_init+0x258>)
 800dd3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800dd3c:	4b7c      	ldr	r3, [pc, #496]	@ (800df30 <low_level_init+0x250>)
 800dd3e:	4a7f      	ldr	r2, [pc, #508]	@ (800df3c <low_level_init+0x25c>)
 800dd40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800dd42:	4b7b      	ldr	r3, [pc, #492]	@ (800df30 <low_level_init+0x250>)
 800dd44:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800dd48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dd4a:	4879      	ldr	r0, [pc, #484]	@ (800df30 <low_level_init+0x250>)
 800dd4c:	f7f6 fa5a 	bl	8004204 <HAL_ETH_Init>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800dd56:	2238      	movs	r2, #56	@ 0x38
 800dd58:	2100      	movs	r1, #0
 800dd5a:	4879      	ldr	r0, [pc, #484]	@ (800df40 <low_level_init+0x260>)
 800dd5c:	f010 fa4c 	bl	801e1f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800dd60:	4b77      	ldr	r3, [pc, #476]	@ (800df40 <low_level_init+0x260>)
 800dd62:	2221      	movs	r2, #33	@ 0x21
 800dd64:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800dd66:	4b76      	ldr	r3, [pc, #472]	@ (800df40 <low_level_init+0x260>)
 800dd68:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800dd6c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dd6e:	4b74      	ldr	r3, [pc, #464]	@ (800df40 <low_level_init+0x260>)
 800dd70:	2200      	movs	r2, #0
 800dd72:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800dd74:	4873      	ldr	r0, [pc, #460]	@ (800df44 <low_level_init+0x264>)
 800dd76:	f005 fb11 	bl	801339c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2206      	movs	r2, #6
 800dd7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800dd82:	4b6b      	ldr	r3, [pc, #428]	@ (800df30 <low_level_init+0x250>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	781a      	ldrb	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dd8e:	4b68      	ldr	r3, [pc, #416]	@ (800df30 <low_level_init+0x250>)
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	785a      	ldrb	r2, [r3, #1]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dd9a:	4b65      	ldr	r3, [pc, #404]	@ (800df30 <low_level_init+0x250>)
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	789a      	ldrb	r2, [r3, #2]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dda6:	4b62      	ldr	r3, [pc, #392]	@ (800df30 <low_level_init+0x250>)
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	78da      	ldrb	r2, [r3, #3]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ddb2:	4b5f      	ldr	r3, [pc, #380]	@ (800df30 <low_level_init+0x250>)
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	791a      	ldrb	r2, [r3, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ddbe:	4b5c      	ldr	r3, [pc, #368]	@ (800df30 <low_level_init+0x250>)
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	795a      	ldrb	r2, [r3, #5]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ddd0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddd8:	f043 030a 	orr.w	r3, r3, #10
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800dde4:	2200      	movs	r2, #0
 800dde6:	2100      	movs	r1, #0
 800dde8:	2001      	movs	r0, #1
 800ddea:	f000 fed7 	bl	800eb9c <osSemaphoreNew>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	4a55      	ldr	r2, [pc, #340]	@ (800df48 <low_level_init+0x268>)
 800ddf2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f000 fecf 	bl	800eb9c <osSemaphoreNew>
 800ddfe:	4603      	mov	r3, r0
 800de00:	4a52      	ldr	r2, [pc, #328]	@ (800df4c <low_level_init+0x26c>)
 800de02:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800de04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800de08:	2224      	movs	r2, #36	@ 0x24
 800de0a:	2100      	movs	r1, #0
 800de0c:	4618      	mov	r0, r3
 800de0e:	f010 f9f3 	bl	801e1f8 <memset>
  attributes.name = "EthIf";
 800de12:	4b4f      	ldr	r3, [pc, #316]	@ (800df50 <low_level_init+0x270>)
 800de14:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800de16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800de1e:	2330      	movs	r3, #48	@ 0x30
 800de20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800de24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800de28:	461a      	mov	r2, r3
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	4849      	ldr	r0, [pc, #292]	@ (800df54 <low_level_init+0x274>)
 800de2e:	f000 fc99 	bl	800e764 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800de32:	4949      	ldr	r1, [pc, #292]	@ (800df58 <low_level_init+0x278>)
 800de34:	4849      	ldr	r0, [pc, #292]	@ (800df5c <low_level_init+0x27c>)
 800de36:	f7f4 faa8 	bl	800238a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800de3a:	4848      	ldr	r0, [pc, #288]	@ (800df5c <low_level_init+0x27c>)
 800de3c:	f7f4 fad7 	bl	80023ee <LAN8742_Init>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d006      	beq.n	800de54 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f005 fe82 	bl	8013b50 <netif_set_link_down>
    netif_set_down(netif);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f005 fe19 	bl	8013a84 <netif_set_down>
 800de52:	e06a      	b.n	800df2a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800de54:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d164      	bne.n	800df26 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800de5c:	483f      	ldr	r0, [pc, #252]	@ (800df5c <low_level_init+0x27c>)
 800de5e:	f7f4 fb13 	bl	8002488 <LAN8742_GetLinkState>
 800de62:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800de66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	dc06      	bgt.n	800de7c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f005 fe6e 	bl	8013b50 <netif_set_link_down>
      netif_set_down(netif);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f005 fe05 	bl	8013a84 <netif_set_down>
 800de7a:	e056      	b.n	800df2a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800de7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de80:	3b02      	subs	r3, #2
 800de82:	2b03      	cmp	r3, #3
 800de84:	d82a      	bhi.n	800dedc <low_level_init+0x1fc>
 800de86:	a201      	add	r2, pc, #4	@ (adr r2, 800de8c <low_level_init+0x1ac>)
 800de88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8c:	0800de9d 	.word	0x0800de9d
 800de90:	0800deaf 	.word	0x0800deaf
 800de94:	0800debf 	.word	0x0800debf
 800de98:	0800decf 	.word	0x0800decf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800de9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800dea4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800deac:	e01f      	b.n	800deee <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800deae:	2300      	movs	r3, #0
 800deb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800deb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800deb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800debc:	e017      	b.n	800deee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800debe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800dec6:	2300      	movs	r3, #0
 800dec8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800decc:	e00f      	b.n	800deee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800dece:	2300      	movs	r3, #0
 800ded0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800ded4:	2300      	movs	r3, #0
 800ded6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800deda:	e008      	b.n	800deee <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800dedc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800dee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dee8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800deec:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800deee:	f107 0310 	add.w	r3, r7, #16
 800def2:	4619      	mov	r1, r3
 800def4:	480e      	ldr	r0, [pc, #56]	@ (800df30 <low_level_init+0x250>)
 800def6:	f7f6 fe6d 	bl	8004bd4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800defa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800defe:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800df00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800df06:	f107 0310 	add.w	r3, r7, #16
 800df0a:	4619      	mov	r1, r3
 800df0c:	4808      	ldr	r0, [pc, #32]	@ (800df30 <low_level_init+0x250>)
 800df0e:	f7f6 ff58 	bl	8004dc2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800df12:	4807      	ldr	r0, [pc, #28]	@ (800df30 <low_level_init+0x250>)
 800df14:	f7f6 fa10 	bl	8004338 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f005 fd47 	bl	80139ac <netif_set_up>
    netif_set_link_up(netif);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f005 fde2 	bl	8013ae8 <netif_set_link_up>
 800df24:	e001      	b.n	800df2a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800df26:	f7f3 fa45 	bl	80013b4 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800df2a:	37a8      	adds	r7, #168	@ 0xa8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	2000a038 	.word	0x2000a038
 800df34:	40028000 	.word	0x40028000
 800df38:	2000012c 	.word	0x2000012c
 800df3c:	2000008c 	.word	0x2000008c
 800df40:	2000a0e8 	.word	0x2000a0e8
 800df44:	080221a4 	.word	0x080221a4
 800df48:	2000a030 	.word	0x2000a030
 800df4c:	2000a034 	.word	0x2000a034
 800df50:	0801f088 	.word	0x0801f088
 800df54:	0800e0f1 	.word	0x0800e0f1
 800df58:	2000000c 	.word	0x2000000c
 800df5c:	2000a120 	.word	0x2000a120

0800df60 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b092      	sub	sp, #72	@ 0x48
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800df6a:	2300      	movs	r3, #0
 800df6c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800df6e:	2300      	movs	r3, #0
 800df70:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800df72:	2300      	movs	r3, #0
 800df74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800df78:	f107 030c 	add.w	r3, r7, #12
 800df7c:	2230      	movs	r2, #48	@ 0x30
 800df7e:	2100      	movs	r1, #0
 800df80:	4618      	mov	r0, r3
 800df82:	f010 f939 	bl	801e1f8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800df86:	f107 030c 	add.w	r3, r7, #12
 800df8a:	2230      	movs	r2, #48	@ 0x30
 800df8c:	2100      	movs	r1, #0
 800df8e:	4618      	mov	r0, r3
 800df90:	f010 f932 	bl	801e1f8 <memset>

  for(q = p; q != NULL; q = q->next)
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	643b      	str	r3, [r7, #64]	@ 0x40
 800df98:	e045      	b.n	800e026 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800df9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df9c:	2b03      	cmp	r3, #3
 800df9e:	d902      	bls.n	800dfa6 <low_level_output+0x46>
      return ERR_IF;
 800dfa0:	f06f 030b 	mvn.w	r3, #11
 800dfa4:	e07f      	b.n	800e0a6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800dfa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfa8:	6859      	ldr	r1, [r3, #4]
 800dfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfac:	4613      	mov	r3, r2
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	4413      	add	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	3348      	adds	r3, #72	@ 0x48
 800dfb6:	443b      	add	r3, r7
 800dfb8:	3b3c      	subs	r3, #60	@ 0x3c
 800dfba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800dfbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	3348      	adds	r3, #72	@ 0x48
 800dfce:	443b      	add	r3, r7
 800dfd0:	3b38      	subs	r3, #56	@ 0x38
 800dfd2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800dfd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d011      	beq.n	800dffe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800dfda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfdc:	1e5a      	subs	r2, r3, #1
 800dfde:	f107 000c 	add.w	r0, r7, #12
 800dfe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	440b      	add	r3, r1
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	18c1      	adds	r1, r0, r3
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	3348      	adds	r3, #72	@ 0x48
 800dff8:	443b      	add	r3, r7
 800dffa:	3b34      	subs	r3, #52	@ 0x34
 800dffc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800dffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d109      	bne.n	800e01a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e008:	4613      	mov	r3, r2
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	3348      	adds	r3, #72	@ 0x48
 800e012:	443b      	add	r3, r7
 800e014:	3b34      	subs	r3, #52	@ 0x34
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e01a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e01c:	3301      	adds	r3, #1
 800e01e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800e020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	643b      	str	r3, [r7, #64]	@ 0x40
 800e026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1b6      	bne.n	800df9a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	891b      	ldrh	r3, [r3, #8]
 800e030:	461a      	mov	r2, r3
 800e032:	4b1f      	ldr	r3, [pc, #124]	@ (800e0b0 <low_level_output+0x150>)
 800e034:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e036:	4a1e      	ldr	r2, [pc, #120]	@ (800e0b0 <low_level_output+0x150>)
 800e038:	f107 030c 	add.w	r3, r7, #12
 800e03c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e03e:	4a1c      	ldr	r2, [pc, #112]	@ (800e0b0 <low_level_output+0x150>)
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800e044:	6838      	ldr	r0, [r7, #0]
 800e046:	f006 fa07 	bl	8014458 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800e04a:	4919      	ldr	r1, [pc, #100]	@ (800e0b0 <low_level_output+0x150>)
 800e04c:	4819      	ldr	r0, [pc, #100]	@ (800e0b4 <low_level_output+0x154>)
 800e04e:	f7f6 fa63 	bl	8004518 <HAL_ETH_Transmit_IT>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d103      	bne.n	800e060 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e05e:	e01b      	b.n	800e098 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800e060:	4814      	ldr	r0, [pc, #80]	@ (800e0b4 <low_level_output+0x154>)
 800e062:	f7f6 ff0b 	bl	8004e7c <HAL_ETH_GetError>
 800e066:	4603      	mov	r3, r0
 800e068:	f003 0302 	and.w	r3, r3, #2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00d      	beq.n	800e08c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800e070:	4b11      	ldr	r3, [pc, #68]	@ (800e0b8 <low_level_output+0x158>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 fe2b 	bl	800ecd4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800e07e:	480d      	ldr	r0, [pc, #52]	@ (800e0b4 <low_level_output+0x154>)
 800e080:	f7f6 fbea 	bl	8004858 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800e084:	23fe      	movs	r3, #254	@ 0xfe
 800e086:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e08a:	e005      	b.n	800e098 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800e08c:	6838      	ldr	r0, [r7, #0]
 800e08e:	f006 f93d 	bl	801430c <pbuf_free>
        errval =  ERR_IF;
 800e092:	23f4      	movs	r3, #244	@ 0xf4
 800e094:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800e098:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e09c:	f113 0f02 	cmn.w	r3, #2
 800e0a0:	d0d3      	beq.n	800e04a <low_level_output+0xea>

  return errval;
 800e0a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3748      	adds	r7, #72	@ 0x48
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	2000a0e8 	.word	0x2000a0e8
 800e0b4:	2000a038 	.word	0x2000a038
 800e0b8:	2000a034 	.word	0x2000a034

0800e0bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e0c8:	4b07      	ldr	r3, [pc, #28]	@ (800e0e8 <low_level_input+0x2c>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d105      	bne.n	800e0dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e0d0:	f107 030c 	add.w	r3, r7, #12
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4805      	ldr	r0, [pc, #20]	@ (800e0ec <low_level_input+0x30>)
 800e0d8:	f7f6 fa7a 	bl	80045d0 <HAL_ETH_ReadData>
  }

  return p;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2000a02c 	.word	0x2000a02c
 800e0ec:	2000a038 	.word	0x2000a038

0800e0f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e100:	4b0f      	ldr	r3, [pc, #60]	@ (800e140 <ethernetif_input+0x50>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f04f 31ff 	mov.w	r1, #4294967295
 800e108:	4618      	mov	r0, r3
 800e10a:	f000 fde3 	bl	800ecd4 <osSemaphoreAcquire>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1f5      	bne.n	800e100 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800e114:	68b8      	ldr	r0, [r7, #8]
 800e116:	f7ff ffd1 	bl	800e0bc <low_level_input>
 800e11a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	4798      	blx	r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f006 f8ea 	bl	801430c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1ea      	bne.n	800e114 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e13e:	e7df      	b.n	800e100 <ethernetif_input+0x10>
 800e140:	2000a030 	.word	0x2000a030

0800e144 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d106      	bne.n	800e160 <ethernetif_init+0x1c>
 800e152:	4b0e      	ldr	r3, [pc, #56]	@ (800e18c <ethernetif_init+0x48>)
 800e154:	f240 220d 	movw	r2, #525	@ 0x20d
 800e158:	490d      	ldr	r1, [pc, #52]	@ (800e190 <ethernetif_init+0x4c>)
 800e15a:	480e      	ldr	r0, [pc, #56]	@ (800e194 <ethernetif_init+0x50>)
 800e15c:	f00f fef4 	bl	801df48 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2273      	movs	r2, #115	@ 0x73
 800e164:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2274      	movs	r2, #116	@ 0x74
 800e16c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a09      	ldr	r2, [pc, #36]	@ (800e198 <ethernetif_init+0x54>)
 800e174:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a08      	ldr	r2, [pc, #32]	@ (800e19c <ethernetif_init+0x58>)
 800e17a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fdaf 	bl	800dce0 <low_level_init>

  return ERR_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	0801f090 	.word	0x0801f090
 800e190:	0801f0ac 	.word	0x0801f0ac
 800e194:	0801f0bc 	.word	0x0801f0bc
 800e198:	0801af6d 	.word	0x0801af6d
 800e19c:	0800df61 	.word	0x0800df61

0800e1a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	4809      	ldr	r0, [pc, #36]	@ (800e1d4 <pbuf_free_custom+0x34>)
 800e1b0:	f005 f9e4 	bl	801357c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e1b4:	4b08      	ldr	r3, [pc, #32]	@ (800e1d8 <pbuf_free_custom+0x38>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d107      	bne.n	800e1cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e1bc:	4b06      	ldr	r3, [pc, #24]	@ (800e1d8 <pbuf_free_custom+0x38>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800e1c2:	4b06      	ldr	r3, [pc, #24]	@ (800e1dc <pbuf_free_custom+0x3c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f000 fdea 	bl	800eda0 <osSemaphoreRelease>
  }
}
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	080221a4 	.word	0x080221a4
 800e1d8:	2000a02c 	.word	0x2000a02c
 800e1dc:	2000a030 	.word	0x2000a030

0800e1e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e1e4:	f7f4 f9f8 	bl	80025d8 <HAL_GetTick>
 800e1e8:	4603      	mov	r3, r0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	bd80      	pop	{r7, pc}
	...

0800e1f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b08e      	sub	sp, #56	@ 0x38
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	601a      	str	r2, [r3, #0]
 800e200:	605a      	str	r2, [r3, #4]
 800e202:	609a      	str	r2, [r3, #8]
 800e204:	60da      	str	r2, [r3, #12]
 800e206:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a56      	ldr	r2, [pc, #344]	@ (800e368 <HAL_ETH_MspInit+0x178>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	f040 80a6 	bne.w	800e360 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e214:	4b55      	ldr	r3, [pc, #340]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e218:	4a54      	ldr	r2, [pc, #336]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e21a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e21e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e220:	4b52      	ldr	r3, [pc, #328]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e228:	623b      	str	r3, [r7, #32]
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	4b4f      	ldr	r3, [pc, #316]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e230:	4a4e      	ldr	r2, [pc, #312]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e232:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e236:	6313      	str	r3, [r2, #48]	@ 0x30
 800e238:	4b4c      	ldr	r3, [pc, #304]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	4b49      	ldr	r3, [pc, #292]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e248:	4a48      	ldr	r2, [pc, #288]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e24a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e24e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e250:	4b46      	ldr	r3, [pc, #280]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e258:	61bb      	str	r3, [r7, #24]
 800e25a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e25c:	4b43      	ldr	r3, [pc, #268]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e260:	4a42      	ldr	r2, [pc, #264]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e262:	f043 0304 	orr.w	r3, r3, #4
 800e266:	6313      	str	r3, [r2, #48]	@ 0x30
 800e268:	4b40      	ldr	r3, [pc, #256]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	617b      	str	r3, [r7, #20]
 800e272:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e274:	4b3d      	ldr	r3, [pc, #244]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e278:	4a3c      	ldr	r2, [pc, #240]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e27a:	f043 0301 	orr.w	r3, r3, #1
 800e27e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e280:	4b3a      	ldr	r3, [pc, #232]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e284:	f003 0301 	and.w	r3, r3, #1
 800e288:	613b      	str	r3, [r7, #16]
 800e28a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e28c:	4b37      	ldr	r3, [pc, #220]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e290:	4a36      	ldr	r2, [pc, #216]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e292:	f043 0302 	orr.w	r3, r3, #2
 800e296:	6313      	str	r3, [r2, #48]	@ 0x30
 800e298:	4b34      	ldr	r3, [pc, #208]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e29c:	f003 0302 	and.w	r3, r3, #2
 800e2a0:	60fb      	str	r3, [r7, #12]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e2a4:	4b31      	ldr	r3, [pc, #196]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2a8:	4a30      	ldr	r2, [pc, #192]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800e2b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e36c <HAL_ETH_MspInit+0x17c>)
 800e2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2b8:	60bb      	str	r3, [r7, #8]
 800e2ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e2bc:	2332      	movs	r3, #50	@ 0x32
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e2cc:	230b      	movs	r3, #11
 800e2ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e2d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4826      	ldr	r0, [pc, #152]	@ (800e370 <HAL_ETH_MspInit+0x180>)
 800e2d8:	f7f7 fa0a 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e2dc:	2386      	movs	r3, #134	@ 0x86
 800e2de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e2ec:	230b      	movs	r3, #11
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	481f      	ldr	r0, [pc, #124]	@ (800e374 <HAL_ETH_MspInit+0x184>)
 800e2f8:	f7f7 f9fa 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e2fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e302:	2302      	movs	r3, #2
 800e304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e306:	2300      	movs	r3, #0
 800e308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e30a:	2303      	movs	r3, #3
 800e30c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e30e:	230b      	movs	r3, #11
 800e310:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e316:	4619      	mov	r1, r3
 800e318:	4817      	ldr	r0, [pc, #92]	@ (800e378 <HAL_ETH_MspInit+0x188>)
 800e31a:	f7f7 f9e9 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e31e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800e322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e324:	2302      	movs	r3, #2
 800e326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e328:	2300      	movs	r3, #0
 800e32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e32c:	2303      	movs	r3, #3
 800e32e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e330:	230b      	movs	r3, #11
 800e332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e338:	4619      	mov	r1, r3
 800e33a:	4810      	ldr	r0, [pc, #64]	@ (800e37c <HAL_ETH_MspInit+0x18c>)
 800e33c:	f7f7 f9d8 	bl	80056f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e340:	2200      	movs	r2, #0
 800e342:	2105      	movs	r1, #5
 800e344:	203d      	movs	r0, #61	@ 0x3d
 800e346:	f7f4 ff33 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e34a:	203d      	movs	r0, #61	@ 0x3d
 800e34c:	f7f4 ff4c 	bl	80031e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800e350:	2200      	movs	r2, #0
 800e352:	2105      	movs	r1, #5
 800e354:	203e      	movs	r0, #62	@ 0x3e
 800e356:	f7f4 ff2b 	bl	80031b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800e35a:	203e      	movs	r0, #62	@ 0x3e
 800e35c:	f7f4 ff44 	bl	80031e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e360:	bf00      	nop
 800e362:	3738      	adds	r7, #56	@ 0x38
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	40028000 	.word	0x40028000
 800e36c:	40023800 	.word	0x40023800
 800e370:	40020800 	.word	0x40020800
 800e374:	40020000 	.word	0x40020000
 800e378:	40020400 	.word	0x40020400
 800e37c:	40021800 	.word	0x40021800

0800e380 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e384:	4802      	ldr	r0, [pc, #8]	@ (800e390 <ETH_PHY_IO_Init+0x10>)
 800e386:	f7f6 fd37 	bl	8004df8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	2000a038 	.word	0x2000a038

0800e394 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
  return 0;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	68f9      	ldr	r1, [r7, #12]
 800e3b6:	4807      	ldr	r0, [pc, #28]	@ (800e3d4 <ETH_PHY_IO_ReadReg+0x30>)
 800e3b8:	f7f6 fb78 	bl	8004aac <HAL_ETH_ReadPHYRegister>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d002      	beq.n	800e3c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c6:	e000      	b.n	800e3ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	2000a038 	.word	0x2000a038

0800e3d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	68f9      	ldr	r1, [r7, #12]
 800e3ea:	4807      	ldr	r0, [pc, #28]	@ (800e408 <ETH_PHY_IO_WriteReg+0x30>)
 800e3ec:	f7f6 fba9 	bl	8004b42 <HAL_ETH_WritePHYRegister>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fa:	e000      	b.n	800e3fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	2000a038 	.word	0x2000a038

0800e40c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e410:	f7f4 f8e2 	bl	80025d8 <HAL_GetTick>
 800e414:	4603      	mov	r3, r0
}
 800e416:	4618      	mov	r0, r3
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b0a0      	sub	sp, #128	@ 0x80
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e424:	f107 0308 	add.w	r3, r7, #8
 800e428:	2264      	movs	r2, #100	@ 0x64
 800e42a:	2100      	movs	r1, #0
 800e42c:	4618      	mov	r0, r3
 800e42e:	f00f fee3 	bl	801e1f8 <memset>
  int32_t PHYLinkState = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e43a:	2300      	movs	r3, #0
 800e43c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e43e:	2300      	movs	r3, #0
 800e440:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e446:	483a      	ldr	r0, [pc, #232]	@ (800e530 <ethernet_link_thread+0x114>)
 800e448:	f7f4 f81e 	bl	8002488 <LAN8742_GetLinkState>
 800e44c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e450:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e454:	089b      	lsrs	r3, r3, #2
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00c      	beq.n	800e47a <ethernet_link_thread+0x5e>
 800e460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e462:	2b01      	cmp	r3, #1
 800e464:	dc09      	bgt.n	800e47a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e466:	4833      	ldr	r0, [pc, #204]	@ (800e534 <ethernet_link_thread+0x118>)
 800e468:	f7f5 ffd6 	bl	8004418 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e46c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e46e:	f005 fb09 	bl	8013a84 <netif_set_down>
    netif_set_link_down(netif);
 800e472:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e474:	f005 fb6c 	bl	8013b50 <netif_set_link_down>
 800e478:	e055      	b.n	800e526 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e47a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e47c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e480:	f003 0304 	and.w	r3, r3, #4
 800e484:	2b00      	cmp	r3, #0
 800e486:	d14e      	bne.n	800e526 <ethernet_link_thread+0x10a>
 800e488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	dd4b      	ble.n	800e526 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e48e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e490:	3b02      	subs	r3, #2
 800e492:	2b03      	cmp	r3, #3
 800e494:	d82a      	bhi.n	800e4ec <ethernet_link_thread+0xd0>
 800e496:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <ethernet_link_thread+0x80>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4ad 	.word	0x0800e4ad
 800e4a0:	0800e4bf 	.word	0x0800e4bf
 800e4a4:	0800e4cf 	.word	0x0800e4cf
 800e4a8:	0800e4df 	.word	0x0800e4df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e4ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e4b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e4b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e4b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e4bc:	e017      	b.n	800e4ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e4c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e4c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e4cc:	e00f      	b.n	800e4ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e4ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e4d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e4dc:	e007      	b.n	800e4ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e4ea:	e000      	b.n	800e4ee <ethernet_link_thread+0xd2>
    default:
      break;
 800e4ec:	bf00      	nop
    }

    if(linkchanged)
 800e4ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d018      	beq.n	800e526 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	480e      	ldr	r0, [pc, #56]	@ (800e534 <ethernet_link_thread+0x118>)
 800e4fc:	f7f6 fb6a 	bl	8004bd4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e502:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e506:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e508:	f107 0308 	add.w	r3, r7, #8
 800e50c:	4619      	mov	r1, r3
 800e50e:	4809      	ldr	r0, [pc, #36]	@ (800e534 <ethernet_link_thread+0x118>)
 800e510:	f7f6 fc57 	bl	8004dc2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e514:	4807      	ldr	r0, [pc, #28]	@ (800e534 <ethernet_link_thread+0x118>)
 800e516:	f7f5 ff0f 	bl	8004338 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e51a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e51c:	f005 fa46 	bl	80139ac <netif_set_up>
      netif_set_link_up(netif);
 800e520:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e522:	f005 fae1 	bl	8013ae8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e526:	2064      	movs	r0, #100	@ 0x64
 800e528:	f000 f9c2 	bl	800e8b0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e52c:	e78b      	b.n	800e446 <ethernet_link_thread+0x2a>
 800e52e:	bf00      	nop
 800e530:	2000a120 	.word	0x2000a120
 800e534:	2000a038 	.word	0x2000a038

0800e538 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af02      	add	r7, sp, #8
 800e53e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e540:	4812      	ldr	r0, [pc, #72]	@ (800e58c <HAL_ETH_RxAllocateCallback+0x54>)
 800e542:	f004 ffa7 	bl	8013494 <memp_malloc_pool>
 800e546:	60f8      	str	r0, [r7, #12]
  if (p)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d014      	beq.n	800e578 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f103 0220 	add.w	r2, r3, #32
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4a0d      	ldr	r2, [pc, #52]	@ (800e590 <HAL_ETH_RxAllocateCallback+0x58>)
 800e55c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e566:	9201      	str	r2, [sp, #4]
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2241      	movs	r2, #65	@ 0x41
 800e56e:	2100      	movs	r1, #0
 800e570:	2000      	movs	r0, #0
 800e572:	f005 fd11 	bl	8013f98 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e576:	e005      	b.n	800e584 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e578:	4b06      	ldr	r3, [pc, #24]	@ (800e594 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e57a:	2201      	movs	r2, #1
 800e57c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
}
 800e584:	bf00      	nop
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	080221a4 	.word	0x080221a4
 800e590:	0800e1a1 	.word	0x0800e1a1
 800e594:	2000a02c 	.word	0x2000a02c

0800e598 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b088      	sub	sp, #32
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	3b20      	subs	r3, #32
 800e5b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	887a      	ldrh	r2, [r7, #2]
 800e5c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	69fa      	ldr	r2, [r7, #28]
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	e003      	b.n	800e5e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	61fb      	str	r3, [r7, #28]
 800e5ee:	e009      	b.n	800e604 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	891a      	ldrh	r2, [r3, #8]
 800e5f4:	887b      	ldrh	r3, [r7, #2]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	61fb      	str	r3, [r7, #28]
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1f2      	bne.n	800e5f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e60a:	887b      	ldrh	r3, [r7, #2]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff fb02 	bl	800dc18 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e614:	bf00      	nop
 800e616:	3720      	adds	r7, #32
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f005 fe71 	bl	801430c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e632:	b480      	push	{r7}
 800e634:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e636:	bf00      	nop
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e646:	f3ef 8305 	mrs	r3, IPSR
 800e64a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e64c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10f      	bne.n	800e672 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e652:	f3ef 8310 	mrs	r3, PRIMASK
 800e656:	607b      	str	r3, [r7, #4]
  return(result);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d105      	bne.n	800e66a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e65e:	f3ef 8311 	mrs	r3, BASEPRI
 800e662:	603b      	str	r3, [r7, #0]
  return(result);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d007      	beq.n	800e67a <osKernelInitialize+0x3a>
 800e66a:	4b0e      	ldr	r3, [pc, #56]	@ (800e6a4 <osKernelInitialize+0x64>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d103      	bne.n	800e67a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e672:	f06f 0305 	mvn.w	r3, #5
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	e00c      	b.n	800e694 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e67a:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a4 <osKernelInitialize+0x64>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d105      	bne.n	800e68e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e682:	4b08      	ldr	r3, [pc, #32]	@ (800e6a4 <osKernelInitialize+0x64>)
 800e684:	2201      	movs	r2, #1
 800e686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e688:	2300      	movs	r3, #0
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	e002      	b.n	800e694 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e68e:	f04f 33ff 	mov.w	r3, #4294967295
 800e692:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e694:	68fb      	ldr	r3, [r7, #12]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	2000a140 	.word	0x2000a140

0800e6a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ae:	f3ef 8305 	mrs	r3, IPSR
 800e6b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10f      	bne.n	800e6da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e6be:	607b      	str	r3, [r7, #4]
  return(result);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d105      	bne.n	800e6d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6c6:	f3ef 8311 	mrs	r3, BASEPRI
 800e6ca:	603b      	str	r3, [r7, #0]
  return(result);
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d007      	beq.n	800e6e2 <osKernelStart+0x3a>
 800e6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e710 <osKernelStart+0x68>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d103      	bne.n	800e6e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e6da:	f06f 0305 	mvn.w	r3, #5
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	e010      	b.n	800e704 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e6e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e710 <osKernelStart+0x68>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d109      	bne.n	800e6fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e6ea:	f7ff ffa2 	bl	800e632 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e6ee:	4b08      	ldr	r3, [pc, #32]	@ (800e710 <osKernelStart+0x68>)
 800e6f0:	2202      	movs	r2, #2
 800e6f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e6f4:	f002 f92e 	bl	8010954 <vTaskStartScheduler>
      stat = osOK;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	e002      	b.n	800e704 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e704:	68fb      	ldr	r3, [r7, #12]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	2000a140 	.word	0x2000a140

0800e714 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e71a:	f3ef 8305 	mrs	r3, IPSR
 800e71e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e720:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10f      	bne.n	800e746 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e726:	f3ef 8310 	mrs	r3, PRIMASK
 800e72a:	607b      	str	r3, [r7, #4]
  return(result);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d105      	bne.n	800e73e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e732:	f3ef 8311 	mrs	r3, BASEPRI
 800e736:	603b      	str	r3, [r7, #0]
  return(result);
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d007      	beq.n	800e74e <osKernelGetTickCount+0x3a>
 800e73e:	4b08      	ldr	r3, [pc, #32]	@ (800e760 <osKernelGetTickCount+0x4c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d103      	bne.n	800e74e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e746:	f002 fa37 	bl	8010bb8 <xTaskGetTickCountFromISR>
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	e002      	b.n	800e754 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e74e:	f002 fa23 	bl	8010b98 <xTaskGetTickCount>
 800e752:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e754:	68fb      	ldr	r3, [r7, #12]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	2000a140 	.word	0x2000a140

0800e764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e764:	b580      	push	{r7, lr}
 800e766:	b090      	sub	sp, #64	@ 0x40
 800e768:	af04      	add	r7, sp, #16
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e774:	f3ef 8305 	mrs	r3, IPSR
 800e778:	61fb      	str	r3, [r7, #28]
  return(result);
 800e77a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f040 8090 	bne.w	800e8a2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e782:	f3ef 8310 	mrs	r3, PRIMASK
 800e786:	61bb      	str	r3, [r7, #24]
  return(result);
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d105      	bne.n	800e79a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e78e:	f3ef 8311 	mrs	r3, BASEPRI
 800e792:	617b      	str	r3, [r7, #20]
  return(result);
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <osThreadNew+0x3e>
 800e79a:	4b44      	ldr	r3, [pc, #272]	@ (800e8ac <osThreadNew+0x148>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	d07f      	beq.n	800e8a2 <osThreadNew+0x13e>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d07c      	beq.n	800e8a2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e7a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e7ae:	2318      	movs	r3, #24
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800e7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ba:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d045      	beq.n	800e84e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d002      	beq.n	800e7d0 <osThreadNew+0x6c>
        name = attr->name;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	699b      	ldr	r3, [r3, #24]
 800e7dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d008      	beq.n	800e7f6 <osThreadNew+0x92>
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	2b38      	cmp	r3, #56	@ 0x38
 800e7e8:	d805      	bhi.n	800e7f6 <osThreadNew+0x92>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <osThreadNew+0x96>
        return (NULL);
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e054      	b.n	800e8a4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	089b      	lsrs	r3, r3, #2
 800e808:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00e      	beq.n	800e830 <osThreadNew+0xcc>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	2ba7      	cmp	r3, #167	@ 0xa7
 800e818:	d90a      	bls.n	800e830 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d006      	beq.n	800e830 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d002      	beq.n	800e830 <osThreadNew+0xcc>
        mem = 1;
 800e82a:	2301      	movs	r3, #1
 800e82c:	623b      	str	r3, [r7, #32]
 800e82e:	e010      	b.n	800e852 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10c      	bne.n	800e852 <osThreadNew+0xee>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d108      	bne.n	800e852 <osThreadNew+0xee>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d104      	bne.n	800e852 <osThreadNew+0xee>
          mem = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	623b      	str	r3, [r7, #32]
 800e84c:	e001      	b.n	800e852 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d110      	bne.n	800e87a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e860:	9202      	str	r2, [sp, #8]
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e86c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f001 fe72 	bl	8010558 <xTaskCreateStatic>
 800e874:	4603      	mov	r3, r0
 800e876:	613b      	str	r3, [r7, #16]
 800e878:	e013      	b.n	800e8a2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d110      	bne.n	800e8a2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	b29a      	uxth	r2, r3
 800e884:	f107 0310 	add.w	r3, r7, #16
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f001 fec6 	bl	8010624 <xTaskCreate>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d001      	beq.n	800e8a2 <osThreadNew+0x13e>
          hTask = NULL;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e8a2:	693b      	ldr	r3, [r7, #16]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3730      	adds	r7, #48	@ 0x30
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	2000a140 	.word	0x2000a140

0800e8b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8b8:	f3ef 8305 	mrs	r3, IPSR
 800e8bc:	613b      	str	r3, [r7, #16]
  return(result);
 800e8be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10f      	bne.n	800e8e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d105      	bne.n	800e8dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8d0:	f3ef 8311 	mrs	r3, BASEPRI
 800e8d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d007      	beq.n	800e8ec <osDelay+0x3c>
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e908 <osDelay+0x58>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d103      	bne.n	800e8ec <osDelay+0x3c>
    stat = osErrorISR;
 800e8e4:	f06f 0305 	mvn.w	r3, #5
 800e8e8:	617b      	str	r3, [r7, #20]
 800e8ea:	e007      	b.n	800e8fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d002      	beq.n	800e8fc <osDelay+0x4c>
      vTaskDelay(ticks);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f001 fff4 	bl	80108e4 <vTaskDelay>
    }
  }

  return (stat);
 800e8fc:	697b      	ldr	r3, [r7, #20]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	2000a140 	.word	0x2000a140

0800e90c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	@ 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e918:	f3ef 8305 	mrs	r3, IPSR
 800e91c:	613b      	str	r3, [r7, #16]
  return(result);
 800e91e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e920:	2b00      	cmp	r3, #0
 800e922:	f040 8085 	bne.w	800ea30 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e926:	f3ef 8310 	mrs	r3, PRIMASK
 800e92a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d105      	bne.n	800e93e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e932:	f3ef 8311 	mrs	r3, BASEPRI
 800e936:	60bb      	str	r3, [r7, #8]
  return(result);
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <osMutexNew+0x3a>
 800e93e:	4b3f      	ldr	r3, [pc, #252]	@ (800ea3c <osMutexNew+0x130>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b02      	cmp	r3, #2
 800e944:	d074      	beq.n	800ea30 <osMutexNew+0x124>
    if (attr != NULL) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	623b      	str	r3, [r7, #32]
 800e952:	e001      	b.n	800e958 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d002      	beq.n	800e968 <osMutexNew+0x5c>
      rmtx = 1U;
 800e962:	2301      	movs	r3, #1
 800e964:	61fb      	str	r3, [r7, #28]
 800e966:	e001      	b.n	800e96c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e968:	2300      	movs	r3, #0
 800e96a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	f003 0308 	and.w	r3, r3, #8
 800e972:	2b00      	cmp	r3, #0
 800e974:	d15c      	bne.n	800ea30 <osMutexNew+0x124>
      mem = -1;
 800e976:	f04f 33ff 	mov.w	r3, #4294967295
 800e97a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d015      	beq.n	800e9ae <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d006      	beq.n	800e998 <osMutexNew+0x8c>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	2b4f      	cmp	r3, #79	@ 0x4f
 800e990:	d902      	bls.n	800e998 <osMutexNew+0x8c>
          mem = 1;
 800e992:	2301      	movs	r3, #1
 800e994:	61bb      	str	r3, [r7, #24]
 800e996:	e00c      	b.n	800e9b2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d108      	bne.n	800e9b2 <osMutexNew+0xa6>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d104      	bne.n	800e9b2 <osMutexNew+0xa6>
            mem = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	61bb      	str	r3, [r7, #24]
 800e9ac:	e001      	b.n	800e9b2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d112      	bne.n	800e9de <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d007      	beq.n	800e9ce <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	2004      	movs	r0, #4
 800e9c6:	f000 fe22 	bl	800f60e <xQueueCreateMutexStatic>
 800e9ca:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9cc:	e016      	b.n	800e9fc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	f000 fe1a 	bl	800f60e <xQueueCreateMutexStatic>
 800e9da:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9dc:	e00e      	b.n	800e9fc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10b      	bne.n	800e9fc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d004      	beq.n	800e9f4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e9ea:	2004      	movs	r0, #4
 800e9ec:	f000 fdf7 	bl	800f5de <xQueueCreateMutex>
 800e9f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e9f2:	e003      	b.n	800e9fc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e9f4:	2001      	movs	r0, #1
 800e9f6:	f000 fdf2 	bl	800f5de <xQueueCreateMutex>
 800e9fa:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00c      	beq.n	800ea1c <osMutexNew+0x110>
        if (attr != NULL) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d003      	beq.n	800ea10 <osMutexNew+0x104>
          name = attr->name;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	617b      	str	r3, [r7, #20]
 800ea0e:	e001      	b.n	800ea14 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ea14:	6979      	ldr	r1, [r7, #20]
 800ea16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea18:	f001 fd16 	bl	8010448 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d006      	beq.n	800ea30 <osMutexNew+0x124>
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d003      	beq.n	800ea30 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2a:	f043 0301 	orr.w	r3, r3, #1
 800ea2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ea30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3728      	adds	r7, #40	@ 0x28
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	2000a140 	.word	0x2000a140

0800ea40 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f023 0301 	bic.w	r3, r3, #1
 800ea50:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea5e:	f3ef 8305 	mrs	r3, IPSR
 800ea62:	613b      	str	r3, [r7, #16]
  return(result);
 800ea64:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10f      	bne.n	800ea8a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ea6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d105      	bne.n	800ea82 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea76:	f3ef 8311 	mrs	r3, BASEPRI
 800ea7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <osMutexAcquire+0x52>
 800ea82:	4b1d      	ldr	r3, [pc, #116]	@ (800eaf8 <osMutexAcquire+0xb8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d103      	bne.n	800ea92 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ea8a:	f06f 0305 	mvn.w	r3, #5
 800ea8e:	61fb      	str	r3, [r7, #28]
 800ea90:	e02c      	b.n	800eaec <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d103      	bne.n	800eaa0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ea98:	f06f 0303 	mvn.w	r3, #3
 800ea9c:	61fb      	str	r3, [r7, #28]
 800ea9e:	e025      	b.n	800eaec <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d011      	beq.n	800eaca <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	69b8      	ldr	r0, [r7, #24]
 800eaaa:	f000 fe02 	bl	800f6b2 <xQueueTakeMutexRecursive>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d01b      	beq.n	800eaec <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800eaba:	f06f 0301 	mvn.w	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
 800eac0:	e014      	b.n	800eaec <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eac2:	f06f 0302 	mvn.w	r3, #2
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	e010      	b.n	800eaec <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	69b8      	ldr	r0, [r7, #24]
 800eace:	f001 f9cd 	bl	800fe6c <xQueueSemaphoreTake>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d009      	beq.n	800eaec <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d003      	beq.n	800eae6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800eade:	f06f 0301 	mvn.w	r3, #1
 800eae2:	61fb      	str	r3, [r7, #28]
 800eae4:	e002      	b.n	800eaec <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eae6:	f06f 0302 	mvn.w	r3, #2
 800eaea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eaec:	69fb      	ldr	r3, [r7, #28]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3720      	adds	r7, #32
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	2000a140 	.word	0x2000a140

0800eafc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b088      	sub	sp, #32
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f023 0301 	bic.w	r3, r3, #1
 800eb0a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb18:	f3ef 8305 	mrs	r3, IPSR
 800eb1c:	613b      	str	r3, [r7, #16]
  return(result);
 800eb1e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10f      	bne.n	800eb44 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb24:	f3ef 8310 	mrs	r3, PRIMASK
 800eb28:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d105      	bne.n	800eb3c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb30:	f3ef 8311 	mrs	r3, BASEPRI
 800eb34:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d007      	beq.n	800eb4c <osMutexRelease+0x50>
 800eb3c:	4b16      	ldr	r3, [pc, #88]	@ (800eb98 <osMutexRelease+0x9c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d103      	bne.n	800eb4c <osMutexRelease+0x50>
    stat = osErrorISR;
 800eb44:	f06f 0305 	mvn.w	r3, #5
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	e01f      	b.n	800eb8c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800eb52:	f06f 0303 	mvn.w	r3, #3
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	e018      	b.n	800eb8c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eb60:	69b8      	ldr	r0, [r7, #24]
 800eb62:	f000 fd6f 	bl	800f644 <xQueueGiveMutexRecursive>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d00f      	beq.n	800eb8c <osMutexRelease+0x90>
        stat = osErrorResource;
 800eb6c:	f06f 0302 	mvn.w	r3, #2
 800eb70:	61fb      	str	r3, [r7, #28]
 800eb72:	e00b      	b.n	800eb8c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eb74:	2300      	movs	r3, #0
 800eb76:	2200      	movs	r2, #0
 800eb78:	2100      	movs	r1, #0
 800eb7a:	69b8      	ldr	r0, [r7, #24]
 800eb7c:	f000 fe48 	bl	800f810 <xQueueGenericSend>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d002      	beq.n	800eb8c <osMutexRelease+0x90>
        stat = osErrorResource;
 800eb86:	f06f 0302 	mvn.w	r3, #2
 800eb8a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800eb8c:	69fb      	ldr	r3, [r7, #28]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3720      	adds	r7, #32
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	2000a140 	.word	0x2000a140

0800eb9c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b08c      	sub	sp, #48	@ 0x30
 800eba0:	af02      	add	r7, sp, #8
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebac:	f3ef 8305 	mrs	r3, IPSR
 800ebb0:	61bb      	str	r3, [r7, #24]
  return(result);
 800ebb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f040 8086 	bne.w	800ecc6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebba:	f3ef 8310 	mrs	r3, PRIMASK
 800ebbe:	617b      	str	r3, [r7, #20]
  return(result);
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d105      	bne.n	800ebd2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebc6:	f3ef 8311 	mrs	r3, BASEPRI
 800ebca:	613b      	str	r3, [r7, #16]
  return(result);
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <osSemaphoreNew+0x3e>
 800ebd2:	4b3f      	ldr	r3, [pc, #252]	@ (800ecd0 <osSemaphoreNew+0x134>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d075      	beq.n	800ecc6 <osSemaphoreNew+0x12a>
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d072      	beq.n	800ecc6 <osSemaphoreNew+0x12a>
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d86e      	bhi.n	800ecc6 <osSemaphoreNew+0x12a>
    mem = -1;
 800ebe8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d015      	beq.n	800ec20 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d006      	beq.n	800ec0a <osSemaphoreNew+0x6e>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	2b4f      	cmp	r3, #79	@ 0x4f
 800ec02:	d902      	bls.n	800ec0a <osSemaphoreNew+0x6e>
        mem = 1;
 800ec04:	2301      	movs	r3, #1
 800ec06:	623b      	str	r3, [r7, #32]
 800ec08:	e00c      	b.n	800ec24 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d108      	bne.n	800ec24 <osSemaphoreNew+0x88>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d104      	bne.n	800ec24 <osSemaphoreNew+0x88>
          mem = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	623b      	str	r3, [r7, #32]
 800ec1e:	e001      	b.n	800ec24 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2a:	d04c      	beq.n	800ecc6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d128      	bne.n	800ec84 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ec32:	6a3b      	ldr	r3, [r7, #32]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d10a      	bne.n	800ec4e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	2203      	movs	r2, #3
 800ec3e:	9200      	str	r2, [sp, #0]
 800ec40:	2200      	movs	r2, #0
 800ec42:	2100      	movs	r1, #0
 800ec44:	2001      	movs	r0, #1
 800ec46:	f000 fbc3 	bl	800f3d0 <xQueueGenericCreateStatic>
 800ec4a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec4c:	e005      	b.n	800ec5a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ec4e:	2203      	movs	r2, #3
 800ec50:	2100      	movs	r1, #0
 800ec52:	2001      	movs	r0, #1
 800ec54:	f000 fc43 	bl	800f4de <xQueueGenericCreate>
 800ec58:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d022      	beq.n	800eca6 <osSemaphoreNew+0x10a>
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d01f      	beq.n	800eca6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec66:	2300      	movs	r3, #0
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec6e:	f000 fdcf 	bl	800f810 <xQueueGenericSend>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d016      	beq.n	800eca6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ec78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec7a:	f001 fa97 	bl	80101ac <vQueueDelete>
            hSemaphore = NULL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec82:	e010      	b.n	800eca6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d108      	bne.n	800ec9c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	68b9      	ldr	r1, [r7, #8]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f000 fd46 	bl	800f724 <xQueueCreateCountingSemaphoreStatic>
 800ec98:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec9a:	e004      	b.n	800eca6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ec9c:	68b9      	ldr	r1, [r7, #8]
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f000 fd7d 	bl	800f79e <xQueueCreateCountingSemaphore>
 800eca4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00c      	beq.n	800ecc6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <osSemaphoreNew+0x11e>
          name = attr->name;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	61fb      	str	r3, [r7, #28]
 800ecb8:	e001      	b.n	800ecbe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ecbe:	69f9      	ldr	r1, [r7, #28]
 800ecc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecc2:	f001 fbc1 	bl	8010448 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3728      	adds	r7, #40	@ 0x28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	2000a140 	.word	0x2000a140

0800ecd4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d103      	bne.n	800ecf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ecec:	f06f 0303 	mvn.w	r3, #3
 800ecf0:	61fb      	str	r3, [r7, #28]
 800ecf2:	e04b      	b.n	800ed8c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecf4:	f3ef 8305 	mrs	r3, IPSR
 800ecf8:	617b      	str	r3, [r7, #20]
  return(result);
 800ecfa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10f      	bne.n	800ed20 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed00:	f3ef 8310 	mrs	r3, PRIMASK
 800ed04:	613b      	str	r3, [r7, #16]
  return(result);
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d105      	bne.n	800ed18 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed0c:	f3ef 8311 	mrs	r3, BASEPRI
 800ed10:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d026      	beq.n	800ed66 <osSemaphoreAcquire+0x92>
 800ed18:	4b1f      	ldr	r3, [pc, #124]	@ (800ed98 <osSemaphoreAcquire+0xc4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d122      	bne.n	800ed66 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d003      	beq.n	800ed2e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ed26:	f06f 0303 	mvn.w	r3, #3
 800ed2a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ed2c:	e02d      	b.n	800ed8a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ed32:	f107 0308 	add.w	r3, r7, #8
 800ed36:	461a      	mov	r2, r3
 800ed38:	2100      	movs	r1, #0
 800ed3a:	69b8      	ldr	r0, [r7, #24]
 800ed3c:	f001 f9ae 	bl	801009c <xQueueReceiveFromISR>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d003      	beq.n	800ed4e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ed46:	f06f 0302 	mvn.w	r3, #2
 800ed4a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ed4c:	e01d      	b.n	800ed8a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d01a      	beq.n	800ed8a <osSemaphoreAcquire+0xb6>
 800ed54:	4b11      	ldr	r3, [pc, #68]	@ (800ed9c <osSemaphoreAcquire+0xc8>)
 800ed56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed5a:	601a      	str	r2, [r3, #0]
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ed64:	e011      	b.n	800ed8a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	69b8      	ldr	r0, [r7, #24]
 800ed6a:	f001 f87f 	bl	800fe6c <xQueueSemaphoreTake>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d00b      	beq.n	800ed8c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ed7a:	f06f 0301 	mvn.w	r3, #1
 800ed7e:	61fb      	str	r3, [r7, #28]
 800ed80:	e004      	b.n	800ed8c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ed82:	f06f 0302 	mvn.w	r3, #2
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	e000      	b.n	800ed8c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ed8a:	bf00      	nop
      }
    }
  }

  return (stat);
 800ed8c:	69fb      	ldr	r3, [r7, #28]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3720      	adds	r7, #32
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	2000a140 	.word	0x2000a140
 800ed9c:	e000ed04 	.word	0xe000ed04

0800eda0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b088      	sub	sp, #32
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800edac:	2300      	movs	r3, #0
 800edae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d103      	bne.n	800edbe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800edb6:	f06f 0303 	mvn.w	r3, #3
 800edba:	61fb      	str	r3, [r7, #28]
 800edbc:	e03e      	b.n	800ee3c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edbe:	f3ef 8305 	mrs	r3, IPSR
 800edc2:	617b      	str	r3, [r7, #20]
  return(result);
 800edc4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10f      	bne.n	800edea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edca:	f3ef 8310 	mrs	r3, PRIMASK
 800edce:	613b      	str	r3, [r7, #16]
  return(result);
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d105      	bne.n	800ede2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edd6:	f3ef 8311 	mrs	r3, BASEPRI
 800edda:	60fb      	str	r3, [r7, #12]
  return(result);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d01e      	beq.n	800ee20 <osSemaphoreRelease+0x80>
 800ede2:	4b19      	ldr	r3, [pc, #100]	@ (800ee48 <osSemaphoreRelease+0xa8>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d11a      	bne.n	800ee20 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800edea:	2300      	movs	r3, #0
 800edec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800edee:	f107 0308 	add.w	r3, r7, #8
 800edf2:	4619      	mov	r1, r3
 800edf4:	69b8      	ldr	r0, [r7, #24]
 800edf6:	f000 feb8 	bl	800fb6a <xQueueGiveFromISR>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d003      	beq.n	800ee08 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ee00:	f06f 0302 	mvn.w	r3, #2
 800ee04:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee06:	e018      	b.n	800ee3a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d015      	beq.n	800ee3a <osSemaphoreRelease+0x9a>
 800ee0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ee4c <osSemaphoreRelease+0xac>)
 800ee10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee1e:	e00c      	b.n	800ee3a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee20:	2300      	movs	r3, #0
 800ee22:	2200      	movs	r2, #0
 800ee24:	2100      	movs	r1, #0
 800ee26:	69b8      	ldr	r0, [r7, #24]
 800ee28:	f000 fcf2 	bl	800f810 <xQueueGenericSend>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d004      	beq.n	800ee3c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ee32:	f06f 0302 	mvn.w	r3, #2
 800ee36:	61fb      	str	r3, [r7, #28]
 800ee38:	e000      	b.n	800ee3c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee3a:	bf00      	nop
    }
  }

  return (stat);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3720      	adds	r7, #32
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2000a140 	.word	0x2000a140
 800ee4c:	e000ed04 	.word	0xe000ed04

0800ee50 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b08c      	sub	sp, #48	@ 0x30
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee60:	f3ef 8305 	mrs	r3, IPSR
 800ee64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d16f      	bne.n	800ef4c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee70:	617b      	str	r3, [r7, #20]
  return(result);
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d105      	bne.n	800ee84 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee78:	f3ef 8311 	mrs	r3, BASEPRI
 800ee7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d003      	beq.n	800ee8c <osMessageQueueNew+0x3c>
 800ee84:	4b34      	ldr	r3, [pc, #208]	@ (800ef58 <osMessageQueueNew+0x108>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d05f      	beq.n	800ef4c <osMessageQueueNew+0xfc>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d05c      	beq.n	800ef4c <osMessageQueueNew+0xfc>
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d059      	beq.n	800ef4c <osMessageQueueNew+0xfc>
    mem = -1;
 800ee98:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d029      	beq.n	800eef8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d012      	beq.n	800eed2 <osMessageQueueNew+0x82>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	2b4f      	cmp	r3, #79	@ 0x4f
 800eeb2:	d90e      	bls.n	800eed2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00a      	beq.n	800eed2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	695a      	ldr	r2, [r3, #20]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	fb01 f303 	mul.w	r3, r1, r3
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d302      	bcc.n	800eed2 <osMessageQueueNew+0x82>
        mem = 1;
 800eecc:	2301      	movs	r3, #1
 800eece:	623b      	str	r3, [r7, #32]
 800eed0:	e014      	b.n	800eefc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d110      	bne.n	800eefc <osMessageQueueNew+0xac>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10c      	bne.n	800eefc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d108      	bne.n	800eefc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	695b      	ldr	r3, [r3, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d104      	bne.n	800eefc <osMessageQueueNew+0xac>
          mem = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	623b      	str	r3, [r7, #32]
 800eef6:	e001      	b.n	800eefc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d10b      	bne.n	800ef1a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	691a      	ldr	r2, [r3, #16]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	9100      	str	r1, [sp, #0]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f000 fa5d 	bl	800f3d0 <xQueueGenericCreateStatic>
 800ef16:	6278      	str	r0, [r7, #36]	@ 0x24
 800ef18:	e008      	b.n	800ef2c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d105      	bne.n	800ef2c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ef20:	2200      	movs	r2, #0
 800ef22:	68b9      	ldr	r1, [r7, #8]
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f000 fada 	bl	800f4de <xQueueGenericCreate>
 800ef2a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d00c      	beq.n	800ef4c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d003      	beq.n	800ef40 <osMessageQueueNew+0xf0>
        name = attr->name;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	61fb      	str	r3, [r7, #28]
 800ef3e:	e001      	b.n	800ef44 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ef40:	2300      	movs	r3, #0
 800ef42:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ef44:	69f9      	ldr	r1, [r7, #28]
 800ef46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef48:	f001 fa7e 	bl	8010448 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3728      	adds	r7, #40	@ 0x28
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	2000a140 	.word	0x2000a140

0800ef5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08a      	sub	sp, #40	@ 0x28
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	603b      	str	r3, [r7, #0]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef74:	f3ef 8305 	mrs	r3, IPSR
 800ef78:	61fb      	str	r3, [r7, #28]
  return(result);
 800ef7a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10f      	bne.n	800efa0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef80:	f3ef 8310 	mrs	r3, PRIMASK
 800ef84:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d105      	bne.n	800ef98 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef8c:	f3ef 8311 	mrs	r3, BASEPRI
 800ef90:	617b      	str	r3, [r7, #20]
  return(result);
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d02c      	beq.n	800eff2 <osMessageQueuePut+0x96>
 800ef98:	4b28      	ldr	r3, [pc, #160]	@ (800f03c <osMessageQueuePut+0xe0>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d128      	bne.n	800eff2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d005      	beq.n	800efb2 <osMessageQueuePut+0x56>
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <osMessageQueuePut+0x56>
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d003      	beq.n	800efba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800efb2:	f06f 0303 	mvn.w	r3, #3
 800efb6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efb8:	e039      	b.n	800f02e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800efba:	2300      	movs	r3, #0
 800efbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800efbe:	f107 0210 	add.w	r2, r7, #16
 800efc2:	2300      	movs	r3, #0
 800efc4:	68b9      	ldr	r1, [r7, #8]
 800efc6:	6a38      	ldr	r0, [r7, #32]
 800efc8:	f000 fd2c 	bl	800fa24 <xQueueGenericSendFromISR>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d003      	beq.n	800efda <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800efd2:	f06f 0302 	mvn.w	r3, #2
 800efd6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efd8:	e029      	b.n	800f02e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d026      	beq.n	800f02e <osMessageQueuePut+0xd2>
 800efe0:	4b17      	ldr	r3, [pc, #92]	@ (800f040 <osMessageQueuePut+0xe4>)
 800efe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eff0:	e01d      	b.n	800f02e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d002      	beq.n	800effe <osMessageQueuePut+0xa2>
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d103      	bne.n	800f006 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800effe:	f06f 0303 	mvn.w	r3, #3
 800f002:	627b      	str	r3, [r7, #36]	@ 0x24
 800f004:	e014      	b.n	800f030 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f006:	2300      	movs	r3, #0
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	6a38      	ldr	r0, [r7, #32]
 800f00e:	f000 fbff 	bl	800f810 <xQueueGenericSend>
 800f012:	4603      	mov	r3, r0
 800f014:	2b01      	cmp	r3, #1
 800f016:	d00b      	beq.n	800f030 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d003      	beq.n	800f026 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f01e:	f06f 0301 	mvn.w	r3, #1
 800f022:	627b      	str	r3, [r7, #36]	@ 0x24
 800f024:	e004      	b.n	800f030 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f026:	f06f 0302 	mvn.w	r3, #2
 800f02a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f02c:	e000      	b.n	800f030 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f02e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f032:	4618      	mov	r0, r3
 800f034:	3728      	adds	r7, #40	@ 0x28
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	2000a140 	.word	0x2000a140
 800f040:	e000ed04 	.word	0xe000ed04

0800f044 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f044:	b580      	push	{r7, lr}
 800f046:	b08a      	sub	sp, #40	@ 0x28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f056:	2300      	movs	r3, #0
 800f058:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f05a:	f3ef 8305 	mrs	r3, IPSR
 800f05e:	61fb      	str	r3, [r7, #28]
  return(result);
 800f060:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10f      	bne.n	800f086 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f066:	f3ef 8310 	mrs	r3, PRIMASK
 800f06a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d105      	bne.n	800f07e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f072:	f3ef 8311 	mrs	r3, BASEPRI
 800f076:	617b      	str	r3, [r7, #20]
  return(result);
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d02c      	beq.n	800f0d8 <osMessageQueueGet+0x94>
 800f07e:	4b28      	ldr	r3, [pc, #160]	@ (800f120 <osMessageQueueGet+0xdc>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b02      	cmp	r3, #2
 800f084:	d128      	bne.n	800f0d8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d005      	beq.n	800f098 <osMessageQueueGet+0x54>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d002      	beq.n	800f098 <osMessageQueueGet+0x54>
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d003      	beq.n	800f0a0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f098:	f06f 0303 	mvn.w	r3, #3
 800f09c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f09e:	e038      	b.n	800f112 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f0a4:	f107 0310 	add.w	r3, r7, #16
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	68b9      	ldr	r1, [r7, #8]
 800f0ac:	6a38      	ldr	r0, [r7, #32]
 800f0ae:	f000 fff5 	bl	801009c <xQueueReceiveFromISR>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d003      	beq.n	800f0c0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f0b8:	f06f 0302 	mvn.w	r3, #2
 800f0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0be:	e028      	b.n	800f112 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d025      	beq.n	800f112 <osMessageQueueGet+0xce>
 800f0c6:	4b17      	ldr	r3, [pc, #92]	@ (800f124 <osMessageQueueGet+0xe0>)
 800f0c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0d6:	e01c      	b.n	800f112 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f0d8:	6a3b      	ldr	r3, [r7, #32]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <osMessageQueueGet+0xa0>
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d103      	bne.n	800f0ec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f0e4:	f06f 0303 	mvn.w	r3, #3
 800f0e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0ea:	e013      	b.n	800f114 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f0ec:	683a      	ldr	r2, [r7, #0]
 800f0ee:	68b9      	ldr	r1, [r7, #8]
 800f0f0:	6a38      	ldr	r0, [r7, #32]
 800f0f2:	f000 fdd3 	bl	800fc9c <xQueueReceive>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d00b      	beq.n	800f114 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f102:	f06f 0301 	mvn.w	r3, #1
 800f106:	627b      	str	r3, [r7, #36]	@ 0x24
 800f108:	e004      	b.n	800f114 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f10a:	f06f 0302 	mvn.w	r3, #2
 800f10e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f110:	e000      	b.n	800f114 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f112:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f116:	4618      	mov	r0, r3
 800f118:	3728      	adds	r7, #40	@ 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	2000a140 	.word	0x2000a140
 800f124:	e000ed04 	.word	0xe000ed04

0800f128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4a07      	ldr	r2, [pc, #28]	@ (800f154 <vApplicationGetIdleTaskMemory+0x2c>)
 800f138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	4a06      	ldr	r2, [pc, #24]	@ (800f158 <vApplicationGetIdleTaskMemory+0x30>)
 800f13e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f146:	601a      	str	r2, [r3, #0]
}
 800f148:	bf00      	nop
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	2000a144 	.word	0x2000a144
 800f158:	2000a1ec 	.word	0x2000a1ec

0800f15c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4a07      	ldr	r2, [pc, #28]	@ (800f188 <vApplicationGetTimerTaskMemory+0x2c>)
 800f16c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	4a06      	ldr	r2, [pc, #24]	@ (800f18c <vApplicationGetTimerTaskMemory+0x30>)
 800f172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f17a:	601a      	str	r2, [r3, #0]
}
 800f17c:	bf00      	nop
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	2000a5ec 	.word	0x2000a5ec
 800f18c:	2000a694 	.word	0x2000a694

0800f190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f103 0208 	add.w	r2, r3, #8
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f103 0208 	add.w	r2, r3, #8
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f103 0208 	add.w	r2, r3, #8
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1de:	bf00      	nop
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b085      	sub	sp, #20
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	689a      	ldr	r2, [r3, #8]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	683a      	ldr	r2, [r7, #0]
 800f20e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	601a      	str	r2, [r3, #0]
}
 800f226:	bf00      	nop
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr

0800f232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f232:	b480      	push	{r7}
 800f234:	b085      	sub	sp, #20
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f248:	d103      	bne.n	800f252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	60fb      	str	r3, [r7, #12]
 800f250:	e00c      	b.n	800f26c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	3308      	adds	r3, #8
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	e002      	b.n	800f260 <vListInsert+0x2e>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d2f6      	bcs.n	800f25a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	683a      	ldr	r2, [r7, #0]
 800f27a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	1c5a      	adds	r2, r3, #1
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	601a      	str	r2, [r3, #0]
}
 800f298:	bf00      	nop
 800f29a:	3714      	adds	r7, #20
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	6892      	ldr	r2, [r2, #8]
 800f2ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	6852      	ldr	r2, [r2, #4]
 800f2c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d103      	bne.n	800f2d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689a      	ldr	r2, [r3, #8]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	1e5a      	subs	r2, r3, #1
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d10d      	bne.n	800f328 <xQueueGenericReset+0x30>
	__asm volatile
 800f30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f310:	b672      	cpsid	i
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	b662      	cpsie	i
 800f320:	60bb      	str	r3, [r7, #8]
}
 800f322:	bf00      	nop
 800f324:	bf00      	nop
 800f326:	e7fd      	b.n	800f324 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f328:	f002 ff48 	bl	80121bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f334:	68f9      	ldr	r1, [r7, #12]
 800f336:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f338:	fb01 f303 	mul.w	r3, r1, r3
 800f33c:	441a      	add	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2200      	movs	r2, #0
 800f346:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f358:	3b01      	subs	r3, #1
 800f35a:	68f9      	ldr	r1, [r7, #12]
 800f35c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f35e:	fb01 f303 	mul.w	r3, r1, r3
 800f362:	441a      	add	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	22ff      	movs	r2, #255	@ 0xff
 800f36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	22ff      	movs	r2, #255	@ 0xff
 800f374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d114      	bne.n	800f3a8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d01a      	beq.n	800f3bc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	3310      	adds	r3, #16
 800f38a:	4618      	mov	r0, r3
 800f38c:	f001 fdc4 	bl	8010f18 <xTaskRemoveFromEventList>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d012      	beq.n	800f3bc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f396:	4b0d      	ldr	r3, [pc, #52]	@ (800f3cc <xQueueGenericReset+0xd4>)
 800f398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	e009      	b.n	800f3bc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	3310      	adds	r3, #16
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7ff feef 	bl	800f190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3324      	adds	r3, #36	@ 0x24
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff feea 	bl	800f190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3bc:	f002 ff34 	bl	8012228 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f3c0:	2301      	movs	r3, #1
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	e000ed04 	.word	0xe000ed04

0800f3d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08e      	sub	sp, #56	@ 0x38
 800f3d4:	af02      	add	r7, sp, #8
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10d      	bne.n	800f400 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e8:	b672      	cpsid	i
 800f3ea:	f383 8811 	msr	BASEPRI, r3
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f3bf 8f4f 	dsb	sy
 800f3f6:	b662      	cpsie	i
 800f3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f3fa:	bf00      	nop
 800f3fc:	bf00      	nop
 800f3fe:	e7fd      	b.n	800f3fc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10d      	bne.n	800f422 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40a:	b672      	cpsid	i
 800f40c:	f383 8811 	msr	BASEPRI, r3
 800f410:	f3bf 8f6f 	isb	sy
 800f414:	f3bf 8f4f 	dsb	sy
 800f418:	b662      	cpsie	i
 800f41a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	e7fd      	b.n	800f41e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d002      	beq.n	800f42e <xQueueGenericCreateStatic+0x5e>
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d001      	beq.n	800f432 <xQueueGenericCreateStatic+0x62>
 800f42e:	2301      	movs	r3, #1
 800f430:	e000      	b.n	800f434 <xQueueGenericCreateStatic+0x64>
 800f432:	2300      	movs	r3, #0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10d      	bne.n	800f454 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43c:	b672      	cpsid	i
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	b662      	cpsie	i
 800f44c:	623b      	str	r3, [r7, #32]
}
 800f44e:	bf00      	nop
 800f450:	bf00      	nop
 800f452:	e7fd      	b.n	800f450 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <xQueueGenericCreateStatic+0x90>
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <xQueueGenericCreateStatic+0x94>
 800f460:	2301      	movs	r3, #1
 800f462:	e000      	b.n	800f466 <xQueueGenericCreateStatic+0x96>
 800f464:	2300      	movs	r3, #0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10d      	bne.n	800f486 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46e:	b672      	cpsid	i
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	b662      	cpsie	i
 800f47e:	61fb      	str	r3, [r7, #28]
}
 800f480:	bf00      	nop
 800f482:	bf00      	nop
 800f484:	e7fd      	b.n	800f482 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f486:	2350      	movs	r3, #80	@ 0x50
 800f488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	2b50      	cmp	r3, #80	@ 0x50
 800f48e:	d00d      	beq.n	800f4ac <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f494:	b672      	cpsid	i
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	b662      	cpsie	i
 800f4a4:	61bb      	str	r3, [r7, #24]
}
 800f4a6:	bf00      	nop
 800f4a8:	bf00      	nop
 800f4aa:	e7fd      	b.n	800f4a8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f4ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00d      	beq.n	800f4d4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 f848 	bl	800f564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3730      	adds	r7, #48	@ 0x30
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b08a      	sub	sp, #40	@ 0x28
 800f4e2:	af02      	add	r7, sp, #8
 800f4e4:	60f8      	str	r0, [r7, #12]
 800f4e6:	60b9      	str	r1, [r7, #8]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10d      	bne.n	800f50e <xQueueGenericCreate+0x30>
	__asm volatile
 800f4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f6:	b672      	cpsid	i
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	b662      	cpsie	i
 800f506:	613b      	str	r3, [r7, #16]
}
 800f508:	bf00      	nop
 800f50a:	bf00      	nop
 800f50c:	e7fd      	b.n	800f50a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f514:	2300      	movs	r3, #0
 800f516:	61fb      	str	r3, [r7, #28]
 800f518:	e004      	b.n	800f524 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	fb02 f303 	mul.w	r3, r2, r3
 800f522:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	3350      	adds	r3, #80	@ 0x50
 800f528:	4618      	mov	r0, r3
 800f52a:	f002 ff75 	bl	8012418 <pvPortMalloc>
 800f52e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d011      	beq.n	800f55a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	3350      	adds	r3, #80	@ 0x50
 800f53e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	2200      	movs	r2, #0
 800f544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f548:	79fa      	ldrb	r2, [r7, #7]
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	4613      	mov	r3, r2
 800f550:	697a      	ldr	r2, [r7, #20]
 800f552:	68b9      	ldr	r1, [r7, #8]
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f000 f805 	bl	800f564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f55a:	69bb      	ldr	r3, [r7, #24]
	}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3720      	adds	r7, #32
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d103      	bne.n	800f580 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	69ba      	ldr	r2, [r7, #24]
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	e002      	b.n	800f586 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f592:	2101      	movs	r1, #1
 800f594:	69b8      	ldr	r0, [r7, #24]
 800f596:	f7ff feaf 	bl	800f2f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	78fa      	ldrb	r2, [r7, #3]
 800f59e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5a2:	bf00      	nop
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00e      	beq.n	800f5d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f91d 	bl	800f810 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5d6:	bf00      	nop
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	617b      	str	r3, [r7, #20]
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f5f0:	79fb      	ldrb	r3, [r7, #7]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	6939      	ldr	r1, [r7, #16]
 800f5f6:	6978      	ldr	r0, [r7, #20]
 800f5f8:	f7ff ff71 	bl	800f4de <xQueueGenericCreate>
 800f5fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f7ff ffd3 	bl	800f5aa <prvInitialiseMutex>

		return xNewQueue;
 800f604:	68fb      	ldr	r3, [r7, #12]
	}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b088      	sub	sp, #32
 800f612:	af02      	add	r7, sp, #8
 800f614:	4603      	mov	r3, r0
 800f616:	6039      	str	r1, [r7, #0]
 800f618:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f61a:	2301      	movs	r3, #1
 800f61c:	617b      	str	r3, [r7, #20]
 800f61e:	2300      	movs	r3, #0
 800f620:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	2200      	movs	r2, #0
 800f62a:	6939      	ldr	r1, [r7, #16]
 800f62c:	6978      	ldr	r0, [r7, #20]
 800f62e:	f7ff fecf 	bl	800f3d0 <xQueueGenericCreateStatic>
 800f632:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f7ff ffb8 	bl	800f5aa <prvInitialiseMutex>

		return xNewQueue;
 800f63a:	68fb      	ldr	r3, [r7, #12]
	}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3718      	adds	r7, #24
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f644:	b590      	push	{r4, r7, lr}
 800f646:	b087      	sub	sp, #28
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10d      	bne.n	800f672 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800f656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65a:	b672      	cpsid	i
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	b662      	cpsie	i
 800f66a:	60fb      	str	r3, [r7, #12]
}
 800f66c:	bf00      	nop
 800f66e:	bf00      	nop
 800f670:	e7fd      	b.n	800f66e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	689c      	ldr	r4, [r3, #8]
 800f676:	f001 fe1d 	bl	80112b4 <xTaskGetCurrentTaskHandle>
 800f67a:	4603      	mov	r3, r0
 800f67c:	429c      	cmp	r4, r3
 800f67e:	d111      	bne.n	800f6a4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	1e5a      	subs	r2, r3, #1
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d105      	bne.n	800f69e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f692:	2300      	movs	r3, #0
 800f694:	2200      	movs	r2, #0
 800f696:	2100      	movs	r1, #0
 800f698:	6938      	ldr	r0, [r7, #16]
 800f69a:	f000 f8b9 	bl	800f810 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	e001      	b.n	800f6a8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f6a8:	697b      	ldr	r3, [r7, #20]
	}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	371c      	adds	r7, #28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd90      	pop	{r4, r7, pc}

0800f6b2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f6b2:	b590      	push	{r4, r7, lr}
 800f6b4:	b087      	sub	sp, #28
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d10d      	bne.n	800f6e2 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800f6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ca:	b672      	cpsid	i
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	b662      	cpsie	i
 800f6da:	60fb      	str	r3, [r7, #12]
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	e7fd      	b.n	800f6de <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	689c      	ldr	r4, [r3, #8]
 800f6e6:	f001 fde5 	bl	80112b4 <xTaskGetCurrentTaskHandle>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	d107      	bne.n	800f700 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	617b      	str	r3, [r7, #20]
 800f6fe:	e00c      	b.n	800f71a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f000 fbb2 	bl	800fe6c <xQueueSemaphoreTake>
 800f708:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d004      	beq.n	800f71a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f71a:	697b      	ldr	r3, [r7, #20]
	}
 800f71c:	4618      	mov	r0, r3
 800f71e:	371c      	adds	r7, #28
 800f720:	46bd      	mov	sp, r7
 800f722:	bd90      	pop	{r4, r7, pc}

0800f724 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08a      	sub	sp, #40	@ 0x28
 800f728:	af02      	add	r7, sp, #8
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d10d      	bne.n	800f752 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800f736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73a:	b672      	cpsid	i
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	b662      	cpsie	i
 800f74a:	61bb      	str	r3, [r7, #24]
}
 800f74c:	bf00      	nop
 800f74e:	bf00      	nop
 800f750:	e7fd      	b.n	800f74e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	429a      	cmp	r2, r3
 800f758:	d90d      	bls.n	800f776 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75e:	b672      	cpsid	i
 800f760:	f383 8811 	msr	BASEPRI, r3
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	b662      	cpsie	i
 800f76e:	617b      	str	r3, [r7, #20]
}
 800f770:	bf00      	nop
 800f772:	bf00      	nop
 800f774:	e7fd      	b.n	800f772 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f776:	2302      	movs	r3, #2
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	2100      	movs	r1, #0
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff fe25 	bl	800f3d0 <xQueueGenericCreateStatic>
 800f786:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d002      	beq.n	800f794 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f794:	69fb      	ldr	r3, [r7, #28]
	}
 800f796:	4618      	mov	r0, r3
 800f798:	3720      	adds	r7, #32
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b086      	sub	sp, #24
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d10d      	bne.n	800f7ca <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b2:	b672      	cpsid	i
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	b662      	cpsie	i
 800f7c2:	613b      	str	r3, [r7, #16]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d90d      	bls.n	800f7ee <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d6:	b672      	cpsid	i
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	b662      	cpsie	i
 800f7e6:	60fb      	str	r3, [r7, #12]
}
 800f7e8:	bf00      	nop
 800f7ea:	bf00      	nop
 800f7ec:	e7fd      	b.n	800f7ea <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7ee:	2202      	movs	r2, #2
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff fe73 	bl	800f4de <xQueueGenericCreate>
 800f7f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f806:	697b      	ldr	r3, [r7, #20]
	}
 800f808:	4618      	mov	r0, r3
 800f80a:	3718      	adds	r7, #24
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08e      	sub	sp, #56	@ 0x38
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f81e:	2300      	movs	r3, #0
 800f820:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10d      	bne.n	800f848 <xQueueGenericSend+0x38>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f830:	b672      	cpsid	i
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	b662      	cpsie	i
 800f840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f842:	bf00      	nop
 800f844:	bf00      	nop
 800f846:	e7fd      	b.n	800f844 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d103      	bne.n	800f856 <xQueueGenericSend+0x46>
 800f84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f852:	2b00      	cmp	r3, #0
 800f854:	d101      	bne.n	800f85a <xQueueGenericSend+0x4a>
 800f856:	2301      	movs	r3, #1
 800f858:	e000      	b.n	800f85c <xQueueGenericSend+0x4c>
 800f85a:	2300      	movs	r3, #0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10d      	bne.n	800f87c <xQueueGenericSend+0x6c>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f864:	b672      	cpsid	i
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	b662      	cpsie	i
 800f874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f876:	bf00      	nop
 800f878:	bf00      	nop
 800f87a:	e7fd      	b.n	800f878 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	2b02      	cmp	r3, #2
 800f880:	d103      	bne.n	800f88a <xQueueGenericSend+0x7a>
 800f882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f886:	2b01      	cmp	r3, #1
 800f888:	d101      	bne.n	800f88e <xQueueGenericSend+0x7e>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e000      	b.n	800f890 <xQueueGenericSend+0x80>
 800f88e:	2300      	movs	r3, #0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d10d      	bne.n	800f8b0 <xQueueGenericSend+0xa0>
	__asm volatile
 800f894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f898:	b672      	cpsid	i
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	b662      	cpsie	i
 800f8a8:	623b      	str	r3, [r7, #32]
}
 800f8aa:	bf00      	nop
 800f8ac:	bf00      	nop
 800f8ae:	e7fd      	b.n	800f8ac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8b0:	f001 fd10 	bl	80112d4 <xTaskGetSchedulerState>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d102      	bne.n	800f8c0 <xQueueGenericSend+0xb0>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d101      	bne.n	800f8c4 <xQueueGenericSend+0xb4>
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e000      	b.n	800f8c6 <xQueueGenericSend+0xb6>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10d      	bne.n	800f8e6 <xQueueGenericSend+0xd6>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ce:	b672      	cpsid	i
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	b662      	cpsie	i
 800f8de:	61fb      	str	r3, [r7, #28]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8e6:	f002 fc69 	bl	80121bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d302      	bcc.n	800f8fc <xQueueGenericSend+0xec>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d129      	bne.n	800f950 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	68b9      	ldr	r1, [r7, #8]
 800f900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f902:	f000 fc91 	bl	8010228 <prvCopyDataToQueue>
 800f906:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d010      	beq.n	800f932 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f912:	3324      	adds	r3, #36	@ 0x24
 800f914:	4618      	mov	r0, r3
 800f916:	f001 faff 	bl	8010f18 <xTaskRemoveFromEventList>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d013      	beq.n	800f948 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f920:	4b3f      	ldr	r3, [pc, #252]	@ (800fa20 <xQueueGenericSend+0x210>)
 800f922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	e00a      	b.n	800f948 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f934:	2b00      	cmp	r3, #0
 800f936:	d007      	beq.n	800f948 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f938:	4b39      	ldr	r3, [pc, #228]	@ (800fa20 <xQueueGenericSend+0x210>)
 800f93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f948:	f002 fc6e 	bl	8012228 <vPortExitCritical>
				return pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e063      	b.n	800fa18 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f956:	f002 fc67 	bl	8012228 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e05c      	b.n	800fa18 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f960:	2b00      	cmp	r3, #0
 800f962:	d106      	bne.n	800f972 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	4618      	mov	r0, r3
 800f96a:	f001 fb3b 	bl	8010fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f96e:	2301      	movs	r3, #1
 800f970:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f972:	f002 fc59 	bl	8012228 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f976:	f001 f861 	bl	8010a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f97a:	f002 fc1f 	bl	80121bc <vPortEnterCritical>
 800f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f984:	b25b      	sxtb	r3, r3
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98a:	d103      	bne.n	800f994 <xQueueGenericSend+0x184>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a0:	d103      	bne.n	800f9aa <xQueueGenericSend+0x19a>
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9aa:	f002 fc3d 	bl	8012228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9ae:	1d3a      	adds	r2, r7, #4
 800f9b0:	f107 0314 	add.w	r3, r7, #20
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f001 fb2a 	bl	8011010 <xTaskCheckForTimeOut>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d124      	bne.n	800fa0c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9c4:	f000 fd28 	bl	8010418 <prvIsQueueFull>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d018      	beq.n	800fa00 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d0:	3310      	adds	r3, #16
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 fa48 	bl	8010e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9de:	f000 fcb3 	bl	8010348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f9e2:	f001 f839 	bl	8010a58 <xTaskResumeAll>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f47f af7c 	bne.w	800f8e6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <xQueueGenericSend+0x210>)
 800f9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f4:	601a      	str	r2, [r3, #0]
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	e772      	b.n	800f8e6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa02:	f000 fca1 	bl	8010348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa06:	f001 f827 	bl	8010a58 <xTaskResumeAll>
 800fa0a:	e76c      	b.n	800f8e6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa0e:	f000 fc9b 	bl	8010348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa12:	f001 f821 	bl	8010a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3738      	adds	r7, #56	@ 0x38
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	e000ed04 	.word	0xe000ed04

0800fa24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08e      	sub	sp, #56	@ 0x38
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10d      	bne.n	800fa58 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa40:	b672      	cpsid	i
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	b662      	cpsie	i
 800fa50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	e7fd      	b.n	800fa54 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d103      	bne.n	800fa66 <xQueueGenericSendFromISR+0x42>
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <xQueueGenericSendFromISR+0x46>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e000      	b.n	800fa6c <xQueueGenericSendFromISR+0x48>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10d      	bne.n	800fa8c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	b672      	cpsid	i
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	b662      	cpsie	i
 800fa84:	623b      	str	r3, [r7, #32]
}
 800fa86:	bf00      	nop
 800fa88:	bf00      	nop
 800fa8a:	e7fd      	b.n	800fa88 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d103      	bne.n	800fa9a <xQueueGenericSendFromISR+0x76>
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d101      	bne.n	800fa9e <xQueueGenericSendFromISR+0x7a>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e000      	b.n	800faa0 <xQueueGenericSendFromISR+0x7c>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10d      	bne.n	800fac0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa8:	b672      	cpsid	i
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	b662      	cpsie	i
 800fab8:	61fb      	str	r3, [r7, #28]
}
 800faba:	bf00      	nop
 800fabc:	bf00      	nop
 800fabe:	e7fd      	b.n	800fabc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fac0:	f002 fc64 	bl	801238c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fac4:	f3ef 8211 	mrs	r2, BASEPRI
 800fac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800facc:	b672      	cpsid	i
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	b662      	cpsie	i
 800fadc:	61ba      	str	r2, [r7, #24]
 800fade:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fae0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faec:	429a      	cmp	r2, r3
 800faee:	d302      	bcc.n	800faf6 <xQueueGenericSendFromISR+0xd2>
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d12c      	bne.n	800fb50 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800faf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fafc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb06:	f000 fb8f 	bl	8010228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb12:	d112      	bne.n	800fb3a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d016      	beq.n	800fb4a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb1e:	3324      	adds	r3, #36	@ 0x24
 800fb20:	4618      	mov	r0, r3
 800fb22:	f001 f9f9 	bl	8010f18 <xTaskRemoveFromEventList>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00e      	beq.n	800fb4a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00b      	beq.n	800fb4a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	601a      	str	r2, [r3, #0]
 800fb38:	e007      	b.n	800fb4a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fb3e:	3301      	adds	r3, #1
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	b25a      	sxtb	r2, r3
 800fb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800fb4e:	e001      	b.n	800fb54 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb50:	2300      	movs	r3, #0
 800fb52:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3738      	adds	r7, #56	@ 0x38
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b08e      	sub	sp, #56	@ 0x38
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10d      	bne.n	800fb9a <xQueueGiveFromISR+0x30>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb82:	b672      	cpsid	i
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	b662      	cpsie	i
 800fb92:	623b      	str	r3, [r7, #32]
}
 800fb94:	bf00      	nop
 800fb96:	bf00      	nop
 800fb98:	e7fd      	b.n	800fb96 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00d      	beq.n	800fbbe <xQueueGiveFromISR+0x54>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba6:	b672      	cpsid	i
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	b662      	cpsie	i
 800fbb6:	61fb      	str	r3, [r7, #28]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d103      	bne.n	800fbce <xQueueGiveFromISR+0x64>
 800fbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <xQueueGiveFromISR+0x68>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e000      	b.n	800fbd4 <xQueueGiveFromISR+0x6a>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10d      	bne.n	800fbf4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbdc:	b672      	cpsid	i
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	b662      	cpsie	i
 800fbec:	61bb      	str	r3, [r7, #24]
}
 800fbee:	bf00      	nop
 800fbf0:	bf00      	nop
 800fbf2:	e7fd      	b.n	800fbf0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbf4:	f002 fbca 	bl	801238c <vPortValidateInterruptPriority>
	__asm volatile
 800fbf8:	f3ef 8211 	mrs	r2, BASEPRI
 800fbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc00:	b672      	cpsid	i
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	b662      	cpsie	i
 800fc10:	617a      	str	r2, [r7, #20]
 800fc12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fc14:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc1c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d22b      	bcs.n	800fc80 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc34:	1c5a      	adds	r2, r3, #1
 800fc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc38:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc42:	d112      	bne.n	800fc6a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d016      	beq.n	800fc7a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4e:	3324      	adds	r3, #36	@ 0x24
 800fc50:	4618      	mov	r0, r3
 800fc52:	f001 f961 	bl	8010f18 <xTaskRemoveFromEventList>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00e      	beq.n	800fc7a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00b      	beq.n	800fc7a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2201      	movs	r2, #1
 800fc66:	601a      	str	r2, [r3, #0]
 800fc68:	e007      	b.n	800fc7a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc6e:	3301      	adds	r3, #1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	b25a      	sxtb	r2, r3
 800fc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc7e:	e001      	b.n	800fc84 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc80:	2300      	movs	r3, #0
 800fc82:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc86:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f383 8811 	msr	BASEPRI, r3
}
 800fc8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3738      	adds	r7, #56	@ 0x38
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
	...

0800fc9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08c      	sub	sp, #48	@ 0x30
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d10d      	bne.n	800fcd2 <xQueueReceive+0x36>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcba:	b672      	cpsid	i
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	b662      	cpsie	i
 800fcca:	623b      	str	r3, [r7, #32]
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <xQueueReceive+0x44>
 800fcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d101      	bne.n	800fce4 <xQueueReceive+0x48>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <xQueueReceive+0x4a>
 800fce4:	2300      	movs	r3, #0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d10d      	bne.n	800fd06 <xQueueReceive+0x6a>
	__asm volatile
 800fcea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcee:	b672      	cpsid	i
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	b662      	cpsie	i
 800fcfe:	61fb      	str	r3, [r7, #28]
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	e7fd      	b.n	800fd02 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd06:	f001 fae5 	bl	80112d4 <xTaskGetSchedulerState>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d102      	bne.n	800fd16 <xQueueReceive+0x7a>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d101      	bne.n	800fd1a <xQueueReceive+0x7e>
 800fd16:	2301      	movs	r3, #1
 800fd18:	e000      	b.n	800fd1c <xQueueReceive+0x80>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10d      	bne.n	800fd3c <xQueueReceive+0xa0>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd24:	b672      	cpsid	i
 800fd26:	f383 8811 	msr	BASEPRI, r3
 800fd2a:	f3bf 8f6f 	isb	sy
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	b662      	cpsie	i
 800fd34:	61bb      	str	r3, [r7, #24]
}
 800fd36:	bf00      	nop
 800fd38:	bf00      	nop
 800fd3a:	e7fd      	b.n	800fd38 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd3c:	f002 fa3e 	bl	80121bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d01f      	beq.n	800fd8c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd4c:	68b9      	ldr	r1, [r7, #8]
 800fd4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd50:	f000 fad4 	bl	80102fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd56:	1e5a      	subs	r2, r3, #1
 800fd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00f      	beq.n	800fd84 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd66:	3310      	adds	r3, #16
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f001 f8d5 	bl	8010f18 <xTaskRemoveFromEventList>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d007      	beq.n	800fd84 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd74:	4b3c      	ldr	r3, [pc, #240]	@ (800fe68 <xQueueReceive+0x1cc>)
 800fd76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd7a:	601a      	str	r2, [r3, #0]
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd84:	f002 fa50 	bl	8012228 <vPortExitCritical>
				return pdPASS;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e069      	b.n	800fe60 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d103      	bne.n	800fd9a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd92:	f002 fa49 	bl	8012228 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd96:	2300      	movs	r3, #0
 800fd98:	e062      	b.n	800fe60 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d106      	bne.n	800fdae <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	4618      	mov	r0, r3
 800fda6:	f001 f91d 	bl	8010fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fdae:	f002 fa3b 	bl	8012228 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fdb2:	f000 fe43 	bl	8010a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdb6:	f002 fa01 	bl	80121bc <vPortEnterCritical>
 800fdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fdc0:	b25b      	sxtb	r3, r3
 800fdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc6:	d103      	bne.n	800fdd0 <xQueueReceive+0x134>
 800fdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdd6:	b25b      	sxtb	r3, r3
 800fdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fddc:	d103      	bne.n	800fde6 <xQueueReceive+0x14a>
 800fdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fde6:	f002 fa1f 	bl	8012228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdea:	1d3a      	adds	r2, r7, #4
 800fdec:	f107 0310 	add.w	r3, r7, #16
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f001 f90c 	bl	8011010 <xTaskCheckForTimeOut>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d123      	bne.n	800fe46 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe00:	f000 faf4 	bl	80103ec <prvIsQueueEmpty>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d017      	beq.n	800fe3a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe0c:	3324      	adds	r3, #36	@ 0x24
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f001 f82a 	bl	8010e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe1a:	f000 fa95 	bl	8010348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe1e:	f000 fe1b 	bl	8010a58 <xTaskResumeAll>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d189      	bne.n	800fd3c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800fe28:	4b0f      	ldr	r3, [pc, #60]	@ (800fe68 <xQueueReceive+0x1cc>)
 800fe2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	e780      	b.n	800fd3c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fe3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe3c:	f000 fa84 	bl	8010348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe40:	f000 fe0a 	bl	8010a58 <xTaskResumeAll>
 800fe44:	e77a      	b.n	800fd3c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fe46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe48:	f000 fa7e 	bl	8010348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe4c:	f000 fe04 	bl	8010a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe52:	f000 facb 	bl	80103ec <prvIsQueueEmpty>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f43f af6f 	beq.w	800fd3c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3730      	adds	r7, #48	@ 0x30
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	e000ed04 	.word	0xe000ed04

0800fe6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b08e      	sub	sp, #56	@ 0x38
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe76:	2300      	movs	r3, #0
 800fe78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10d      	bne.n	800fea4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8c:	b672      	cpsid	i
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	b662      	cpsie	i
 800fe9c:	623b      	str	r3, [r7, #32]
}
 800fe9e:	bf00      	nop
 800fea0:	bf00      	nop
 800fea2:	e7fd      	b.n	800fea0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00d      	beq.n	800fec8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb0:	b672      	cpsid	i
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	b662      	cpsie	i
 800fec0:	61fb      	str	r3, [r7, #28]
}
 800fec2:	bf00      	nop
 800fec4:	bf00      	nop
 800fec6:	e7fd      	b.n	800fec4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fec8:	f001 fa04 	bl	80112d4 <xTaskGetSchedulerState>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d102      	bne.n	800fed8 <xQueueSemaphoreTake+0x6c>
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <xQueueSemaphoreTake+0x70>
 800fed8:	2301      	movs	r3, #1
 800feda:	e000      	b.n	800fede <xQueueSemaphoreTake+0x72>
 800fedc:	2300      	movs	r3, #0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10d      	bne.n	800fefe <xQueueSemaphoreTake+0x92>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee6:	b672      	cpsid	i
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	b662      	cpsie	i
 800fef6:	61bb      	str	r3, [r7, #24]
}
 800fef8:	bf00      	nop
 800fefa:	bf00      	nop
 800fefc:	e7fd      	b.n	800fefa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fefe:	f002 f95d 	bl	80121bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ff02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d024      	beq.n	800ff58 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ff0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff10:	1e5a      	subs	r2, r3, #1
 800ff12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d104      	bne.n	800ff28 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ff1e:	f001 fb5b 	bl	80115d8 <pvTaskIncrementMutexHeldCount>
 800ff22:	4602      	mov	r2, r0
 800ff24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00f      	beq.n	800ff50 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff32:	3310      	adds	r3, #16
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 ffef 	bl	8010f18 <xTaskRemoveFromEventList>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d007      	beq.n	800ff50 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff40:	4b55      	ldr	r3, [pc, #340]	@ (8010098 <xQueueSemaphoreTake+0x22c>)
 800ff42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff46:	601a      	str	r2, [r3, #0]
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff50:	f002 f96a 	bl	8012228 <vPortExitCritical>
				return pdPASS;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e09a      	b.n	801008e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d114      	bne.n	800ff88 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00d      	beq.n	800ff80 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ff64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff68:	b672      	cpsid	i
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	b662      	cpsie	i
 800ff78:	617b      	str	r3, [r7, #20]
}
 800ff7a:	bf00      	nop
 800ff7c:	bf00      	nop
 800ff7e:	e7fd      	b.n	800ff7c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ff80:	f002 f952 	bl	8012228 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff84:	2300      	movs	r3, #0
 800ff86:	e082      	b.n	801008e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff8e:	f107 030c 	add.w	r3, r7, #12
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 f826 	bl	8010fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff9c:	f002 f944 	bl	8012228 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ffa0:	f000 fd4c 	bl	8010a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffa4:	f002 f90a 	bl	80121bc <vPortEnterCritical>
 800ffa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ffae:	b25b      	sxtb	r3, r3
 800ffb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb4:	d103      	bne.n	800ffbe <xQueueSemaphoreTake+0x152>
 800ffb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffc4:	b25b      	sxtb	r3, r3
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffca:	d103      	bne.n	800ffd4 <xQueueSemaphoreTake+0x168>
 800ffcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ffd4:	f002 f928 	bl	8012228 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffd8:	463a      	mov	r2, r7
 800ffda:	f107 030c 	add.w	r3, r7, #12
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f001 f815 	bl	8011010 <xTaskCheckForTimeOut>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d132      	bne.n	8010052 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffee:	f000 f9fd 	bl	80103ec <prvIsQueueEmpty>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d026      	beq.n	8010046 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d109      	bne.n	8010014 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8010000:	f002 f8dc 	bl	80121bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	4618      	mov	r0, r3
 801000a:	f001 f981 	bl	8011310 <xTaskPriorityInherit>
 801000e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010010:	f002 f90a 	bl	8012228 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010016:	3324      	adds	r3, #36	@ 0x24
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	4611      	mov	r1, r2
 801001c:	4618      	mov	r0, r3
 801001e:	f000 ff25 	bl	8010e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010024:	f000 f990 	bl	8010348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010028:	f000 fd16 	bl	8010a58 <xTaskResumeAll>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	f47f af65 	bne.w	800fefe <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8010034:	4b18      	ldr	r3, [pc, #96]	@ (8010098 <xQueueSemaphoreTake+0x22c>)
 8010036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801003a:	601a      	str	r2, [r3, #0]
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	f3bf 8f6f 	isb	sy
 8010044:	e75b      	b.n	800fefe <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010046:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010048:	f000 f97e 	bl	8010348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801004c:	f000 fd04 	bl	8010a58 <xTaskResumeAll>
 8010050:	e755      	b.n	800fefe <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010054:	f000 f978 	bl	8010348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010058:	f000 fcfe 	bl	8010a58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801005c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801005e:	f000 f9c5 	bl	80103ec <prvIsQueueEmpty>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	f43f af4a 	beq.w	800fefe <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801006a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00d      	beq.n	801008c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010070:	f002 f8a4 	bl	80121bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010076:	f000 f8bf 	bl	80101f8 <prvGetDisinheritPriorityAfterTimeout>
 801007a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801007c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010082:	4618      	mov	r0, r3
 8010084:	f001 fa20 	bl	80114c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010088:	f002 f8ce 	bl	8012228 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801008c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801008e:	4618      	mov	r0, r3
 8010090:	3738      	adds	r7, #56	@ 0x38
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	e000ed04 	.word	0xe000ed04

0801009c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b08e      	sub	sp, #56	@ 0x38
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80100ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10d      	bne.n	80100ce <xQueueReceiveFromISR+0x32>
	__asm volatile
 80100b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b6:	b672      	cpsid	i
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	b662      	cpsie	i
 80100c6:	623b      	str	r3, [r7, #32]
}
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	e7fd      	b.n	80100ca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d103      	bne.n	80100dc <xQueueReceiveFromISR+0x40>
 80100d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <xQueueReceiveFromISR+0x44>
 80100dc:	2301      	movs	r3, #1
 80100de:	e000      	b.n	80100e2 <xQueueReceiveFromISR+0x46>
 80100e0:	2300      	movs	r3, #0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10d      	bne.n	8010102 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80100e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ea:	b672      	cpsid	i
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	b662      	cpsie	i
 80100fa:	61fb      	str	r3, [r7, #28]
}
 80100fc:	bf00      	nop
 80100fe:	bf00      	nop
 8010100:	e7fd      	b.n	80100fe <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010102:	f002 f943 	bl	801238c <vPortValidateInterruptPriority>
	__asm volatile
 8010106:	f3ef 8211 	mrs	r2, BASEPRI
 801010a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801010e:	b672      	cpsid	i
 8010110:	f383 8811 	msr	BASEPRI, r3
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	b662      	cpsie	i
 801011e:	61ba      	str	r2, [r7, #24]
 8010120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010124:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801012a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801012c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012e:	2b00      	cmp	r3, #0
 8010130:	d02f      	beq.n	8010192 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801013c:	68b9      	ldr	r1, [r7, #8]
 801013e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010140:	f000 f8dc 	bl	80102fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010146:	1e5a      	subs	r2, r3, #1
 8010148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801014c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010154:	d112      	bne.n	801017c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d016      	beq.n	801018c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801015e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010160:	3310      	adds	r3, #16
 8010162:	4618      	mov	r0, r3
 8010164:	f000 fed8 	bl	8010f18 <xTaskRemoveFromEventList>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00e      	beq.n	801018c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00b      	beq.n	801018c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	e007      	b.n	801018c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801017c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010180:	3301      	adds	r3, #1
 8010182:	b2db      	uxtb	r3, r3
 8010184:	b25a      	sxtb	r2, r3
 8010186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801018c:	2301      	movs	r3, #1
 801018e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010190:	e001      	b.n	8010196 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8010192:	2300      	movs	r3, #0
 8010194:	637b      	str	r3, [r7, #52]	@ 0x34
 8010196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010198:	613b      	str	r3, [r7, #16]
	__asm volatile
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	f383 8811 	msr	BASEPRI, r3
}
 80101a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3738      	adds	r7, #56	@ 0x38
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10d      	bne.n	80101da <vQueueDelete+0x2e>
	__asm volatile
 80101be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c2:	b672      	cpsid	i
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	b662      	cpsie	i
 80101d2:	60bb      	str	r3, [r7, #8]
}
 80101d4:	bf00      	nop
 80101d6:	bf00      	nop
 80101d8:	e7fd      	b.n	80101d6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 f95e 	bl	801049c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d102      	bne.n	80101f0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f002 f9e2 	bl	80125b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80101f0:	bf00      	nop
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010204:	2b00      	cmp	r3, #0
 8010206:	d006      	beq.n	8010216 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8010212:	60fb      	str	r3, [r7, #12]
 8010214:	e001      	b.n	801021a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010216:	2300      	movs	r3, #0
 8010218:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801021a:	68fb      	ldr	r3, [r7, #12]
	}
 801021c:	4618      	mov	r0, r3
 801021e:	3714      	adds	r7, #20
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010234:	2300      	movs	r3, #0
 8010236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801023c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010242:	2b00      	cmp	r3, #0
 8010244:	d10d      	bne.n	8010262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d14d      	bne.n	80102ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	4618      	mov	r0, r3
 8010254:	f001 f8c4 	bl	80113e0 <xTaskPriorityDisinherit>
 8010258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	609a      	str	r2, [r3, #8]
 8010260:	e043      	b.n	80102ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d119      	bne.n	801029c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6858      	ldr	r0, [r3, #4]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010270:	461a      	mov	r2, r3
 8010272:	68b9      	ldr	r1, [r7, #8]
 8010274:	f00e f893 	bl	801e39e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	685a      	ldr	r2, [r3, #4]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010280:	441a      	add	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	429a      	cmp	r2, r3
 8010290:	d32b      	bcc.n	80102ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	605a      	str	r2, [r3, #4]
 801029a:	e026      	b.n	80102ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	68d8      	ldr	r0, [r3, #12]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102a4:	461a      	mov	r2, r3
 80102a6:	68b9      	ldr	r1, [r7, #8]
 80102a8:	f00e f879 	bl	801e39e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	68da      	ldr	r2, [r3, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102b4:	425b      	negs	r3, r3
 80102b6:	441a      	add	r2, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	68da      	ldr	r2, [r3, #12]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d207      	bcs.n	80102d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	689a      	ldr	r2, [r3, #8]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102d0:	425b      	negs	r3, r3
 80102d2:	441a      	add	r2, r3
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d105      	bne.n	80102ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	1c5a      	adds	r2, r3, #1
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80102f2:	697b      	ldr	r3, [r7, #20]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3718      	adds	r7, #24
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801030a:	2b00      	cmp	r3, #0
 801030c:	d018      	beq.n	8010340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	68da      	ldr	r2, [r3, #12]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010316:	441a      	add	r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	68da      	ldr	r2, [r3, #12]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	429a      	cmp	r2, r3
 8010326:	d303      	bcc.n	8010330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	68d9      	ldr	r1, [r3, #12]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010338:	461a      	mov	r2, r3
 801033a:	6838      	ldr	r0, [r7, #0]
 801033c:	f00e f82f 	bl	801e39e <memcpy>
	}
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010350:	f001 ff34 	bl	80121bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801035a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801035c:	e011      	b.n	8010382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010362:	2b00      	cmp	r3, #0
 8010364:	d012      	beq.n	801038c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	3324      	adds	r3, #36	@ 0x24
 801036a:	4618      	mov	r0, r3
 801036c:	f000 fdd4 	bl	8010f18 <xTaskRemoveFromEventList>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010376:	f000 feb3 	bl	80110e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	3b01      	subs	r3, #1
 801037e:	b2db      	uxtb	r3, r3
 8010380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010386:	2b00      	cmp	r3, #0
 8010388:	dce9      	bgt.n	801035e <prvUnlockQueue+0x16>
 801038a:	e000      	b.n	801038e <prvUnlockQueue+0x46>
					break;
 801038c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	22ff      	movs	r2, #255	@ 0xff
 8010392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010396:	f001 ff47 	bl	8012228 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801039a:	f001 ff0f 	bl	80121bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80103a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80103a6:	e011      	b.n	80103cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d012      	beq.n	80103d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	3310      	adds	r3, #16
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 fdaf 	bl	8010f18 <xTaskRemoveFromEventList>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d001      	beq.n	80103c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80103c0:	f000 fe8e 	bl	80110e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80103c4:	7bbb      	ldrb	r3, [r7, #14]
 80103c6:	3b01      	subs	r3, #1
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80103cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dce9      	bgt.n	80103a8 <prvUnlockQueue+0x60>
 80103d4:	e000      	b.n	80103d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80103d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	22ff      	movs	r2, #255	@ 0xff
 80103dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80103e0:	f001 ff22 	bl	8012228 <vPortExitCritical>
}
 80103e4:	bf00      	nop
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103f4:	f001 fee2 	bl	80121bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d102      	bne.n	8010406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010400:	2301      	movs	r3, #1
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e001      	b.n	801040a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010406:	2300      	movs	r3, #0
 8010408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801040a:	f001 ff0d 	bl	8012228 <vPortExitCritical>

	return xReturn;
 801040e:	68fb      	ldr	r3, [r7, #12]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3710      	adds	r7, #16
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010420:	f001 fecc 	bl	80121bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042c:	429a      	cmp	r2, r3
 801042e:	d102      	bne.n	8010436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010430:	2301      	movs	r3, #1
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e001      	b.n	801043a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010436:	2300      	movs	r3, #0
 8010438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801043a:	f001 fef5 	bl	8012228 <vPortExitCritical>

	return xReturn;
 801043e:	68fb      	ldr	r3, [r7, #12]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010452:	2300      	movs	r3, #0
 8010454:	60fb      	str	r3, [r7, #12]
 8010456:	e014      	b.n	8010482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010458:	4a0f      	ldr	r2, [pc, #60]	@ (8010498 <vQueueAddToRegistry+0x50>)
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d10b      	bne.n	801047c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010464:	490c      	ldr	r1, [pc, #48]	@ (8010498 <vQueueAddToRegistry+0x50>)
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801046e:	4a0a      	ldr	r2, [pc, #40]	@ (8010498 <vQueueAddToRegistry+0x50>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	4413      	add	r3, r2
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801047a:	e006      	b.n	801048a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	3301      	adds	r3, #1
 8010480:	60fb      	str	r3, [r7, #12]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2b07      	cmp	r3, #7
 8010486:	d9e7      	bls.n	8010458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010488:	bf00      	nop
 801048a:	bf00      	nop
 801048c:	3714      	adds	r7, #20
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	2000ae94 	.word	0x2000ae94

0801049c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801049c:	b480      	push	{r7}
 801049e:	b085      	sub	sp, #20
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80104a4:	2300      	movs	r3, #0
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	e016      	b.n	80104d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80104aa:	4a10      	ldr	r2, [pc, #64]	@ (80104ec <vQueueUnregisterQueue+0x50>)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	00db      	lsls	r3, r3, #3
 80104b0:	4413      	add	r3, r2
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d10b      	bne.n	80104d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80104ba:	4a0c      	ldr	r2, [pc, #48]	@ (80104ec <vQueueUnregisterQueue+0x50>)
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2100      	movs	r1, #0
 80104c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80104c4:	4a09      	ldr	r2, [pc, #36]	@ (80104ec <vQueueUnregisterQueue+0x50>)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	00db      	lsls	r3, r3, #3
 80104ca:	4413      	add	r3, r2
 80104cc:	2200      	movs	r2, #0
 80104ce:	605a      	str	r2, [r3, #4]
				break;
 80104d0:	e006      	b.n	80104e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	3301      	adds	r3, #1
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b07      	cmp	r3, #7
 80104dc:	d9e5      	bls.n	80104aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80104de:	bf00      	nop
 80104e0:	bf00      	nop
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	2000ae94 	.word	0x2000ae94

080104f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010500:	f001 fe5c 	bl	80121bc <vPortEnterCritical>
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801050a:	b25b      	sxtb	r3, r3
 801050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010510:	d103      	bne.n	801051a <vQueueWaitForMessageRestricted+0x2a>
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010520:	b25b      	sxtb	r3, r3
 8010522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010526:	d103      	bne.n	8010530 <vQueueWaitForMessageRestricted+0x40>
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010530:	f001 fe7a 	bl	8012228 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	3324      	adds	r3, #36	@ 0x24
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	4618      	mov	r0, r3
 8010546:	f000 fcb9 	bl	8010ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801054a:	6978      	ldr	r0, [r7, #20]
 801054c:	f7ff fefc 	bl	8010348 <prvUnlockQueue>
	}
 8010550:	bf00      	nop
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08e      	sub	sp, #56	@ 0x38
 801055c:	af04      	add	r7, sp, #16
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010568:	2b00      	cmp	r3, #0
 801056a:	d10d      	bne.n	8010588 <xTaskCreateStatic+0x30>
	__asm volatile
 801056c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010570:	b672      	cpsid	i
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	b662      	cpsie	i
 8010580:	623b      	str	r3, [r7, #32]
}
 8010582:	bf00      	nop
 8010584:	bf00      	nop
 8010586:	e7fd      	b.n	8010584 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10d      	bne.n	80105aa <xTaskCreateStatic+0x52>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010592:	b672      	cpsid	i
 8010594:	f383 8811 	msr	BASEPRI, r3
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	b662      	cpsie	i
 80105a2:	61fb      	str	r3, [r7, #28]
}
 80105a4:	bf00      	nop
 80105a6:	bf00      	nop
 80105a8:	e7fd      	b.n	80105a6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80105aa:	23a8      	movs	r3, #168	@ 0xa8
 80105ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80105b2:	d00d      	beq.n	80105d0 <xTaskCreateStatic+0x78>
	__asm volatile
 80105b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b8:	b672      	cpsid	i
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	b662      	cpsie	i
 80105c8:	61bb      	str	r3, [r7, #24]
}
 80105ca:	bf00      	nop
 80105cc:	bf00      	nop
 80105ce:	e7fd      	b.n	80105cc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80105d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80105d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d01e      	beq.n	8010616 <xTaskCreateStatic+0xbe>
 80105d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d01b      	beq.n	8010616 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80105de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80105e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80105e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ea:	2202      	movs	r2, #2
 80105ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80105f0:	2300      	movs	r3, #0
 80105f2:	9303      	str	r3, [sp, #12]
 80105f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	f107 0314 	add.w	r3, r7, #20
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	68b9      	ldr	r1, [r7, #8]
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f000 f851 	bl	80106b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801060e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010610:	f000 f8f8 	bl	8010804 <prvAddNewTaskToReadyList>
 8010614:	e001      	b.n	801061a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801061a:	697b      	ldr	r3, [r7, #20]
	}
 801061c:	4618      	mov	r0, r3
 801061e:	3728      	adds	r7, #40	@ 0x28
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010624:	b580      	push	{r7, lr}
 8010626:	b08c      	sub	sp, #48	@ 0x30
 8010628:	af04      	add	r7, sp, #16
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	4613      	mov	r3, r2
 8010632:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010634:	88fb      	ldrh	r3, [r7, #6]
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4618      	mov	r0, r3
 801063a:	f001 feed 	bl	8012418 <pvPortMalloc>
 801063e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00e      	beq.n	8010664 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010646:	20a8      	movs	r0, #168	@ 0xa8
 8010648:	f001 fee6 	bl	8012418 <pvPortMalloc>
 801064c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d003      	beq.n	801065c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	631a      	str	r2, [r3, #48]	@ 0x30
 801065a:	e005      	b.n	8010668 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801065c:	6978      	ldr	r0, [r7, #20]
 801065e:	f001 ffa9 	bl	80125b4 <vPortFree>
 8010662:	e001      	b.n	8010668 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d017      	beq.n	801069e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010676:	88fa      	ldrh	r2, [r7, #6]
 8010678:	2300      	movs	r3, #0
 801067a:	9303      	str	r3, [sp, #12]
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	9302      	str	r3, [sp, #8]
 8010680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010682:	9301      	str	r3, [sp, #4]
 8010684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	68f8      	ldr	r0, [r7, #12]
 801068e:	f000 f80f 	bl	80106b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010692:	69f8      	ldr	r0, [r7, #28]
 8010694:	f000 f8b6 	bl	8010804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010698:	2301      	movs	r3, #1
 801069a:	61bb      	str	r3, [r7, #24]
 801069c:	e002      	b.n	80106a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801069e:	f04f 33ff 	mov.w	r3, #4294967295
 80106a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80106a4:	69bb      	ldr	r3, [r7, #24]
	}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3720      	adds	r7, #32
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
	...

080106b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b088      	sub	sp, #32
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
 80106bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80106be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	461a      	mov	r2, r3
 80106c8:	21a5      	movs	r1, #165	@ 0xa5
 80106ca:	f00d fd95 	bl	801e1f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80106ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80106d2:	6879      	ldr	r1, [r7, #4]
 80106d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80106d8:	440b      	add	r3, r1
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	4413      	add	r3, r2
 80106de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	f023 0307 	bic.w	r3, r3, #7
 80106e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	f003 0307 	and.w	r3, r3, #7
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00d      	beq.n	801070e <prvInitialiseNewTask+0x5e>
	__asm volatile
 80106f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f6:	b672      	cpsid	i
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	b662      	cpsie	i
 8010706:	617b      	str	r3, [r7, #20]
}
 8010708:	bf00      	nop
 801070a:	bf00      	nop
 801070c:	e7fd      	b.n	801070a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01f      	beq.n	8010754 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010714:	2300      	movs	r3, #0
 8010716:	61fb      	str	r3, [r7, #28]
 8010718:	e012      	b.n	8010740 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	4413      	add	r3, r2
 8010720:	7819      	ldrb	r1, [r3, #0]
 8010722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	4413      	add	r3, r2
 8010728:	3334      	adds	r3, #52	@ 0x34
 801072a:	460a      	mov	r2, r1
 801072c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	4413      	add	r3, r2
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d006      	beq.n	8010748 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	3301      	adds	r3, #1
 801073e:	61fb      	str	r3, [r7, #28]
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	2b0f      	cmp	r3, #15
 8010744:	d9e9      	bls.n	801071a <prvInitialiseNewTask+0x6a>
 8010746:	e000      	b.n	801074a <prvInitialiseNewTask+0x9a>
			{
				break;
 8010748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801074a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074c:	2200      	movs	r2, #0
 801074e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010752:	e003      	b.n	801075c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075e:	2b37      	cmp	r3, #55	@ 0x37
 8010760:	d901      	bls.n	8010766 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010762:	2337      	movs	r3, #55	@ 0x37
 8010764:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801076a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801076c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010770:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010774:	2200      	movs	r2, #0
 8010776:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077a:	3304      	adds	r3, #4
 801077c:	4618      	mov	r0, r3
 801077e:	f7fe fd27 	bl	800f1d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010784:	3318      	adds	r3, #24
 8010786:	4618      	mov	r0, r3
 8010788:	f7fe fd22 	bl	800f1d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801078c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801078e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010794:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801079a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801079c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801079e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80107a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80107b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b4:	3354      	adds	r3, #84	@ 0x54
 80107b6:	224c      	movs	r2, #76	@ 0x4c
 80107b8:	2100      	movs	r1, #0
 80107ba:	4618      	mov	r0, r3
 80107bc:	f00d fd1c 	bl	801e1f8 <memset>
 80107c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c2:	4a0d      	ldr	r2, [pc, #52]	@ (80107f8 <prvInitialiseNewTask+0x148>)
 80107c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80107c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c8:	4a0c      	ldr	r2, [pc, #48]	@ (80107fc <prvInitialiseNewTask+0x14c>)
 80107ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80107cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010800 <prvInitialiseNewTask+0x150>)
 80107d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80107d2:	683a      	ldr	r2, [r7, #0]
 80107d4:	68f9      	ldr	r1, [r7, #12]
 80107d6:	69b8      	ldr	r0, [r7, #24]
 80107d8:	f001 fbe2 	bl	8011fa0 <pxPortInitialiseStack>
 80107dc:	4602      	mov	r2, r0
 80107de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80107e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80107e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107ee:	bf00      	nop
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	20027b90 	.word	0x20027b90
 80107fc:	20027bf8 	.word	0x20027bf8
 8010800:	20027c60 	.word	0x20027c60

08010804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801080c:	f001 fcd6 	bl	80121bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010810:	4b2d      	ldr	r3, [pc, #180]	@ (80108c8 <prvAddNewTaskToReadyList+0xc4>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	3301      	adds	r3, #1
 8010816:	4a2c      	ldr	r2, [pc, #176]	@ (80108c8 <prvAddNewTaskToReadyList+0xc4>)
 8010818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801081a:	4b2c      	ldr	r3, [pc, #176]	@ (80108cc <prvAddNewTaskToReadyList+0xc8>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d109      	bne.n	8010836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010822:	4a2a      	ldr	r2, [pc, #168]	@ (80108cc <prvAddNewTaskToReadyList+0xc8>)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010828:	4b27      	ldr	r3, [pc, #156]	@ (80108c8 <prvAddNewTaskToReadyList+0xc4>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d110      	bne.n	8010852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010830:	f000 fc7a 	bl	8011128 <prvInitialiseTaskLists>
 8010834:	e00d      	b.n	8010852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010836:	4b26      	ldr	r3, [pc, #152]	@ (80108d0 <prvAddNewTaskToReadyList+0xcc>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d109      	bne.n	8010852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801083e:	4b23      	ldr	r3, [pc, #140]	@ (80108cc <prvAddNewTaskToReadyList+0xc8>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010848:	429a      	cmp	r2, r3
 801084a:	d802      	bhi.n	8010852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801084c:	4a1f      	ldr	r2, [pc, #124]	@ (80108cc <prvAddNewTaskToReadyList+0xc8>)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010852:	4b20      	ldr	r3, [pc, #128]	@ (80108d4 <prvAddNewTaskToReadyList+0xd0>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	3301      	adds	r3, #1
 8010858:	4a1e      	ldr	r2, [pc, #120]	@ (80108d4 <prvAddNewTaskToReadyList+0xd0>)
 801085a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801085c:	4b1d      	ldr	r3, [pc, #116]	@ (80108d4 <prvAddNewTaskToReadyList+0xd0>)
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010868:	4b1b      	ldr	r3, [pc, #108]	@ (80108d8 <prvAddNewTaskToReadyList+0xd4>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	429a      	cmp	r2, r3
 801086e:	d903      	bls.n	8010878 <prvAddNewTaskToReadyList+0x74>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010874:	4a18      	ldr	r2, [pc, #96]	@ (80108d8 <prvAddNewTaskToReadyList+0xd4>)
 8010876:	6013      	str	r3, [r2, #0]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801087c:	4613      	mov	r3, r2
 801087e:	009b      	lsls	r3, r3, #2
 8010880:	4413      	add	r3, r2
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	4a15      	ldr	r2, [pc, #84]	@ (80108dc <prvAddNewTaskToReadyList+0xd8>)
 8010886:	441a      	add	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3304      	adds	r3, #4
 801088c:	4619      	mov	r1, r3
 801088e:	4610      	mov	r0, r2
 8010890:	f7fe fcab 	bl	800f1ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010894:	f001 fcc8 	bl	8012228 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010898:	4b0d      	ldr	r3, [pc, #52]	@ (80108d0 <prvAddNewTaskToReadyList+0xcc>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00e      	beq.n	80108be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80108a0:	4b0a      	ldr	r3, [pc, #40]	@ (80108cc <prvAddNewTaskToReadyList+0xc8>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d207      	bcs.n	80108be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80108ae:	4b0c      	ldr	r3, [pc, #48]	@ (80108e0 <prvAddNewTaskToReadyList+0xdc>)
 80108b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108b4:	601a      	str	r2, [r3, #0]
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108be:	bf00      	nop
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	2000b3a8 	.word	0x2000b3a8
 80108cc:	2000aed4 	.word	0x2000aed4
 80108d0:	2000b3b4 	.word	0x2000b3b4
 80108d4:	2000b3c4 	.word	0x2000b3c4
 80108d8:	2000b3b0 	.word	0x2000b3b0
 80108dc:	2000aed8 	.word	0x2000aed8
 80108e0:	e000ed04 	.word	0xe000ed04

080108e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80108ec:	2300      	movs	r3, #0
 80108ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01a      	beq.n	801092c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80108f6:	4b15      	ldr	r3, [pc, #84]	@ (801094c <vTaskDelay+0x68>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00d      	beq.n	801091a <vTaskDelay+0x36>
	__asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010902:	b672      	cpsid	i
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	b662      	cpsie	i
 8010912:	60bb      	str	r3, [r7, #8]
}
 8010914:	bf00      	nop
 8010916:	bf00      	nop
 8010918:	e7fd      	b.n	8010916 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801091a:	f000 f88f 	bl	8010a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801091e:	2100      	movs	r1, #0
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 ff81 	bl	8011828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010926:	f000 f897 	bl	8010a58 <xTaskResumeAll>
 801092a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d107      	bne.n	8010942 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010932:	4b07      	ldr	r3, [pc, #28]	@ (8010950 <vTaskDelay+0x6c>)
 8010934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010942:	bf00      	nop
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	2000b3d0 	.word	0x2000b3d0
 8010950:	e000ed04 	.word	0xe000ed04

08010954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08a      	sub	sp, #40	@ 0x28
 8010958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801095a:	2300      	movs	r3, #0
 801095c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801095e:	2300      	movs	r3, #0
 8010960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010962:	463a      	mov	r2, r7
 8010964:	1d39      	adds	r1, r7, #4
 8010966:	f107 0308 	add.w	r3, r7, #8
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe fbdc 	bl	800f128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	9202      	str	r2, [sp, #8]
 8010978:	9301      	str	r3, [sp, #4]
 801097a:	2300      	movs	r3, #0
 801097c:	9300      	str	r3, [sp, #0]
 801097e:	2300      	movs	r3, #0
 8010980:	460a      	mov	r2, r1
 8010982:	4926      	ldr	r1, [pc, #152]	@ (8010a1c <vTaskStartScheduler+0xc8>)
 8010984:	4826      	ldr	r0, [pc, #152]	@ (8010a20 <vTaskStartScheduler+0xcc>)
 8010986:	f7ff fde7 	bl	8010558 <xTaskCreateStatic>
 801098a:	4603      	mov	r3, r0
 801098c:	4a25      	ldr	r2, [pc, #148]	@ (8010a24 <vTaskStartScheduler+0xd0>)
 801098e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010990:	4b24      	ldr	r3, [pc, #144]	@ (8010a24 <vTaskStartScheduler+0xd0>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d002      	beq.n	801099e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010998:	2301      	movs	r3, #1
 801099a:	617b      	str	r3, [r7, #20]
 801099c:	e001      	b.n	80109a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801099e:	2300      	movs	r3, #0
 80109a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d102      	bne.n	80109ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80109a8:	f000 ff92 	bl	80118d0 <xTimerCreateTimerTask>
 80109ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d11d      	bne.n	80109f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80109b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b8:	b672      	cpsid	i
 80109ba:	f383 8811 	msr	BASEPRI, r3
 80109be:	f3bf 8f6f 	isb	sy
 80109c2:	f3bf 8f4f 	dsb	sy
 80109c6:	b662      	cpsie	i
 80109c8:	613b      	str	r3, [r7, #16]
}
 80109ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80109cc:	4b16      	ldr	r3, [pc, #88]	@ (8010a28 <vTaskStartScheduler+0xd4>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	3354      	adds	r3, #84	@ 0x54
 80109d2:	4a16      	ldr	r2, [pc, #88]	@ (8010a2c <vTaskStartScheduler+0xd8>)
 80109d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109d6:	4b16      	ldr	r3, [pc, #88]	@ (8010a30 <vTaskStartScheduler+0xdc>)
 80109d8:	f04f 32ff 	mov.w	r2, #4294967295
 80109dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109de:	4b15      	ldr	r3, [pc, #84]	@ (8010a34 <vTaskStartScheduler+0xe0>)
 80109e0:	2201      	movs	r2, #1
 80109e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80109e4:	4b14      	ldr	r3, [pc, #80]	@ (8010a38 <vTaskStartScheduler+0xe4>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109ea:	f001 fb69 	bl	80120c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109ee:	e011      	b.n	8010a14 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f6:	d10d      	bne.n	8010a14 <vTaskStartScheduler+0xc0>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109fc:	b672      	cpsid	i
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	b662      	cpsie	i
 8010a0c:	60fb      	str	r3, [r7, #12]
}
 8010a0e:	bf00      	nop
 8010a10:	bf00      	nop
 8010a12:	e7fd      	b.n	8010a10 <vTaskStartScheduler+0xbc>
}
 8010a14:	bf00      	nop
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	0801f0e4 	.word	0x0801f0e4
 8010a20:	080110f9 	.word	0x080110f9
 8010a24:	2000b3cc 	.word	0x2000b3cc
 8010a28:	2000aed4 	.word	0x2000aed4
 8010a2c:	2000003c 	.word	0x2000003c
 8010a30:	2000b3c8 	.word	0x2000b3c8
 8010a34:	2000b3b4 	.word	0x2000b3b4
 8010a38:	2000b3ac 	.word	0x2000b3ac

08010a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010a40:	4b04      	ldr	r3, [pc, #16]	@ (8010a54 <vTaskSuspendAll+0x18>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	3301      	adds	r3, #1
 8010a46:	4a03      	ldr	r2, [pc, #12]	@ (8010a54 <vTaskSuspendAll+0x18>)
 8010a48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010a4a:	bf00      	nop
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	2000b3d0 	.word	0x2000b3d0

08010a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a62:	2300      	movs	r3, #0
 8010a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a66:	4b43      	ldr	r3, [pc, #268]	@ (8010b74 <xTaskResumeAll+0x11c>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10d      	bne.n	8010a8a <xTaskResumeAll+0x32>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a72:	b672      	cpsid	i
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	b662      	cpsie	i
 8010a82:	603b      	str	r3, [r7, #0]
}
 8010a84:	bf00      	nop
 8010a86:	bf00      	nop
 8010a88:	e7fd      	b.n	8010a86 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a8a:	f001 fb97 	bl	80121bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a8e:	4b39      	ldr	r3, [pc, #228]	@ (8010b74 <xTaskResumeAll+0x11c>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	4a37      	ldr	r2, [pc, #220]	@ (8010b74 <xTaskResumeAll+0x11c>)
 8010a96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a98:	4b36      	ldr	r3, [pc, #216]	@ (8010b74 <xTaskResumeAll+0x11c>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d162      	bne.n	8010b66 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010aa0:	4b35      	ldr	r3, [pc, #212]	@ (8010b78 <xTaskResumeAll+0x120>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d05e      	beq.n	8010b66 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010aa8:	e02f      	b.n	8010b0a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010aaa:	4b34      	ldr	r3, [pc, #208]	@ (8010b7c <xTaskResumeAll+0x124>)
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	68db      	ldr	r3, [r3, #12]
 8010ab0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	3318      	adds	r3, #24
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fe fbf4 	bl	800f2a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fe fbef 	bl	800f2a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aca:	4b2d      	ldr	r3, [pc, #180]	@ (8010b80 <xTaskResumeAll+0x128>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d903      	bls.n	8010ada <xTaskResumeAll+0x82>
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8010b80 <xTaskResumeAll+0x128>)
 8010ad8:	6013      	str	r3, [r2, #0]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ade:	4613      	mov	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	4413      	add	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4a27      	ldr	r2, [pc, #156]	@ (8010b84 <xTaskResumeAll+0x12c>)
 8010ae8:	441a      	add	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3304      	adds	r3, #4
 8010aee:	4619      	mov	r1, r3
 8010af0:	4610      	mov	r0, r2
 8010af2:	f7fe fb7a 	bl	800f1ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010afa:	4b23      	ldr	r3, [pc, #140]	@ (8010b88 <xTaskResumeAll+0x130>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d302      	bcc.n	8010b0a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8010b04:	4b21      	ldr	r3, [pc, #132]	@ (8010b8c <xTaskResumeAll+0x134>)
 8010b06:	2201      	movs	r2, #1
 8010b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8010b7c <xTaskResumeAll+0x124>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1cb      	bne.n	8010aaa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d001      	beq.n	8010b1c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b18:	f000 fbac 	bl	8011274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8010b90 <xTaskResumeAll+0x138>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d010      	beq.n	8010b4a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b28:	f000 f858 	bl	8010bdc <xTaskIncrementTick>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8010b32:	4b16      	ldr	r3, [pc, #88]	@ (8010b8c <xTaskResumeAll+0x134>)
 8010b34:	2201      	movs	r2, #1
 8010b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1f1      	bne.n	8010b28 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8010b44:	4b12      	ldr	r3, [pc, #72]	@ (8010b90 <xTaskResumeAll+0x138>)
 8010b46:	2200      	movs	r2, #0
 8010b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b4a:	4b10      	ldr	r3, [pc, #64]	@ (8010b8c <xTaskResumeAll+0x134>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b52:	2301      	movs	r3, #1
 8010b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b56:	4b0f      	ldr	r3, [pc, #60]	@ (8010b94 <xTaskResumeAll+0x13c>)
 8010b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	f3bf 8f4f 	dsb	sy
 8010b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b66:	f001 fb5f 	bl	8012228 <vPortExitCritical>

	return xAlreadyYielded;
 8010b6a:	68bb      	ldr	r3, [r7, #8]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	2000b3d0 	.word	0x2000b3d0
 8010b78:	2000b3a8 	.word	0x2000b3a8
 8010b7c:	2000b368 	.word	0x2000b368
 8010b80:	2000b3b0 	.word	0x2000b3b0
 8010b84:	2000aed8 	.word	0x2000aed8
 8010b88:	2000aed4 	.word	0x2000aed4
 8010b8c:	2000b3bc 	.word	0x2000b3bc
 8010b90:	2000b3b8 	.word	0x2000b3b8
 8010b94:	e000ed04 	.word	0xe000ed04

08010b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010b9e:	4b05      	ldr	r3, [pc, #20]	@ (8010bb4 <xTaskGetTickCount+0x1c>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010ba4:	687b      	ldr	r3, [r7, #4]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	370c      	adds	r7, #12
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	2000b3ac 	.word	0x2000b3ac

08010bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bbe:	f001 fbe5 	bl	801238c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010bc6:	4b04      	ldr	r3, [pc, #16]	@ (8010bd8 <xTaskGetTickCountFromISR+0x20>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bcc:	683b      	ldr	r3, [r7, #0]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	2000b3ac 	.word	0x2000b3ac

08010bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010be2:	2300      	movs	r3, #0
 8010be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010be6:	4b50      	ldr	r3, [pc, #320]	@ (8010d28 <xTaskIncrementTick+0x14c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	f040 808c 	bne.w	8010d08 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8010d2c <xTaskIncrementTick+0x150>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8010d2c <xTaskIncrementTick+0x150>)
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d123      	bne.n	8010c4c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c04:	4b4a      	ldr	r3, [pc, #296]	@ (8010d30 <xTaskIncrementTick+0x154>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00d      	beq.n	8010c2a <xTaskIncrementTick+0x4e>
	__asm volatile
 8010c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c12:	b672      	cpsid	i
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	b662      	cpsie	i
 8010c22:	603b      	str	r3, [r7, #0]
}
 8010c24:	bf00      	nop
 8010c26:	bf00      	nop
 8010c28:	e7fd      	b.n	8010c26 <xTaskIncrementTick+0x4a>
 8010c2a:	4b41      	ldr	r3, [pc, #260]	@ (8010d30 <xTaskIncrementTick+0x154>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	4b40      	ldr	r3, [pc, #256]	@ (8010d34 <xTaskIncrementTick+0x158>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a3e      	ldr	r2, [pc, #248]	@ (8010d30 <xTaskIncrementTick+0x154>)
 8010c36:	6013      	str	r3, [r2, #0]
 8010c38:	4a3e      	ldr	r2, [pc, #248]	@ (8010d34 <xTaskIncrementTick+0x158>)
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6013      	str	r3, [r2, #0]
 8010c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8010d38 <xTaskIncrementTick+0x15c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3301      	adds	r3, #1
 8010c44:	4a3c      	ldr	r2, [pc, #240]	@ (8010d38 <xTaskIncrementTick+0x15c>)
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	f000 fb14 	bl	8011274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8010d3c <xTaskIncrementTick+0x160>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	693a      	ldr	r2, [r7, #16]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d349      	bcc.n	8010cea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c56:	4b36      	ldr	r3, [pc, #216]	@ (8010d30 <xTaskIncrementTick+0x154>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d104      	bne.n	8010c6a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c60:	4b36      	ldr	r3, [pc, #216]	@ (8010d3c <xTaskIncrementTick+0x160>)
 8010c62:	f04f 32ff 	mov.w	r2, #4294967295
 8010c66:	601a      	str	r2, [r3, #0]
					break;
 8010c68:	e03f      	b.n	8010cea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c6a:	4b31      	ldr	r3, [pc, #196]	@ (8010d30 <xTaskIncrementTick+0x154>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c7a:	693a      	ldr	r2, [r7, #16]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d203      	bcs.n	8010c8a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c82:	4a2e      	ldr	r2, [pc, #184]	@ (8010d3c <xTaskIncrementTick+0x160>)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c88:	e02f      	b.n	8010cea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fe fb08 	bl	800f2a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d004      	beq.n	8010ca6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	3318      	adds	r3, #24
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe faff 	bl	800f2a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010caa:	4b25      	ldr	r3, [pc, #148]	@ (8010d40 <xTaskIncrementTick+0x164>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d903      	bls.n	8010cba <xTaskIncrementTick+0xde>
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb6:	4a22      	ldr	r2, [pc, #136]	@ (8010d40 <xTaskIncrementTick+0x164>)
 8010cb8:	6013      	str	r3, [r2, #0]
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8010d44 <xTaskIncrementTick+0x168>)
 8010cc8:	441a      	add	r2, r3
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	3304      	adds	r3, #4
 8010cce:	4619      	mov	r1, r3
 8010cd0:	4610      	mov	r0, r2
 8010cd2:	f7fe fa8a 	bl	800f1ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cda:	4b1b      	ldr	r3, [pc, #108]	@ (8010d48 <xTaskIncrementTick+0x16c>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d3b8      	bcc.n	8010c56 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ce8:	e7b5      	b.n	8010c56 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010cea:	4b17      	ldr	r3, [pc, #92]	@ (8010d48 <xTaskIncrementTick+0x16c>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cf0:	4914      	ldr	r1, [pc, #80]	@ (8010d44 <xTaskIncrementTick+0x168>)
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	440b      	add	r3, r1
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d907      	bls.n	8010d12 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010d02:	2301      	movs	r3, #1
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	e004      	b.n	8010d12 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010d08:	4b10      	ldr	r3, [pc, #64]	@ (8010d4c <xTaskIncrementTick+0x170>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8010d4c <xTaskIncrementTick+0x170>)
 8010d10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010d12:	4b0f      	ldr	r3, [pc, #60]	@ (8010d50 <xTaskIncrementTick+0x174>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010d1e:	697b      	ldr	r3, [r7, #20]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3718      	adds	r7, #24
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	2000b3d0 	.word	0x2000b3d0
 8010d2c:	2000b3ac 	.word	0x2000b3ac
 8010d30:	2000b360 	.word	0x2000b360
 8010d34:	2000b364 	.word	0x2000b364
 8010d38:	2000b3c0 	.word	0x2000b3c0
 8010d3c:	2000b3c8 	.word	0x2000b3c8
 8010d40:	2000b3b0 	.word	0x2000b3b0
 8010d44:	2000aed8 	.word	0x2000aed8
 8010d48:	2000aed4 	.word	0x2000aed4
 8010d4c:	2000b3b8 	.word	0x2000b3b8
 8010d50:	2000b3bc 	.word	0x2000b3bc

08010d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e54 <vTaskSwitchContext+0x100>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d003      	beq.n	8010d6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d62:	4b3d      	ldr	r3, [pc, #244]	@ (8010e58 <vTaskSwitchContext+0x104>)
 8010d64:	2201      	movs	r2, #1
 8010d66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d68:	e070      	b.n	8010e4c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8010d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8010e58 <vTaskSwitchContext+0x104>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010d70:	4b3a      	ldr	r3, [pc, #232]	@ (8010e5c <vTaskSwitchContext+0x108>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d76:	613b      	str	r3, [r7, #16]
 8010d78:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010d7c:	60fb      	str	r3, [r7, #12]
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d111      	bne.n	8010dac <vTaskSwitchContext+0x58>
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	3304      	adds	r3, #4
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d10b      	bne.n	8010dac <vTaskSwitchContext+0x58>
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	3308      	adds	r3, #8
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68fa      	ldr	r2, [r7, #12]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d105      	bne.n	8010dac <vTaskSwitchContext+0x58>
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	330c      	adds	r3, #12
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d008      	beq.n	8010dbe <vTaskSwitchContext+0x6a>
 8010dac:	4b2b      	ldr	r3, [pc, #172]	@ (8010e5c <vTaskSwitchContext+0x108>)
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	4b2a      	ldr	r3, [pc, #168]	@ (8010e5c <vTaskSwitchContext+0x108>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3334      	adds	r3, #52	@ 0x34
 8010db6:	4619      	mov	r1, r3
 8010db8:	4610      	mov	r0, r2
 8010dba:	f7f0 f8c5 	bl	8000f48 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dbe:	4b28      	ldr	r3, [pc, #160]	@ (8010e60 <vTaskSwitchContext+0x10c>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	e013      	b.n	8010dee <vTaskSwitchContext+0x9a>
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10d      	bne.n	8010de8 <vTaskSwitchContext+0x94>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd0:	b672      	cpsid	i
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	b662      	cpsie	i
 8010de0:	607b      	str	r3, [r7, #4]
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	e7fd      	b.n	8010de4 <vTaskSwitchContext+0x90>
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	3b01      	subs	r3, #1
 8010dec:	617b      	str	r3, [r7, #20]
 8010dee:	491d      	ldr	r1, [pc, #116]	@ (8010e64 <vTaskSwitchContext+0x110>)
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	4613      	mov	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	4413      	add	r3, r2
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	440b      	add	r3, r1
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d0e1      	beq.n	8010dc6 <vTaskSwitchContext+0x72>
 8010e02:	697a      	ldr	r2, [r7, #20]
 8010e04:	4613      	mov	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	4413      	add	r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	4a15      	ldr	r2, [pc, #84]	@ (8010e64 <vTaskSwitchContext+0x110>)
 8010e0e:	4413      	add	r3, r2
 8010e10:	60bb      	str	r3, [r7, #8]
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	605a      	str	r2, [r3, #4]
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	3308      	adds	r3, #8
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d104      	bne.n	8010e32 <vTaskSwitchContext+0xde>
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	685a      	ldr	r2, [r3, #4]
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	605a      	str	r2, [r3, #4]
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	4a08      	ldr	r2, [pc, #32]	@ (8010e5c <vTaskSwitchContext+0x108>)
 8010e3a:	6013      	str	r3, [r2, #0]
 8010e3c:	4a08      	ldr	r2, [pc, #32]	@ (8010e60 <vTaskSwitchContext+0x10c>)
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e42:	4b06      	ldr	r3, [pc, #24]	@ (8010e5c <vTaskSwitchContext+0x108>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	3354      	adds	r3, #84	@ 0x54
 8010e48:	4a07      	ldr	r2, [pc, #28]	@ (8010e68 <vTaskSwitchContext+0x114>)
 8010e4a:	6013      	str	r3, [r2, #0]
}
 8010e4c:	bf00      	nop
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	2000b3d0 	.word	0x2000b3d0
 8010e58:	2000b3bc 	.word	0x2000b3bc
 8010e5c:	2000aed4 	.word	0x2000aed4
 8010e60:	2000b3b0 	.word	0x2000b3b0
 8010e64:	2000aed8 	.word	0x2000aed8
 8010e68:	2000003c 	.word	0x2000003c

08010e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10d      	bne.n	8010e98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e80:	b672      	cpsid	i
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	b662      	cpsie	i
 8010e90:	60fb      	str	r3, [r7, #12]
}
 8010e92:	bf00      	nop
 8010e94:	bf00      	nop
 8010e96:	e7fd      	b.n	8010e94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e98:	4b07      	ldr	r3, [pc, #28]	@ (8010eb8 <vTaskPlaceOnEventList+0x4c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3318      	adds	r3, #24
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7fe f9c6 	bl	800f232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	6838      	ldr	r0, [r7, #0]
 8010eaa:	f000 fcbd 	bl	8011828 <prvAddCurrentTaskToDelayedList>
}
 8010eae:	bf00      	nop
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	2000aed4 	.word	0x2000aed4

08010ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d10d      	bne.n	8010eea <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8010ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed2:	b672      	cpsid	i
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	b662      	cpsie	i
 8010ee2:	617b      	str	r3, [r7, #20]
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop
 8010ee8:	e7fd      	b.n	8010ee6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010eea:	4b0a      	ldr	r3, [pc, #40]	@ (8010f14 <vTaskPlaceOnEventListRestricted+0x58>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3318      	adds	r3, #24
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7fe f979 	bl	800f1ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8010efe:	f04f 33ff 	mov.w	r3, #4294967295
 8010f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010f04:	6879      	ldr	r1, [r7, #4]
 8010f06:	68b8      	ldr	r0, [r7, #8]
 8010f08:	f000 fc8e 	bl	8011828 <prvAddCurrentTaskToDelayedList>
	}
 8010f0c:	bf00      	nop
 8010f0e:	3718      	adds	r7, #24
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	2000aed4 	.word	0x2000aed4

08010f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b086      	sub	sp, #24
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10d      	bne.n	8010f4a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f32:	b672      	cpsid	i
 8010f34:	f383 8811 	msr	BASEPRI, r3
 8010f38:	f3bf 8f6f 	isb	sy
 8010f3c:	f3bf 8f4f 	dsb	sy
 8010f40:	b662      	cpsie	i
 8010f42:	60fb      	str	r3, [r7, #12]
}
 8010f44:	bf00      	nop
 8010f46:	bf00      	nop
 8010f48:	e7fd      	b.n	8010f46 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	3318      	adds	r3, #24
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe f9a8 	bl	800f2a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f54:	4b1d      	ldr	r3, [pc, #116]	@ (8010fcc <xTaskRemoveFromEventList+0xb4>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d11d      	bne.n	8010f98 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	3304      	adds	r3, #4
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe f99f 	bl	800f2a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f6a:	4b19      	ldr	r3, [pc, #100]	@ (8010fd0 <xTaskRemoveFromEventList+0xb8>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d903      	bls.n	8010f7a <xTaskRemoveFromEventList+0x62>
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f76:	4a16      	ldr	r2, [pc, #88]	@ (8010fd0 <xTaskRemoveFromEventList+0xb8>)
 8010f78:	6013      	str	r3, [r2, #0]
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f7e:	4613      	mov	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4413      	add	r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	4a13      	ldr	r2, [pc, #76]	@ (8010fd4 <xTaskRemoveFromEventList+0xbc>)
 8010f88:	441a      	add	r2, r3
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4610      	mov	r0, r2
 8010f92:	f7fe f92a 	bl	800f1ea <vListInsertEnd>
 8010f96:	e005      	b.n	8010fa4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	3318      	adds	r3, #24
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	480e      	ldr	r0, [pc, #56]	@ (8010fd8 <xTaskRemoveFromEventList+0xc0>)
 8010fa0:	f7fe f923 	bl	800f1ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8010fdc <xTaskRemoveFromEventList+0xc4>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d905      	bls.n	8010fbe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe0 <xTaskRemoveFromEventList+0xc8>)
 8010fb8:	2201      	movs	r2, #1
 8010fba:	601a      	str	r2, [r3, #0]
 8010fbc:	e001      	b.n	8010fc2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010fc2:	697b      	ldr	r3, [r7, #20]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	2000b3d0 	.word	0x2000b3d0
 8010fd0:	2000b3b0 	.word	0x2000b3b0
 8010fd4:	2000aed8 	.word	0x2000aed8
 8010fd8:	2000b368 	.word	0x2000b368
 8010fdc:	2000aed4 	.word	0x2000aed4
 8010fe0:	2000b3bc 	.word	0x2000b3bc

08010fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010fec:	4b06      	ldr	r3, [pc, #24]	@ (8011008 <vTaskInternalSetTimeOutState+0x24>)
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ff4:	4b05      	ldr	r3, [pc, #20]	@ (801100c <vTaskInternalSetTimeOutState+0x28>)
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	605a      	str	r2, [r3, #4]
}
 8010ffc:	bf00      	nop
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr
 8011008:	2000b3c0 	.word	0x2000b3c0
 801100c:	2000b3ac 	.word	0x2000b3ac

08011010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b088      	sub	sp, #32
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10d      	bne.n	801103c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	b672      	cpsid	i
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	b662      	cpsie	i
 8011034:	613b      	str	r3, [r7, #16]
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	e7fd      	b.n	8011038 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10d      	bne.n	801105e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011046:	b672      	cpsid	i
 8011048:	f383 8811 	msr	BASEPRI, r3
 801104c:	f3bf 8f6f 	isb	sy
 8011050:	f3bf 8f4f 	dsb	sy
 8011054:	b662      	cpsie	i
 8011056:	60fb      	str	r3, [r7, #12]
}
 8011058:	bf00      	nop
 801105a:	bf00      	nop
 801105c:	e7fd      	b.n	801105a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801105e:	f001 f8ad 	bl	80121bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011062:	4b1d      	ldr	r3, [pc, #116]	@ (80110d8 <xTaskCheckForTimeOut+0xc8>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801107a:	d102      	bne.n	8011082 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801107c:	2300      	movs	r3, #0
 801107e:	61fb      	str	r3, [r7, #28]
 8011080:	e023      	b.n	80110ca <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	4b15      	ldr	r3, [pc, #84]	@ (80110dc <xTaskCheckForTimeOut+0xcc>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	429a      	cmp	r2, r3
 801108c:	d007      	beq.n	801109e <xTaskCheckForTimeOut+0x8e>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	69ba      	ldr	r2, [r7, #24]
 8011094:	429a      	cmp	r2, r3
 8011096:	d302      	bcc.n	801109e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011098:	2301      	movs	r3, #1
 801109a:	61fb      	str	r3, [r7, #28]
 801109c:	e015      	b.n	80110ca <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d20b      	bcs.n	80110c0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	1ad2      	subs	r2, r2, r3
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff ff95 	bl	8010fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80110ba:	2300      	movs	r3, #0
 80110bc:	61fb      	str	r3, [r7, #28]
 80110be:	e004      	b.n	80110ca <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80110c6:	2301      	movs	r3, #1
 80110c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80110ca:	f001 f8ad 	bl	8012228 <vPortExitCritical>

	return xReturn;
 80110ce:	69fb      	ldr	r3, [r7, #28]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3720      	adds	r7, #32
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	2000b3ac 	.word	0x2000b3ac
 80110dc:	2000b3c0 	.word	0x2000b3c0

080110e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80110e0:	b480      	push	{r7}
 80110e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80110e4:	4b03      	ldr	r3, [pc, #12]	@ (80110f4 <vTaskMissedYield+0x14>)
 80110e6:	2201      	movs	r2, #1
 80110e8:	601a      	str	r2, [r3, #0]
}
 80110ea:	bf00      	nop
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	2000b3bc 	.word	0x2000b3bc

080110f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011100:	f000 f852 	bl	80111a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011104:	4b06      	ldr	r3, [pc, #24]	@ (8011120 <prvIdleTask+0x28>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d9f9      	bls.n	8011100 <prvIdleTask+0x8>
			{
				taskYIELD();
 801110c:	4b05      	ldr	r3, [pc, #20]	@ (8011124 <prvIdleTask+0x2c>)
 801110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801111c:	e7f0      	b.n	8011100 <prvIdleTask+0x8>
 801111e:	bf00      	nop
 8011120:	2000aed8 	.word	0x2000aed8
 8011124:	e000ed04 	.word	0xe000ed04

08011128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801112e:	2300      	movs	r3, #0
 8011130:	607b      	str	r3, [r7, #4]
 8011132:	e00c      	b.n	801114e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	4613      	mov	r3, r2
 8011138:	009b      	lsls	r3, r3, #2
 801113a:	4413      	add	r3, r2
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4a12      	ldr	r2, [pc, #72]	@ (8011188 <prvInitialiseTaskLists+0x60>)
 8011140:	4413      	add	r3, r2
 8011142:	4618      	mov	r0, r3
 8011144:	f7fe f824 	bl	800f190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3301      	adds	r3, #1
 801114c:	607b      	str	r3, [r7, #4]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2b37      	cmp	r3, #55	@ 0x37
 8011152:	d9ef      	bls.n	8011134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011154:	480d      	ldr	r0, [pc, #52]	@ (801118c <prvInitialiseTaskLists+0x64>)
 8011156:	f7fe f81b 	bl	800f190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801115a:	480d      	ldr	r0, [pc, #52]	@ (8011190 <prvInitialiseTaskLists+0x68>)
 801115c:	f7fe f818 	bl	800f190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011160:	480c      	ldr	r0, [pc, #48]	@ (8011194 <prvInitialiseTaskLists+0x6c>)
 8011162:	f7fe f815 	bl	800f190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011166:	480c      	ldr	r0, [pc, #48]	@ (8011198 <prvInitialiseTaskLists+0x70>)
 8011168:	f7fe f812 	bl	800f190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801116c:	480b      	ldr	r0, [pc, #44]	@ (801119c <prvInitialiseTaskLists+0x74>)
 801116e:	f7fe f80f 	bl	800f190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011172:	4b0b      	ldr	r3, [pc, #44]	@ (80111a0 <prvInitialiseTaskLists+0x78>)
 8011174:	4a05      	ldr	r2, [pc, #20]	@ (801118c <prvInitialiseTaskLists+0x64>)
 8011176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011178:	4b0a      	ldr	r3, [pc, #40]	@ (80111a4 <prvInitialiseTaskLists+0x7c>)
 801117a:	4a05      	ldr	r2, [pc, #20]	@ (8011190 <prvInitialiseTaskLists+0x68>)
 801117c:	601a      	str	r2, [r3, #0]
}
 801117e:	bf00      	nop
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	2000aed8 	.word	0x2000aed8
 801118c:	2000b338 	.word	0x2000b338
 8011190:	2000b34c 	.word	0x2000b34c
 8011194:	2000b368 	.word	0x2000b368
 8011198:	2000b37c 	.word	0x2000b37c
 801119c:	2000b394 	.word	0x2000b394
 80111a0:	2000b360 	.word	0x2000b360
 80111a4:	2000b364 	.word	0x2000b364

080111a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111ae:	e019      	b.n	80111e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111b0:	f001 f804 	bl	80121bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111b4:	4b10      	ldr	r3, [pc, #64]	@ (80111f8 <prvCheckTasksWaitingTermination+0x50>)
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	3304      	adds	r3, #4
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe f86f 	bl	800f2a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111c6:	4b0d      	ldr	r3, [pc, #52]	@ (80111fc <prvCheckTasksWaitingTermination+0x54>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	3b01      	subs	r3, #1
 80111cc:	4a0b      	ldr	r2, [pc, #44]	@ (80111fc <prvCheckTasksWaitingTermination+0x54>)
 80111ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011200 <prvCheckTasksWaitingTermination+0x58>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	3b01      	subs	r3, #1
 80111d6:	4a0a      	ldr	r2, [pc, #40]	@ (8011200 <prvCheckTasksWaitingTermination+0x58>)
 80111d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111da:	f001 f825 	bl	8012228 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f810 	bl	8011204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111e4:	4b06      	ldr	r3, [pc, #24]	@ (8011200 <prvCheckTasksWaitingTermination+0x58>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1e1      	bne.n	80111b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80111ec:	bf00      	nop
 80111ee:	bf00      	nop
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	2000b37c 	.word	0x2000b37c
 80111fc:	2000b3a8 	.word	0x2000b3a8
 8011200:	2000b390 	.word	0x2000b390

08011204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3354      	adds	r3, #84	@ 0x54
 8011210:	4618      	mov	r0, r3
 8011212:	f00d f809 	bl	801e228 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801121c:	2b00      	cmp	r3, #0
 801121e:	d108      	bne.n	8011232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011224:	4618      	mov	r0, r3
 8011226:	f001 f9c5 	bl	80125b4 <vPortFree>
				vPortFree( pxTCB );
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f001 f9c2 	bl	80125b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011230:	e01b      	b.n	801126a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011238:	2b01      	cmp	r3, #1
 801123a:	d103      	bne.n	8011244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f001 f9b9 	bl	80125b4 <vPortFree>
	}
 8011242:	e012      	b.n	801126a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801124a:	2b02      	cmp	r3, #2
 801124c:	d00d      	beq.n	801126a <prvDeleteTCB+0x66>
	__asm volatile
 801124e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011252:	b672      	cpsid	i
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	b662      	cpsie	i
 8011262:	60fb      	str	r3, [r7, #12]
}
 8011264:	bf00      	nop
 8011266:	bf00      	nop
 8011268:	e7fd      	b.n	8011266 <prvDeleteTCB+0x62>
	}
 801126a:	bf00      	nop
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801127a:	4b0c      	ldr	r3, [pc, #48]	@ (80112ac <prvResetNextTaskUnblockTime+0x38>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d104      	bne.n	801128e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011284:	4b0a      	ldr	r3, [pc, #40]	@ (80112b0 <prvResetNextTaskUnblockTime+0x3c>)
 8011286:	f04f 32ff 	mov.w	r2, #4294967295
 801128a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801128c:	e008      	b.n	80112a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801128e:	4b07      	ldr	r3, [pc, #28]	@ (80112ac <prvResetNextTaskUnblockTime+0x38>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	4a04      	ldr	r2, [pc, #16]	@ (80112b0 <prvResetNextTaskUnblockTime+0x3c>)
 801129e:	6013      	str	r3, [r2, #0]
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	2000b360 	.word	0x2000b360
 80112b0:	2000b3c8 	.word	0x2000b3c8

080112b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80112ba:	4b05      	ldr	r3, [pc, #20]	@ (80112d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80112c0:	687b      	ldr	r3, [r7, #4]
	}
 80112c2:	4618      	mov	r0, r3
 80112c4:	370c      	adds	r7, #12
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	2000aed4 	.word	0x2000aed4

080112d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80112da:	4b0b      	ldr	r3, [pc, #44]	@ (8011308 <xTaskGetSchedulerState+0x34>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80112e2:	2301      	movs	r3, #1
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	e008      	b.n	80112fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112e8:	4b08      	ldr	r3, [pc, #32]	@ (801130c <xTaskGetSchedulerState+0x38>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112f0:	2302      	movs	r3, #2
 80112f2:	607b      	str	r3, [r7, #4]
 80112f4:	e001      	b.n	80112fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112f6:	2300      	movs	r3, #0
 80112f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112fa:	687b      	ldr	r3, [r7, #4]
	}
 80112fc:	4618      	mov	r0, r3
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr
 8011308:	2000b3b4 	.word	0x2000b3b4
 801130c:	2000b3d0 	.word	0x2000b3d0

08011310 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801131c:	2300      	movs	r3, #0
 801131e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d051      	beq.n	80113ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801132a:	4b2a      	ldr	r3, [pc, #168]	@ (80113d4 <xTaskPriorityInherit+0xc4>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011330:	429a      	cmp	r2, r3
 8011332:	d241      	bcs.n	80113b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	699b      	ldr	r3, [r3, #24]
 8011338:	2b00      	cmp	r3, #0
 801133a:	db06      	blt.n	801134a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801133c:	4b25      	ldr	r3, [pc, #148]	@ (80113d4 <xTaskPriorityInherit+0xc4>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011342:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	6959      	ldr	r1, [r3, #20]
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011352:	4613      	mov	r3, r2
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	4413      	add	r3, r2
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4a1f      	ldr	r2, [pc, #124]	@ (80113d8 <xTaskPriorityInherit+0xc8>)
 801135c:	4413      	add	r3, r2
 801135e:	4299      	cmp	r1, r3
 8011360:	d122      	bne.n	80113a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	3304      	adds	r3, #4
 8011366:	4618      	mov	r0, r3
 8011368:	f7fd ff9c 	bl	800f2a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801136c:	4b19      	ldr	r3, [pc, #100]	@ (80113d4 <xTaskPriorityInherit+0xc4>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137a:	4b18      	ldr	r3, [pc, #96]	@ (80113dc <xTaskPriorityInherit+0xcc>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	429a      	cmp	r2, r3
 8011380:	d903      	bls.n	801138a <xTaskPriorityInherit+0x7a>
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011386:	4a15      	ldr	r2, [pc, #84]	@ (80113dc <xTaskPriorityInherit+0xcc>)
 8011388:	6013      	str	r3, [r2, #0]
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138e:	4613      	mov	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4a10      	ldr	r2, [pc, #64]	@ (80113d8 <xTaskPriorityInherit+0xc8>)
 8011398:	441a      	add	r2, r3
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	3304      	adds	r3, #4
 801139e:	4619      	mov	r1, r3
 80113a0:	4610      	mov	r0, r2
 80113a2:	f7fd ff22 	bl	800f1ea <vListInsertEnd>
 80113a6:	e004      	b.n	80113b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80113a8:	4b0a      	ldr	r3, [pc, #40]	@ (80113d4 <xTaskPriorityInherit+0xc4>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80113b2:	2301      	movs	r3, #1
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	e008      	b.n	80113ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113bc:	4b05      	ldr	r3, [pc, #20]	@ (80113d4 <xTaskPriorityInherit+0xc4>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d201      	bcs.n	80113ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80113c6:	2301      	movs	r3, #1
 80113c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113ca:	68fb      	ldr	r3, [r7, #12]
	}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	2000aed4 	.word	0x2000aed4
 80113d8:	2000aed8 	.word	0x2000aed8
 80113dc:	2000b3b0 	.word	0x2000b3b0

080113e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80113ec:	2300      	movs	r3, #0
 80113ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d05c      	beq.n	80114b0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113f6:	4b31      	ldr	r3, [pc, #196]	@ (80114bc <xTaskPriorityDisinherit+0xdc>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	693a      	ldr	r2, [r7, #16]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d00d      	beq.n	801141c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011404:	b672      	cpsid	i
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	b662      	cpsie	i
 8011414:	60fb      	str	r3, [r7, #12]
}
 8011416:	bf00      	nop
 8011418:	bf00      	nop
 801141a:	e7fd      	b.n	8011418 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10d      	bne.n	8011440 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011428:	b672      	cpsid	i
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	b662      	cpsie	i
 8011438:	60bb      	str	r3, [r7, #8]
}
 801143a:	bf00      	nop
 801143c:	bf00      	nop
 801143e:	e7fd      	b.n	801143c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011444:	1e5a      	subs	r2, r3, #1
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011452:	429a      	cmp	r2, r3
 8011454:	d02c      	beq.n	80114b0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801145a:	2b00      	cmp	r3, #0
 801145c:	d128      	bne.n	80114b0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	3304      	adds	r3, #4
 8011462:	4618      	mov	r0, r3
 8011464:	f7fd ff1e 	bl	800f2a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011480:	4b0f      	ldr	r3, [pc, #60]	@ (80114c0 <xTaskPriorityDisinherit+0xe0>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d903      	bls.n	8011490 <xTaskPriorityDisinherit+0xb0>
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801148c:	4a0c      	ldr	r2, [pc, #48]	@ (80114c0 <xTaskPriorityDisinherit+0xe0>)
 801148e:	6013      	str	r3, [r2, #0]
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011494:	4613      	mov	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4a09      	ldr	r2, [pc, #36]	@ (80114c4 <xTaskPriorityDisinherit+0xe4>)
 801149e:	441a      	add	r2, r3
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	3304      	adds	r3, #4
 80114a4:	4619      	mov	r1, r3
 80114a6:	4610      	mov	r0, r2
 80114a8:	f7fd fe9f 	bl	800f1ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80114ac:	2301      	movs	r3, #1
 80114ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80114b0:	697b      	ldr	r3, [r7, #20]
	}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3718      	adds	r7, #24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	2000aed4 	.word	0x2000aed4
 80114c0:	2000b3b0 	.word	0x2000b3b0
 80114c4:	2000aed8 	.word	0x2000aed8

080114c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b088      	sub	sp, #32
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80114d6:	2301      	movs	r3, #1
 80114d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d070      	beq.n	80115c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d10d      	bne.n	8011504 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80114e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ec:	b672      	cpsid	i
 80114ee:	f383 8811 	msr	BASEPRI, r3
 80114f2:	f3bf 8f6f 	isb	sy
 80114f6:	f3bf 8f4f 	dsb	sy
 80114fa:	b662      	cpsie	i
 80114fc:	60fb      	str	r3, [r7, #12]
}
 80114fe:	bf00      	nop
 8011500:	bf00      	nop
 8011502:	e7fd      	b.n	8011500 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	429a      	cmp	r2, r3
 801150c:	d902      	bls.n	8011514 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	61fb      	str	r3, [r7, #28]
 8011512:	e002      	b.n	801151a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011518:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801151e:	69fa      	ldr	r2, [r7, #28]
 8011520:	429a      	cmp	r2, r3
 8011522:	d04e      	beq.n	80115c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	429a      	cmp	r2, r3
 801152c:	d149      	bne.n	80115c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801152e:	4b27      	ldr	r3, [pc, #156]	@ (80115cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	69ba      	ldr	r2, [r7, #24]
 8011534:	429a      	cmp	r2, r3
 8011536:	d10d      	bne.n	8011554 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8011538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801153c:	b672      	cpsid	i
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	b662      	cpsie	i
 801154c:	60bb      	str	r3, [r7, #8]
}
 801154e:	bf00      	nop
 8011550:	bf00      	nop
 8011552:	e7fd      	b.n	8011550 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011558:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	69fa      	ldr	r2, [r7, #28]
 801155e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	2b00      	cmp	r3, #0
 8011566:	db04      	blt.n	8011572 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	6959      	ldr	r1, [r3, #20]
 8011576:	693a      	ldr	r2, [r7, #16]
 8011578:	4613      	mov	r3, r2
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	4413      	add	r3, r2
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4a13      	ldr	r2, [pc, #76]	@ (80115d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011582:	4413      	add	r3, r2
 8011584:	4299      	cmp	r1, r3
 8011586:	d11c      	bne.n	80115c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	3304      	adds	r3, #4
 801158c:	4618      	mov	r0, r3
 801158e:	f7fd fe89 	bl	800f2a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011596:	4b0f      	ldr	r3, [pc, #60]	@ (80115d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	429a      	cmp	r2, r3
 801159c:	d903      	bls.n	80115a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a2:	4a0c      	ldr	r2, [pc, #48]	@ (80115d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115aa:	4613      	mov	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	4a07      	ldr	r2, [pc, #28]	@ (80115d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80115b4:	441a      	add	r2, r3
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	3304      	adds	r3, #4
 80115ba:	4619      	mov	r1, r3
 80115bc:	4610      	mov	r0, r2
 80115be:	f7fd fe14 	bl	800f1ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115c2:	bf00      	nop
 80115c4:	3720      	adds	r7, #32
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	2000aed4 	.word	0x2000aed4
 80115d0:	2000aed8 	.word	0x2000aed8
 80115d4:	2000b3b0 	.word	0x2000b3b0

080115d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80115d8:	b480      	push	{r7}
 80115da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80115dc:	4b07      	ldr	r3, [pc, #28]	@ (80115fc <pvTaskIncrementMutexHeldCount+0x24>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d004      	beq.n	80115ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80115e4:	4b05      	ldr	r3, [pc, #20]	@ (80115fc <pvTaskIncrementMutexHeldCount+0x24>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115ea:	3201      	adds	r2, #1
 80115ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80115ee:	4b03      	ldr	r3, [pc, #12]	@ (80115fc <pvTaskIncrementMutexHeldCount+0x24>)
 80115f0:	681b      	ldr	r3, [r3, #0]
	}
 80115f2:	4618      	mov	r0, r3
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	2000aed4 	.word	0x2000aed4

08011600 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801160a:	f000 fdd7 	bl	80121bc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801160e:	4b20      	ldr	r3, [pc, #128]	@ (8011690 <ulTaskNotifyTake+0x90>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d113      	bne.n	8011642 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801161a:	4b1d      	ldr	r3, [pc, #116]	@ (8011690 <ulTaskNotifyTake+0x90>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	2201      	movs	r2, #1
 8011620:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00b      	beq.n	8011642 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801162a:	2101      	movs	r1, #1
 801162c:	6838      	ldr	r0, [r7, #0]
 801162e:	f000 f8fb 	bl	8011828 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011632:	4b18      	ldr	r3, [pc, #96]	@ (8011694 <ulTaskNotifyTake+0x94>)
 8011634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011638:	601a      	str	r2, [r3, #0]
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011642:	f000 fdf1 	bl	8012228 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011646:	f000 fdb9 	bl	80121bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801164a:	4b11      	ldr	r3, [pc, #68]	@ (8011690 <ulTaskNotifyTake+0x90>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011652:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00e      	beq.n	8011678 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d005      	beq.n	801166c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011660:	4b0b      	ldr	r3, [pc, #44]	@ (8011690 <ulTaskNotifyTake+0x90>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2200      	movs	r2, #0
 8011666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801166a:	e005      	b.n	8011678 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801166c:	4b08      	ldr	r3, [pc, #32]	@ (8011690 <ulTaskNotifyTake+0x90>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	3a01      	subs	r2, #1
 8011674:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011678:	4b05      	ldr	r3, [pc, #20]	@ (8011690 <ulTaskNotifyTake+0x90>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2200      	movs	r2, #0
 801167e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8011682:	f000 fdd1 	bl	8012228 <vPortExitCritical>

		return ulReturn;
 8011686:	68fb      	ldr	r3, [r7, #12]
	}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	2000aed4 	.word	0x2000aed4
 8011694:	e000ed04 	.word	0xe000ed04

08011698 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011698:	b580      	push	{r7, lr}
 801169a:	b08a      	sub	sp, #40	@ 0x28
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	603b      	str	r3, [r7, #0]
 80116a4:	4613      	mov	r3, r2
 80116a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80116a8:	2301      	movs	r3, #1
 80116aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d10d      	bne.n	80116ce <xTaskGenericNotify+0x36>
	__asm volatile
 80116b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116b6:	b672      	cpsid	i
 80116b8:	f383 8811 	msr	BASEPRI, r3
 80116bc:	f3bf 8f6f 	isb	sy
 80116c0:	f3bf 8f4f 	dsb	sy
 80116c4:	b662      	cpsie	i
 80116c6:	61bb      	str	r3, [r7, #24]
}
 80116c8:	bf00      	nop
 80116ca:	bf00      	nop
 80116cc:	e7fd      	b.n	80116ca <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80116d2:	f000 fd73 	bl	80121bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d004      	beq.n	80116e6 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80116dc:	6a3b      	ldr	r3, [r7, #32]
 80116de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80116ec:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80116ee:	6a3b      	ldr	r3, [r7, #32]
 80116f0:	2202      	movs	r2, #2
 80116f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80116f6:	79fb      	ldrb	r3, [r7, #7]
 80116f8:	2b04      	cmp	r3, #4
 80116fa:	d82e      	bhi.n	801175a <xTaskGenericNotify+0xc2>
 80116fc:	a201      	add	r2, pc, #4	@ (adr r2, 8011704 <xTaskGenericNotify+0x6c>)
 80116fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011702:	bf00      	nop
 8011704:	08011783 	.word	0x08011783
 8011708:	08011719 	.word	0x08011719
 801170c:	0801172b 	.word	0x0801172b
 8011710:	0801173b 	.word	0x0801173b
 8011714:	08011745 	.word	0x08011745
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011718:	6a3b      	ldr	r3, [r7, #32]
 801171a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	431a      	orrs	r2, r3
 8011722:	6a3b      	ldr	r3, [r7, #32]
 8011724:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011728:	e02e      	b.n	8011788 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	6a3b      	ldr	r3, [r7, #32]
 8011734:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011738:	e026      	b.n	8011788 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011742:	e021      	b.n	8011788 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011744:	7ffb      	ldrb	r3, [r7, #31]
 8011746:	2b02      	cmp	r3, #2
 8011748:	d004      	beq.n	8011754 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801174a:	6a3b      	ldr	r3, [r7, #32]
 801174c:	68ba      	ldr	r2, [r7, #8]
 801174e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011752:	e019      	b.n	8011788 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8011754:	2300      	movs	r3, #0
 8011756:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011758:	e016      	b.n	8011788 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801175a:	6a3b      	ldr	r3, [r7, #32]
 801175c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011764:	d00f      	beq.n	8011786 <xTaskGenericNotify+0xee>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801176a:	b672      	cpsid	i
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	b662      	cpsie	i
 801177a:	617b      	str	r3, [r7, #20]
}
 801177c:	bf00      	nop
 801177e:	bf00      	nop
 8011780:	e7fd      	b.n	801177e <xTaskGenericNotify+0xe6>
					break;
 8011782:	bf00      	nop
 8011784:	e000      	b.n	8011788 <xTaskGenericNotify+0xf0>

					break;
 8011786:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011788:	7ffb      	ldrb	r3, [r7, #31]
 801178a:	2b01      	cmp	r3, #1
 801178c:	d13d      	bne.n	801180a <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801178e:	6a3b      	ldr	r3, [r7, #32]
 8011790:	3304      	adds	r3, #4
 8011792:	4618      	mov	r0, r3
 8011794:	f7fd fd86 	bl	800f2a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801179c:	4b1e      	ldr	r3, [pc, #120]	@ (8011818 <xTaskGenericNotify+0x180>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d903      	bls.n	80117ac <xTaskGenericNotify+0x114>
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117a8:	4a1b      	ldr	r2, [pc, #108]	@ (8011818 <xTaskGenericNotify+0x180>)
 80117aa:	6013      	str	r3, [r2, #0]
 80117ac:	6a3b      	ldr	r3, [r7, #32]
 80117ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117b0:	4613      	mov	r3, r2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	4413      	add	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4a18      	ldr	r2, [pc, #96]	@ (801181c <xTaskGenericNotify+0x184>)
 80117ba:	441a      	add	r2, r3
 80117bc:	6a3b      	ldr	r3, [r7, #32]
 80117be:	3304      	adds	r3, #4
 80117c0:	4619      	mov	r1, r3
 80117c2:	4610      	mov	r0, r2
 80117c4:	f7fd fd11 	bl	800f1ea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80117c8:	6a3b      	ldr	r3, [r7, #32]
 80117ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d00d      	beq.n	80117ec <xTaskGenericNotify+0x154>
	__asm volatile
 80117d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117d4:	b672      	cpsid	i
 80117d6:	f383 8811 	msr	BASEPRI, r3
 80117da:	f3bf 8f6f 	isb	sy
 80117de:	f3bf 8f4f 	dsb	sy
 80117e2:	b662      	cpsie	i
 80117e4:	613b      	str	r3, [r7, #16]
}
 80117e6:	bf00      	nop
 80117e8:	bf00      	nop
 80117ea:	e7fd      	b.n	80117e8 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117ec:	6a3b      	ldr	r3, [r7, #32]
 80117ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011820 <xTaskGenericNotify+0x188>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d907      	bls.n	801180a <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80117fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011824 <xTaskGenericNotify+0x18c>)
 80117fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801180a:	f000 fd0d 	bl	8012228 <vPortExitCritical>

		return xReturn;
 801180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011810:	4618      	mov	r0, r3
 8011812:	3728      	adds	r7, #40	@ 0x28
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	2000b3b0 	.word	0x2000b3b0
 801181c:	2000aed8 	.word	0x2000aed8
 8011820:	2000aed4 	.word	0x2000aed4
 8011824:	e000ed04 	.word	0xe000ed04

08011828 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011832:	4b21      	ldr	r3, [pc, #132]	@ (80118b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011838:	4b20      	ldr	r3, [pc, #128]	@ (80118bc <prvAddCurrentTaskToDelayedList+0x94>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	3304      	adds	r3, #4
 801183e:	4618      	mov	r0, r3
 8011840:	f7fd fd30 	bl	800f2a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184a:	d10a      	bne.n	8011862 <prvAddCurrentTaskToDelayedList+0x3a>
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d007      	beq.n	8011862 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011852:	4b1a      	ldr	r3, [pc, #104]	@ (80118bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	3304      	adds	r3, #4
 8011858:	4619      	mov	r1, r3
 801185a:	4819      	ldr	r0, [pc, #100]	@ (80118c0 <prvAddCurrentTaskToDelayedList+0x98>)
 801185c:	f7fd fcc5 	bl	800f1ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011860:	e026      	b.n	80118b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	4413      	add	r3, r2
 8011868:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801186a:	4b14      	ldr	r3, [pc, #80]	@ (80118bc <prvAddCurrentTaskToDelayedList+0x94>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011872:	68ba      	ldr	r2, [r7, #8]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	429a      	cmp	r2, r3
 8011878:	d209      	bcs.n	801188e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801187a:	4b12      	ldr	r3, [pc, #72]	@ (80118c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	4b0f      	ldr	r3, [pc, #60]	@ (80118bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3304      	adds	r3, #4
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7fd fcd3 	bl	800f232 <vListInsert>
}
 801188c:	e010      	b.n	80118b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801188e:	4b0e      	ldr	r3, [pc, #56]	@ (80118c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b0a      	ldr	r3, [pc, #40]	@ (80118bc <prvAddCurrentTaskToDelayedList+0x94>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	3304      	adds	r3, #4
 8011898:	4619      	mov	r1, r3
 801189a:	4610      	mov	r0, r2
 801189c:	f7fd fcc9 	bl	800f232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80118a0:	4b0a      	ldr	r3, [pc, #40]	@ (80118cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d202      	bcs.n	80118b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80118aa:	4a08      	ldr	r2, [pc, #32]	@ (80118cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	6013      	str	r3, [r2, #0]
}
 80118b0:	bf00      	nop
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	2000b3ac 	.word	0x2000b3ac
 80118bc:	2000aed4 	.word	0x2000aed4
 80118c0:	2000b394 	.word	0x2000b394
 80118c4:	2000b364 	.word	0x2000b364
 80118c8:	2000b360 	.word	0x2000b360
 80118cc:	2000b3c8 	.word	0x2000b3c8

080118d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b08a      	sub	sp, #40	@ 0x28
 80118d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80118da:	f000 fb21 	bl	8011f20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80118de:	4b1e      	ldr	r3, [pc, #120]	@ (8011958 <xTimerCreateTimerTask+0x88>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d021      	beq.n	801192a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118e6:	2300      	movs	r3, #0
 80118e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118ee:	1d3a      	adds	r2, r7, #4
 80118f0:	f107 0108 	add.w	r1, r7, #8
 80118f4:	f107 030c 	add.w	r3, r7, #12
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fd fc2f 	bl	800f15c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118fe:	6879      	ldr	r1, [r7, #4]
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	9202      	str	r2, [sp, #8]
 8011906:	9301      	str	r3, [sp, #4]
 8011908:	2302      	movs	r3, #2
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	2300      	movs	r3, #0
 801190e:	460a      	mov	r2, r1
 8011910:	4912      	ldr	r1, [pc, #72]	@ (801195c <xTimerCreateTimerTask+0x8c>)
 8011912:	4813      	ldr	r0, [pc, #76]	@ (8011960 <xTimerCreateTimerTask+0x90>)
 8011914:	f7fe fe20 	bl	8010558 <xTaskCreateStatic>
 8011918:	4603      	mov	r3, r0
 801191a:	4a12      	ldr	r2, [pc, #72]	@ (8011964 <xTimerCreateTimerTask+0x94>)
 801191c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801191e:	4b11      	ldr	r3, [pc, #68]	@ (8011964 <xTimerCreateTimerTask+0x94>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d001      	beq.n	801192a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011926:	2301      	movs	r3, #1
 8011928:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d10d      	bne.n	801194c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8011930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011934:	b672      	cpsid	i
 8011936:	f383 8811 	msr	BASEPRI, r3
 801193a:	f3bf 8f6f 	isb	sy
 801193e:	f3bf 8f4f 	dsb	sy
 8011942:	b662      	cpsie	i
 8011944:	613b      	str	r3, [r7, #16]
}
 8011946:	bf00      	nop
 8011948:	bf00      	nop
 801194a:	e7fd      	b.n	8011948 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801194c:	697b      	ldr	r3, [r7, #20]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	2000b404 	.word	0x2000b404
 801195c:	0801f0ec 	.word	0x0801f0ec
 8011960:	08011aa9 	.word	0x08011aa9
 8011964:	2000b408 	.word	0x2000b408

08011968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b08a      	sub	sp, #40	@ 0x28
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	60b9      	str	r1, [r7, #8]
 8011972:	607a      	str	r2, [r7, #4]
 8011974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011976:	2300      	movs	r3, #0
 8011978:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d10d      	bne.n	801199c <xTimerGenericCommand+0x34>
	__asm volatile
 8011980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011984:	b672      	cpsid	i
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	b662      	cpsie	i
 8011994:	623b      	str	r3, [r7, #32]
}
 8011996:	bf00      	nop
 8011998:	bf00      	nop
 801199a:	e7fd      	b.n	8011998 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801199c:	4b19      	ldr	r3, [pc, #100]	@ (8011a04 <xTimerGenericCommand+0x9c>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d02a      	beq.n	80119fa <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	2b05      	cmp	r3, #5
 80119b4:	dc18      	bgt.n	80119e8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80119b6:	f7ff fc8d 	bl	80112d4 <xTaskGetSchedulerState>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b02      	cmp	r3, #2
 80119be:	d109      	bne.n	80119d4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80119c0:	4b10      	ldr	r3, [pc, #64]	@ (8011a04 <xTimerGenericCommand+0x9c>)
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	f107 0110 	add.w	r1, r7, #16
 80119c8:	2300      	movs	r3, #0
 80119ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119cc:	f7fd ff20 	bl	800f810 <xQueueGenericSend>
 80119d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80119d2:	e012      	b.n	80119fa <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80119d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011a04 <xTimerGenericCommand+0x9c>)
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	f107 0110 	add.w	r1, r7, #16
 80119dc:	2300      	movs	r3, #0
 80119de:	2200      	movs	r2, #0
 80119e0:	f7fd ff16 	bl	800f810 <xQueueGenericSend>
 80119e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80119e6:	e008      	b.n	80119fa <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80119e8:	4b06      	ldr	r3, [pc, #24]	@ (8011a04 <xTimerGenericCommand+0x9c>)
 80119ea:	6818      	ldr	r0, [r3, #0]
 80119ec:	f107 0110 	add.w	r1, r7, #16
 80119f0:	2300      	movs	r3, #0
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	f7fe f816 	bl	800fa24 <xQueueGenericSendFromISR>
 80119f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80119fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3728      	adds	r7, #40	@ 0x28
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	2000b404 	.word	0x2000b404

08011a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b088      	sub	sp, #32
 8011a0c:	af02      	add	r7, sp, #8
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a12:	4b24      	ldr	r3, [pc, #144]	@ (8011aa4 <prvProcessExpiredTimer+0x9c>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fd fc3f 	bl	800f2a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a2c:	f003 0304 	and.w	r3, r3, #4
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d025      	beq.n	8011a80 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	699a      	ldr	r2, [r3, #24]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	18d1      	adds	r1, r2, r3
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	6978      	ldr	r0, [r7, #20]
 8011a42:	f000 f8d7 	bl	8011bf4 <prvInsertTimerInActiveList>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d022      	beq.n	8011a92 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	2300      	movs	r3, #0
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	2100      	movs	r1, #0
 8011a56:	6978      	ldr	r0, [r7, #20]
 8011a58:	f7ff ff86 	bl	8011968 <xTimerGenericCommand>
 8011a5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d116      	bne.n	8011a92 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8011a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a68:	b672      	cpsid	i
 8011a6a:	f383 8811 	msr	BASEPRI, r3
 8011a6e:	f3bf 8f6f 	isb	sy
 8011a72:	f3bf 8f4f 	dsb	sy
 8011a76:	b662      	cpsie	i
 8011a78:	60fb      	str	r3, [r7, #12]
}
 8011a7a:	bf00      	nop
 8011a7c:	bf00      	nop
 8011a7e:	e7fd      	b.n	8011a7c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a86:	f023 0301 	bic.w	r3, r3, #1
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	6978      	ldr	r0, [r7, #20]
 8011a98:	4798      	blx	r3
}
 8011a9a:	bf00      	nop
 8011a9c:	3718      	adds	r7, #24
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	2000b3fc 	.word	0x2000b3fc

08011aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ab0:	f107 0308 	add.w	r3, r7, #8
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f000 f859 	bl	8011b6c <prvGetNextExpireTime>
 8011aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f000 f805 	bl	8011ad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011ac6:	f000 f8d7 	bl	8011c78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011aca:	bf00      	nop
 8011acc:	e7f0      	b.n	8011ab0 <prvTimerTask+0x8>
	...

08011ad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011ada:	f7fe ffaf 	bl	8010a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ade:	f107 0308 	add.w	r3, r7, #8
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 f866 	bl	8011bb4 <prvSampleTimeNow>
 8011ae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d130      	bne.n	8011b52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10a      	bne.n	8011b0c <prvProcessTimerOrBlockTask+0x3c>
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d806      	bhi.n	8011b0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011afe:	f7fe ffab 	bl	8010a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011b02:	68f9      	ldr	r1, [r7, #12]
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7ff ff7f 	bl	8011a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011b0a:	e024      	b.n	8011b56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d008      	beq.n	8011b24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011b12:	4b13      	ldr	r3, [pc, #76]	@ (8011b60 <prvProcessTimerOrBlockTask+0x90>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <prvProcessTimerOrBlockTask+0x50>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <prvProcessTimerOrBlockTask+0x52>
 8011b20:	2300      	movs	r3, #0
 8011b22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011b24:	4b0f      	ldr	r3, [pc, #60]	@ (8011b64 <prvProcessTimerOrBlockTask+0x94>)
 8011b26:	6818      	ldr	r0, [r3, #0]
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	1ad3      	subs	r3, r2, r3
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	4619      	mov	r1, r3
 8011b32:	f7fe fcdd 	bl	80104f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011b36:	f7fe ff8f 	bl	8010a58 <xTaskResumeAll>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d10a      	bne.n	8011b56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011b40:	4b09      	ldr	r3, [pc, #36]	@ (8011b68 <prvProcessTimerOrBlockTask+0x98>)
 8011b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	f3bf 8f6f 	isb	sy
}
 8011b50:	e001      	b.n	8011b56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011b52:	f7fe ff81 	bl	8010a58 <xTaskResumeAll>
}
 8011b56:	bf00      	nop
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	2000b400 	.word	0x2000b400
 8011b64:	2000b404 	.word	0x2000b404
 8011b68:	e000ed04 	.word	0xe000ed04

08011b6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b74:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb0 <prvGetNextExpireTime+0x44>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d101      	bne.n	8011b82 <prvGetNextExpireTime+0x16>
 8011b7e:	2201      	movs	r2, #1
 8011b80:	e000      	b.n	8011b84 <prvGetNextExpireTime+0x18>
 8011b82:	2200      	movs	r2, #0
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b90:	4b07      	ldr	r3, [pc, #28]	@ (8011bb0 <prvGetNextExpireTime+0x44>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	e001      	b.n	8011ba0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3714      	adds	r7, #20
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	2000b3fc 	.word	0x2000b3fc

08011bb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011bbc:	f7fe ffec 	bl	8010b98 <xTaskGetTickCount>
 8011bc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf0 <prvSampleTimeNow+0x3c>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d205      	bcs.n	8011bd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011bcc:	f000 f940 	bl	8011e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	601a      	str	r2, [r3, #0]
 8011bd6:	e002      	b.n	8011bde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011bde:	4a04      	ldr	r2, [pc, #16]	@ (8011bf0 <prvSampleTimeNow+0x3c>)
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011be4:	68fb      	ldr	r3, [r7, #12]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	2000b40c 	.word	0x2000b40c

08011bf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
 8011c00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011c02:	2300      	movs	r3, #0
 8011c04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011c12:	68ba      	ldr	r2, [r7, #8]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d812      	bhi.n	8011c40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	1ad2      	subs	r2, r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	699b      	ldr	r3, [r3, #24]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d302      	bcc.n	8011c2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	617b      	str	r3, [r7, #20]
 8011c2c:	e01b      	b.n	8011c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011c2e:	4b10      	ldr	r3, [pc, #64]	@ (8011c70 <prvInsertTimerInActiveList+0x7c>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4619      	mov	r1, r3
 8011c38:	4610      	mov	r0, r2
 8011c3a:	f7fd fafa 	bl	800f232 <vListInsert>
 8011c3e:	e012      	b.n	8011c66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d206      	bcs.n	8011c56 <prvInsertTimerInActiveList+0x62>
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d302      	bcc.n	8011c56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011c50:	2301      	movs	r3, #1
 8011c52:	617b      	str	r3, [r7, #20]
 8011c54:	e007      	b.n	8011c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c56:	4b07      	ldr	r3, [pc, #28]	@ (8011c74 <prvInsertTimerInActiveList+0x80>)
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	3304      	adds	r3, #4
 8011c5e:	4619      	mov	r1, r3
 8011c60:	4610      	mov	r0, r2
 8011c62:	f7fd fae6 	bl	800f232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011c66:	697b      	ldr	r3, [r7, #20]
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3718      	adds	r7, #24
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	2000b400 	.word	0x2000b400
 8011c74:	2000b3fc 	.word	0x2000b3fc

08011c78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b08e      	sub	sp, #56	@ 0x38
 8011c7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c7e:	e0d4      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	da1b      	bge.n	8011cbe <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c86:	1d3b      	adds	r3, r7, #4
 8011c88:	3304      	adds	r3, #4
 8011c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d10d      	bne.n	8011cae <prvProcessReceivedCommands+0x36>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c96:	b672      	cpsid	i
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	b662      	cpsie	i
 8011ca6:	61fb      	str	r3, [r7, #28]
}
 8011ca8:	bf00      	nop
 8011caa:	bf00      	nop
 8011cac:	e7fd      	b.n	8011caa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cb4:	6850      	ldr	r0, [r2, #4]
 8011cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cb8:	6892      	ldr	r2, [r2, #8]
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f2c0 80b2 	blt.w	8011e2a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ccc:	695b      	ldr	r3, [r3, #20]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d004      	beq.n	8011cdc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fd fae4 	bl	800f2a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011cdc:	463b      	mov	r3, r7
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ff ff68 	bl	8011bb4 <prvSampleTimeNow>
 8011ce4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2b09      	cmp	r3, #9
 8011cea:	f200 809b 	bhi.w	8011e24 <prvProcessReceivedCommands+0x1ac>
 8011cee:	a201      	add	r2, pc, #4	@ (adr r2, 8011cf4 <prvProcessReceivedCommands+0x7c>)
 8011cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf4:	08011d1d 	.word	0x08011d1d
 8011cf8:	08011d1d 	.word	0x08011d1d
 8011cfc:	08011d1d 	.word	0x08011d1d
 8011d00:	08011d97 	.word	0x08011d97
 8011d04:	08011dab 	.word	0x08011dab
 8011d08:	08011dfb 	.word	0x08011dfb
 8011d0c:	08011d1d 	.word	0x08011d1d
 8011d10:	08011d1d 	.word	0x08011d1d
 8011d14:	08011d97 	.word	0x08011d97
 8011d18:	08011dab 	.word	0x08011dab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d22:	f043 0301 	orr.w	r3, r3, #1
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d32:	699b      	ldr	r3, [r3, #24]
 8011d34:	18d1      	adds	r1, r2, r3
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d3c:	f7ff ff5a 	bl	8011bf4 <prvInsertTimerInActiveList>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d070      	beq.n	8011e28 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d48:	6a1b      	ldr	r3, [r3, #32]
 8011d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d065      	beq.n	8011e28 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011d5c:	68ba      	ldr	r2, [r7, #8]
 8011d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d60:	699b      	ldr	r3, [r3, #24]
 8011d62:	441a      	add	r2, r3
 8011d64:	2300      	movs	r3, #0
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	2300      	movs	r3, #0
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011d6e:	f7ff fdfb 	bl	8011968 <xTimerGenericCommand>
 8011d72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d156      	bne.n	8011e28 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8011d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d7e:	b672      	cpsid	i
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	b662      	cpsie	i
 8011d8e:	61bb      	str	r3, [r7, #24]
}
 8011d90:	bf00      	nop
 8011d92:	bf00      	nop
 8011d94:	e7fd      	b.n	8011d92 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d9c:	f023 0301 	bic.w	r3, r3, #1
 8011da0:	b2da      	uxtb	r2, r3
 8011da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011da8:	e03f      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011db0:	f043 0301 	orr.w	r3, r3, #1
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc4:	699b      	ldr	r3, [r3, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10d      	bne.n	8011de6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8011dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dce:	b672      	cpsid	i
 8011dd0:	f383 8811 	msr	BASEPRI, r3
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	b662      	cpsie	i
 8011dde:	617b      	str	r3, [r7, #20]
}
 8011de0:	bf00      	nop
 8011de2:	bf00      	nop
 8011de4:	e7fd      	b.n	8011de2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	699a      	ldr	r2, [r3, #24]
 8011dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dec:	18d1      	adds	r1, r2, r3
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011df4:	f7ff fefe 	bl	8011bf4 <prvInsertTimerInActiveList>
					break;
 8011df8:	e017      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e00:	f003 0302 	and.w	r3, r3, #2
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d103      	bne.n	8011e10 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8011e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e0a:	f000 fbd3 	bl	80125b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011e0e:	e00c      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e16:	f023 0301 	bic.w	r3, r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011e22:	e002      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8011e24:	bf00      	nop
 8011e26:	e000      	b.n	8011e2a <prvProcessReceivedCommands+0x1b2>
					break;
 8011e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e2a:	4b08      	ldr	r3, [pc, #32]	@ (8011e4c <prvProcessReceivedCommands+0x1d4>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	1d39      	adds	r1, r7, #4
 8011e30:	2200      	movs	r2, #0
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fd ff32 	bl	800fc9c <xQueueReceive>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f47f af20 	bne.w	8011c80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011e40:	bf00      	nop
 8011e42:	bf00      	nop
 8011e44:	3730      	adds	r7, #48	@ 0x30
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	2000b404 	.word	0x2000b404

08011e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b088      	sub	sp, #32
 8011e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e56:	e04b      	b.n	8011ef0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011e58:	4b2f      	ldr	r3, [pc, #188]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e62:	4b2d      	ldr	r3, [pc, #180]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fd fa17 	bl	800f2a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6a1b      	ldr	r3, [r3, #32]
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e84:	f003 0304 	and.w	r3, r3, #4
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d031      	beq.n	8011ef0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	699b      	ldr	r3, [r3, #24]
 8011e90:	693a      	ldr	r2, [r7, #16]
 8011e92:	4413      	add	r3, r2
 8011e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d90e      	bls.n	8011ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	68ba      	ldr	r2, [r7, #8]
 8011ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	f7fd f9bc 	bl	800f232 <vListInsert>
 8011eba:	e019      	b.n	8011ef0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	693a      	ldr	r2, [r7, #16]
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f7ff fd4e 	bl	8011968 <xTimerGenericCommand>
 8011ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d10d      	bne.n	8011ef0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8011ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ed8:	b672      	cpsid	i
 8011eda:	f383 8811 	msr	BASEPRI, r3
 8011ede:	f3bf 8f6f 	isb	sy
 8011ee2:	f3bf 8f4f 	dsb	sy
 8011ee6:	b662      	cpsie	i
 8011ee8:	603b      	str	r3, [r7, #0]
}
 8011eea:	bf00      	nop
 8011eec:	bf00      	nop
 8011eee:	e7fd      	b.n	8011eec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011ef0:	4b09      	ldr	r3, [pc, #36]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1ae      	bne.n	8011e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011efa:	4b07      	ldr	r3, [pc, #28]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011f00:	4b06      	ldr	r3, [pc, #24]	@ (8011f1c <prvSwitchTimerLists+0xcc>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4a04      	ldr	r2, [pc, #16]	@ (8011f18 <prvSwitchTimerLists+0xc8>)
 8011f06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011f08:	4a04      	ldr	r2, [pc, #16]	@ (8011f1c <prvSwitchTimerLists+0xcc>)
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	6013      	str	r3, [r2, #0]
}
 8011f0e:	bf00      	nop
 8011f10:	3718      	adds	r7, #24
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2000b3fc 	.word	0x2000b3fc
 8011f1c:	2000b400 	.word	0x2000b400

08011f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011f26:	f000 f949 	bl	80121bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011f2a:	4b15      	ldr	r3, [pc, #84]	@ (8011f80 <prvCheckForValidListAndQueue+0x60>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d120      	bne.n	8011f74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011f32:	4814      	ldr	r0, [pc, #80]	@ (8011f84 <prvCheckForValidListAndQueue+0x64>)
 8011f34:	f7fd f92c 	bl	800f190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011f38:	4813      	ldr	r0, [pc, #76]	@ (8011f88 <prvCheckForValidListAndQueue+0x68>)
 8011f3a:	f7fd f929 	bl	800f190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011f3e:	4b13      	ldr	r3, [pc, #76]	@ (8011f8c <prvCheckForValidListAndQueue+0x6c>)
 8011f40:	4a10      	ldr	r2, [pc, #64]	@ (8011f84 <prvCheckForValidListAndQueue+0x64>)
 8011f42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011f44:	4b12      	ldr	r3, [pc, #72]	@ (8011f90 <prvCheckForValidListAndQueue+0x70>)
 8011f46:	4a10      	ldr	r2, [pc, #64]	@ (8011f88 <prvCheckForValidListAndQueue+0x68>)
 8011f48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	4b11      	ldr	r3, [pc, #68]	@ (8011f94 <prvCheckForValidListAndQueue+0x74>)
 8011f50:	4a11      	ldr	r2, [pc, #68]	@ (8011f98 <prvCheckForValidListAndQueue+0x78>)
 8011f52:	2110      	movs	r1, #16
 8011f54:	200a      	movs	r0, #10
 8011f56:	f7fd fa3b 	bl	800f3d0 <xQueueGenericCreateStatic>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	4a08      	ldr	r2, [pc, #32]	@ (8011f80 <prvCheckForValidListAndQueue+0x60>)
 8011f5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011f60:	4b07      	ldr	r3, [pc, #28]	@ (8011f80 <prvCheckForValidListAndQueue+0x60>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d005      	beq.n	8011f74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011f68:	4b05      	ldr	r3, [pc, #20]	@ (8011f80 <prvCheckForValidListAndQueue+0x60>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	490b      	ldr	r1, [pc, #44]	@ (8011f9c <prvCheckForValidListAndQueue+0x7c>)
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe fa6a 	bl	8010448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f74:	f000 f958 	bl	8012228 <vPortExitCritical>
}
 8011f78:	bf00      	nop
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	2000b404 	.word	0x2000b404
 8011f84:	2000b3d4 	.word	0x2000b3d4
 8011f88:	2000b3e8 	.word	0x2000b3e8
 8011f8c:	2000b3fc 	.word	0x2000b3fc
 8011f90:	2000b400 	.word	0x2000b400
 8011f94:	2000b4b0 	.word	0x2000b4b0
 8011f98:	2000b410 	.word	0x2000b410
 8011f9c:	0801f0f4 	.word	0x0801f0f4

08011fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b085      	sub	sp, #20
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	3b04      	subs	r3, #4
 8011fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	3b04      	subs	r3, #4
 8011fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	f023 0201 	bic.w	r2, r3, #1
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	3b04      	subs	r3, #4
 8011fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8012004 <pxPortInitialiseStack+0x64>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	3b14      	subs	r3, #20
 8011fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	3b04      	subs	r3, #4
 8011fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f06f 0202 	mvn.w	r2, #2
 8011fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	3b20      	subs	r3, #32
 8011ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3714      	adds	r7, #20
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	08012009 	.word	0x08012009

08012008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012008:	b480      	push	{r7}
 801200a:	b085      	sub	sp, #20
 801200c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012012:	4b15      	ldr	r3, [pc, #84]	@ (8012068 <prvTaskExitError+0x60>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201a:	d00d      	beq.n	8012038 <prvTaskExitError+0x30>
	__asm volatile
 801201c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012020:	b672      	cpsid	i
 8012022:	f383 8811 	msr	BASEPRI, r3
 8012026:	f3bf 8f6f 	isb	sy
 801202a:	f3bf 8f4f 	dsb	sy
 801202e:	b662      	cpsie	i
 8012030:	60fb      	str	r3, [r7, #12]
}
 8012032:	bf00      	nop
 8012034:	bf00      	nop
 8012036:	e7fd      	b.n	8012034 <prvTaskExitError+0x2c>
	__asm volatile
 8012038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203c:	b672      	cpsid	i
 801203e:	f383 8811 	msr	BASEPRI, r3
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	b662      	cpsie	i
 801204c:	60bb      	str	r3, [r7, #8]
}
 801204e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012050:	bf00      	nop
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d0fc      	beq.n	8012052 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012058:	bf00      	nop
 801205a:	bf00      	nop
 801205c:	3714      	adds	r7, #20
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop
 8012068:	20000020 	.word	0x20000020
 801206c:	00000000 	.word	0x00000000

08012070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012070:	4b07      	ldr	r3, [pc, #28]	@ (8012090 <pxCurrentTCBConst2>)
 8012072:	6819      	ldr	r1, [r3, #0]
 8012074:	6808      	ldr	r0, [r1, #0]
 8012076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207a:	f380 8809 	msr	PSP, r0
 801207e:	f3bf 8f6f 	isb	sy
 8012082:	f04f 0000 	mov.w	r0, #0
 8012086:	f380 8811 	msr	BASEPRI, r0
 801208a:	4770      	bx	lr
 801208c:	f3af 8000 	nop.w

08012090 <pxCurrentTCBConst2>:
 8012090:	2000aed4 	.word	0x2000aed4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012094:	bf00      	nop
 8012096:	bf00      	nop

08012098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012098:	4808      	ldr	r0, [pc, #32]	@ (80120bc <prvPortStartFirstTask+0x24>)
 801209a:	6800      	ldr	r0, [r0, #0]
 801209c:	6800      	ldr	r0, [r0, #0]
 801209e:	f380 8808 	msr	MSP, r0
 80120a2:	f04f 0000 	mov.w	r0, #0
 80120a6:	f380 8814 	msr	CONTROL, r0
 80120aa:	b662      	cpsie	i
 80120ac:	b661      	cpsie	f
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	df00      	svc	0
 80120b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80120ba:	bf00      	nop
 80120bc:	e000ed08 	.word	0xe000ed08

080120c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80120c6:	4b37      	ldr	r3, [pc, #220]	@ (80121a4 <xPortStartScheduler+0xe4>)
 80120c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	22ff      	movs	r2, #255	@ 0xff
 80120d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80120e0:	78fb      	ldrb	r3, [r7, #3]
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	4b2f      	ldr	r3, [pc, #188]	@ (80121a8 <xPortStartScheduler+0xe8>)
 80120ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80120ee:	4b2f      	ldr	r3, [pc, #188]	@ (80121ac <xPortStartScheduler+0xec>)
 80120f0:	2207      	movs	r2, #7
 80120f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120f4:	e009      	b.n	801210a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80120f6:	4b2d      	ldr	r3, [pc, #180]	@ (80121ac <xPortStartScheduler+0xec>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	3b01      	subs	r3, #1
 80120fc:	4a2b      	ldr	r2, [pc, #172]	@ (80121ac <xPortStartScheduler+0xec>)
 80120fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012100:	78fb      	ldrb	r3, [r7, #3]
 8012102:	b2db      	uxtb	r3, r3
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	b2db      	uxtb	r3, r3
 8012108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801210a:	78fb      	ldrb	r3, [r7, #3]
 801210c:	b2db      	uxtb	r3, r3
 801210e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012112:	2b80      	cmp	r3, #128	@ 0x80
 8012114:	d0ef      	beq.n	80120f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012116:	4b25      	ldr	r3, [pc, #148]	@ (80121ac <xPortStartScheduler+0xec>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f1c3 0307 	rsb	r3, r3, #7
 801211e:	2b04      	cmp	r3, #4
 8012120:	d00d      	beq.n	801213e <xPortStartScheduler+0x7e>
	__asm volatile
 8012122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012126:	b672      	cpsid	i
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	b662      	cpsie	i
 8012136:	60bb      	str	r3, [r7, #8]
}
 8012138:	bf00      	nop
 801213a:	bf00      	nop
 801213c:	e7fd      	b.n	801213a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801213e:	4b1b      	ldr	r3, [pc, #108]	@ (80121ac <xPortStartScheduler+0xec>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	021b      	lsls	r3, r3, #8
 8012144:	4a19      	ldr	r2, [pc, #100]	@ (80121ac <xPortStartScheduler+0xec>)
 8012146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012148:	4b18      	ldr	r3, [pc, #96]	@ (80121ac <xPortStartScheduler+0xec>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012150:	4a16      	ldr	r2, [pc, #88]	@ (80121ac <xPortStartScheduler+0xec>)
 8012152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	b2da      	uxtb	r2, r3
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801215c:	4b14      	ldr	r3, [pc, #80]	@ (80121b0 <xPortStartScheduler+0xf0>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a13      	ldr	r2, [pc, #76]	@ (80121b0 <xPortStartScheduler+0xf0>)
 8012162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012168:	4b11      	ldr	r3, [pc, #68]	@ (80121b0 <xPortStartScheduler+0xf0>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4a10      	ldr	r2, [pc, #64]	@ (80121b0 <xPortStartScheduler+0xf0>)
 801216e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012174:	f000 f8dc 	bl	8012330 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012178:	4b0e      	ldr	r3, [pc, #56]	@ (80121b4 <xPortStartScheduler+0xf4>)
 801217a:	2200      	movs	r2, #0
 801217c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801217e:	f000 f8fb 	bl	8012378 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012182:	4b0d      	ldr	r3, [pc, #52]	@ (80121b8 <xPortStartScheduler+0xf8>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	4a0c      	ldr	r2, [pc, #48]	@ (80121b8 <xPortStartScheduler+0xf8>)
 8012188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801218c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801218e:	f7ff ff83 	bl	8012098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012192:	f7fe fddf 	bl	8010d54 <vTaskSwitchContext>
	prvTaskExitError();
 8012196:	f7ff ff37 	bl	8012008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	e000e400 	.word	0xe000e400
 80121a8:	2000b500 	.word	0x2000b500
 80121ac:	2000b504 	.word	0x2000b504
 80121b0:	e000ed20 	.word	0xe000ed20
 80121b4:	20000020 	.word	0x20000020
 80121b8:	e000ef34 	.word	0xe000ef34

080121bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
	__asm volatile
 80121c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121c6:	b672      	cpsid	i
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	b662      	cpsie	i
 80121d6:	607b      	str	r3, [r7, #4]
}
 80121d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80121da:	4b11      	ldr	r3, [pc, #68]	@ (8012220 <vPortEnterCritical+0x64>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3301      	adds	r3, #1
 80121e0:	4a0f      	ldr	r2, [pc, #60]	@ (8012220 <vPortEnterCritical+0x64>)
 80121e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80121e4:	4b0e      	ldr	r3, [pc, #56]	@ (8012220 <vPortEnterCritical+0x64>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d112      	bne.n	8012212 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80121ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012224 <vPortEnterCritical+0x68>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	b2db      	uxtb	r3, r3
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00d      	beq.n	8012212 <vPortEnterCritical+0x56>
	__asm volatile
 80121f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121fa:	b672      	cpsid	i
 80121fc:	f383 8811 	msr	BASEPRI, r3
 8012200:	f3bf 8f6f 	isb	sy
 8012204:	f3bf 8f4f 	dsb	sy
 8012208:	b662      	cpsie	i
 801220a:	603b      	str	r3, [r7, #0]
}
 801220c:	bf00      	nop
 801220e:	bf00      	nop
 8012210:	e7fd      	b.n	801220e <vPortEnterCritical+0x52>
	}
}
 8012212:	bf00      	nop
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	20000020 	.word	0x20000020
 8012224:	e000ed04 	.word	0xe000ed04

08012228 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801222e:	4b13      	ldr	r3, [pc, #76]	@ (801227c <vPortExitCritical+0x54>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d10d      	bne.n	8012252 <vPortExitCritical+0x2a>
	__asm volatile
 8012236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801223a:	b672      	cpsid	i
 801223c:	f383 8811 	msr	BASEPRI, r3
 8012240:	f3bf 8f6f 	isb	sy
 8012244:	f3bf 8f4f 	dsb	sy
 8012248:	b662      	cpsie	i
 801224a:	607b      	str	r3, [r7, #4]
}
 801224c:	bf00      	nop
 801224e:	bf00      	nop
 8012250:	e7fd      	b.n	801224e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012252:	4b0a      	ldr	r3, [pc, #40]	@ (801227c <vPortExitCritical+0x54>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3b01      	subs	r3, #1
 8012258:	4a08      	ldr	r2, [pc, #32]	@ (801227c <vPortExitCritical+0x54>)
 801225a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801225c:	4b07      	ldr	r3, [pc, #28]	@ (801227c <vPortExitCritical+0x54>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d105      	bne.n	8012270 <vPortExitCritical+0x48>
 8012264:	2300      	movs	r3, #0
 8012266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	f383 8811 	msr	BASEPRI, r3
}
 801226e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	20000020 	.word	0x20000020

08012280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012280:	f3ef 8009 	mrs	r0, PSP
 8012284:	f3bf 8f6f 	isb	sy
 8012288:	4b15      	ldr	r3, [pc, #84]	@ (80122e0 <pxCurrentTCBConst>)
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	f01e 0f10 	tst.w	lr, #16
 8012290:	bf08      	it	eq
 8012292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801229a:	6010      	str	r0, [r2, #0]
 801229c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80122a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80122a4:	b672      	cpsid	i
 80122a6:	f380 8811 	msr	BASEPRI, r0
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	f3bf 8f6f 	isb	sy
 80122b2:	b662      	cpsie	i
 80122b4:	f7fe fd4e 	bl	8010d54 <vTaskSwitchContext>
 80122b8:	f04f 0000 	mov.w	r0, #0
 80122bc:	f380 8811 	msr	BASEPRI, r0
 80122c0:	bc09      	pop	{r0, r3}
 80122c2:	6819      	ldr	r1, [r3, #0]
 80122c4:	6808      	ldr	r0, [r1, #0]
 80122c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ca:	f01e 0f10 	tst.w	lr, #16
 80122ce:	bf08      	it	eq
 80122d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80122d4:	f380 8809 	msr	PSP, r0
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop

080122e0 <pxCurrentTCBConst>:
 80122e0:	2000aed4 	.word	0x2000aed4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80122e4:	bf00      	nop
 80122e6:	bf00      	nop

080122e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
	__asm volatile
 80122ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f2:	b672      	cpsid	i
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	b662      	cpsie	i
 8012302:	607b      	str	r3, [r7, #4]
}
 8012304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012306:	f7fe fc69 	bl	8010bdc <xTaskIncrementTick>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d003      	beq.n	8012318 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012310:	4b06      	ldr	r3, [pc, #24]	@ (801232c <SysTick_Handler+0x44>)
 8012312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	2300      	movs	r3, #0
 801231a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	f383 8811 	msr	BASEPRI, r3
}
 8012322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	e000ed04 	.word	0xe000ed04

08012330 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012330:	b480      	push	{r7}
 8012332:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012334:	4b0b      	ldr	r3, [pc, #44]	@ (8012364 <vPortSetupTimerInterrupt+0x34>)
 8012336:	2200      	movs	r2, #0
 8012338:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801233a:	4b0b      	ldr	r3, [pc, #44]	@ (8012368 <vPortSetupTimerInterrupt+0x38>)
 801233c:	2200      	movs	r2, #0
 801233e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012340:	4b0a      	ldr	r3, [pc, #40]	@ (801236c <vPortSetupTimerInterrupt+0x3c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4a0a      	ldr	r2, [pc, #40]	@ (8012370 <vPortSetupTimerInterrupt+0x40>)
 8012346:	fba2 2303 	umull	r2, r3, r2, r3
 801234a:	099b      	lsrs	r3, r3, #6
 801234c:	4a09      	ldr	r2, [pc, #36]	@ (8012374 <vPortSetupTimerInterrupt+0x44>)
 801234e:	3b01      	subs	r3, #1
 8012350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012352:	4b04      	ldr	r3, [pc, #16]	@ (8012364 <vPortSetupTimerInterrupt+0x34>)
 8012354:	2207      	movs	r2, #7
 8012356:	601a      	str	r2, [r3, #0]
}
 8012358:	bf00      	nop
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	e000e010 	.word	0xe000e010
 8012368:	e000e018 	.word	0xe000e018
 801236c:	20000000 	.word	0x20000000
 8012370:	10624dd3 	.word	0x10624dd3
 8012374:	e000e014 	.word	0xe000e014

08012378 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012378:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012388 <vPortEnableVFP+0x10>
 801237c:	6801      	ldr	r1, [r0, #0]
 801237e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012382:	6001      	str	r1, [r0, #0]
 8012384:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012386:	bf00      	nop
 8012388:	e000ed88 	.word	0xe000ed88

0801238c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801238c:	b480      	push	{r7}
 801238e:	b085      	sub	sp, #20
 8012390:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012392:	f3ef 8305 	mrs	r3, IPSR
 8012396:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2b0f      	cmp	r3, #15
 801239c:	d917      	bls.n	80123ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801239e:	4a1a      	ldr	r2, [pc, #104]	@ (8012408 <vPortValidateInterruptPriority+0x7c>)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	4413      	add	r3, r2
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80123a8:	4b18      	ldr	r3, [pc, #96]	@ (801240c <vPortValidateInterruptPriority+0x80>)
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	7afa      	ldrb	r2, [r7, #11]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d20d      	bcs.n	80123ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80123b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b6:	b672      	cpsid	i
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	b662      	cpsie	i
 80123c6:	607b      	str	r3, [r7, #4]
}
 80123c8:	bf00      	nop
 80123ca:	bf00      	nop
 80123cc:	e7fd      	b.n	80123ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80123ce:	4b10      	ldr	r3, [pc, #64]	@ (8012410 <vPortValidateInterruptPriority+0x84>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80123d6:	4b0f      	ldr	r3, [pc, #60]	@ (8012414 <vPortValidateInterruptPriority+0x88>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d90d      	bls.n	80123fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80123de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123e2:	b672      	cpsid	i
 80123e4:	f383 8811 	msr	BASEPRI, r3
 80123e8:	f3bf 8f6f 	isb	sy
 80123ec:	f3bf 8f4f 	dsb	sy
 80123f0:	b662      	cpsie	i
 80123f2:	603b      	str	r3, [r7, #0]
}
 80123f4:	bf00      	nop
 80123f6:	bf00      	nop
 80123f8:	e7fd      	b.n	80123f6 <vPortValidateInterruptPriority+0x6a>
	}
 80123fa:	bf00      	nop
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	e000e3f0 	.word	0xe000e3f0
 801240c:	2000b500 	.word	0x2000b500
 8012410:	e000ed0c 	.word	0xe000ed0c
 8012414:	2000b504 	.word	0x2000b504

08012418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b08a      	sub	sp, #40	@ 0x28
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012420:	2300      	movs	r3, #0
 8012422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012424:	f7fe fb0a 	bl	8010a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012428:	4b5d      	ldr	r3, [pc, #372]	@ (80125a0 <pvPortMalloc+0x188>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d101      	bne.n	8012434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012430:	f000 f920 	bl	8012674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012434:	4b5b      	ldr	r3, [pc, #364]	@ (80125a4 <pvPortMalloc+0x18c>)
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	4013      	ands	r3, r2
 801243c:	2b00      	cmp	r3, #0
 801243e:	f040 8094 	bne.w	801256a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d020      	beq.n	801248a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012448:	2208      	movs	r2, #8
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4413      	add	r3, r2
 801244e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f003 0307 	and.w	r3, r3, #7
 8012456:	2b00      	cmp	r3, #0
 8012458:	d017      	beq.n	801248a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f023 0307 	bic.w	r3, r3, #7
 8012460:	3308      	adds	r3, #8
 8012462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f003 0307 	and.w	r3, r3, #7
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00d      	beq.n	801248a <pvPortMalloc+0x72>
	__asm volatile
 801246e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012472:	b672      	cpsid	i
 8012474:	f383 8811 	msr	BASEPRI, r3
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	b662      	cpsie	i
 8012482:	617b      	str	r3, [r7, #20]
}
 8012484:	bf00      	nop
 8012486:	bf00      	nop
 8012488:	e7fd      	b.n	8012486 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d06c      	beq.n	801256a <pvPortMalloc+0x152>
 8012490:	4b45      	ldr	r3, [pc, #276]	@ (80125a8 <pvPortMalloc+0x190>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	429a      	cmp	r2, r3
 8012498:	d867      	bhi.n	801256a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801249a:	4b44      	ldr	r3, [pc, #272]	@ (80125ac <pvPortMalloc+0x194>)
 801249c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801249e:	4b43      	ldr	r3, [pc, #268]	@ (80125ac <pvPortMalloc+0x194>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124a4:	e004      	b.n	80124b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80124a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80124aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80124b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d903      	bls.n	80124c2 <pvPortMalloc+0xaa>
 80124ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1f1      	bne.n	80124a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80124c2:	4b37      	ldr	r3, [pc, #220]	@ (80125a0 <pvPortMalloc+0x188>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d04e      	beq.n	801256a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80124cc:	6a3b      	ldr	r3, [r7, #32]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2208      	movs	r2, #8
 80124d2:	4413      	add	r3, r2
 80124d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80124d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d8:	681a      	ldr	r2, [r3, #0]
 80124da:	6a3b      	ldr	r3, [r7, #32]
 80124dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80124de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e0:	685a      	ldr	r2, [r3, #4]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	1ad2      	subs	r2, r2, r3
 80124e6:	2308      	movs	r3, #8
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d922      	bls.n	8012534 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80124ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4413      	add	r3, r2
 80124f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	f003 0307 	and.w	r3, r3, #7
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d00d      	beq.n	801251c <pvPortMalloc+0x104>
	__asm volatile
 8012500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012504:	b672      	cpsid	i
 8012506:	f383 8811 	msr	BASEPRI, r3
 801250a:	f3bf 8f6f 	isb	sy
 801250e:	f3bf 8f4f 	dsb	sy
 8012512:	b662      	cpsie	i
 8012514:	613b      	str	r3, [r7, #16]
}
 8012516:	bf00      	nop
 8012518:	bf00      	nop
 801251a:	e7fd      	b.n	8012518 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801251e:	685a      	ldr	r2, [r3, #4]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	1ad2      	subs	r2, r2, r3
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801252e:	69b8      	ldr	r0, [r7, #24]
 8012530:	f000 f902 	bl	8012738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012534:	4b1c      	ldr	r3, [pc, #112]	@ (80125a8 <pvPortMalloc+0x190>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	4a1a      	ldr	r2, [pc, #104]	@ (80125a8 <pvPortMalloc+0x190>)
 8012540:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012542:	4b19      	ldr	r3, [pc, #100]	@ (80125a8 <pvPortMalloc+0x190>)
 8012544:	681a      	ldr	r2, [r3, #0]
 8012546:	4b1a      	ldr	r3, [pc, #104]	@ (80125b0 <pvPortMalloc+0x198>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	429a      	cmp	r2, r3
 801254c:	d203      	bcs.n	8012556 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801254e:	4b16      	ldr	r3, [pc, #88]	@ (80125a8 <pvPortMalloc+0x190>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4a17      	ldr	r2, [pc, #92]	@ (80125b0 <pvPortMalloc+0x198>)
 8012554:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012558:	685a      	ldr	r2, [r3, #4]
 801255a:	4b12      	ldr	r3, [pc, #72]	@ (80125a4 <pvPortMalloc+0x18c>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	431a      	orrs	r2, r3
 8012560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012562:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012566:	2200      	movs	r2, #0
 8012568:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801256a:	f7fe fa75 	bl	8010a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	f003 0307 	and.w	r3, r3, #7
 8012574:	2b00      	cmp	r3, #0
 8012576:	d00d      	beq.n	8012594 <pvPortMalloc+0x17c>
	__asm volatile
 8012578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257c:	b672      	cpsid	i
 801257e:	f383 8811 	msr	BASEPRI, r3
 8012582:	f3bf 8f6f 	isb	sy
 8012586:	f3bf 8f4f 	dsb	sy
 801258a:	b662      	cpsie	i
 801258c:	60fb      	str	r3, [r7, #12]
}
 801258e:	bf00      	nop
 8012590:	bf00      	nop
 8012592:	e7fd      	b.n	8012590 <pvPortMalloc+0x178>
	return pvReturn;
 8012594:	69fb      	ldr	r3, [r7, #28]
}
 8012596:	4618      	mov	r0, r3
 8012598:	3728      	adds	r7, #40	@ 0x28
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20024510 	.word	0x20024510
 80125a4:	2002451c 	.word	0x2002451c
 80125a8:	20024514 	.word	0x20024514
 80125ac:	20024508 	.word	0x20024508
 80125b0:	20024518 	.word	0x20024518

080125b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d04e      	beq.n	8012664 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80125c6:	2308      	movs	r3, #8
 80125c8:	425b      	negs	r3, r3
 80125ca:	697a      	ldr	r2, [r7, #20]
 80125cc:	4413      	add	r3, r2
 80125ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	4b24      	ldr	r3, [pc, #144]	@ (801266c <vPortFree+0xb8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4013      	ands	r3, r2
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10d      	bne.n	80125fe <vPortFree+0x4a>
	__asm volatile
 80125e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125e6:	b672      	cpsid	i
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	b662      	cpsie	i
 80125f6:	60fb      	str	r3, [r7, #12]
}
 80125f8:	bf00      	nop
 80125fa:	bf00      	nop
 80125fc:	e7fd      	b.n	80125fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00d      	beq.n	8012622 <vPortFree+0x6e>
	__asm volatile
 8012606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801260a:	b672      	cpsid	i
 801260c:	f383 8811 	msr	BASEPRI, r3
 8012610:	f3bf 8f6f 	isb	sy
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	b662      	cpsie	i
 801261a:	60bb      	str	r3, [r7, #8]
}
 801261c:	bf00      	nop
 801261e:	bf00      	nop
 8012620:	e7fd      	b.n	801261e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	685a      	ldr	r2, [r3, #4]
 8012626:	4b11      	ldr	r3, [pc, #68]	@ (801266c <vPortFree+0xb8>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4013      	ands	r3, r2
 801262c:	2b00      	cmp	r3, #0
 801262e:	d019      	beq.n	8012664 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d115      	bne.n	8012664 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	4b0b      	ldr	r3, [pc, #44]	@ (801266c <vPortFree+0xb8>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	43db      	mvns	r3, r3
 8012642:	401a      	ands	r2, r3
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012648:	f7fe f9f8 	bl	8010a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	685a      	ldr	r2, [r3, #4]
 8012650:	4b07      	ldr	r3, [pc, #28]	@ (8012670 <vPortFree+0xbc>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4413      	add	r3, r2
 8012656:	4a06      	ldr	r2, [pc, #24]	@ (8012670 <vPortFree+0xbc>)
 8012658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801265a:	6938      	ldr	r0, [r7, #16]
 801265c:	f000 f86c 	bl	8012738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012660:	f7fe f9fa 	bl	8010a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012664:	bf00      	nop
 8012666:	3718      	adds	r7, #24
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	2002451c 	.word	0x2002451c
 8012670:	20024514 	.word	0x20024514

08012674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801267a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801267e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012680:	4b27      	ldr	r3, [pc, #156]	@ (8012720 <prvHeapInit+0xac>)
 8012682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f003 0307 	and.w	r3, r3, #7
 801268a:	2b00      	cmp	r3, #0
 801268c:	d00c      	beq.n	80126a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3307      	adds	r3, #7
 8012692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f023 0307 	bic.w	r3, r3, #7
 801269a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801269c:	68ba      	ldr	r2, [r7, #8]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	4a1f      	ldr	r2, [pc, #124]	@ (8012720 <prvHeapInit+0xac>)
 80126a4:	4413      	add	r3, r2
 80126a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80126ac:	4a1d      	ldr	r2, [pc, #116]	@ (8012724 <prvHeapInit+0xb0>)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80126b2:	4b1c      	ldr	r3, [pc, #112]	@ (8012724 <prvHeapInit+0xb0>)
 80126b4:	2200      	movs	r2, #0
 80126b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	68ba      	ldr	r2, [r7, #8]
 80126bc:	4413      	add	r3, r2
 80126be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80126c0:	2208      	movs	r2, #8
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	1a9b      	subs	r3, r3, r2
 80126c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f023 0307 	bic.w	r3, r3, #7
 80126ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	4a15      	ldr	r2, [pc, #84]	@ (8012728 <prvHeapInit+0xb4>)
 80126d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80126d6:	4b14      	ldr	r3, [pc, #80]	@ (8012728 <prvHeapInit+0xb4>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2200      	movs	r2, #0
 80126dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80126de:	4b12      	ldr	r3, [pc, #72]	@ (8012728 <prvHeapInit+0xb4>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2200      	movs	r2, #0
 80126e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80126f4:	4b0c      	ldr	r3, [pc, #48]	@ (8012728 <prvHeapInit+0xb4>)
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	4a0a      	ldr	r2, [pc, #40]	@ (801272c <prvHeapInit+0xb8>)
 8012702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	4a09      	ldr	r2, [pc, #36]	@ (8012730 <prvHeapInit+0xbc>)
 801270a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801270c:	4b09      	ldr	r3, [pc, #36]	@ (8012734 <prvHeapInit+0xc0>)
 801270e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012712:	601a      	str	r2, [r3, #0]
}
 8012714:	bf00      	nop
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr
 8012720:	2000b508 	.word	0x2000b508
 8012724:	20024508 	.word	0x20024508
 8012728:	20024510 	.word	0x20024510
 801272c:	20024518 	.word	0x20024518
 8012730:	20024514 	.word	0x20024514
 8012734:	2002451c 	.word	0x2002451c

08012738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012738:	b480      	push	{r7}
 801273a:	b085      	sub	sp, #20
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012740:	4b28      	ldr	r3, [pc, #160]	@ (80127e4 <prvInsertBlockIntoFreeList+0xac>)
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	e002      	b.n	801274c <prvInsertBlockIntoFreeList+0x14>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	60fb      	str	r3, [r7, #12]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	429a      	cmp	r2, r3
 8012754:	d8f7      	bhi.n	8012746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	4413      	add	r3, r2
 8012762:	687a      	ldr	r2, [r7, #4]
 8012764:	429a      	cmp	r2, r3
 8012766:	d108      	bne.n	801277a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	441a      	add	r2, r3
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	441a      	add	r2, r3
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	429a      	cmp	r2, r3
 801278c:	d118      	bne.n	80127c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	4b15      	ldr	r3, [pc, #84]	@ (80127e8 <prvInsertBlockIntoFreeList+0xb0>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	429a      	cmp	r2, r3
 8012798:	d00d      	beq.n	80127b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	685a      	ldr	r2, [r3, #4]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	441a      	add	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	e008      	b.n	80127c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80127b6:	4b0c      	ldr	r3, [pc, #48]	@ (80127e8 <prvInsertBlockIntoFreeList+0xb0>)
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	601a      	str	r2, [r3, #0]
 80127be:	e003      	b.n	80127c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d002      	beq.n	80127d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127d6:	bf00      	nop
 80127d8:	3714      	adds	r7, #20
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	20024508 	.word	0x20024508
 80127e8:	20024510 	.word	0x20024510

080127ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80127f6:	f007 facd 	bl	8019d94 <sys_timeouts_sleeptime>
 80127fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012802:	d10b      	bne.n	801281c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012804:	4813      	ldr	r0, [pc, #76]	@ (8012854 <tcpip_timeouts_mbox_fetch+0x68>)
 8012806:	f00a fad2 	bl	801cdae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801280a:	2200      	movs	r2, #0
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f00a fa5a 	bl	801ccc8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012814:	480f      	ldr	r0, [pc, #60]	@ (8012854 <tcpip_timeouts_mbox_fetch+0x68>)
 8012816:	f00a fabb 	bl	801cd90 <sys_mutex_lock>
    return;
 801281a:	e018      	b.n	801284e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d102      	bne.n	8012828 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012822:	f007 fa7d 	bl	8019d20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012826:	e7e6      	b.n	80127f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012828:	480a      	ldr	r0, [pc, #40]	@ (8012854 <tcpip_timeouts_mbox_fetch+0x68>)
 801282a:	f00a fac0 	bl	801cdae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f00a fa48 	bl	801ccc8 <sys_arch_mbox_fetch>
 8012838:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801283a:	4806      	ldr	r0, [pc, #24]	@ (8012854 <tcpip_timeouts_mbox_fetch+0x68>)
 801283c:	f00a faa8 	bl	801cd90 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012846:	d102      	bne.n	801284e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012848:	f007 fa6a 	bl	8019d20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801284c:	e7d3      	b.n	80127f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	2002452c 	.word	0x2002452c

08012858 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012860:	4810      	ldr	r0, [pc, #64]	@ (80128a4 <tcpip_thread+0x4c>)
 8012862:	f00a fa95 	bl	801cd90 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012866:	4b10      	ldr	r3, [pc, #64]	@ (80128a8 <tcpip_thread+0x50>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d005      	beq.n	801287a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801286e:	4b0e      	ldr	r3, [pc, #56]	@ (80128a8 <tcpip_thread+0x50>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4a0e      	ldr	r2, [pc, #56]	@ (80128ac <tcpip_thread+0x54>)
 8012874:	6812      	ldr	r2, [r2, #0]
 8012876:	4610      	mov	r0, r2
 8012878:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801287a:	f107 030c 	add.w	r3, r7, #12
 801287e:	4619      	mov	r1, r3
 8012880:	480b      	ldr	r0, [pc, #44]	@ (80128b0 <tcpip_thread+0x58>)
 8012882:	f7ff ffb3 	bl	80127ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d106      	bne.n	801289a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801288c:	4b09      	ldr	r3, [pc, #36]	@ (80128b4 <tcpip_thread+0x5c>)
 801288e:	2291      	movs	r2, #145	@ 0x91
 8012890:	4909      	ldr	r1, [pc, #36]	@ (80128b8 <tcpip_thread+0x60>)
 8012892:	480a      	ldr	r0, [pc, #40]	@ (80128bc <tcpip_thread+0x64>)
 8012894:	f00b fb58 	bl	801df48 <iprintf>
      continue;
 8012898:	e003      	b.n	80128a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	4618      	mov	r0, r3
 801289e:	f000 f80f 	bl	80128c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80128a2:	e7ea      	b.n	801287a <tcpip_thread+0x22>
 80128a4:	2002452c 	.word	0x2002452c
 80128a8:	20024520 	.word	0x20024520
 80128ac:	20024524 	.word	0x20024524
 80128b0:	20024528 	.word	0x20024528
 80128b4:	0801f0fc 	.word	0x0801f0fc
 80128b8:	0801f12c 	.word	0x0801f12c
 80128bc:	0801f14c 	.word	0x0801f14c

080128c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d026      	beq.n	801291e <tcpip_thread_handle_msg+0x5e>
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	dc2b      	bgt.n	801292c <tcpip_thread_handle_msg+0x6c>
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <tcpip_thread_handle_msg+0x1e>
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d015      	beq.n	8012908 <tcpip_thread_handle_msg+0x48>
 80128dc:	e026      	b.n	801292c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	6850      	ldr	r0, [r2, #4]
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	6892      	ldr	r2, [r2, #8]
 80128ea:	4611      	mov	r1, r2
 80128ec:	4798      	blx	r3
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d004      	beq.n	80128fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f001 fd07 	bl	801430c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80128fe:	6879      	ldr	r1, [r7, #4]
 8012900:	2009      	movs	r0, #9
 8012902:	f000 fe5f 	bl	80135c4 <memp_free>
      break;
 8012906:	e018      	b.n	801293a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	6892      	ldr	r2, [r2, #8]
 8012910:	4610      	mov	r0, r2
 8012912:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012914:	6879      	ldr	r1, [r7, #4]
 8012916:	2008      	movs	r0, #8
 8012918:	f000 fe54 	bl	80135c4 <memp_free>
      break;
 801291c:	e00d      	b.n	801293a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	6892      	ldr	r2, [r2, #8]
 8012926:	4610      	mov	r0, r2
 8012928:	4798      	blx	r3
      break;
 801292a:	e006      	b.n	801293a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801292c:	4b05      	ldr	r3, [pc, #20]	@ (8012944 <tcpip_thread_handle_msg+0x84>)
 801292e:	22cf      	movs	r2, #207	@ 0xcf
 8012930:	4905      	ldr	r1, [pc, #20]	@ (8012948 <tcpip_thread_handle_msg+0x88>)
 8012932:	4806      	ldr	r0, [pc, #24]	@ (801294c <tcpip_thread_handle_msg+0x8c>)
 8012934:	f00b fb08 	bl	801df48 <iprintf>
      break;
 8012938:	bf00      	nop
  }
}
 801293a:	bf00      	nop
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	0801f0fc 	.word	0x0801f0fc
 8012948:	0801f12c 	.word	0x0801f12c
 801294c:	0801f14c 	.word	0x0801f14c

08012950 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801295c:	481a      	ldr	r0, [pc, #104]	@ (80129c8 <tcpip_inpkt+0x78>)
 801295e:	f00a f9e4 	bl	801cd2a <sys_mbox_valid>
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d105      	bne.n	8012974 <tcpip_inpkt+0x24>
 8012968:	4b18      	ldr	r3, [pc, #96]	@ (80129cc <tcpip_inpkt+0x7c>)
 801296a:	22fc      	movs	r2, #252	@ 0xfc
 801296c:	4918      	ldr	r1, [pc, #96]	@ (80129d0 <tcpip_inpkt+0x80>)
 801296e:	4819      	ldr	r0, [pc, #100]	@ (80129d4 <tcpip_inpkt+0x84>)
 8012970:	f00b faea 	bl	801df48 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012974:	2009      	movs	r0, #9
 8012976:	f000 fdaf 	bl	80134d8 <memp_malloc>
 801297a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012982:	f04f 33ff 	mov.w	r3, #4294967295
 8012986:	e01a      	b.n	80129be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	2200      	movs	r2, #0
 801298c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80129a0:	6979      	ldr	r1, [r7, #20]
 80129a2:	4809      	ldr	r0, [pc, #36]	@ (80129c8 <tcpip_inpkt+0x78>)
 80129a4:	f00a f976 	bl	801cc94 <sys_mbox_trypost>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d006      	beq.n	80129bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80129ae:	6979      	ldr	r1, [r7, #20]
 80129b0:	2009      	movs	r0, #9
 80129b2:	f000 fe07 	bl	80135c4 <memp_free>
    return ERR_MEM;
 80129b6:	f04f 33ff 	mov.w	r3, #4294967295
 80129ba:	e000      	b.n	80129be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80129bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3718      	adds	r7, #24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	20024528 	.word	0x20024528
 80129cc:	0801f0fc 	.word	0x0801f0fc
 80129d0:	0801f174 	.word	0x0801f174
 80129d4:	0801f14c 	.word	0x0801f14c

080129d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80129e8:	f003 0318 	and.w	r3, r3, #24
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d006      	beq.n	80129fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80129f0:	4a08      	ldr	r2, [pc, #32]	@ (8012a14 <tcpip_input+0x3c>)
 80129f2:	6839      	ldr	r1, [r7, #0]
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7ff ffab 	bl	8012950 <tcpip_inpkt>
 80129fa:	4603      	mov	r3, r0
 80129fc:	e005      	b.n	8012a0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80129fe:	4a06      	ldr	r2, [pc, #24]	@ (8012a18 <tcpip_input+0x40>)
 8012a00:	6839      	ldr	r1, [r7, #0]
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7ff ffa4 	bl	8012950 <tcpip_inpkt>
 8012a08:	4603      	mov	r3, r0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	0801cab5 	.word	0x0801cab5
 8012a18:	0801b9bd 	.word	0x0801b9bd

08012a1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a26:	4819      	ldr	r0, [pc, #100]	@ (8012a8c <tcpip_try_callback+0x70>)
 8012a28:	f00a f97f 	bl	801cd2a <sys_mbox_valid>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <tcpip_try_callback+0x24>
 8012a32:	4b17      	ldr	r3, [pc, #92]	@ (8012a90 <tcpip_try_callback+0x74>)
 8012a34:	f240 125d 	movw	r2, #349	@ 0x15d
 8012a38:	4916      	ldr	r1, [pc, #88]	@ (8012a94 <tcpip_try_callback+0x78>)
 8012a3a:	4817      	ldr	r0, [pc, #92]	@ (8012a98 <tcpip_try_callback+0x7c>)
 8012a3c:	f00b fa84 	bl	801df48 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012a40:	2008      	movs	r0, #8
 8012a42:	f000 fd49 	bl	80134d8 <memp_malloc>
 8012a46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d102      	bne.n	8012a54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a52:	e017      	b.n	8012a84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2201      	movs	r2, #1
 8012a58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	683a      	ldr	r2, [r7, #0]
 8012a64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012a66:	68f9      	ldr	r1, [r7, #12]
 8012a68:	4808      	ldr	r0, [pc, #32]	@ (8012a8c <tcpip_try_callback+0x70>)
 8012a6a:	f00a f913 	bl	801cc94 <sys_mbox_trypost>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d006      	beq.n	8012a82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012a74:	68f9      	ldr	r1, [r7, #12]
 8012a76:	2008      	movs	r0, #8
 8012a78:	f000 fda4 	bl	80135c4 <memp_free>
    return ERR_MEM;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a80:	e000      	b.n	8012a84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3710      	adds	r7, #16
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	20024528 	.word	0x20024528
 8012a90:	0801f0fc 	.word	0x0801f0fc
 8012a94:	0801f174 	.word	0x0801f174
 8012a98:	0801f14c 	.word	0x0801f14c

08012a9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af02      	add	r7, sp, #8
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012aa6:	f000 f872 	bl	8012b8e <lwip_init>

  tcpip_init_done = initfunc;
 8012aaa:	4a17      	ldr	r2, [pc, #92]	@ (8012b08 <tcpip_init+0x6c>)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012ab0:	4a16      	ldr	r2, [pc, #88]	@ (8012b0c <tcpip_init+0x70>)
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012ab6:	2106      	movs	r1, #6
 8012ab8:	4815      	ldr	r0, [pc, #84]	@ (8012b10 <tcpip_init+0x74>)
 8012aba:	f00a f8d1 	bl	801cc60 <sys_mbox_new>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d006      	beq.n	8012ad2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012ac4:	4b13      	ldr	r3, [pc, #76]	@ (8012b14 <tcpip_init+0x78>)
 8012ac6:	f240 2261 	movw	r2, #609	@ 0x261
 8012aca:	4913      	ldr	r1, [pc, #76]	@ (8012b18 <tcpip_init+0x7c>)
 8012acc:	4813      	ldr	r0, [pc, #76]	@ (8012b1c <tcpip_init+0x80>)
 8012ace:	f00b fa3b 	bl	801df48 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012ad2:	4813      	ldr	r0, [pc, #76]	@ (8012b20 <tcpip_init+0x84>)
 8012ad4:	f00a f946 	bl	801cd64 <sys_mutex_new>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d006      	beq.n	8012aec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012ade:	4b0d      	ldr	r3, [pc, #52]	@ (8012b14 <tcpip_init+0x78>)
 8012ae0:	f240 2265 	movw	r2, #613	@ 0x265
 8012ae4:	490f      	ldr	r1, [pc, #60]	@ (8012b24 <tcpip_init+0x88>)
 8012ae6:	480d      	ldr	r0, [pc, #52]	@ (8012b1c <tcpip_init+0x80>)
 8012ae8:	f00b fa2e 	bl	801df48 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012aec:	2318      	movs	r3, #24
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012af4:	2200      	movs	r2, #0
 8012af6:	490c      	ldr	r1, [pc, #48]	@ (8012b28 <tcpip_init+0x8c>)
 8012af8:	480c      	ldr	r0, [pc, #48]	@ (8012b2c <tcpip_init+0x90>)
 8012afa:	f00a f965 	bl	801cdc8 <sys_thread_new>
}
 8012afe:	bf00      	nop
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	20024520 	.word	0x20024520
 8012b0c:	20024524 	.word	0x20024524
 8012b10:	20024528 	.word	0x20024528
 8012b14:	0801f0fc 	.word	0x0801f0fc
 8012b18:	0801f184 	.word	0x0801f184
 8012b1c:	0801f14c 	.word	0x0801f14c
 8012b20:	2002452c 	.word	0x2002452c
 8012b24:	0801f1a8 	.word	0x0801f1a8
 8012b28:	08012859 	.word	0x08012859
 8012b2c:	0801f1cc 	.word	0x0801f1cc

08012b30 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	4603      	mov	r3, r0
 8012b38:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b3e:	021b      	lsls	r3, r3, #8
 8012b40:	b21a      	sxth	r2, r3
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	0a1b      	lsrs	r3, r3, #8
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	b21b      	sxth	r3, r3
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	b21b      	sxth	r3, r3
 8012b4e:	b29b      	uxth	r3, r3
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	061a      	lsls	r2, r3, #24
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	021b      	lsls	r3, r3, #8
 8012b6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b70:	431a      	orrs	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	0a1b      	lsrs	r3, r3, #8
 8012b76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b7a:	431a      	orrs	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	0e1b      	lsrs	r3, r3, #24
 8012b80:	4313      	orrs	r3, r2
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	370c      	adds	r7, #12
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr

08012b8e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b082      	sub	sp, #8
 8012b92:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012b98:	f00a f8d8 	bl	801cd4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012b9c:	f000 f8d4 	bl	8012d48 <mem_init>
  memp_init();
 8012ba0:	f000 fc2c 	bl	80133fc <memp_init>
  pbuf_init();
  netif_init();
 8012ba4:	f000 fd38 	bl	8013618 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012ba8:	f007 f92c 	bl	8019e04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012bac:	f001 fe58 	bl	8014860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012bb0:	f007 f86e 	bl	8019c90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012bb4:	bf00      	nop
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012bc6:	4b05      	ldr	r3, [pc, #20]	@ (8012bdc <ptr_to_mem+0x20>)
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	88fb      	ldrh	r3, [r7, #6]
 8012bcc:	4413      	add	r3, r2
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	370c      	adds	r7, #12
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	20024548 	.word	0x20024548

08012be0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012be8:	4b05      	ldr	r3, [pc, #20]	@ (8012c00 <mem_to_ptr+0x20>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	b29b      	uxth	r3, r3
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	20024548 	.word	0x20024548

08012c04 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b085      	sub	sp, #20
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012c0c:	4b45      	ldr	r3, [pc, #276]	@ (8012d24 <plug_holes+0x120>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d206      	bcs.n	8012c24 <plug_holes+0x20>
 8012c16:	4b44      	ldr	r3, [pc, #272]	@ (8012d28 <plug_holes+0x124>)
 8012c18:	f240 12df 	movw	r2, #479	@ 0x1df
 8012c1c:	4943      	ldr	r1, [pc, #268]	@ (8012d2c <plug_holes+0x128>)
 8012c1e:	4844      	ldr	r0, [pc, #272]	@ (8012d30 <plug_holes+0x12c>)
 8012c20:	f00b f992 	bl	801df48 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012c24:	4b43      	ldr	r3, [pc, #268]	@ (8012d34 <plug_holes+0x130>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d306      	bcc.n	8012c3c <plug_holes+0x38>
 8012c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8012d28 <plug_holes+0x124>)
 8012c30:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012c34:	4940      	ldr	r1, [pc, #256]	@ (8012d38 <plug_holes+0x134>)
 8012c36:	483e      	ldr	r0, [pc, #248]	@ (8012d30 <plug_holes+0x12c>)
 8012c38:	f00b f986 	bl	801df48 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	791b      	ldrb	r3, [r3, #4]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d006      	beq.n	8012c52 <plug_holes+0x4e>
 8012c44:	4b38      	ldr	r3, [pc, #224]	@ (8012d28 <plug_holes+0x124>)
 8012c46:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012c4a:	493c      	ldr	r1, [pc, #240]	@ (8012d3c <plug_holes+0x138>)
 8012c4c:	4838      	ldr	r0, [pc, #224]	@ (8012d30 <plug_holes+0x12c>)
 8012c4e:	f00b f97b 	bl	801df48 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012c5a:	d906      	bls.n	8012c6a <plug_holes+0x66>
 8012c5c:	4b32      	ldr	r3, [pc, #200]	@ (8012d28 <plug_holes+0x124>)
 8012c5e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012c62:	4937      	ldr	r1, [pc, #220]	@ (8012d40 <plug_holes+0x13c>)
 8012c64:	4832      	ldr	r0, [pc, #200]	@ (8012d30 <plug_holes+0x12c>)
 8012c66:	f00b f96f 	bl	801df48 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff ffa4 	bl	8012bbc <ptr_to_mem>
 8012c74:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d024      	beq.n	8012cc8 <plug_holes+0xc4>
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	791b      	ldrb	r3, [r3, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d120      	bne.n	8012cc8 <plug_holes+0xc4>
 8012c86:	4b2b      	ldr	r3, [pc, #172]	@ (8012d34 <plug_holes+0x130>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d01b      	beq.n	8012cc8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012c90:	4b2c      	ldr	r3, [pc, #176]	@ (8012d44 <plug_holes+0x140>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d102      	bne.n	8012ca0 <plug_holes+0x9c>
      lfree = mem;
 8012c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8012d44 <plug_holes+0x140>)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	881a      	ldrh	r2, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012cb0:	d00a      	beq.n	8012cc8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff ff80 	bl	8012bbc <ptr_to_mem>
 8012cbc:	4604      	mov	r4, r0
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7ff ff8e 	bl	8012be0 <mem_to_ptr>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	885b      	ldrh	r3, [r3, #2]
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7ff ff75 	bl	8012bbc <ptr_to_mem>
 8012cd2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012cd4:	68ba      	ldr	r2, [r7, #8]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d01f      	beq.n	8012d1c <plug_holes+0x118>
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	791b      	ldrb	r3, [r3, #4]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d11b      	bne.n	8012d1c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012ce4:	4b17      	ldr	r3, [pc, #92]	@ (8012d44 <plug_holes+0x140>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d102      	bne.n	8012cf4 <plug_holes+0xf0>
      lfree = pmem;
 8012cee:	4a15      	ldr	r2, [pc, #84]	@ (8012d44 <plug_holes+0x140>)
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	881a      	ldrh	r2, [r3, #0]
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012d04:	d00a      	beq.n	8012d1c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff ff56 	bl	8012bbc <ptr_to_mem>
 8012d10:	4604      	mov	r4, r0
 8012d12:	68b8      	ldr	r0, [r7, #8]
 8012d14:	f7ff ff64 	bl	8012be0 <mem_to_ptr>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012d1c:	bf00      	nop
 8012d1e:	3714      	adds	r7, #20
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}
 8012d24:	20024548 	.word	0x20024548
 8012d28:	0801f1dc 	.word	0x0801f1dc
 8012d2c:	0801f20c 	.word	0x0801f20c
 8012d30:	0801f224 	.word	0x0801f224
 8012d34:	2002454c 	.word	0x2002454c
 8012d38:	0801f24c 	.word	0x0801f24c
 8012d3c:	0801f268 	.word	0x0801f268
 8012d40:	0801f284 	.word	0x0801f284
 8012d44:	20024554 	.word	0x20024554

08012d48 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8012dc4 <mem_init+0x7c>)
 8012d50:	4a1d      	ldr	r2, [pc, #116]	@ (8012dc8 <mem_init+0x80>)
 8012d52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012d54:	4b1b      	ldr	r3, [pc, #108]	@ (8012dc4 <mem_init+0x7c>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012d60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2200      	movs	r2, #0
 8012d66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012d6e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012d72:	f7ff ff23 	bl	8012bbc <ptr_to_mem>
 8012d76:	4603      	mov	r3, r0
 8012d78:	4a14      	ldr	r2, [pc, #80]	@ (8012dcc <mem_init+0x84>)
 8012d7a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012d7c:	4b13      	ldr	r3, [pc, #76]	@ (8012dcc <mem_init+0x84>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2201      	movs	r2, #1
 8012d82:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012d84:	4b11      	ldr	r3, [pc, #68]	@ (8012dcc <mem_init+0x84>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012d8c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8012dcc <mem_init+0x84>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012d96:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012d98:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc4 <mem_init+0x7c>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8012dd0 <mem_init+0x88>)
 8012d9e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012da0:	480c      	ldr	r0, [pc, #48]	@ (8012dd4 <mem_init+0x8c>)
 8012da2:	f009 ffdf 	bl	801cd64 <sys_mutex_new>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d006      	beq.n	8012dba <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012dac:	4b0a      	ldr	r3, [pc, #40]	@ (8012dd8 <mem_init+0x90>)
 8012dae:	f240 221f 	movw	r2, #543	@ 0x21f
 8012db2:	490a      	ldr	r1, [pc, #40]	@ (8012ddc <mem_init+0x94>)
 8012db4:	480a      	ldr	r0, [pc, #40]	@ (8012de0 <mem_init+0x98>)
 8012db6:	f00b f8c7 	bl	801df48 <iprintf>
  }
}
 8012dba:	bf00      	nop
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	20024548 	.word	0x20024548
 8012dc8:	20048000 	.word	0x20048000
 8012dcc:	2002454c 	.word	0x2002454c
 8012dd0:	20024554 	.word	0x20024554
 8012dd4:	20024550 	.word	0x20024550
 8012dd8:	0801f1dc 	.word	0x0801f1dc
 8012ddc:	0801f2b0 	.word	0x0801f2b0
 8012de0:	0801f224 	.word	0x0801f224

08012de4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b086      	sub	sp, #24
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ff fef7 	bl	8012be0 <mem_to_ptr>
 8012df2:	4603      	mov	r3, r0
 8012df4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff fede 	bl	8012bbc <ptr_to_mem>
 8012e00:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	885b      	ldrh	r3, [r3, #2]
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fed8 	bl	8012bbc <ptr_to_mem>
 8012e0c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e16:	d818      	bhi.n	8012e4a <mem_link_valid+0x66>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	885b      	ldrh	r3, [r3, #2]
 8012e1c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e20:	d813      	bhi.n	8012e4a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012e26:	8afa      	ldrh	r2, [r7, #22]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d004      	beq.n	8012e36 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	8afa      	ldrh	r2, [r7, #22]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d109      	bne.n	8012e4a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012e36:	4b08      	ldr	r3, [pc, #32]	@ (8012e58 <mem_link_valid+0x74>)
 8012e38:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012e3a:	693a      	ldr	r2, [r7, #16]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d006      	beq.n	8012e4e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	885b      	ldrh	r3, [r3, #2]
 8012e44:	8afa      	ldrh	r2, [r7, #22]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d001      	beq.n	8012e4e <mem_link_valid+0x6a>
    return 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e000      	b.n	8012e50 <mem_link_valid+0x6c>
  }
  return 1;
 8012e4e:	2301      	movs	r3, #1
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3718      	adds	r7, #24
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	2002454c 	.word	0x2002454c

08012e5c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d070      	beq.n	8012f4c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f003 0303 	and.w	r3, r3, #3
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00d      	beq.n	8012e90 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012e74:	4b37      	ldr	r3, [pc, #220]	@ (8012f54 <mem_free+0xf8>)
 8012e76:	f240 2273 	movw	r2, #627	@ 0x273
 8012e7a:	4937      	ldr	r1, [pc, #220]	@ (8012f58 <mem_free+0xfc>)
 8012e7c:	4837      	ldr	r0, [pc, #220]	@ (8012f5c <mem_free+0x100>)
 8012e7e:	f00b f863 	bl	801df48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e82:	f009 ffc1 	bl	801ce08 <sys_arch_protect>
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f009 ffcb 	bl	801ce24 <sys_arch_unprotect>
    return;
 8012e8e:	e05e      	b.n	8012f4e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3b08      	subs	r3, #8
 8012e94:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012e96:	4b32      	ldr	r3, [pc, #200]	@ (8012f60 <mem_free+0x104>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	69fa      	ldr	r2, [r7, #28]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d306      	bcc.n	8012eae <mem_free+0x52>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f103 020c 	add.w	r2, r3, #12
 8012ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8012f64 <mem_free+0x108>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d90d      	bls.n	8012eca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012eae:	4b29      	ldr	r3, [pc, #164]	@ (8012f54 <mem_free+0xf8>)
 8012eb0:	f240 227f 	movw	r2, #639	@ 0x27f
 8012eb4:	492c      	ldr	r1, [pc, #176]	@ (8012f68 <mem_free+0x10c>)
 8012eb6:	4829      	ldr	r0, [pc, #164]	@ (8012f5c <mem_free+0x100>)
 8012eb8:	f00b f846 	bl	801df48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012ebc:	f009 ffa4 	bl	801ce08 <sys_arch_protect>
 8012ec0:	6138      	str	r0, [r7, #16]
 8012ec2:	6938      	ldr	r0, [r7, #16]
 8012ec4:	f009 ffae 	bl	801ce24 <sys_arch_unprotect>
    return;
 8012ec8:	e041      	b.n	8012f4e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012eca:	4828      	ldr	r0, [pc, #160]	@ (8012f6c <mem_free+0x110>)
 8012ecc:	f009 ff60 	bl	801cd90 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	791b      	ldrb	r3, [r3, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d110      	bne.n	8012efa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8012f54 <mem_free+0xf8>)
 8012eda:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012ede:	4924      	ldr	r1, [pc, #144]	@ (8012f70 <mem_free+0x114>)
 8012ee0:	481e      	ldr	r0, [pc, #120]	@ (8012f5c <mem_free+0x100>)
 8012ee2:	f00b f831 	bl	801df48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012ee6:	4821      	ldr	r0, [pc, #132]	@ (8012f6c <mem_free+0x110>)
 8012ee8:	f009 ff61 	bl	801cdae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012eec:	f009 ff8c 	bl	801ce08 <sys_arch_protect>
 8012ef0:	6178      	str	r0, [r7, #20]
 8012ef2:	6978      	ldr	r0, [r7, #20]
 8012ef4:	f009 ff96 	bl	801ce24 <sys_arch_unprotect>
    return;
 8012ef8:	e029      	b.n	8012f4e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012efa:	69f8      	ldr	r0, [r7, #28]
 8012efc:	f7ff ff72 	bl	8012de4 <mem_link_valid>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d110      	bne.n	8012f28 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012f06:	4b13      	ldr	r3, [pc, #76]	@ (8012f54 <mem_free+0xf8>)
 8012f08:	f240 2295 	movw	r2, #661	@ 0x295
 8012f0c:	4919      	ldr	r1, [pc, #100]	@ (8012f74 <mem_free+0x118>)
 8012f0e:	4813      	ldr	r0, [pc, #76]	@ (8012f5c <mem_free+0x100>)
 8012f10:	f00b f81a 	bl	801df48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012f14:	4815      	ldr	r0, [pc, #84]	@ (8012f6c <mem_free+0x110>)
 8012f16:	f009 ff4a 	bl	801cdae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012f1a:	f009 ff75 	bl	801ce08 <sys_arch_protect>
 8012f1e:	61b8      	str	r0, [r7, #24]
 8012f20:	69b8      	ldr	r0, [r7, #24]
 8012f22:	f009 ff7f 	bl	801ce24 <sys_arch_unprotect>
    return;
 8012f26:	e012      	b.n	8012f4e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012f2e:	4b12      	ldr	r3, [pc, #72]	@ (8012f78 <mem_free+0x11c>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	69fa      	ldr	r2, [r7, #28]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d202      	bcs.n	8012f3e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012f38:	4a0f      	ldr	r2, [pc, #60]	@ (8012f78 <mem_free+0x11c>)
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012f3e:	69f8      	ldr	r0, [r7, #28]
 8012f40:	f7ff fe60 	bl	8012c04 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012f44:	4809      	ldr	r0, [pc, #36]	@ (8012f6c <mem_free+0x110>)
 8012f46:	f009 ff32 	bl	801cdae <sys_mutex_unlock>
 8012f4a:	e000      	b.n	8012f4e <mem_free+0xf2>
    return;
 8012f4c:	bf00      	nop
}
 8012f4e:	3720      	adds	r7, #32
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	0801f1dc 	.word	0x0801f1dc
 8012f58:	0801f2cc 	.word	0x0801f2cc
 8012f5c:	0801f224 	.word	0x0801f224
 8012f60:	20024548 	.word	0x20024548
 8012f64:	2002454c 	.word	0x2002454c
 8012f68:	0801f2f0 	.word	0x0801f2f0
 8012f6c:	20024550 	.word	0x20024550
 8012f70:	0801f30c 	.word	0x0801f30c
 8012f74:	0801f334 	.word	0x0801f334
 8012f78:	20024554 	.word	0x20024554

08012f7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b088      	sub	sp, #32
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	460b      	mov	r3, r1
 8012f86:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012f88:	887b      	ldrh	r3, [r7, #2]
 8012f8a:	3303      	adds	r3, #3
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	f023 0303 	bic.w	r3, r3, #3
 8012f92:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012f94:	8bfb      	ldrh	r3, [r7, #30]
 8012f96:	2b0b      	cmp	r3, #11
 8012f98:	d801      	bhi.n	8012f9e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012f9a:	230c      	movs	r3, #12
 8012f9c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012f9e:	8bfb      	ldrh	r3, [r7, #30]
 8012fa0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012fa4:	d803      	bhi.n	8012fae <mem_trim+0x32>
 8012fa6:	8bfa      	ldrh	r2, [r7, #30]
 8012fa8:	887b      	ldrh	r3, [r7, #2]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d201      	bcs.n	8012fb2 <mem_trim+0x36>
    return NULL;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	e0d8      	b.n	8013164 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012fb2:	4b6e      	ldr	r3, [pc, #440]	@ (801316c <mem_trim+0x1f0>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d304      	bcc.n	8012fc6 <mem_trim+0x4a>
 8012fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8013170 <mem_trim+0x1f4>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	687a      	ldr	r2, [r7, #4]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d306      	bcc.n	8012fd4 <mem_trim+0x58>
 8012fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8013174 <mem_trim+0x1f8>)
 8012fc8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012fcc:	496a      	ldr	r1, [pc, #424]	@ (8013178 <mem_trim+0x1fc>)
 8012fce:	486b      	ldr	r0, [pc, #428]	@ (801317c <mem_trim+0x200>)
 8012fd0:	f00a ffba 	bl	801df48 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012fd4:	4b65      	ldr	r3, [pc, #404]	@ (801316c <mem_trim+0x1f0>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d304      	bcc.n	8012fe8 <mem_trim+0x6c>
 8012fde:	4b64      	ldr	r3, [pc, #400]	@ (8013170 <mem_trim+0x1f4>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	687a      	ldr	r2, [r7, #4]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d307      	bcc.n	8012ff8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012fe8:	f009 ff0e 	bl	801ce08 <sys_arch_protect>
 8012fec:	60b8      	str	r0, [r7, #8]
 8012fee:	68b8      	ldr	r0, [r7, #8]
 8012ff0:	f009 ff18 	bl	801ce24 <sys_arch_unprotect>
    return rmem;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	e0b5      	b.n	8013164 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	3b08      	subs	r3, #8
 8012ffc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012ffe:	69b8      	ldr	r0, [r7, #24]
 8013000:	f7ff fdee 	bl	8012be0 <mem_to_ptr>
 8013004:	4603      	mov	r3, r0
 8013006:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	881a      	ldrh	r2, [r3, #0]
 801300c:	8afb      	ldrh	r3, [r7, #22]
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	b29b      	uxth	r3, r3
 8013012:	3b08      	subs	r3, #8
 8013014:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013016:	8bfa      	ldrh	r2, [r7, #30]
 8013018:	8abb      	ldrh	r3, [r7, #20]
 801301a:	429a      	cmp	r2, r3
 801301c:	d906      	bls.n	801302c <mem_trim+0xb0>
 801301e:	4b55      	ldr	r3, [pc, #340]	@ (8013174 <mem_trim+0x1f8>)
 8013020:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013024:	4956      	ldr	r1, [pc, #344]	@ (8013180 <mem_trim+0x204>)
 8013026:	4855      	ldr	r0, [pc, #340]	@ (801317c <mem_trim+0x200>)
 8013028:	f00a ff8e 	bl	801df48 <iprintf>
  if (newsize > size) {
 801302c:	8bfa      	ldrh	r2, [r7, #30]
 801302e:	8abb      	ldrh	r3, [r7, #20]
 8013030:	429a      	cmp	r2, r3
 8013032:	d901      	bls.n	8013038 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013034:	2300      	movs	r3, #0
 8013036:	e095      	b.n	8013164 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013038:	8bfa      	ldrh	r2, [r7, #30]
 801303a:	8abb      	ldrh	r3, [r7, #20]
 801303c:	429a      	cmp	r2, r3
 801303e:	d101      	bne.n	8013044 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	e08f      	b.n	8013164 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013044:	484f      	ldr	r0, [pc, #316]	@ (8013184 <mem_trim+0x208>)
 8013046:	f009 fea3 	bl	801cd90 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	881b      	ldrh	r3, [r3, #0]
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff fdb4 	bl	8012bbc <ptr_to_mem>
 8013054:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	791b      	ldrb	r3, [r3, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d13f      	bne.n	80130de <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013066:	d106      	bne.n	8013076 <mem_trim+0xfa>
 8013068:	4b42      	ldr	r3, [pc, #264]	@ (8013174 <mem_trim+0x1f8>)
 801306a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801306e:	4946      	ldr	r1, [pc, #280]	@ (8013188 <mem_trim+0x20c>)
 8013070:	4842      	ldr	r0, [pc, #264]	@ (801317c <mem_trim+0x200>)
 8013072:	f00a ff69 	bl	801df48 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801307c:	8afa      	ldrh	r2, [r7, #22]
 801307e:	8bfb      	ldrh	r3, [r7, #30]
 8013080:	4413      	add	r3, r2
 8013082:	b29b      	uxth	r3, r3
 8013084:	3308      	adds	r3, #8
 8013086:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013088:	4b40      	ldr	r3, [pc, #256]	@ (801318c <mem_trim+0x210>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	693a      	ldr	r2, [r7, #16]
 801308e:	429a      	cmp	r2, r3
 8013090:	d106      	bne.n	80130a0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013092:	89fb      	ldrh	r3, [r7, #14]
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff fd91 	bl	8012bbc <ptr_to_mem>
 801309a:	4603      	mov	r3, r0
 801309c:	4a3b      	ldr	r2, [pc, #236]	@ (801318c <mem_trim+0x210>)
 801309e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80130a0:	89fb      	ldrh	r3, [r7, #14]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7ff fd8a 	bl	8012bbc <ptr_to_mem>
 80130a8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	2200      	movs	r2, #0
 80130ae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	89ba      	ldrh	r2, [r7, #12]
 80130b4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	8afa      	ldrh	r2, [r7, #22]
 80130ba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	89fa      	ldrh	r2, [r7, #14]
 80130c0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80130ca:	d047      	beq.n	801315c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	881b      	ldrh	r3, [r3, #0]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fd73 	bl	8012bbc <ptr_to_mem>
 80130d6:	4602      	mov	r2, r0
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	8053      	strh	r3, [r2, #2]
 80130dc:	e03e      	b.n	801315c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80130de:	8bfb      	ldrh	r3, [r7, #30]
 80130e0:	f103 0214 	add.w	r2, r3, #20
 80130e4:	8abb      	ldrh	r3, [r7, #20]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d838      	bhi.n	801315c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80130ea:	8afa      	ldrh	r2, [r7, #22]
 80130ec:	8bfb      	ldrh	r3, [r7, #30]
 80130ee:	4413      	add	r3, r2
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	3308      	adds	r3, #8
 80130f4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	881b      	ldrh	r3, [r3, #0]
 80130fa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80130fe:	d106      	bne.n	801310e <mem_trim+0x192>
 8013100:	4b1c      	ldr	r3, [pc, #112]	@ (8013174 <mem_trim+0x1f8>)
 8013102:	f240 3216 	movw	r2, #790	@ 0x316
 8013106:	4920      	ldr	r1, [pc, #128]	@ (8013188 <mem_trim+0x20c>)
 8013108:	481c      	ldr	r0, [pc, #112]	@ (801317c <mem_trim+0x200>)
 801310a:	f00a ff1d 	bl	801df48 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801310e:	89fb      	ldrh	r3, [r7, #14]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff fd53 	bl	8012bbc <ptr_to_mem>
 8013116:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013118:	4b1c      	ldr	r3, [pc, #112]	@ (801318c <mem_trim+0x210>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	429a      	cmp	r2, r3
 8013120:	d202      	bcs.n	8013128 <mem_trim+0x1ac>
      lfree = mem2;
 8013122:	4a1a      	ldr	r2, [pc, #104]	@ (801318c <mem_trim+0x210>)
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	2200      	movs	r2, #0
 801312c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	881a      	ldrh	r2, [r3, #0]
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	8afa      	ldrh	r2, [r7, #22]
 801313a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	89fa      	ldrh	r2, [r7, #14]
 8013140:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801314a:	d007      	beq.n	801315c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	881b      	ldrh	r3, [r3, #0]
 8013150:	4618      	mov	r0, r3
 8013152:	f7ff fd33 	bl	8012bbc <ptr_to_mem>
 8013156:	4602      	mov	r2, r0
 8013158:	89fb      	ldrh	r3, [r7, #14]
 801315a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801315c:	4809      	ldr	r0, [pc, #36]	@ (8013184 <mem_trim+0x208>)
 801315e:	f009 fe26 	bl	801cdae <sys_mutex_unlock>
  return rmem;
 8013162:	687b      	ldr	r3, [r7, #4]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3720      	adds	r7, #32
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	20024548 	.word	0x20024548
 8013170:	2002454c 	.word	0x2002454c
 8013174:	0801f1dc 	.word	0x0801f1dc
 8013178:	0801f368 	.word	0x0801f368
 801317c:	0801f224 	.word	0x0801f224
 8013180:	0801f380 	.word	0x0801f380
 8013184:	20024550 	.word	0x20024550
 8013188:	0801f3a0 	.word	0x0801f3a0
 801318c:	20024554 	.word	0x20024554

08013190 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af00      	add	r7, sp, #0
 8013196:	4603      	mov	r3, r0
 8013198:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801319a:	88fb      	ldrh	r3, [r7, #6]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d101      	bne.n	80131a4 <mem_malloc+0x14>
    return NULL;
 80131a0:	2300      	movs	r3, #0
 80131a2:	e0e2      	b.n	801336a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80131a4:	88fb      	ldrh	r3, [r7, #6]
 80131a6:	3303      	adds	r3, #3
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	f023 0303 	bic.w	r3, r3, #3
 80131ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80131b0:	8bbb      	ldrh	r3, [r7, #28]
 80131b2:	2b0b      	cmp	r3, #11
 80131b4:	d801      	bhi.n	80131ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80131b6:	230c      	movs	r3, #12
 80131b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80131ba:	8bbb      	ldrh	r3, [r7, #28]
 80131bc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80131c0:	d803      	bhi.n	80131ca <mem_malloc+0x3a>
 80131c2:	8bba      	ldrh	r2, [r7, #28]
 80131c4:	88fb      	ldrh	r3, [r7, #6]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d201      	bcs.n	80131ce <mem_malloc+0x3e>
    return NULL;
 80131ca:	2300      	movs	r3, #0
 80131cc:	e0cd      	b.n	801336a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80131ce:	4869      	ldr	r0, [pc, #420]	@ (8013374 <mem_malloc+0x1e4>)
 80131d0:	f009 fdde 	bl	801cd90 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80131d4:	4b68      	ldr	r3, [pc, #416]	@ (8013378 <mem_malloc+0x1e8>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff fd01 	bl	8012be0 <mem_to_ptr>
 80131de:	4603      	mov	r3, r0
 80131e0:	83fb      	strh	r3, [r7, #30]
 80131e2:	e0b7      	b.n	8013354 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80131e4:	8bfb      	ldrh	r3, [r7, #30]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff fce8 	bl	8012bbc <ptr_to_mem>
 80131ec:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	791b      	ldrb	r3, [r3, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f040 80a7 	bne.w	8013346 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	881b      	ldrh	r3, [r3, #0]
 80131fc:	461a      	mov	r2, r3
 80131fe:	8bfb      	ldrh	r3, [r7, #30]
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	f1a3 0208 	sub.w	r2, r3, #8
 8013206:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013208:	429a      	cmp	r2, r3
 801320a:	f0c0 809c 	bcc.w	8013346 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	461a      	mov	r2, r3
 8013214:	8bfb      	ldrh	r3, [r7, #30]
 8013216:	1ad3      	subs	r3, r2, r3
 8013218:	f1a3 0208 	sub.w	r2, r3, #8
 801321c:	8bbb      	ldrh	r3, [r7, #28]
 801321e:	3314      	adds	r3, #20
 8013220:	429a      	cmp	r2, r3
 8013222:	d333      	bcc.n	801328c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013224:	8bfa      	ldrh	r2, [r7, #30]
 8013226:	8bbb      	ldrh	r3, [r7, #28]
 8013228:	4413      	add	r3, r2
 801322a:	b29b      	uxth	r3, r3
 801322c:	3308      	adds	r3, #8
 801322e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013230:	8a7b      	ldrh	r3, [r7, #18]
 8013232:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013236:	d106      	bne.n	8013246 <mem_malloc+0xb6>
 8013238:	4b50      	ldr	r3, [pc, #320]	@ (801337c <mem_malloc+0x1ec>)
 801323a:	f240 3287 	movw	r2, #903	@ 0x387
 801323e:	4950      	ldr	r1, [pc, #320]	@ (8013380 <mem_malloc+0x1f0>)
 8013240:	4850      	ldr	r0, [pc, #320]	@ (8013384 <mem_malloc+0x1f4>)
 8013242:	f00a fe81 	bl	801df48 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013246:	8a7b      	ldrh	r3, [r7, #18]
 8013248:	4618      	mov	r0, r3
 801324a:	f7ff fcb7 	bl	8012bbc <ptr_to_mem>
 801324e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2200      	movs	r2, #0
 8013254:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	881a      	ldrh	r2, [r3, #0]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	8bfa      	ldrh	r2, [r7, #30]
 8013262:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	8a7a      	ldrh	r2, [r7, #18]
 8013268:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2201      	movs	r2, #1
 801326e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013278:	d00b      	beq.n	8013292 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff fc9c 	bl	8012bbc <ptr_to_mem>
 8013284:	4602      	mov	r2, r0
 8013286:	8a7b      	ldrh	r3, [r7, #18]
 8013288:	8053      	strh	r3, [r2, #2]
 801328a:	e002      	b.n	8013292 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	2201      	movs	r2, #1
 8013290:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013292:	4b39      	ldr	r3, [pc, #228]	@ (8013378 <mem_malloc+0x1e8>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	429a      	cmp	r2, r3
 801329a:	d127      	bne.n	80132ec <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801329c:	4b36      	ldr	r3, [pc, #216]	@ (8013378 <mem_malloc+0x1e8>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80132a2:	e005      	b.n	80132b0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80132a4:	69bb      	ldr	r3, [r7, #24]
 80132a6:	881b      	ldrh	r3, [r3, #0]
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7ff fc87 	bl	8012bbc <ptr_to_mem>
 80132ae:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	791b      	ldrb	r3, [r3, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d004      	beq.n	80132c2 <mem_malloc+0x132>
 80132b8:	4b33      	ldr	r3, [pc, #204]	@ (8013388 <mem_malloc+0x1f8>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	69ba      	ldr	r2, [r7, #24]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d1f0      	bne.n	80132a4 <mem_malloc+0x114>
          }
          lfree = cur;
 80132c2:	4a2d      	ldr	r2, [pc, #180]	@ (8013378 <mem_malloc+0x1e8>)
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80132c8:	4b2b      	ldr	r3, [pc, #172]	@ (8013378 <mem_malloc+0x1e8>)
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	4b2e      	ldr	r3, [pc, #184]	@ (8013388 <mem_malloc+0x1f8>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d00b      	beq.n	80132ec <mem_malloc+0x15c>
 80132d4:	4b28      	ldr	r3, [pc, #160]	@ (8013378 <mem_malloc+0x1e8>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	791b      	ldrb	r3, [r3, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d006      	beq.n	80132ec <mem_malloc+0x15c>
 80132de:	4b27      	ldr	r3, [pc, #156]	@ (801337c <mem_malloc+0x1ec>)
 80132e0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80132e4:	4929      	ldr	r1, [pc, #164]	@ (801338c <mem_malloc+0x1fc>)
 80132e6:	4827      	ldr	r0, [pc, #156]	@ (8013384 <mem_malloc+0x1f4>)
 80132e8:	f00a fe2e 	bl	801df48 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80132ec:	4821      	ldr	r0, [pc, #132]	@ (8013374 <mem_malloc+0x1e4>)
 80132ee:	f009 fd5e 	bl	801cdae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80132f2:	8bba      	ldrh	r2, [r7, #28]
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	4413      	add	r3, r2
 80132f8:	3308      	adds	r3, #8
 80132fa:	4a23      	ldr	r2, [pc, #140]	@ (8013388 <mem_malloc+0x1f8>)
 80132fc:	6812      	ldr	r2, [r2, #0]
 80132fe:	4293      	cmp	r3, r2
 8013300:	d906      	bls.n	8013310 <mem_malloc+0x180>
 8013302:	4b1e      	ldr	r3, [pc, #120]	@ (801337c <mem_malloc+0x1ec>)
 8013304:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013308:	4921      	ldr	r1, [pc, #132]	@ (8013390 <mem_malloc+0x200>)
 801330a:	481e      	ldr	r0, [pc, #120]	@ (8013384 <mem_malloc+0x1f4>)
 801330c:	f00a fe1c 	bl	801df48 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	f003 0303 	and.w	r3, r3, #3
 8013316:	2b00      	cmp	r3, #0
 8013318:	d006      	beq.n	8013328 <mem_malloc+0x198>
 801331a:	4b18      	ldr	r3, [pc, #96]	@ (801337c <mem_malloc+0x1ec>)
 801331c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013320:	491c      	ldr	r1, [pc, #112]	@ (8013394 <mem_malloc+0x204>)
 8013322:	4818      	ldr	r0, [pc, #96]	@ (8013384 <mem_malloc+0x1f4>)
 8013324:	f00a fe10 	bl	801df48 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	f003 0303 	and.w	r3, r3, #3
 801332e:	2b00      	cmp	r3, #0
 8013330:	d006      	beq.n	8013340 <mem_malloc+0x1b0>
 8013332:	4b12      	ldr	r3, [pc, #72]	@ (801337c <mem_malloc+0x1ec>)
 8013334:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013338:	4917      	ldr	r1, [pc, #92]	@ (8013398 <mem_malloc+0x208>)
 801333a:	4812      	ldr	r0, [pc, #72]	@ (8013384 <mem_malloc+0x1f4>)
 801333c:	f00a fe04 	bl	801df48 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	3308      	adds	r3, #8
 8013344:	e011      	b.n	801336a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013346:	8bfb      	ldrh	r3, [r7, #30]
 8013348:	4618      	mov	r0, r3
 801334a:	f7ff fc37 	bl	8012bbc <ptr_to_mem>
 801334e:	4603      	mov	r3, r0
 8013350:	881b      	ldrh	r3, [r3, #0]
 8013352:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013354:	8bfa      	ldrh	r2, [r7, #30]
 8013356:	8bbb      	ldrh	r3, [r7, #28]
 8013358:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801335c:	429a      	cmp	r2, r3
 801335e:	f4ff af41 	bcc.w	80131e4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013362:	4804      	ldr	r0, [pc, #16]	@ (8013374 <mem_malloc+0x1e4>)
 8013364:	f009 fd23 	bl	801cdae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013368:	2300      	movs	r3, #0
}
 801336a:	4618      	mov	r0, r3
 801336c:	3720      	adds	r7, #32
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	20024550 	.word	0x20024550
 8013378:	20024554 	.word	0x20024554
 801337c:	0801f1dc 	.word	0x0801f1dc
 8013380:	0801f3a0 	.word	0x0801f3a0
 8013384:	0801f224 	.word	0x0801f224
 8013388:	2002454c 	.word	0x2002454c
 801338c:	0801f3b4 	.word	0x0801f3b4
 8013390:	0801f3d0 	.word	0x0801f3d0
 8013394:	0801f400 	.word	0x0801f400
 8013398:	0801f430 	.word	0x0801f430

0801339c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801339c:	b480      	push	{r7}
 801339e:	b085      	sub	sp, #20
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	2200      	movs	r2, #0
 80133aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	3303      	adds	r3, #3
 80133b2:	f023 0303 	bic.w	r3, r3, #3
 80133b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80133b8:	2300      	movs	r3, #0
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	e011      	b.n	80133e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	689b      	ldr	r3, [r3, #8]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	689b      	ldr	r3, [r3, #8]
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	461a      	mov	r2, r3
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	4413      	add	r3, r2
 80133da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	3301      	adds	r3, #1
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	885b      	ldrh	r3, [r3, #2]
 80133e6:	461a      	mov	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	4293      	cmp	r3, r2
 80133ec:	dbe7      	blt.n	80133be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80133ee:	bf00      	nop
 80133f0:	bf00      	nop
 80133f2:	3714      	adds	r7, #20
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr

080133fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013402:	2300      	movs	r3, #0
 8013404:	80fb      	strh	r3, [r7, #6]
 8013406:	e009      	b.n	801341c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013408:	88fb      	ldrh	r3, [r7, #6]
 801340a:	4a08      	ldr	r2, [pc, #32]	@ (801342c <memp_init+0x30>)
 801340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013410:	4618      	mov	r0, r3
 8013412:	f7ff ffc3 	bl	801339c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013416:	88fb      	ldrh	r3, [r7, #6]
 8013418:	3301      	adds	r3, #1
 801341a:	80fb      	strh	r3, [r7, #6]
 801341c:	88fb      	ldrh	r3, [r7, #6]
 801341e:	2b0c      	cmp	r3, #12
 8013420:	d9f2      	bls.n	8013408 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013422:	bf00      	nop
 8013424:	bf00      	nop
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	0802224c 	.word	0x0802224c

08013430 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013438:	f009 fce6 	bl	801ce08 <sys_arch_protect>
 801343c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	689b      	ldr	r3, [r3, #8]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d015      	beq.n	8013478 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	68ba      	ldr	r2, [r7, #8]
 8013452:	6812      	ldr	r2, [r2, #0]
 8013454:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	f003 0303 	and.w	r3, r3, #3
 801345c:	2b00      	cmp	r3, #0
 801345e:	d006      	beq.n	801346e <do_memp_malloc_pool+0x3e>
 8013460:	4b09      	ldr	r3, [pc, #36]	@ (8013488 <do_memp_malloc_pool+0x58>)
 8013462:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013466:	4909      	ldr	r1, [pc, #36]	@ (801348c <do_memp_malloc_pool+0x5c>)
 8013468:	4809      	ldr	r0, [pc, #36]	@ (8013490 <do_memp_malloc_pool+0x60>)
 801346a:	f00a fd6d 	bl	801df48 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801346e:	68f8      	ldr	r0, [r7, #12]
 8013470:	f009 fcd8 	bl	801ce24 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	e003      	b.n	8013480 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f009 fcd3 	bl	801ce24 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	0801f454 	.word	0x0801f454
 801348c:	0801f484 	.word	0x0801f484
 8013490:	0801f4a8 	.word	0x0801f4a8

08013494 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d106      	bne.n	80134b0 <memp_malloc_pool+0x1c>
 80134a2:	4b0a      	ldr	r3, [pc, #40]	@ (80134cc <memp_malloc_pool+0x38>)
 80134a4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80134a8:	4909      	ldr	r1, [pc, #36]	@ (80134d0 <memp_malloc_pool+0x3c>)
 80134aa:	480a      	ldr	r0, [pc, #40]	@ (80134d4 <memp_malloc_pool+0x40>)
 80134ac:	f00a fd4c 	bl	801df48 <iprintf>
  if (desc == NULL) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <memp_malloc_pool+0x26>
    return NULL;
 80134b6:	2300      	movs	r3, #0
 80134b8:	e003      	b.n	80134c2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff ffb8 	bl	8013430 <do_memp_malloc_pool>
 80134c0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	0801f454 	.word	0x0801f454
 80134d0:	0801f4d0 	.word	0x0801f4d0
 80134d4:	0801f4a8 	.word	0x0801f4a8

080134d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80134e2:	79fb      	ldrb	r3, [r7, #7]
 80134e4:	2b0c      	cmp	r3, #12
 80134e6:	d908      	bls.n	80134fa <memp_malloc+0x22>
 80134e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013514 <memp_malloc+0x3c>)
 80134ea:	f240 1257 	movw	r2, #343	@ 0x157
 80134ee:	490a      	ldr	r1, [pc, #40]	@ (8013518 <memp_malloc+0x40>)
 80134f0:	480a      	ldr	r0, [pc, #40]	@ (801351c <memp_malloc+0x44>)
 80134f2:	f00a fd29 	bl	801df48 <iprintf>
 80134f6:	2300      	movs	r3, #0
 80134f8:	e008      	b.n	801350c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80134fa:	79fb      	ldrb	r3, [r7, #7]
 80134fc:	4a08      	ldr	r2, [pc, #32]	@ (8013520 <memp_malloc+0x48>)
 80134fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff ff94 	bl	8013430 <do_memp_malloc_pool>
 8013508:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801350a:	68fb      	ldr	r3, [r7, #12]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	0801f454 	.word	0x0801f454
 8013518:	0801f4e4 	.word	0x0801f4e4
 801351c:	0801f4a8 	.word	0x0801f4a8
 8013520:	0802224c 	.word	0x0802224c

08013524 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	f003 0303 	and.w	r3, r3, #3
 8013534:	2b00      	cmp	r3, #0
 8013536:	d006      	beq.n	8013546 <do_memp_free_pool+0x22>
 8013538:	4b0d      	ldr	r3, [pc, #52]	@ (8013570 <do_memp_free_pool+0x4c>)
 801353a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801353e:	490d      	ldr	r1, [pc, #52]	@ (8013574 <do_memp_free_pool+0x50>)
 8013540:	480d      	ldr	r0, [pc, #52]	@ (8013578 <do_memp_free_pool+0x54>)
 8013542:	f00a fd01 	bl	801df48 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801354a:	f009 fc5d 	bl	801ce08 <sys_arch_protect>
 801354e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013562:	68b8      	ldr	r0, [r7, #8]
 8013564:	f009 fc5e 	bl	801ce24 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013568:	bf00      	nop
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	0801f454 	.word	0x0801f454
 8013574:	0801f504 	.word	0x0801f504
 8013578:	0801f4a8 	.word	0x0801f4a8

0801357c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d106      	bne.n	801359a <memp_free_pool+0x1e>
 801358c:	4b0a      	ldr	r3, [pc, #40]	@ (80135b8 <memp_free_pool+0x3c>)
 801358e:	f240 1295 	movw	r2, #405	@ 0x195
 8013592:	490a      	ldr	r1, [pc, #40]	@ (80135bc <memp_free_pool+0x40>)
 8013594:	480a      	ldr	r0, [pc, #40]	@ (80135c0 <memp_free_pool+0x44>)
 8013596:	f00a fcd7 	bl	801df48 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d007      	beq.n	80135b0 <memp_free_pool+0x34>
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d004      	beq.n	80135b0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80135a6:	6839      	ldr	r1, [r7, #0]
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ffbb 	bl	8013524 <do_memp_free_pool>
 80135ae:	e000      	b.n	80135b2 <memp_free_pool+0x36>
    return;
 80135b0:	bf00      	nop
}
 80135b2:	3708      	adds	r7, #8
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	0801f454 	.word	0x0801f454
 80135bc:	0801f4d0 	.word	0x0801f4d0
 80135c0:	0801f4a8 	.word	0x0801f4a8

080135c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	4603      	mov	r3, r0
 80135cc:	6039      	str	r1, [r7, #0]
 80135ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	2b0c      	cmp	r3, #12
 80135d4:	d907      	bls.n	80135e6 <memp_free+0x22>
 80135d6:	4b0c      	ldr	r3, [pc, #48]	@ (8013608 <memp_free+0x44>)
 80135d8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80135dc:	490b      	ldr	r1, [pc, #44]	@ (801360c <memp_free+0x48>)
 80135de:	480c      	ldr	r0, [pc, #48]	@ (8013610 <memp_free+0x4c>)
 80135e0:	f00a fcb2 	bl	801df48 <iprintf>
 80135e4:	e00c      	b.n	8013600 <memp_free+0x3c>

  if (mem == NULL) {
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d008      	beq.n	80135fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	4a09      	ldr	r2, [pc, #36]	@ (8013614 <memp_free+0x50>)
 80135f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135f4:	6839      	ldr	r1, [r7, #0]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff ff94 	bl	8013524 <do_memp_free_pool>
 80135fc:	e000      	b.n	8013600 <memp_free+0x3c>
    return;
 80135fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	0801f454 	.word	0x0801f454
 801360c:	0801f524 	.word	0x0801f524
 8013610:	0801f4a8 	.word	0x0801f4a8
 8013614:	0802224c 	.word	0x0802224c

08013618 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013618:	b480      	push	{r7}
 801361a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801361c:	bf00      	nop
 801361e:	46bd      	mov	sp, r7
 8013620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013624:	4770      	bx	lr
	...

08013628 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d108      	bne.n	801364e <netif_add+0x26>
 801363c:	4b57      	ldr	r3, [pc, #348]	@ (801379c <netif_add+0x174>)
 801363e:	f240 1227 	movw	r2, #295	@ 0x127
 8013642:	4957      	ldr	r1, [pc, #348]	@ (80137a0 <netif_add+0x178>)
 8013644:	4857      	ldr	r0, [pc, #348]	@ (80137a4 <netif_add+0x17c>)
 8013646:	f00a fc7f 	bl	801df48 <iprintf>
 801364a:	2300      	movs	r3, #0
 801364c:	e0a2      	b.n	8013794 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013650:	2b00      	cmp	r3, #0
 8013652:	d108      	bne.n	8013666 <netif_add+0x3e>
 8013654:	4b51      	ldr	r3, [pc, #324]	@ (801379c <netif_add+0x174>)
 8013656:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801365a:	4953      	ldr	r1, [pc, #332]	@ (80137a8 <netif_add+0x180>)
 801365c:	4851      	ldr	r0, [pc, #324]	@ (80137a4 <netif_add+0x17c>)
 801365e:	f00a fc73 	bl	801df48 <iprintf>
 8013662:	2300      	movs	r3, #0
 8013664:	e096      	b.n	8013794 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d101      	bne.n	8013670 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801366c:	4b4f      	ldr	r3, [pc, #316]	@ (80137ac <netif_add+0x184>)
 801366e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d101      	bne.n	801367a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013676:	4b4d      	ldr	r3, [pc, #308]	@ (80137ac <netif_add+0x184>)
 8013678:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013680:	4b4a      	ldr	r3, [pc, #296]	@ (80137ac <netif_add+0x184>)
 8013682:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2200      	movs	r2, #0
 801368e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2200      	movs	r2, #0
 8013694:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	4a45      	ldr	r2, [pc, #276]	@ (80137b0 <netif_add+0x188>)
 801369a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2200      	movs	r2, #0
 80136a0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2200      	movs	r2, #0
 80136a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	6a3a      	ldr	r2, [r7, #32]
 80136b4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80136b6:	4b3f      	ldr	r3, [pc, #252]	@ (80137b4 <netif_add+0x18c>)
 80136b8:	781a      	ldrb	r2, [r3, #0]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136c4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	68b9      	ldr	r1, [r7, #8]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f000 f913 	bl	80138f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80136d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d4:	68f8      	ldr	r0, [r7, #12]
 80136d6:	4798      	blx	r3
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d001      	beq.n	80136e2 <netif_add+0xba>
    return NULL;
 80136de:	2300      	movs	r3, #0
 80136e0:	e058      	b.n	8013794 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80136e8:	2bff      	cmp	r3, #255	@ 0xff
 80136ea:	d103      	bne.n	80136f4 <netif_add+0xcc>
        netif->num = 0;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80136f8:	4b2f      	ldr	r3, [pc, #188]	@ (80137b8 <netif_add+0x190>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	617b      	str	r3, [r7, #20]
 80136fe:	e02b      	b.n	8013758 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013700:	697a      	ldr	r2, [r7, #20]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	429a      	cmp	r2, r3
 8013706:	d106      	bne.n	8013716 <netif_add+0xee>
 8013708:	4b24      	ldr	r3, [pc, #144]	@ (801379c <netif_add+0x174>)
 801370a:	f240 128b 	movw	r2, #395	@ 0x18b
 801370e:	492b      	ldr	r1, [pc, #172]	@ (80137bc <netif_add+0x194>)
 8013710:	4824      	ldr	r0, [pc, #144]	@ (80137a4 <netif_add+0x17c>)
 8013712:	f00a fc19 	bl	801df48 <iprintf>
        num_netifs++;
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	3301      	adds	r3, #1
 801371a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	2bff      	cmp	r3, #255	@ 0xff
 8013720:	dd06      	ble.n	8013730 <netif_add+0x108>
 8013722:	4b1e      	ldr	r3, [pc, #120]	@ (801379c <netif_add+0x174>)
 8013724:	f240 128d 	movw	r2, #397	@ 0x18d
 8013728:	4925      	ldr	r1, [pc, #148]	@ (80137c0 <netif_add+0x198>)
 801372a:	481e      	ldr	r0, [pc, #120]	@ (80137a4 <netif_add+0x17c>)
 801372c:	f00a fc0c 	bl	801df48 <iprintf>
        if (netif2->num == netif->num) {
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801373c:	429a      	cmp	r2, r3
 801373e:	d108      	bne.n	8013752 <netif_add+0x12a>
          netif->num++;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013746:	3301      	adds	r3, #1
 8013748:	b2da      	uxtb	r2, r3
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013750:	e005      	b.n	801375e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	617b      	str	r3, [r7, #20]
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1d0      	bne.n	8013700 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d1be      	bne.n	80136e2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801376a:	2bfe      	cmp	r3, #254	@ 0xfe
 801376c:	d103      	bne.n	8013776 <netif_add+0x14e>
    netif_num = 0;
 801376e:	4b11      	ldr	r3, [pc, #68]	@ (80137b4 <netif_add+0x18c>)
 8013770:	2200      	movs	r2, #0
 8013772:	701a      	strb	r2, [r3, #0]
 8013774:	e006      	b.n	8013784 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801377c:	3301      	adds	r3, #1
 801377e:	b2da      	uxtb	r2, r3
 8013780:	4b0c      	ldr	r3, [pc, #48]	@ (80137b4 <netif_add+0x18c>)
 8013782:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013784:	4b0c      	ldr	r3, [pc, #48]	@ (80137b8 <netif_add+0x190>)
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801378c:	4a0a      	ldr	r2, [pc, #40]	@ (80137b8 <netif_add+0x190>)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013792:	68fb      	ldr	r3, [r7, #12]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3718      	adds	r7, #24
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	0801f540 	.word	0x0801f540
 80137a0:	0801f5d4 	.word	0x0801f5d4
 80137a4:	0801f590 	.word	0x0801f590
 80137a8:	0801f5f0 	.word	0x0801f5f0
 80137ac:	080222c0 	.word	0x080222c0
 80137b0:	08013bd3 	.word	0x08013bd3
 80137b4:	2002762c 	.word	0x2002762c
 80137b8:	20027624 	.word	0x20027624
 80137bc:	0801f614 	.word	0x0801f614
 80137c0:	0801f628 	.word	0x0801f628

080137c4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80137ce:	6839      	ldr	r1, [r7, #0]
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f002 fb8f 	bl	8015ef4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f006 ff4b 	bl	801a674 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80137de:	bf00      	nop
 80137e0:	3708      	adds	r7, #8
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
	...

080137e8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d106      	bne.n	8013808 <netif_do_set_ipaddr+0x20>
 80137fa:	4b1d      	ldr	r3, [pc, #116]	@ (8013870 <netif_do_set_ipaddr+0x88>)
 80137fc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013800:	491c      	ldr	r1, [pc, #112]	@ (8013874 <netif_do_set_ipaddr+0x8c>)
 8013802:	481d      	ldr	r0, [pc, #116]	@ (8013878 <netif_do_set_ipaddr+0x90>)
 8013804:	f00a fba0 	bl	801df48 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d106      	bne.n	801381c <netif_do_set_ipaddr+0x34>
 801380e:	4b18      	ldr	r3, [pc, #96]	@ (8013870 <netif_do_set_ipaddr+0x88>)
 8013810:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013814:	4917      	ldr	r1, [pc, #92]	@ (8013874 <netif_do_set_ipaddr+0x8c>)
 8013816:	4818      	ldr	r0, [pc, #96]	@ (8013878 <netif_do_set_ipaddr+0x90>)
 8013818:	f00a fb96 	bl	801df48 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	3304      	adds	r3, #4
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d01c      	beq.n	8013864 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	3304      	adds	r3, #4
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801383a:	f107 0314 	add.w	r3, r7, #20
 801383e:	4619      	mov	r1, r3
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7ff ffbf 	bl	80137c4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <netif_do_set_ipaddr+0x6a>
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	e000      	b.n	8013854 <netif_do_set_ipaddr+0x6c>
 8013852:	2300      	movs	r3, #0
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013858:	2101      	movs	r1, #1
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f000 f8d2 	bl	8013a04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013860:	2301      	movs	r3, #1
 8013862:	e000      	b.n	8013866 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	3718      	adds	r7, #24
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	0801f540 	.word	0x0801f540
 8013874:	0801f658 	.word	0x0801f658
 8013878:	0801f590 	.word	0x0801f590

0801387c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801387c:	b480      	push	{r7}
 801387e:	b085      	sub	sp, #20
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	681a      	ldr	r2, [r3, #0]
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	3308      	adds	r3, #8
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	429a      	cmp	r2, r3
 8013894:	d00a      	beq.n	80138ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <netif_do_set_netmask+0x26>
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	e000      	b.n	80138a4 <netif_do_set_netmask+0x28>
 80138a2:	2300      	movs	r3, #0
 80138a4:	68fa      	ldr	r2, [r7, #12]
 80138a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80138a8:	2301      	movs	r3, #1
 80138aa:	e000      	b.n	80138ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3714      	adds	r7, #20
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr

080138ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80138ba:	b480      	push	{r7}
 80138bc:	b085      	sub	sp, #20
 80138be:	af00      	add	r7, sp, #0
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	60b9      	str	r1, [r7, #8]
 80138c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	330c      	adds	r3, #12
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d00a      	beq.n	80138ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d002      	beq.n	80138e0 <netif_do_set_gw+0x26>
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	e000      	b.n	80138e2 <netif_do_set_gw+0x28>
 80138e0:	2300      	movs	r3, #0
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80138e6:	2301      	movs	r3, #1
 80138e8:	e000      	b.n	80138ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80138ea:	2300      	movs	r3, #0
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr

080138f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b088      	sub	sp, #32
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013906:	2300      	movs	r3, #0
 8013908:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801390a:	2300      	movs	r3, #0
 801390c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d101      	bne.n	8013918 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013914:	4b1c      	ldr	r3, [pc, #112]	@ (8013988 <netif_set_addr+0x90>)
 8013916:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d101      	bne.n	8013922 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801391e:	4b1a      	ldr	r3, [pc, #104]	@ (8013988 <netif_set_addr+0x90>)
 8013920:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d101      	bne.n	801392c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013928:	4b17      	ldr	r3, [pc, #92]	@ (8013988 <netif_set_addr+0x90>)
 801392a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d003      	beq.n	801393a <netif_set_addr+0x42>
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d101      	bne.n	801393e <netif_set_addr+0x46>
 801393a:	2301      	movs	r3, #1
 801393c:	e000      	b.n	8013940 <netif_set_addr+0x48>
 801393e:	2300      	movs	r3, #0
 8013940:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d006      	beq.n	8013956 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013948:	f107 0310 	add.w	r3, r7, #16
 801394c:	461a      	mov	r2, r3
 801394e:	68b9      	ldr	r1, [r7, #8]
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	f7ff ff49 	bl	80137e8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013956:	69fa      	ldr	r2, [r7, #28]
 8013958:	6879      	ldr	r1, [r7, #4]
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f7ff ff8e 	bl	801387c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013960:	69ba      	ldr	r2, [r7, #24]
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	68f8      	ldr	r0, [r7, #12]
 8013966:	f7ff ffa8 	bl	80138ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d106      	bne.n	801397e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013970:	f107 0310 	add.w	r3, r7, #16
 8013974:	461a      	mov	r2, r3
 8013976:	68b9      	ldr	r1, [r7, #8]
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f7ff ff35 	bl	80137e8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801397e:	bf00      	nop
 8013980:	3720      	adds	r7, #32
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	080222c0 	.word	0x080222c0

0801398c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801398c:	b480      	push	{r7}
 801398e:	b083      	sub	sp, #12
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013994:	4a04      	ldr	r2, [pc, #16]	@ (80139a8 <netif_set_default+0x1c>)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801399a:	bf00      	nop
 801399c:	370c      	adds	r7, #12
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	20027628 	.word	0x20027628

080139ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d107      	bne.n	80139ca <netif_set_up+0x1e>
 80139ba:	4b0f      	ldr	r3, [pc, #60]	@ (80139f8 <netif_set_up+0x4c>)
 80139bc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80139c0:	490e      	ldr	r1, [pc, #56]	@ (80139fc <netif_set_up+0x50>)
 80139c2:	480f      	ldr	r0, [pc, #60]	@ (8013a00 <netif_set_up+0x54>)
 80139c4:	f00a fac0 	bl	801df48 <iprintf>
 80139c8:	e013      	b.n	80139f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139d0:	f003 0301 	and.w	r3, r3, #1
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10c      	bne.n	80139f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139de:	f043 0301 	orr.w	r3, r3, #1
 80139e2:	b2da      	uxtb	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80139ea:	2103      	movs	r1, #3
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f809 	bl	8013a04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	0801f540 	.word	0x0801f540
 80139fc:	0801f6c8 	.word	0x0801f6c8
 8013a00:	0801f590 	.word	0x0801f590

08013a04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d106      	bne.n	8013a24 <netif_issue_reports+0x20>
 8013a16:	4b18      	ldr	r3, [pc, #96]	@ (8013a78 <netif_issue_reports+0x74>)
 8013a18:	f240 326d 	movw	r2, #877	@ 0x36d
 8013a1c:	4917      	ldr	r1, [pc, #92]	@ (8013a7c <netif_issue_reports+0x78>)
 8013a1e:	4818      	ldr	r0, [pc, #96]	@ (8013a80 <netif_issue_reports+0x7c>)
 8013a20:	f00a fa92 	bl	801df48 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a2a:	f003 0304 	and.w	r3, r3, #4
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d01e      	beq.n	8013a70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d017      	beq.n	8013a70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013a40:	78fb      	ldrb	r3, [r7, #3]
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d013      	beq.n	8013a72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d00e      	beq.n	8013a72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a5a:	f003 0308 	and.w	r3, r3, #8
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d007      	beq.n	8013a72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3304      	adds	r3, #4
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f007 fd6d 	bl	801b548 <etharp_request>
 8013a6e:	e000      	b.n	8013a72 <netif_issue_reports+0x6e>
    return;
 8013a70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	0801f540 	.word	0x0801f540
 8013a7c:	0801f6e4 	.word	0x0801f6e4
 8013a80:	0801f590 	.word	0x0801f590

08013a84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d107      	bne.n	8013aa2 <netif_set_down+0x1e>
 8013a92:	4b12      	ldr	r3, [pc, #72]	@ (8013adc <netif_set_down+0x58>)
 8013a94:	f240 329b 	movw	r2, #923	@ 0x39b
 8013a98:	4911      	ldr	r1, [pc, #68]	@ (8013ae0 <netif_set_down+0x5c>)
 8013a9a:	4812      	ldr	r0, [pc, #72]	@ (8013ae4 <netif_set_down+0x60>)
 8013a9c:	f00a fa54 	bl	801df48 <iprintf>
 8013aa0:	e019      	b.n	8013ad6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013aa8:	f003 0301 	and.w	r3, r3, #1
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d012      	beq.n	8013ad6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ab6:	f023 0301 	bic.w	r3, r3, #1
 8013aba:	b2da      	uxtb	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ac8:	f003 0308 	and.w	r3, r3, #8
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d002      	beq.n	8013ad6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f007 f8f7 	bl	801acc4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013ad6:	3708      	adds	r7, #8
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	0801f540 	.word	0x0801f540
 8013ae0:	0801f708 	.word	0x0801f708
 8013ae4:	0801f590 	.word	0x0801f590

08013ae8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d107      	bne.n	8013b06 <netif_set_link_up+0x1e>
 8013af6:	4b13      	ldr	r3, [pc, #76]	@ (8013b44 <netif_set_link_up+0x5c>)
 8013af8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013afc:	4912      	ldr	r1, [pc, #72]	@ (8013b48 <netif_set_link_up+0x60>)
 8013afe:	4813      	ldr	r0, [pc, #76]	@ (8013b4c <netif_set_link_up+0x64>)
 8013b00:	f00a fa22 	bl	801df48 <iprintf>
 8013b04:	e01b      	b.n	8013b3e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b0c:	f003 0304 	and.w	r3, r3, #4
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d114      	bne.n	8013b3e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b1a:	f043 0304 	orr.w	r3, r3, #4
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013b26:	2103      	movs	r1, #3
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f7ff ff6b 	bl	8013a04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	69db      	ldr	r3, [r3, #28]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d003      	beq.n	8013b3e <netif_set_link_up+0x56>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	69db      	ldr	r3, [r3, #28]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	0801f540 	.word	0x0801f540
 8013b48:	0801f728 	.word	0x0801f728
 8013b4c:	0801f590 	.word	0x0801f590

08013b50 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d107      	bne.n	8013b6e <netif_set_link_down+0x1e>
 8013b5e:	4b11      	ldr	r3, [pc, #68]	@ (8013ba4 <netif_set_link_down+0x54>)
 8013b60:	f240 4206 	movw	r2, #1030	@ 0x406
 8013b64:	4910      	ldr	r1, [pc, #64]	@ (8013ba8 <netif_set_link_down+0x58>)
 8013b66:	4811      	ldr	r0, [pc, #68]	@ (8013bac <netif_set_link_down+0x5c>)
 8013b68:	f00a f9ee 	bl	801df48 <iprintf>
 8013b6c:	e017      	b.n	8013b9e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b74:	f003 0304 	and.w	r3, r3, #4
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d010      	beq.n	8013b9e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b82:	f023 0304 	bic.w	r3, r3, #4
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	69db      	ldr	r3, [r3, #28]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d003      	beq.n	8013b9e <netif_set_link_down+0x4e>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	69db      	ldr	r3, [r3, #28]
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	0801f540 	.word	0x0801f540
 8013ba8:	0801f74c 	.word	0x0801f74c
 8013bac:	0801f590 	.word	0x0801f590

08013bb0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d002      	beq.n	8013bc6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	683a      	ldr	r2, [r7, #0]
 8013bc4:	61da      	str	r2, [r3, #28]
  }
}
 8013bc6:	bf00      	nop
 8013bc8:	370c      	adds	r7, #12
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013bd2:	b480      	push	{r7}
 8013bd4:	b085      	sub	sp, #20
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	60f8      	str	r0, [r7, #12]
 8013bda:	60b9      	str	r1, [r7, #8]
 8013bdc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013bde:	f06f 030b 	mvn.w	r3, #11
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3714      	adds	r7, #20
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr
	...

08013bf0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b085      	sub	sp, #20
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013bfa:	79fb      	ldrb	r3, [r7, #7]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d013      	beq.n	8013c28 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013c00:	4b0d      	ldr	r3, [pc, #52]	@ (8013c38 <netif_get_by_index+0x48>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	60fb      	str	r3, [r7, #12]
 8013c06:	e00c      	b.n	8013c22 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c0e:	3301      	adds	r3, #1
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	79fa      	ldrb	r2, [r7, #7]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d101      	bne.n	8013c1c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	e006      	b.n	8013c2a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	60fb      	str	r3, [r7, #12]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1ef      	bne.n	8013c08 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3714      	adds	r7, #20
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c34:	4770      	bx	lr
 8013c36:	bf00      	nop
 8013c38:	20027624 	.word	0x20027624

08013c3c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013c42:	f009 f8e1 	bl	801ce08 <sys_arch_protect>
 8013c46:	6038      	str	r0, [r7, #0]
 8013c48:	4b0d      	ldr	r3, [pc, #52]	@ (8013c80 <pbuf_free_ooseq+0x44>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	701a      	strb	r2, [r3, #0]
 8013c4e:	6838      	ldr	r0, [r7, #0]
 8013c50:	f009 f8e8 	bl	801ce24 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013c54:	4b0b      	ldr	r3, [pc, #44]	@ (8013c84 <pbuf_free_ooseq+0x48>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	607b      	str	r3, [r7, #4]
 8013c5a:	e00a      	b.n	8013c72 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d003      	beq.n	8013c6c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f002 f983 	bl	8015f70 <tcp_free_ooseq>
      return;
 8013c6a:	e005      	b.n	8013c78 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	607b      	str	r3, [r7, #4]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1f1      	bne.n	8013c5c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	2002762d 	.word	0x2002762d
 8013c84:	2002763c 	.word	0x2002763c

08013c88 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013c90:	f7ff ffd4 	bl	8013c3c <pbuf_free_ooseq>
}
 8013c94:	bf00      	nop
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013ca2:	f009 f8b1 	bl	801ce08 <sys_arch_protect>
 8013ca6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8013ce8 <pbuf_pool_is_empty+0x4c>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013cae:	4b0e      	ldr	r3, [pc, #56]	@ (8013ce8 <pbuf_pool_is_empty+0x4c>)
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f009 f8b5 	bl	801ce24 <sys_arch_unprotect>

  if (!queued) {
 8013cba:	78fb      	ldrb	r3, [r7, #3]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d10f      	bne.n	8013ce0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	480a      	ldr	r0, [pc, #40]	@ (8013cec <pbuf_pool_is_empty+0x50>)
 8013cc4:	f7fe feaa 	bl	8012a1c <tcpip_try_callback>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d008      	beq.n	8013ce0 <pbuf_pool_is_empty+0x44>
 8013cce:	f009 f89b 	bl	801ce08 <sys_arch_protect>
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	4b04      	ldr	r3, [pc, #16]	@ (8013ce8 <pbuf_pool_is_empty+0x4c>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	701a      	strb	r2, [r3, #0]
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f009 f8a2 	bl	801ce24 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	2002762d 	.word	0x2002762d
 8013cec:	08013c89 	.word	0x08013c89

08013cf0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b085      	sub	sp, #20
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	460b      	mov	r3, r1
 8013d00:	80fb      	strh	r3, [r7, #6]
 8013d02:	4613      	mov	r3, r2
 8013d04:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	88fa      	ldrh	r2, [r7, #6]
 8013d16:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	88ba      	ldrh	r2, [r7, #4]
 8013d1c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013d1e:	8b3b      	ldrh	r3, [r7, #24]
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7f3a      	ldrb	r2, [r7, #28]
 8013d2a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2201      	movs	r2, #1
 8013d30:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	2200      	movs	r2, #0
 8013d36:	73da      	strb	r2, [r3, #15]
}
 8013d38:	bf00      	nop
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b08c      	sub	sp, #48	@ 0x30
 8013d48:	af02      	add	r7, sp, #8
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	71fb      	strb	r3, [r7, #7]
 8013d4e:	460b      	mov	r3, r1
 8013d50:	80bb      	strh	r3, [r7, #4]
 8013d52:	4613      	mov	r3, r2
 8013d54:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013d56:	79fb      	ldrb	r3, [r7, #7]
 8013d58:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013d5a:	887b      	ldrh	r3, [r7, #2]
 8013d5c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013d60:	d07f      	beq.n	8013e62 <pbuf_alloc+0x11e>
 8013d62:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013d66:	f300 80c8 	bgt.w	8013efa <pbuf_alloc+0x1b6>
 8013d6a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013d6e:	d010      	beq.n	8013d92 <pbuf_alloc+0x4e>
 8013d70:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013d74:	f300 80c1 	bgt.w	8013efa <pbuf_alloc+0x1b6>
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d002      	beq.n	8013d82 <pbuf_alloc+0x3e>
 8013d7c:	2b41      	cmp	r3, #65	@ 0x41
 8013d7e:	f040 80bc 	bne.w	8013efa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013d82:	887a      	ldrh	r2, [r7, #2]
 8013d84:	88bb      	ldrh	r3, [r7, #4]
 8013d86:	4619      	mov	r1, r3
 8013d88:	2000      	movs	r0, #0
 8013d8a:	f000 f8d1 	bl	8013f30 <pbuf_alloc_reference>
 8013d8e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013d90:	e0bd      	b.n	8013f0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013d96:	2300      	movs	r3, #0
 8013d98:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013d9a:	88bb      	ldrh	r3, [r7, #4]
 8013d9c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013d9e:	200c      	movs	r0, #12
 8013da0:	f7ff fb9a 	bl	80134d8 <memp_malloc>
 8013da4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d109      	bne.n	8013dc0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013dac:	f7ff ff76 	bl	8013c9c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d002      	beq.n	8013dbc <pbuf_alloc+0x78>
            pbuf_free(p);
 8013db6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013db8:	f000 faa8 	bl	801430c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	e0a7      	b.n	8013f10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013dc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dc2:	3303      	adds	r3, #3
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	f023 0303 	bic.w	r3, r3, #3
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	8b7a      	ldrh	r2, [r7, #26]
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	bf28      	it	cs
 8013dd8:	4613      	movcs	r3, r2
 8013dda:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013ddc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dde:	3310      	adds	r3, #16
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	4413      	add	r3, r2
 8013de4:	3303      	adds	r3, #3
 8013de6:	f023 0303 	bic.w	r3, r3, #3
 8013dea:	4618      	mov	r0, r3
 8013dec:	89f9      	ldrh	r1, [r7, #14]
 8013dee:	8b7a      	ldrh	r2, [r7, #26]
 8013df0:	2300      	movs	r3, #0
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	887b      	ldrh	r3, [r7, #2]
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	460b      	mov	r3, r1
 8013dfa:	4601      	mov	r1, r0
 8013dfc:	6938      	ldr	r0, [r7, #16]
 8013dfe:	f7ff ff77 	bl	8013cf0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	f003 0303 	and.w	r3, r3, #3
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d006      	beq.n	8013e1c <pbuf_alloc+0xd8>
 8013e0e:	4b42      	ldr	r3, [pc, #264]	@ (8013f18 <pbuf_alloc+0x1d4>)
 8013e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013e14:	4941      	ldr	r1, [pc, #260]	@ (8013f1c <pbuf_alloc+0x1d8>)
 8013e16:	4842      	ldr	r0, [pc, #264]	@ (8013f20 <pbuf_alloc+0x1dc>)
 8013e18:	f00a f896 	bl	801df48 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013e1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013e1e:	3303      	adds	r3, #3
 8013e20:	f023 0303 	bic.w	r3, r3, #3
 8013e24:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013e28:	d106      	bne.n	8013e38 <pbuf_alloc+0xf4>
 8013e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8013f18 <pbuf_alloc+0x1d4>)
 8013e2c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013e30:	493c      	ldr	r1, [pc, #240]	@ (8013f24 <pbuf_alloc+0x1e0>)
 8013e32:	483b      	ldr	r0, [pc, #236]	@ (8013f20 <pbuf_alloc+0x1dc>)
 8013e34:	f00a f888 	bl	801df48 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d102      	bne.n	8013e44 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e42:	e002      	b.n	8013e4a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	693a      	ldr	r2, [r7, #16]
 8013e48:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013e4e:	8b7a      	ldrh	r2, [r7, #26]
 8013e50:	89fb      	ldrh	r3, [r7, #14]
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013e56:	2300      	movs	r3, #0
 8013e58:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013e5a:	8b7b      	ldrh	r3, [r7, #26]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d19e      	bne.n	8013d9e <pbuf_alloc+0x5a>
      break;
 8013e60:	e055      	b.n	8013f0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013e62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013e64:	3303      	adds	r3, #3
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	f023 0303 	bic.w	r3, r3, #3
 8013e6c:	b29a      	uxth	r2, r3
 8013e6e:	88bb      	ldrh	r3, [r7, #4]
 8013e70:	3303      	adds	r3, #3
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	f023 0303 	bic.w	r3, r3, #3
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	4413      	add	r3, r2
 8013e7c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013e7e:	8b3b      	ldrh	r3, [r7, #24]
 8013e80:	3310      	adds	r3, #16
 8013e82:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013e84:	8b3a      	ldrh	r2, [r7, #24]
 8013e86:	88bb      	ldrh	r3, [r7, #4]
 8013e88:	3303      	adds	r3, #3
 8013e8a:	f023 0303 	bic.w	r3, r3, #3
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d306      	bcc.n	8013ea0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013e92:	8afa      	ldrh	r2, [r7, #22]
 8013e94:	88bb      	ldrh	r3, [r7, #4]
 8013e96:	3303      	adds	r3, #3
 8013e98:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d201      	bcs.n	8013ea4 <pbuf_alloc+0x160>
        return NULL;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	e035      	b.n	8013f10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013ea4:	8afb      	ldrh	r3, [r7, #22]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ff f972 	bl	8013190 <mem_malloc>
 8013eac:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d101      	bne.n	8013eb8 <pbuf_alloc+0x174>
        return NULL;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	e02b      	b.n	8013f10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013eb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013eba:	3310      	adds	r3, #16
 8013ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ebe:	4413      	add	r3, r2
 8013ec0:	3303      	adds	r3, #3
 8013ec2:	f023 0303 	bic.w	r3, r3, #3
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	88b9      	ldrh	r1, [r7, #4]
 8013eca:	88ba      	ldrh	r2, [r7, #4]
 8013ecc:	2300      	movs	r3, #0
 8013ece:	9301      	str	r3, [sp, #4]
 8013ed0:	887b      	ldrh	r3, [r7, #2]
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	4601      	mov	r1, r0
 8013ed8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013eda:	f7ff ff09 	bl	8013cf0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	f003 0303 	and.w	r3, r3, #3
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d010      	beq.n	8013f0c <pbuf_alloc+0x1c8>
 8013eea:	4b0b      	ldr	r3, [pc, #44]	@ (8013f18 <pbuf_alloc+0x1d4>)
 8013eec:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013ef0:	490d      	ldr	r1, [pc, #52]	@ (8013f28 <pbuf_alloc+0x1e4>)
 8013ef2:	480b      	ldr	r0, [pc, #44]	@ (8013f20 <pbuf_alloc+0x1dc>)
 8013ef4:	f00a f828 	bl	801df48 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013ef8:	e008      	b.n	8013f0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013efa:	4b07      	ldr	r3, [pc, #28]	@ (8013f18 <pbuf_alloc+0x1d4>)
 8013efc:	f240 1227 	movw	r2, #295	@ 0x127
 8013f00:	490a      	ldr	r1, [pc, #40]	@ (8013f2c <pbuf_alloc+0x1e8>)
 8013f02:	4807      	ldr	r0, [pc, #28]	@ (8013f20 <pbuf_alloc+0x1dc>)
 8013f04:	f00a f820 	bl	801df48 <iprintf>
      return NULL;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	e001      	b.n	8013f10 <pbuf_alloc+0x1cc>
      break;
 8013f0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3728      	adds	r7, #40	@ 0x28
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	0801f770 	.word	0x0801f770
 8013f1c:	0801f7a0 	.word	0x0801f7a0
 8013f20:	0801f7d0 	.word	0x0801f7d0
 8013f24:	0801f7f8 	.word	0x0801f7f8
 8013f28:	0801f82c 	.word	0x0801f82c
 8013f2c:	0801f858 	.word	0x0801f858

08013f30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af02      	add	r7, sp, #8
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	807b      	strh	r3, [r7, #2]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013f40:	883b      	ldrh	r3, [r7, #0]
 8013f42:	2b41      	cmp	r3, #65	@ 0x41
 8013f44:	d009      	beq.n	8013f5a <pbuf_alloc_reference+0x2a>
 8013f46:	883b      	ldrh	r3, [r7, #0]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d006      	beq.n	8013f5a <pbuf_alloc_reference+0x2a>
 8013f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013f8c <pbuf_alloc_reference+0x5c>)
 8013f4e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013f52:	490f      	ldr	r1, [pc, #60]	@ (8013f90 <pbuf_alloc_reference+0x60>)
 8013f54:	480f      	ldr	r0, [pc, #60]	@ (8013f94 <pbuf_alloc_reference+0x64>)
 8013f56:	f009 fff7 	bl	801df48 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013f5a:	200b      	movs	r0, #11
 8013f5c:	f7ff fabc 	bl	80134d8 <memp_malloc>
 8013f60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d101      	bne.n	8013f6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	e00b      	b.n	8013f84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013f6c:	8879      	ldrh	r1, [r7, #2]
 8013f6e:	887a      	ldrh	r2, [r7, #2]
 8013f70:	2300      	movs	r3, #0
 8013f72:	9301      	str	r3, [sp, #4]
 8013f74:	883b      	ldrh	r3, [r7, #0]
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	6879      	ldr	r1, [r7, #4]
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f7ff feb7 	bl	8013cf0 <pbuf_init_alloced_pbuf>
  return p;
 8013f82:	68fb      	ldr	r3, [r7, #12]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	0801f770 	.word	0x0801f770
 8013f90:	0801f874 	.word	0x0801f874
 8013f94:	0801f7d0 	.word	0x0801f7d0

08013f98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b088      	sub	sp, #32
 8013f9c:	af02      	add	r7, sp, #8
 8013f9e:	607b      	str	r3, [r7, #4]
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	73fb      	strb	r3, [r7, #15]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	81bb      	strh	r3, [r7, #12]
 8013fa8:	4613      	mov	r3, r2
 8013faa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
 8013fae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013fb0:	8a7b      	ldrh	r3, [r7, #18]
 8013fb2:	3303      	adds	r3, #3
 8013fb4:	f023 0203 	bic.w	r2, r3, #3
 8013fb8:	89bb      	ldrh	r3, [r7, #12]
 8013fba:	441a      	add	r2, r3
 8013fbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d901      	bls.n	8013fc6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	e018      	b.n	8013ff8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d007      	beq.n	8013fdc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013fcc:	8a7b      	ldrh	r3, [r7, #18]
 8013fce:	3303      	adds	r3, #3
 8013fd0:	f023 0303 	bic.w	r3, r3, #3
 8013fd4:	6a3a      	ldr	r2, [r7, #32]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	e001      	b.n	8013fe0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	89b9      	ldrh	r1, [r7, #12]
 8013fe4:	89ba      	ldrh	r2, [r7, #12]
 8013fe6:	2302      	movs	r3, #2
 8013fe8:	9301      	str	r3, [sp, #4]
 8013fea:	897b      	ldrh	r3, [r7, #10]
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	460b      	mov	r3, r1
 8013ff0:	6979      	ldr	r1, [r7, #20]
 8013ff2:	f7ff fe7d 	bl	8013cf0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013ff6:	687b      	ldr	r3, [r7, #4]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3718      	adds	r7, #24
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	460b      	mov	r3, r1
 801400a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d106      	bne.n	8014020 <pbuf_realloc+0x20>
 8014012:	4b3a      	ldr	r3, [pc, #232]	@ (80140fc <pbuf_realloc+0xfc>)
 8014014:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014018:	4939      	ldr	r1, [pc, #228]	@ (8014100 <pbuf_realloc+0x100>)
 801401a:	483a      	ldr	r0, [pc, #232]	@ (8014104 <pbuf_realloc+0x104>)
 801401c:	f009 ff94 	bl	801df48 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	891b      	ldrh	r3, [r3, #8]
 8014024:	887a      	ldrh	r2, [r7, #2]
 8014026:	429a      	cmp	r2, r3
 8014028:	d263      	bcs.n	80140f2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	891a      	ldrh	r2, [r3, #8]
 801402e:	887b      	ldrh	r3, [r7, #2]
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014034:	887b      	ldrh	r3, [r7, #2]
 8014036:	817b      	strh	r3, [r7, #10]
  q = p;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801403c:	e018      	b.n	8014070 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	895b      	ldrh	r3, [r3, #10]
 8014042:	897a      	ldrh	r2, [r7, #10]
 8014044:	1ad3      	subs	r3, r2, r3
 8014046:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	891a      	ldrh	r2, [r3, #8]
 801404c:	893b      	ldrh	r3, [r7, #8]
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	b29a      	uxth	r2, r3
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d106      	bne.n	8014070 <pbuf_realloc+0x70>
 8014062:	4b26      	ldr	r3, [pc, #152]	@ (80140fc <pbuf_realloc+0xfc>)
 8014064:	f240 12af 	movw	r2, #431	@ 0x1af
 8014068:	4927      	ldr	r1, [pc, #156]	@ (8014108 <pbuf_realloc+0x108>)
 801406a:	4826      	ldr	r0, [pc, #152]	@ (8014104 <pbuf_realloc+0x104>)
 801406c:	f009 ff6c 	bl	801df48 <iprintf>
  while (rem_len > q->len) {
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	895b      	ldrh	r3, [r3, #10]
 8014074:	897a      	ldrh	r2, [r7, #10]
 8014076:	429a      	cmp	r2, r3
 8014078:	d8e1      	bhi.n	801403e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	7b1b      	ldrb	r3, [r3, #12]
 801407e:	f003 030f 	and.w	r3, r3, #15
 8014082:	2b00      	cmp	r3, #0
 8014084:	d121      	bne.n	80140ca <pbuf_realloc+0xca>
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	895b      	ldrh	r3, [r3, #10]
 801408a:	897a      	ldrh	r2, [r7, #10]
 801408c:	429a      	cmp	r2, r3
 801408e:	d01c      	beq.n	80140ca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	7b5b      	ldrb	r3, [r3, #13]
 8014094:	f003 0302 	and.w	r3, r3, #2
 8014098:	2b00      	cmp	r3, #0
 801409a:	d116      	bne.n	80140ca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	685a      	ldr	r2, [r3, #4]
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	897b      	ldrh	r3, [r7, #10]
 80140a8:	4413      	add	r3, r2
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	4619      	mov	r1, r3
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f7fe ff64 	bl	8012f7c <mem_trim>
 80140b4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d106      	bne.n	80140ca <pbuf_realloc+0xca>
 80140bc:	4b0f      	ldr	r3, [pc, #60]	@ (80140fc <pbuf_realloc+0xfc>)
 80140be:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80140c2:	4912      	ldr	r1, [pc, #72]	@ (801410c <pbuf_realloc+0x10c>)
 80140c4:	480f      	ldr	r0, [pc, #60]	@ (8014104 <pbuf_realloc+0x104>)
 80140c6:	f009 ff3f 	bl	801df48 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	897a      	ldrh	r2, [r7, #10]
 80140ce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	895a      	ldrh	r2, [r3, #10]
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4618      	mov	r0, r3
 80140e6:	f000 f911 	bl	801430c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2200      	movs	r2, #0
 80140ee:	601a      	str	r2, [r3, #0]
 80140f0:	e000      	b.n	80140f4 <pbuf_realloc+0xf4>
    return;
 80140f2:	bf00      	nop

}
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	0801f770 	.word	0x0801f770
 8014100:	0801f888 	.word	0x0801f888
 8014104:	0801f7d0 	.word	0x0801f7d0
 8014108:	0801f8a0 	.word	0x0801f8a0
 801410c:	0801f8b8 	.word	0x0801f8b8

08014110 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b086      	sub	sp, #24
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	4613      	mov	r3, r2
 801411c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d106      	bne.n	8014132 <pbuf_add_header_impl+0x22>
 8014124:	4b2b      	ldr	r3, [pc, #172]	@ (80141d4 <pbuf_add_header_impl+0xc4>)
 8014126:	f240 12df 	movw	r2, #479	@ 0x1df
 801412a:	492b      	ldr	r1, [pc, #172]	@ (80141d8 <pbuf_add_header_impl+0xc8>)
 801412c:	482b      	ldr	r0, [pc, #172]	@ (80141dc <pbuf_add_header_impl+0xcc>)
 801412e:	f009 ff0b 	bl	801df48 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d003      	beq.n	8014140 <pbuf_add_header_impl+0x30>
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801413e:	d301      	bcc.n	8014144 <pbuf_add_header_impl+0x34>
    return 1;
 8014140:	2301      	movs	r3, #1
 8014142:	e043      	b.n	80141cc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d101      	bne.n	801414e <pbuf_add_header_impl+0x3e>
    return 0;
 801414a:	2300      	movs	r3, #0
 801414c:	e03e      	b.n	80141cc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	891a      	ldrh	r2, [r3, #8]
 8014156:	8a7b      	ldrh	r3, [r7, #18]
 8014158:	4413      	add	r3, r2
 801415a:	b29b      	uxth	r3, r3
 801415c:	8a7a      	ldrh	r2, [r7, #18]
 801415e:	429a      	cmp	r2, r3
 8014160:	d901      	bls.n	8014166 <pbuf_add_header_impl+0x56>
    return 1;
 8014162:	2301      	movs	r3, #1
 8014164:	e032      	b.n	80141cc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	7b1b      	ldrb	r3, [r3, #12]
 801416a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801416c:	8a3b      	ldrh	r3, [r7, #16]
 801416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014172:	2b00      	cmp	r3, #0
 8014174:	d00c      	beq.n	8014190 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	685a      	ldr	r2, [r3, #4]
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	425b      	negs	r3, r3
 801417e:	4413      	add	r3, r2
 8014180:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	3310      	adds	r3, #16
 8014186:	697a      	ldr	r2, [r7, #20]
 8014188:	429a      	cmp	r2, r3
 801418a:	d20d      	bcs.n	80141a8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801418c:	2301      	movs	r3, #1
 801418e:	e01d      	b.n	80141cc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014190:	79fb      	ldrb	r3, [r7, #7]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d006      	beq.n	80141a4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	685a      	ldr	r2, [r3, #4]
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	425b      	negs	r3, r3
 801419e:	4413      	add	r3, r2
 80141a0:	617b      	str	r3, [r7, #20]
 80141a2:	e001      	b.n	80141a8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80141a4:	2301      	movs	r3, #1
 80141a6:	e011      	b.n	80141cc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	697a      	ldr	r2, [r7, #20]
 80141ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	895a      	ldrh	r2, [r3, #10]
 80141b2:	8a7b      	ldrh	r3, [r7, #18]
 80141b4:	4413      	add	r3, r2
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	891a      	ldrh	r2, [r3, #8]
 80141c0:	8a7b      	ldrh	r3, [r7, #18]
 80141c2:	4413      	add	r3, r2
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	811a      	strh	r2, [r3, #8]


  return 0;
 80141ca:	2300      	movs	r3, #0
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3718      	adds	r7, #24
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	0801f770 	.word	0x0801f770
 80141d8:	0801f8d4 	.word	0x0801f8d4
 80141dc:	0801f7d0 	.word	0x0801f7d0

080141e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80141ea:	2200      	movs	r2, #0
 80141ec:	6839      	ldr	r1, [r7, #0]
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff ff8e 	bl	8014110 <pbuf_add_header_impl>
 80141f4:	4603      	mov	r3, r0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
	...

08014200 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d106      	bne.n	801421e <pbuf_remove_header+0x1e>
 8014210:	4b20      	ldr	r3, [pc, #128]	@ (8014294 <pbuf_remove_header+0x94>)
 8014212:	f240 224b 	movw	r2, #587	@ 0x24b
 8014216:	4920      	ldr	r1, [pc, #128]	@ (8014298 <pbuf_remove_header+0x98>)
 8014218:	4820      	ldr	r0, [pc, #128]	@ (801429c <pbuf_remove_header+0x9c>)
 801421a:	f009 fe95 	bl	801df48 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d003      	beq.n	801422c <pbuf_remove_header+0x2c>
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801422a:	d301      	bcc.n	8014230 <pbuf_remove_header+0x30>
    return 1;
 801422c:	2301      	movs	r3, #1
 801422e:	e02c      	b.n	801428a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d101      	bne.n	801423a <pbuf_remove_header+0x3a>
    return 0;
 8014236:	2300      	movs	r3, #0
 8014238:	e027      	b.n	801428a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	895b      	ldrh	r3, [r3, #10]
 8014242:	89fa      	ldrh	r2, [r7, #14]
 8014244:	429a      	cmp	r2, r3
 8014246:	d908      	bls.n	801425a <pbuf_remove_header+0x5a>
 8014248:	4b12      	ldr	r3, [pc, #72]	@ (8014294 <pbuf_remove_header+0x94>)
 801424a:	f240 2255 	movw	r2, #597	@ 0x255
 801424e:	4914      	ldr	r1, [pc, #80]	@ (80142a0 <pbuf_remove_header+0xa0>)
 8014250:	4812      	ldr	r0, [pc, #72]	@ (801429c <pbuf_remove_header+0x9c>)
 8014252:	f009 fe79 	bl	801df48 <iprintf>
 8014256:	2301      	movs	r3, #1
 8014258:	e017      	b.n	801428a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	685a      	ldr	r2, [r3, #4]
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	441a      	add	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	895a      	ldrh	r2, [r3, #10]
 8014270:	89fb      	ldrh	r3, [r7, #14]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	b29a      	uxth	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	891a      	ldrh	r2, [r3, #8]
 801427e:	89fb      	ldrh	r3, [r7, #14]
 8014280:	1ad3      	subs	r3, r2, r3
 8014282:	b29a      	uxth	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	0801f770 	.word	0x0801f770
 8014298:	0801f8d4 	.word	0x0801f8d4
 801429c:	0801f7d0 	.word	0x0801f7d0
 80142a0:	0801f8e0 	.word	0x0801f8e0

080142a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	807b      	strh	r3, [r7, #2]
 80142b0:	4613      	mov	r3, r2
 80142b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80142b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	da08      	bge.n	80142ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80142bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142c0:	425b      	negs	r3, r3
 80142c2:	4619      	mov	r1, r3
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f7ff ff9b 	bl	8014200 <pbuf_remove_header>
 80142ca:	4603      	mov	r3, r0
 80142cc:	e007      	b.n	80142de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80142ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142d2:	787a      	ldrb	r2, [r7, #1]
 80142d4:	4619      	mov	r1, r3
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f7ff ff1a 	bl	8014110 <pbuf_add_header_impl>
 80142dc:	4603      	mov	r3, r0
  }
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}

080142e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	460b      	mov	r3, r1
 80142f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80142f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142f6:	2201      	movs	r2, #1
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f7ff ffd2 	bl	80142a4 <pbuf_header_impl>
 8014300:	4603      	mov	r3, r0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3708      	adds	r7, #8
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
	...

0801430c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d10b      	bne.n	8014332 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d106      	bne.n	801432e <pbuf_free+0x22>
 8014320:	4b3b      	ldr	r3, [pc, #236]	@ (8014410 <pbuf_free+0x104>)
 8014322:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014326:	493b      	ldr	r1, [pc, #236]	@ (8014414 <pbuf_free+0x108>)
 8014328:	483b      	ldr	r0, [pc, #236]	@ (8014418 <pbuf_free+0x10c>)
 801432a:	f009 fe0d 	bl	801df48 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801432e:	2300      	movs	r3, #0
 8014330:	e069      	b.n	8014406 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014332:	2300      	movs	r3, #0
 8014334:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014336:	e062      	b.n	80143fe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014338:	f008 fd66 	bl	801ce08 <sys_arch_protect>
 801433c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	7b9b      	ldrb	r3, [r3, #14]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d106      	bne.n	8014354 <pbuf_free+0x48>
 8014346:	4b32      	ldr	r3, [pc, #200]	@ (8014410 <pbuf_free+0x104>)
 8014348:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801434c:	4933      	ldr	r1, [pc, #204]	@ (801441c <pbuf_free+0x110>)
 801434e:	4832      	ldr	r0, [pc, #200]	@ (8014418 <pbuf_free+0x10c>)
 8014350:	f009 fdfa 	bl	801df48 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	7b9b      	ldrb	r3, [r3, #14]
 8014358:	3b01      	subs	r3, #1
 801435a:	b2da      	uxtb	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	739a      	strb	r2, [r3, #14]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	7b9b      	ldrb	r3, [r3, #14]
 8014364:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014366:	69b8      	ldr	r0, [r7, #24]
 8014368:	f008 fd5c 	bl	801ce24 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801436c:	7dfb      	ldrb	r3, [r7, #23]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d143      	bne.n	80143fa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	7b1b      	ldrb	r3, [r3, #12]
 801437c:	f003 030f 	and.w	r3, r3, #15
 8014380:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7b5b      	ldrb	r3, [r3, #13]
 8014386:	f003 0302 	and.w	r3, r3, #2
 801438a:	2b00      	cmp	r3, #0
 801438c:	d011      	beq.n	80143b2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d106      	bne.n	80143a8 <pbuf_free+0x9c>
 801439a:	4b1d      	ldr	r3, [pc, #116]	@ (8014410 <pbuf_free+0x104>)
 801439c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80143a0:	491f      	ldr	r1, [pc, #124]	@ (8014420 <pbuf_free+0x114>)
 80143a2:	481d      	ldr	r0, [pc, #116]	@ (8014418 <pbuf_free+0x10c>)
 80143a4:	f009 fdd0 	bl	801df48 <iprintf>
        pc->custom_free_function(p);
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	691b      	ldr	r3, [r3, #16]
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	4798      	blx	r3
 80143b0:	e01d      	b.n	80143ee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80143b2:	7bfb      	ldrb	r3, [r7, #15]
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d104      	bne.n	80143c2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80143b8:	6879      	ldr	r1, [r7, #4]
 80143ba:	200c      	movs	r0, #12
 80143bc:	f7ff f902 	bl	80135c4 <memp_free>
 80143c0:	e015      	b.n	80143ee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80143c2:	7bfb      	ldrb	r3, [r7, #15]
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d104      	bne.n	80143d2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80143c8:	6879      	ldr	r1, [r7, #4]
 80143ca:	200b      	movs	r0, #11
 80143cc:	f7ff f8fa 	bl	80135c4 <memp_free>
 80143d0:	e00d      	b.n	80143ee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80143d2:	7bfb      	ldrb	r3, [r7, #15]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d103      	bne.n	80143e0 <pbuf_free+0xd4>
          mem_free(p);
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7fe fd3f 	bl	8012e5c <mem_free>
 80143de:	e006      	b.n	80143ee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80143e0:	4b0b      	ldr	r3, [pc, #44]	@ (8014410 <pbuf_free+0x104>)
 80143e2:	f240 320f 	movw	r2, #783	@ 0x30f
 80143e6:	490f      	ldr	r1, [pc, #60]	@ (8014424 <pbuf_free+0x118>)
 80143e8:	480b      	ldr	r0, [pc, #44]	@ (8014418 <pbuf_free+0x10c>)
 80143ea:	f009 fdad 	bl	801df48 <iprintf>
        }
      }
      count++;
 80143ee:	7ffb      	ldrb	r3, [r7, #31]
 80143f0:	3301      	adds	r3, #1
 80143f2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	607b      	str	r3, [r7, #4]
 80143f8:	e001      	b.n	80143fe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80143fa:	2300      	movs	r3, #0
 80143fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d199      	bne.n	8014338 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014404:	7ffb      	ldrb	r3, [r7, #31]
}
 8014406:	4618      	mov	r0, r3
 8014408:	3720      	adds	r7, #32
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
 801440e:	bf00      	nop
 8014410:	0801f770 	.word	0x0801f770
 8014414:	0801f8d4 	.word	0x0801f8d4
 8014418:	0801f7d0 	.word	0x0801f7d0
 801441c:	0801f900 	.word	0x0801f900
 8014420:	0801f918 	.word	0x0801f918
 8014424:	0801f93c 	.word	0x0801f93c

08014428 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014430:	2300      	movs	r3, #0
 8014432:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014434:	e005      	b.n	8014442 <pbuf_clen+0x1a>
    ++len;
 8014436:	89fb      	ldrh	r3, [r7, #14]
 8014438:	3301      	adds	r3, #1
 801443a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1f6      	bne.n	8014436 <pbuf_clen+0xe>
  }
  return len;
 8014448:	89fb      	ldrh	r3, [r7, #14]
}
 801444a:	4618      	mov	r0, r3
 801444c:	3714      	adds	r7, #20
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr
	...

08014458 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d016      	beq.n	8014494 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014466:	f008 fccf 	bl	801ce08 <sys_arch_protect>
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	7b9b      	ldrb	r3, [r3, #14]
 8014470:	3301      	adds	r3, #1
 8014472:	b2da      	uxtb	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	739a      	strb	r2, [r3, #14]
 8014478:	68f8      	ldr	r0, [r7, #12]
 801447a:	f008 fcd3 	bl	801ce24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	7b9b      	ldrb	r3, [r3, #14]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d106      	bne.n	8014494 <pbuf_ref+0x3c>
 8014486:	4b05      	ldr	r3, [pc, #20]	@ (801449c <pbuf_ref+0x44>)
 8014488:	f240 3242 	movw	r2, #834	@ 0x342
 801448c:	4904      	ldr	r1, [pc, #16]	@ (80144a0 <pbuf_ref+0x48>)
 801448e:	4805      	ldr	r0, [pc, #20]	@ (80144a4 <pbuf_ref+0x4c>)
 8014490:	f009 fd5a 	bl	801df48 <iprintf>
  }
}
 8014494:	bf00      	nop
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	0801f770 	.word	0x0801f770
 80144a0:	0801f950 	.word	0x0801f950
 80144a4:	0801f7d0 	.word	0x0801f7d0

080144a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d002      	beq.n	80144be <pbuf_cat+0x16>
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d107      	bne.n	80144ce <pbuf_cat+0x26>
 80144be:	4b20      	ldr	r3, [pc, #128]	@ (8014540 <pbuf_cat+0x98>)
 80144c0:	f240 3259 	movw	r2, #857	@ 0x359
 80144c4:	491f      	ldr	r1, [pc, #124]	@ (8014544 <pbuf_cat+0x9c>)
 80144c6:	4820      	ldr	r0, [pc, #128]	@ (8014548 <pbuf_cat+0xa0>)
 80144c8:	f009 fd3e 	bl	801df48 <iprintf>
 80144cc:	e034      	b.n	8014538 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	60fb      	str	r3, [r7, #12]
 80144d2:	e00a      	b.n	80144ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	891a      	ldrh	r2, [r3, #8]
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	891b      	ldrh	r3, [r3, #8]
 80144dc:	4413      	add	r3, r2
 80144de:	b29a      	uxth	r2, r3
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	60fb      	str	r3, [r7, #12]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d1f0      	bne.n	80144d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	891a      	ldrh	r2, [r3, #8]
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	895b      	ldrh	r3, [r3, #10]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d006      	beq.n	801450c <pbuf_cat+0x64>
 80144fe:	4b10      	ldr	r3, [pc, #64]	@ (8014540 <pbuf_cat+0x98>)
 8014500:	f240 3262 	movw	r2, #866	@ 0x362
 8014504:	4911      	ldr	r1, [pc, #68]	@ (801454c <pbuf_cat+0xa4>)
 8014506:	4810      	ldr	r0, [pc, #64]	@ (8014548 <pbuf_cat+0xa0>)
 8014508:	f009 fd1e 	bl	801df48 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d006      	beq.n	8014522 <pbuf_cat+0x7a>
 8014514:	4b0a      	ldr	r3, [pc, #40]	@ (8014540 <pbuf_cat+0x98>)
 8014516:	f240 3263 	movw	r2, #867	@ 0x363
 801451a:	490d      	ldr	r1, [pc, #52]	@ (8014550 <pbuf_cat+0xa8>)
 801451c:	480a      	ldr	r0, [pc, #40]	@ (8014548 <pbuf_cat+0xa0>)
 801451e:	f009 fd13 	bl	801df48 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	891a      	ldrh	r2, [r3, #8]
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	891b      	ldrh	r3, [r3, #8]
 801452a:	4413      	add	r3, r2
 801452c:	b29a      	uxth	r2, r3
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	0801f770 	.word	0x0801f770
 8014544:	0801f964 	.word	0x0801f964
 8014548:	0801f7d0 	.word	0x0801f7d0
 801454c:	0801f99c 	.word	0x0801f99c
 8014550:	0801f9cc 	.word	0x0801f9cc

08014554 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7ff ffa1 	bl	80144a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014566:	6838      	ldr	r0, [r7, #0]
 8014568:	f7ff ff76 	bl	8014458 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801457e:	2300      	movs	r3, #0
 8014580:	617b      	str	r3, [r7, #20]
 8014582:	2300      	movs	r3, #0
 8014584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d008      	beq.n	801459e <pbuf_copy+0x2a>
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d005      	beq.n	801459e <pbuf_copy+0x2a>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	891a      	ldrh	r2, [r3, #8]
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	891b      	ldrh	r3, [r3, #8]
 801459a:	429a      	cmp	r2, r3
 801459c:	d209      	bcs.n	80145b2 <pbuf_copy+0x3e>
 801459e:	4b57      	ldr	r3, [pc, #348]	@ (80146fc <pbuf_copy+0x188>)
 80145a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80145a4:	4956      	ldr	r1, [pc, #344]	@ (8014700 <pbuf_copy+0x18c>)
 80145a6:	4857      	ldr	r0, [pc, #348]	@ (8014704 <pbuf_copy+0x190>)
 80145a8:	f009 fcce 	bl	801df48 <iprintf>
 80145ac:	f06f 030f 	mvn.w	r3, #15
 80145b0:	e09f      	b.n	80146f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	895b      	ldrh	r3, [r3, #10]
 80145b6:	461a      	mov	r2, r3
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	1ad2      	subs	r2, r2, r3
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	895b      	ldrh	r3, [r3, #10]
 80145c0:	4619      	mov	r1, r3
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	1acb      	subs	r3, r1, r3
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d306      	bcc.n	80145d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	895b      	ldrh	r3, [r3, #10]
 80145ce:	461a      	mov	r2, r3
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	1ad3      	subs	r3, r2, r3
 80145d4:	60fb      	str	r3, [r7, #12]
 80145d6:	e005      	b.n	80145e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	895b      	ldrh	r3, [r3, #10]
 80145dc:	461a      	mov	r2, r3
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	1ad3      	subs	r3, r2, r3
 80145e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	685a      	ldr	r2, [r3, #4]
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	18d0      	adds	r0, r2, r3
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	685a      	ldr	r2, [r3, #4]
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	4413      	add	r3, r2
 80145f4:	68fa      	ldr	r2, [r7, #12]
 80145f6:	4619      	mov	r1, r3
 80145f8:	f009 fed1 	bl	801e39e <memcpy>
    offset_to += len;
 80145fc:	697a      	ldr	r2, [r7, #20]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	4413      	add	r3, r2
 8014602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014604:	693a      	ldr	r2, [r7, #16]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	4413      	add	r3, r2
 801460a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	895b      	ldrh	r3, [r3, #10]
 8014610:	461a      	mov	r2, r3
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	4293      	cmp	r3, r2
 8014616:	d906      	bls.n	8014626 <pbuf_copy+0xb2>
 8014618:	4b38      	ldr	r3, [pc, #224]	@ (80146fc <pbuf_copy+0x188>)
 801461a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801461e:	493a      	ldr	r1, [pc, #232]	@ (8014708 <pbuf_copy+0x194>)
 8014620:	4838      	ldr	r0, [pc, #224]	@ (8014704 <pbuf_copy+0x190>)
 8014622:	f009 fc91 	bl	801df48 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	895b      	ldrh	r3, [r3, #10]
 801462a:	461a      	mov	r2, r3
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	4293      	cmp	r3, r2
 8014630:	d906      	bls.n	8014640 <pbuf_copy+0xcc>
 8014632:	4b32      	ldr	r3, [pc, #200]	@ (80146fc <pbuf_copy+0x188>)
 8014634:	f240 32da 	movw	r2, #986	@ 0x3da
 8014638:	4934      	ldr	r1, [pc, #208]	@ (801470c <pbuf_copy+0x198>)
 801463a:	4832      	ldr	r0, [pc, #200]	@ (8014704 <pbuf_copy+0x190>)
 801463c:	f009 fc84 	bl	801df48 <iprintf>
    if (offset_from >= p_from->len) {
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	895b      	ldrh	r3, [r3, #10]
 8014644:	461a      	mov	r2, r3
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	4293      	cmp	r3, r2
 801464a:	d304      	bcc.n	8014656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801464c:	2300      	movs	r3, #0
 801464e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	895b      	ldrh	r3, [r3, #10]
 801465a:	461a      	mov	r2, r3
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	4293      	cmp	r3, r2
 8014660:	d114      	bne.n	801468c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014662:	2300      	movs	r3, #0
 8014664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10c      	bne.n	801468c <pbuf_copy+0x118>
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d009      	beq.n	801468c <pbuf_copy+0x118>
 8014678:	4b20      	ldr	r3, [pc, #128]	@ (80146fc <pbuf_copy+0x188>)
 801467a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801467e:	4924      	ldr	r1, [pc, #144]	@ (8014710 <pbuf_copy+0x19c>)
 8014680:	4820      	ldr	r0, [pc, #128]	@ (8014704 <pbuf_copy+0x190>)
 8014682:	f009 fc61 	bl	801df48 <iprintf>
 8014686:	f06f 030f 	mvn.w	r3, #15
 801468a:	e032      	b.n	80146f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d013      	beq.n	80146ba <pbuf_copy+0x146>
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	895a      	ldrh	r2, [r3, #10]
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	891b      	ldrh	r3, [r3, #8]
 801469a:	429a      	cmp	r2, r3
 801469c:	d10d      	bne.n	80146ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d009      	beq.n	80146ba <pbuf_copy+0x146>
 80146a6:	4b15      	ldr	r3, [pc, #84]	@ (80146fc <pbuf_copy+0x188>)
 80146a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80146ac:	4919      	ldr	r1, [pc, #100]	@ (8014714 <pbuf_copy+0x1a0>)
 80146ae:	4815      	ldr	r0, [pc, #84]	@ (8014704 <pbuf_copy+0x190>)
 80146b0:	f009 fc4a 	bl	801df48 <iprintf>
 80146b4:	f06f 0305 	mvn.w	r3, #5
 80146b8:	e01b      	b.n	80146f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d013      	beq.n	80146e8 <pbuf_copy+0x174>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	895a      	ldrh	r2, [r3, #10]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	891b      	ldrh	r3, [r3, #8]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d10d      	bne.n	80146e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d009      	beq.n	80146e8 <pbuf_copy+0x174>
 80146d4:	4b09      	ldr	r3, [pc, #36]	@ (80146fc <pbuf_copy+0x188>)
 80146d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80146da:	490e      	ldr	r1, [pc, #56]	@ (8014714 <pbuf_copy+0x1a0>)
 80146dc:	4809      	ldr	r0, [pc, #36]	@ (8014704 <pbuf_copy+0x190>)
 80146de:	f009 fc33 	bl	801df48 <iprintf>
 80146e2:	f06f 0305 	mvn.w	r3, #5
 80146e6:	e004      	b.n	80146f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f47f af61 	bne.w	80145b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3718      	adds	r7, #24
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	0801f770 	.word	0x0801f770
 8014700:	0801fa18 	.word	0x0801fa18
 8014704:	0801f7d0 	.word	0x0801f7d0
 8014708:	0801fa48 	.word	0x0801fa48
 801470c:	0801fa60 	.word	0x0801fa60
 8014710:	0801fa7c 	.word	0x0801fa7c
 8014714:	0801fa8c 	.word	0x0801fa8c

08014718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b088      	sub	sp, #32
 801471c:	af00      	add	r7, sp, #0
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	4611      	mov	r1, r2
 8014724:	461a      	mov	r2, r3
 8014726:	460b      	mov	r3, r1
 8014728:	80fb      	strh	r3, [r7, #6]
 801472a:	4613      	mov	r3, r2
 801472c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801472e:	2300      	movs	r3, #0
 8014730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014732:	2300      	movs	r3, #0
 8014734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d108      	bne.n	801474e <pbuf_copy_partial+0x36>
 801473c:	4b2b      	ldr	r3, [pc, #172]	@ (80147ec <pbuf_copy_partial+0xd4>)
 801473e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014742:	492b      	ldr	r1, [pc, #172]	@ (80147f0 <pbuf_copy_partial+0xd8>)
 8014744:	482b      	ldr	r0, [pc, #172]	@ (80147f4 <pbuf_copy_partial+0xdc>)
 8014746:	f009 fbff 	bl	801df48 <iprintf>
 801474a:	2300      	movs	r3, #0
 801474c:	e04a      	b.n	80147e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d108      	bne.n	8014766 <pbuf_copy_partial+0x4e>
 8014754:	4b25      	ldr	r3, [pc, #148]	@ (80147ec <pbuf_copy_partial+0xd4>)
 8014756:	f240 420b 	movw	r2, #1035	@ 0x40b
 801475a:	4927      	ldr	r1, [pc, #156]	@ (80147f8 <pbuf_copy_partial+0xe0>)
 801475c:	4825      	ldr	r0, [pc, #148]	@ (80147f4 <pbuf_copy_partial+0xdc>)
 801475e:	f009 fbf3 	bl	801df48 <iprintf>
 8014762:	2300      	movs	r3, #0
 8014764:	e03e      	b.n	80147e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	61fb      	str	r3, [r7, #28]
 801476a:	e034      	b.n	80147d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801476c:	88bb      	ldrh	r3, [r7, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d00a      	beq.n	8014788 <pbuf_copy_partial+0x70>
 8014772:	69fb      	ldr	r3, [r7, #28]
 8014774:	895b      	ldrh	r3, [r3, #10]
 8014776:	88ba      	ldrh	r2, [r7, #4]
 8014778:	429a      	cmp	r2, r3
 801477a:	d305      	bcc.n	8014788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	895b      	ldrh	r3, [r3, #10]
 8014780:	88ba      	ldrh	r2, [r7, #4]
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	80bb      	strh	r3, [r7, #4]
 8014786:	e023      	b.n	80147d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	895a      	ldrh	r2, [r3, #10]
 801478c:	88bb      	ldrh	r3, [r7, #4]
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014792:	8b3a      	ldrh	r2, [r7, #24]
 8014794:	88fb      	ldrh	r3, [r7, #6]
 8014796:	429a      	cmp	r2, r3
 8014798:	d901      	bls.n	801479e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801479a:	88fb      	ldrh	r3, [r7, #6]
 801479c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801479e:	8b7b      	ldrh	r3, [r7, #26]
 80147a0:	68ba      	ldr	r2, [r7, #8]
 80147a2:	18d0      	adds	r0, r2, r3
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	685a      	ldr	r2, [r3, #4]
 80147a8:	88bb      	ldrh	r3, [r7, #4]
 80147aa:	4413      	add	r3, r2
 80147ac:	8b3a      	ldrh	r2, [r7, #24]
 80147ae:	4619      	mov	r1, r3
 80147b0:	f009 fdf5 	bl	801e39e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80147b4:	8afa      	ldrh	r2, [r7, #22]
 80147b6:	8b3b      	ldrh	r3, [r7, #24]
 80147b8:	4413      	add	r3, r2
 80147ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80147bc:	8b7a      	ldrh	r2, [r7, #26]
 80147be:	8b3b      	ldrh	r3, [r7, #24]
 80147c0:	4413      	add	r3, r2
 80147c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80147c4:	88fa      	ldrh	r2, [r7, #6]
 80147c6:	8b3b      	ldrh	r3, [r7, #24]
 80147c8:	1ad3      	subs	r3, r2, r3
 80147ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80147cc:	2300      	movs	r3, #0
 80147ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	61fb      	str	r3, [r7, #28]
 80147d6:	88fb      	ldrh	r3, [r7, #6]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <pbuf_copy_partial+0xca>
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d1c4      	bne.n	801476c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80147e2:	8afb      	ldrh	r3, [r7, #22]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3720      	adds	r7, #32
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	0801f770 	.word	0x0801f770
 80147f0:	0801fab8 	.word	0x0801fab8
 80147f4:	0801f7d0 	.word	0x0801f7d0
 80147f8:	0801fad8 	.word	0x0801fad8

080147fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	4603      	mov	r3, r0
 8014804:	603a      	str	r2, [r7, #0]
 8014806:	71fb      	strb	r3, [r7, #7]
 8014808:	460b      	mov	r3, r1
 801480a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	8919      	ldrh	r1, [r3, #8]
 8014810:	88ba      	ldrh	r2, [r7, #4]
 8014812:	79fb      	ldrb	r3, [r7, #7]
 8014814:	4618      	mov	r0, r3
 8014816:	f7ff fa95 	bl	8013d44 <pbuf_alloc>
 801481a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d101      	bne.n	8014826 <pbuf_clone+0x2a>
    return NULL;
 8014822:	2300      	movs	r3, #0
 8014824:	e011      	b.n	801484a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014826:	6839      	ldr	r1, [r7, #0]
 8014828:	68f8      	ldr	r0, [r7, #12]
 801482a:	f7ff fea3 	bl	8014574 <pbuf_copy>
 801482e:	4603      	mov	r3, r0
 8014830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d006      	beq.n	8014848 <pbuf_clone+0x4c>
 801483a:	4b06      	ldr	r3, [pc, #24]	@ (8014854 <pbuf_clone+0x58>)
 801483c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014840:	4905      	ldr	r1, [pc, #20]	@ (8014858 <pbuf_clone+0x5c>)
 8014842:	4806      	ldr	r0, [pc, #24]	@ (801485c <pbuf_clone+0x60>)
 8014844:	f009 fb80 	bl	801df48 <iprintf>
  return q;
 8014848:	68fb      	ldr	r3, [r7, #12]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	0801f770 	.word	0x0801f770
 8014858:	0801fbe4 	.word	0x0801fbe4
 801485c:	0801f7d0 	.word	0x0801f7d0

08014860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014864:	f009 fa70 	bl	801dd48 <rand>
 8014868:	4603      	mov	r3, r0
 801486a:	b29b      	uxth	r3, r3
 801486c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014870:	b29b      	uxth	r3, r3
 8014872:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014876:	b29a      	uxth	r2, r3
 8014878:	4b01      	ldr	r3, [pc, #4]	@ (8014880 <tcp_init+0x20>)
 801487a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801487c:	bf00      	nop
 801487e:	bd80      	pop	{r7, pc}
 8014880:	20000024 	.word	0x20000024

08014884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	7d1b      	ldrb	r3, [r3, #20]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d105      	bne.n	80148a0 <tcp_free+0x1c>
 8014894:	4b06      	ldr	r3, [pc, #24]	@ (80148b0 <tcp_free+0x2c>)
 8014896:	22d4      	movs	r2, #212	@ 0xd4
 8014898:	4906      	ldr	r1, [pc, #24]	@ (80148b4 <tcp_free+0x30>)
 801489a:	4807      	ldr	r0, [pc, #28]	@ (80148b8 <tcp_free+0x34>)
 801489c:	f009 fb54 	bl	801df48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	2001      	movs	r0, #1
 80148a4:	f7fe fe8e 	bl	80135c4 <memp_free>
}
 80148a8:	bf00      	nop
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	0801fc70 	.word	0x0801fc70
 80148b4:	0801fca0 	.word	0x0801fca0
 80148b8:	0801fcb4 	.word	0x0801fcb4

080148bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	7d1b      	ldrb	r3, [r3, #20]
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d105      	bne.n	80148d8 <tcp_free_listen+0x1c>
 80148cc:	4b06      	ldr	r3, [pc, #24]	@ (80148e8 <tcp_free_listen+0x2c>)
 80148ce:	22df      	movs	r2, #223	@ 0xdf
 80148d0:	4906      	ldr	r1, [pc, #24]	@ (80148ec <tcp_free_listen+0x30>)
 80148d2:	4807      	ldr	r0, [pc, #28]	@ (80148f0 <tcp_free_listen+0x34>)
 80148d4:	f009 fb38 	bl	801df48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80148d8:	6879      	ldr	r1, [r7, #4]
 80148da:	2002      	movs	r0, #2
 80148dc:	f7fe fe72 	bl	80135c4 <memp_free>
}
 80148e0:	bf00      	nop
 80148e2:	3708      	adds	r7, #8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	0801fc70 	.word	0x0801fc70
 80148ec:	0801fcdc 	.word	0x0801fcdc
 80148f0:	0801fcb4 	.word	0x0801fcb4

080148f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80148f8:	f000 fea4 	bl	8015644 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80148fc:	4b07      	ldr	r3, [pc, #28]	@ (801491c <tcp_tmr+0x28>)
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	3301      	adds	r3, #1
 8014902:	b2da      	uxtb	r2, r3
 8014904:	4b05      	ldr	r3, [pc, #20]	@ (801491c <tcp_tmr+0x28>)
 8014906:	701a      	strb	r2, [r3, #0]
 8014908:	4b04      	ldr	r3, [pc, #16]	@ (801491c <tcp_tmr+0x28>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	f003 0301 	and.w	r3, r3, #1
 8014910:	2b00      	cmp	r3, #0
 8014912:	d001      	beq.n	8014918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014914:	f000 fb54 	bl	8014fc0 <tcp_slowtmr>
  }
}
 8014918:	bf00      	nop
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20027645 	.word	0x20027645

08014920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d105      	bne.n	801493c <tcp_remove_listener+0x1c>
 8014930:	4b0d      	ldr	r3, [pc, #52]	@ (8014968 <tcp_remove_listener+0x48>)
 8014932:	22ff      	movs	r2, #255	@ 0xff
 8014934:	490d      	ldr	r1, [pc, #52]	@ (801496c <tcp_remove_listener+0x4c>)
 8014936:	480e      	ldr	r0, [pc, #56]	@ (8014970 <tcp_remove_listener+0x50>)
 8014938:	f009 fb06 	bl	801df48 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	60fb      	str	r3, [r7, #12]
 8014940:	e00a      	b.n	8014958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014946:	683a      	ldr	r2, [r7, #0]
 8014948:	429a      	cmp	r2, r3
 801494a:	d102      	bne.n	8014952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2200      	movs	r2, #0
 8014950:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	60fb      	str	r3, [r7, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1f1      	bne.n	8014942 <tcp_remove_listener+0x22>
    }
  }
}
 801495e:	bf00      	nop
 8014960:	bf00      	nop
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	0801fc70 	.word	0x0801fc70
 801496c:	0801fcf8 	.word	0x0801fcf8
 8014970:	0801fcb4 	.word	0x0801fcb4

08014974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d106      	bne.n	8014990 <tcp_listen_closed+0x1c>
 8014982:	4b14      	ldr	r3, [pc, #80]	@ (80149d4 <tcp_listen_closed+0x60>)
 8014984:	f240 1211 	movw	r2, #273	@ 0x111
 8014988:	4913      	ldr	r1, [pc, #76]	@ (80149d8 <tcp_listen_closed+0x64>)
 801498a:	4814      	ldr	r0, [pc, #80]	@ (80149dc <tcp_listen_closed+0x68>)
 801498c:	f009 fadc 	bl	801df48 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	7d1b      	ldrb	r3, [r3, #20]
 8014994:	2b01      	cmp	r3, #1
 8014996:	d006      	beq.n	80149a6 <tcp_listen_closed+0x32>
 8014998:	4b0e      	ldr	r3, [pc, #56]	@ (80149d4 <tcp_listen_closed+0x60>)
 801499a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801499e:	4910      	ldr	r1, [pc, #64]	@ (80149e0 <tcp_listen_closed+0x6c>)
 80149a0:	480e      	ldr	r0, [pc, #56]	@ (80149dc <tcp_listen_closed+0x68>)
 80149a2:	f009 fad1 	bl	801df48 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80149a6:	2301      	movs	r3, #1
 80149a8:	60fb      	str	r3, [r7, #12]
 80149aa:	e00b      	b.n	80149c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80149ac:	4a0d      	ldr	r2, [pc, #52]	@ (80149e4 <tcp_listen_closed+0x70>)
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6879      	ldr	r1, [r7, #4]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7ff ffb1 	bl	8014920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	3301      	adds	r3, #1
 80149c2:	60fb      	str	r3, [r7, #12]
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b03      	cmp	r3, #3
 80149c8:	d9f0      	bls.n	80149ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80149ca:	bf00      	nop
 80149cc:	bf00      	nop
 80149ce:	3710      	adds	r7, #16
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	0801fc70 	.word	0x0801fc70
 80149d8:	0801fd20 	.word	0x0801fd20
 80149dc:	0801fcb4 	.word	0x0801fcb4
 80149e0:	0801fd2c 	.word	0x0801fd2c
 80149e4:	08022298 	.word	0x08022298

080149e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80149e8:	b5b0      	push	{r4, r5, r7, lr}
 80149ea:	b088      	sub	sp, #32
 80149ec:	af04      	add	r7, sp, #16
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	460b      	mov	r3, r1
 80149f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d106      	bne.n	8014a08 <tcp_close_shutdown+0x20>
 80149fa:	4b63      	ldr	r3, [pc, #396]	@ (8014b88 <tcp_close_shutdown+0x1a0>)
 80149fc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014a00:	4962      	ldr	r1, [pc, #392]	@ (8014b8c <tcp_close_shutdown+0x1a4>)
 8014a02:	4863      	ldr	r0, [pc, #396]	@ (8014b90 <tcp_close_shutdown+0x1a8>)
 8014a04:	f009 faa0 	bl	801df48 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014a08:	78fb      	ldrb	r3, [r7, #3]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d066      	beq.n	8014adc <tcp_close_shutdown+0xf4>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	7d1b      	ldrb	r3, [r3, #20]
 8014a12:	2b04      	cmp	r3, #4
 8014a14:	d003      	beq.n	8014a1e <tcp_close_shutdown+0x36>
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	7d1b      	ldrb	r3, [r3, #20]
 8014a1a:	2b07      	cmp	r3, #7
 8014a1c:	d15e      	bne.n	8014adc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d104      	bne.n	8014a30 <tcp_close_shutdown+0x48>
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014a2e:	d055      	beq.n	8014adc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	8b5b      	ldrh	r3, [r3, #26]
 8014a34:	f003 0310 	and.w	r3, r3, #16
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d106      	bne.n	8014a4a <tcp_close_shutdown+0x62>
 8014a3c:	4b52      	ldr	r3, [pc, #328]	@ (8014b88 <tcp_close_shutdown+0x1a0>)
 8014a3e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014a42:	4954      	ldr	r1, [pc, #336]	@ (8014b94 <tcp_close_shutdown+0x1ac>)
 8014a44:	4852      	ldr	r0, [pc, #328]	@ (8014b90 <tcp_close_shutdown+0x1a8>)
 8014a46:	f009 fa7f 	bl	801df48 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014a52:	687d      	ldr	r5, [r7, #4]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	3304      	adds	r3, #4
 8014a58:	687a      	ldr	r2, [r7, #4]
 8014a5a:	8ad2      	ldrh	r2, [r2, #22]
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	8b09      	ldrh	r1, [r1, #24]
 8014a60:	9102      	str	r1, [sp, #8]
 8014a62:	9201      	str	r2, [sp, #4]
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	462b      	mov	r3, r5
 8014a68:	4622      	mov	r2, r4
 8014a6a:	4601      	mov	r1, r0
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f004 fe8d 	bl	801978c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f001 f8c8 	bl	8015c08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014a78:	4b47      	ldr	r3, [pc, #284]	@ (8014b98 <tcp_close_shutdown+0x1b0>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d105      	bne.n	8014a8e <tcp_close_shutdown+0xa6>
 8014a82:	4b45      	ldr	r3, [pc, #276]	@ (8014b98 <tcp_close_shutdown+0x1b0>)
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	4a43      	ldr	r2, [pc, #268]	@ (8014b98 <tcp_close_shutdown+0x1b0>)
 8014a8a:	6013      	str	r3, [r2, #0]
 8014a8c:	e013      	b.n	8014ab6 <tcp_close_shutdown+0xce>
 8014a8e:	4b42      	ldr	r3, [pc, #264]	@ (8014b98 <tcp_close_shutdown+0x1b0>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	60fb      	str	r3, [r7, #12]
 8014a94:	e00c      	b.n	8014ab0 <tcp_close_shutdown+0xc8>
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d104      	bne.n	8014aaa <tcp_close_shutdown+0xc2>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	68da      	ldr	r2, [r3, #12]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	60da      	str	r2, [r3, #12]
 8014aa8:	e005      	b.n	8014ab6 <tcp_close_shutdown+0xce>
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	60fb      	str	r3, [r7, #12]
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d1ef      	bne.n	8014a96 <tcp_close_shutdown+0xae>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	60da      	str	r2, [r3, #12]
 8014abc:	4b37      	ldr	r3, [pc, #220]	@ (8014b9c <tcp_close_shutdown+0x1b4>)
 8014abe:	2201      	movs	r2, #1
 8014ac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014ac2:	4b37      	ldr	r3, [pc, #220]	@ (8014ba0 <tcp_close_shutdown+0x1b8>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d102      	bne.n	8014ad2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014acc:	f003 fd5c 	bl	8018588 <tcp_trigger_input_pcb_close>
 8014ad0:	e002      	b.n	8014ad8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7ff fed6 	bl	8014884 <tcp_free>
      }
      return ERR_OK;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	e050      	b.n	8014b7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	7d1b      	ldrb	r3, [r3, #20]
 8014ae0:	2b02      	cmp	r3, #2
 8014ae2:	d03b      	beq.n	8014b5c <tcp_close_shutdown+0x174>
 8014ae4:	2b02      	cmp	r3, #2
 8014ae6:	dc44      	bgt.n	8014b72 <tcp_close_shutdown+0x18a>
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <tcp_close_shutdown+0x10a>
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d02a      	beq.n	8014b46 <tcp_close_shutdown+0x15e>
 8014af0:	e03f      	b.n	8014b72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	8adb      	ldrh	r3, [r3, #22]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d021      	beq.n	8014b3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014afa:	4b2a      	ldr	r3, [pc, #168]	@ (8014ba4 <tcp_close_shutdown+0x1bc>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d105      	bne.n	8014b10 <tcp_close_shutdown+0x128>
 8014b04:	4b27      	ldr	r3, [pc, #156]	@ (8014ba4 <tcp_close_shutdown+0x1bc>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	4a26      	ldr	r2, [pc, #152]	@ (8014ba4 <tcp_close_shutdown+0x1bc>)
 8014b0c:	6013      	str	r3, [r2, #0]
 8014b0e:	e013      	b.n	8014b38 <tcp_close_shutdown+0x150>
 8014b10:	4b24      	ldr	r3, [pc, #144]	@ (8014ba4 <tcp_close_shutdown+0x1bc>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	60bb      	str	r3, [r7, #8]
 8014b16:	e00c      	b.n	8014b32 <tcp_close_shutdown+0x14a>
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d104      	bne.n	8014b2c <tcp_close_shutdown+0x144>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	68da      	ldr	r2, [r3, #12]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	60da      	str	r2, [r3, #12]
 8014b2a:	e005      	b.n	8014b38 <tcp_close_shutdown+0x150>
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	60bb      	str	r3, [r7, #8]
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1ef      	bne.n	8014b18 <tcp_close_shutdown+0x130>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f7ff fea0 	bl	8014884 <tcp_free>
      break;
 8014b44:	e01a      	b.n	8014b7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f7ff ff14 	bl	8014974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014b4c:	6879      	ldr	r1, [r7, #4]
 8014b4e:	4816      	ldr	r0, [pc, #88]	@ (8014ba8 <tcp_close_shutdown+0x1c0>)
 8014b50:	f001 f8aa 	bl	8015ca8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f7ff feb1 	bl	80148bc <tcp_free_listen>
      break;
 8014b5a:	e00f      	b.n	8014b7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014b5c:	6879      	ldr	r1, [r7, #4]
 8014b5e:	480e      	ldr	r0, [pc, #56]	@ (8014b98 <tcp_close_shutdown+0x1b0>)
 8014b60:	f001 f8a2 	bl	8015ca8 <tcp_pcb_remove>
 8014b64:	4b0d      	ldr	r3, [pc, #52]	@ (8014b9c <tcp_close_shutdown+0x1b4>)
 8014b66:	2201      	movs	r2, #1
 8014b68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7ff fe8a 	bl	8014884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014b70:	e004      	b.n	8014b7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 f81a 	bl	8014bac <tcp_close_shutdown_fin>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	e000      	b.n	8014b7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014b7c:	2300      	movs	r3, #0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3710      	adds	r7, #16
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bdb0      	pop	{r4, r5, r7, pc}
 8014b86:	bf00      	nop
 8014b88:	0801fc70 	.word	0x0801fc70
 8014b8c:	0801fd44 	.word	0x0801fd44
 8014b90:	0801fcb4 	.word	0x0801fcb4
 8014b94:	0801fd64 	.word	0x0801fd64
 8014b98:	2002763c 	.word	0x2002763c
 8014b9c:	20027644 	.word	0x20027644
 8014ba0:	2002767c 	.word	0x2002767c
 8014ba4:	20027634 	.word	0x20027634
 8014ba8:	20027638 	.word	0x20027638

08014bac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <tcp_close_shutdown_fin+0x1c>
 8014bba:	4b2e      	ldr	r3, [pc, #184]	@ (8014c74 <tcp_close_shutdown_fin+0xc8>)
 8014bbc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014bc0:	492d      	ldr	r1, [pc, #180]	@ (8014c78 <tcp_close_shutdown_fin+0xcc>)
 8014bc2:	482e      	ldr	r0, [pc, #184]	@ (8014c7c <tcp_close_shutdown_fin+0xd0>)
 8014bc4:	f009 f9c0 	bl	801df48 <iprintf>

  switch (pcb->state) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	7d1b      	ldrb	r3, [r3, #20]
 8014bcc:	2b07      	cmp	r3, #7
 8014bce:	d020      	beq.n	8014c12 <tcp_close_shutdown_fin+0x66>
 8014bd0:	2b07      	cmp	r3, #7
 8014bd2:	dc2b      	bgt.n	8014c2c <tcp_close_shutdown_fin+0x80>
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d002      	beq.n	8014bde <tcp_close_shutdown_fin+0x32>
 8014bd8:	2b04      	cmp	r3, #4
 8014bda:	d00d      	beq.n	8014bf8 <tcp_close_shutdown_fin+0x4c>
 8014bdc:	e026      	b.n	8014c2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f003 fee2 	bl	80189a8 <tcp_send_fin>
 8014be4:	4603      	mov	r3, r0
 8014be6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d11f      	bne.n	8014c30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2205      	movs	r2, #5
 8014bf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014bf6:	e01b      	b.n	8014c30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f003 fed5 	bl	80189a8 <tcp_send_fin>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d114      	bne.n	8014c34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2205      	movs	r2, #5
 8014c0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014c10:	e010      	b.n	8014c34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f003 fec8 	bl	80189a8 <tcp_send_fin>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d109      	bne.n	8014c38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2209      	movs	r2, #9
 8014c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014c2a:	e005      	b.n	8014c38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	e01c      	b.n	8014c6a <tcp_close_shutdown_fin+0xbe>
      break;
 8014c30:	bf00      	nop
 8014c32:	e002      	b.n	8014c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8014c34:	bf00      	nop
 8014c36:	e000      	b.n	8014c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8014c38:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d103      	bne.n	8014c4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f003 ffee 	bl	8018c24 <tcp_output>
 8014c48:	e00d      	b.n	8014c66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c52:	d108      	bne.n	8014c66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	8b5b      	ldrh	r3, [r3, #26]
 8014c58:	f043 0308 	orr.w	r3, r3, #8
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014c62:	2300      	movs	r3, #0
 8014c64:	e001      	b.n	8014c6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	0801fc70 	.word	0x0801fc70
 8014c78:	0801fd20 	.word	0x0801fd20
 8014c7c:	0801fcb4 	.word	0x0801fcb4

08014c80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d109      	bne.n	8014ca2 <tcp_close+0x22>
 8014c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8014ccc <tcp_close+0x4c>)
 8014c90:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014c94:	490e      	ldr	r1, [pc, #56]	@ (8014cd0 <tcp_close+0x50>)
 8014c96:	480f      	ldr	r0, [pc, #60]	@ (8014cd4 <tcp_close+0x54>)
 8014c98:	f009 f956 	bl	801df48 <iprintf>
 8014c9c:	f06f 030f 	mvn.w	r3, #15
 8014ca0:	e00f      	b.n	8014cc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	7d1b      	ldrb	r3, [r3, #20]
 8014ca6:	2b01      	cmp	r3, #1
 8014ca8:	d006      	beq.n	8014cb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	8b5b      	ldrh	r3, [r3, #26]
 8014cae:	f043 0310 	orr.w	r3, r3, #16
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014cb8:	2101      	movs	r1, #1
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f7ff fe94 	bl	80149e8 <tcp_close_shutdown>
 8014cc0:	4603      	mov	r3, r0
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3708      	adds	r7, #8
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	0801fc70 	.word	0x0801fc70
 8014cd0:	0801fd80 	.word	0x0801fd80
 8014cd4:	0801fcb4 	.word	0x0801fcb4

08014cd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b08e      	sub	sp, #56	@ 0x38
 8014cdc:	af04      	add	r7, sp, #16
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d107      	bne.n	8014cf8 <tcp_abandon+0x20>
 8014ce8:	4b52      	ldr	r3, [pc, #328]	@ (8014e34 <tcp_abandon+0x15c>)
 8014cea:	f240 223d 	movw	r2, #573	@ 0x23d
 8014cee:	4952      	ldr	r1, [pc, #328]	@ (8014e38 <tcp_abandon+0x160>)
 8014cf0:	4852      	ldr	r0, [pc, #328]	@ (8014e3c <tcp_abandon+0x164>)
 8014cf2:	f009 f929 	bl	801df48 <iprintf>
 8014cf6:	e099      	b.n	8014e2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	7d1b      	ldrb	r3, [r3, #20]
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d106      	bne.n	8014d0e <tcp_abandon+0x36>
 8014d00:	4b4c      	ldr	r3, [pc, #304]	@ (8014e34 <tcp_abandon+0x15c>)
 8014d02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014d06:	494e      	ldr	r1, [pc, #312]	@ (8014e40 <tcp_abandon+0x168>)
 8014d08:	484c      	ldr	r0, [pc, #304]	@ (8014e3c <tcp_abandon+0x164>)
 8014d0a:	f009 f91d 	bl	801df48 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	7d1b      	ldrb	r3, [r3, #20]
 8014d12:	2b0a      	cmp	r3, #10
 8014d14:	d107      	bne.n	8014d26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014d16:	6879      	ldr	r1, [r7, #4]
 8014d18:	484a      	ldr	r0, [pc, #296]	@ (8014e44 <tcp_abandon+0x16c>)
 8014d1a:	f000 ffc5 	bl	8015ca8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7ff fdb0 	bl	8014884 <tcp_free>
 8014d24:	e082      	b.n	8014e2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014d26:	2300      	movs	r3, #0
 8014d28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014d40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	691b      	ldr	r3, [r3, #16]
 8014d46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	7d1b      	ldrb	r3, [r3, #20]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d126      	bne.n	8014d9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	8adb      	ldrh	r3, [r3, #22]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d02e      	beq.n	8014db6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d58:	4b3b      	ldr	r3, [pc, #236]	@ (8014e48 <tcp_abandon+0x170>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d105      	bne.n	8014d6e <tcp_abandon+0x96>
 8014d62:	4b39      	ldr	r3, [pc, #228]	@ (8014e48 <tcp_abandon+0x170>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	4a37      	ldr	r2, [pc, #220]	@ (8014e48 <tcp_abandon+0x170>)
 8014d6a:	6013      	str	r3, [r2, #0]
 8014d6c:	e013      	b.n	8014d96 <tcp_abandon+0xbe>
 8014d6e:	4b36      	ldr	r3, [pc, #216]	@ (8014e48 <tcp_abandon+0x170>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	61fb      	str	r3, [r7, #28]
 8014d74:	e00c      	b.n	8014d90 <tcp_abandon+0xb8>
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d104      	bne.n	8014d8a <tcp_abandon+0xb2>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68da      	ldr	r2, [r3, #12]
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	60da      	str	r2, [r3, #12]
 8014d88:	e005      	b.n	8014d96 <tcp_abandon+0xbe>
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	61fb      	str	r3, [r7, #28]
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d1ef      	bne.n	8014d76 <tcp_abandon+0x9e>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	60da      	str	r2, [r3, #12]
 8014d9c:	e00b      	b.n	8014db6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	8adb      	ldrh	r3, [r3, #22]
 8014da6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014da8:	6879      	ldr	r1, [r7, #4]
 8014daa:	4828      	ldr	r0, [pc, #160]	@ (8014e4c <tcp_abandon+0x174>)
 8014dac:	f000 ff7c 	bl	8015ca8 <tcp_pcb_remove>
 8014db0:	4b27      	ldr	r3, [pc, #156]	@ (8014e50 <tcp_abandon+0x178>)
 8014db2:	2201      	movs	r2, #1
 8014db4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d004      	beq.n	8014dc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f000 fd1e 	bl	8015804 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d004      	beq.n	8014dda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f000 fd15 	bl	8015804 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d004      	beq.n	8014dec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014de6:	4618      	mov	r0, r3
 8014de8:	f000 fd0c 	bl	8015804 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00e      	beq.n	8014e10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014df2:	6879      	ldr	r1, [r7, #4]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	3304      	adds	r3, #4
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	8b12      	ldrh	r2, [r2, #24]
 8014dfc:	9202      	str	r2, [sp, #8]
 8014dfe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014e00:	9201      	str	r2, [sp, #4]
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	460b      	mov	r3, r1
 8014e06:	697a      	ldr	r2, [r7, #20]
 8014e08:	69b9      	ldr	r1, [r7, #24]
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f004 fcbe 	bl	801978c <tcp_rst>
    }
    last_state = pcb->state;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	7d1b      	ldrb	r3, [r3, #20]
 8014e14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f7ff fd34 	bl	8014884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d004      	beq.n	8014e2c <tcp_abandon+0x154>
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	f06f 010c 	mvn.w	r1, #12
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	4798      	blx	r3
  }
}
 8014e2c:	3728      	adds	r7, #40	@ 0x28
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	0801fc70 	.word	0x0801fc70
 8014e38:	0801fdb4 	.word	0x0801fdb4
 8014e3c:	0801fcb4 	.word	0x0801fcb4
 8014e40:	0801fdd0 	.word	0x0801fdd0
 8014e44:	20027640 	.word	0x20027640
 8014e48:	20027634 	.word	0x20027634
 8014e4c:	2002763c 	.word	0x2002763c
 8014e50:	20027644 	.word	0x20027644

08014e54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014e5c:	2101      	movs	r1, #1
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7ff ff3a 	bl	8014cd8 <tcp_abandon>
}
 8014e64:	bf00      	nop
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d106      	bne.n	8014e88 <tcp_update_rcv_ann_wnd+0x1c>
 8014e7a:	4b25      	ldr	r3, [pc, #148]	@ (8014f10 <tcp_update_rcv_ann_wnd+0xa4>)
 8014e7c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014e80:	4924      	ldr	r1, [pc, #144]	@ (8014f14 <tcp_update_rcv_ann_wnd+0xa8>)
 8014e82:	4825      	ldr	r0, [pc, #148]	@ (8014f18 <tcp_update_rcv_ann_wnd+0xac>)
 8014e84:	f009 f860 	bl	801df48 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014e90:	4413      	add	r3, r2
 8014e92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014e9c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014ea0:	bf28      	it	cs
 8014ea2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014ea6:	b292      	uxth	r2, r2
 8014ea8:	4413      	add	r3, r2
 8014eaa:	68fa      	ldr	r2, [r7, #12]
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	db08      	blt.n	8014ec4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ebe:	68fa      	ldr	r2, [r7, #12]
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	e020      	b.n	8014f06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ecc:	1ad3      	subs	r3, r2, r3
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	dd03      	ble.n	8014eda <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014ed8:	e014      	b.n	8014f04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014eec:	d306      	bcc.n	8014efc <tcp_update_rcv_ann_wnd+0x90>
 8014eee:	4b08      	ldr	r3, [pc, #32]	@ (8014f10 <tcp_update_rcv_ann_wnd+0xa4>)
 8014ef0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014ef4:	4909      	ldr	r1, [pc, #36]	@ (8014f1c <tcp_update_rcv_ann_wnd+0xb0>)
 8014ef6:	4808      	ldr	r0, [pc, #32]	@ (8014f18 <tcp_update_rcv_ann_wnd+0xac>)
 8014ef8:	f009 f826 	bl	801df48 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	b29a      	uxth	r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014f04:	2300      	movs	r3, #0
  }
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	0801fc70 	.word	0x0801fc70
 8014f14:	0801fecc 	.word	0x0801fecc
 8014f18:	0801fcb4 	.word	0x0801fcb4
 8014f1c:	0801fef0 	.word	0x0801fef0

08014f20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b084      	sub	sp, #16
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	460b      	mov	r3, r1
 8014f2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d107      	bne.n	8014f42 <tcp_recved+0x22>
 8014f32:	4b1f      	ldr	r3, [pc, #124]	@ (8014fb0 <tcp_recved+0x90>)
 8014f34:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014f38:	491e      	ldr	r1, [pc, #120]	@ (8014fb4 <tcp_recved+0x94>)
 8014f3a:	481f      	ldr	r0, [pc, #124]	@ (8014fb8 <tcp_recved+0x98>)
 8014f3c:	f009 f804 	bl	801df48 <iprintf>
 8014f40:	e032      	b.n	8014fa8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	7d1b      	ldrb	r3, [r3, #20]
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d106      	bne.n	8014f58 <tcp_recved+0x38>
 8014f4a:	4b19      	ldr	r3, [pc, #100]	@ (8014fb0 <tcp_recved+0x90>)
 8014f4c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014f50:	491a      	ldr	r1, [pc, #104]	@ (8014fbc <tcp_recved+0x9c>)
 8014f52:	4819      	ldr	r0, [pc, #100]	@ (8014fb8 <tcp_recved+0x98>)
 8014f54:	f008 fff8 	bl	801df48 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014f5c:	887b      	ldrh	r3, [r7, #2]
 8014f5e:	4413      	add	r3, r2
 8014f60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014f62:	89fb      	ldrh	r3, [r7, #14]
 8014f64:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014f68:	d804      	bhi.n	8014f74 <tcp_recved+0x54>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f6e:	89fa      	ldrh	r2, [r7, #14]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d204      	bcs.n	8014f7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014f7c:	e002      	b.n	8014f84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	89fa      	ldrh	r2, [r7, #14]
 8014f82:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7ff ff71 	bl	8014e6c <tcp_update_rcv_ann_wnd>
 8014f8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014f92:	d309      	bcc.n	8014fa8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	8b5b      	ldrh	r3, [r3, #26]
 8014f98:	f043 0302 	orr.w	r3, r3, #2
 8014f9c:	b29a      	uxth	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f003 fe3e 	bl	8018c24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	0801fc70 	.word	0x0801fc70
 8014fb4:	0801ff0c 	.word	0x0801ff0c
 8014fb8:	0801fcb4 	.word	0x0801fcb4
 8014fbc:	0801ff24 	.word	0x0801ff24

08014fc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014fc0:	b5b0      	push	{r4, r5, r7, lr}
 8014fc2:	b090      	sub	sp, #64	@ 0x40
 8014fc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014fcc:	4b95      	ldr	r3, [pc, #596]	@ (8015224 <tcp_slowtmr+0x264>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	4a94      	ldr	r2, [pc, #592]	@ (8015224 <tcp_slowtmr+0x264>)
 8014fd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014fd6:	4b94      	ldr	r3, [pc, #592]	@ (8015228 <tcp_slowtmr+0x268>)
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	b2da      	uxtb	r2, r3
 8014fde:	4b92      	ldr	r3, [pc, #584]	@ (8015228 <tcp_slowtmr+0x268>)
 8014fe0:	701a      	strb	r2, [r3, #0]
 8014fe2:	e000      	b.n	8014fe6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014fe4:	bf00      	nop
  prev = NULL;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014fea:	4b90      	ldr	r3, [pc, #576]	@ (801522c <tcp_slowtmr+0x26c>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014ff0:	e29d      	b.n	801552e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ff4:	7d1b      	ldrb	r3, [r3, #20]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d106      	bne.n	8015008 <tcp_slowtmr+0x48>
 8014ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8015230 <tcp_slowtmr+0x270>)
 8014ffc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015000:	498c      	ldr	r1, [pc, #560]	@ (8015234 <tcp_slowtmr+0x274>)
 8015002:	488d      	ldr	r0, [pc, #564]	@ (8015238 <tcp_slowtmr+0x278>)
 8015004:	f008 ffa0 	bl	801df48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500a:	7d1b      	ldrb	r3, [r3, #20]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d106      	bne.n	801501e <tcp_slowtmr+0x5e>
 8015010:	4b87      	ldr	r3, [pc, #540]	@ (8015230 <tcp_slowtmr+0x270>)
 8015012:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015016:	4989      	ldr	r1, [pc, #548]	@ (801523c <tcp_slowtmr+0x27c>)
 8015018:	4887      	ldr	r0, [pc, #540]	@ (8015238 <tcp_slowtmr+0x278>)
 801501a:	f008 ff95 	bl	801df48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801501e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015020:	7d1b      	ldrb	r3, [r3, #20]
 8015022:	2b0a      	cmp	r3, #10
 8015024:	d106      	bne.n	8015034 <tcp_slowtmr+0x74>
 8015026:	4b82      	ldr	r3, [pc, #520]	@ (8015230 <tcp_slowtmr+0x270>)
 8015028:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801502c:	4984      	ldr	r1, [pc, #528]	@ (8015240 <tcp_slowtmr+0x280>)
 801502e:	4882      	ldr	r0, [pc, #520]	@ (8015238 <tcp_slowtmr+0x278>)
 8015030:	f008 ff8a 	bl	801df48 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015036:	7f9a      	ldrb	r2, [r3, #30]
 8015038:	4b7b      	ldr	r3, [pc, #492]	@ (8015228 <tcp_slowtmr+0x268>)
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	429a      	cmp	r2, r3
 801503e:	d105      	bne.n	801504c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015042:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801504a:	e270      	b.n	801552e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801504c:	4b76      	ldr	r3, [pc, #472]	@ (8015228 <tcp_slowtmr+0x268>)
 801504e:	781a      	ldrb	r2, [r3, #0]
 8015050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015052:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015062:	7d1b      	ldrb	r3, [r3, #20]
 8015064:	2b02      	cmp	r3, #2
 8015066:	d10a      	bne.n	801507e <tcp_slowtmr+0xbe>
 8015068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801506a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801506e:	2b05      	cmp	r3, #5
 8015070:	d905      	bls.n	801507e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015076:	3301      	adds	r3, #1
 8015078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801507c:	e11e      	b.n	80152bc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015084:	2b0b      	cmp	r3, #11
 8015086:	d905      	bls.n	8015094 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801508c:	3301      	adds	r3, #1
 801508e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015092:	e113      	b.n	80152bc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015096:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801509a:	2b00      	cmp	r3, #0
 801509c:	d075      	beq.n	801518a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d006      	beq.n	80150b4 <tcp_slowtmr+0xf4>
 80150a6:	4b62      	ldr	r3, [pc, #392]	@ (8015230 <tcp_slowtmr+0x270>)
 80150a8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80150ac:	4965      	ldr	r1, [pc, #404]	@ (8015244 <tcp_slowtmr+0x284>)
 80150ae:	4862      	ldr	r0, [pc, #392]	@ (8015238 <tcp_slowtmr+0x278>)
 80150b0:	f008 ff4a 	bl	801df48 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80150b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d106      	bne.n	80150ca <tcp_slowtmr+0x10a>
 80150bc:	4b5c      	ldr	r3, [pc, #368]	@ (8015230 <tcp_slowtmr+0x270>)
 80150be:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80150c2:	4961      	ldr	r1, [pc, #388]	@ (8015248 <tcp_slowtmr+0x288>)
 80150c4:	485c      	ldr	r0, [pc, #368]	@ (8015238 <tcp_slowtmr+0x278>)
 80150c6:	f008 ff3f 	bl	801df48 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80150ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80150d0:	2b0b      	cmp	r3, #11
 80150d2:	d905      	bls.n	80150e0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80150d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150d8:	3301      	adds	r3, #1
 80150da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80150de:	e0ed      	b.n	80152bc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80150e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80150e6:	3b01      	subs	r3, #1
 80150e8:	4a58      	ldr	r2, [pc, #352]	@ (801524c <tcp_slowtmr+0x28c>)
 80150ea:	5cd3      	ldrb	r3, [r2, r3]
 80150ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80150ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80150f4:	7c7a      	ldrb	r2, [r7, #17]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d907      	bls.n	801510a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80150fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015100:	3301      	adds	r3, #1
 8015102:	b2da      	uxtb	r2, r3
 8015104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015106:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801510c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015110:	7c7a      	ldrb	r2, [r7, #17]
 8015112:	429a      	cmp	r2, r3
 8015114:	f200 80d2 	bhi.w	80152bc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015118:	2301      	movs	r3, #1
 801511a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015122:	2b00      	cmp	r3, #0
 8015124:	d108      	bne.n	8015138 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015126:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015128:	f004 fc24 	bl	8019974 <tcp_zero_window_probe>
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d014      	beq.n	801515c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015132:	2300      	movs	r3, #0
 8015134:	623b      	str	r3, [r7, #32]
 8015136:	e011      	b.n	801515c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801513a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801513e:	4619      	mov	r1, r3
 8015140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015142:	f003 fae9 	bl	8018718 <tcp_split_unsent_seg>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d107      	bne.n	801515c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801514c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801514e:	f003 fd69 	bl	8018c24 <tcp_output>
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d101      	bne.n	801515c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801515c:	6a3b      	ldr	r3, [r7, #32]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f000 80ac 	beq.w	80152bc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015166:	2200      	movs	r2, #0
 8015168:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015172:	2b06      	cmp	r3, #6
 8015174:	f200 80a2 	bhi.w	80152bc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801517a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801517e:	3301      	adds	r3, #1
 8015180:	b2da      	uxtb	r2, r3
 8015182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015184:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015188:	e098      	b.n	80152bc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801518c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015190:	2b00      	cmp	r3, #0
 8015192:	db0f      	blt.n	80151b4 <tcp_slowtmr+0x1f4>
 8015194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015196:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801519a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801519e:	4293      	cmp	r3, r2
 80151a0:	d008      	beq.n	80151b4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	3301      	adds	r3, #1
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	b21a      	sxth	r2, r3
 80151b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80151b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80151ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80151c0:	429a      	cmp	r2, r3
 80151c2:	db7b      	blt.n	80152bc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80151c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151c6:	f004 f821 	bl	801920c <tcp_rexmit_rto_prepare>
 80151ca:	4603      	mov	r3, r0
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d007      	beq.n	80151e0 <tcp_slowtmr+0x220>
 80151d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d171      	bne.n	80152bc <tcp_slowtmr+0x2fc>
 80151d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d06d      	beq.n	80152bc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80151e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e2:	7d1b      	ldrb	r3, [r3, #20]
 80151e4:	2b02      	cmp	r3, #2
 80151e6:	d03a      	beq.n	801525e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80151e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80151ee:	2b0c      	cmp	r3, #12
 80151f0:	bf28      	it	cs
 80151f2:	230c      	movcs	r3, #12
 80151f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80151f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80151fc:	10db      	asrs	r3, r3, #3
 80151fe:	b21b      	sxth	r3, r3
 8015200:	461a      	mov	r2, r3
 8015202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015204:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015208:	4413      	add	r3, r2
 801520a:	7efa      	ldrb	r2, [r7, #27]
 801520c:	4910      	ldr	r1, [pc, #64]	@ (8015250 <tcp_slowtmr+0x290>)
 801520e:	5c8a      	ldrb	r2, [r1, r2]
 8015210:	4093      	lsls	r3, r2
 8015212:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801521a:	4293      	cmp	r3, r2
 801521c:	dc1a      	bgt.n	8015254 <tcp_slowtmr+0x294>
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	b21a      	sxth	r2, r3
 8015222:	e019      	b.n	8015258 <tcp_slowtmr+0x298>
 8015224:	20027630 	.word	0x20027630
 8015228:	20027646 	.word	0x20027646
 801522c:	2002763c 	.word	0x2002763c
 8015230:	0801fc70 	.word	0x0801fc70
 8015234:	0801ffb4 	.word	0x0801ffb4
 8015238:	0801fcb4 	.word	0x0801fcb4
 801523c:	0801ffe0 	.word	0x0801ffe0
 8015240:	0802000c 	.word	0x0802000c
 8015244:	0802003c 	.word	0x0802003c
 8015248:	08020070 	.word	0x08020070
 801524c:	08022290 	.word	0x08022290
 8015250:	08022280 	.word	0x08022280
 8015254:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801525a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015260:	2200      	movs	r2, #0
 8015262:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015270:	4293      	cmp	r3, r2
 8015272:	bf28      	it	cs
 8015274:	4613      	movcs	r3, r2
 8015276:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015278:	8a7b      	ldrh	r3, [r7, #18]
 801527a:	085b      	lsrs	r3, r3, #1
 801527c:	b29a      	uxth	r2, r3
 801527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015280:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015286:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	b29b      	uxth	r3, r3
 8015292:	429a      	cmp	r2, r3
 8015294:	d206      	bcs.n	80152a4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801529a:	005b      	lsls	r3, r3, #1
 801529c:	b29a      	uxth	r2, r3
 801529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80152a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80152a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80152ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b0:	2200      	movs	r2, #0
 80152b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80152b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152b8:	f004 f818 	bl	80192ec <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80152bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152be:	7d1b      	ldrb	r3, [r3, #20]
 80152c0:	2b06      	cmp	r3, #6
 80152c2:	d111      	bne.n	80152e8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c6:	8b5b      	ldrh	r3, [r3, #26]
 80152c8:	f003 0310 	and.w	r3, r3, #16
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00b      	beq.n	80152e8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80152d0:	4b9c      	ldr	r3, [pc, #624]	@ (8015544 <tcp_slowtmr+0x584>)
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d6:	6a1b      	ldr	r3, [r3, #32]
 80152d8:	1ad3      	subs	r3, r2, r3
 80152da:	2b28      	cmp	r3, #40	@ 0x28
 80152dc:	d904      	bls.n	80152e8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80152de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152e2:	3301      	adds	r3, #1
 80152e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80152e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ea:	7a5b      	ldrb	r3, [r3, #9]
 80152ec:	f003 0308 	and.w	r3, r3, #8
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d04a      	beq.n	801538a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80152f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80152f8:	2b04      	cmp	r3, #4
 80152fa:	d003      	beq.n	8015304 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80152fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015300:	2b07      	cmp	r3, #7
 8015302:	d142      	bne.n	801538a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015304:	4b8f      	ldr	r3, [pc, #572]	@ (8015544 <tcp_slowtmr+0x584>)
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530a:	6a1b      	ldr	r3, [r3, #32]
 801530c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015310:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015314:	4b8c      	ldr	r3, [pc, #560]	@ (8015548 <tcp_slowtmr+0x588>)
 8015316:	440b      	add	r3, r1
 8015318:	498c      	ldr	r1, [pc, #560]	@ (801554c <tcp_slowtmr+0x58c>)
 801531a:	fba1 1303 	umull	r1, r3, r1, r3
 801531e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015320:	429a      	cmp	r2, r3
 8015322:	d90a      	bls.n	801533a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015328:	3301      	adds	r3, #1
 801532a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801532e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015332:	3301      	adds	r3, #1
 8015334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015338:	e027      	b.n	801538a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801533a:	4b82      	ldr	r3, [pc, #520]	@ (8015544 <tcp_slowtmr+0x584>)
 801533c:	681a      	ldr	r2, [r3, #0]
 801533e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015340:	6a1b      	ldr	r3, [r3, #32]
 8015342:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015346:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015350:	4618      	mov	r0, r3
 8015352:	4b7f      	ldr	r3, [pc, #508]	@ (8015550 <tcp_slowtmr+0x590>)
 8015354:	fb00 f303 	mul.w	r3, r0, r3
 8015358:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801535a:	497c      	ldr	r1, [pc, #496]	@ (801554c <tcp_slowtmr+0x58c>)
 801535c:	fba1 1303 	umull	r1, r3, r1, r3
 8015360:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015362:	429a      	cmp	r2, r3
 8015364:	d911      	bls.n	801538a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015368:	f004 fac4 	bl	80198f4 <tcp_keepalive>
 801536c:	4603      	mov	r3, r0
 801536e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015372:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015376:	2b00      	cmp	r3, #0
 8015378:	d107      	bne.n	801538a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801537c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015380:	3301      	adds	r3, #1
 8015382:	b2da      	uxtb	r2, r3
 8015384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015386:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801538e:	2b00      	cmp	r3, #0
 8015390:	d011      	beq.n	80153b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015392:	4b6c      	ldr	r3, [pc, #432]	@ (8015544 <tcp_slowtmr+0x584>)
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015398:	6a1b      	ldr	r3, [r3, #32]
 801539a:	1ad2      	subs	r2, r2, r3
 801539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80153a2:	4619      	mov	r1, r3
 80153a4:	460b      	mov	r3, r1
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	440b      	add	r3, r1
 80153aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d302      	bcc.n	80153b6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80153b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153b2:	f000 fddd 	bl	8015f70 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80153b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b8:	7d1b      	ldrb	r3, [r3, #20]
 80153ba:	2b03      	cmp	r3, #3
 80153bc:	d10b      	bne.n	80153d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80153be:	4b61      	ldr	r3, [pc, #388]	@ (8015544 <tcp_slowtmr+0x584>)
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c4:	6a1b      	ldr	r3, [r3, #32]
 80153c6:	1ad3      	subs	r3, r2, r3
 80153c8:	2b28      	cmp	r3, #40	@ 0x28
 80153ca:	d904      	bls.n	80153d6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80153cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153d0:	3301      	adds	r3, #1
 80153d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80153d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d8:	7d1b      	ldrb	r3, [r3, #20]
 80153da:	2b09      	cmp	r3, #9
 80153dc:	d10b      	bne.n	80153f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80153de:	4b59      	ldr	r3, [pc, #356]	@ (8015544 <tcp_slowtmr+0x584>)
 80153e0:	681a      	ldr	r2, [r3, #0]
 80153e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e4:	6a1b      	ldr	r3, [r3, #32]
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80153ea:	d904      	bls.n	80153f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80153ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153f0:	3301      	adds	r3, #1
 80153f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80153f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d060      	beq.n	80154c0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80153fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015404:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015408:	f000 fbfe 	bl	8015c08 <tcp_pcb_purge>
      if (prev != NULL) {
 801540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540e:	2b00      	cmp	r3, #0
 8015410:	d010      	beq.n	8015434 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015412:	4b50      	ldr	r3, [pc, #320]	@ (8015554 <tcp_slowtmr+0x594>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015418:	429a      	cmp	r2, r3
 801541a:	d106      	bne.n	801542a <tcp_slowtmr+0x46a>
 801541c:	4b4e      	ldr	r3, [pc, #312]	@ (8015558 <tcp_slowtmr+0x598>)
 801541e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015422:	494e      	ldr	r1, [pc, #312]	@ (801555c <tcp_slowtmr+0x59c>)
 8015424:	484e      	ldr	r0, [pc, #312]	@ (8015560 <tcp_slowtmr+0x5a0>)
 8015426:	f008 fd8f 	bl	801df48 <iprintf>
        prev->next = pcb->next;
 801542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542c:	68da      	ldr	r2, [r3, #12]
 801542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015430:	60da      	str	r2, [r3, #12]
 8015432:	e00f      	b.n	8015454 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015434:	4b47      	ldr	r3, [pc, #284]	@ (8015554 <tcp_slowtmr+0x594>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801543a:	429a      	cmp	r2, r3
 801543c:	d006      	beq.n	801544c <tcp_slowtmr+0x48c>
 801543e:	4b46      	ldr	r3, [pc, #280]	@ (8015558 <tcp_slowtmr+0x598>)
 8015440:	f240 5271 	movw	r2, #1393	@ 0x571
 8015444:	4947      	ldr	r1, [pc, #284]	@ (8015564 <tcp_slowtmr+0x5a4>)
 8015446:	4846      	ldr	r0, [pc, #280]	@ (8015560 <tcp_slowtmr+0x5a0>)
 8015448:	f008 fd7e 	bl	801df48 <iprintf>
        tcp_active_pcbs = pcb->next;
 801544c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	4a40      	ldr	r2, [pc, #256]	@ (8015554 <tcp_slowtmr+0x594>)
 8015452:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015458:	2b00      	cmp	r3, #0
 801545a:	d013      	beq.n	8015484 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015462:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015464:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015468:	3304      	adds	r3, #4
 801546a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801546c:	8ad2      	ldrh	r2, [r2, #22]
 801546e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015470:	8b09      	ldrh	r1, [r1, #24]
 8015472:	9102      	str	r1, [sp, #8]
 8015474:	9201      	str	r2, [sp, #4]
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	462b      	mov	r3, r5
 801547a:	4622      	mov	r2, r4
 801547c:	4601      	mov	r1, r0
 801547e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015480:	f004 f984 	bl	801978c <tcp_rst>
      err_arg = pcb->callback_arg;
 8015484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015486:	691b      	ldr	r3, [r3, #16]
 8015488:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548c:	7d1b      	ldrb	r3, [r3, #20]
 801548e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015492:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801549a:	6838      	ldr	r0, [r7, #0]
 801549c:	f7ff f9f2 	bl	8014884 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80154a0:	4b31      	ldr	r3, [pc, #196]	@ (8015568 <tcp_slowtmr+0x5a8>)
 80154a2:	2200      	movs	r2, #0
 80154a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d004      	beq.n	80154b6 <tcp_slowtmr+0x4f6>
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f06f 010c 	mvn.w	r1, #12
 80154b2:	68b8      	ldr	r0, [r7, #8]
 80154b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80154b6:	4b2c      	ldr	r3, [pc, #176]	@ (8015568 <tcp_slowtmr+0x5a8>)
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d037      	beq.n	801552e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80154be:	e592      	b.n	8014fe6 <tcp_slowtmr+0x26>
      prev = pcb;
 80154c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80154c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c6:	68db      	ldr	r3, [r3, #12]
 80154c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80154ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154cc:	7f1b      	ldrb	r3, [r3, #28]
 80154ce:	3301      	adds	r3, #1
 80154d0:	b2da      	uxtb	r2, r3
 80154d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80154d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154d8:	7f1a      	ldrb	r2, [r3, #28]
 80154da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154dc:	7f5b      	ldrb	r3, [r3, #29]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d325      	bcc.n	801552e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80154e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e4:	2200      	movs	r2, #0
 80154e6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80154e8:	4b1f      	ldr	r3, [pc, #124]	@ (8015568 <tcp_slowtmr+0x5a8>)
 80154ea:	2200      	movs	r2, #0
 80154ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80154ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00b      	beq.n	8015510 <tcp_slowtmr+0x550>
 80154f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015500:	6912      	ldr	r2, [r2, #16]
 8015502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015504:	4610      	mov	r0, r2
 8015506:	4798      	blx	r3
 8015508:	4603      	mov	r3, r0
 801550a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801550e:	e002      	b.n	8015516 <tcp_slowtmr+0x556>
 8015510:	2300      	movs	r3, #0
 8015512:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015516:	4b14      	ldr	r3, [pc, #80]	@ (8015568 <tcp_slowtmr+0x5a8>)
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	f47f ad62 	bne.w	8014fe4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015520:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015524:	2b00      	cmp	r3, #0
 8015526:	d102      	bne.n	801552e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801552a:	f003 fb7b 	bl	8018c24 <tcp_output>
  while (pcb != NULL) {
 801552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015530:	2b00      	cmp	r3, #0
 8015532:	f47f ad5e 	bne.w	8014ff2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015536:	2300      	movs	r3, #0
 8015538:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801553a:	4b0c      	ldr	r3, [pc, #48]	@ (801556c <tcp_slowtmr+0x5ac>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015540:	e069      	b.n	8015616 <tcp_slowtmr+0x656>
 8015542:	bf00      	nop
 8015544:	20027630 	.word	0x20027630
 8015548:	000a4cb8 	.word	0x000a4cb8
 801554c:	10624dd3 	.word	0x10624dd3
 8015550:	000124f8 	.word	0x000124f8
 8015554:	2002763c 	.word	0x2002763c
 8015558:	0801fc70 	.word	0x0801fc70
 801555c:	080200a8 	.word	0x080200a8
 8015560:	0801fcb4 	.word	0x0801fcb4
 8015564:	080200d4 	.word	0x080200d4
 8015568:	20027644 	.word	0x20027644
 801556c:	20027640 	.word	0x20027640
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015572:	7d1b      	ldrb	r3, [r3, #20]
 8015574:	2b0a      	cmp	r3, #10
 8015576:	d006      	beq.n	8015586 <tcp_slowtmr+0x5c6>
 8015578:	4b2b      	ldr	r3, [pc, #172]	@ (8015628 <tcp_slowtmr+0x668>)
 801557a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801557e:	492b      	ldr	r1, [pc, #172]	@ (801562c <tcp_slowtmr+0x66c>)
 8015580:	482b      	ldr	r0, [pc, #172]	@ (8015630 <tcp_slowtmr+0x670>)
 8015582:	f008 fce1 	bl	801df48 <iprintf>
    pcb_remove = 0;
 8015586:	2300      	movs	r3, #0
 8015588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801558c:	4b29      	ldr	r3, [pc, #164]	@ (8015634 <tcp_slowtmr+0x674>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015592:	6a1b      	ldr	r3, [r3, #32]
 8015594:	1ad3      	subs	r3, r2, r3
 8015596:	2bf0      	cmp	r3, #240	@ 0xf0
 8015598:	d904      	bls.n	80155a4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801559a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801559e:	3301      	adds	r3, #1
 80155a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80155a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d02f      	beq.n	801560c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80155ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155ae:	f000 fb2b 	bl	8015c08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80155b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d010      	beq.n	80155da <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80155b8:	4b1f      	ldr	r3, [pc, #124]	@ (8015638 <tcp_slowtmr+0x678>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155be:	429a      	cmp	r2, r3
 80155c0:	d106      	bne.n	80155d0 <tcp_slowtmr+0x610>
 80155c2:	4b19      	ldr	r3, [pc, #100]	@ (8015628 <tcp_slowtmr+0x668>)
 80155c4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80155c8:	491c      	ldr	r1, [pc, #112]	@ (801563c <tcp_slowtmr+0x67c>)
 80155ca:	4819      	ldr	r0, [pc, #100]	@ (8015630 <tcp_slowtmr+0x670>)
 80155cc:	f008 fcbc 	bl	801df48 <iprintf>
        prev->next = pcb->next;
 80155d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d2:	68da      	ldr	r2, [r3, #12]
 80155d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155d6:	60da      	str	r2, [r3, #12]
 80155d8:	e00f      	b.n	80155fa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80155da:	4b17      	ldr	r3, [pc, #92]	@ (8015638 <tcp_slowtmr+0x678>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d006      	beq.n	80155f2 <tcp_slowtmr+0x632>
 80155e4:	4b10      	ldr	r3, [pc, #64]	@ (8015628 <tcp_slowtmr+0x668>)
 80155e6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80155ea:	4915      	ldr	r1, [pc, #84]	@ (8015640 <tcp_slowtmr+0x680>)
 80155ec:	4810      	ldr	r0, [pc, #64]	@ (8015630 <tcp_slowtmr+0x670>)
 80155ee:	f008 fcab 	bl	801df48 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80155f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	4a10      	ldr	r2, [pc, #64]	@ (8015638 <tcp_slowtmr+0x678>)
 80155f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80155fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80155fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015604:	69f8      	ldr	r0, [r7, #28]
 8015606:	f7ff f93d 	bl	8014884 <tcp_free>
 801560a:	e004      	b.n	8015616 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801560e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1a9      	bne.n	8015570 <tcp_slowtmr+0x5b0>
    }
  }
}
 801561c:	bf00      	nop
 801561e:	bf00      	nop
 8015620:	3730      	adds	r7, #48	@ 0x30
 8015622:	46bd      	mov	sp, r7
 8015624:	bdb0      	pop	{r4, r5, r7, pc}
 8015626:	bf00      	nop
 8015628:	0801fc70 	.word	0x0801fc70
 801562c:	08020100 	.word	0x08020100
 8015630:	0801fcb4 	.word	0x0801fcb4
 8015634:	20027630 	.word	0x20027630
 8015638:	20027640 	.word	0x20027640
 801563c:	08020130 	.word	0x08020130
 8015640:	08020158 	.word	0x08020158

08015644 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801564a:	4b2d      	ldr	r3, [pc, #180]	@ (8015700 <tcp_fasttmr+0xbc>)
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	3301      	adds	r3, #1
 8015650:	b2da      	uxtb	r2, r3
 8015652:	4b2b      	ldr	r3, [pc, #172]	@ (8015700 <tcp_fasttmr+0xbc>)
 8015654:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015656:	4b2b      	ldr	r3, [pc, #172]	@ (8015704 <tcp_fasttmr+0xc0>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801565c:	e048      	b.n	80156f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	7f9a      	ldrb	r2, [r3, #30]
 8015662:	4b27      	ldr	r3, [pc, #156]	@ (8015700 <tcp_fasttmr+0xbc>)
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	429a      	cmp	r2, r3
 8015668:	d03f      	beq.n	80156ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801566a:	4b25      	ldr	r3, [pc, #148]	@ (8015700 <tcp_fasttmr+0xbc>)
 801566c:	781a      	ldrb	r2, [r3, #0]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	8b5b      	ldrh	r3, [r3, #26]
 8015676:	f003 0301 	and.w	r3, r3, #1
 801567a:	2b00      	cmp	r3, #0
 801567c:	d010      	beq.n	80156a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	8b5b      	ldrh	r3, [r3, #26]
 8015682:	f043 0302 	orr.w	r3, r3, #2
 8015686:	b29a      	uxth	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f003 fac9 	bl	8018c24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	8b5b      	ldrh	r3, [r3, #26]
 8015696:	f023 0303 	bic.w	r3, r3, #3
 801569a:	b29a      	uxth	r2, r3
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	8b5b      	ldrh	r3, [r3, #26]
 80156a4:	f003 0308 	and.w	r3, r3, #8
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d009      	beq.n	80156c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	8b5b      	ldrh	r3, [r3, #26]
 80156b0:	f023 0308 	bic.w	r3, r3, #8
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7ff fa76 	bl	8014bac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00a      	beq.n	80156e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80156ce:	4b0e      	ldr	r3, [pc, #56]	@ (8015708 <tcp_fasttmr+0xc4>)
 80156d0:	2200      	movs	r2, #0
 80156d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 f819 	bl	801570c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80156da:	4b0b      	ldr	r3, [pc, #44]	@ (8015708 <tcp_fasttmr+0xc4>)
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d000      	beq.n	80156e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80156e2:	e7b8      	b.n	8015656 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	607b      	str	r3, [r7, #4]
 80156e8:	e002      	b.n	80156f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	68db      	ldr	r3, [r3, #12]
 80156ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d1b3      	bne.n	801565e <tcp_fasttmr+0x1a>
    }
  }
}
 80156f6:	bf00      	nop
 80156f8:	bf00      	nop
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	20027646 	.word	0x20027646
 8015704:	2002763c 	.word	0x2002763c
 8015708:	20027644 	.word	0x20027644

0801570c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801570c:	b590      	push	{r4, r7, lr}
 801570e:	b085      	sub	sp, #20
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d109      	bne.n	801572e <tcp_process_refused_data+0x22>
 801571a:	4b37      	ldr	r3, [pc, #220]	@ (80157f8 <tcp_process_refused_data+0xec>)
 801571c:	f240 6209 	movw	r2, #1545	@ 0x609
 8015720:	4936      	ldr	r1, [pc, #216]	@ (80157fc <tcp_process_refused_data+0xf0>)
 8015722:	4837      	ldr	r0, [pc, #220]	@ (8015800 <tcp_process_refused_data+0xf4>)
 8015724:	f008 fc10 	bl	801df48 <iprintf>
 8015728:	f06f 030f 	mvn.w	r3, #15
 801572c:	e060      	b.n	80157f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015732:	7b5b      	ldrb	r3, [r3, #13]
 8015734:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801573a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2200      	movs	r2, #0
 8015740:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00b      	beq.n	8015764 <tcp_process_refused_data+0x58>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6918      	ldr	r0, [r3, #16]
 8015756:	2300      	movs	r3, #0
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	6879      	ldr	r1, [r7, #4]
 801575c:	47a0      	blx	r4
 801575e:	4603      	mov	r3, r0
 8015760:	73fb      	strb	r3, [r7, #15]
 8015762:	e007      	b.n	8015774 <tcp_process_refused_data+0x68>
 8015764:	2300      	movs	r3, #0
 8015766:	68ba      	ldr	r2, [r7, #8]
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	2000      	movs	r0, #0
 801576c:	f000 f8a4 	bl	80158b8 <tcp_recv_null>
 8015770:	4603      	mov	r3, r0
 8015772:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d12a      	bne.n	80157d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801577c:	7bbb      	ldrb	r3, [r7, #14]
 801577e:	f003 0320 	and.w	r3, r3, #32
 8015782:	2b00      	cmp	r3, #0
 8015784:	d033      	beq.n	80157ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801578a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801578e:	d005      	beq.n	801579c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015794:	3301      	adds	r3, #1
 8015796:	b29a      	uxth	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d00b      	beq.n	80157be <tcp_process_refused_data+0xb2>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6918      	ldr	r0, [r3, #16]
 80157b0:	2300      	movs	r3, #0
 80157b2:	2200      	movs	r2, #0
 80157b4:	6879      	ldr	r1, [r7, #4]
 80157b6:	47a0      	blx	r4
 80157b8:	4603      	mov	r3, r0
 80157ba:	73fb      	strb	r3, [r7, #15]
 80157bc:	e001      	b.n	80157c2 <tcp_process_refused_data+0xb6>
 80157be:	2300      	movs	r3, #0
 80157c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80157c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157c6:	f113 0f0d 	cmn.w	r3, #13
 80157ca:	d110      	bne.n	80157ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80157cc:	f06f 030c 	mvn.w	r3, #12
 80157d0:	e00e      	b.n	80157f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80157d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157d6:	f113 0f0d 	cmn.w	r3, #13
 80157da:	d102      	bne.n	80157e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80157dc:	f06f 030c 	mvn.w	r3, #12
 80157e0:	e006      	b.n	80157f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	68ba      	ldr	r2, [r7, #8]
 80157e6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80157e8:	f06f 0304 	mvn.w	r3, #4
 80157ec:	e000      	b.n	80157f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80157ee:	2300      	movs	r3, #0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3714      	adds	r7, #20
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd90      	pop	{r4, r7, pc}
 80157f8:	0801fc70 	.word	0x0801fc70
 80157fc:	08020180 	.word	0x08020180
 8015800:	0801fcb4 	.word	0x0801fcb4

08015804 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b084      	sub	sp, #16
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801580c:	e007      	b.n	801581e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 f80a 	bl	801582e <tcp_seg_free>
    seg = next;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d1f4      	bne.n	801580e <tcp_segs_free+0xa>
  }
}
 8015824:	bf00      	nop
 8015826:	bf00      	nop
 8015828:	3710      	adds	r7, #16
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b082      	sub	sp, #8
 8015832:	af00      	add	r7, sp, #0
 8015834:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d00c      	beq.n	8015856 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d004      	beq.n	801584e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	4618      	mov	r0, r3
 801584a:	f7fe fd5f 	bl	801430c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801584e:	6879      	ldr	r1, [r7, #4]
 8015850:	2003      	movs	r0, #3
 8015852:	f7fd feb7 	bl	80135c4 <memp_free>
  }
}
 8015856:	bf00      	nop
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
	...

08015860 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d106      	bne.n	801587c <tcp_seg_copy+0x1c>
 801586e:	4b0f      	ldr	r3, [pc, #60]	@ (80158ac <tcp_seg_copy+0x4c>)
 8015870:	f240 6282 	movw	r2, #1666	@ 0x682
 8015874:	490e      	ldr	r1, [pc, #56]	@ (80158b0 <tcp_seg_copy+0x50>)
 8015876:	480f      	ldr	r0, [pc, #60]	@ (80158b4 <tcp_seg_copy+0x54>)
 8015878:	f008 fb66 	bl	801df48 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801587c:	2003      	movs	r0, #3
 801587e:	f7fd fe2b 	bl	80134d8 <memp_malloc>
 8015882:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d101      	bne.n	801588e <tcp_seg_copy+0x2e>
    return NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	e00a      	b.n	80158a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801588e:	2210      	movs	r2, #16
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f008 fd83 	bl	801e39e <memcpy>
  pbuf_ref(cseg->p);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	f7fe fddb 	bl	8014458 <pbuf_ref>
  return cseg;
 80158a2:	68fb      	ldr	r3, [r7, #12]
}
 80158a4:	4618      	mov	r0, r3
 80158a6:	3710      	adds	r7, #16
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	0801fc70 	.word	0x0801fc70
 80158b0:	080201c4 	.word	0x080201c4
 80158b4:	0801fcb4 	.word	0x0801fcb4

080158b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	607a      	str	r2, [r7, #4]
 80158c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d109      	bne.n	80158e0 <tcp_recv_null+0x28>
 80158cc:	4b12      	ldr	r3, [pc, #72]	@ (8015918 <tcp_recv_null+0x60>)
 80158ce:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80158d2:	4912      	ldr	r1, [pc, #72]	@ (801591c <tcp_recv_null+0x64>)
 80158d4:	4812      	ldr	r0, [pc, #72]	@ (8015920 <tcp_recv_null+0x68>)
 80158d6:	f008 fb37 	bl	801df48 <iprintf>
 80158da:	f06f 030f 	mvn.w	r3, #15
 80158de:	e016      	b.n	801590e <tcp_recv_null+0x56>

  if (p != NULL) {
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d009      	beq.n	80158fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	891b      	ldrh	r3, [r3, #8]
 80158ea:	4619      	mov	r1, r3
 80158ec:	68b8      	ldr	r0, [r7, #8]
 80158ee:	f7ff fb17 	bl	8014f20 <tcp_recved>
    pbuf_free(p);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7fe fd0a 	bl	801430c <pbuf_free>
 80158f8:	e008      	b.n	801590c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80158fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d104      	bne.n	801590c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015902:	68b8      	ldr	r0, [r7, #8]
 8015904:	f7ff f9bc 	bl	8014c80 <tcp_close>
 8015908:	4603      	mov	r3, r0
 801590a:	e000      	b.n	801590e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801590c:	2300      	movs	r3, #0
}
 801590e:	4618      	mov	r0, r3
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	0801fc70 	.word	0x0801fc70
 801591c:	080201e0 	.word	0x080201e0
 8015920:	0801fcb4 	.word	0x0801fcb4

08015924 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b086      	sub	sp, #24
 8015928:	af00      	add	r7, sp, #0
 801592a:	4603      	mov	r3, r0
 801592c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015932:	2b00      	cmp	r3, #0
 8015934:	db01      	blt.n	801593a <tcp_kill_prio+0x16>
 8015936:	79fb      	ldrb	r3, [r7, #7]
 8015938:	e000      	b.n	801593c <tcp_kill_prio+0x18>
 801593a:	237f      	movs	r3, #127	@ 0x7f
 801593c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801593e:	7afb      	ldrb	r3, [r7, #11]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d034      	beq.n	80159ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015944:	7afb      	ldrb	r3, [r7, #11]
 8015946:	3b01      	subs	r3, #1
 8015948:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801594a:	2300      	movs	r3, #0
 801594c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801594e:	2300      	movs	r3, #0
 8015950:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015952:	4b19      	ldr	r3, [pc, #100]	@ (80159b8 <tcp_kill_prio+0x94>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	617b      	str	r3, [r7, #20]
 8015958:	e01f      	b.n	801599a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	7d5b      	ldrb	r3, [r3, #21]
 801595e:	7afa      	ldrb	r2, [r7, #11]
 8015960:	429a      	cmp	r2, r3
 8015962:	d80c      	bhi.n	801597e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015968:	7afa      	ldrb	r2, [r7, #11]
 801596a:	429a      	cmp	r2, r3
 801596c:	d112      	bne.n	8015994 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801596e:	4b13      	ldr	r3, [pc, #76]	@ (80159bc <tcp_kill_prio+0x98>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	6a1b      	ldr	r3, [r3, #32]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	68fa      	ldr	r2, [r7, #12]
 801597a:	429a      	cmp	r2, r3
 801597c:	d80a      	bhi.n	8015994 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801597e:	4b0f      	ldr	r3, [pc, #60]	@ (80159bc <tcp_kill_prio+0x98>)
 8015980:	681a      	ldr	r2, [r3, #0]
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	6a1b      	ldr	r3, [r3, #32]
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801598a:	697b      	ldr	r3, [r7, #20]
 801598c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	7d5b      	ldrb	r3, [r3, #21]
 8015992:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	617b      	str	r3, [r7, #20]
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1dc      	bne.n	801595a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d004      	beq.n	80159b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80159a6:	6938      	ldr	r0, [r7, #16]
 80159a8:	f7ff fa54 	bl	8014e54 <tcp_abort>
 80159ac:	e000      	b.n	80159b0 <tcp_kill_prio+0x8c>
    return;
 80159ae:	bf00      	nop
  }
}
 80159b0:	3718      	adds	r7, #24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	2002763c 	.word	0x2002763c
 80159bc:	20027630 	.word	0x20027630

080159c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b086      	sub	sp, #24
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	4603      	mov	r3, r0
 80159c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80159ca:	79fb      	ldrb	r3, [r7, #7]
 80159cc:	2b08      	cmp	r3, #8
 80159ce:	d009      	beq.n	80159e4 <tcp_kill_state+0x24>
 80159d0:	79fb      	ldrb	r3, [r7, #7]
 80159d2:	2b09      	cmp	r3, #9
 80159d4:	d006      	beq.n	80159e4 <tcp_kill_state+0x24>
 80159d6:	4b1a      	ldr	r3, [pc, #104]	@ (8015a40 <tcp_kill_state+0x80>)
 80159d8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80159dc:	4919      	ldr	r1, [pc, #100]	@ (8015a44 <tcp_kill_state+0x84>)
 80159de:	481a      	ldr	r0, [pc, #104]	@ (8015a48 <tcp_kill_state+0x88>)
 80159e0:	f008 fab2 	bl	801df48 <iprintf>

  inactivity = 0;
 80159e4:	2300      	movs	r3, #0
 80159e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80159e8:	2300      	movs	r3, #0
 80159ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80159ec:	4b17      	ldr	r3, [pc, #92]	@ (8015a4c <tcp_kill_state+0x8c>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	617b      	str	r3, [r7, #20]
 80159f2:	e017      	b.n	8015a24 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	7d1b      	ldrb	r3, [r3, #20]
 80159f8:	79fa      	ldrb	r2, [r7, #7]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d10f      	bne.n	8015a1e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80159fe:	4b14      	ldr	r3, [pc, #80]	@ (8015a50 <tcp_kill_state+0x90>)
 8015a00:	681a      	ldr	r2, [r3, #0]
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	6a1b      	ldr	r3, [r3, #32]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	68fa      	ldr	r2, [r7, #12]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d807      	bhi.n	8015a1e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015a0e:	4b10      	ldr	r3, [pc, #64]	@ (8015a50 <tcp_kill_state+0x90>)
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	6a1b      	ldr	r3, [r3, #32]
 8015a16:	1ad3      	subs	r3, r2, r3
 8015a18:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015a1a:	697b      	ldr	r3, [r7, #20]
 8015a1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	68db      	ldr	r3, [r3, #12]
 8015a22:	617b      	str	r3, [r7, #20]
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d1e4      	bne.n	80159f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d003      	beq.n	8015a38 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015a30:	2100      	movs	r1, #0
 8015a32:	6938      	ldr	r0, [r7, #16]
 8015a34:	f7ff f950 	bl	8014cd8 <tcp_abandon>
  }
}
 8015a38:	bf00      	nop
 8015a3a:	3718      	adds	r7, #24
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	0801fc70 	.word	0x0801fc70
 8015a44:	080201fc 	.word	0x080201fc
 8015a48:	0801fcb4 	.word	0x0801fcb4
 8015a4c:	2002763c 	.word	0x2002763c
 8015a50:	20027630 	.word	0x20027630

08015a54 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a62:	4b12      	ldr	r3, [pc, #72]	@ (8015aac <tcp_kill_timewait+0x58>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	60fb      	str	r3, [r7, #12]
 8015a68:	e012      	b.n	8015a90 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015a6a:	4b11      	ldr	r3, [pc, #68]	@ (8015ab0 <tcp_kill_timewait+0x5c>)
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	6a1b      	ldr	r3, [r3, #32]
 8015a72:	1ad3      	subs	r3, r2, r3
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d807      	bhi.n	8015a8a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ab0 <tcp_kill_timewait+0x5c>)
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	6a1b      	ldr	r3, [r3, #32]
 8015a82:	1ad3      	subs	r3, r2, r3
 8015a84:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	60fb      	str	r3, [r7, #12]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d1e9      	bne.n	8015a6a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d002      	beq.n	8015aa2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015a9c:	68b8      	ldr	r0, [r7, #8]
 8015a9e:	f7ff f9d9 	bl	8014e54 <tcp_abort>
  }
}
 8015aa2:	bf00      	nop
 8015aa4:	3710      	adds	r7, #16
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	20027640 	.word	0x20027640
 8015ab0:	20027630 	.word	0x20027630

08015ab4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015aba:	4b10      	ldr	r3, [pc, #64]	@ (8015afc <tcp_handle_closepend+0x48>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015ac0:	e014      	b.n	8015aec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	68db      	ldr	r3, [r3, #12]
 8015ac6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	8b5b      	ldrh	r3, [r3, #26]
 8015acc:	f003 0308 	and.w	r3, r3, #8
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d009      	beq.n	8015ae8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	8b5b      	ldrh	r3, [r3, #26]
 8015ad8:	f023 0308 	bic.w	r3, r3, #8
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7ff f862 	bl	8014bac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d1e7      	bne.n	8015ac2 <tcp_handle_closepend+0xe>
  }
}
 8015af2:	bf00      	nop
 8015af4:	bf00      	nop
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	2002763c 	.word	0x2002763c

08015b00 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	4603      	mov	r3, r0
 8015b08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015b0a:	2001      	movs	r0, #1
 8015b0c:	f7fd fce4 	bl	80134d8 <memp_malloc>
 8015b10:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d126      	bne.n	8015b66 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015b18:	f7ff ffcc 	bl	8015ab4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015b1c:	f7ff ff9a 	bl	8015a54 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015b20:	2001      	movs	r0, #1
 8015b22:	f7fd fcd9 	bl	80134d8 <memp_malloc>
 8015b26:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d11b      	bne.n	8015b66 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015b2e:	2009      	movs	r0, #9
 8015b30:	f7ff ff46 	bl	80159c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015b34:	2001      	movs	r0, #1
 8015b36:	f7fd fccf 	bl	80134d8 <memp_malloc>
 8015b3a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d111      	bne.n	8015b66 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015b42:	2008      	movs	r0, #8
 8015b44:	f7ff ff3c 	bl	80159c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015b48:	2001      	movs	r0, #1
 8015b4a:	f7fd fcc5 	bl	80134d8 <memp_malloc>
 8015b4e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d107      	bne.n	8015b66 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015b56:	79fb      	ldrb	r3, [r7, #7]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7ff fee3 	bl	8015924 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015b5e:	2001      	movs	r0, #1
 8015b60:	f7fd fcba 	bl	80134d8 <memp_malloc>
 8015b64:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d03f      	beq.n	8015bec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015b6c:	229c      	movs	r2, #156	@ 0x9c
 8015b6e:	2100      	movs	r1, #0
 8015b70:	68f8      	ldr	r0, [r7, #12]
 8015b72:	f008 fb41 	bl	801e1f8 <memset>
    pcb->prio = prio;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	79fa      	ldrb	r2, [r7, #7]
 8015b7a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015b82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	22ff      	movs	r2, #255	@ 0xff
 8015b9a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015ba2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2206      	movs	r2, #6
 8015ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2206      	movs	r2, #6
 8015bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015bb8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2201      	movs	r2, #1
 8015bbe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8015bf8 <tcp_alloc+0xf8>)
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015bca:	4b0c      	ldr	r3, [pc, #48]	@ (8015bfc <tcp_alloc+0xfc>)
 8015bcc:	781a      	ldrb	r2, [r3, #0]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015bd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	4a08      	ldr	r2, [pc, #32]	@ (8015c00 <tcp_alloc+0x100>)
 8015be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	4a07      	ldr	r2, [pc, #28]	@ (8015c04 <tcp_alloc+0x104>)
 8015be8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015bec:	68fb      	ldr	r3, [r7, #12]
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3710      	adds	r7, #16
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	bf00      	nop
 8015bf8:	20027630 	.word	0x20027630
 8015bfc:	20027646 	.word	0x20027646
 8015c00:	080158b9 	.word	0x080158b9
 8015c04:	006ddd00 	.word	0x006ddd00

08015c08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d107      	bne.n	8015c26 <tcp_pcb_purge+0x1e>
 8015c16:	4b21      	ldr	r3, [pc, #132]	@ (8015c9c <tcp_pcb_purge+0x94>)
 8015c18:	f640 0251 	movw	r2, #2129	@ 0x851
 8015c1c:	4920      	ldr	r1, [pc, #128]	@ (8015ca0 <tcp_pcb_purge+0x98>)
 8015c1e:	4821      	ldr	r0, [pc, #132]	@ (8015ca4 <tcp_pcb_purge+0x9c>)
 8015c20:	f008 f992 	bl	801df48 <iprintf>
 8015c24:	e037      	b.n	8015c96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	7d1b      	ldrb	r3, [r3, #20]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d033      	beq.n	8015c96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015c32:	2b0a      	cmp	r3, #10
 8015c34:	d02f      	beq.n	8015c96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d02b      	beq.n	8015c96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d007      	beq.n	8015c56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7fe fb5e 	bl	801430c <pbuf_free>
      pcb->refused_data = NULL;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2200      	movs	r2, #0
 8015c54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d002      	beq.n	8015c64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f000 f986 	bl	8015f70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7ff fdc7 	bl	8015804 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7ff fdc2 	bl	8015804 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2200      	movs	r2, #0
 8015c92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015c96:	3708      	adds	r7, #8
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	0801fc70 	.word	0x0801fc70
 8015ca0:	080202bc 	.word	0x080202bc
 8015ca4:	0801fcb4 	.word	0x0801fcb4

08015ca8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b084      	sub	sp, #16
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d106      	bne.n	8015cc6 <tcp_pcb_remove+0x1e>
 8015cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8015db4 <tcp_pcb_remove+0x10c>)
 8015cba:	f640 0283 	movw	r2, #2179	@ 0x883
 8015cbe:	493e      	ldr	r1, [pc, #248]	@ (8015db8 <tcp_pcb_remove+0x110>)
 8015cc0:	483e      	ldr	r0, [pc, #248]	@ (8015dbc <tcp_pcb_remove+0x114>)
 8015cc2:	f008 f941 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d106      	bne.n	8015cda <tcp_pcb_remove+0x32>
 8015ccc:	4b39      	ldr	r3, [pc, #228]	@ (8015db4 <tcp_pcb_remove+0x10c>)
 8015cce:	f640 0284 	movw	r2, #2180	@ 0x884
 8015cd2:	493b      	ldr	r1, [pc, #236]	@ (8015dc0 <tcp_pcb_remove+0x118>)
 8015cd4:	4839      	ldr	r0, [pc, #228]	@ (8015dbc <tcp_pcb_remove+0x114>)
 8015cd6:	f008 f937 	bl	801df48 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	683a      	ldr	r2, [r7, #0]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d105      	bne.n	8015cf0 <tcp_pcb_remove+0x48>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	68da      	ldr	r2, [r3, #12]
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	601a      	str	r2, [r3, #0]
 8015cee:	e013      	b.n	8015d18 <tcp_pcb_remove+0x70>
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	60fb      	str	r3, [r7, #12]
 8015cf6:	e00c      	b.n	8015d12 <tcp_pcb_remove+0x6a>
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	683a      	ldr	r2, [r7, #0]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d104      	bne.n	8015d0c <tcp_pcb_remove+0x64>
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	68da      	ldr	r2, [r3, #12]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	60da      	str	r2, [r3, #12]
 8015d0a:	e005      	b.n	8015d18 <tcp_pcb_remove+0x70>
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	60fb      	str	r3, [r7, #12]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d1ef      	bne.n	8015cf8 <tcp_pcb_remove+0x50>
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015d1e:	6838      	ldr	r0, [r7, #0]
 8015d20:	f7ff ff72 	bl	8015c08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	7d1b      	ldrb	r3, [r3, #20]
 8015d28:	2b0a      	cmp	r3, #10
 8015d2a:	d013      	beq.n	8015d54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d00f      	beq.n	8015d54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	8b5b      	ldrh	r3, [r3, #26]
 8015d38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d009      	beq.n	8015d54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	8b5b      	ldrh	r3, [r3, #26]
 8015d44:	f043 0302 	orr.w	r3, r3, #2
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015d4e:	6838      	ldr	r0, [r7, #0]
 8015d50:	f002 ff68 	bl	8018c24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	7d1b      	ldrb	r3, [r3, #20]
 8015d58:	2b01      	cmp	r3, #1
 8015d5a:	d020      	beq.n	8015d9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d006      	beq.n	8015d72 <tcp_pcb_remove+0xca>
 8015d64:	4b13      	ldr	r3, [pc, #76]	@ (8015db4 <tcp_pcb_remove+0x10c>)
 8015d66:	f640 0293 	movw	r2, #2195	@ 0x893
 8015d6a:	4916      	ldr	r1, [pc, #88]	@ (8015dc4 <tcp_pcb_remove+0x11c>)
 8015d6c:	4813      	ldr	r0, [pc, #76]	@ (8015dbc <tcp_pcb_remove+0x114>)
 8015d6e:	f008 f8eb 	bl	801df48 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d006      	beq.n	8015d88 <tcp_pcb_remove+0xe0>
 8015d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8015db4 <tcp_pcb_remove+0x10c>)
 8015d7c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015d80:	4911      	ldr	r1, [pc, #68]	@ (8015dc8 <tcp_pcb_remove+0x120>)
 8015d82:	480e      	ldr	r0, [pc, #56]	@ (8015dbc <tcp_pcb_remove+0x114>)
 8015d84:	f008 f8e0 	bl	801df48 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d006      	beq.n	8015d9e <tcp_pcb_remove+0xf6>
 8015d90:	4b08      	ldr	r3, [pc, #32]	@ (8015db4 <tcp_pcb_remove+0x10c>)
 8015d92:	f640 0296 	movw	r2, #2198	@ 0x896
 8015d96:	490d      	ldr	r1, [pc, #52]	@ (8015dcc <tcp_pcb_remove+0x124>)
 8015d98:	4808      	ldr	r0, [pc, #32]	@ (8015dbc <tcp_pcb_remove+0x114>)
 8015d9a:	f008 f8d5 	bl	801df48 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	2200      	movs	r2, #0
 8015da2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	2200      	movs	r2, #0
 8015da8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015daa:	bf00      	nop
 8015dac:	3710      	adds	r7, #16
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
 8015db2:	bf00      	nop
 8015db4:	0801fc70 	.word	0x0801fc70
 8015db8:	080202d8 	.word	0x080202d8
 8015dbc:	0801fcb4 	.word	0x0801fcb4
 8015dc0:	080202f4 	.word	0x080202f4
 8015dc4:	08020314 	.word	0x08020314
 8015dc8:	0802032c 	.word	0x0802032c
 8015dcc:	08020348 	.word	0x08020348

08015dd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d106      	bne.n	8015dec <tcp_next_iss+0x1c>
 8015dde:	4b0a      	ldr	r3, [pc, #40]	@ (8015e08 <tcp_next_iss+0x38>)
 8015de0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015de4:	4909      	ldr	r1, [pc, #36]	@ (8015e0c <tcp_next_iss+0x3c>)
 8015de6:	480a      	ldr	r0, [pc, #40]	@ (8015e10 <tcp_next_iss+0x40>)
 8015de8:	f008 f8ae 	bl	801df48 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015dec:	4b09      	ldr	r3, [pc, #36]	@ (8015e14 <tcp_next_iss+0x44>)
 8015dee:	681a      	ldr	r2, [r3, #0]
 8015df0:	4b09      	ldr	r3, [pc, #36]	@ (8015e18 <tcp_next_iss+0x48>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	4413      	add	r3, r2
 8015df6:	4a07      	ldr	r2, [pc, #28]	@ (8015e14 <tcp_next_iss+0x44>)
 8015df8:	6013      	str	r3, [r2, #0]
  return iss;
 8015dfa:	4b06      	ldr	r3, [pc, #24]	@ (8015e14 <tcp_next_iss+0x44>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	0801fc70 	.word	0x0801fc70
 8015e0c:	08020360 	.word	0x08020360
 8015e10:	0801fcb4 	.word	0x0801fcb4
 8015e14:	20000028 	.word	0x20000028
 8015e18:	20027630 	.word	0x20027630

08015e1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b086      	sub	sp, #24
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	4603      	mov	r3, r0
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	607a      	str	r2, [r7, #4]
 8015e28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d106      	bne.n	8015e3e <tcp_eff_send_mss_netif+0x22>
 8015e30:	4b14      	ldr	r3, [pc, #80]	@ (8015e84 <tcp_eff_send_mss_netif+0x68>)
 8015e32:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015e36:	4914      	ldr	r1, [pc, #80]	@ (8015e88 <tcp_eff_send_mss_netif+0x6c>)
 8015e38:	4814      	ldr	r0, [pc, #80]	@ (8015e8c <tcp_eff_send_mss_netif+0x70>)
 8015e3a:	f008 f885 	bl	801df48 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d101      	bne.n	8015e48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015e44:	89fb      	ldrh	r3, [r7, #14]
 8015e46:	e019      	b.n	8015e7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015e4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015e4e:	8afb      	ldrh	r3, [r7, #22]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d012      	beq.n	8015e7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015e54:	2328      	movs	r3, #40	@ 0x28
 8015e56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015e58:	8afa      	ldrh	r2, [r7, #22]
 8015e5a:	8abb      	ldrh	r3, [r7, #20]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d904      	bls.n	8015e6a <tcp_eff_send_mss_netif+0x4e>
 8015e60:	8afa      	ldrh	r2, [r7, #22]
 8015e62:	8abb      	ldrh	r3, [r7, #20]
 8015e64:	1ad3      	subs	r3, r2, r3
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	e000      	b.n	8015e6c <tcp_eff_send_mss_netif+0x50>
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015e6e:	8a7a      	ldrh	r2, [r7, #18]
 8015e70:	89fb      	ldrh	r3, [r7, #14]
 8015e72:	4293      	cmp	r3, r2
 8015e74:	bf28      	it	cs
 8015e76:	4613      	movcs	r3, r2
 8015e78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015e7a:	89fb      	ldrh	r3, [r7, #14]
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801fc70 	.word	0x0801fc70
 8015e88:	0802037c 	.word	0x0802037c
 8015e8c:	0801fcb4 	.word	0x0801fcb4

08015e90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d119      	bne.n	8015ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015ea4:	4b10      	ldr	r3, [pc, #64]	@ (8015ee8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015ea6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015eaa:	4910      	ldr	r1, [pc, #64]	@ (8015eec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015eac:	4810      	ldr	r0, [pc, #64]	@ (8015ef0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015eae:	f008 f84b 	bl	801df48 <iprintf>

  while (pcb != NULL) {
 8015eb2:	e011      	b.n	8015ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	d108      	bne.n	8015ed2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	68db      	ldr	r3, [r3, #12]
 8015ec4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f7fe ffc4 	bl	8014e54 <tcp_abort>
      pcb = next;
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	60fb      	str	r3, [r7, #12]
 8015ed0:	e002      	b.n	8015ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1ea      	bne.n	8015eb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015ede:	bf00      	nop
 8015ee0:	bf00      	nop
 8015ee2:	3710      	adds	r7, #16
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	0801fc70 	.word	0x0801fc70
 8015eec:	080203a4 	.word	0x080203a4
 8015ef0:	0801fcb4 	.word	0x0801fcb4

08015ef4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d02a      	beq.n	8015f5a <tcp_netif_ip_addr_changed+0x66>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d026      	beq.n	8015f5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015f0c:	4b15      	ldr	r3, [pc, #84]	@ (8015f64 <tcp_netif_ip_addr_changed+0x70>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4619      	mov	r1, r3
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7ff ffbc 	bl	8015e90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015f18:	4b13      	ldr	r3, [pc, #76]	@ (8015f68 <tcp_netif_ip_addr_changed+0x74>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7ff ffb6 	bl	8015e90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d017      	beq.n	8015f5a <tcp_netif_ip_addr_changed+0x66>
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d013      	beq.n	8015f5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015f32:	4b0e      	ldr	r3, [pc, #56]	@ (8015f6c <tcp_netif_ip_addr_changed+0x78>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	60fb      	str	r3, [r7, #12]
 8015f38:	e00c      	b.n	8015f54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d103      	bne.n	8015f4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d1ef      	bne.n	8015f3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015f5a:	bf00      	nop
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	2002763c 	.word	0x2002763c
 8015f68:	20027634 	.word	0x20027634
 8015f6c:	20027638 	.word	0x20027638

08015f70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d007      	beq.n	8015f90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7ff fc3d 	bl	8015804 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015f90:	bf00      	nop
 8015f92:	3708      	adds	r7, #8
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015f98:	b590      	push	{r4, r7, lr}
 8015f9a:	b08d      	sub	sp, #52	@ 0x34
 8015f9c:	af04      	add	r7, sp, #16
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d105      	bne.n	8015fb4 <tcp_input+0x1c>
 8015fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8016218 <tcp_input+0x280>)
 8015faa:	2283      	movs	r2, #131	@ 0x83
 8015fac:	499b      	ldr	r1, [pc, #620]	@ (801621c <tcp_input+0x284>)
 8015fae:	489c      	ldr	r0, [pc, #624]	@ (8016220 <tcp_input+0x288>)
 8015fb0:	f007 ffca 	bl	801df48 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	4a9a      	ldr	r2, [pc, #616]	@ (8016224 <tcp_input+0x28c>)
 8015fba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	895b      	ldrh	r3, [r3, #10]
 8015fc0:	2b13      	cmp	r3, #19
 8015fc2:	f240 83d1 	bls.w	8016768 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015fc6:	4b98      	ldr	r3, [pc, #608]	@ (8016228 <tcp_input+0x290>)
 8015fc8:	695b      	ldr	r3, [r3, #20]
 8015fca:	4a97      	ldr	r2, [pc, #604]	@ (8016228 <tcp_input+0x290>)
 8015fcc:	6812      	ldr	r2, [r2, #0]
 8015fce:	4611      	mov	r1, r2
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f005 feef 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	f040 83c7 	bne.w	801676c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015fde:	4b92      	ldr	r3, [pc, #584]	@ (8016228 <tcp_input+0x290>)
 8015fe0:	695b      	ldr	r3, [r3, #20]
 8015fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015fe6:	2be0      	cmp	r3, #224	@ 0xe0
 8015fe8:	f000 83c0 	beq.w	801676c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015fec:	4b8d      	ldr	r3, [pc, #564]	@ (8016224 <tcp_input+0x28c>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	899b      	ldrh	r3, [r3, #12]
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7fc fd9b 	bl	8012b30 <lwip_htons>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	0b1b      	lsrs	r3, r3, #12
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	b2db      	uxtb	r3, r3
 8016002:	009b      	lsls	r3, r3, #2
 8016004:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016006:	7cbb      	ldrb	r3, [r7, #18]
 8016008:	2b13      	cmp	r3, #19
 801600a:	f240 83b1 	bls.w	8016770 <tcp_input+0x7d8>
 801600e:	7cbb      	ldrb	r3, [r7, #18]
 8016010:	b29a      	uxth	r2, r3
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	891b      	ldrh	r3, [r3, #8]
 8016016:	429a      	cmp	r2, r3
 8016018:	f200 83aa 	bhi.w	8016770 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801601c:	7cbb      	ldrb	r3, [r7, #18]
 801601e:	b29b      	uxth	r3, r3
 8016020:	3b14      	subs	r3, #20
 8016022:	b29a      	uxth	r2, r3
 8016024:	4b81      	ldr	r3, [pc, #516]	@ (801622c <tcp_input+0x294>)
 8016026:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016028:	4b81      	ldr	r3, [pc, #516]	@ (8016230 <tcp_input+0x298>)
 801602a:	2200      	movs	r2, #0
 801602c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	895a      	ldrh	r2, [r3, #10]
 8016032:	7cbb      	ldrb	r3, [r7, #18]
 8016034:	b29b      	uxth	r3, r3
 8016036:	429a      	cmp	r2, r3
 8016038:	d309      	bcc.n	801604e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801603a:	4b7c      	ldr	r3, [pc, #496]	@ (801622c <tcp_input+0x294>)
 801603c:	881a      	ldrh	r2, [r3, #0]
 801603e:	4b7d      	ldr	r3, [pc, #500]	@ (8016234 <tcp_input+0x29c>)
 8016040:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016042:	7cbb      	ldrb	r3, [r7, #18]
 8016044:	4619      	mov	r1, r3
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f7fe f8da 	bl	8014200 <pbuf_remove_header>
 801604c:	e04e      	b.n	80160ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d105      	bne.n	8016062 <tcp_input+0xca>
 8016056:	4b70      	ldr	r3, [pc, #448]	@ (8016218 <tcp_input+0x280>)
 8016058:	22c2      	movs	r2, #194	@ 0xc2
 801605a:	4977      	ldr	r1, [pc, #476]	@ (8016238 <tcp_input+0x2a0>)
 801605c:	4870      	ldr	r0, [pc, #448]	@ (8016220 <tcp_input+0x288>)
 801605e:	f007 ff73 	bl	801df48 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016062:	2114      	movs	r1, #20
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f7fe f8cb 	bl	8014200 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	895a      	ldrh	r2, [r3, #10]
 801606e:	4b71      	ldr	r3, [pc, #452]	@ (8016234 <tcp_input+0x29c>)
 8016070:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016072:	4b6e      	ldr	r3, [pc, #440]	@ (801622c <tcp_input+0x294>)
 8016074:	881a      	ldrh	r2, [r3, #0]
 8016076:	4b6f      	ldr	r3, [pc, #444]	@ (8016234 <tcp_input+0x29c>)
 8016078:	881b      	ldrh	r3, [r3, #0]
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801607e:	4b6d      	ldr	r3, [pc, #436]	@ (8016234 <tcp_input+0x29c>)
 8016080:	881b      	ldrh	r3, [r3, #0]
 8016082:	4619      	mov	r1, r3
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f7fe f8bb 	bl	8014200 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	895b      	ldrh	r3, [r3, #10]
 8016090:	8a3a      	ldrh	r2, [r7, #16]
 8016092:	429a      	cmp	r2, r3
 8016094:	f200 836e 	bhi.w	8016774 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	4a64      	ldr	r2, [pc, #400]	@ (8016230 <tcp_input+0x298>)
 80160a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	8a3a      	ldrh	r2, [r7, #16]
 80160a8:	4611      	mov	r1, r2
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7fe f8a8 	bl	8014200 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	891a      	ldrh	r2, [r3, #8]
 80160b4:	8a3b      	ldrh	r3, [r7, #16]
 80160b6:	1ad3      	subs	r3, r2, r3
 80160b8:	b29a      	uxth	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	895b      	ldrh	r3, [r3, #10]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d005      	beq.n	80160d2 <tcp_input+0x13a>
 80160c6:	4b54      	ldr	r3, [pc, #336]	@ (8016218 <tcp_input+0x280>)
 80160c8:	22df      	movs	r2, #223	@ 0xdf
 80160ca:	495c      	ldr	r1, [pc, #368]	@ (801623c <tcp_input+0x2a4>)
 80160cc:	4854      	ldr	r0, [pc, #336]	@ (8016220 <tcp_input+0x288>)
 80160ce:	f007 ff3b 	bl	801df48 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	891a      	ldrh	r2, [r3, #8]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	891b      	ldrh	r3, [r3, #8]
 80160dc:	429a      	cmp	r2, r3
 80160de:	d005      	beq.n	80160ec <tcp_input+0x154>
 80160e0:	4b4d      	ldr	r3, [pc, #308]	@ (8016218 <tcp_input+0x280>)
 80160e2:	22e0      	movs	r2, #224	@ 0xe0
 80160e4:	4956      	ldr	r1, [pc, #344]	@ (8016240 <tcp_input+0x2a8>)
 80160e6:	484e      	ldr	r0, [pc, #312]	@ (8016220 <tcp_input+0x288>)
 80160e8:	f007 ff2e 	bl	801df48 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80160ec:	4b4d      	ldr	r3, [pc, #308]	@ (8016224 <tcp_input+0x28c>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	881b      	ldrh	r3, [r3, #0]
 80160f2:	b29b      	uxth	r3, r3
 80160f4:	4a4b      	ldr	r2, [pc, #300]	@ (8016224 <tcp_input+0x28c>)
 80160f6:	6814      	ldr	r4, [r2, #0]
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7fc fd19 	bl	8012b30 <lwip_htons>
 80160fe:	4603      	mov	r3, r0
 8016100:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016102:	4b48      	ldr	r3, [pc, #288]	@ (8016224 <tcp_input+0x28c>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	885b      	ldrh	r3, [r3, #2]
 8016108:	b29b      	uxth	r3, r3
 801610a:	4a46      	ldr	r2, [pc, #280]	@ (8016224 <tcp_input+0x28c>)
 801610c:	6814      	ldr	r4, [r2, #0]
 801610e:	4618      	mov	r0, r3
 8016110:	f7fc fd0e 	bl	8012b30 <lwip_htons>
 8016114:	4603      	mov	r3, r0
 8016116:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016118:	4b42      	ldr	r3, [pc, #264]	@ (8016224 <tcp_input+0x28c>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	4a41      	ldr	r2, [pc, #260]	@ (8016224 <tcp_input+0x28c>)
 8016120:	6814      	ldr	r4, [r2, #0]
 8016122:	4618      	mov	r0, r3
 8016124:	f7fc fd1a 	bl	8012b5c <lwip_htonl>
 8016128:	4603      	mov	r3, r0
 801612a:	6063      	str	r3, [r4, #4]
 801612c:	6863      	ldr	r3, [r4, #4]
 801612e:	4a45      	ldr	r2, [pc, #276]	@ (8016244 <tcp_input+0x2ac>)
 8016130:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016132:	4b3c      	ldr	r3, [pc, #240]	@ (8016224 <tcp_input+0x28c>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	4a3a      	ldr	r2, [pc, #232]	@ (8016224 <tcp_input+0x28c>)
 801613a:	6814      	ldr	r4, [r2, #0]
 801613c:	4618      	mov	r0, r3
 801613e:	f7fc fd0d 	bl	8012b5c <lwip_htonl>
 8016142:	4603      	mov	r3, r0
 8016144:	60a3      	str	r3, [r4, #8]
 8016146:	68a3      	ldr	r3, [r4, #8]
 8016148:	4a3f      	ldr	r2, [pc, #252]	@ (8016248 <tcp_input+0x2b0>)
 801614a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801614c:	4b35      	ldr	r3, [pc, #212]	@ (8016224 <tcp_input+0x28c>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	89db      	ldrh	r3, [r3, #14]
 8016152:	b29b      	uxth	r3, r3
 8016154:	4a33      	ldr	r2, [pc, #204]	@ (8016224 <tcp_input+0x28c>)
 8016156:	6814      	ldr	r4, [r2, #0]
 8016158:	4618      	mov	r0, r3
 801615a:	f7fc fce9 	bl	8012b30 <lwip_htons>
 801615e:	4603      	mov	r3, r0
 8016160:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016162:	4b30      	ldr	r3, [pc, #192]	@ (8016224 <tcp_input+0x28c>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	899b      	ldrh	r3, [r3, #12]
 8016168:	b29b      	uxth	r3, r3
 801616a:	4618      	mov	r0, r3
 801616c:	f7fc fce0 	bl	8012b30 <lwip_htons>
 8016170:	4603      	mov	r3, r0
 8016172:	b2db      	uxtb	r3, r3
 8016174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016178:	b2da      	uxtb	r2, r3
 801617a:	4b34      	ldr	r3, [pc, #208]	@ (801624c <tcp_input+0x2b4>)
 801617c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	891a      	ldrh	r2, [r3, #8]
 8016182:	4b33      	ldr	r3, [pc, #204]	@ (8016250 <tcp_input+0x2b8>)
 8016184:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016186:	4b31      	ldr	r3, [pc, #196]	@ (801624c <tcp_input+0x2b4>)
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	f003 0303 	and.w	r3, r3, #3
 801618e:	2b00      	cmp	r3, #0
 8016190:	d00c      	beq.n	80161ac <tcp_input+0x214>
    tcplen++;
 8016192:	4b2f      	ldr	r3, [pc, #188]	@ (8016250 <tcp_input+0x2b8>)
 8016194:	881b      	ldrh	r3, [r3, #0]
 8016196:	3301      	adds	r3, #1
 8016198:	b29a      	uxth	r2, r3
 801619a:	4b2d      	ldr	r3, [pc, #180]	@ (8016250 <tcp_input+0x2b8>)
 801619c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	891a      	ldrh	r2, [r3, #8]
 80161a2:	4b2b      	ldr	r3, [pc, #172]	@ (8016250 <tcp_input+0x2b8>)
 80161a4:	881b      	ldrh	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	f200 82e6 	bhi.w	8016778 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80161ac:	2300      	movs	r3, #0
 80161ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80161b0:	4b28      	ldr	r3, [pc, #160]	@ (8016254 <tcp_input+0x2bc>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	61fb      	str	r3, [r7, #28]
 80161b6:	e09d      	b.n	80162f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	7d1b      	ldrb	r3, [r3, #20]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d105      	bne.n	80161cc <tcp_input+0x234>
 80161c0:	4b15      	ldr	r3, [pc, #84]	@ (8016218 <tcp_input+0x280>)
 80161c2:	22fb      	movs	r2, #251	@ 0xfb
 80161c4:	4924      	ldr	r1, [pc, #144]	@ (8016258 <tcp_input+0x2c0>)
 80161c6:	4816      	ldr	r0, [pc, #88]	@ (8016220 <tcp_input+0x288>)
 80161c8:	f007 febe 	bl	801df48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80161cc:	69fb      	ldr	r3, [r7, #28]
 80161ce:	7d1b      	ldrb	r3, [r3, #20]
 80161d0:	2b0a      	cmp	r3, #10
 80161d2:	d105      	bne.n	80161e0 <tcp_input+0x248>
 80161d4:	4b10      	ldr	r3, [pc, #64]	@ (8016218 <tcp_input+0x280>)
 80161d6:	22fc      	movs	r2, #252	@ 0xfc
 80161d8:	4920      	ldr	r1, [pc, #128]	@ (801625c <tcp_input+0x2c4>)
 80161da:	4811      	ldr	r0, [pc, #68]	@ (8016220 <tcp_input+0x288>)
 80161dc:	f007 feb4 	bl	801df48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80161e0:	69fb      	ldr	r3, [r7, #28]
 80161e2:	7d1b      	ldrb	r3, [r3, #20]
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d105      	bne.n	80161f4 <tcp_input+0x25c>
 80161e8:	4b0b      	ldr	r3, [pc, #44]	@ (8016218 <tcp_input+0x280>)
 80161ea:	22fd      	movs	r2, #253	@ 0xfd
 80161ec:	491c      	ldr	r1, [pc, #112]	@ (8016260 <tcp_input+0x2c8>)
 80161ee:	480c      	ldr	r0, [pc, #48]	@ (8016220 <tcp_input+0x288>)
 80161f0:	f007 feaa 	bl	801df48 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	7a1b      	ldrb	r3, [r3, #8]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d033      	beq.n	8016264 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	7a1a      	ldrb	r2, [r3, #8]
 8016200:	4b09      	ldr	r3, [pc, #36]	@ (8016228 <tcp_input+0x290>)
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016208:	3301      	adds	r3, #1
 801620a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801620c:	429a      	cmp	r2, r3
 801620e:	d029      	beq.n	8016264 <tcp_input+0x2cc>
      prev = pcb;
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	61bb      	str	r3, [r7, #24]
      continue;
 8016214:	e06b      	b.n	80162ee <tcp_input+0x356>
 8016216:	bf00      	nop
 8016218:	080203d8 	.word	0x080203d8
 801621c:	0802040c 	.word	0x0802040c
 8016220:	08020424 	.word	0x08020424
 8016224:	20027658 	.word	0x20027658
 8016228:	20024530 	.word	0x20024530
 801622c:	2002765c 	.word	0x2002765c
 8016230:	20027660 	.word	0x20027660
 8016234:	2002765e 	.word	0x2002765e
 8016238:	0802044c 	.word	0x0802044c
 801623c:	0802045c 	.word	0x0802045c
 8016240:	08020468 	.word	0x08020468
 8016244:	20027668 	.word	0x20027668
 8016248:	2002766c 	.word	0x2002766c
 801624c:	20027674 	.word	0x20027674
 8016250:	20027672 	.word	0x20027672
 8016254:	2002763c 	.word	0x2002763c
 8016258:	08020488 	.word	0x08020488
 801625c:	080204b0 	.word	0x080204b0
 8016260:	080204dc 	.word	0x080204dc
    }

    if (pcb->remote_port == tcphdr->src &&
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	8b1a      	ldrh	r2, [r3, #24]
 8016268:	4b72      	ldr	r3, [pc, #456]	@ (8016434 <tcp_input+0x49c>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	881b      	ldrh	r3, [r3, #0]
 801626e:	b29b      	uxth	r3, r3
 8016270:	429a      	cmp	r2, r3
 8016272:	d13a      	bne.n	80162ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016274:	69fb      	ldr	r3, [r7, #28]
 8016276:	8ada      	ldrh	r2, [r3, #22]
 8016278:	4b6e      	ldr	r3, [pc, #440]	@ (8016434 <tcp_input+0x49c>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	885b      	ldrh	r3, [r3, #2]
 801627e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016280:	429a      	cmp	r2, r3
 8016282:	d132      	bne.n	80162ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	685a      	ldr	r2, [r3, #4]
 8016288:	4b6b      	ldr	r3, [pc, #428]	@ (8016438 <tcp_input+0x4a0>)
 801628a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801628c:	429a      	cmp	r2, r3
 801628e:	d12c      	bne.n	80162ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	4b68      	ldr	r3, [pc, #416]	@ (8016438 <tcp_input+0x4a0>)
 8016296:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016298:	429a      	cmp	r2, r3
 801629a:	d126      	bne.n	80162ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	69fa      	ldr	r2, [r7, #28]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d106      	bne.n	80162b4 <tcp_input+0x31c>
 80162a6:	4b65      	ldr	r3, [pc, #404]	@ (801643c <tcp_input+0x4a4>)
 80162a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80162ac:	4964      	ldr	r1, [pc, #400]	@ (8016440 <tcp_input+0x4a8>)
 80162ae:	4865      	ldr	r0, [pc, #404]	@ (8016444 <tcp_input+0x4ac>)
 80162b0:	f007 fe4a 	bl	801df48 <iprintf>
      if (prev != NULL) {
 80162b4:	69bb      	ldr	r3, [r7, #24]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d00a      	beq.n	80162d0 <tcp_input+0x338>
        prev->next = pcb->next;
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	68da      	ldr	r2, [r3, #12]
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80162c2:	4b61      	ldr	r3, [pc, #388]	@ (8016448 <tcp_input+0x4b0>)
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80162ca:	4a5f      	ldr	r2, [pc, #380]	@ (8016448 <tcp_input+0x4b0>)
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	69fa      	ldr	r2, [r7, #28]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d111      	bne.n	80162fe <tcp_input+0x366>
 80162da:	4b58      	ldr	r3, [pc, #352]	@ (801643c <tcp_input+0x4a4>)
 80162dc:	f240 1215 	movw	r2, #277	@ 0x115
 80162e0:	495a      	ldr	r1, [pc, #360]	@ (801644c <tcp_input+0x4b4>)
 80162e2:	4858      	ldr	r0, [pc, #352]	@ (8016444 <tcp_input+0x4ac>)
 80162e4:	f007 fe30 	bl	801df48 <iprintf>
      break;
 80162e8:	e009      	b.n	80162fe <tcp_input+0x366>
    }
    prev = pcb;
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80162ee:	69fb      	ldr	r3, [r7, #28]
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	61fb      	str	r3, [r7, #28]
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f47f af5e 	bne.w	80161b8 <tcp_input+0x220>
 80162fc:	e000      	b.n	8016300 <tcp_input+0x368>
      break;
 80162fe:	bf00      	nop
  }

  if (pcb == NULL) {
 8016300:	69fb      	ldr	r3, [r7, #28]
 8016302:	2b00      	cmp	r3, #0
 8016304:	f040 80aa 	bne.w	801645c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016308:	4b51      	ldr	r3, [pc, #324]	@ (8016450 <tcp_input+0x4b8>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	61fb      	str	r3, [r7, #28]
 801630e:	e03f      	b.n	8016390 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	7d1b      	ldrb	r3, [r3, #20]
 8016314:	2b0a      	cmp	r3, #10
 8016316:	d006      	beq.n	8016326 <tcp_input+0x38e>
 8016318:	4b48      	ldr	r3, [pc, #288]	@ (801643c <tcp_input+0x4a4>)
 801631a:	f240 121f 	movw	r2, #287	@ 0x11f
 801631e:	494d      	ldr	r1, [pc, #308]	@ (8016454 <tcp_input+0x4bc>)
 8016320:	4848      	ldr	r0, [pc, #288]	@ (8016444 <tcp_input+0x4ac>)
 8016322:	f007 fe11 	bl	801df48 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	7a1b      	ldrb	r3, [r3, #8]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d009      	beq.n	8016342 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	7a1a      	ldrb	r2, [r3, #8]
 8016332:	4b41      	ldr	r3, [pc, #260]	@ (8016438 <tcp_input+0x4a0>)
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801633a:	3301      	adds	r3, #1
 801633c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801633e:	429a      	cmp	r2, r3
 8016340:	d122      	bne.n	8016388 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	8b1a      	ldrh	r2, [r3, #24]
 8016346:	4b3b      	ldr	r3, [pc, #236]	@ (8016434 <tcp_input+0x49c>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	881b      	ldrh	r3, [r3, #0]
 801634c:	b29b      	uxth	r3, r3
 801634e:	429a      	cmp	r2, r3
 8016350:	d11b      	bne.n	801638a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	8ada      	ldrh	r2, [r3, #22]
 8016356:	4b37      	ldr	r3, [pc, #220]	@ (8016434 <tcp_input+0x49c>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	885b      	ldrh	r3, [r3, #2]
 801635c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801635e:	429a      	cmp	r2, r3
 8016360:	d113      	bne.n	801638a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	685a      	ldr	r2, [r3, #4]
 8016366:	4b34      	ldr	r3, [pc, #208]	@ (8016438 <tcp_input+0x4a0>)
 8016368:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801636a:	429a      	cmp	r2, r3
 801636c:	d10d      	bne.n	801638a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	4b31      	ldr	r3, [pc, #196]	@ (8016438 <tcp_input+0x4a0>)
 8016374:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016376:	429a      	cmp	r2, r3
 8016378:	d107      	bne.n	801638a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801637a:	69f8      	ldr	r0, [r7, #28]
 801637c:	f000 fb56 	bl	8016a2c <tcp_timewait_input>
        }
        pbuf_free(p);
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f7fd ffc3 	bl	801430c <pbuf_free>
        return;
 8016386:	e1fd      	b.n	8016784 <tcp_input+0x7ec>
        continue;
 8016388:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	61fb      	str	r3, [r7, #28]
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d1bc      	bne.n	8016310 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016396:	2300      	movs	r3, #0
 8016398:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801639a:	4b2f      	ldr	r3, [pc, #188]	@ (8016458 <tcp_input+0x4c0>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	617b      	str	r3, [r7, #20]
 80163a0:	e02a      	b.n	80163f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	7a1b      	ldrb	r3, [r3, #8]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d00c      	beq.n	80163c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	7a1a      	ldrb	r2, [r3, #8]
 80163ae:	4b22      	ldr	r3, [pc, #136]	@ (8016438 <tcp_input+0x4a0>)
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163b6:	3301      	adds	r3, #1
 80163b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d002      	beq.n	80163c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	61bb      	str	r3, [r7, #24]
        continue;
 80163c2:	e016      	b.n	80163f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	8ada      	ldrh	r2, [r3, #22]
 80163c8:	4b1a      	ldr	r3, [pc, #104]	@ (8016434 <tcp_input+0x49c>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	885b      	ldrh	r3, [r3, #2]
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d10c      	bne.n	80163ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	4b17      	ldr	r3, [pc, #92]	@ (8016438 <tcp_input+0x4a0>)
 80163da:	695b      	ldr	r3, [r3, #20]
 80163dc:	429a      	cmp	r2, r3
 80163de:	d00f      	beq.n	8016400 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d00d      	beq.n	8016402 <tcp_input+0x46a>
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d009      	beq.n	8016402 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	68db      	ldr	r3, [r3, #12]
 80163f6:	617b      	str	r3, [r7, #20]
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d1d1      	bne.n	80163a2 <tcp_input+0x40a>
 80163fe:	e000      	b.n	8016402 <tcp_input+0x46a>
            break;
 8016400:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016402:	697b      	ldr	r3, [r7, #20]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d029      	beq.n	801645c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00a      	beq.n	8016424 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801640e:	697b      	ldr	r3, [r7, #20]
 8016410:	68da      	ldr	r2, [r3, #12]
 8016412:	69bb      	ldr	r3, [r7, #24]
 8016414:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016416:	4b10      	ldr	r3, [pc, #64]	@ (8016458 <tcp_input+0x4c0>)
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	697b      	ldr	r3, [r7, #20]
 801641c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801641e:	4a0e      	ldr	r2, [pc, #56]	@ (8016458 <tcp_input+0x4c0>)
 8016420:	697b      	ldr	r3, [r7, #20]
 8016422:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016424:	6978      	ldr	r0, [r7, #20]
 8016426:	f000 fa03 	bl	8016830 <tcp_listen_input>
      }
      pbuf_free(p);
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f7fd ff6e 	bl	801430c <pbuf_free>
      return;
 8016430:	e1a8      	b.n	8016784 <tcp_input+0x7ec>
 8016432:	bf00      	nop
 8016434:	20027658 	.word	0x20027658
 8016438:	20024530 	.word	0x20024530
 801643c:	080203d8 	.word	0x080203d8
 8016440:	08020504 	.word	0x08020504
 8016444:	08020424 	.word	0x08020424
 8016448:	2002763c 	.word	0x2002763c
 801644c:	08020530 	.word	0x08020530
 8016450:	20027640 	.word	0x20027640
 8016454:	0802055c 	.word	0x0802055c
 8016458:	20027638 	.word	0x20027638
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	2b00      	cmp	r3, #0
 8016460:	f000 8158 	beq.w	8016714 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016464:	4b95      	ldr	r3, [pc, #596]	@ (80166bc <tcp_input+0x724>)
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	891a      	ldrh	r2, [r3, #8]
 801646e:	4b93      	ldr	r3, [pc, #588]	@ (80166bc <tcp_input+0x724>)
 8016470:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016472:	4a92      	ldr	r2, [pc, #584]	@ (80166bc <tcp_input+0x724>)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016478:	4b91      	ldr	r3, [pc, #580]	@ (80166c0 <tcp_input+0x728>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4a8f      	ldr	r2, [pc, #572]	@ (80166bc <tcp_input+0x724>)
 801647e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016480:	4b90      	ldr	r3, [pc, #576]	@ (80166c4 <tcp_input+0x72c>)
 8016482:	2200      	movs	r2, #0
 8016484:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016486:	4b90      	ldr	r3, [pc, #576]	@ (80166c8 <tcp_input+0x730>)
 8016488:	2200      	movs	r2, #0
 801648a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801648c:	4b8f      	ldr	r3, [pc, #572]	@ (80166cc <tcp_input+0x734>)
 801648e:	2200      	movs	r2, #0
 8016490:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016492:	4b8f      	ldr	r3, [pc, #572]	@ (80166d0 <tcp_input+0x738>)
 8016494:	781b      	ldrb	r3, [r3, #0]
 8016496:	f003 0308 	and.w	r3, r3, #8
 801649a:	2b00      	cmp	r3, #0
 801649c:	d006      	beq.n	80164ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	7b5b      	ldrb	r3, [r3, #13]
 80164a2:	f043 0301 	orr.w	r3, r3, #1
 80164a6:	b2da      	uxtb	r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80164ac:	69fb      	ldr	r3, [r7, #28]
 80164ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d017      	beq.n	80164e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80164b4:	69f8      	ldr	r0, [r7, #28]
 80164b6:	f7ff f929 	bl	801570c <tcp_process_refused_data>
 80164ba:	4603      	mov	r3, r0
 80164bc:	f113 0f0d 	cmn.w	r3, #13
 80164c0:	d007      	beq.n	80164d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d00c      	beq.n	80164e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80164ca:	4b82      	ldr	r3, [pc, #520]	@ (80166d4 <tcp_input+0x73c>)
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d008      	beq.n	80164e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80164d2:	69fb      	ldr	r3, [r7, #28]
 80164d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	f040 80e3 	bne.w	80166a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80164dc:	69f8      	ldr	r0, [r7, #28]
 80164de:	f003 f9a7 	bl	8019830 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80164e2:	e0de      	b.n	80166a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80164e4:	4a7c      	ldr	r2, [pc, #496]	@ (80166d8 <tcp_input+0x740>)
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80164ea:	69f8      	ldr	r0, [r7, #28]
 80164ec:	f000 fb18 	bl	8016b20 <tcp_process>
 80164f0:	4603      	mov	r3, r0
 80164f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80164f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80164f8:	f113 0f0d 	cmn.w	r3, #13
 80164fc:	f000 80d3 	beq.w	80166a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8016500:	4b71      	ldr	r3, [pc, #452]	@ (80166c8 <tcp_input+0x730>)
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	f003 0308 	and.w	r3, r3, #8
 8016508:	2b00      	cmp	r3, #0
 801650a:	d015      	beq.n	8016538 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016512:	2b00      	cmp	r3, #0
 8016514:	d008      	beq.n	8016528 <tcp_input+0x590>
 8016516:	69fb      	ldr	r3, [r7, #28]
 8016518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801651c:	69fa      	ldr	r2, [r7, #28]
 801651e:	6912      	ldr	r2, [r2, #16]
 8016520:	f06f 010d 	mvn.w	r1, #13
 8016524:	4610      	mov	r0, r2
 8016526:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016528:	69f9      	ldr	r1, [r7, #28]
 801652a:	486c      	ldr	r0, [pc, #432]	@ (80166dc <tcp_input+0x744>)
 801652c:	f7ff fbbc 	bl	8015ca8 <tcp_pcb_remove>
        tcp_free(pcb);
 8016530:	69f8      	ldr	r0, [r7, #28]
 8016532:	f7fe f9a7 	bl	8014884 <tcp_free>
 8016536:	e0da      	b.n	80166ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016538:	2300      	movs	r3, #0
 801653a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801653c:	4b63      	ldr	r3, [pc, #396]	@ (80166cc <tcp_input+0x734>)
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d01d      	beq.n	8016580 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016544:	4b61      	ldr	r3, [pc, #388]	@ (80166cc <tcp_input+0x734>)
 8016546:	881b      	ldrh	r3, [r3, #0]
 8016548:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801654a:	69fb      	ldr	r3, [r7, #28]
 801654c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016550:	2b00      	cmp	r3, #0
 8016552:	d00a      	beq.n	801656a <tcp_input+0x5d2>
 8016554:	69fb      	ldr	r3, [r7, #28]
 8016556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801655a:	69fa      	ldr	r2, [r7, #28]
 801655c:	6910      	ldr	r0, [r2, #16]
 801655e:	89fa      	ldrh	r2, [r7, #14]
 8016560:	69f9      	ldr	r1, [r7, #28]
 8016562:	4798      	blx	r3
 8016564:	4603      	mov	r3, r0
 8016566:	74fb      	strb	r3, [r7, #19]
 8016568:	e001      	b.n	801656e <tcp_input+0x5d6>
 801656a:	2300      	movs	r3, #0
 801656c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801656e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016572:	f113 0f0d 	cmn.w	r3, #13
 8016576:	f000 8098 	beq.w	80166aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801657a:	4b54      	ldr	r3, [pc, #336]	@ (80166cc <tcp_input+0x734>)
 801657c:	2200      	movs	r2, #0
 801657e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016580:	69f8      	ldr	r0, [r7, #28]
 8016582:	f000 f915 	bl	80167b0 <tcp_input_delayed_close>
 8016586:	4603      	mov	r3, r0
 8016588:	2b00      	cmp	r3, #0
 801658a:	f040 8090 	bne.w	80166ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801658e:	4b4d      	ldr	r3, [pc, #308]	@ (80166c4 <tcp_input+0x72c>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d041      	beq.n	801661a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801659a:	2b00      	cmp	r3, #0
 801659c:	d006      	beq.n	80165ac <tcp_input+0x614>
 801659e:	4b50      	ldr	r3, [pc, #320]	@ (80166e0 <tcp_input+0x748>)
 80165a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80165a4:	494f      	ldr	r1, [pc, #316]	@ (80166e4 <tcp_input+0x74c>)
 80165a6:	4850      	ldr	r0, [pc, #320]	@ (80166e8 <tcp_input+0x750>)
 80165a8:	f007 fcce 	bl	801df48 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80165ac:	69fb      	ldr	r3, [r7, #28]
 80165ae:	8b5b      	ldrh	r3, [r3, #26]
 80165b0:	f003 0310 	and.w	r3, r3, #16
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d008      	beq.n	80165ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80165b8:	4b42      	ldr	r3, [pc, #264]	@ (80166c4 <tcp_input+0x72c>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4618      	mov	r0, r3
 80165be:	f7fd fea5 	bl	801430c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80165c2:	69f8      	ldr	r0, [r7, #28]
 80165c4:	f7fe fc46 	bl	8014e54 <tcp_abort>
            goto aborted;
 80165c8:	e091      	b.n	80166ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00c      	beq.n	80165ee <tcp_input+0x656>
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	6918      	ldr	r0, [r3, #16]
 80165de:	4b39      	ldr	r3, [pc, #228]	@ (80166c4 <tcp_input+0x72c>)
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	2300      	movs	r3, #0
 80165e4:	69f9      	ldr	r1, [r7, #28]
 80165e6:	47a0      	blx	r4
 80165e8:	4603      	mov	r3, r0
 80165ea:	74fb      	strb	r3, [r7, #19]
 80165ec:	e008      	b.n	8016600 <tcp_input+0x668>
 80165ee:	4b35      	ldr	r3, [pc, #212]	@ (80166c4 <tcp_input+0x72c>)
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	2300      	movs	r3, #0
 80165f4:	69f9      	ldr	r1, [r7, #28]
 80165f6:	2000      	movs	r0, #0
 80165f8:	f7ff f95e 	bl	80158b8 <tcp_recv_null>
 80165fc:	4603      	mov	r3, r0
 80165fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016604:	f113 0f0d 	cmn.w	r3, #13
 8016608:	d053      	beq.n	80166b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801660a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d003      	beq.n	801661a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016612:	4b2c      	ldr	r3, [pc, #176]	@ (80166c4 <tcp_input+0x72c>)
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801661a:	4b2b      	ldr	r3, [pc, #172]	@ (80166c8 <tcp_input+0x730>)
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	f003 0320 	and.w	r3, r3, #32
 8016622:	2b00      	cmp	r3, #0
 8016624:	d030      	beq.n	8016688 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801662a:	2b00      	cmp	r3, #0
 801662c:	d009      	beq.n	8016642 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016632:	7b5a      	ldrb	r2, [r3, #13]
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016638:	f042 0220 	orr.w	r2, r2, #32
 801663c:	b2d2      	uxtb	r2, r2
 801663e:	735a      	strb	r2, [r3, #13]
 8016640:	e022      	b.n	8016688 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016646:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801664a:	d005      	beq.n	8016658 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016650:	3301      	adds	r3, #1
 8016652:	b29a      	uxth	r2, r3
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00b      	beq.n	801667a <tcp_input+0x6e2>
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	6918      	ldr	r0, [r3, #16]
 801666c:	2300      	movs	r3, #0
 801666e:	2200      	movs	r2, #0
 8016670:	69f9      	ldr	r1, [r7, #28]
 8016672:	47a0      	blx	r4
 8016674:	4603      	mov	r3, r0
 8016676:	74fb      	strb	r3, [r7, #19]
 8016678:	e001      	b.n	801667e <tcp_input+0x6e6>
 801667a:	2300      	movs	r3, #0
 801667c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801667e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016682:	f113 0f0d 	cmn.w	r3, #13
 8016686:	d016      	beq.n	80166b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016688:	4b13      	ldr	r3, [pc, #76]	@ (80166d8 <tcp_input+0x740>)
 801668a:	2200      	movs	r2, #0
 801668c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801668e:	69f8      	ldr	r0, [r7, #28]
 8016690:	f000 f88e 	bl	80167b0 <tcp_input_delayed_close>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d128      	bne.n	80166ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801669a:	69f8      	ldr	r0, [r7, #28]
 801669c:	f002 fac2 	bl	8018c24 <tcp_output>
 80166a0:	e025      	b.n	80166ee <tcp_input+0x756>
        goto aborted;
 80166a2:	bf00      	nop
 80166a4:	e023      	b.n	80166ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80166a6:	bf00      	nop
 80166a8:	e021      	b.n	80166ee <tcp_input+0x756>
              goto aborted;
 80166aa:	bf00      	nop
 80166ac:	e01f      	b.n	80166ee <tcp_input+0x756>
          goto aborted;
 80166ae:	bf00      	nop
 80166b0:	e01d      	b.n	80166ee <tcp_input+0x756>
            goto aborted;
 80166b2:	bf00      	nop
 80166b4:	e01b      	b.n	80166ee <tcp_input+0x756>
              goto aborted;
 80166b6:	bf00      	nop
 80166b8:	e019      	b.n	80166ee <tcp_input+0x756>
 80166ba:	bf00      	nop
 80166bc:	20027648 	.word	0x20027648
 80166c0:	20027658 	.word	0x20027658
 80166c4:	20027678 	.word	0x20027678
 80166c8:	20027675 	.word	0x20027675
 80166cc:	20027670 	.word	0x20027670
 80166d0:	20027674 	.word	0x20027674
 80166d4:	20027672 	.word	0x20027672
 80166d8:	2002767c 	.word	0x2002767c
 80166dc:	2002763c 	.word	0x2002763c
 80166e0:	080203d8 	.word	0x080203d8
 80166e4:	0802058c 	.word	0x0802058c
 80166e8:	08020424 	.word	0x08020424
          goto aborted;
 80166ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80166ee:	4b27      	ldr	r3, [pc, #156]	@ (801678c <tcp_input+0x7f4>)
 80166f0:	2200      	movs	r2, #0
 80166f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80166f4:	4b26      	ldr	r3, [pc, #152]	@ (8016790 <tcp_input+0x7f8>)
 80166f6:	2200      	movs	r2, #0
 80166f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80166fa:	4b26      	ldr	r3, [pc, #152]	@ (8016794 <tcp_input+0x7fc>)
 80166fc:	685b      	ldr	r3, [r3, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d03f      	beq.n	8016782 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016702:	4b24      	ldr	r3, [pc, #144]	@ (8016794 <tcp_input+0x7fc>)
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	4618      	mov	r0, r3
 8016708:	f7fd fe00 	bl	801430c <pbuf_free>
      inseg.p = NULL;
 801670c:	4b21      	ldr	r3, [pc, #132]	@ (8016794 <tcp_input+0x7fc>)
 801670e:	2200      	movs	r2, #0
 8016710:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016712:	e036      	b.n	8016782 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016714:	4b20      	ldr	r3, [pc, #128]	@ (8016798 <tcp_input+0x800>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	899b      	ldrh	r3, [r3, #12]
 801671a:	b29b      	uxth	r3, r3
 801671c:	4618      	mov	r0, r3
 801671e:	f7fc fa07 	bl	8012b30 <lwip_htons>
 8016722:	4603      	mov	r3, r0
 8016724:	b2db      	uxtb	r3, r3
 8016726:	f003 0304 	and.w	r3, r3, #4
 801672a:	2b00      	cmp	r3, #0
 801672c:	d118      	bne.n	8016760 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801672e:	4b1b      	ldr	r3, [pc, #108]	@ (801679c <tcp_input+0x804>)
 8016730:	6819      	ldr	r1, [r3, #0]
 8016732:	4b1b      	ldr	r3, [pc, #108]	@ (80167a0 <tcp_input+0x808>)
 8016734:	881b      	ldrh	r3, [r3, #0]
 8016736:	461a      	mov	r2, r3
 8016738:	4b1a      	ldr	r3, [pc, #104]	@ (80167a4 <tcp_input+0x80c>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801673e:	4b16      	ldr	r3, [pc, #88]	@ (8016798 <tcp_input+0x800>)
 8016740:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016742:	885b      	ldrh	r3, [r3, #2]
 8016744:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016746:	4a14      	ldr	r2, [pc, #80]	@ (8016798 <tcp_input+0x800>)
 8016748:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801674a:	8812      	ldrh	r2, [r2, #0]
 801674c:	b292      	uxth	r2, r2
 801674e:	9202      	str	r2, [sp, #8]
 8016750:	9301      	str	r3, [sp, #4]
 8016752:	4b15      	ldr	r3, [pc, #84]	@ (80167a8 <tcp_input+0x810>)
 8016754:	9300      	str	r3, [sp, #0]
 8016756:	4b15      	ldr	r3, [pc, #84]	@ (80167ac <tcp_input+0x814>)
 8016758:	4602      	mov	r2, r0
 801675a:	2000      	movs	r0, #0
 801675c:	f003 f816 	bl	801978c <tcp_rst>
    pbuf_free(p);
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f7fd fdd3 	bl	801430c <pbuf_free>
  return;
 8016766:	e00c      	b.n	8016782 <tcp_input+0x7ea>
    goto dropped;
 8016768:	bf00      	nop
 801676a:	e006      	b.n	801677a <tcp_input+0x7e2>
    goto dropped;
 801676c:	bf00      	nop
 801676e:	e004      	b.n	801677a <tcp_input+0x7e2>
    goto dropped;
 8016770:	bf00      	nop
 8016772:	e002      	b.n	801677a <tcp_input+0x7e2>
      goto dropped;
 8016774:	bf00      	nop
 8016776:	e000      	b.n	801677a <tcp_input+0x7e2>
      goto dropped;
 8016778:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801677a:	6878      	ldr	r0, [r7, #4]
 801677c:	f7fd fdc6 	bl	801430c <pbuf_free>
 8016780:	e000      	b.n	8016784 <tcp_input+0x7ec>
  return;
 8016782:	bf00      	nop
}
 8016784:	3724      	adds	r7, #36	@ 0x24
 8016786:	46bd      	mov	sp, r7
 8016788:	bd90      	pop	{r4, r7, pc}
 801678a:	bf00      	nop
 801678c:	2002767c 	.word	0x2002767c
 8016790:	20027678 	.word	0x20027678
 8016794:	20027648 	.word	0x20027648
 8016798:	20027658 	.word	0x20027658
 801679c:	2002766c 	.word	0x2002766c
 80167a0:	20027672 	.word	0x20027672
 80167a4:	20027668 	.word	0x20027668
 80167a8:	20024540 	.word	0x20024540
 80167ac:	20024544 	.word	0x20024544

080167b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <tcp_input_delayed_close+0x1c>
 80167be:	4b17      	ldr	r3, [pc, #92]	@ (801681c <tcp_input_delayed_close+0x6c>)
 80167c0:	f240 225a 	movw	r2, #602	@ 0x25a
 80167c4:	4916      	ldr	r1, [pc, #88]	@ (8016820 <tcp_input_delayed_close+0x70>)
 80167c6:	4817      	ldr	r0, [pc, #92]	@ (8016824 <tcp_input_delayed_close+0x74>)
 80167c8:	f007 fbbe 	bl	801df48 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80167cc:	4b16      	ldr	r3, [pc, #88]	@ (8016828 <tcp_input_delayed_close+0x78>)
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	f003 0310 	and.w	r3, r3, #16
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d01c      	beq.n	8016812 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	8b5b      	ldrh	r3, [r3, #26]
 80167dc:	f003 0310 	and.w	r3, r3, #16
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d10d      	bne.n	8016800 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d008      	beq.n	8016800 <tcp_input_delayed_close+0x50>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	6912      	ldr	r2, [r2, #16]
 80167f8:	f06f 010e 	mvn.w	r1, #14
 80167fc:	4610      	mov	r0, r2
 80167fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016800:	6879      	ldr	r1, [r7, #4]
 8016802:	480a      	ldr	r0, [pc, #40]	@ (801682c <tcp_input_delayed_close+0x7c>)
 8016804:	f7ff fa50 	bl	8015ca8 <tcp_pcb_remove>
    tcp_free(pcb);
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f7fe f83b 	bl	8014884 <tcp_free>
    return 1;
 801680e:	2301      	movs	r3, #1
 8016810:	e000      	b.n	8016814 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016812:	2300      	movs	r3, #0
}
 8016814:	4618      	mov	r0, r3
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}
 801681c:	080203d8 	.word	0x080203d8
 8016820:	080205a8 	.word	0x080205a8
 8016824:	08020424 	.word	0x08020424
 8016828:	20027675 	.word	0x20027675
 801682c:	2002763c 	.word	0x2002763c

08016830 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016830:	b590      	push	{r4, r7, lr}
 8016832:	b08b      	sub	sp, #44	@ 0x2c
 8016834:	af04      	add	r7, sp, #16
 8016836:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016838:	4b6f      	ldr	r3, [pc, #444]	@ (80169f8 <tcp_listen_input+0x1c8>)
 801683a:	781b      	ldrb	r3, [r3, #0]
 801683c:	f003 0304 	and.w	r3, r3, #4
 8016840:	2b00      	cmp	r3, #0
 8016842:	f040 80d2 	bne.w	80169ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d106      	bne.n	801685a <tcp_listen_input+0x2a>
 801684c:	4b6b      	ldr	r3, [pc, #428]	@ (80169fc <tcp_listen_input+0x1cc>)
 801684e:	f240 2281 	movw	r2, #641	@ 0x281
 8016852:	496b      	ldr	r1, [pc, #428]	@ (8016a00 <tcp_listen_input+0x1d0>)
 8016854:	486b      	ldr	r0, [pc, #428]	@ (8016a04 <tcp_listen_input+0x1d4>)
 8016856:	f007 fb77 	bl	801df48 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801685a:	4b67      	ldr	r3, [pc, #412]	@ (80169f8 <tcp_listen_input+0x1c8>)
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	f003 0310 	and.w	r3, r3, #16
 8016862:	2b00      	cmp	r3, #0
 8016864:	d019      	beq.n	801689a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016866:	4b68      	ldr	r3, [pc, #416]	@ (8016a08 <tcp_listen_input+0x1d8>)
 8016868:	6819      	ldr	r1, [r3, #0]
 801686a:	4b68      	ldr	r3, [pc, #416]	@ (8016a0c <tcp_listen_input+0x1dc>)
 801686c:	881b      	ldrh	r3, [r3, #0]
 801686e:	461a      	mov	r2, r3
 8016870:	4b67      	ldr	r3, [pc, #412]	@ (8016a10 <tcp_listen_input+0x1e0>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016876:	4b67      	ldr	r3, [pc, #412]	@ (8016a14 <tcp_listen_input+0x1e4>)
 8016878:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801687a:	885b      	ldrh	r3, [r3, #2]
 801687c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801687e:	4a65      	ldr	r2, [pc, #404]	@ (8016a14 <tcp_listen_input+0x1e4>)
 8016880:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016882:	8812      	ldrh	r2, [r2, #0]
 8016884:	b292      	uxth	r2, r2
 8016886:	9202      	str	r2, [sp, #8]
 8016888:	9301      	str	r3, [sp, #4]
 801688a:	4b63      	ldr	r3, [pc, #396]	@ (8016a18 <tcp_listen_input+0x1e8>)
 801688c:	9300      	str	r3, [sp, #0]
 801688e:	4b63      	ldr	r3, [pc, #396]	@ (8016a1c <tcp_listen_input+0x1ec>)
 8016890:	4602      	mov	r2, r0
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f002 ff7a 	bl	801978c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016898:	e0a9      	b.n	80169ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801689a:	4b57      	ldr	r3, [pc, #348]	@ (80169f8 <tcp_listen_input+0x1c8>)
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	f003 0302 	and.w	r3, r3, #2
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	f000 80a3 	beq.w	80169ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	7d5b      	ldrb	r3, [r3, #21]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7ff f927 	bl	8015b00 <tcp_alloc>
 80168b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d111      	bne.n	80168de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	699b      	ldr	r3, [r3, #24]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d00a      	beq.n	80168d8 <tcp_listen_input+0xa8>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	699b      	ldr	r3, [r3, #24]
 80168c6:	687a      	ldr	r2, [r7, #4]
 80168c8:	6910      	ldr	r0, [r2, #16]
 80168ca:	f04f 32ff 	mov.w	r2, #4294967295
 80168ce:	2100      	movs	r1, #0
 80168d0:	4798      	blx	r3
 80168d2:	4603      	mov	r3, r0
 80168d4:	73bb      	strb	r3, [r7, #14]
      return;
 80168d6:	e08b      	b.n	80169f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80168d8:	23f0      	movs	r3, #240	@ 0xf0
 80168da:	73bb      	strb	r3, [r7, #14]
      return;
 80168dc:	e088      	b.n	80169f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80168de:	4b50      	ldr	r3, [pc, #320]	@ (8016a20 <tcp_listen_input+0x1f0>)
 80168e0:	695a      	ldr	r2, [r3, #20]
 80168e2:	697b      	ldr	r3, [r7, #20]
 80168e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80168e6:	4b4e      	ldr	r3, [pc, #312]	@ (8016a20 <tcp_listen_input+0x1f0>)
 80168e8:	691a      	ldr	r2, [r3, #16]
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	8ada      	ldrh	r2, [r3, #22]
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80168f6:	4b47      	ldr	r3, [pc, #284]	@ (8016a14 <tcp_listen_input+0x1e4>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	881b      	ldrh	r3, [r3, #0]
 80168fc:	b29a      	uxth	r2, r3
 80168fe:	697b      	ldr	r3, [r7, #20]
 8016900:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	2203      	movs	r2, #3
 8016906:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016908:	4b41      	ldr	r3, [pc, #260]	@ (8016a10 <tcp_listen_input+0x1e0>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	1c5a      	adds	r2, r3, #1
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016916:	697b      	ldr	r3, [r7, #20]
 8016918:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801691a:	6978      	ldr	r0, [r7, #20]
 801691c:	f7ff fa58 	bl	8015dd0 <tcp_next_iss>
 8016920:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	693a      	ldr	r2, [r7, #16]
 8016926:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	693a      	ldr	r2, [r7, #16]
 801692c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	693a      	ldr	r2, [r7, #16]
 8016932:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	693a      	ldr	r2, [r7, #16]
 8016938:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801693a:	4b35      	ldr	r3, [pc, #212]	@ (8016a10 <tcp_listen_input+0x1e0>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	1e5a      	subs	r2, r3, #1
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	691a      	ldr	r2, [r3, #16]
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	7a5b      	ldrb	r3, [r3, #9]
 8016956:	f003 030c 	and.w	r3, r3, #12
 801695a:	b2da      	uxtb	r2, r3
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	7a1a      	ldrb	r2, [r3, #8]
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016968:	4b2e      	ldr	r3, [pc, #184]	@ (8016a24 <tcp_listen_input+0x1f4>)
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	60da      	str	r2, [r3, #12]
 8016970:	4a2c      	ldr	r2, [pc, #176]	@ (8016a24 <tcp_listen_input+0x1f4>)
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	6013      	str	r3, [r2, #0]
 8016976:	f003 f8cb 	bl	8019b10 <tcp_timer_needed>
 801697a:	4b2b      	ldr	r3, [pc, #172]	@ (8016a28 <tcp_listen_input+0x1f8>)
 801697c:	2201      	movs	r2, #1
 801697e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016980:	6978      	ldr	r0, [r7, #20]
 8016982:	f001 fd8b 	bl	801849c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016986:	4b23      	ldr	r3, [pc, #140]	@ (8016a14 <tcp_listen_input+0x1e4>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	89db      	ldrh	r3, [r3, #14]
 801698c:	b29a      	uxth	r2, r3
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	3304      	adds	r3, #4
 80169a8:	4618      	mov	r0, r3
 80169aa:	f004 ff6d 	bl	801b888 <ip4_route>
 80169ae:	4601      	mov	r1, r0
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	3304      	adds	r3, #4
 80169b4:	461a      	mov	r2, r3
 80169b6:	4620      	mov	r0, r4
 80169b8:	f7ff fa30 	bl	8015e1c <tcp_eff_send_mss_netif>
 80169bc:	4603      	mov	r3, r0
 80169be:	461a      	mov	r2, r3
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80169c4:	2112      	movs	r1, #18
 80169c6:	6978      	ldr	r0, [r7, #20]
 80169c8:	f002 f83e 	bl	8018a48 <tcp_enqueue_flags>
 80169cc:	4603      	mov	r3, r0
 80169ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80169d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d004      	beq.n	80169e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80169d8:	2100      	movs	r1, #0
 80169da:	6978      	ldr	r0, [r7, #20]
 80169dc:	f7fe f97c 	bl	8014cd8 <tcp_abandon>
      return;
 80169e0:	e006      	b.n	80169f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80169e2:	6978      	ldr	r0, [r7, #20]
 80169e4:	f002 f91e 	bl	8018c24 <tcp_output>
  return;
 80169e8:	e001      	b.n	80169ee <tcp_listen_input+0x1be>
    return;
 80169ea:	bf00      	nop
 80169ec:	e000      	b.n	80169f0 <tcp_listen_input+0x1c0>
  return;
 80169ee:	bf00      	nop
}
 80169f0:	371c      	adds	r7, #28
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd90      	pop	{r4, r7, pc}
 80169f6:	bf00      	nop
 80169f8:	20027674 	.word	0x20027674
 80169fc:	080203d8 	.word	0x080203d8
 8016a00:	080205d0 	.word	0x080205d0
 8016a04:	08020424 	.word	0x08020424
 8016a08:	2002766c 	.word	0x2002766c
 8016a0c:	20027672 	.word	0x20027672
 8016a10:	20027668 	.word	0x20027668
 8016a14:	20027658 	.word	0x20027658
 8016a18:	20024540 	.word	0x20024540
 8016a1c:	20024544 	.word	0x20024544
 8016a20:	20024530 	.word	0x20024530
 8016a24:	2002763c 	.word	0x2002763c
 8016a28:	20027644 	.word	0x20027644

08016a2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b086      	sub	sp, #24
 8016a30:	af04      	add	r7, sp, #16
 8016a32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016a34:	4b2f      	ldr	r3, [pc, #188]	@ (8016af4 <tcp_timewait_input+0xc8>)
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	f003 0304 	and.w	r3, r3, #4
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d153      	bne.n	8016ae8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <tcp_timewait_input+0x28>
 8016a46:	4b2c      	ldr	r3, [pc, #176]	@ (8016af8 <tcp_timewait_input+0xcc>)
 8016a48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016a4c:	492b      	ldr	r1, [pc, #172]	@ (8016afc <tcp_timewait_input+0xd0>)
 8016a4e:	482c      	ldr	r0, [pc, #176]	@ (8016b00 <tcp_timewait_input+0xd4>)
 8016a50:	f007 fa7a 	bl	801df48 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016a54:	4b27      	ldr	r3, [pc, #156]	@ (8016af4 <tcp_timewait_input+0xc8>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 0302 	and.w	r3, r3, #2
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d02a      	beq.n	8016ab6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016a60:	4b28      	ldr	r3, [pc, #160]	@ (8016b04 <tcp_timewait_input+0xd8>)
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a68:	1ad3      	subs	r3, r2, r3
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	db2d      	blt.n	8016aca <tcp_timewait_input+0x9e>
 8016a6e:	4b25      	ldr	r3, [pc, #148]	@ (8016b04 <tcp_timewait_input+0xd8>)
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a76:	6879      	ldr	r1, [r7, #4]
 8016a78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a7a:	440b      	add	r3, r1
 8016a7c:	1ad3      	subs	r3, r2, r3
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	dc23      	bgt.n	8016aca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a82:	4b21      	ldr	r3, [pc, #132]	@ (8016b08 <tcp_timewait_input+0xdc>)
 8016a84:	6819      	ldr	r1, [r3, #0]
 8016a86:	4b21      	ldr	r3, [pc, #132]	@ (8016b0c <tcp_timewait_input+0xe0>)
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8016b04 <tcp_timewait_input+0xd8>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a92:	4b1f      	ldr	r3, [pc, #124]	@ (8016b10 <tcp_timewait_input+0xe4>)
 8016a94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a96:	885b      	ldrh	r3, [r3, #2]
 8016a98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8016b10 <tcp_timewait_input+0xe4>)
 8016a9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a9e:	8812      	ldrh	r2, [r2, #0]
 8016aa0:	b292      	uxth	r2, r2
 8016aa2:	9202      	str	r2, [sp, #8]
 8016aa4:	9301      	str	r3, [sp, #4]
 8016aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8016b14 <tcp_timewait_input+0xe8>)
 8016aa8:	9300      	str	r3, [sp, #0]
 8016aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8016b18 <tcp_timewait_input+0xec>)
 8016aac:	4602      	mov	r2, r0
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f002 fe6c 	bl	801978c <tcp_rst>
      return;
 8016ab4:	e01b      	b.n	8016aee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8016af4 <tcp_timewait_input+0xc8>)
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	f003 0301 	and.w	r3, r3, #1
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d003      	beq.n	8016aca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016ac2:	4b16      	ldr	r3, [pc, #88]	@ (8016b1c <tcp_timewait_input+0xf0>)
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016aca:	4b10      	ldr	r3, [pc, #64]	@ (8016b0c <tcp_timewait_input+0xe0>)
 8016acc:	881b      	ldrh	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00c      	beq.n	8016aec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	8b5b      	ldrh	r3, [r3, #26]
 8016ad6:	f043 0302 	orr.w	r3, r3, #2
 8016ada:	b29a      	uxth	r2, r3
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f002 f89f 	bl	8018c24 <tcp_output>
  }
  return;
 8016ae6:	e001      	b.n	8016aec <tcp_timewait_input+0xc0>
    return;
 8016ae8:	bf00      	nop
 8016aea:	e000      	b.n	8016aee <tcp_timewait_input+0xc2>
  return;
 8016aec:	bf00      	nop
}
 8016aee:	3708      	adds	r7, #8
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}
 8016af4:	20027674 	.word	0x20027674
 8016af8:	080203d8 	.word	0x080203d8
 8016afc:	080205f0 	.word	0x080205f0
 8016b00:	08020424 	.word	0x08020424
 8016b04:	20027668 	.word	0x20027668
 8016b08:	2002766c 	.word	0x2002766c
 8016b0c:	20027672 	.word	0x20027672
 8016b10:	20027658 	.word	0x20027658
 8016b14:	20024540 	.word	0x20024540
 8016b18:	20024544 	.word	0x20024544
 8016b1c:	20027630 	.word	0x20027630

08016b20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016b20:	b590      	push	{r4, r7, lr}
 8016b22:	b08d      	sub	sp, #52	@ 0x34
 8016b24:	af04      	add	r7, sp, #16
 8016b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d106      	bne.n	8016b44 <tcp_process+0x24>
 8016b36:	4b9d      	ldr	r3, [pc, #628]	@ (8016dac <tcp_process+0x28c>)
 8016b38:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016b3c:	499c      	ldr	r1, [pc, #624]	@ (8016db0 <tcp_process+0x290>)
 8016b3e:	489d      	ldr	r0, [pc, #628]	@ (8016db4 <tcp_process+0x294>)
 8016b40:	f007 fa02 	bl	801df48 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016b44:	4b9c      	ldr	r3, [pc, #624]	@ (8016db8 <tcp_process+0x298>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	f003 0304 	and.w	r3, r3, #4
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d04e      	beq.n	8016bee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	7d1b      	ldrb	r3, [r3, #20]
 8016b54:	2b02      	cmp	r3, #2
 8016b56:	d108      	bne.n	8016b6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016b5c:	4b97      	ldr	r3, [pc, #604]	@ (8016dbc <tcp_process+0x29c>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d123      	bne.n	8016bac <tcp_process+0x8c>
        acceptable = 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	76fb      	strb	r3, [r7, #27]
 8016b68:	e020      	b.n	8016bac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b6e:	4b94      	ldr	r3, [pc, #592]	@ (8016dc0 <tcp_process+0x2a0>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d102      	bne.n	8016b7c <tcp_process+0x5c>
        acceptable = 1;
 8016b76:	2301      	movs	r3, #1
 8016b78:	76fb      	strb	r3, [r7, #27]
 8016b7a:	e017      	b.n	8016bac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b7c:	4b90      	ldr	r3, [pc, #576]	@ (8016dc0 <tcp_process+0x2a0>)
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b84:	1ad3      	subs	r3, r2, r3
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	db10      	blt.n	8016bac <tcp_process+0x8c>
 8016b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8016dc0 <tcp_process+0x2a0>)
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016b96:	440b      	add	r3, r1
 8016b98:	1ad3      	subs	r3, r2, r3
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	dc06      	bgt.n	8016bac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	8b5b      	ldrh	r3, [r3, #26]
 8016ba2:	f043 0302 	orr.w	r3, r3, #2
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016bac:	7efb      	ldrb	r3, [r7, #27]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d01b      	beq.n	8016bea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	7d1b      	ldrb	r3, [r3, #20]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d106      	bne.n	8016bc8 <tcp_process+0xa8>
 8016bba:	4b7c      	ldr	r3, [pc, #496]	@ (8016dac <tcp_process+0x28c>)
 8016bbc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016bc0:	4980      	ldr	r1, [pc, #512]	@ (8016dc4 <tcp_process+0x2a4>)
 8016bc2:	487c      	ldr	r0, [pc, #496]	@ (8016db4 <tcp_process+0x294>)
 8016bc4:	f007 f9c0 	bl	801df48 <iprintf>
      recv_flags |= TF_RESET;
 8016bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8016dc8 <tcp_process+0x2a8>)
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	f043 0308 	orr.w	r3, r3, #8
 8016bd0:	b2da      	uxtb	r2, r3
 8016bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8016dc8 <tcp_process+0x2a8>)
 8016bd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	8b5b      	ldrh	r3, [r3, #26]
 8016bda:	f023 0301 	bic.w	r3, r3, #1
 8016bde:	b29a      	uxth	r2, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016be4:	f06f 030d 	mvn.w	r3, #13
 8016be8:	e37a      	b.n	80172e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016bea:	2300      	movs	r3, #0
 8016bec:	e378      	b.n	80172e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016bee:	4b72      	ldr	r3, [pc, #456]	@ (8016db8 <tcp_process+0x298>)
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	f003 0302 	and.w	r3, r3, #2
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d010      	beq.n	8016c1c <tcp_process+0xfc>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	7d1b      	ldrb	r3, [r3, #20]
 8016bfe:	2b02      	cmp	r3, #2
 8016c00:	d00c      	beq.n	8016c1c <tcp_process+0xfc>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	7d1b      	ldrb	r3, [r3, #20]
 8016c06:	2b03      	cmp	r3, #3
 8016c08:	d008      	beq.n	8016c1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	8b5b      	ldrh	r3, [r3, #26]
 8016c0e:	f043 0302 	orr.w	r3, r3, #2
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	e361      	b.n	80172e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	8b5b      	ldrh	r3, [r3, #26]
 8016c20:	f003 0310 	and.w	r3, r3, #16
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d103      	bne.n	8016c30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016c28:	4b68      	ldr	r3, [pc, #416]	@ (8016dcc <tcp_process+0x2ac>)
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f001 fc2b 	bl	801849c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	7d1b      	ldrb	r3, [r3, #20]
 8016c4a:	3b02      	subs	r3, #2
 8016c4c:	2b07      	cmp	r3, #7
 8016c4e:	f200 8337 	bhi.w	80172c0 <tcp_process+0x7a0>
 8016c52:	a201      	add	r2, pc, #4	@ (adr r2, 8016c58 <tcp_process+0x138>)
 8016c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c58:	08016c79 	.word	0x08016c79
 8016c5c:	08016ea9 	.word	0x08016ea9
 8016c60:	08017021 	.word	0x08017021
 8016c64:	0801704b 	.word	0x0801704b
 8016c68:	0801716f 	.word	0x0801716f
 8016c6c:	08017021 	.word	0x08017021
 8016c70:	080171fb 	.word	0x080171fb
 8016c74:	0801728b 	.word	0x0801728b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016c78:	4b4f      	ldr	r3, [pc, #316]	@ (8016db8 <tcp_process+0x298>)
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	f003 0310 	and.w	r3, r3, #16
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f000 80e4 	beq.w	8016e4e <tcp_process+0x32e>
 8016c86:	4b4c      	ldr	r3, [pc, #304]	@ (8016db8 <tcp_process+0x298>)
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	f003 0302 	and.w	r3, r3, #2
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	f000 80dd 	beq.w	8016e4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c98:	1c5a      	adds	r2, r3, #1
 8016c9a:	4b48      	ldr	r3, [pc, #288]	@ (8016dbc <tcp_process+0x29c>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	f040 80d5 	bne.w	8016e4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016ca4:	4b46      	ldr	r3, [pc, #280]	@ (8016dc0 <tcp_process+0x2a0>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	1c5a      	adds	r2, r3, #1
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016cb6:	4b41      	ldr	r3, [pc, #260]	@ (8016dbc <tcp_process+0x29c>)
 8016cb8:	681a      	ldr	r2, [r3, #0]
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016cbe:	4b44      	ldr	r3, [pc, #272]	@ (8016dd0 <tcp_process+0x2b0>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	89db      	ldrh	r3, [r3, #14]
 8016cc4:	b29a      	uxth	r2, r3
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016cd8:	4b39      	ldr	r3, [pc, #228]	@ (8016dc0 <tcp_process+0x2a0>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	1e5a      	subs	r2, r3, #1
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2204      	movs	r2, #4
 8016ce6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	3304      	adds	r3, #4
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f004 fdc9 	bl	801b888 <ip4_route>
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	3304      	adds	r3, #4
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	4620      	mov	r0, r4
 8016d00:	f7ff f88c 	bl	8015e1c <tcp_eff_send_mss_netif>
 8016d04:	4603      	mov	r3, r0
 8016d06:	461a      	mov	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d10:	009a      	lsls	r2, r3, #2
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d16:	005b      	lsls	r3, r3, #1
 8016d18:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016d1c:	428b      	cmp	r3, r1
 8016d1e:	bf38      	it	cc
 8016d20:	460b      	movcc	r3, r1
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d204      	bcs.n	8016d30 <tcp_process+0x210>
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d2a:	009b      	lsls	r3, r3, #2
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	e00d      	b.n	8016d4c <tcp_process+0x22c>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d34:	005b      	lsls	r3, r3, #1
 8016d36:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	d904      	bls.n	8016d48 <tcp_process+0x228>
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d42:	005b      	lsls	r3, r3, #1
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	e001      	b.n	8016d4c <tcp_process+0x22c>
 8016d48:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d106      	bne.n	8016d6a <tcp_process+0x24a>
 8016d5c:	4b13      	ldr	r3, [pc, #76]	@ (8016dac <tcp_process+0x28c>)
 8016d5e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016d62:	491c      	ldr	r1, [pc, #112]	@ (8016dd4 <tcp_process+0x2b4>)
 8016d64:	4813      	ldr	r0, [pc, #76]	@ (8016db4 <tcp_process+0x294>)
 8016d66:	f007 f8ef 	bl	801df48 <iprintf>
        --pcb->snd_queuelen;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d70:	3b01      	subs	r3, #1
 8016d72:	b29a      	uxth	r2, r3
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016d80:	69fb      	ldr	r3, [r7, #28]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d12a      	bne.n	8016ddc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d106      	bne.n	8016da0 <tcp_process+0x280>
 8016d92:	4b06      	ldr	r3, [pc, #24]	@ (8016dac <tcp_process+0x28c>)
 8016d94:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016d98:	490f      	ldr	r1, [pc, #60]	@ (8016dd8 <tcp_process+0x2b8>)
 8016d9a:	4806      	ldr	r0, [pc, #24]	@ (8016db4 <tcp_process+0x294>)
 8016d9c:	f007 f8d4 	bl	801df48 <iprintf>
          pcb->unsent = rseg->next;
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016da8:	e01c      	b.n	8016de4 <tcp_process+0x2c4>
 8016daa:	bf00      	nop
 8016dac:	080203d8 	.word	0x080203d8
 8016db0:	08020610 	.word	0x08020610
 8016db4:	08020424 	.word	0x08020424
 8016db8:	20027674 	.word	0x20027674
 8016dbc:	2002766c 	.word	0x2002766c
 8016dc0:	20027668 	.word	0x20027668
 8016dc4:	0802062c 	.word	0x0802062c
 8016dc8:	20027675 	.word	0x20027675
 8016dcc:	20027630 	.word	0x20027630
 8016dd0:	20027658 	.word	0x20027658
 8016dd4:	0802064c 	.word	0x0802064c
 8016dd8:	08020664 	.word	0x08020664
        } else {
          pcb->unacked = rseg->next;
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016de4:	69f8      	ldr	r0, [r7, #28]
 8016de6:	f7fe fd22 	bl	801582e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d104      	bne.n	8016dfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016df8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016dfa:	e006      	b.n	8016e0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d00a      	beq.n	8016e2a <tcp_process+0x30a>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	6910      	ldr	r0, [r2, #16]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	6879      	ldr	r1, [r7, #4]
 8016e22:	4798      	blx	r3
 8016e24:	4603      	mov	r3, r0
 8016e26:	76bb      	strb	r3, [r7, #26]
 8016e28:	e001      	b.n	8016e2e <tcp_process+0x30e>
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016e2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016e32:	f113 0f0d 	cmn.w	r3, #13
 8016e36:	d102      	bne.n	8016e3e <tcp_process+0x31e>
          return ERR_ABRT;
 8016e38:	f06f 030c 	mvn.w	r3, #12
 8016e3c:	e250      	b.n	80172e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	8b5b      	ldrh	r3, [r3, #26]
 8016e42:	f043 0302 	orr.w	r3, r3, #2
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016e4c:	e23a      	b.n	80172c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016e4e:	4b98      	ldr	r3, [pc, #608]	@ (80170b0 <tcp_process+0x590>)
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	f003 0310 	and.w	r3, r3, #16
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	f000 8234 	beq.w	80172c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e5c:	4b95      	ldr	r3, [pc, #596]	@ (80170b4 <tcp_process+0x594>)
 8016e5e:	6819      	ldr	r1, [r3, #0]
 8016e60:	4b95      	ldr	r3, [pc, #596]	@ (80170b8 <tcp_process+0x598>)
 8016e62:	881b      	ldrh	r3, [r3, #0]
 8016e64:	461a      	mov	r2, r3
 8016e66:	4b95      	ldr	r3, [pc, #596]	@ (80170bc <tcp_process+0x59c>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e6c:	4b94      	ldr	r3, [pc, #592]	@ (80170c0 <tcp_process+0x5a0>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e70:	885b      	ldrh	r3, [r3, #2]
 8016e72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e74:	4a92      	ldr	r2, [pc, #584]	@ (80170c0 <tcp_process+0x5a0>)
 8016e76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e78:	8812      	ldrh	r2, [r2, #0]
 8016e7a:	b292      	uxth	r2, r2
 8016e7c:	9202      	str	r2, [sp, #8]
 8016e7e:	9301      	str	r3, [sp, #4]
 8016e80:	4b90      	ldr	r3, [pc, #576]	@ (80170c4 <tcp_process+0x5a4>)
 8016e82:	9300      	str	r3, [sp, #0]
 8016e84:	4b90      	ldr	r3, [pc, #576]	@ (80170c8 <tcp_process+0x5a8>)
 8016e86:	4602      	mov	r2, r0
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f002 fc7f 	bl	801978c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e94:	2b05      	cmp	r3, #5
 8016e96:	f200 8215 	bhi.w	80172c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f002 fa4b 	bl	801933c <tcp_rexmit_rto>
      break;
 8016ea6:	e20d      	b.n	80172c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016ea8:	4b81      	ldr	r3, [pc, #516]	@ (80170b0 <tcp_process+0x590>)
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	f003 0310 	and.w	r3, r3, #16
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	f000 80a1 	beq.w	8016ff8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80170b4 <tcp_process+0x594>)
 8016eb8:	681a      	ldr	r2, [r3, #0]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ebe:	1ad3      	subs	r3, r2, r3
 8016ec0:	3b01      	subs	r3, #1
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	db7e      	blt.n	8016fc4 <tcp_process+0x4a4>
 8016ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80170b4 <tcp_process+0x594>)
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ece:	1ad3      	subs	r3, r2, r3
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	dc77      	bgt.n	8016fc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2204      	movs	r2, #4
 8016ed8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d102      	bne.n	8016ee8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016ee2:	23fa      	movs	r3, #250	@ 0xfa
 8016ee4:	76bb      	strb	r3, [r7, #26]
 8016ee6:	e01d      	b.n	8016f24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016eec:	699b      	ldr	r3, [r3, #24]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d106      	bne.n	8016f00 <tcp_process+0x3e0>
 8016ef2:	4b76      	ldr	r3, [pc, #472]	@ (80170cc <tcp_process+0x5ac>)
 8016ef4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016ef8:	4975      	ldr	r1, [pc, #468]	@ (80170d0 <tcp_process+0x5b0>)
 8016efa:	4876      	ldr	r0, [pc, #472]	@ (80170d4 <tcp_process+0x5b4>)
 8016efc:	f007 f824 	bl	801df48 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016f04:	699b      	ldr	r3, [r3, #24]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d00a      	beq.n	8016f20 <tcp_process+0x400>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016f0e:	699b      	ldr	r3, [r3, #24]
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	6910      	ldr	r0, [r2, #16]
 8016f14:	2200      	movs	r2, #0
 8016f16:	6879      	ldr	r1, [r7, #4]
 8016f18:	4798      	blx	r3
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	76bb      	strb	r3, [r7, #26]
 8016f1e:	e001      	b.n	8016f24 <tcp_process+0x404>
 8016f20:	23f0      	movs	r3, #240	@ 0xf0
 8016f22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016f24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d00a      	beq.n	8016f42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016f2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016f30:	f113 0f0d 	cmn.w	r3, #13
 8016f34:	d002      	beq.n	8016f3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f7fd ff8c 	bl	8014e54 <tcp_abort>
            }
            return ERR_ABRT;
 8016f3c:	f06f 030c 	mvn.w	r3, #12
 8016f40:	e1ce      	b.n	80172e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016f42:	6878      	ldr	r0, [r7, #4]
 8016f44:	f000 fae0 	bl	8017508 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016f48:	4b63      	ldr	r3, [pc, #396]	@ (80170d8 <tcp_process+0x5b8>)
 8016f4a:	881b      	ldrh	r3, [r3, #0]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d005      	beq.n	8016f5c <tcp_process+0x43c>
            recv_acked--;
 8016f50:	4b61      	ldr	r3, [pc, #388]	@ (80170d8 <tcp_process+0x5b8>)
 8016f52:	881b      	ldrh	r3, [r3, #0]
 8016f54:	3b01      	subs	r3, #1
 8016f56:	b29a      	uxth	r2, r3
 8016f58:	4b5f      	ldr	r3, [pc, #380]	@ (80170d8 <tcp_process+0x5b8>)
 8016f5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f60:	009a      	lsls	r2, r3, #2
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016f6c:	428b      	cmp	r3, r1
 8016f6e:	bf38      	it	cc
 8016f70:	460b      	movcc	r3, r1
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d204      	bcs.n	8016f80 <tcp_process+0x460>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f7a:	009b      	lsls	r3, r3, #2
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	e00d      	b.n	8016f9c <tcp_process+0x47c>
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	d904      	bls.n	8016f98 <tcp_process+0x478>
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	e001      	b.n	8016f9c <tcp_process+0x47c>
 8016f98:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80170dc <tcp_process+0x5bc>)
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	f003 0320 	and.w	r3, r3, #32
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d037      	beq.n	801701e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	8b5b      	ldrh	r3, [r3, #26]
 8016fb2:	f043 0302 	orr.w	r3, r3, #2
 8016fb6:	b29a      	uxth	r2, r3
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	2207      	movs	r2, #7
 8016fc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016fc2:	e02c      	b.n	801701e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80170b4 <tcp_process+0x594>)
 8016fc6:	6819      	ldr	r1, [r3, #0]
 8016fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80170b8 <tcp_process+0x598>)
 8016fca:	881b      	ldrh	r3, [r3, #0]
 8016fcc:	461a      	mov	r2, r3
 8016fce:	4b3b      	ldr	r3, [pc, #236]	@ (80170bc <tcp_process+0x59c>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80170c0 <tcp_process+0x5a0>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fd8:	885b      	ldrh	r3, [r3, #2]
 8016fda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fdc:	4a38      	ldr	r2, [pc, #224]	@ (80170c0 <tcp_process+0x5a0>)
 8016fde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fe0:	8812      	ldrh	r2, [r2, #0]
 8016fe2:	b292      	uxth	r2, r2
 8016fe4:	9202      	str	r2, [sp, #8]
 8016fe6:	9301      	str	r3, [sp, #4]
 8016fe8:	4b36      	ldr	r3, [pc, #216]	@ (80170c4 <tcp_process+0x5a4>)
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	4b36      	ldr	r3, [pc, #216]	@ (80170c8 <tcp_process+0x5a8>)
 8016fee:	4602      	mov	r2, r0
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f002 fbcb 	bl	801978c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016ff6:	e167      	b.n	80172c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80170b0 <tcp_process+0x590>)
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	f003 0302 	and.w	r3, r3, #2
 8017000:	2b00      	cmp	r3, #0
 8017002:	f000 8161 	beq.w	80172c8 <tcp_process+0x7a8>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801700a:	1e5a      	subs	r2, r3, #1
 801700c:	4b2b      	ldr	r3, [pc, #172]	@ (80170bc <tcp_process+0x59c>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	429a      	cmp	r2, r3
 8017012:	f040 8159 	bne.w	80172c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f002 f9b2 	bl	8019380 <tcp_rexmit>
      break;
 801701c:	e154      	b.n	80172c8 <tcp_process+0x7a8>
 801701e:	e153      	b.n	80172c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 fa71 	bl	8017508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017026:	4b2d      	ldr	r3, [pc, #180]	@ (80170dc <tcp_process+0x5bc>)
 8017028:	781b      	ldrb	r3, [r3, #0]
 801702a:	f003 0320 	and.w	r3, r3, #32
 801702e:	2b00      	cmp	r3, #0
 8017030:	f000 814c 	beq.w	80172cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	8b5b      	ldrh	r3, [r3, #26]
 8017038:	f043 0302 	orr.w	r3, r3, #2
 801703c:	b29a      	uxth	r2, r3
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2207      	movs	r2, #7
 8017046:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017048:	e140      	b.n	80172cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801704a:	6878      	ldr	r0, [r7, #4]
 801704c:	f000 fa5c 	bl	8017508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017050:	4b22      	ldr	r3, [pc, #136]	@ (80170dc <tcp_process+0x5bc>)
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	f003 0320 	and.w	r3, r3, #32
 8017058:	2b00      	cmp	r3, #0
 801705a:	d071      	beq.n	8017140 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801705c:	4b14      	ldr	r3, [pc, #80]	@ (80170b0 <tcp_process+0x590>)
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	f003 0310 	and.w	r3, r3, #16
 8017064:	2b00      	cmp	r3, #0
 8017066:	d060      	beq.n	801712a <tcp_process+0x60a>
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801706c:	4b11      	ldr	r3, [pc, #68]	@ (80170b4 <tcp_process+0x594>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	429a      	cmp	r2, r3
 8017072:	d15a      	bne.n	801712a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017078:	2b00      	cmp	r3, #0
 801707a:	d156      	bne.n	801712a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	8b5b      	ldrh	r3, [r3, #26]
 8017080:	f043 0302 	orr.w	r3, r3, #2
 8017084:	b29a      	uxth	r2, r3
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f7fe fdbc 	bl	8015c08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017090:	4b13      	ldr	r3, [pc, #76]	@ (80170e0 <tcp_process+0x5c0>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	687a      	ldr	r2, [r7, #4]
 8017096:	429a      	cmp	r2, r3
 8017098:	d105      	bne.n	80170a6 <tcp_process+0x586>
 801709a:	4b11      	ldr	r3, [pc, #68]	@ (80170e0 <tcp_process+0x5c0>)
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	68db      	ldr	r3, [r3, #12]
 80170a0:	4a0f      	ldr	r2, [pc, #60]	@ (80170e0 <tcp_process+0x5c0>)
 80170a2:	6013      	str	r3, [r2, #0]
 80170a4:	e02e      	b.n	8017104 <tcp_process+0x5e4>
 80170a6:	4b0e      	ldr	r3, [pc, #56]	@ (80170e0 <tcp_process+0x5c0>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	617b      	str	r3, [r7, #20]
 80170ac:	e027      	b.n	80170fe <tcp_process+0x5de>
 80170ae:	bf00      	nop
 80170b0:	20027674 	.word	0x20027674
 80170b4:	2002766c 	.word	0x2002766c
 80170b8:	20027672 	.word	0x20027672
 80170bc:	20027668 	.word	0x20027668
 80170c0:	20027658 	.word	0x20027658
 80170c4:	20024540 	.word	0x20024540
 80170c8:	20024544 	.word	0x20024544
 80170cc:	080203d8 	.word	0x080203d8
 80170d0:	08020678 	.word	0x08020678
 80170d4:	08020424 	.word	0x08020424
 80170d8:	20027670 	.word	0x20027670
 80170dc:	20027675 	.word	0x20027675
 80170e0:	2002763c 	.word	0x2002763c
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	68db      	ldr	r3, [r3, #12]
 80170e8:	687a      	ldr	r2, [r7, #4]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d104      	bne.n	80170f8 <tcp_process+0x5d8>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	68da      	ldr	r2, [r3, #12]
 80170f2:	697b      	ldr	r3, [r7, #20]
 80170f4:	60da      	str	r2, [r3, #12]
 80170f6:	e005      	b.n	8017104 <tcp_process+0x5e4>
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	617b      	str	r3, [r7, #20]
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d1ef      	bne.n	80170e4 <tcp_process+0x5c4>
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2200      	movs	r2, #0
 8017108:	60da      	str	r2, [r3, #12]
 801710a:	4b77      	ldr	r3, [pc, #476]	@ (80172e8 <tcp_process+0x7c8>)
 801710c:	2201      	movs	r2, #1
 801710e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	220a      	movs	r2, #10
 8017114:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017116:	4b75      	ldr	r3, [pc, #468]	@ (80172ec <tcp_process+0x7cc>)
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	60da      	str	r2, [r3, #12]
 801711e:	4a73      	ldr	r2, [pc, #460]	@ (80172ec <tcp_process+0x7cc>)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6013      	str	r3, [r2, #0]
 8017124:	f002 fcf4 	bl	8019b10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017128:	e0d2      	b.n	80172d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8b5b      	ldrh	r3, [r3, #26]
 801712e:	f043 0302 	orr.w	r3, r3, #2
 8017132:	b29a      	uxth	r2, r3
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2208      	movs	r2, #8
 801713c:	751a      	strb	r2, [r3, #20]
      break;
 801713e:	e0c7      	b.n	80172d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017140:	4b6b      	ldr	r3, [pc, #428]	@ (80172f0 <tcp_process+0x7d0>)
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	f003 0310 	and.w	r3, r3, #16
 8017148:	2b00      	cmp	r3, #0
 801714a:	f000 80c1 	beq.w	80172d0 <tcp_process+0x7b0>
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017152:	4b68      	ldr	r3, [pc, #416]	@ (80172f4 <tcp_process+0x7d4>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	429a      	cmp	r2, r3
 8017158:	f040 80ba 	bne.w	80172d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017160:	2b00      	cmp	r3, #0
 8017162:	f040 80b5 	bne.w	80172d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2206      	movs	r2, #6
 801716a:	751a      	strb	r2, [r3, #20]
      break;
 801716c:	e0b0      	b.n	80172d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f000 f9ca 	bl	8017508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017174:	4b60      	ldr	r3, [pc, #384]	@ (80172f8 <tcp_process+0x7d8>)
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	f003 0320 	and.w	r3, r3, #32
 801717c:	2b00      	cmp	r3, #0
 801717e:	f000 80a9 	beq.w	80172d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	8b5b      	ldrh	r3, [r3, #26]
 8017186:	f043 0302 	orr.w	r3, r3, #2
 801718a:	b29a      	uxth	r2, r3
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017190:	6878      	ldr	r0, [r7, #4]
 8017192:	f7fe fd39 	bl	8015c08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017196:	4b59      	ldr	r3, [pc, #356]	@ (80172fc <tcp_process+0x7dc>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	687a      	ldr	r2, [r7, #4]
 801719c:	429a      	cmp	r2, r3
 801719e:	d105      	bne.n	80171ac <tcp_process+0x68c>
 80171a0:	4b56      	ldr	r3, [pc, #344]	@ (80172fc <tcp_process+0x7dc>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	68db      	ldr	r3, [r3, #12]
 80171a6:	4a55      	ldr	r2, [pc, #340]	@ (80172fc <tcp_process+0x7dc>)
 80171a8:	6013      	str	r3, [r2, #0]
 80171aa:	e013      	b.n	80171d4 <tcp_process+0x6b4>
 80171ac:	4b53      	ldr	r3, [pc, #332]	@ (80172fc <tcp_process+0x7dc>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	613b      	str	r3, [r7, #16]
 80171b2:	e00c      	b.n	80171ce <tcp_process+0x6ae>
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	687a      	ldr	r2, [r7, #4]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d104      	bne.n	80171c8 <tcp_process+0x6a8>
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	68da      	ldr	r2, [r3, #12]
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	60da      	str	r2, [r3, #12]
 80171c6:	e005      	b.n	80171d4 <tcp_process+0x6b4>
 80171c8:	693b      	ldr	r3, [r7, #16]
 80171ca:	68db      	ldr	r3, [r3, #12]
 80171cc:	613b      	str	r3, [r7, #16]
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d1ef      	bne.n	80171b4 <tcp_process+0x694>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2200      	movs	r2, #0
 80171d8:	60da      	str	r2, [r3, #12]
 80171da:	4b43      	ldr	r3, [pc, #268]	@ (80172e8 <tcp_process+0x7c8>)
 80171dc:	2201      	movs	r2, #1
 80171de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	220a      	movs	r2, #10
 80171e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80171e6:	4b41      	ldr	r3, [pc, #260]	@ (80172ec <tcp_process+0x7cc>)
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	60da      	str	r2, [r3, #12]
 80171ee:	4a3f      	ldr	r2, [pc, #252]	@ (80172ec <tcp_process+0x7cc>)
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6013      	str	r3, [r2, #0]
 80171f4:	f002 fc8c 	bl	8019b10 <tcp_timer_needed>
      }
      break;
 80171f8:	e06c      	b.n	80172d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 f984 	bl	8017508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017200:	4b3b      	ldr	r3, [pc, #236]	@ (80172f0 <tcp_process+0x7d0>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	f003 0310 	and.w	r3, r3, #16
 8017208:	2b00      	cmp	r3, #0
 801720a:	d065      	beq.n	80172d8 <tcp_process+0x7b8>
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017210:	4b38      	ldr	r3, [pc, #224]	@ (80172f4 <tcp_process+0x7d4>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	429a      	cmp	r2, r3
 8017216:	d15f      	bne.n	80172d8 <tcp_process+0x7b8>
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801721c:	2b00      	cmp	r3, #0
 801721e:	d15b      	bne.n	80172d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f7fe fcf1 	bl	8015c08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017226:	4b35      	ldr	r3, [pc, #212]	@ (80172fc <tcp_process+0x7dc>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	429a      	cmp	r2, r3
 801722e:	d105      	bne.n	801723c <tcp_process+0x71c>
 8017230:	4b32      	ldr	r3, [pc, #200]	@ (80172fc <tcp_process+0x7dc>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	68db      	ldr	r3, [r3, #12]
 8017236:	4a31      	ldr	r2, [pc, #196]	@ (80172fc <tcp_process+0x7dc>)
 8017238:	6013      	str	r3, [r2, #0]
 801723a:	e013      	b.n	8017264 <tcp_process+0x744>
 801723c:	4b2f      	ldr	r3, [pc, #188]	@ (80172fc <tcp_process+0x7dc>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	60fb      	str	r3, [r7, #12]
 8017242:	e00c      	b.n	801725e <tcp_process+0x73e>
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	68db      	ldr	r3, [r3, #12]
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	429a      	cmp	r2, r3
 801724c:	d104      	bne.n	8017258 <tcp_process+0x738>
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	68da      	ldr	r2, [r3, #12]
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	60da      	str	r2, [r3, #12]
 8017256:	e005      	b.n	8017264 <tcp_process+0x744>
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	68db      	ldr	r3, [r3, #12]
 801725c:	60fb      	str	r3, [r7, #12]
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1ef      	bne.n	8017244 <tcp_process+0x724>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	60da      	str	r2, [r3, #12]
 801726a:	4b1f      	ldr	r3, [pc, #124]	@ (80172e8 <tcp_process+0x7c8>)
 801726c:	2201      	movs	r2, #1
 801726e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	220a      	movs	r2, #10
 8017274:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017276:	4b1d      	ldr	r3, [pc, #116]	@ (80172ec <tcp_process+0x7cc>)
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	60da      	str	r2, [r3, #12]
 801727e:	4a1b      	ldr	r2, [pc, #108]	@ (80172ec <tcp_process+0x7cc>)
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6013      	str	r3, [r2, #0]
 8017284:	f002 fc44 	bl	8019b10 <tcp_timer_needed>
      }
      break;
 8017288:	e026      	b.n	80172d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f000 f93c 	bl	8017508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017290:	4b17      	ldr	r3, [pc, #92]	@ (80172f0 <tcp_process+0x7d0>)
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	f003 0310 	and.w	r3, r3, #16
 8017298:	2b00      	cmp	r3, #0
 801729a:	d01f      	beq.n	80172dc <tcp_process+0x7bc>
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80172a0:	4b14      	ldr	r3, [pc, #80]	@ (80172f4 <tcp_process+0x7d4>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d119      	bne.n	80172dc <tcp_process+0x7bc>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d115      	bne.n	80172dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80172b0:	4b11      	ldr	r3, [pc, #68]	@ (80172f8 <tcp_process+0x7d8>)
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	f043 0310 	orr.w	r3, r3, #16
 80172b8:	b2da      	uxtb	r2, r3
 80172ba:	4b0f      	ldr	r3, [pc, #60]	@ (80172f8 <tcp_process+0x7d8>)
 80172bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80172be:	e00d      	b.n	80172dc <tcp_process+0x7bc>
    default:
      break;
 80172c0:	bf00      	nop
 80172c2:	e00c      	b.n	80172de <tcp_process+0x7be>
      break;
 80172c4:	bf00      	nop
 80172c6:	e00a      	b.n	80172de <tcp_process+0x7be>
      break;
 80172c8:	bf00      	nop
 80172ca:	e008      	b.n	80172de <tcp_process+0x7be>
      break;
 80172cc:	bf00      	nop
 80172ce:	e006      	b.n	80172de <tcp_process+0x7be>
      break;
 80172d0:	bf00      	nop
 80172d2:	e004      	b.n	80172de <tcp_process+0x7be>
      break;
 80172d4:	bf00      	nop
 80172d6:	e002      	b.n	80172de <tcp_process+0x7be>
      break;
 80172d8:	bf00      	nop
 80172da:	e000      	b.n	80172de <tcp_process+0x7be>
      break;
 80172dc:	bf00      	nop
  }
  return ERR_OK;
 80172de:	2300      	movs	r3, #0
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3724      	adds	r7, #36	@ 0x24
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd90      	pop	{r4, r7, pc}
 80172e8:	20027644 	.word	0x20027644
 80172ec:	20027640 	.word	0x20027640
 80172f0:	20027674 	.word	0x20027674
 80172f4:	2002766c 	.word	0x2002766c
 80172f8:	20027675 	.word	0x20027675
 80172fc:	2002763c 	.word	0x2002763c

08017300 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017300:	b590      	push	{r4, r7, lr}
 8017302:	b085      	sub	sp, #20
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
 8017308:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d106      	bne.n	801731e <tcp_oos_insert_segment+0x1e>
 8017310:	4b3b      	ldr	r3, [pc, #236]	@ (8017400 <tcp_oos_insert_segment+0x100>)
 8017312:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017316:	493b      	ldr	r1, [pc, #236]	@ (8017404 <tcp_oos_insert_segment+0x104>)
 8017318:	483b      	ldr	r0, [pc, #236]	@ (8017408 <tcp_oos_insert_segment+0x108>)
 801731a:	f006 fe15 	bl	801df48 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	899b      	ldrh	r3, [r3, #12]
 8017324:	b29b      	uxth	r3, r3
 8017326:	4618      	mov	r0, r3
 8017328:	f7fb fc02 	bl	8012b30 <lwip_htons>
 801732c:	4603      	mov	r3, r0
 801732e:	b2db      	uxtb	r3, r3
 8017330:	f003 0301 	and.w	r3, r3, #1
 8017334:	2b00      	cmp	r3, #0
 8017336:	d028      	beq.n	801738a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017338:	6838      	ldr	r0, [r7, #0]
 801733a:	f7fe fa63 	bl	8015804 <tcp_segs_free>
    next = NULL;
 801733e:	2300      	movs	r3, #0
 8017340:	603b      	str	r3, [r7, #0]
 8017342:	e056      	b.n	80173f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	899b      	ldrh	r3, [r3, #12]
 801734a:	b29b      	uxth	r3, r3
 801734c:	4618      	mov	r0, r3
 801734e:	f7fb fbef 	bl	8012b30 <lwip_htons>
 8017352:	4603      	mov	r3, r0
 8017354:	b2db      	uxtb	r3, r3
 8017356:	f003 0301 	and.w	r3, r3, #1
 801735a:	2b00      	cmp	r3, #0
 801735c:	d00d      	beq.n	801737a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	68db      	ldr	r3, [r3, #12]
 8017362:	899b      	ldrh	r3, [r3, #12]
 8017364:	b29c      	uxth	r4, r3
 8017366:	2001      	movs	r0, #1
 8017368:	f7fb fbe2 	bl	8012b30 <lwip_htons>
 801736c:	4603      	mov	r3, r0
 801736e:	461a      	mov	r2, r3
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	68db      	ldr	r3, [r3, #12]
 8017374:	4322      	orrs	r2, r4
 8017376:	b292      	uxth	r2, r2
 8017378:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017384:	68f8      	ldr	r0, [r7, #12]
 8017386:	f7fe fa52 	bl	801582e <tcp_seg_free>
    while (next &&
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00e      	beq.n	80173ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	891b      	ldrh	r3, [r3, #8]
 8017394:	461a      	mov	r2, r3
 8017396:	4b1d      	ldr	r3, [pc, #116]	@ (801740c <tcp_oos_insert_segment+0x10c>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	441a      	add	r2, r3
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	68db      	ldr	r3, [r3, #12]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	6839      	ldr	r1, [r7, #0]
 80173a4:	8909      	ldrh	r1, [r1, #8]
 80173a6:	440b      	add	r3, r1
 80173a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	daca      	bge.n	8017344 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d01e      	beq.n	80173f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	891b      	ldrh	r3, [r3, #8]
 80173b8:	461a      	mov	r2, r3
 80173ba:	4b14      	ldr	r3, [pc, #80]	@ (801740c <tcp_oos_insert_segment+0x10c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	441a      	add	r2, r3
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	68db      	ldr	r3, [r3, #12]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	dd12      	ble.n	80173f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	68db      	ldr	r3, [r3, #12]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	4b0d      	ldr	r3, [pc, #52]	@ (801740c <tcp_oos_insert_segment+0x10c>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	b29b      	uxth	r3, r3
 80173da:	1ad3      	subs	r3, r2, r3
 80173dc:	b29a      	uxth	r2, r3
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	685a      	ldr	r2, [r3, #4]
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	891b      	ldrh	r3, [r3, #8]
 80173ea:	4619      	mov	r1, r3
 80173ec:	4610      	mov	r0, r2
 80173ee:	f7fc fe07 	bl	8014000 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	683a      	ldr	r2, [r7, #0]
 80173f6:	601a      	str	r2, [r3, #0]
}
 80173f8:	bf00      	nop
 80173fa:	3714      	adds	r7, #20
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd90      	pop	{r4, r7, pc}
 8017400:	080203d8 	.word	0x080203d8
 8017404:	08020698 	.word	0x08020698
 8017408:	08020424 	.word	0x08020424
 801740c:	20027668 	.word	0x20027668

08017410 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017410:	b5b0      	push	{r4, r5, r7, lr}
 8017412:	b086      	sub	sp, #24
 8017414:	af00      	add	r7, sp, #0
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
 801741c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801741e:	e03e      	b.n	801749e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	4618      	mov	r0, r3
 8017430:	f7fc fffa 	bl	8014428 <pbuf_clen>
 8017434:	4603      	mov	r3, r0
 8017436:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801743e:	8a7a      	ldrh	r2, [r7, #18]
 8017440:	429a      	cmp	r2, r3
 8017442:	d906      	bls.n	8017452 <tcp_free_acked_segments+0x42>
 8017444:	4b2a      	ldr	r3, [pc, #168]	@ (80174f0 <tcp_free_acked_segments+0xe0>)
 8017446:	f240 4257 	movw	r2, #1111	@ 0x457
 801744a:	492a      	ldr	r1, [pc, #168]	@ (80174f4 <tcp_free_acked_segments+0xe4>)
 801744c:	482a      	ldr	r0, [pc, #168]	@ (80174f8 <tcp_free_acked_segments+0xe8>)
 801744e:	f006 fd7b 	bl	801df48 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017458:	8a7b      	ldrh	r3, [r7, #18]
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	b29a      	uxth	r2, r3
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017464:	697b      	ldr	r3, [r7, #20]
 8017466:	891a      	ldrh	r2, [r3, #8]
 8017468:	4b24      	ldr	r3, [pc, #144]	@ (80174fc <tcp_free_acked_segments+0xec>)
 801746a:	881b      	ldrh	r3, [r3, #0]
 801746c:	4413      	add	r3, r2
 801746e:	b29a      	uxth	r2, r3
 8017470:	4b22      	ldr	r3, [pc, #136]	@ (80174fc <tcp_free_acked_segments+0xec>)
 8017472:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017474:	6978      	ldr	r0, [r7, #20]
 8017476:	f7fe f9da 	bl	801582e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017480:	2b00      	cmp	r3, #0
 8017482:	d00c      	beq.n	801749e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d109      	bne.n	801749e <tcp_free_acked_segments+0x8e>
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d106      	bne.n	801749e <tcp_free_acked_segments+0x8e>
 8017490:	4b17      	ldr	r3, [pc, #92]	@ (80174f0 <tcp_free_acked_segments+0xe0>)
 8017492:	f240 4261 	movw	r2, #1121	@ 0x461
 8017496:	491a      	ldr	r1, [pc, #104]	@ (8017500 <tcp_free_acked_segments+0xf0>)
 8017498:	4817      	ldr	r0, [pc, #92]	@ (80174f8 <tcp_free_acked_segments+0xe8>)
 801749a:	f006 fd55 	bl	801df48 <iprintf>
  while (seg_list != NULL &&
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d020      	beq.n	80174e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	68db      	ldr	r3, [r3, #12]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7fb fb56 	bl	8012b5c <lwip_htonl>
 80174b0:	4604      	mov	r4, r0
 80174b2:	68bb      	ldr	r3, [r7, #8]
 80174b4:	891b      	ldrh	r3, [r3, #8]
 80174b6:	461d      	mov	r5, r3
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	68db      	ldr	r3, [r3, #12]
 80174bc:	899b      	ldrh	r3, [r3, #12]
 80174be:	b29b      	uxth	r3, r3
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7fb fb35 	bl	8012b30 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	b2db      	uxtb	r3, r3
 80174ca:	f003 0303 	and.w	r3, r3, #3
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d001      	beq.n	80174d6 <tcp_free_acked_segments+0xc6>
 80174d2:	2301      	movs	r3, #1
 80174d4:	e000      	b.n	80174d8 <tcp_free_acked_segments+0xc8>
 80174d6:	2300      	movs	r3, #0
 80174d8:	442b      	add	r3, r5
 80174da:	18e2      	adds	r2, r4, r3
 80174dc:	4b09      	ldr	r3, [pc, #36]	@ (8017504 <tcp_free_acked_segments+0xf4>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	dd9c      	ble.n	8017420 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80174e6:	68bb      	ldr	r3, [r7, #8]
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3718      	adds	r7, #24
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bdb0      	pop	{r4, r5, r7, pc}
 80174f0:	080203d8 	.word	0x080203d8
 80174f4:	080206c0 	.word	0x080206c0
 80174f8:	08020424 	.word	0x08020424
 80174fc:	20027670 	.word	0x20027670
 8017500:	080206e8 	.word	0x080206e8
 8017504:	2002766c 	.word	0x2002766c

08017508 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017508:	b5b0      	push	{r4, r5, r7, lr}
 801750a:	b094      	sub	sp, #80	@ 0x50
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d106      	bne.n	8017528 <tcp_receive+0x20>
 801751a:	4b91      	ldr	r3, [pc, #580]	@ (8017760 <tcp_receive+0x258>)
 801751c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8017520:	4990      	ldr	r1, [pc, #576]	@ (8017764 <tcp_receive+0x25c>)
 8017522:	4891      	ldr	r0, [pc, #580]	@ (8017768 <tcp_receive+0x260>)
 8017524:	f006 fd10 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	7d1b      	ldrb	r3, [r3, #20]
 801752c:	2b03      	cmp	r3, #3
 801752e:	d806      	bhi.n	801753e <tcp_receive+0x36>
 8017530:	4b8b      	ldr	r3, [pc, #556]	@ (8017760 <tcp_receive+0x258>)
 8017532:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017536:	498d      	ldr	r1, [pc, #564]	@ (801776c <tcp_receive+0x264>)
 8017538:	488b      	ldr	r0, [pc, #556]	@ (8017768 <tcp_receive+0x260>)
 801753a:	f006 fd05 	bl	801df48 <iprintf>

  if (flags & TCP_ACK) {
 801753e:	4b8c      	ldr	r3, [pc, #560]	@ (8017770 <tcp_receive+0x268>)
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	f003 0310 	and.w	r3, r3, #16
 8017546:	2b00      	cmp	r3, #0
 8017548:	f000 8264 	beq.w	8017a14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017552:	461a      	mov	r2, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017558:	4413      	add	r3, r2
 801755a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017560:	4b84      	ldr	r3, [pc, #528]	@ (8017774 <tcp_receive+0x26c>)
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	db1b      	blt.n	80175a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801756e:	4b81      	ldr	r3, [pc, #516]	@ (8017774 <tcp_receive+0x26c>)
 8017570:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017572:	429a      	cmp	r2, r3
 8017574:	d106      	bne.n	8017584 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801757a:	4b7f      	ldr	r3, [pc, #508]	@ (8017778 <tcp_receive+0x270>)
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	1ad3      	subs	r3, r2, r3
 8017580:	2b00      	cmp	r3, #0
 8017582:	db0e      	blt.n	80175a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017588:	4b7b      	ldr	r3, [pc, #492]	@ (8017778 <tcp_receive+0x270>)
 801758a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801758c:	429a      	cmp	r2, r3
 801758e:	d125      	bne.n	80175dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017590:	4b7a      	ldr	r3, [pc, #488]	@ (801777c <tcp_receive+0x274>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	89db      	ldrh	r3, [r3, #14]
 8017596:	b29a      	uxth	r2, r3
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801759e:	429a      	cmp	r2, r3
 80175a0:	d91c      	bls.n	80175dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80175a2:	4b76      	ldr	r3, [pc, #472]	@ (801777c <tcp_receive+0x274>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	89db      	ldrh	r3, [r3, #14]
 80175a8:	b29a      	uxth	r2, r3
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80175bc:	429a      	cmp	r2, r3
 80175be:	d205      	bcs.n	80175cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80175cc:	4b69      	ldr	r3, [pc, #420]	@ (8017774 <tcp_receive+0x26c>)
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80175d4:	4b68      	ldr	r3, [pc, #416]	@ (8017778 <tcp_receive+0x270>)
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80175dc:	4b66      	ldr	r3, [pc, #408]	@ (8017778 <tcp_receive+0x270>)
 80175de:	681a      	ldr	r2, [r3, #0]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175e4:	1ad3      	subs	r3, r2, r3
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	dc58      	bgt.n	801769c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80175ea:	4b65      	ldr	r3, [pc, #404]	@ (8017780 <tcp_receive+0x278>)
 80175ec:	881b      	ldrh	r3, [r3, #0]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d14b      	bne.n	801768a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80175fc:	4413      	add	r3, r2
 80175fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017600:	429a      	cmp	r2, r3
 8017602:	d142      	bne.n	801768a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801760a:	2b00      	cmp	r3, #0
 801760c:	db3d      	blt.n	801768a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017612:	4b59      	ldr	r3, [pc, #356]	@ (8017778 <tcp_receive+0x270>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	429a      	cmp	r2, r3
 8017618:	d137      	bne.n	801768a <tcp_receive+0x182>
              found_dupack = 1;
 801761a:	2301      	movs	r3, #1
 801761c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017624:	2bff      	cmp	r3, #255	@ 0xff
 8017626:	d007      	beq.n	8017638 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801762e:	3301      	adds	r3, #1
 8017630:	b2da      	uxtb	r2, r3
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801763e:	2b03      	cmp	r3, #3
 8017640:	d91b      	bls.n	801767a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801764c:	4413      	add	r3, r2
 801764e:	b29a      	uxth	r2, r3
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017656:	429a      	cmp	r2, r3
 8017658:	d30a      	bcc.n	8017670 <tcp_receive+0x168>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017664:	4413      	add	r3, r2
 8017666:	b29a      	uxth	r2, r3
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801766e:	e004      	b.n	801767a <tcp_receive+0x172>
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017676:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017680:	2b02      	cmp	r3, #2
 8017682:	d902      	bls.n	801768a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f001 fee7 	bl	8019458 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801768a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801768c:	2b00      	cmp	r3, #0
 801768e:	f040 8161 	bne.w	8017954 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	2200      	movs	r2, #0
 8017696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801769a:	e15b      	b.n	8017954 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801769c:	4b36      	ldr	r3, [pc, #216]	@ (8017778 <tcp_receive+0x270>)
 801769e:	681a      	ldr	r2, [r3, #0]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80176a4:	1ad3      	subs	r3, r2, r3
 80176a6:	3b01      	subs	r3, #1
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	f2c0 814e 	blt.w	801794a <tcp_receive+0x442>
 80176ae:	4b32      	ldr	r3, [pc, #200]	@ (8017778 <tcp_receive+0x270>)
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176b6:	1ad3      	subs	r3, r2, r3
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f300 8146 	bgt.w	801794a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	8b5b      	ldrh	r3, [r3, #26]
 80176c2:	f003 0304 	and.w	r3, r3, #4
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d010      	beq.n	80176ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	8b5b      	ldrh	r3, [r3, #26]
 80176ce:	f023 0304 	bic.w	r3, r3, #4
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2200      	movs	r2, #0
 80176e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80176fa:	10db      	asrs	r3, r3, #3
 80176fc:	b21b      	sxth	r3, r3
 80176fe:	b29a      	uxth	r2, r3
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017706:	b29b      	uxth	r3, r3
 8017708:	4413      	add	r3, r2
 801770a:	b29b      	uxth	r3, r3
 801770c:	b21a      	sxth	r2, r3
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017714:	4b18      	ldr	r3, [pc, #96]	@ (8017778 <tcp_receive+0x270>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	b29a      	uxth	r2, r3
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801771e:	b29b      	uxth	r3, r3
 8017720:	1ad3      	subs	r3, r2, r3
 8017722:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	2200      	movs	r2, #0
 8017728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801772c:	4b12      	ldr	r3, [pc, #72]	@ (8017778 <tcp_receive+0x270>)
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	7d1b      	ldrb	r3, [r3, #20]
 8017738:	2b03      	cmp	r3, #3
 801773a:	f240 8097 	bls.w	801786c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801774a:	429a      	cmp	r2, r3
 801774c:	d245      	bcs.n	80177da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	8b5b      	ldrh	r3, [r3, #26]
 8017752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017756:	2b00      	cmp	r3, #0
 8017758:	d014      	beq.n	8017784 <tcp_receive+0x27c>
 801775a:	2301      	movs	r3, #1
 801775c:	e013      	b.n	8017786 <tcp_receive+0x27e>
 801775e:	bf00      	nop
 8017760:	080203d8 	.word	0x080203d8
 8017764:	08020708 	.word	0x08020708
 8017768:	08020424 	.word	0x08020424
 801776c:	08020724 	.word	0x08020724
 8017770:	20027674 	.word	0x20027674
 8017774:	20027668 	.word	0x20027668
 8017778:	2002766c 	.word	0x2002766c
 801777c:	20027658 	.word	0x20027658
 8017780:	20027672 	.word	0x20027672
 8017784:	2302      	movs	r3, #2
 8017786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801778a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801778e:	b29a      	uxth	r2, r3
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017794:	fb12 f303 	smulbb	r3, r2, r3
 8017798:	b29b      	uxth	r3, r3
 801779a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801779c:	4293      	cmp	r3, r2
 801779e:	bf28      	it	cs
 80177a0:	4613      	movcs	r3, r2
 80177a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80177aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80177ac:	4413      	add	r3, r2
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d309      	bcc.n	80177ce <tcp_receive+0x2c6>
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80177c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80177c2:	4413      	add	r3, r2
 80177c4:	b29a      	uxth	r2, r3
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80177cc:	e04e      	b.n	801786c <tcp_receive+0x364>
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80177d8:	e048      	b.n	801786c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80177e2:	4413      	add	r3, r2
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d309      	bcc.n	8017804 <tcp_receive+0x2fc>
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80177f8:	4413      	add	r3, r2
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017802:	e004      	b.n	801780e <tcp_receive+0x306>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801780a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801781a:	429a      	cmp	r2, r3
 801781c:	d326      	bcc.n	801786c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	b29a      	uxth	r2, r3
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801783e:	4413      	add	r3, r2
 8017840:	b29a      	uxth	r2, r3
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017848:	429a      	cmp	r2, r3
 801784a:	d30a      	bcc.n	8017862 <tcp_receive+0x35a>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017856:	4413      	add	r3, r2
 8017858:	b29a      	uxth	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017860:	e004      	b.n	801786c <tcp_receive+0x364>
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017868:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017874:	4a98      	ldr	r2, [pc, #608]	@ (8017ad8 <tcp_receive+0x5d0>)
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f7ff fdca 	bl	8017410 <tcp_free_acked_segments>
 801787c:	4602      	mov	r2, r0
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801788a:	4a94      	ldr	r2, [pc, #592]	@ (8017adc <tcp_receive+0x5d4>)
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f7ff fdbf 	bl	8017410 <tcp_free_acked_segments>
 8017892:	4602      	mov	r2, r0
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801789c:	2b00      	cmp	r3, #0
 801789e:	d104      	bne.n	80178aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80178a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80178a8:	e002      	b.n	80178b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2200      	movs	r2, #0
 80178ae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2200      	movs	r2, #0
 80178b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d103      	bne.n	80178c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80178cc:	4b84      	ldr	r3, [pc, #528]	@ (8017ae0 <tcp_receive+0x5d8>)
 80178ce:	881b      	ldrh	r3, [r3, #0]
 80178d0:	4413      	add	r3, r2
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	8b5b      	ldrh	r3, [r3, #26]
 80178de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d035      	beq.n	8017952 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d118      	bne.n	8017920 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d00c      	beq.n	8017910 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178fe:	68db      	ldr	r3, [r3, #12]
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	4618      	mov	r0, r3
 8017904:	f7fb f92a 	bl	8012b5c <lwip_htonl>
 8017908:	4603      	mov	r3, r0
 801790a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801790c:	2b00      	cmp	r3, #0
 801790e:	dc20      	bgt.n	8017952 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	8b5b      	ldrh	r3, [r3, #26]
 8017914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017918:	b29a      	uxth	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801791e:	e018      	b.n	8017952 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017928:	68db      	ldr	r3, [r3, #12]
 801792a:	685b      	ldr	r3, [r3, #4]
 801792c:	4618      	mov	r0, r3
 801792e:	f7fb f915 	bl	8012b5c <lwip_htonl>
 8017932:	4603      	mov	r3, r0
 8017934:	1ae3      	subs	r3, r4, r3
 8017936:	2b00      	cmp	r3, #0
 8017938:	dc0b      	bgt.n	8017952 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	8b5b      	ldrh	r3, [r3, #26]
 801793e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017942:	b29a      	uxth	r2, r3
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017948:	e003      	b.n	8017952 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f001 ff70 	bl	8019830 <tcp_send_empty_ack>
 8017950:	e000      	b.n	8017954 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017952:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017958:	2b00      	cmp	r3, #0
 801795a:	d05b      	beq.n	8017a14 <tcp_receive+0x50c>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017960:	4b60      	ldr	r3, [pc, #384]	@ (8017ae4 <tcp_receive+0x5dc>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	2b00      	cmp	r3, #0
 8017968:	da54      	bge.n	8017a14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801796a:	4b5f      	ldr	r3, [pc, #380]	@ (8017ae8 <tcp_receive+0x5e0>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	b29a      	uxth	r2, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017974:	b29b      	uxth	r3, r3
 8017976:	1ad3      	subs	r3, r2, r3
 8017978:	b29b      	uxth	r3, r3
 801797a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801797e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017988:	10db      	asrs	r3, r3, #3
 801798a:	b21b      	sxth	r3, r3
 801798c:	b29b      	uxth	r3, r3
 801798e:	1ad3      	subs	r3, r2, r3
 8017990:	b29b      	uxth	r3, r3
 8017992:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801799c:	b29a      	uxth	r2, r3
 801799e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80179a2:	4413      	add	r3, r2
 80179a4:	b29b      	uxth	r3, r3
 80179a6:	b21a      	sxth	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80179ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	da05      	bge.n	80179c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80179b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80179b8:	425b      	negs	r3, r3
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80179c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80179ca:	109b      	asrs	r3, r3, #2
 80179cc:	b21b      	sxth	r3, r3
 80179ce:	b29b      	uxth	r3, r3
 80179d0:	1ad3      	subs	r3, r2, r3
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80179de:	b29a      	uxth	r2, r3
 80179e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80179e4:	4413      	add	r3, r2
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	b21a      	sxth	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80179f4:	10db      	asrs	r3, r3, #3
 80179f6:	b21b      	sxth	r3, r3
 80179f8:	b29a      	uxth	r2, r3
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017a00:	b29b      	uxth	r3, r3
 8017a02:	4413      	add	r3, r2
 8017a04:	b29b      	uxth	r3, r3
 8017a06:	b21a      	sxth	r2, r3
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	2200      	movs	r2, #0
 8017a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017a14:	4b35      	ldr	r3, [pc, #212]	@ (8017aec <tcp_receive+0x5e4>)
 8017a16:	881b      	ldrh	r3, [r3, #0]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	f000 84df 	beq.w	80183dc <tcp_receive+0xed4>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	7d1b      	ldrb	r3, [r3, #20]
 8017a22:	2b06      	cmp	r3, #6
 8017a24:	f200 84da 	bhi.w	80183dc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a2c:	4b30      	ldr	r3, [pc, #192]	@ (8017af0 <tcp_receive+0x5e8>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	1ad3      	subs	r3, r2, r3
 8017a32:	3b01      	subs	r3, #1
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f2c0 808f 	blt.w	8017b58 <tcp_receive+0x650>
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8017aec <tcp_receive+0x5e4>)
 8017a40:	881b      	ldrh	r3, [r3, #0]
 8017a42:	4619      	mov	r1, r3
 8017a44:	4b2a      	ldr	r3, [pc, #168]	@ (8017af0 <tcp_receive+0x5e8>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	440b      	add	r3, r1
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	f300 8082 	bgt.w	8017b58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017a54:	4b27      	ldr	r3, [pc, #156]	@ (8017af4 <tcp_receive+0x5ec>)
 8017a56:	685b      	ldr	r3, [r3, #4]
 8017a58:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a5e:	4b24      	ldr	r3, [pc, #144]	@ (8017af0 <tcp_receive+0x5e8>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	1ad3      	subs	r3, r2, r3
 8017a64:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017a66:	4b23      	ldr	r3, [pc, #140]	@ (8017af4 <tcp_receive+0x5ec>)
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d106      	bne.n	8017a7c <tcp_receive+0x574>
 8017a6e:	4b22      	ldr	r3, [pc, #136]	@ (8017af8 <tcp_receive+0x5f0>)
 8017a70:	f240 5294 	movw	r2, #1428	@ 0x594
 8017a74:	4921      	ldr	r1, [pc, #132]	@ (8017afc <tcp_receive+0x5f4>)
 8017a76:	4822      	ldr	r0, [pc, #136]	@ (8017b00 <tcp_receive+0x5f8>)
 8017a78:	f006 fa66 	bl	801df48 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017a82:	4293      	cmp	r3, r2
 8017a84:	d906      	bls.n	8017a94 <tcp_receive+0x58c>
 8017a86:	4b1c      	ldr	r3, [pc, #112]	@ (8017af8 <tcp_receive+0x5f0>)
 8017a88:	f240 5295 	movw	r2, #1429	@ 0x595
 8017a8c:	491d      	ldr	r1, [pc, #116]	@ (8017b04 <tcp_receive+0x5fc>)
 8017a8e:	481c      	ldr	r0, [pc, #112]	@ (8017b00 <tcp_receive+0x5f8>)
 8017a90:	f006 fa5a 	bl	801df48 <iprintf>
      off = (u16_t)off32;
 8017a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017a9a:	4b16      	ldr	r3, [pc, #88]	@ (8017af4 <tcp_receive+0x5ec>)
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	891b      	ldrh	r3, [r3, #8]
 8017aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d906      	bls.n	8017ab6 <tcp_receive+0x5ae>
 8017aa8:	4b13      	ldr	r3, [pc, #76]	@ (8017af8 <tcp_receive+0x5f0>)
 8017aaa:	f240 5297 	movw	r2, #1431	@ 0x597
 8017aae:	4916      	ldr	r1, [pc, #88]	@ (8017b08 <tcp_receive+0x600>)
 8017ab0:	4813      	ldr	r0, [pc, #76]	@ (8017b00 <tcp_receive+0x5f8>)
 8017ab2:	f006 fa49 	bl	801df48 <iprintf>
      inseg.len -= off;
 8017ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8017af4 <tcp_receive+0x5ec>)
 8017ab8:	891a      	ldrh	r2, [r3, #8]
 8017aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017abe:	1ad3      	subs	r3, r2, r3
 8017ac0:	b29a      	uxth	r2, r3
 8017ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8017af4 <tcp_receive+0x5ec>)
 8017ac4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8017af4 <tcp_receive+0x5ec>)
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	891a      	ldrh	r2, [r3, #8]
 8017acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ad0:	1ad3      	subs	r3, r2, r3
 8017ad2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017ad4:	e02a      	b.n	8017b2c <tcp_receive+0x624>
 8017ad6:	bf00      	nop
 8017ad8:	08020740 	.word	0x08020740
 8017adc:	08020748 	.word	0x08020748
 8017ae0:	20027670 	.word	0x20027670
 8017ae4:	2002766c 	.word	0x2002766c
 8017ae8:	20027630 	.word	0x20027630
 8017aec:	20027672 	.word	0x20027672
 8017af0:	20027668 	.word	0x20027668
 8017af4:	20027648 	.word	0x20027648
 8017af8:	080203d8 	.word	0x080203d8
 8017afc:	08020750 	.word	0x08020750
 8017b00:	08020424 	.word	0x08020424
 8017b04:	08020760 	.word	0x08020760
 8017b08:	08020770 	.word	0x08020770
        off -= p->len;
 8017b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b0e:	895b      	ldrh	r3, [r3, #10]
 8017b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017b1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b22:	2200      	movs	r2, #0
 8017b24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b2e:	895b      	ldrh	r3, [r3, #10]
 8017b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d8e9      	bhi.n	8017b0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017b40:	f7fc fb5e 	bl	8014200 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b48:	4a90      	ldr	r2, [pc, #576]	@ (8017d8c <tcp_receive+0x884>)
 8017b4a:	6013      	str	r3, [r2, #0]
 8017b4c:	4b90      	ldr	r3, [pc, #576]	@ (8017d90 <tcp_receive+0x888>)
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	4a8e      	ldr	r2, [pc, #568]	@ (8017d8c <tcp_receive+0x884>)
 8017b52:	6812      	ldr	r2, [r2, #0]
 8017b54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017b56:	e00d      	b.n	8017b74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017b58:	4b8c      	ldr	r3, [pc, #560]	@ (8017d8c <tcp_receive+0x884>)
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b60:	1ad3      	subs	r3, r2, r3
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	da06      	bge.n	8017b74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	8b5b      	ldrh	r3, [r3, #26]
 8017b6a:	f043 0302 	orr.w	r3, r3, #2
 8017b6e:	b29a      	uxth	r2, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017b74:	4b85      	ldr	r3, [pc, #532]	@ (8017d8c <tcp_receive+0x884>)
 8017b76:	681a      	ldr	r2, [r3, #0]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b7c:	1ad3      	subs	r3, r2, r3
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	f2c0 8427 	blt.w	80183d2 <tcp_receive+0xeca>
 8017b84:	4b81      	ldr	r3, [pc, #516]	@ (8017d8c <tcp_receive+0x884>)
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b8c:	6879      	ldr	r1, [r7, #4]
 8017b8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b90:	440b      	add	r3, r1
 8017b92:	1ad3      	subs	r3, r2, r3
 8017b94:	3301      	adds	r3, #1
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	f300 841b 	bgt.w	80183d2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8017d8c <tcp_receive+0x884>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	f040 8298 	bne.w	80180da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017baa:	4b79      	ldr	r3, [pc, #484]	@ (8017d90 <tcp_receive+0x888>)
 8017bac:	891c      	ldrh	r4, [r3, #8]
 8017bae:	4b78      	ldr	r3, [pc, #480]	@ (8017d90 <tcp_receive+0x888>)
 8017bb0:	68db      	ldr	r3, [r3, #12]
 8017bb2:	899b      	ldrh	r3, [r3, #12]
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7fa ffba 	bl	8012b30 <lwip_htons>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	b2db      	uxtb	r3, r3
 8017bc0:	f003 0303 	and.w	r3, r3, #3
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d001      	beq.n	8017bcc <tcp_receive+0x6c4>
 8017bc8:	2301      	movs	r3, #1
 8017bca:	e000      	b.n	8017bce <tcp_receive+0x6c6>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	4423      	add	r3, r4
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	4b70      	ldr	r3, [pc, #448]	@ (8017d94 <tcp_receive+0x88c>)
 8017bd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017bda:	4b6e      	ldr	r3, [pc, #440]	@ (8017d94 <tcp_receive+0x88c>)
 8017bdc:	881b      	ldrh	r3, [r3, #0]
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d274      	bcs.n	8017ccc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017be2:	4b6b      	ldr	r3, [pc, #428]	@ (8017d90 <tcp_receive+0x888>)
 8017be4:	68db      	ldr	r3, [r3, #12]
 8017be6:	899b      	ldrh	r3, [r3, #12]
 8017be8:	b29b      	uxth	r3, r3
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fa ffa0 	bl	8012b30 <lwip_htons>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	f003 0301 	and.w	r3, r3, #1
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d01e      	beq.n	8017c3a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017bfc:	4b64      	ldr	r3, [pc, #400]	@ (8017d90 <tcp_receive+0x888>)
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	899b      	ldrh	r3, [r3, #12]
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	b21b      	sxth	r3, r3
 8017c06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017c0a:	b21c      	sxth	r4, r3
 8017c0c:	4b60      	ldr	r3, [pc, #384]	@ (8017d90 <tcp_receive+0x888>)
 8017c0e:	68db      	ldr	r3, [r3, #12]
 8017c10:	899b      	ldrh	r3, [r3, #12]
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fa ff8b 	bl	8012b30 <lwip_htons>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7fa ff83 	bl	8012b30 <lwip_htons>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	b21b      	sxth	r3, r3
 8017c2e:	4323      	orrs	r3, r4
 8017c30:	b21a      	sxth	r2, r3
 8017c32:	4b57      	ldr	r3, [pc, #348]	@ (8017d90 <tcp_receive+0x888>)
 8017c34:	68db      	ldr	r3, [r3, #12]
 8017c36:	b292      	uxth	r2, r2
 8017c38:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017c3e:	4b54      	ldr	r3, [pc, #336]	@ (8017d90 <tcp_receive+0x888>)
 8017c40:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017c42:	4b53      	ldr	r3, [pc, #332]	@ (8017d90 <tcp_receive+0x888>)
 8017c44:	68db      	ldr	r3, [r3, #12]
 8017c46:	899b      	ldrh	r3, [r3, #12]
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7fa ff70 	bl	8012b30 <lwip_htons>
 8017c50:	4603      	mov	r3, r0
 8017c52:	b2db      	uxtb	r3, r3
 8017c54:	f003 0302 	and.w	r3, r3, #2
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d005      	beq.n	8017c68 <tcp_receive+0x760>
            inseg.len -= 1;
 8017c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8017d90 <tcp_receive+0x888>)
 8017c5e:	891b      	ldrh	r3, [r3, #8]
 8017c60:	3b01      	subs	r3, #1
 8017c62:	b29a      	uxth	r2, r3
 8017c64:	4b4a      	ldr	r3, [pc, #296]	@ (8017d90 <tcp_receive+0x888>)
 8017c66:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017c68:	4b49      	ldr	r3, [pc, #292]	@ (8017d90 <tcp_receive+0x888>)
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	4a48      	ldr	r2, [pc, #288]	@ (8017d90 <tcp_receive+0x888>)
 8017c6e:	8912      	ldrh	r2, [r2, #8]
 8017c70:	4611      	mov	r1, r2
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7fc f9c4 	bl	8014000 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017c78:	4b45      	ldr	r3, [pc, #276]	@ (8017d90 <tcp_receive+0x888>)
 8017c7a:	891c      	ldrh	r4, [r3, #8]
 8017c7c:	4b44      	ldr	r3, [pc, #272]	@ (8017d90 <tcp_receive+0x888>)
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	899b      	ldrh	r3, [r3, #12]
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7fa ff53 	bl	8012b30 <lwip_htons>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	f003 0303 	and.w	r3, r3, #3
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d001      	beq.n	8017c9a <tcp_receive+0x792>
 8017c96:	2301      	movs	r3, #1
 8017c98:	e000      	b.n	8017c9c <tcp_receive+0x794>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	4423      	add	r3, r4
 8017c9e:	b29a      	uxth	r2, r3
 8017ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8017d94 <tcp_receive+0x88c>)
 8017ca2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8017d94 <tcp_receive+0x88c>)
 8017ca6:	881b      	ldrh	r3, [r3, #0]
 8017ca8:	461a      	mov	r2, r3
 8017caa:	4b38      	ldr	r3, [pc, #224]	@ (8017d8c <tcp_receive+0x884>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	441a      	add	r2, r3
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cb4:	6879      	ldr	r1, [r7, #4]
 8017cb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017cb8:	440b      	add	r3, r1
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d006      	beq.n	8017ccc <tcp_receive+0x7c4>
 8017cbe:	4b36      	ldr	r3, [pc, #216]	@ (8017d98 <tcp_receive+0x890>)
 8017cc0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017cc4:	4935      	ldr	r1, [pc, #212]	@ (8017d9c <tcp_receive+0x894>)
 8017cc6:	4836      	ldr	r0, [pc, #216]	@ (8017da0 <tcp_receive+0x898>)
 8017cc8:	f006 f93e 	bl	801df48 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	f000 80e6 	beq.w	8017ea2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8017d90 <tcp_receive+0x888>)
 8017cd8:	68db      	ldr	r3, [r3, #12]
 8017cda:	899b      	ldrh	r3, [r3, #12]
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f7fa ff26 	bl	8012b30 <lwip_htons>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	b2db      	uxtb	r3, r3
 8017ce8:	f003 0301 	and.w	r3, r3, #1
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d010      	beq.n	8017d12 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017cf0:	e00a      	b.n	8017d08 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cf6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cfc:	681a      	ldr	r2, [r3, #0]
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017d02:	68f8      	ldr	r0, [r7, #12]
 8017d04:	f7fd fd93 	bl	801582e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d1f0      	bne.n	8017cf2 <tcp_receive+0x7ea>
 8017d10:	e0c7      	b.n	8017ea2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017d18:	e051      	b.n	8017dbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d1c:	68db      	ldr	r3, [r3, #12]
 8017d1e:	899b      	ldrh	r3, [r3, #12]
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7fa ff04 	bl	8012b30 <lwip_htons>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	b2db      	uxtb	r3, r3
 8017d2c:	f003 0301 	and.w	r3, r3, #1
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d03c      	beq.n	8017dae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017d34:	4b16      	ldr	r3, [pc, #88]	@ (8017d90 <tcp_receive+0x888>)
 8017d36:	68db      	ldr	r3, [r3, #12]
 8017d38:	899b      	ldrh	r3, [r3, #12]
 8017d3a:	b29b      	uxth	r3, r3
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7fa fef7 	bl	8012b30 <lwip_htons>
 8017d42:	4603      	mov	r3, r0
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d12f      	bne.n	8017dae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017d4e:	4b10      	ldr	r3, [pc, #64]	@ (8017d90 <tcp_receive+0x888>)
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	899b      	ldrh	r3, [r3, #12]
 8017d54:	b29c      	uxth	r4, r3
 8017d56:	2001      	movs	r0, #1
 8017d58:	f7fa feea 	bl	8012b30 <lwip_htons>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	461a      	mov	r2, r3
 8017d60:	4b0b      	ldr	r3, [pc, #44]	@ (8017d90 <tcp_receive+0x888>)
 8017d62:	68db      	ldr	r3, [r3, #12]
 8017d64:	4322      	orrs	r2, r4
 8017d66:	b292      	uxth	r2, r2
 8017d68:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017d6a:	4b09      	ldr	r3, [pc, #36]	@ (8017d90 <tcp_receive+0x888>)
 8017d6c:	891c      	ldrh	r4, [r3, #8]
 8017d6e:	4b08      	ldr	r3, [pc, #32]	@ (8017d90 <tcp_receive+0x888>)
 8017d70:	68db      	ldr	r3, [r3, #12]
 8017d72:	899b      	ldrh	r3, [r3, #12]
 8017d74:	b29b      	uxth	r3, r3
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fa feda 	bl	8012b30 <lwip_htons>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	b2db      	uxtb	r3, r3
 8017d80:	f003 0303 	and.w	r3, r3, #3
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d00d      	beq.n	8017da4 <tcp_receive+0x89c>
 8017d88:	2301      	movs	r3, #1
 8017d8a:	e00c      	b.n	8017da6 <tcp_receive+0x89e>
 8017d8c:	20027668 	.word	0x20027668
 8017d90:	20027648 	.word	0x20027648
 8017d94:	20027672 	.word	0x20027672
 8017d98:	080203d8 	.word	0x080203d8
 8017d9c:	08020780 	.word	0x08020780
 8017da0:	08020424 	.word	0x08020424
 8017da4:	2300      	movs	r3, #0
 8017da6:	4423      	add	r3, r4
 8017da8:	b29a      	uxth	r2, r3
 8017daa:	4b98      	ldr	r3, [pc, #608]	@ (801800c <tcp_receive+0xb04>)
 8017dac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017db0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017db8:	6938      	ldr	r0, [r7, #16]
 8017dba:	f7fd fd38 	bl	801582e <tcp_seg_free>
            while (next &&
 8017dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d00e      	beq.n	8017de2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017dc4:	4b91      	ldr	r3, [pc, #580]	@ (801800c <tcp_receive+0xb04>)
 8017dc6:	881b      	ldrh	r3, [r3, #0]
 8017dc8:	461a      	mov	r2, r3
 8017dca:	4b91      	ldr	r3, [pc, #580]	@ (8018010 <tcp_receive+0xb08>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	441a      	add	r2, r3
 8017dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dd2:	68db      	ldr	r3, [r3, #12]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017dd8:	8909      	ldrh	r1, [r1, #8]
 8017dda:	440b      	add	r3, r1
 8017ddc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	da9b      	bge.n	8017d1a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d059      	beq.n	8017e9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017de8:	4b88      	ldr	r3, [pc, #544]	@ (801800c <tcp_receive+0xb04>)
 8017dea:	881b      	ldrh	r3, [r3, #0]
 8017dec:	461a      	mov	r2, r3
 8017dee:	4b88      	ldr	r3, [pc, #544]	@ (8018010 <tcp_receive+0xb08>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	441a      	add	r2, r3
 8017df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017df6:	68db      	ldr	r3, [r3, #12]
 8017df8:	685b      	ldr	r3, [r3, #4]
 8017dfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	dd4d      	ble.n	8017e9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e02:	68db      	ldr	r3, [r3, #12]
 8017e04:	685b      	ldr	r3, [r3, #4]
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	4b81      	ldr	r3, [pc, #516]	@ (8018010 <tcp_receive+0xb08>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	1ad3      	subs	r3, r2, r3
 8017e10:	b29a      	uxth	r2, r3
 8017e12:	4b80      	ldr	r3, [pc, #512]	@ (8018014 <tcp_receive+0xb0c>)
 8017e14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017e16:	4b7f      	ldr	r3, [pc, #508]	@ (8018014 <tcp_receive+0xb0c>)
 8017e18:	68db      	ldr	r3, [r3, #12]
 8017e1a:	899b      	ldrh	r3, [r3, #12]
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7fa fe86 	bl	8012b30 <lwip_htons>
 8017e24:	4603      	mov	r3, r0
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	f003 0302 	and.w	r3, r3, #2
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d005      	beq.n	8017e3c <tcp_receive+0x934>
                inseg.len -= 1;
 8017e30:	4b78      	ldr	r3, [pc, #480]	@ (8018014 <tcp_receive+0xb0c>)
 8017e32:	891b      	ldrh	r3, [r3, #8]
 8017e34:	3b01      	subs	r3, #1
 8017e36:	b29a      	uxth	r2, r3
 8017e38:	4b76      	ldr	r3, [pc, #472]	@ (8018014 <tcp_receive+0xb0c>)
 8017e3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017e3c:	4b75      	ldr	r3, [pc, #468]	@ (8018014 <tcp_receive+0xb0c>)
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	4a74      	ldr	r2, [pc, #464]	@ (8018014 <tcp_receive+0xb0c>)
 8017e42:	8912      	ldrh	r2, [r2, #8]
 8017e44:	4611      	mov	r1, r2
 8017e46:	4618      	mov	r0, r3
 8017e48:	f7fc f8da 	bl	8014000 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017e4c:	4b71      	ldr	r3, [pc, #452]	@ (8018014 <tcp_receive+0xb0c>)
 8017e4e:	891c      	ldrh	r4, [r3, #8]
 8017e50:	4b70      	ldr	r3, [pc, #448]	@ (8018014 <tcp_receive+0xb0c>)
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	899b      	ldrh	r3, [r3, #12]
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fa fe69 	bl	8012b30 <lwip_htons>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	f003 0303 	and.w	r3, r3, #3
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d001      	beq.n	8017e6e <tcp_receive+0x966>
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	e000      	b.n	8017e70 <tcp_receive+0x968>
 8017e6e:	2300      	movs	r3, #0
 8017e70:	4423      	add	r3, r4
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	4b65      	ldr	r3, [pc, #404]	@ (801800c <tcp_receive+0xb04>)
 8017e76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017e78:	4b64      	ldr	r3, [pc, #400]	@ (801800c <tcp_receive+0xb04>)
 8017e7a:	881b      	ldrh	r3, [r3, #0]
 8017e7c:	461a      	mov	r2, r3
 8017e7e:	4b64      	ldr	r3, [pc, #400]	@ (8018010 <tcp_receive+0xb08>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	441a      	add	r2, r3
 8017e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d006      	beq.n	8017e9c <tcp_receive+0x994>
 8017e8e:	4b62      	ldr	r3, [pc, #392]	@ (8018018 <tcp_receive+0xb10>)
 8017e90:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017e94:	4961      	ldr	r1, [pc, #388]	@ (801801c <tcp_receive+0xb14>)
 8017e96:	4862      	ldr	r0, [pc, #392]	@ (8018020 <tcp_receive+0xb18>)
 8017e98:	f006 f856 	bl	801df48 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017ea0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017ea2:	4b5a      	ldr	r3, [pc, #360]	@ (801800c <tcp_receive+0xb04>)
 8017ea4:	881b      	ldrh	r3, [r3, #0]
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	4b59      	ldr	r3, [pc, #356]	@ (8018010 <tcp_receive+0xb08>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	441a      	add	r2, r3
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017eb6:	4b55      	ldr	r3, [pc, #340]	@ (801800c <tcp_receive+0xb04>)
 8017eb8:	881b      	ldrh	r3, [r3, #0]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d206      	bcs.n	8017ecc <tcp_receive+0x9c4>
 8017ebe:	4b56      	ldr	r3, [pc, #344]	@ (8018018 <tcp_receive+0xb10>)
 8017ec0:	f240 6207 	movw	r2, #1543	@ 0x607
 8017ec4:	4957      	ldr	r1, [pc, #348]	@ (8018024 <tcp_receive+0xb1c>)
 8017ec6:	4856      	ldr	r0, [pc, #344]	@ (8018020 <tcp_receive+0xb18>)
 8017ec8:	f006 f83e 	bl	801df48 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017ed0:	4b4e      	ldr	r3, [pc, #312]	@ (801800c <tcp_receive+0xb04>)
 8017ed2:	881b      	ldrh	r3, [r3, #0]
 8017ed4:	1ad3      	subs	r3, r2, r3
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017edc:	6878      	ldr	r0, [r7, #4]
 8017ede:	f7fc ffc5 	bl	8014e6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8018014 <tcp_receive+0xb0c>)
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	891b      	ldrh	r3, [r3, #8]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d006      	beq.n	8017efa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017eec:	4b49      	ldr	r3, [pc, #292]	@ (8018014 <tcp_receive+0xb0c>)
 8017eee:	685b      	ldr	r3, [r3, #4]
 8017ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8018028 <tcp_receive+0xb20>)
 8017ef2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017ef4:	4b47      	ldr	r3, [pc, #284]	@ (8018014 <tcp_receive+0xb0c>)
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017efa:	4b46      	ldr	r3, [pc, #280]	@ (8018014 <tcp_receive+0xb0c>)
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	899b      	ldrh	r3, [r3, #12]
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7fa fe14 	bl	8012b30 <lwip_htons>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	b2db      	uxtb	r3, r3
 8017f0c:	f003 0301 	and.w	r3, r3, #1
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f000 80b8 	beq.w	8018086 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017f16:	4b45      	ldr	r3, [pc, #276]	@ (801802c <tcp_receive+0xb24>)
 8017f18:	781b      	ldrb	r3, [r3, #0]
 8017f1a:	f043 0320 	orr.w	r3, r3, #32
 8017f1e:	b2da      	uxtb	r2, r3
 8017f20:	4b42      	ldr	r3, [pc, #264]	@ (801802c <tcp_receive+0xb24>)
 8017f22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017f24:	e0af      	b.n	8018086 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f30:	68db      	ldr	r3, [r3, #12]
 8017f32:	685b      	ldr	r3, [r3, #4]
 8017f34:	4a36      	ldr	r2, [pc, #216]	@ (8018010 <tcp_receive+0xb08>)
 8017f36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	891b      	ldrh	r3, [r3, #8]
 8017f3c:	461c      	mov	r4, r3
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	68db      	ldr	r3, [r3, #12]
 8017f42:	899b      	ldrh	r3, [r3, #12]
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7fa fdf2 	bl	8012b30 <lwip_htons>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	f003 0303 	and.w	r3, r3, #3
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d001      	beq.n	8017f5c <tcp_receive+0xa54>
 8017f58:	2301      	movs	r3, #1
 8017f5a:	e000      	b.n	8017f5e <tcp_receive+0xa56>
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	191a      	adds	r2, r3, r4
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f64:	441a      	add	r2, r3
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f6e:	461c      	mov	r4, r3
 8017f70:	68bb      	ldr	r3, [r7, #8]
 8017f72:	891b      	ldrh	r3, [r3, #8]
 8017f74:	461d      	mov	r5, r3
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	899b      	ldrh	r3, [r3, #12]
 8017f7c:	b29b      	uxth	r3, r3
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7fa fdd6 	bl	8012b30 <lwip_htons>
 8017f84:	4603      	mov	r3, r0
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	f003 0303 	and.w	r3, r3, #3
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d001      	beq.n	8017f94 <tcp_receive+0xa8c>
 8017f90:	2301      	movs	r3, #1
 8017f92:	e000      	b.n	8017f96 <tcp_receive+0xa8e>
 8017f94:	2300      	movs	r3, #0
 8017f96:	442b      	add	r3, r5
 8017f98:	429c      	cmp	r4, r3
 8017f9a:	d206      	bcs.n	8017faa <tcp_receive+0xaa2>
 8017f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8018018 <tcp_receive+0xb10>)
 8017f9e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017fa2:	4923      	ldr	r1, [pc, #140]	@ (8018030 <tcp_receive+0xb28>)
 8017fa4:	481e      	ldr	r0, [pc, #120]	@ (8018020 <tcp_receive+0xb18>)
 8017fa6:	f005 ffcf 	bl	801df48 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	891b      	ldrh	r3, [r3, #8]
 8017fae:	461c      	mov	r4, r3
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	68db      	ldr	r3, [r3, #12]
 8017fb4:	899b      	ldrh	r3, [r3, #12]
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7fa fdb9 	bl	8012b30 <lwip_htons>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	b2db      	uxtb	r3, r3
 8017fc2:	f003 0303 	and.w	r3, r3, #3
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d001      	beq.n	8017fce <tcp_receive+0xac6>
 8017fca:	2301      	movs	r3, #1
 8017fcc:	e000      	b.n	8017fd0 <tcp_receive+0xac8>
 8017fce:	2300      	movs	r3, #0
 8017fd0:	1919      	adds	r1, r3, r4
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017fd6:	b28b      	uxth	r3, r1
 8017fd8:	1ad3      	subs	r3, r2, r3
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017fe0:	6878      	ldr	r0, [r7, #4]
 8017fe2:	f7fc ff43 	bl	8014e6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	891b      	ldrh	r3, [r3, #8]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d028      	beq.n	8018042 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8018028 <tcp_receive+0xb20>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d01d      	beq.n	8018034 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8018028 <tcp_receive+0xb20>)
 8017ffa:	681a      	ldr	r2, [r3, #0]
 8017ffc:	68bb      	ldr	r3, [r7, #8]
 8017ffe:	685b      	ldr	r3, [r3, #4]
 8018000:	4619      	mov	r1, r3
 8018002:	4610      	mov	r0, r2
 8018004:	f7fc fa50 	bl	80144a8 <pbuf_cat>
 8018008:	e018      	b.n	801803c <tcp_receive+0xb34>
 801800a:	bf00      	nop
 801800c:	20027672 	.word	0x20027672
 8018010:	20027668 	.word	0x20027668
 8018014:	20027648 	.word	0x20027648
 8018018:	080203d8 	.word	0x080203d8
 801801c:	080207b8 	.word	0x080207b8
 8018020:	08020424 	.word	0x08020424
 8018024:	080207f4 	.word	0x080207f4
 8018028:	20027678 	.word	0x20027678
 801802c:	20027675 	.word	0x20027675
 8018030:	08020814 	.word	0x08020814
            } else {
              recv_data = cseg->p;
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	4a70      	ldr	r2, [pc, #448]	@ (80181fc <tcp_receive+0xcf4>)
 801803a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	2200      	movs	r2, #0
 8018040:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	899b      	ldrh	r3, [r3, #12]
 8018048:	b29b      	uxth	r3, r3
 801804a:	4618      	mov	r0, r3
 801804c:	f7fa fd70 	bl	8012b30 <lwip_htons>
 8018050:	4603      	mov	r3, r0
 8018052:	b2db      	uxtb	r3, r3
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	2b00      	cmp	r3, #0
 801805a:	d00d      	beq.n	8018078 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801805c:	4b68      	ldr	r3, [pc, #416]	@ (8018200 <tcp_receive+0xcf8>)
 801805e:	781b      	ldrb	r3, [r3, #0]
 8018060:	f043 0320 	orr.w	r3, r3, #32
 8018064:	b2da      	uxtb	r2, r3
 8018066:	4b66      	ldr	r3, [pc, #408]	@ (8018200 <tcp_receive+0xcf8>)
 8018068:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	7d1b      	ldrb	r3, [r3, #20]
 801806e:	2b04      	cmp	r3, #4
 8018070:	d102      	bne.n	8018078 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	2207      	movs	r2, #7
 8018076:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	681a      	ldr	r2, [r3, #0]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018080:	68b8      	ldr	r0, [r7, #8]
 8018082:	f7fd fbd4 	bl	801582e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801808a:	2b00      	cmp	r3, #0
 801808c:	d008      	beq.n	80180a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018092:	68db      	ldr	r3, [r3, #12]
 8018094:	685a      	ldr	r2, [r3, #4]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801809a:	429a      	cmp	r2, r3
 801809c:	f43f af43 	beq.w	8017f26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	8b5b      	ldrh	r3, [r3, #26]
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d00e      	beq.n	80180ca <tcp_receive+0xbc2>
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	8b5b      	ldrh	r3, [r3, #26]
 80180b0:	f023 0301 	bic.w	r3, r3, #1
 80180b4:	b29a      	uxth	r2, r3
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	835a      	strh	r2, [r3, #26]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	8b5b      	ldrh	r3, [r3, #26]
 80180be:	f043 0302 	orr.w	r3, r3, #2
 80180c2:	b29a      	uxth	r2, r3
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80180c8:	e187      	b.n	80183da <tcp_receive+0xed2>
        tcp_ack(pcb);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	8b5b      	ldrh	r3, [r3, #26]
 80180ce:	f043 0301 	orr.w	r3, r3, #1
 80180d2:	b29a      	uxth	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80180d8:	e17f      	b.n	80183da <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d106      	bne.n	80180f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80180e2:	4848      	ldr	r0, [pc, #288]	@ (8018204 <tcp_receive+0xcfc>)
 80180e4:	f7fd fbbc 	bl	8015860 <tcp_seg_copy>
 80180e8:	4602      	mov	r2, r0
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80180ee:	e16c      	b.n	80183ca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80180f0:	2300      	movs	r3, #0
 80180f2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80180fa:	e156      	b.n	80183aa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80180fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180fe:	68db      	ldr	r3, [r3, #12]
 8018100:	685a      	ldr	r2, [r3, #4]
 8018102:	4b41      	ldr	r3, [pc, #260]	@ (8018208 <tcp_receive+0xd00>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	429a      	cmp	r2, r3
 8018108:	d11d      	bne.n	8018146 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801810a:	4b3e      	ldr	r3, [pc, #248]	@ (8018204 <tcp_receive+0xcfc>)
 801810c:	891a      	ldrh	r2, [r3, #8]
 801810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018110:	891b      	ldrh	r3, [r3, #8]
 8018112:	429a      	cmp	r2, r3
 8018114:	f240 814e 	bls.w	80183b4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018118:	483a      	ldr	r0, [pc, #232]	@ (8018204 <tcp_receive+0xcfc>)
 801811a:	f7fd fba1 	bl	8015860 <tcp_seg_copy>
 801811e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	2b00      	cmp	r3, #0
 8018124:	f000 8148 	beq.w	80183b8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801812a:	2b00      	cmp	r3, #0
 801812c:	d003      	beq.n	8018136 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801812e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018130:	697a      	ldr	r2, [r7, #20]
 8018132:	601a      	str	r2, [r3, #0]
 8018134:	e002      	b.n	801813c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	697a      	ldr	r2, [r7, #20]
 801813a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801813c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801813e:	6978      	ldr	r0, [r7, #20]
 8018140:	f7ff f8de 	bl	8017300 <tcp_oos_insert_segment>
                }
                break;
 8018144:	e138      	b.n	80183b8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018148:	2b00      	cmp	r3, #0
 801814a:	d117      	bne.n	801817c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801814c:	4b2e      	ldr	r3, [pc, #184]	@ (8018208 <tcp_receive+0xd00>)
 801814e:	681a      	ldr	r2, [r3, #0]
 8018150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018152:	68db      	ldr	r3, [r3, #12]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	2b00      	cmp	r3, #0
 801815a:	da57      	bge.n	801820c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801815c:	4829      	ldr	r0, [pc, #164]	@ (8018204 <tcp_receive+0xcfc>)
 801815e:	f7fd fb7f 	bl	8015860 <tcp_seg_copy>
 8018162:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018164:	69bb      	ldr	r3, [r7, #24]
 8018166:	2b00      	cmp	r3, #0
 8018168:	f000 8128 	beq.w	80183bc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	69ba      	ldr	r2, [r7, #24]
 8018170:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018172:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018174:	69b8      	ldr	r0, [r7, #24]
 8018176:	f7ff f8c3 	bl	8017300 <tcp_oos_insert_segment>
                  }
                  break;
 801817a:	e11f      	b.n	80183bc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801817c:	4b22      	ldr	r3, [pc, #136]	@ (8018208 <tcp_receive+0xd00>)
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	3b01      	subs	r3, #1
 801818a:	2b00      	cmp	r3, #0
 801818c:	db3e      	blt.n	801820c <tcp_receive+0xd04>
 801818e:	4b1e      	ldr	r3, [pc, #120]	@ (8018208 <tcp_receive+0xd00>)
 8018190:	681a      	ldr	r2, [r3, #0]
 8018192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018194:	68db      	ldr	r3, [r3, #12]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	1ad3      	subs	r3, r2, r3
 801819a:	3301      	adds	r3, #1
 801819c:	2b00      	cmp	r3, #0
 801819e:	dc35      	bgt.n	801820c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80181a0:	4818      	ldr	r0, [pc, #96]	@ (8018204 <tcp_receive+0xcfc>)
 80181a2:	f7fd fb5d 	bl	8015860 <tcp_seg_copy>
 80181a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	f000 8108 	beq.w	80183c0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80181b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181b2:	68db      	ldr	r3, [r3, #12]
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80181b8:	8912      	ldrh	r2, [r2, #8]
 80181ba:	441a      	add	r2, r3
 80181bc:	4b12      	ldr	r3, [pc, #72]	@ (8018208 <tcp_receive+0xd00>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	1ad3      	subs	r3, r2, r3
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	dd12      	ble.n	80181ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80181c6:	4b10      	ldr	r3, [pc, #64]	@ (8018208 <tcp_receive+0xd00>)
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	b29a      	uxth	r2, r3
 80181cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	685b      	ldr	r3, [r3, #4]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	1ad3      	subs	r3, r2, r3
 80181d6:	b29a      	uxth	r2, r3
 80181d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80181dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181de:	685a      	ldr	r2, [r3, #4]
 80181e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181e2:	891b      	ldrh	r3, [r3, #8]
 80181e4:	4619      	mov	r1, r3
 80181e6:	4610      	mov	r0, r2
 80181e8:	f7fb ff0a 	bl	8014000 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80181ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ee:	69fa      	ldr	r2, [r7, #28]
 80181f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80181f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80181f4:	69f8      	ldr	r0, [r7, #28]
 80181f6:	f7ff f883 	bl	8017300 <tcp_oos_insert_segment>
                  }
                  break;
 80181fa:	e0e1      	b.n	80183c0 <tcp_receive+0xeb8>
 80181fc:	20027678 	.word	0x20027678
 8018200:	20027675 	.word	0x20027675
 8018204:	20027648 	.word	0x20027648
 8018208:	20027668 	.word	0x20027668
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801820e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	2b00      	cmp	r3, #0
 8018216:	f040 80c5 	bne.w	80183a4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801821a:	4b7f      	ldr	r3, [pc, #508]	@ (8018418 <tcp_receive+0xf10>)
 801821c:	681a      	ldr	r2, [r3, #0]
 801821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018220:	68db      	ldr	r3, [r3, #12]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018226:	2b00      	cmp	r3, #0
 8018228:	f340 80bc 	ble.w	80183a4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801822e:	68db      	ldr	r3, [r3, #12]
 8018230:	899b      	ldrh	r3, [r3, #12]
 8018232:	b29b      	uxth	r3, r3
 8018234:	4618      	mov	r0, r3
 8018236:	f7fa fc7b 	bl	8012b30 <lwip_htons>
 801823a:	4603      	mov	r3, r0
 801823c:	b2db      	uxtb	r3, r3
 801823e:	f003 0301 	and.w	r3, r3, #1
 8018242:	2b00      	cmp	r3, #0
 8018244:	f040 80be 	bne.w	80183c4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018248:	4874      	ldr	r0, [pc, #464]	@ (801841c <tcp_receive+0xf14>)
 801824a:	f7fd fb09 	bl	8015860 <tcp_seg_copy>
 801824e:	4602      	mov	r2, r0
 8018250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018252:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	f000 80b5 	beq.w	80183c8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018266:	8912      	ldrh	r2, [r2, #8]
 8018268:	441a      	add	r2, r3
 801826a:	4b6b      	ldr	r3, [pc, #428]	@ (8018418 <tcp_receive+0xf10>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	1ad3      	subs	r3, r2, r3
 8018270:	2b00      	cmp	r3, #0
 8018272:	dd12      	ble.n	801829a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018274:	4b68      	ldr	r3, [pc, #416]	@ (8018418 <tcp_receive+0xf10>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	b29a      	uxth	r2, r3
 801827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801827c:	68db      	ldr	r3, [r3, #12]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	b29b      	uxth	r3, r3
 8018282:	1ad3      	subs	r3, r2, r3
 8018284:	b29a      	uxth	r2, r3
 8018286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018288:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801828c:	685a      	ldr	r2, [r3, #4]
 801828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018290:	891b      	ldrh	r3, [r3, #8]
 8018292:	4619      	mov	r1, r3
 8018294:	4610      	mov	r0, r2
 8018296:	f7fb feb3 	bl	8014000 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801829a:	4b61      	ldr	r3, [pc, #388]	@ (8018420 <tcp_receive+0xf18>)
 801829c:	881b      	ldrh	r3, [r3, #0]
 801829e:	461a      	mov	r2, r3
 80182a0:	4b5d      	ldr	r3, [pc, #372]	@ (8018418 <tcp_receive+0xf10>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	441a      	add	r2, r3
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182aa:	6879      	ldr	r1, [r7, #4]
 80182ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80182ae:	440b      	add	r3, r1
 80182b0:	1ad3      	subs	r3, r2, r3
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	f340 8088 	ble.w	80183c8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80182b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	68db      	ldr	r3, [r3, #12]
 80182be:	899b      	ldrh	r3, [r3, #12]
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7fa fc34 	bl	8012b30 <lwip_htons>
 80182c8:	4603      	mov	r3, r0
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	f003 0301 	and.w	r3, r3, #1
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d021      	beq.n	8018318 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80182d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	899b      	ldrh	r3, [r3, #12]
 80182dc:	b29b      	uxth	r3, r3
 80182de:	b21b      	sxth	r3, r3
 80182e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80182e4:	b21c      	sxth	r4, r3
 80182e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	899b      	ldrh	r3, [r3, #12]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7fa fc1d 	bl	8012b30 <lwip_htons>
 80182f6:	4603      	mov	r3, r0
 80182f8:	b2db      	uxtb	r3, r3
 80182fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80182fe:	b29b      	uxth	r3, r3
 8018300:	4618      	mov	r0, r3
 8018302:	f7fa fc15 	bl	8012b30 <lwip_htons>
 8018306:	4603      	mov	r3, r0
 8018308:	b21b      	sxth	r3, r3
 801830a:	4323      	orrs	r3, r4
 801830c:	b21a      	sxth	r2, r3
 801830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	68db      	ldr	r3, [r3, #12]
 8018314:	b292      	uxth	r2, r2
 8018316:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801831c:	b29a      	uxth	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018322:	4413      	add	r3, r2
 8018324:	b299      	uxth	r1, r3
 8018326:	4b3c      	ldr	r3, [pc, #240]	@ (8018418 <tcp_receive+0xf10>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	b29a      	uxth	r2, r3
 801832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	1a8a      	subs	r2, r1, r2
 8018332:	b292      	uxth	r2, r2
 8018334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	685a      	ldr	r2, [r3, #4]
 801833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	891b      	ldrh	r3, [r3, #8]
 8018342:	4619      	mov	r1, r3
 8018344:	4610      	mov	r0, r2
 8018346:	f7fb fe5b 	bl	8014000 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	891c      	ldrh	r4, [r3, #8]
 8018350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	68db      	ldr	r3, [r3, #12]
 8018356:	899b      	ldrh	r3, [r3, #12]
 8018358:	b29b      	uxth	r3, r3
 801835a:	4618      	mov	r0, r3
 801835c:	f7fa fbe8 	bl	8012b30 <lwip_htons>
 8018360:	4603      	mov	r3, r0
 8018362:	b2db      	uxtb	r3, r3
 8018364:	f003 0303 	and.w	r3, r3, #3
 8018368:	2b00      	cmp	r3, #0
 801836a:	d001      	beq.n	8018370 <tcp_receive+0xe68>
 801836c:	2301      	movs	r3, #1
 801836e:	e000      	b.n	8018372 <tcp_receive+0xe6a>
 8018370:	2300      	movs	r3, #0
 8018372:	4423      	add	r3, r4
 8018374:	b29a      	uxth	r2, r3
 8018376:	4b2a      	ldr	r3, [pc, #168]	@ (8018420 <tcp_receive+0xf18>)
 8018378:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801837a:	4b29      	ldr	r3, [pc, #164]	@ (8018420 <tcp_receive+0xf18>)
 801837c:	881b      	ldrh	r3, [r3, #0]
 801837e:	461a      	mov	r2, r3
 8018380:	4b25      	ldr	r3, [pc, #148]	@ (8018418 <tcp_receive+0xf10>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	441a      	add	r2, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801838a:	6879      	ldr	r1, [r7, #4]
 801838c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801838e:	440b      	add	r3, r1
 8018390:	429a      	cmp	r2, r3
 8018392:	d019      	beq.n	80183c8 <tcp_receive+0xec0>
 8018394:	4b23      	ldr	r3, [pc, #140]	@ (8018424 <tcp_receive+0xf1c>)
 8018396:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801839a:	4923      	ldr	r1, [pc, #140]	@ (8018428 <tcp_receive+0xf20>)
 801839c:	4823      	ldr	r0, [pc, #140]	@ (801842c <tcp_receive+0xf24>)
 801839e:	f005 fdd3 	bl	801df48 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80183a2:	e011      	b.n	80183c8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80183a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80183aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	f47f aea5 	bne.w	80180fc <tcp_receive+0xbf4>
 80183b2:	e00a      	b.n	80183ca <tcp_receive+0xec2>
                break;
 80183b4:	bf00      	nop
 80183b6:	e008      	b.n	80183ca <tcp_receive+0xec2>
                break;
 80183b8:	bf00      	nop
 80183ba:	e006      	b.n	80183ca <tcp_receive+0xec2>
                  break;
 80183bc:	bf00      	nop
 80183be:	e004      	b.n	80183ca <tcp_receive+0xec2>
                  break;
 80183c0:	bf00      	nop
 80183c2:	e002      	b.n	80183ca <tcp_receive+0xec2>
                  break;
 80183c4:	bf00      	nop
 80183c6:	e000      	b.n	80183ca <tcp_receive+0xec2>
                break;
 80183c8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f001 fa30 	bl	8019830 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80183d0:	e003      	b.n	80183da <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f001 fa2c 	bl	8019830 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80183d8:	e01a      	b.n	8018410 <tcp_receive+0xf08>
 80183da:	e019      	b.n	8018410 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80183dc:	4b0e      	ldr	r3, [pc, #56]	@ (8018418 <tcp_receive+0xf10>)
 80183de:	681a      	ldr	r2, [r3, #0]
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183e4:	1ad3      	subs	r3, r2, r3
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	db0a      	blt.n	8018400 <tcp_receive+0xef8>
 80183ea:	4b0b      	ldr	r3, [pc, #44]	@ (8018418 <tcp_receive+0xf10>)
 80183ec:	681a      	ldr	r2, [r3, #0]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183f2:	6879      	ldr	r1, [r7, #4]
 80183f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80183f6:	440b      	add	r3, r1
 80183f8:	1ad3      	subs	r3, r2, r3
 80183fa:	3301      	adds	r3, #1
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	dd07      	ble.n	8018410 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	8b5b      	ldrh	r3, [r3, #26]
 8018404:	f043 0302 	orr.w	r3, r3, #2
 8018408:	b29a      	uxth	r2, r3
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801840e:	e7ff      	b.n	8018410 <tcp_receive+0xf08>
 8018410:	bf00      	nop
 8018412:	3750      	adds	r7, #80	@ 0x50
 8018414:	46bd      	mov	sp, r7
 8018416:	bdb0      	pop	{r4, r5, r7, pc}
 8018418:	20027668 	.word	0x20027668
 801841c:	20027648 	.word	0x20027648
 8018420:	20027672 	.word	0x20027672
 8018424:	080203d8 	.word	0x080203d8
 8018428:	08020780 	.word	0x08020780
 801842c:	08020424 	.word	0x08020424

08018430 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018430:	b480      	push	{r7}
 8018432:	b083      	sub	sp, #12
 8018434:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018436:	4b15      	ldr	r3, [pc, #84]	@ (801848c <tcp_get_next_optbyte+0x5c>)
 8018438:	881b      	ldrh	r3, [r3, #0]
 801843a:	1c5a      	adds	r2, r3, #1
 801843c:	b291      	uxth	r1, r2
 801843e:	4a13      	ldr	r2, [pc, #76]	@ (801848c <tcp_get_next_optbyte+0x5c>)
 8018440:	8011      	strh	r1, [r2, #0]
 8018442:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018444:	4b12      	ldr	r3, [pc, #72]	@ (8018490 <tcp_get_next_optbyte+0x60>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d004      	beq.n	8018456 <tcp_get_next_optbyte+0x26>
 801844c:	4b11      	ldr	r3, [pc, #68]	@ (8018494 <tcp_get_next_optbyte+0x64>)
 801844e:	881b      	ldrh	r3, [r3, #0]
 8018450:	88fa      	ldrh	r2, [r7, #6]
 8018452:	429a      	cmp	r2, r3
 8018454:	d208      	bcs.n	8018468 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018456:	4b10      	ldr	r3, [pc, #64]	@ (8018498 <tcp_get_next_optbyte+0x68>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	3314      	adds	r3, #20
 801845c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801845e:	88fb      	ldrh	r3, [r7, #6]
 8018460:	683a      	ldr	r2, [r7, #0]
 8018462:	4413      	add	r3, r2
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	e00b      	b.n	8018480 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018468:	88fb      	ldrh	r3, [r7, #6]
 801846a:	b2da      	uxtb	r2, r3
 801846c:	4b09      	ldr	r3, [pc, #36]	@ (8018494 <tcp_get_next_optbyte+0x64>)
 801846e:	881b      	ldrh	r3, [r3, #0]
 8018470:	b2db      	uxtb	r3, r3
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018476:	4b06      	ldr	r3, [pc, #24]	@ (8018490 <tcp_get_next_optbyte+0x60>)
 8018478:	681a      	ldr	r2, [r3, #0]
 801847a:	797b      	ldrb	r3, [r7, #5]
 801847c:	4413      	add	r3, r2
 801847e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018480:	4618      	mov	r0, r3
 8018482:	370c      	adds	r7, #12
 8018484:	46bd      	mov	sp, r7
 8018486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848a:	4770      	bx	lr
 801848c:	20027664 	.word	0x20027664
 8018490:	20027660 	.word	0x20027660
 8018494:	2002765e 	.word	0x2002765e
 8018498:	20027658 	.word	0x20027658

0801849c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d106      	bne.n	80184b8 <tcp_parseopt+0x1c>
 80184aa:	4b32      	ldr	r3, [pc, #200]	@ (8018574 <tcp_parseopt+0xd8>)
 80184ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80184b0:	4931      	ldr	r1, [pc, #196]	@ (8018578 <tcp_parseopt+0xdc>)
 80184b2:	4832      	ldr	r0, [pc, #200]	@ (801857c <tcp_parseopt+0xe0>)
 80184b4:	f005 fd48 	bl	801df48 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80184b8:	4b31      	ldr	r3, [pc, #196]	@ (8018580 <tcp_parseopt+0xe4>)
 80184ba:	881b      	ldrh	r3, [r3, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d056      	beq.n	801856e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80184c0:	4b30      	ldr	r3, [pc, #192]	@ (8018584 <tcp_parseopt+0xe8>)
 80184c2:	2200      	movs	r2, #0
 80184c4:	801a      	strh	r2, [r3, #0]
 80184c6:	e046      	b.n	8018556 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80184c8:	f7ff ffb2 	bl	8018430 <tcp_get_next_optbyte>
 80184cc:	4603      	mov	r3, r0
 80184ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80184d0:	7bfb      	ldrb	r3, [r7, #15]
 80184d2:	2b02      	cmp	r3, #2
 80184d4:	d006      	beq.n	80184e4 <tcp_parseopt+0x48>
 80184d6:	2b02      	cmp	r3, #2
 80184d8:	dc2a      	bgt.n	8018530 <tcp_parseopt+0x94>
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d042      	beq.n	8018564 <tcp_parseopt+0xc8>
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d038      	beq.n	8018554 <tcp_parseopt+0xb8>
 80184e2:	e025      	b.n	8018530 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80184e4:	f7ff ffa4 	bl	8018430 <tcp_get_next_optbyte>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b04      	cmp	r3, #4
 80184ec:	d13c      	bne.n	8018568 <tcp_parseopt+0xcc>
 80184ee:	4b25      	ldr	r3, [pc, #148]	@ (8018584 <tcp_parseopt+0xe8>)
 80184f0:	881b      	ldrh	r3, [r3, #0]
 80184f2:	3301      	adds	r3, #1
 80184f4:	4a22      	ldr	r2, [pc, #136]	@ (8018580 <tcp_parseopt+0xe4>)
 80184f6:	8812      	ldrh	r2, [r2, #0]
 80184f8:	4293      	cmp	r3, r2
 80184fa:	da35      	bge.n	8018568 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80184fc:	f7ff ff98 	bl	8018430 <tcp_get_next_optbyte>
 8018500:	4603      	mov	r3, r0
 8018502:	021b      	lsls	r3, r3, #8
 8018504:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018506:	f7ff ff93 	bl	8018430 <tcp_get_next_optbyte>
 801850a:	4603      	mov	r3, r0
 801850c:	461a      	mov	r2, r3
 801850e:	89bb      	ldrh	r3, [r7, #12]
 8018510:	4313      	orrs	r3, r2
 8018512:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018514:	89bb      	ldrh	r3, [r7, #12]
 8018516:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801851a:	d804      	bhi.n	8018526 <tcp_parseopt+0x8a>
 801851c:	89bb      	ldrh	r3, [r7, #12]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d001      	beq.n	8018526 <tcp_parseopt+0x8a>
 8018522:	89ba      	ldrh	r2, [r7, #12]
 8018524:	e001      	b.n	801852a <tcp_parseopt+0x8e>
 8018526:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801852e:	e012      	b.n	8018556 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018530:	f7ff ff7e 	bl	8018430 <tcp_get_next_optbyte>
 8018534:	4603      	mov	r3, r0
 8018536:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018538:	7afb      	ldrb	r3, [r7, #11]
 801853a:	2b01      	cmp	r3, #1
 801853c:	d916      	bls.n	801856c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801853e:	7afb      	ldrb	r3, [r7, #11]
 8018540:	b29a      	uxth	r2, r3
 8018542:	4b10      	ldr	r3, [pc, #64]	@ (8018584 <tcp_parseopt+0xe8>)
 8018544:	881b      	ldrh	r3, [r3, #0]
 8018546:	4413      	add	r3, r2
 8018548:	b29b      	uxth	r3, r3
 801854a:	3b02      	subs	r3, #2
 801854c:	b29a      	uxth	r2, r3
 801854e:	4b0d      	ldr	r3, [pc, #52]	@ (8018584 <tcp_parseopt+0xe8>)
 8018550:	801a      	strh	r2, [r3, #0]
 8018552:	e000      	b.n	8018556 <tcp_parseopt+0xba>
          break;
 8018554:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018556:	4b0b      	ldr	r3, [pc, #44]	@ (8018584 <tcp_parseopt+0xe8>)
 8018558:	881a      	ldrh	r2, [r3, #0]
 801855a:	4b09      	ldr	r3, [pc, #36]	@ (8018580 <tcp_parseopt+0xe4>)
 801855c:	881b      	ldrh	r3, [r3, #0]
 801855e:	429a      	cmp	r2, r3
 8018560:	d3b2      	bcc.n	80184c8 <tcp_parseopt+0x2c>
 8018562:	e004      	b.n	801856e <tcp_parseopt+0xd2>
          return;
 8018564:	bf00      	nop
 8018566:	e002      	b.n	801856e <tcp_parseopt+0xd2>
            return;
 8018568:	bf00      	nop
 801856a:	e000      	b.n	801856e <tcp_parseopt+0xd2>
            return;
 801856c:	bf00      	nop
      }
    }
  }
}
 801856e:	3710      	adds	r7, #16
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	080203d8 	.word	0x080203d8
 8018578:	0802083c 	.word	0x0802083c
 801857c:	08020424 	.word	0x08020424
 8018580:	2002765c 	.word	0x2002765c
 8018584:	20027664 	.word	0x20027664

08018588 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018588:	b480      	push	{r7}
 801858a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801858c:	4b05      	ldr	r3, [pc, #20]	@ (80185a4 <tcp_trigger_input_pcb_close+0x1c>)
 801858e:	781b      	ldrb	r3, [r3, #0]
 8018590:	f043 0310 	orr.w	r3, r3, #16
 8018594:	b2da      	uxtb	r2, r3
 8018596:	4b03      	ldr	r3, [pc, #12]	@ (80185a4 <tcp_trigger_input_pcb_close+0x1c>)
 8018598:	701a      	strb	r2, [r3, #0]
}
 801859a:	bf00      	nop
 801859c:	46bd      	mov	sp, r7
 801859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a2:	4770      	bx	lr
 80185a4:	20027675 	.word	0x20027675

080185a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b084      	sub	sp, #16
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	60f8      	str	r0, [r7, #12]
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d00a      	beq.n	80185d0 <tcp_route+0x28>
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	7a1b      	ldrb	r3, [r3, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d006      	beq.n	80185d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	7a1b      	ldrb	r3, [r3, #8]
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7fb fb12 	bl	8013bf0 <netif_get_by_index>
 80185cc:	4603      	mov	r3, r0
 80185ce:	e003      	b.n	80185d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f003 f959 	bl	801b888 <ip4_route>
 80185d6:	4603      	mov	r3, r0
  }
}
 80185d8:	4618      	mov	r0, r3
 80185da:	3710      	adds	r7, #16
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}

080185e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80185e0:	b590      	push	{r4, r7, lr}
 80185e2:	b087      	sub	sp, #28
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	60b9      	str	r1, [r7, #8]
 80185ea:	603b      	str	r3, [r7, #0]
 80185ec:	4613      	mov	r3, r2
 80185ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d105      	bne.n	8018602 <tcp_create_segment+0x22>
 80185f6:	4b43      	ldr	r3, [pc, #268]	@ (8018704 <tcp_create_segment+0x124>)
 80185f8:	22a3      	movs	r2, #163	@ 0xa3
 80185fa:	4943      	ldr	r1, [pc, #268]	@ (8018708 <tcp_create_segment+0x128>)
 80185fc:	4843      	ldr	r0, [pc, #268]	@ (801870c <tcp_create_segment+0x12c>)
 80185fe:	f005 fca3 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018602:	68bb      	ldr	r3, [r7, #8]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d105      	bne.n	8018614 <tcp_create_segment+0x34>
 8018608:	4b3e      	ldr	r3, [pc, #248]	@ (8018704 <tcp_create_segment+0x124>)
 801860a:	22a4      	movs	r2, #164	@ 0xa4
 801860c:	4940      	ldr	r1, [pc, #256]	@ (8018710 <tcp_create_segment+0x130>)
 801860e:	483f      	ldr	r0, [pc, #252]	@ (801870c <tcp_create_segment+0x12c>)
 8018610:	f005 fc9a 	bl	801df48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018614:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018618:	009b      	lsls	r3, r3, #2
 801861a:	b2db      	uxtb	r3, r3
 801861c:	f003 0304 	and.w	r3, r3, #4
 8018620:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018622:	2003      	movs	r0, #3
 8018624:	f7fa ff58 	bl	80134d8 <memp_malloc>
 8018628:	6138      	str	r0, [r7, #16]
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d104      	bne.n	801863a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018630:	68b8      	ldr	r0, [r7, #8]
 8018632:	f7fb fe6b 	bl	801430c <pbuf_free>
    return NULL;
 8018636:	2300      	movs	r3, #0
 8018638:	e060      	b.n	80186fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018640:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	2200      	movs	r2, #0
 8018646:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018648:	693b      	ldr	r3, [r7, #16]
 801864a:	68ba      	ldr	r2, [r7, #8]
 801864c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	891a      	ldrh	r2, [r3, #8]
 8018652:	7dfb      	ldrb	r3, [r7, #23]
 8018654:	b29b      	uxth	r3, r3
 8018656:	429a      	cmp	r2, r3
 8018658:	d205      	bcs.n	8018666 <tcp_create_segment+0x86>
 801865a:	4b2a      	ldr	r3, [pc, #168]	@ (8018704 <tcp_create_segment+0x124>)
 801865c:	22b0      	movs	r2, #176	@ 0xb0
 801865e:	492d      	ldr	r1, [pc, #180]	@ (8018714 <tcp_create_segment+0x134>)
 8018660:	482a      	ldr	r0, [pc, #168]	@ (801870c <tcp_create_segment+0x12c>)
 8018662:	f005 fc71 	bl	801df48 <iprintf>
  seg->len = p->tot_len - optlen;
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	891a      	ldrh	r2, [r3, #8]
 801866a:	7dfb      	ldrb	r3, [r7, #23]
 801866c:	b29b      	uxth	r3, r3
 801866e:	1ad3      	subs	r3, r2, r3
 8018670:	b29a      	uxth	r2, r3
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018676:	2114      	movs	r1, #20
 8018678:	68b8      	ldr	r0, [r7, #8]
 801867a:	f7fb fdb1 	bl	80141e0 <pbuf_add_header>
 801867e:	4603      	mov	r3, r0
 8018680:	2b00      	cmp	r3, #0
 8018682:	d004      	beq.n	801868e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018684:	6938      	ldr	r0, [r7, #16]
 8018686:	f7fd f8d2 	bl	801582e <tcp_seg_free>
    return NULL;
 801868a:	2300      	movs	r3, #0
 801868c:	e036      	b.n	80186fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801868e:	693b      	ldr	r3, [r7, #16]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	685a      	ldr	r2, [r3, #4]
 8018694:	693b      	ldr	r3, [r7, #16]
 8018696:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	8ada      	ldrh	r2, [r3, #22]
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	68dc      	ldr	r4, [r3, #12]
 80186a0:	4610      	mov	r0, r2
 80186a2:	f7fa fa45 	bl	8012b30 <lwip_htons>
 80186a6:	4603      	mov	r3, r0
 80186a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	8b1a      	ldrh	r2, [r3, #24]
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	68dc      	ldr	r4, [r3, #12]
 80186b2:	4610      	mov	r0, r2
 80186b4:	f7fa fa3c 	bl	8012b30 <lwip_htons>
 80186b8:	4603      	mov	r3, r0
 80186ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80186bc:	693b      	ldr	r3, [r7, #16]
 80186be:	68dc      	ldr	r4, [r3, #12]
 80186c0:	6838      	ldr	r0, [r7, #0]
 80186c2:	f7fa fa4b 	bl	8012b5c <lwip_htonl>
 80186c6:	4603      	mov	r3, r0
 80186c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80186ca:	7dfb      	ldrb	r3, [r7, #23]
 80186cc:	089b      	lsrs	r3, r3, #2
 80186ce:	b2db      	uxtb	r3, r3
 80186d0:	3305      	adds	r3, #5
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	031b      	lsls	r3, r3, #12
 80186d6:	b29a      	uxth	r2, r3
 80186d8:	79fb      	ldrb	r3, [r7, #7]
 80186da:	b29b      	uxth	r3, r3
 80186dc:	4313      	orrs	r3, r2
 80186de:	b29a      	uxth	r2, r3
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	68dc      	ldr	r4, [r3, #12]
 80186e4:	4610      	mov	r0, r2
 80186e6:	f7fa fa23 	bl	8012b30 <lwip_htons>
 80186ea:	4603      	mov	r3, r0
 80186ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80186ee:	693b      	ldr	r3, [r7, #16]
 80186f0:	68db      	ldr	r3, [r3, #12]
 80186f2:	2200      	movs	r2, #0
 80186f4:	749a      	strb	r2, [r3, #18]
 80186f6:	2200      	movs	r2, #0
 80186f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80186fa:	693b      	ldr	r3, [r7, #16]
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	371c      	adds	r7, #28
 8018700:	46bd      	mov	sp, r7
 8018702:	bd90      	pop	{r4, r7, pc}
 8018704:	08020858 	.word	0x08020858
 8018708:	0802088c 	.word	0x0802088c
 801870c:	080208ac 	.word	0x080208ac
 8018710:	080208d4 	.word	0x080208d4
 8018714:	080208f8 	.word	0x080208f8

08018718 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018718:	b590      	push	{r4, r7, lr}
 801871a:	b08b      	sub	sp, #44	@ 0x2c
 801871c:	af02      	add	r7, sp, #8
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	460b      	mov	r3, r1
 8018722:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018724:	2300      	movs	r3, #0
 8018726:	61fb      	str	r3, [r7, #28]
 8018728:	2300      	movs	r3, #0
 801872a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801872c:	2300      	movs	r3, #0
 801872e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d106      	bne.n	8018744 <tcp_split_unsent_seg+0x2c>
 8018736:	4b95      	ldr	r3, [pc, #596]	@ (801898c <tcp_split_unsent_seg+0x274>)
 8018738:	f240 324b 	movw	r2, #843	@ 0x34b
 801873c:	4994      	ldr	r1, [pc, #592]	@ (8018990 <tcp_split_unsent_seg+0x278>)
 801873e:	4895      	ldr	r0, [pc, #596]	@ (8018994 <tcp_split_unsent_seg+0x27c>)
 8018740:	f005 fc02 	bl	801df48 <iprintf>

  useg = pcb->unsent;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018748:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d102      	bne.n	8018756 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018750:	f04f 33ff 	mov.w	r3, #4294967295
 8018754:	e116      	b.n	8018984 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018756:	887b      	ldrh	r3, [r7, #2]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d109      	bne.n	8018770 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801875c:	4b8b      	ldr	r3, [pc, #556]	@ (801898c <tcp_split_unsent_seg+0x274>)
 801875e:	f240 3253 	movw	r2, #851	@ 0x353
 8018762:	498d      	ldr	r1, [pc, #564]	@ (8018998 <tcp_split_unsent_seg+0x280>)
 8018764:	488b      	ldr	r0, [pc, #556]	@ (8018994 <tcp_split_unsent_seg+0x27c>)
 8018766:	f005 fbef 	bl	801df48 <iprintf>
    return ERR_VAL;
 801876a:	f06f 0305 	mvn.w	r3, #5
 801876e:	e109      	b.n	8018984 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	891b      	ldrh	r3, [r3, #8]
 8018774:	887a      	ldrh	r2, [r7, #2]
 8018776:	429a      	cmp	r2, r3
 8018778:	d301      	bcc.n	801877e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801877a:	2300      	movs	r3, #0
 801877c:	e102      	b.n	8018984 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018782:	887a      	ldrh	r2, [r7, #2]
 8018784:	429a      	cmp	r2, r3
 8018786:	d906      	bls.n	8018796 <tcp_split_unsent_seg+0x7e>
 8018788:	4b80      	ldr	r3, [pc, #512]	@ (801898c <tcp_split_unsent_seg+0x274>)
 801878a:	f240 325b 	movw	r2, #859	@ 0x35b
 801878e:	4983      	ldr	r1, [pc, #524]	@ (801899c <tcp_split_unsent_seg+0x284>)
 8018790:	4880      	ldr	r0, [pc, #512]	@ (8018994 <tcp_split_unsent_seg+0x27c>)
 8018792:	f005 fbd9 	bl	801df48 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018796:	697b      	ldr	r3, [r7, #20]
 8018798:	891b      	ldrh	r3, [r3, #8]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d106      	bne.n	80187ac <tcp_split_unsent_seg+0x94>
 801879e:	4b7b      	ldr	r3, [pc, #492]	@ (801898c <tcp_split_unsent_seg+0x274>)
 80187a0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80187a4:	497e      	ldr	r1, [pc, #504]	@ (80189a0 <tcp_split_unsent_seg+0x288>)
 80187a6:	487b      	ldr	r0, [pc, #492]	@ (8018994 <tcp_split_unsent_seg+0x27c>)
 80187a8:	f005 fbce 	bl	801df48 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	7a9b      	ldrb	r3, [r3, #10]
 80187b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80187b2:	7bfb      	ldrb	r3, [r7, #15]
 80187b4:	009b      	lsls	r3, r3, #2
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	f003 0304 	and.w	r3, r3, #4
 80187bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80187be:	697b      	ldr	r3, [r7, #20]
 80187c0:	891a      	ldrh	r2, [r3, #8]
 80187c2:	887b      	ldrh	r3, [r7, #2]
 80187c4:	1ad3      	subs	r3, r2, r3
 80187c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80187c8:	7bbb      	ldrb	r3, [r7, #14]
 80187ca:	b29a      	uxth	r2, r3
 80187cc:	89bb      	ldrh	r3, [r7, #12]
 80187ce:	4413      	add	r3, r2
 80187d0:	b29b      	uxth	r3, r3
 80187d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80187d6:	4619      	mov	r1, r3
 80187d8:	2036      	movs	r0, #54	@ 0x36
 80187da:	f7fb fab3 	bl	8013d44 <pbuf_alloc>
 80187de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	f000 80b7 	beq.w	8018956 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80187e8:	697b      	ldr	r3, [r7, #20]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	891a      	ldrh	r2, [r3, #8]
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	891b      	ldrh	r3, [r3, #8]
 80187f2:	1ad3      	subs	r3, r2, r3
 80187f4:	b29a      	uxth	r2, r3
 80187f6:	887b      	ldrh	r3, [r7, #2]
 80187f8:	4413      	add	r3, r2
 80187fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	6858      	ldr	r0, [r3, #4]
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	685a      	ldr	r2, [r3, #4]
 8018804:	7bbb      	ldrb	r3, [r7, #14]
 8018806:	18d1      	adds	r1, r2, r3
 8018808:	897b      	ldrh	r3, [r7, #10]
 801880a:	89ba      	ldrh	r2, [r7, #12]
 801880c:	f7fb ff84 	bl	8014718 <pbuf_copy_partial>
 8018810:	4603      	mov	r3, r0
 8018812:	461a      	mov	r2, r3
 8018814:	89bb      	ldrh	r3, [r7, #12]
 8018816:	4293      	cmp	r3, r2
 8018818:	f040 809f 	bne.w	801895a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	899b      	ldrh	r3, [r3, #12]
 8018822:	b29b      	uxth	r3, r3
 8018824:	4618      	mov	r0, r3
 8018826:	f7fa f983 	bl	8012b30 <lwip_htons>
 801882a:	4603      	mov	r3, r0
 801882c:	b2db      	uxtb	r3, r3
 801882e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018832:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018834:	2300      	movs	r3, #0
 8018836:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018838:	7efb      	ldrb	r3, [r7, #27]
 801883a:	f003 0308 	and.w	r3, r3, #8
 801883e:	2b00      	cmp	r3, #0
 8018840:	d007      	beq.n	8018852 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018842:	7efb      	ldrb	r3, [r7, #27]
 8018844:	f023 0308 	bic.w	r3, r3, #8
 8018848:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801884a:	7ebb      	ldrb	r3, [r7, #26]
 801884c:	f043 0308 	orr.w	r3, r3, #8
 8018850:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018852:	7efb      	ldrb	r3, [r7, #27]
 8018854:	f003 0301 	and.w	r3, r3, #1
 8018858:	2b00      	cmp	r3, #0
 801885a:	d007      	beq.n	801886c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801885c:	7efb      	ldrb	r3, [r7, #27]
 801885e:	f023 0301 	bic.w	r3, r3, #1
 8018862:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018864:	7ebb      	ldrb	r3, [r7, #26]
 8018866:	f043 0301 	orr.w	r3, r3, #1
 801886a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801886c:	697b      	ldr	r3, [r7, #20]
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	685b      	ldr	r3, [r3, #4]
 8018872:	4618      	mov	r0, r3
 8018874:	f7fa f972 	bl	8012b5c <lwip_htonl>
 8018878:	4602      	mov	r2, r0
 801887a:	887b      	ldrh	r3, [r7, #2]
 801887c:	18d1      	adds	r1, r2, r3
 801887e:	7eba      	ldrb	r2, [r7, #26]
 8018880:	7bfb      	ldrb	r3, [r7, #15]
 8018882:	9300      	str	r3, [sp, #0]
 8018884:	460b      	mov	r3, r1
 8018886:	6939      	ldr	r1, [r7, #16]
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f7ff fea9 	bl	80185e0 <tcp_create_segment>
 801888e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d063      	beq.n	801895e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018896:	697b      	ldr	r3, [r7, #20]
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	4618      	mov	r0, r3
 801889c:	f7fb fdc4 	bl	8014428 <pbuf_clen>
 80188a0:	4603      	mov	r3, r0
 80188a2:	461a      	mov	r2, r3
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80188aa:	1a9b      	subs	r3, r3, r2
 80188ac:	b29a      	uxth	r2, r3
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	6858      	ldr	r0, [r3, #4]
 80188b8:	697b      	ldr	r3, [r7, #20]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	891a      	ldrh	r2, [r3, #8]
 80188be:	89bb      	ldrh	r3, [r7, #12]
 80188c0:	1ad3      	subs	r3, r2, r3
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	4619      	mov	r1, r3
 80188c6:	f7fb fb9b 	bl	8014000 <pbuf_realloc>
  useg->len -= remainder;
 80188ca:	697b      	ldr	r3, [r7, #20]
 80188cc:	891a      	ldrh	r2, [r3, #8]
 80188ce:	89bb      	ldrh	r3, [r7, #12]
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	b29a      	uxth	r2, r3
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	899b      	ldrh	r3, [r3, #12]
 80188de:	b29c      	uxth	r4, r3
 80188e0:	7efb      	ldrb	r3, [r7, #27]
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7fa f923 	bl	8012b30 <lwip_htons>
 80188ea:	4603      	mov	r3, r0
 80188ec:	461a      	mov	r2, r3
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	68db      	ldr	r3, [r3, #12]
 80188f2:	4322      	orrs	r2, r4
 80188f4:	b292      	uxth	r2, r2
 80188f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	685b      	ldr	r3, [r3, #4]
 80188fc:	4618      	mov	r0, r3
 80188fe:	f7fb fd93 	bl	8014428 <pbuf_clen>
 8018902:	4603      	mov	r3, r0
 8018904:	461a      	mov	r2, r3
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801890c:	4413      	add	r3, r2
 801890e:	b29a      	uxth	r2, r3
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	685b      	ldr	r3, [r3, #4]
 801891a:	4618      	mov	r0, r3
 801891c:	f7fb fd84 	bl	8014428 <pbuf_clen>
 8018920:	4603      	mov	r3, r0
 8018922:	461a      	mov	r2, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801892a:	4413      	add	r3, r2
 801892c:	b29a      	uxth	r2, r3
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018934:	697b      	ldr	r3, [r7, #20]
 8018936:	681a      	ldr	r2, [r3, #0]
 8018938:	69fb      	ldr	r3, [r7, #28]
 801893a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	69fa      	ldr	r2, [r7, #28]
 8018940:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018942:	69fb      	ldr	r3, [r7, #28]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d103      	bne.n	8018952 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2200      	movs	r2, #0
 801894e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018952:	2300      	movs	r3, #0
 8018954:	e016      	b.n	8018984 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018956:	bf00      	nop
 8018958:	e002      	b.n	8018960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801895a:	bf00      	nop
 801895c:	e000      	b.n	8018960 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801895e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018960:	69fb      	ldr	r3, [r7, #28]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d006      	beq.n	8018974 <tcp_split_unsent_seg+0x25c>
 8018966:	4b09      	ldr	r3, [pc, #36]	@ (801898c <tcp_split_unsent_seg+0x274>)
 8018968:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801896c:	490d      	ldr	r1, [pc, #52]	@ (80189a4 <tcp_split_unsent_seg+0x28c>)
 801896e:	4809      	ldr	r0, [pc, #36]	@ (8018994 <tcp_split_unsent_seg+0x27c>)
 8018970:	f005 faea 	bl	801df48 <iprintf>
  if (p != NULL) {
 8018974:	693b      	ldr	r3, [r7, #16]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d002      	beq.n	8018980 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801897a:	6938      	ldr	r0, [r7, #16]
 801897c:	f7fb fcc6 	bl	801430c <pbuf_free>
  }

  return ERR_MEM;
 8018980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018984:	4618      	mov	r0, r3
 8018986:	3724      	adds	r7, #36	@ 0x24
 8018988:	46bd      	mov	sp, r7
 801898a:	bd90      	pop	{r4, r7, pc}
 801898c:	08020858 	.word	0x08020858
 8018990:	08020bec 	.word	0x08020bec
 8018994:	080208ac 	.word	0x080208ac
 8018998:	08020c10 	.word	0x08020c10
 801899c:	08020c34 	.word	0x08020c34
 80189a0:	08020c44 	.word	0x08020c44
 80189a4:	08020c54 	.word	0x08020c54

080189a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80189a8:	b590      	push	{r4, r7, lr}
 80189aa:	b085      	sub	sp, #20
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d106      	bne.n	80189c4 <tcp_send_fin+0x1c>
 80189b6:	4b21      	ldr	r3, [pc, #132]	@ (8018a3c <tcp_send_fin+0x94>)
 80189b8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80189bc:	4920      	ldr	r1, [pc, #128]	@ (8018a40 <tcp_send_fin+0x98>)
 80189be:	4821      	ldr	r0, [pc, #132]	@ (8018a44 <tcp_send_fin+0x9c>)
 80189c0:	f005 fac2 	bl	801df48 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d02e      	beq.n	8018a2a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189d0:	60fb      	str	r3, [r7, #12]
 80189d2:	e002      	b.n	80189da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d1f8      	bne.n	80189d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	899b      	ldrh	r3, [r3, #12]
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7fa f8a0 	bl	8012b30 <lwip_htons>
 80189f0:	4603      	mov	r3, r0
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	f003 0307 	and.w	r3, r3, #7
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d116      	bne.n	8018a2a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	899b      	ldrh	r3, [r3, #12]
 8018a02:	b29c      	uxth	r4, r3
 8018a04:	2001      	movs	r0, #1
 8018a06:	f7fa f893 	bl	8012b30 <lwip_htons>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	461a      	mov	r2, r3
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	68db      	ldr	r3, [r3, #12]
 8018a12:	4322      	orrs	r2, r4
 8018a14:	b292      	uxth	r2, r2
 8018a16:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	8b5b      	ldrh	r3, [r3, #26]
 8018a1c:	f043 0320 	orr.w	r3, r3, #32
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018a26:	2300      	movs	r3, #0
 8018a28:	e004      	b.n	8018a34 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018a2a:	2101      	movs	r1, #1
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f000 f80b 	bl	8018a48 <tcp_enqueue_flags>
 8018a32:	4603      	mov	r3, r0
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	3714      	adds	r7, #20
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd90      	pop	{r4, r7, pc}
 8018a3c:	08020858 	.word	0x08020858
 8018a40:	08020c60 	.word	0x08020c60
 8018a44:	080208ac 	.word	0x080208ac

08018a48 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b08a      	sub	sp, #40	@ 0x28
 8018a4c:	af02      	add	r7, sp, #8
 8018a4e:	6078      	str	r0, [r7, #4]
 8018a50:	460b      	mov	r3, r1
 8018a52:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018a54:	2300      	movs	r3, #0
 8018a56:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018a5c:	78fb      	ldrb	r3, [r7, #3]
 8018a5e:	f003 0303 	and.w	r3, r3, #3
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d106      	bne.n	8018a74 <tcp_enqueue_flags+0x2c>
 8018a66:	4b67      	ldr	r3, [pc, #412]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018a68:	f240 4211 	movw	r2, #1041	@ 0x411
 8018a6c:	4966      	ldr	r1, [pc, #408]	@ (8018c08 <tcp_enqueue_flags+0x1c0>)
 8018a6e:	4867      	ldr	r0, [pc, #412]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018a70:	f005 fa6a 	bl	801df48 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d106      	bne.n	8018a88 <tcp_enqueue_flags+0x40>
 8018a7a:	4b62      	ldr	r3, [pc, #392]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018a7c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018a80:	4963      	ldr	r1, [pc, #396]	@ (8018c10 <tcp_enqueue_flags+0x1c8>)
 8018a82:	4862      	ldr	r0, [pc, #392]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018a84:	f005 fa60 	bl	801df48 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018a88:	78fb      	ldrb	r3, [r7, #3]
 8018a8a:	f003 0302 	and.w	r3, r3, #2
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d001      	beq.n	8018a96 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018a92:	2301      	movs	r3, #1
 8018a94:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a96:	7ffb      	ldrb	r3, [r7, #31]
 8018a98:	009b      	lsls	r3, r3, #2
 8018a9a:	b2db      	uxtb	r3, r3
 8018a9c:	f003 0304 	and.w	r3, r3, #4
 8018aa0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018aa2:	7dfb      	ldrb	r3, [r7, #23]
 8018aa4:	b29b      	uxth	r3, r3
 8018aa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018aaa:	4619      	mov	r1, r3
 8018aac:	2036      	movs	r0, #54	@ 0x36
 8018aae:	f7fb f949 	bl	8013d44 <pbuf_alloc>
 8018ab2:	6138      	str	r0, [r7, #16]
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d109      	bne.n	8018ace <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	8b5b      	ldrh	r3, [r3, #26]
 8018abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8018acc:	e095      	b.n	8018bfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018ace:	693b      	ldr	r3, [r7, #16]
 8018ad0:	895a      	ldrh	r2, [r3, #10]
 8018ad2:	7dfb      	ldrb	r3, [r7, #23]
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d206      	bcs.n	8018ae8 <tcp_enqueue_flags+0xa0>
 8018ada:	4b4a      	ldr	r3, [pc, #296]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018adc:	f240 4239 	movw	r2, #1081	@ 0x439
 8018ae0:	494c      	ldr	r1, [pc, #304]	@ (8018c14 <tcp_enqueue_flags+0x1cc>)
 8018ae2:	484a      	ldr	r0, [pc, #296]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018ae4:	f005 fa30 	bl	801df48 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8018aec:	78fa      	ldrb	r2, [r7, #3]
 8018aee:	7ffb      	ldrb	r3, [r7, #31]
 8018af0:	9300      	str	r3, [sp, #0]
 8018af2:	460b      	mov	r3, r1
 8018af4:	6939      	ldr	r1, [r7, #16]
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	f7ff fd72 	bl	80185e0 <tcp_create_segment>
 8018afc:	60f8      	str	r0, [r7, #12]
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d109      	bne.n	8018b18 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	8b5b      	ldrh	r3, [r3, #26]
 8018b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b0c:	b29a      	uxth	r2, r3
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018b12:	f04f 33ff 	mov.w	r3, #4294967295
 8018b16:	e070      	b.n	8018bfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	68db      	ldr	r3, [r3, #12]
 8018b1c:	f003 0303 	and.w	r3, r3, #3
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d006      	beq.n	8018b32 <tcp_enqueue_flags+0xea>
 8018b24:	4b37      	ldr	r3, [pc, #220]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018b26:	f240 4242 	movw	r2, #1090	@ 0x442
 8018b2a:	493b      	ldr	r1, [pc, #236]	@ (8018c18 <tcp_enqueue_flags+0x1d0>)
 8018b2c:	4837      	ldr	r0, [pc, #220]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018b2e:	f005 fa0b 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	891b      	ldrh	r3, [r3, #8]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d006      	beq.n	8018b48 <tcp_enqueue_flags+0x100>
 8018b3a:	4b32      	ldr	r3, [pc, #200]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018b3c:	f240 4243 	movw	r2, #1091	@ 0x443
 8018b40:	4936      	ldr	r1, [pc, #216]	@ (8018c1c <tcp_enqueue_flags+0x1d4>)
 8018b42:	4832      	ldr	r0, [pc, #200]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018b44:	f005 fa00 	bl	801df48 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d103      	bne.n	8018b58 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	68fa      	ldr	r2, [r7, #12]
 8018b54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018b56:	e00d      	b.n	8018b74 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b5c:	61bb      	str	r3, [r7, #24]
 8018b5e:	e002      	b.n	8018b66 <tcp_enqueue_flags+0x11e>
 8018b60:	69bb      	ldr	r3, [r7, #24]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	61bb      	str	r3, [r7, #24]
 8018b66:	69bb      	ldr	r3, [r7, #24]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d1f8      	bne.n	8018b60 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018b6e:	69bb      	ldr	r3, [r7, #24]
 8018b70:	68fa      	ldr	r2, [r7, #12]
 8018b72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	2200      	movs	r2, #0
 8018b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018b7c:	78fb      	ldrb	r3, [r7, #3]
 8018b7e:	f003 0302 	and.w	r3, r3, #2
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d104      	bne.n	8018b90 <tcp_enqueue_flags+0x148>
 8018b86:	78fb      	ldrb	r3, [r7, #3]
 8018b88:	f003 0301 	and.w	r3, r3, #1
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d004      	beq.n	8018b9a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018b94:	1c5a      	adds	r2, r3, #1
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018b9a:	78fb      	ldrb	r3, [r7, #3]
 8018b9c:	f003 0301 	and.w	r3, r3, #1
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d006      	beq.n	8018bb2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	8b5b      	ldrh	r3, [r3, #26]
 8018ba8:	f043 0320 	orr.w	r3, r3, #32
 8018bac:	b29a      	uxth	r2, r3
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7fb fc36 	bl	8014428 <pbuf_clen>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018bc6:	4413      	add	r3, r2
 8018bc8:	b29a      	uxth	r2, r3
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00e      	beq.n	8018bf8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d10a      	bne.n	8018bf8 <tcp_enqueue_flags+0x1b0>
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d106      	bne.n	8018bf8 <tcp_enqueue_flags+0x1b0>
 8018bea:	4b06      	ldr	r3, [pc, #24]	@ (8018c04 <tcp_enqueue_flags+0x1bc>)
 8018bec:	f240 4265 	movw	r2, #1125	@ 0x465
 8018bf0:	490b      	ldr	r1, [pc, #44]	@ (8018c20 <tcp_enqueue_flags+0x1d8>)
 8018bf2:	4806      	ldr	r0, [pc, #24]	@ (8018c0c <tcp_enqueue_flags+0x1c4>)
 8018bf4:	f005 f9a8 	bl	801df48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018bf8:	2300      	movs	r3, #0
}
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	3720      	adds	r7, #32
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}
 8018c02:	bf00      	nop
 8018c04:	08020858 	.word	0x08020858
 8018c08:	08020c7c 	.word	0x08020c7c
 8018c0c:	080208ac 	.word	0x080208ac
 8018c10:	08020cd4 	.word	0x08020cd4
 8018c14:	08020cf4 	.word	0x08020cf4
 8018c18:	08020d30 	.word	0x08020d30
 8018c1c:	08020d48 	.word	0x08020d48
 8018c20:	08020d74 	.word	0x08020d74

08018c24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018c24:	b5b0      	push	{r4, r5, r7, lr}
 8018c26:	b08a      	sub	sp, #40	@ 0x28
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d106      	bne.n	8018c40 <tcp_output+0x1c>
 8018c32:	4b8a      	ldr	r3, [pc, #552]	@ (8018e5c <tcp_output+0x238>)
 8018c34:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018c38:	4989      	ldr	r1, [pc, #548]	@ (8018e60 <tcp_output+0x23c>)
 8018c3a:	488a      	ldr	r0, [pc, #552]	@ (8018e64 <tcp_output+0x240>)
 8018c3c:	f005 f984 	bl	801df48 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	7d1b      	ldrb	r3, [r3, #20]
 8018c44:	2b01      	cmp	r3, #1
 8018c46:	d106      	bne.n	8018c56 <tcp_output+0x32>
 8018c48:	4b84      	ldr	r3, [pc, #528]	@ (8018e5c <tcp_output+0x238>)
 8018c4a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018c4e:	4986      	ldr	r1, [pc, #536]	@ (8018e68 <tcp_output+0x244>)
 8018c50:	4884      	ldr	r0, [pc, #528]	@ (8018e64 <tcp_output+0x240>)
 8018c52:	f005 f979 	bl	801df48 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018c56:	4b85      	ldr	r3, [pc, #532]	@ (8018e6c <tcp_output+0x248>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	687a      	ldr	r2, [r7, #4]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d101      	bne.n	8018c64 <tcp_output+0x40>
    return ERR_OK;
 8018c60:	2300      	movs	r3, #0
 8018c62:	e1ce      	b.n	8019002 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018c70:	4293      	cmp	r3, r2
 8018c72:	bf28      	it	cs
 8018c74:	4613      	movcs	r3, r2
 8018c76:	b29b      	uxth	r3, r3
 8018c78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d10b      	bne.n	8018c9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	8b5b      	ldrh	r3, [r3, #26]
 8018c8a:	f003 0302 	and.w	r3, r3, #2
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	f000 81aa 	beq.w	8018fe8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f000 fdcb 	bl	8019830 <tcp_send_empty_ack>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	e1b1      	b.n	8019002 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018c9e:	6879      	ldr	r1, [r7, #4]
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	3304      	adds	r3, #4
 8018ca4:	461a      	mov	r2, r3
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f7ff fc7e 	bl	80185a8 <tcp_route>
 8018cac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d102      	bne.n	8018cba <tcp_output+0x96>
    return ERR_RTE;
 8018cb4:	f06f 0303 	mvn.w	r3, #3
 8018cb8:	e1a3      	b.n	8019002 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d003      	beq.n	8018cc8 <tcp_output+0xa4>
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d111      	bne.n	8018cec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d002      	beq.n	8018cd4 <tcp_output+0xb0>
 8018cce:	697b      	ldr	r3, [r7, #20]
 8018cd0:	3304      	adds	r3, #4
 8018cd2:	e000      	b.n	8018cd6 <tcp_output+0xb2>
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018cd8:	693b      	ldr	r3, [r7, #16]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d102      	bne.n	8018ce4 <tcp_output+0xc0>
      return ERR_RTE;
 8018cde:	f06f 0303 	mvn.w	r3, #3
 8018ce2:	e18e      	b.n	8019002 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	685b      	ldr	r3, [r3, #4]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7f9 ff32 	bl	8012b5c <lwip_htonl>
 8018cf8:	4602      	mov	r2, r0
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cfe:	1ad3      	subs	r3, r2, r3
 8018d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d02:	8912      	ldrh	r2, [r2, #8]
 8018d04:	4413      	add	r3, r2
 8018d06:	69ba      	ldr	r2, [r7, #24]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	d227      	bcs.n	8018d5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018d12:	461a      	mov	r2, r3
 8018d14:	69bb      	ldr	r3, [r7, #24]
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d114      	bne.n	8018d44 <tcp_output+0x120>
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d110      	bne.n	8018d44 <tcp_output+0x120>
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d10b      	bne.n	8018d44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2200      	movs	r2, #0
 8018d30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2201      	movs	r2, #1
 8018d38:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	8b5b      	ldrh	r3, [r3, #26]
 8018d48:	f003 0302 	and.w	r3, r3, #2
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	f000 814d 	beq.w	8018fec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 fd6c 	bl	8019830 <tcp_send_empty_ack>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	e152      	b.n	8019002 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018d6a:	6a3b      	ldr	r3, [r7, #32]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	f000 811c 	beq.w	8018faa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018d72:	e002      	b.n	8018d7a <tcp_output+0x156>
 8018d74:	6a3b      	ldr	r3, [r7, #32]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	623b      	str	r3, [r7, #32]
 8018d7a:	6a3b      	ldr	r3, [r7, #32]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d1f8      	bne.n	8018d74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018d82:	e112      	b.n	8018faa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d86:	68db      	ldr	r3, [r3, #12]
 8018d88:	899b      	ldrh	r3, [r3, #12]
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f9 fecf 	bl	8012b30 <lwip_htons>
 8018d92:	4603      	mov	r3, r0
 8018d94:	b2db      	uxtb	r3, r3
 8018d96:	f003 0304 	and.w	r3, r3, #4
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d006      	beq.n	8018dac <tcp_output+0x188>
 8018d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8018e5c <tcp_output+0x238>)
 8018da0:	f240 5236 	movw	r2, #1334	@ 0x536
 8018da4:	4932      	ldr	r1, [pc, #200]	@ (8018e70 <tcp_output+0x24c>)
 8018da6:	482f      	ldr	r0, [pc, #188]	@ (8018e64 <tcp_output+0x240>)
 8018da8:	f005 f8ce 	bl	801df48 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d01f      	beq.n	8018df4 <tcp_output+0x1d0>
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	8b5b      	ldrh	r3, [r3, #26]
 8018db8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d119      	bne.n	8018df4 <tcp_output+0x1d0>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d00b      	beq.n	8018de0 <tcp_output+0x1bc>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d110      	bne.n	8018df4 <tcp_output+0x1d0>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dd6:	891a      	ldrh	r2, [r3, #8]
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d209      	bcs.n	8018df4 <tcp_output+0x1d0>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d004      	beq.n	8018df4 <tcp_output+0x1d0>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018df0:	2b08      	cmp	r3, #8
 8018df2:	d901      	bls.n	8018df8 <tcp_output+0x1d4>
 8018df4:	2301      	movs	r3, #1
 8018df6:	e000      	b.n	8018dfa <tcp_output+0x1d6>
 8018df8:	2300      	movs	r3, #0
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d106      	bne.n	8018e0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	8b5b      	ldrh	r3, [r3, #26]
 8018e02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	f000 80e4 	beq.w	8018fd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	7d1b      	ldrb	r3, [r3, #20]
 8018e10:	2b02      	cmp	r3, #2
 8018e12:	d00d      	beq.n	8018e30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e16:	68db      	ldr	r3, [r3, #12]
 8018e18:	899b      	ldrh	r3, [r3, #12]
 8018e1a:	b29c      	uxth	r4, r3
 8018e1c:	2010      	movs	r0, #16
 8018e1e:	f7f9 fe87 	bl	8012b30 <lwip_htons>
 8018e22:	4603      	mov	r3, r0
 8018e24:	461a      	mov	r2, r3
 8018e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e28:	68db      	ldr	r3, [r3, #12]
 8018e2a:	4322      	orrs	r2, r4
 8018e2c:	b292      	uxth	r2, r2
 8018e2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018e30:	697a      	ldr	r2, [r7, #20]
 8018e32:	6879      	ldr	r1, [r7, #4]
 8018e34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018e36:	f000 f909 	bl	801904c <tcp_output_segment>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d016      	beq.n	8018e74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	8b5b      	ldrh	r3, [r3, #26]
 8018e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	835a      	strh	r2, [r3, #26]
      return err;
 8018e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e58:	e0d3      	b.n	8019002 <tcp_output+0x3de>
 8018e5a:	bf00      	nop
 8018e5c:	08020858 	.word	0x08020858
 8018e60:	08020d9c 	.word	0x08020d9c
 8018e64:	080208ac 	.word	0x080208ac
 8018e68:	08020db4 	.word	0x08020db4
 8018e6c:	2002767c 	.word	0x2002767c
 8018e70:	08020ddc 	.word	0x08020ddc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	7d1b      	ldrb	r3, [r3, #20]
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	d006      	beq.n	8018e92 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	8b5b      	ldrh	r3, [r3, #26]
 8018e88:	f023 0303 	bic.w	r3, r3, #3
 8018e8c:	b29a      	uxth	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e94:	68db      	ldr	r3, [r3, #12]
 8018e96:	685b      	ldr	r3, [r3, #4]
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7f9 fe5f 	bl	8012b5c <lwip_htonl>
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea2:	891b      	ldrh	r3, [r3, #8]
 8018ea4:	461d      	mov	r5, r3
 8018ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	899b      	ldrh	r3, [r3, #12]
 8018eac:	b29b      	uxth	r3, r3
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7f9 fe3e 	bl	8012b30 <lwip_htons>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	f003 0303 	and.w	r3, r3, #3
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d001      	beq.n	8018ec4 <tcp_output+0x2a0>
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	e000      	b.n	8018ec6 <tcp_output+0x2a2>
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	442b      	add	r3, r5
 8018ec8:	4423      	add	r3, r4
 8018eca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	1ad3      	subs	r3, r2, r3
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	da02      	bge.n	8018ede <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	68ba      	ldr	r2, [r7, #8]
 8018edc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ee0:	891b      	ldrh	r3, [r3, #8]
 8018ee2:	461c      	mov	r4, r3
 8018ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ee6:	68db      	ldr	r3, [r3, #12]
 8018ee8:	899b      	ldrh	r3, [r3, #12]
 8018eea:	b29b      	uxth	r3, r3
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7f9 fe1f 	bl	8012b30 <lwip_htons>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	b2db      	uxtb	r3, r3
 8018ef6:	f003 0303 	and.w	r3, r3, #3
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d001      	beq.n	8018f02 <tcp_output+0x2de>
 8018efe:	2301      	movs	r3, #1
 8018f00:	e000      	b.n	8018f04 <tcp_output+0x2e0>
 8018f02:	2300      	movs	r3, #0
 8018f04:	4423      	add	r3, r4
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d049      	beq.n	8018f9e <tcp_output+0x37a>
      seg->next = NULL;
 8018f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d105      	bne.n	8018f24 <tcp_output+0x300>
        pcb->unacked = seg;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f1c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8018f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f20:	623b      	str	r3, [r7, #32]
 8018f22:	e03f      	b.n	8018fa4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f26:	68db      	ldr	r3, [r3, #12]
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f7f9 fe16 	bl	8012b5c <lwip_htonl>
 8018f30:	4604      	mov	r4, r0
 8018f32:	6a3b      	ldr	r3, [r7, #32]
 8018f34:	68db      	ldr	r3, [r3, #12]
 8018f36:	685b      	ldr	r3, [r3, #4]
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f7f9 fe0f 	bl	8012b5c <lwip_htonl>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	1ae3      	subs	r3, r4, r3
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	da24      	bge.n	8018f90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	3370      	adds	r3, #112	@ 0x70
 8018f4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018f4c:	e002      	b.n	8018f54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018f4e:	69fb      	ldr	r3, [r7, #28]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d011      	beq.n	8018f80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7f9 fdf9 	bl	8012b5c <lwip_htonl>
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f6e:	68db      	ldr	r3, [r3, #12]
 8018f70:	685b      	ldr	r3, [r3, #4]
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7f9 fdf2 	bl	8012b5c <lwip_htonl>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	dbe6      	blt.n	8018f4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	681a      	ldr	r2, [r3, #0]
 8018f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018f88:	69fb      	ldr	r3, [r7, #28]
 8018f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f8c:	601a      	str	r2, [r3, #0]
 8018f8e:	e009      	b.n	8018fa4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018f90:	6a3b      	ldr	r3, [r7, #32]
 8018f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018f96:	6a3b      	ldr	r3, [r7, #32]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	623b      	str	r3, [r7, #32]
 8018f9c:	e002      	b.n	8018fa4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018fa0:	f7fc fc45 	bl	801582e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8018faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d012      	beq.n	8018fd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb2:	68db      	ldr	r3, [r3, #12]
 8018fb4:	685b      	ldr	r3, [r3, #4]
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7f9 fdd0 	bl	8012b5c <lwip_htonl>
 8018fbc:	4602      	mov	r2, r0
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018fc2:	1ad3      	subs	r3, r2, r3
 8018fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fc6:	8912      	ldrh	r2, [r2, #8]
 8018fc8:	4413      	add	r3, r2
  while (seg != NULL &&
 8018fca:	69ba      	ldr	r2, [r7, #24]
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	f4bf aed9 	bcs.w	8018d84 <tcp_output+0x160>
 8018fd2:	e000      	b.n	8018fd6 <tcp_output+0x3b2>
      break;
 8018fd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d108      	bne.n	8018ff0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018fe6:	e004      	b.n	8018ff2 <tcp_output+0x3ce>
    goto output_done;
 8018fe8:	bf00      	nop
 8018fea:	e002      	b.n	8018ff2 <tcp_output+0x3ce>
    goto output_done;
 8018fec:	bf00      	nop
 8018fee:	e000      	b.n	8018ff2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018ff0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	8b5b      	ldrh	r3, [r3, #26]
 8018ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019000:	2300      	movs	r3, #0
}
 8019002:	4618      	mov	r0, r3
 8019004:	3728      	adds	r7, #40	@ 0x28
 8019006:	46bd      	mov	sp, r7
 8019008:	bdb0      	pop	{r4, r5, r7, pc}
 801900a:	bf00      	nop

0801900c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b082      	sub	sp, #8
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d106      	bne.n	8019028 <tcp_output_segment_busy+0x1c>
 801901a:	4b09      	ldr	r3, [pc, #36]	@ (8019040 <tcp_output_segment_busy+0x34>)
 801901c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019020:	4908      	ldr	r1, [pc, #32]	@ (8019044 <tcp_output_segment_busy+0x38>)
 8019022:	4809      	ldr	r0, [pc, #36]	@ (8019048 <tcp_output_segment_busy+0x3c>)
 8019024:	f004 ff90 	bl	801df48 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	685b      	ldr	r3, [r3, #4]
 801902c:	7b9b      	ldrb	r3, [r3, #14]
 801902e:	2b01      	cmp	r3, #1
 8019030:	d001      	beq.n	8019036 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019032:	2301      	movs	r3, #1
 8019034:	e000      	b.n	8019038 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019036:	2300      	movs	r3, #0
}
 8019038:	4618      	mov	r0, r3
 801903a:	3708      	adds	r7, #8
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}
 8019040:	08020858 	.word	0x08020858
 8019044:	08020df4 	.word	0x08020df4
 8019048:	080208ac 	.word	0x080208ac

0801904c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801904c:	b5b0      	push	{r4, r5, r7, lr}
 801904e:	b08c      	sub	sp, #48	@ 0x30
 8019050:	af04      	add	r7, sp, #16
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d106      	bne.n	801906c <tcp_output_segment+0x20>
 801905e:	4b64      	ldr	r3, [pc, #400]	@ (80191f0 <tcp_output_segment+0x1a4>)
 8019060:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019064:	4963      	ldr	r1, [pc, #396]	@ (80191f4 <tcp_output_segment+0x1a8>)
 8019066:	4864      	ldr	r0, [pc, #400]	@ (80191f8 <tcp_output_segment+0x1ac>)
 8019068:	f004 ff6e 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d106      	bne.n	8019080 <tcp_output_segment+0x34>
 8019072:	4b5f      	ldr	r3, [pc, #380]	@ (80191f0 <tcp_output_segment+0x1a4>)
 8019074:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019078:	4960      	ldr	r1, [pc, #384]	@ (80191fc <tcp_output_segment+0x1b0>)
 801907a:	485f      	ldr	r0, [pc, #380]	@ (80191f8 <tcp_output_segment+0x1ac>)
 801907c:	f004 ff64 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d106      	bne.n	8019094 <tcp_output_segment+0x48>
 8019086:	4b5a      	ldr	r3, [pc, #360]	@ (80191f0 <tcp_output_segment+0x1a4>)
 8019088:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801908c:	495c      	ldr	r1, [pc, #368]	@ (8019200 <tcp_output_segment+0x1b4>)
 801908e:	485a      	ldr	r0, [pc, #360]	@ (80191f8 <tcp_output_segment+0x1ac>)
 8019090:	f004 ff5a 	bl	801df48 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	f7ff ffb9 	bl	801900c <tcp_output_segment_busy>
 801909a:	4603      	mov	r3, r0
 801909c:	2b00      	cmp	r3, #0
 801909e:	d001      	beq.n	80190a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80190a0:	2300      	movs	r3, #0
 80190a2:	e0a1      	b.n	80191e8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	68dc      	ldr	r4, [r3, #12]
 80190ac:	4610      	mov	r0, r2
 80190ae:	f7f9 fd55 	bl	8012b5c <lwip_htonl>
 80190b2:	4603      	mov	r3, r0
 80190b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	68dc      	ldr	r4, [r3, #12]
 80190be:	4610      	mov	r0, r2
 80190c0:	f7f9 fd36 	bl	8012b30 <lwip_htons>
 80190c4:	4603      	mov	r3, r0
 80190c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190cc:	68ba      	ldr	r2, [r7, #8]
 80190ce:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80190d0:	441a      	add	r2, r3
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	68db      	ldr	r3, [r3, #12]
 80190da:	3314      	adds	r3, #20
 80190dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	7a9b      	ldrb	r3, [r3, #10]
 80190e2:	f003 0301 	and.w	r3, r3, #1
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d015      	beq.n	8019116 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80190ea:	68bb      	ldr	r3, [r7, #8]
 80190ec:	3304      	adds	r3, #4
 80190ee:	461a      	mov	r2, r3
 80190f0:	6879      	ldr	r1, [r7, #4]
 80190f2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80190f6:	f7fc fe91 	bl	8015e1c <tcp_eff_send_mss_netif>
 80190fa:	4603      	mov	r3, r0
 80190fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80190fe:	8b7b      	ldrh	r3, [r7, #26]
 8019100:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019104:	4618      	mov	r0, r3
 8019106:	f7f9 fd29 	bl	8012b5c <lwip_htonl>
 801910a:	4602      	mov	r2, r0
 801910c:	69fb      	ldr	r3, [r7, #28]
 801910e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019110:	69fb      	ldr	r3, [r7, #28]
 8019112:	3304      	adds	r3, #4
 8019114:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801911c:	2b00      	cmp	r3, #0
 801911e:	da02      	bge.n	8019126 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	2200      	movs	r2, #0
 8019124:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801912a:	2b00      	cmp	r3, #0
 801912c:	d10c      	bne.n	8019148 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801912e:	4b35      	ldr	r3, [pc, #212]	@ (8019204 <tcp_output_segment+0x1b8>)
 8019130:	681a      	ldr	r2, [r3, #0]
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	68db      	ldr	r3, [r3, #12]
 801913a:	685b      	ldr	r3, [r3, #4]
 801913c:	4618      	mov	r0, r3
 801913e:	f7f9 fd0d 	bl	8012b5c <lwip_htonl>
 8019142:	4602      	mov	r2, r0
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	68da      	ldr	r2, [r3, #12]
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	1ad3      	subs	r3, r2, r3
 8019154:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	685b      	ldr	r3, [r3, #4]
 801915a:	8959      	ldrh	r1, [r3, #10]
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	8b3a      	ldrh	r2, [r7, #24]
 8019162:	1a8a      	subs	r2, r1, r2
 8019164:	b292      	uxth	r2, r2
 8019166:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	8919      	ldrh	r1, [r3, #8]
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	8b3a      	ldrh	r2, [r7, #24]
 8019174:	1a8a      	subs	r2, r1, r2
 8019176:	b292      	uxth	r2, r2
 8019178:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	68fa      	ldr	r2, [r7, #12]
 8019180:	68d2      	ldr	r2, [r2, #12]
 8019182:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	68db      	ldr	r3, [r3, #12]
 8019188:	2200      	movs	r2, #0
 801918a:	741a      	strb	r2, [r3, #16]
 801918c:	2200      	movs	r2, #0
 801918e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	68da      	ldr	r2, [r3, #12]
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	7a9b      	ldrb	r3, [r3, #10]
 8019198:	f003 0301 	and.w	r3, r3, #1
 801919c:	2b00      	cmp	r3, #0
 801919e:	d001      	beq.n	80191a4 <tcp_output_segment+0x158>
 80191a0:	2318      	movs	r3, #24
 80191a2:	e000      	b.n	80191a6 <tcp_output_segment+0x15a>
 80191a4:	2314      	movs	r3, #20
 80191a6:	4413      	add	r3, r2
 80191a8:	69fa      	ldr	r2, [r7, #28]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d006      	beq.n	80191bc <tcp_output_segment+0x170>
 80191ae:	4b10      	ldr	r3, [pc, #64]	@ (80191f0 <tcp_output_segment+0x1a4>)
 80191b0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80191b4:	4914      	ldr	r1, [pc, #80]	@ (8019208 <tcp_output_segment+0x1bc>)
 80191b6:	4810      	ldr	r0, [pc, #64]	@ (80191f8 <tcp_output_segment+0x1ac>)
 80191b8:	f004 fec6 	bl	801df48 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	6858      	ldr	r0, [r3, #4]
 80191c0:	68b9      	ldr	r1, [r7, #8]
 80191c2:	68bb      	ldr	r3, [r7, #8]
 80191c4:	1d1c      	adds	r4, r3, #4
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	7add      	ldrb	r5, [r3, #11]
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	7a9b      	ldrb	r3, [r3, #10]
 80191ce:	687a      	ldr	r2, [r7, #4]
 80191d0:	9202      	str	r2, [sp, #8]
 80191d2:	2206      	movs	r2, #6
 80191d4:	9201      	str	r2, [sp, #4]
 80191d6:	9300      	str	r3, [sp, #0]
 80191d8:	462b      	mov	r3, r5
 80191da:	4622      	mov	r2, r4
 80191dc:	f002 fd12 	bl	801bc04 <ip4_output_if>
 80191e0:	4603      	mov	r3, r0
 80191e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80191e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	3720      	adds	r7, #32
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bdb0      	pop	{r4, r5, r7, pc}
 80191f0:	08020858 	.word	0x08020858
 80191f4:	08020e1c 	.word	0x08020e1c
 80191f8:	080208ac 	.word	0x080208ac
 80191fc:	08020e3c 	.word	0x08020e3c
 8019200:	08020e5c 	.word	0x08020e5c
 8019204:	20027630 	.word	0x20027630
 8019208:	08020e80 	.word	0x08020e80

0801920c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801920c:	b5b0      	push	{r4, r5, r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d106      	bne.n	8019228 <tcp_rexmit_rto_prepare+0x1c>
 801921a:	4b31      	ldr	r3, [pc, #196]	@ (80192e0 <tcp_rexmit_rto_prepare+0xd4>)
 801921c:	f240 6263 	movw	r2, #1635	@ 0x663
 8019220:	4930      	ldr	r1, [pc, #192]	@ (80192e4 <tcp_rexmit_rto_prepare+0xd8>)
 8019222:	4831      	ldr	r0, [pc, #196]	@ (80192e8 <tcp_rexmit_rto_prepare+0xdc>)
 8019224:	f004 fe90 	bl	801df48 <iprintf>

  if (pcb->unacked == NULL) {
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801922c:	2b00      	cmp	r3, #0
 801922e:	d102      	bne.n	8019236 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019230:	f06f 0305 	mvn.w	r3, #5
 8019234:	e050      	b.n	80192d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801923a:	60fb      	str	r3, [r7, #12]
 801923c:	e00b      	b.n	8019256 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801923e:	68f8      	ldr	r0, [r7, #12]
 8019240:	f7ff fee4 	bl	801900c <tcp_output_segment_busy>
 8019244:	4603      	mov	r3, r0
 8019246:	2b00      	cmp	r3, #0
 8019248:	d002      	beq.n	8019250 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801924a:	f06f 0305 	mvn.w	r3, #5
 801924e:	e043      	b.n	80192d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	60fb      	str	r3, [r7, #12]
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d1ef      	bne.n	801923e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801925e:	68f8      	ldr	r0, [r7, #12]
 8019260:	f7ff fed4 	bl	801900c <tcp_output_segment_busy>
 8019264:	4603      	mov	r3, r0
 8019266:	2b00      	cmp	r3, #0
 8019268:	d002      	beq.n	8019270 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801926a:	f06f 0305 	mvn.w	r3, #5
 801926e:	e033      	b.n	80192d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	8b5b      	ldrh	r3, [r3, #26]
 801928a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801928e:	b29a      	uxth	r2, r3
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	68db      	ldr	r3, [r3, #12]
 8019298:	685b      	ldr	r3, [r3, #4]
 801929a:	4618      	mov	r0, r3
 801929c:	f7f9 fc5e 	bl	8012b5c <lwip_htonl>
 80192a0:	4604      	mov	r4, r0
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	891b      	ldrh	r3, [r3, #8]
 80192a6:	461d      	mov	r5, r3
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	68db      	ldr	r3, [r3, #12]
 80192ac:	899b      	ldrh	r3, [r3, #12]
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	4618      	mov	r0, r3
 80192b2:	f7f9 fc3d 	bl	8012b30 <lwip_htons>
 80192b6:	4603      	mov	r3, r0
 80192b8:	b2db      	uxtb	r3, r3
 80192ba:	f003 0303 	and.w	r3, r3, #3
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d001      	beq.n	80192c6 <tcp_rexmit_rto_prepare+0xba>
 80192c2:	2301      	movs	r3, #1
 80192c4:	e000      	b.n	80192c8 <tcp_rexmit_rto_prepare+0xbc>
 80192c6:	2300      	movs	r3, #0
 80192c8:	442b      	add	r3, r5
 80192ca:	18e2      	adds	r2, r4, r3
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2200      	movs	r2, #0
 80192d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80192d6:	2300      	movs	r3, #0
}
 80192d8:	4618      	mov	r0, r3
 80192da:	3710      	adds	r7, #16
 80192dc:	46bd      	mov	sp, r7
 80192de:	bdb0      	pop	{r4, r5, r7, pc}
 80192e0:	08020858 	.word	0x08020858
 80192e4:	08020e94 	.word	0x08020e94
 80192e8:	080208ac 	.word	0x080208ac

080192ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d106      	bne.n	8019308 <tcp_rexmit_rto_commit+0x1c>
 80192fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019330 <tcp_rexmit_rto_commit+0x44>)
 80192fc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019300:	490c      	ldr	r1, [pc, #48]	@ (8019334 <tcp_rexmit_rto_commit+0x48>)
 8019302:	480d      	ldr	r0, [pc, #52]	@ (8019338 <tcp_rexmit_rto_commit+0x4c>)
 8019304:	f004 fe20 	bl	801df48 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801930e:	2bff      	cmp	r3, #255	@ 0xff
 8019310:	d007      	beq.n	8019322 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019318:	3301      	adds	r3, #1
 801931a:	b2da      	uxtb	r2, r3
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019322:	6878      	ldr	r0, [r7, #4]
 8019324:	f7ff fc7e 	bl	8018c24 <tcp_output>
}
 8019328:	bf00      	nop
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}
 8019330:	08020858 	.word	0x08020858
 8019334:	08020eb8 	.word	0x08020eb8
 8019338:	080208ac 	.word	0x080208ac

0801933c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b082      	sub	sp, #8
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d106      	bne.n	8019358 <tcp_rexmit_rto+0x1c>
 801934a:	4b0a      	ldr	r3, [pc, #40]	@ (8019374 <tcp_rexmit_rto+0x38>)
 801934c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019350:	4909      	ldr	r1, [pc, #36]	@ (8019378 <tcp_rexmit_rto+0x3c>)
 8019352:	480a      	ldr	r0, [pc, #40]	@ (801937c <tcp_rexmit_rto+0x40>)
 8019354:	f004 fdf8 	bl	801df48 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019358:	6878      	ldr	r0, [r7, #4]
 801935a:	f7ff ff57 	bl	801920c <tcp_rexmit_rto_prepare>
 801935e:	4603      	mov	r3, r0
 8019360:	2b00      	cmp	r3, #0
 8019362:	d102      	bne.n	801936a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f7ff ffc1 	bl	80192ec <tcp_rexmit_rto_commit>
  }
}
 801936a:	bf00      	nop
 801936c:	3708      	adds	r7, #8
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}
 8019372:	bf00      	nop
 8019374:	08020858 	.word	0x08020858
 8019378:	08020edc 	.word	0x08020edc
 801937c:	080208ac 	.word	0x080208ac

08019380 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019380:	b590      	push	{r4, r7, lr}
 8019382:	b085      	sub	sp, #20
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d106      	bne.n	801939c <tcp_rexmit+0x1c>
 801938e:	4b2f      	ldr	r3, [pc, #188]	@ (801944c <tcp_rexmit+0xcc>)
 8019390:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019394:	492e      	ldr	r1, [pc, #184]	@ (8019450 <tcp_rexmit+0xd0>)
 8019396:	482f      	ldr	r0, [pc, #188]	@ (8019454 <tcp_rexmit+0xd4>)
 8019398:	f004 fdd6 	bl	801df48 <iprintf>

  if (pcb->unacked == NULL) {
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d102      	bne.n	80193aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80193a4:	f06f 0305 	mvn.w	r3, #5
 80193a8:	e04c      	b.n	8019444 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80193b0:	68b8      	ldr	r0, [r7, #8]
 80193b2:	f7ff fe2b 	bl	801900c <tcp_output_segment_busy>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d002      	beq.n	80193c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80193bc:	f06f 0305 	mvn.w	r3, #5
 80193c0:	e040      	b.n	8019444 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80193c2:	68bb      	ldr	r3, [r7, #8]
 80193c4:	681a      	ldr	r2, [r3, #0]
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	336c      	adds	r3, #108	@ 0x6c
 80193ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80193d0:	e002      	b.n	80193d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d011      	beq.n	8019404 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	685b      	ldr	r3, [r3, #4]
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7f9 fbb7 	bl	8012b5c <lwip_htonl>
 80193ee:	4604      	mov	r4, r0
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	68db      	ldr	r3, [r3, #12]
 80193f4:	685b      	ldr	r3, [r3, #4]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7f9 fbb0 	bl	8012b5c <lwip_htonl>
 80193fc:	4603      	mov	r3, r0
 80193fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019400:	2b00      	cmp	r3, #0
 8019402:	dbe6      	blt.n	80193d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	681a      	ldr	r2, [r3, #0]
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	68ba      	ldr	r2, [r7, #8]
 8019410:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d103      	bne.n	8019422 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2200      	movs	r2, #0
 801941e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019428:	2bff      	cmp	r3, #255	@ 0xff
 801942a:	d007      	beq.n	801943c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019432:	3301      	adds	r3, #1
 8019434:	b2da      	uxtb	r2, r3
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2200      	movs	r2, #0
 8019440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019442:	2300      	movs	r3, #0
}
 8019444:	4618      	mov	r0, r3
 8019446:	3714      	adds	r7, #20
 8019448:	46bd      	mov	sp, r7
 801944a:	bd90      	pop	{r4, r7, pc}
 801944c:	08020858 	.word	0x08020858
 8019450:	08020ef8 	.word	0x08020ef8
 8019454:	080208ac 	.word	0x080208ac

08019458 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d106      	bne.n	8019474 <tcp_rexmit_fast+0x1c>
 8019466:	4b2a      	ldr	r3, [pc, #168]	@ (8019510 <tcp_rexmit_fast+0xb8>)
 8019468:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801946c:	4929      	ldr	r1, [pc, #164]	@ (8019514 <tcp_rexmit_fast+0xbc>)
 801946e:	482a      	ldr	r0, [pc, #168]	@ (8019518 <tcp_rexmit_fast+0xc0>)
 8019470:	f004 fd6a 	bl	801df48 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019478:	2b00      	cmp	r3, #0
 801947a:	d045      	beq.n	8019508 <tcp_rexmit_fast+0xb0>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	8b5b      	ldrh	r3, [r3, #26]
 8019480:	f003 0304 	and.w	r3, r3, #4
 8019484:	2b00      	cmp	r3, #0
 8019486:	d13f      	bne.n	8019508 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019488:	6878      	ldr	r0, [r7, #4]
 801948a:	f7ff ff79 	bl	8019380 <tcp_rexmit>
 801948e:	4603      	mov	r3, r0
 8019490:	2b00      	cmp	r3, #0
 8019492:	d139      	bne.n	8019508 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80194a0:	4293      	cmp	r3, r2
 80194a2:	bf28      	it	cs
 80194a4:	4613      	movcs	r3, r2
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	da00      	bge.n	80194ae <tcp_rexmit_fast+0x56>
 80194ac:	3301      	adds	r3, #1
 80194ae:	105b      	asrs	r3, r3, #1
 80194b0:	b29a      	uxth	r2, r3
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80194be:	461a      	mov	r2, r3
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194c4:	005b      	lsls	r3, r3, #1
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d206      	bcs.n	80194d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194ce:	005b      	lsls	r3, r3, #1
 80194d0:	b29a      	uxth	r2, r3
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194e2:	4619      	mov	r1, r3
 80194e4:	0049      	lsls	r1, r1, #1
 80194e6:	440b      	add	r3, r1
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	4413      	add	r3, r2
 80194ec:	b29a      	uxth	r2, r3
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	8b5b      	ldrh	r3, [r3, #26]
 80194f8:	f043 0304 	orr.w	r3, r3, #4
 80194fc:	b29a      	uxth	r2, r3
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2200      	movs	r2, #0
 8019506:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019508:	bf00      	nop
 801950a:	3708      	adds	r7, #8
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	08020858 	.word	0x08020858
 8019514:	08020f10 	.word	0x08020f10
 8019518:	080208ac 	.word	0x080208ac

0801951c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b086      	sub	sp, #24
 8019520:	af00      	add	r7, sp, #0
 8019522:	60f8      	str	r0, [r7, #12]
 8019524:	607b      	str	r3, [r7, #4]
 8019526:	460b      	mov	r3, r1
 8019528:	817b      	strh	r3, [r7, #10]
 801952a:	4613      	mov	r3, r2
 801952c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801952e:	897a      	ldrh	r2, [r7, #10]
 8019530:	893b      	ldrh	r3, [r7, #8]
 8019532:	4413      	add	r3, r2
 8019534:	b29b      	uxth	r3, r3
 8019536:	3314      	adds	r3, #20
 8019538:	b29b      	uxth	r3, r3
 801953a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801953e:	4619      	mov	r1, r3
 8019540:	2022      	movs	r0, #34	@ 0x22
 8019542:	f7fa fbff 	bl	8013d44 <pbuf_alloc>
 8019546:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d04d      	beq.n	80195ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801954e:	897b      	ldrh	r3, [r7, #10]
 8019550:	3313      	adds	r3, #19
 8019552:	697a      	ldr	r2, [r7, #20]
 8019554:	8952      	ldrh	r2, [r2, #10]
 8019556:	4293      	cmp	r3, r2
 8019558:	db06      	blt.n	8019568 <tcp_output_alloc_header_common+0x4c>
 801955a:	4b26      	ldr	r3, [pc, #152]	@ (80195f4 <tcp_output_alloc_header_common+0xd8>)
 801955c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019560:	4925      	ldr	r1, [pc, #148]	@ (80195f8 <tcp_output_alloc_header_common+0xdc>)
 8019562:	4826      	ldr	r0, [pc, #152]	@ (80195fc <tcp_output_alloc_header_common+0xe0>)
 8019564:	f004 fcf0 	bl	801df48 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801956e:	8c3b      	ldrh	r3, [r7, #32]
 8019570:	4618      	mov	r0, r3
 8019572:	f7f9 fadd 	bl	8012b30 <lwip_htons>
 8019576:	4603      	mov	r3, r0
 8019578:	461a      	mov	r2, r3
 801957a:	693b      	ldr	r3, [r7, #16]
 801957c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801957e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019580:	4618      	mov	r0, r3
 8019582:	f7f9 fad5 	bl	8012b30 <lwip_htons>
 8019586:	4603      	mov	r3, r0
 8019588:	461a      	mov	r2, r3
 801958a:	693b      	ldr	r3, [r7, #16]
 801958c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019594:	68f8      	ldr	r0, [r7, #12]
 8019596:	f7f9 fae1 	bl	8012b5c <lwip_htonl>
 801959a:	4602      	mov	r2, r0
 801959c:	693b      	ldr	r3, [r7, #16]
 801959e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80195a0:	897b      	ldrh	r3, [r7, #10]
 80195a2:	089b      	lsrs	r3, r3, #2
 80195a4:	b29b      	uxth	r3, r3
 80195a6:	3305      	adds	r3, #5
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	031b      	lsls	r3, r3, #12
 80195ac:	b29a      	uxth	r2, r3
 80195ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80195b2:	b29b      	uxth	r3, r3
 80195b4:	4313      	orrs	r3, r2
 80195b6:	b29b      	uxth	r3, r3
 80195b8:	4618      	mov	r0, r3
 80195ba:	f7f9 fab9 	bl	8012b30 <lwip_htons>
 80195be:	4603      	mov	r3, r0
 80195c0:	461a      	mov	r2, r3
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80195c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7f9 fab1 	bl	8012b30 <lwip_htons>
 80195ce:	4603      	mov	r3, r0
 80195d0:	461a      	mov	r2, r3
 80195d2:	693b      	ldr	r3, [r7, #16]
 80195d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	2200      	movs	r2, #0
 80195da:	741a      	strb	r2, [r3, #16]
 80195dc:	2200      	movs	r2, #0
 80195de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80195e0:	693b      	ldr	r3, [r7, #16]
 80195e2:	2200      	movs	r2, #0
 80195e4:	749a      	strb	r2, [r3, #18]
 80195e6:	2200      	movs	r2, #0
 80195e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80195ea:	697b      	ldr	r3, [r7, #20]
}
 80195ec:	4618      	mov	r0, r3
 80195ee:	3718      	adds	r7, #24
 80195f0:	46bd      	mov	sp, r7
 80195f2:	bd80      	pop	{r7, pc}
 80195f4:	08020858 	.word	0x08020858
 80195f8:	08020f30 	.word	0x08020f30
 80195fc:	080208ac 	.word	0x080208ac

08019600 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019600:	b5b0      	push	{r4, r5, r7, lr}
 8019602:	b08a      	sub	sp, #40	@ 0x28
 8019604:	af04      	add	r7, sp, #16
 8019606:	60f8      	str	r0, [r7, #12]
 8019608:	607b      	str	r3, [r7, #4]
 801960a:	460b      	mov	r3, r1
 801960c:	817b      	strh	r3, [r7, #10]
 801960e:	4613      	mov	r3, r2
 8019610:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d106      	bne.n	8019626 <tcp_output_alloc_header+0x26>
 8019618:	4b15      	ldr	r3, [pc, #84]	@ (8019670 <tcp_output_alloc_header+0x70>)
 801961a:	f240 7242 	movw	r2, #1858	@ 0x742
 801961e:	4915      	ldr	r1, [pc, #84]	@ (8019674 <tcp_output_alloc_header+0x74>)
 8019620:	4815      	ldr	r0, [pc, #84]	@ (8019678 <tcp_output_alloc_header+0x78>)
 8019622:	f004 fc91 	bl	801df48 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	8adb      	ldrh	r3, [r3, #22]
 801962e:	68fa      	ldr	r2, [r7, #12]
 8019630:	8b12      	ldrh	r2, [r2, #24]
 8019632:	68f9      	ldr	r1, [r7, #12]
 8019634:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019636:	893d      	ldrh	r5, [r7, #8]
 8019638:	897c      	ldrh	r4, [r7, #10]
 801963a:	9103      	str	r1, [sp, #12]
 801963c:	2110      	movs	r1, #16
 801963e:	9102      	str	r1, [sp, #8]
 8019640:	9201      	str	r2, [sp, #4]
 8019642:	9300      	str	r3, [sp, #0]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	462a      	mov	r2, r5
 8019648:	4621      	mov	r1, r4
 801964a:	f7ff ff67 	bl	801951c <tcp_output_alloc_header_common>
 801964e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d006      	beq.n	8019664 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801965a:	68fa      	ldr	r2, [r7, #12]
 801965c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801965e:	441a      	add	r2, r3
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019664:	697b      	ldr	r3, [r7, #20]
}
 8019666:	4618      	mov	r0, r3
 8019668:	3718      	adds	r7, #24
 801966a:	46bd      	mov	sp, r7
 801966c:	bdb0      	pop	{r4, r5, r7, pc}
 801966e:	bf00      	nop
 8019670:	08020858 	.word	0x08020858
 8019674:	08020f60 	.word	0x08020f60
 8019678:	080208ac 	.word	0x080208ac

0801967c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b088      	sub	sp, #32
 8019680:	af00      	add	r7, sp, #0
 8019682:	60f8      	str	r0, [r7, #12]
 8019684:	60b9      	str	r1, [r7, #8]
 8019686:	4611      	mov	r1, r2
 8019688:	461a      	mov	r2, r3
 801968a:	460b      	mov	r3, r1
 801968c:	71fb      	strb	r3, [r7, #7]
 801968e:	4613      	mov	r3, r2
 8019690:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019692:	2300      	movs	r3, #0
 8019694:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019696:	68bb      	ldr	r3, [r7, #8]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d106      	bne.n	80196aa <tcp_output_fill_options+0x2e>
 801969c:	4b12      	ldr	r3, [pc, #72]	@ (80196e8 <tcp_output_fill_options+0x6c>)
 801969e:	f240 7256 	movw	r2, #1878	@ 0x756
 80196a2:	4912      	ldr	r1, [pc, #72]	@ (80196ec <tcp_output_fill_options+0x70>)
 80196a4:	4812      	ldr	r0, [pc, #72]	@ (80196f0 <tcp_output_fill_options+0x74>)
 80196a6:	f004 fc4f 	bl	801df48 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80196aa:	68bb      	ldr	r3, [r7, #8]
 80196ac:	685b      	ldr	r3, [r3, #4]
 80196ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80196b0:	69bb      	ldr	r3, [r7, #24]
 80196b2:	3314      	adds	r3, #20
 80196b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80196b6:	8bfb      	ldrh	r3, [r7, #30]
 80196b8:	009b      	lsls	r3, r3, #2
 80196ba:	461a      	mov	r2, r3
 80196bc:	79fb      	ldrb	r3, [r7, #7]
 80196be:	009b      	lsls	r3, r3, #2
 80196c0:	f003 0304 	and.w	r3, r3, #4
 80196c4:	4413      	add	r3, r2
 80196c6:	3314      	adds	r3, #20
 80196c8:	69ba      	ldr	r2, [r7, #24]
 80196ca:	4413      	add	r3, r2
 80196cc:	697a      	ldr	r2, [r7, #20]
 80196ce:	429a      	cmp	r2, r3
 80196d0:	d006      	beq.n	80196e0 <tcp_output_fill_options+0x64>
 80196d2:	4b05      	ldr	r3, [pc, #20]	@ (80196e8 <tcp_output_fill_options+0x6c>)
 80196d4:	f240 7275 	movw	r2, #1909	@ 0x775
 80196d8:	4906      	ldr	r1, [pc, #24]	@ (80196f4 <tcp_output_fill_options+0x78>)
 80196da:	4805      	ldr	r0, [pc, #20]	@ (80196f0 <tcp_output_fill_options+0x74>)
 80196dc:	f004 fc34 	bl	801df48 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80196e0:	bf00      	nop
 80196e2:	3720      	adds	r7, #32
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	08020858 	.word	0x08020858
 80196ec:	08020f88 	.word	0x08020f88
 80196f0:	080208ac 	.word	0x080208ac
 80196f4:	08020e80 	.word	0x08020e80

080196f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b08a      	sub	sp, #40	@ 0x28
 80196fc:	af04      	add	r7, sp, #16
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	607a      	str	r2, [r7, #4]
 8019704:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d106      	bne.n	801971a <tcp_output_control_segment+0x22>
 801970c:	4b1c      	ldr	r3, [pc, #112]	@ (8019780 <tcp_output_control_segment+0x88>)
 801970e:	f240 7287 	movw	r2, #1927	@ 0x787
 8019712:	491c      	ldr	r1, [pc, #112]	@ (8019784 <tcp_output_control_segment+0x8c>)
 8019714:	481c      	ldr	r0, [pc, #112]	@ (8019788 <tcp_output_control_segment+0x90>)
 8019716:	f004 fc17 	bl	801df48 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801971a:	683a      	ldr	r2, [r7, #0]
 801971c:	6879      	ldr	r1, [r7, #4]
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f7fe ff42 	bl	80185a8 <tcp_route>
 8019724:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019726:	693b      	ldr	r3, [r7, #16]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d102      	bne.n	8019732 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801972c:	23fc      	movs	r3, #252	@ 0xfc
 801972e:	75fb      	strb	r3, [r7, #23]
 8019730:	e01c      	b.n	801976c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d006      	beq.n	8019746 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	7adb      	ldrb	r3, [r3, #11]
 801973c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	7a9b      	ldrb	r3, [r3, #10]
 8019742:	757b      	strb	r3, [r7, #21]
 8019744:	e003      	b.n	801974e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019746:	23ff      	movs	r3, #255	@ 0xff
 8019748:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801974a:	2300      	movs	r3, #0
 801974c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801974e:	7dba      	ldrb	r2, [r7, #22]
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	9302      	str	r3, [sp, #8]
 8019754:	2306      	movs	r3, #6
 8019756:	9301      	str	r3, [sp, #4]
 8019758:	7d7b      	ldrb	r3, [r7, #21]
 801975a:	9300      	str	r3, [sp, #0]
 801975c:	4613      	mov	r3, r2
 801975e:	683a      	ldr	r2, [r7, #0]
 8019760:	6879      	ldr	r1, [r7, #4]
 8019762:	68b8      	ldr	r0, [r7, #8]
 8019764:	f002 fa4e 	bl	801bc04 <ip4_output_if>
 8019768:	4603      	mov	r3, r0
 801976a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801976c:	68b8      	ldr	r0, [r7, #8]
 801976e:	f7fa fdcd 	bl	801430c <pbuf_free>
  return err;
 8019772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019776:	4618      	mov	r0, r3
 8019778:	3718      	adds	r7, #24
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	08020858 	.word	0x08020858
 8019784:	08020fb0 	.word	0x08020fb0
 8019788:	080208ac 	.word	0x080208ac

0801978c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801978c:	b590      	push	{r4, r7, lr}
 801978e:	b08b      	sub	sp, #44	@ 0x2c
 8019790:	af04      	add	r7, sp, #16
 8019792:	60f8      	str	r0, [r7, #12]
 8019794:	60b9      	str	r1, [r7, #8]
 8019796:	607a      	str	r2, [r7, #4]
 8019798:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d106      	bne.n	80197ae <tcp_rst+0x22>
 80197a0:	4b1f      	ldr	r3, [pc, #124]	@ (8019820 <tcp_rst+0x94>)
 80197a2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80197a6:	491f      	ldr	r1, [pc, #124]	@ (8019824 <tcp_rst+0x98>)
 80197a8:	481f      	ldr	r0, [pc, #124]	@ (8019828 <tcp_rst+0x9c>)
 80197aa:	f004 fbcd 	bl	801df48 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80197ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d106      	bne.n	80197c2 <tcp_rst+0x36>
 80197b4:	4b1a      	ldr	r3, [pc, #104]	@ (8019820 <tcp_rst+0x94>)
 80197b6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80197ba:	491c      	ldr	r1, [pc, #112]	@ (801982c <tcp_rst+0xa0>)
 80197bc:	481a      	ldr	r0, [pc, #104]	@ (8019828 <tcp_rst+0x9c>)
 80197be:	f004 fbc3 	bl	801df48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80197c2:	2300      	movs	r3, #0
 80197c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80197c6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80197ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80197cc:	7dfb      	ldrb	r3, [r7, #23]
 80197ce:	b29c      	uxth	r4, r3
 80197d0:	68b8      	ldr	r0, [r7, #8]
 80197d2:	f7f9 f9c3 	bl	8012b5c <lwip_htonl>
 80197d6:	4602      	mov	r2, r0
 80197d8:	8abb      	ldrh	r3, [r7, #20]
 80197da:	9303      	str	r3, [sp, #12]
 80197dc:	2314      	movs	r3, #20
 80197de:	9302      	str	r3, [sp, #8]
 80197e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80197e2:	9301      	str	r3, [sp, #4]
 80197e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80197e6:	9300      	str	r3, [sp, #0]
 80197e8:	4613      	mov	r3, r2
 80197ea:	2200      	movs	r2, #0
 80197ec:	4621      	mov	r1, r4
 80197ee:	6878      	ldr	r0, [r7, #4]
 80197f0:	f7ff fe94 	bl	801951c <tcp_output_alloc_header_common>
 80197f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80197f6:	693b      	ldr	r3, [r7, #16]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d00c      	beq.n	8019816 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80197fc:	7dfb      	ldrb	r3, [r7, #23]
 80197fe:	2200      	movs	r2, #0
 8019800:	6939      	ldr	r1, [r7, #16]
 8019802:	68f8      	ldr	r0, [r7, #12]
 8019804:	f7ff ff3a 	bl	801967c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801980a:	683a      	ldr	r2, [r7, #0]
 801980c:	6939      	ldr	r1, [r7, #16]
 801980e:	68f8      	ldr	r0, [r7, #12]
 8019810:	f7ff ff72 	bl	80196f8 <tcp_output_control_segment>
 8019814:	e000      	b.n	8019818 <tcp_rst+0x8c>
    return;
 8019816:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019818:	371c      	adds	r7, #28
 801981a:	46bd      	mov	sp, r7
 801981c:	bd90      	pop	{r4, r7, pc}
 801981e:	bf00      	nop
 8019820:	08020858 	.word	0x08020858
 8019824:	08020fdc 	.word	0x08020fdc
 8019828:	080208ac 	.word	0x080208ac
 801982c:	08020ff8 	.word	0x08020ff8

08019830 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019830:	b590      	push	{r4, r7, lr}
 8019832:	b087      	sub	sp, #28
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019838:	2300      	movs	r3, #0
 801983a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801983c:	2300      	movs	r3, #0
 801983e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d106      	bne.n	8019854 <tcp_send_empty_ack+0x24>
 8019846:	4b28      	ldr	r3, [pc, #160]	@ (80198e8 <tcp_send_empty_ack+0xb8>)
 8019848:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801984c:	4927      	ldr	r1, [pc, #156]	@ (80198ec <tcp_send_empty_ack+0xbc>)
 801984e:	4828      	ldr	r0, [pc, #160]	@ (80198f0 <tcp_send_empty_ack+0xc0>)
 8019850:	f004 fb7a 	bl	801df48 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019854:	7dfb      	ldrb	r3, [r7, #23]
 8019856:	009b      	lsls	r3, r3, #2
 8019858:	b2db      	uxtb	r3, r3
 801985a:	f003 0304 	and.w	r3, r3, #4
 801985e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019860:	7d7b      	ldrb	r3, [r7, #21]
 8019862:	b29c      	uxth	r4, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019868:	4618      	mov	r0, r3
 801986a:	f7f9 f977 	bl	8012b5c <lwip_htonl>
 801986e:	4603      	mov	r3, r0
 8019870:	2200      	movs	r2, #0
 8019872:	4621      	mov	r1, r4
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	f7ff fec3 	bl	8019600 <tcp_output_alloc_header>
 801987a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d109      	bne.n	8019896 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	8b5b      	ldrh	r3, [r3, #26]
 8019886:	f043 0303 	orr.w	r3, r3, #3
 801988a:	b29a      	uxth	r2, r3
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019890:	f06f 0301 	mvn.w	r3, #1
 8019894:	e023      	b.n	80198de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019896:	7dbb      	ldrb	r3, [r7, #22]
 8019898:	7dfa      	ldrb	r2, [r7, #23]
 801989a:	6939      	ldr	r1, [r7, #16]
 801989c:	6878      	ldr	r0, [r7, #4]
 801989e:	f7ff feed 	bl	801967c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80198a2:	687a      	ldr	r2, [r7, #4]
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	3304      	adds	r3, #4
 80198a8:	6939      	ldr	r1, [r7, #16]
 80198aa:	6878      	ldr	r0, [r7, #4]
 80198ac:	f7ff ff24 	bl	80196f8 <tcp_output_control_segment>
 80198b0:	4603      	mov	r3, r0
 80198b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80198b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d007      	beq.n	80198cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	8b5b      	ldrh	r3, [r3, #26]
 80198c0:	f043 0303 	orr.w	r3, r3, #3
 80198c4:	b29a      	uxth	r2, r3
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	835a      	strh	r2, [r3, #26]
 80198ca:	e006      	b.n	80198da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	8b5b      	ldrh	r3, [r3, #26]
 80198d0:	f023 0303 	bic.w	r3, r3, #3
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80198da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80198de:	4618      	mov	r0, r3
 80198e0:	371c      	adds	r7, #28
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd90      	pop	{r4, r7, pc}
 80198e6:	bf00      	nop
 80198e8:	08020858 	.word	0x08020858
 80198ec:	08021014 	.word	0x08021014
 80198f0:	080208ac 	.word	0x080208ac

080198f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80198f4:	b590      	push	{r4, r7, lr}
 80198f6:	b087      	sub	sp, #28
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80198fc:	2300      	movs	r3, #0
 80198fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d106      	bne.n	8019914 <tcp_keepalive+0x20>
 8019906:	4b18      	ldr	r3, [pc, #96]	@ (8019968 <tcp_keepalive+0x74>)
 8019908:	f640 0224 	movw	r2, #2084	@ 0x824
 801990c:	4917      	ldr	r1, [pc, #92]	@ (801996c <tcp_keepalive+0x78>)
 801990e:	4818      	ldr	r0, [pc, #96]	@ (8019970 <tcp_keepalive+0x7c>)
 8019910:	f004 fb1a 	bl	801df48 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019914:	7dfb      	ldrb	r3, [r7, #23]
 8019916:	b29c      	uxth	r4, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801991c:	3b01      	subs	r3, #1
 801991e:	4618      	mov	r0, r3
 8019920:	f7f9 f91c 	bl	8012b5c <lwip_htonl>
 8019924:	4603      	mov	r3, r0
 8019926:	2200      	movs	r2, #0
 8019928:	4621      	mov	r1, r4
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7ff fe68 	bl	8019600 <tcp_output_alloc_header>
 8019930:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019932:	693b      	ldr	r3, [r7, #16]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d102      	bne.n	801993e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019938:	f04f 33ff 	mov.w	r3, #4294967295
 801993c:	e010      	b.n	8019960 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801993e:	7dfb      	ldrb	r3, [r7, #23]
 8019940:	2200      	movs	r2, #0
 8019942:	6939      	ldr	r1, [r7, #16]
 8019944:	6878      	ldr	r0, [r7, #4]
 8019946:	f7ff fe99 	bl	801967c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801994a:	687a      	ldr	r2, [r7, #4]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	3304      	adds	r3, #4
 8019950:	6939      	ldr	r1, [r7, #16]
 8019952:	6878      	ldr	r0, [r7, #4]
 8019954:	f7ff fed0 	bl	80196f8 <tcp_output_control_segment>
 8019958:	4603      	mov	r3, r0
 801995a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801995c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019960:	4618      	mov	r0, r3
 8019962:	371c      	adds	r7, #28
 8019964:	46bd      	mov	sp, r7
 8019966:	bd90      	pop	{r4, r7, pc}
 8019968:	08020858 	.word	0x08020858
 801996c:	08021034 	.word	0x08021034
 8019970:	080208ac 	.word	0x080208ac

08019974 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019974:	b590      	push	{r4, r7, lr}
 8019976:	b08b      	sub	sp, #44	@ 0x2c
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801997c:	2300      	movs	r3, #0
 801997e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d106      	bne.n	8019996 <tcp_zero_window_probe+0x22>
 8019988:	4b4c      	ldr	r3, [pc, #304]	@ (8019abc <tcp_zero_window_probe+0x148>)
 801998a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801998e:	494c      	ldr	r1, [pc, #304]	@ (8019ac0 <tcp_zero_window_probe+0x14c>)
 8019990:	484c      	ldr	r0, [pc, #304]	@ (8019ac4 <tcp_zero_window_probe+0x150>)
 8019992:	f004 fad9 	bl	801df48 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801999a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801999c:	6a3b      	ldr	r3, [r7, #32]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d101      	bne.n	80199a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80199a2:	2300      	movs	r3, #0
 80199a4:	e086      	b.n	8019ab4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80199ac:	2bff      	cmp	r3, #255	@ 0xff
 80199ae:	d007      	beq.n	80199c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80199b6:	3301      	adds	r3, #1
 80199b8:	b2da      	uxtb	r2, r3
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80199c0:	6a3b      	ldr	r3, [r7, #32]
 80199c2:	68db      	ldr	r3, [r3, #12]
 80199c4:	899b      	ldrh	r3, [r3, #12]
 80199c6:	b29b      	uxth	r3, r3
 80199c8:	4618      	mov	r0, r3
 80199ca:	f7f9 f8b1 	bl	8012b30 <lwip_htons>
 80199ce:	4603      	mov	r3, r0
 80199d0:	b2db      	uxtb	r3, r3
 80199d2:	f003 0301 	and.w	r3, r3, #1
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d005      	beq.n	80199e6 <tcp_zero_window_probe+0x72>
 80199da:	6a3b      	ldr	r3, [r7, #32]
 80199dc:	891b      	ldrh	r3, [r3, #8]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d101      	bne.n	80199e6 <tcp_zero_window_probe+0x72>
 80199e2:	2301      	movs	r3, #1
 80199e4:	e000      	b.n	80199e8 <tcp_zero_window_probe+0x74>
 80199e6:	2300      	movs	r3, #0
 80199e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80199ea:	7ffb      	ldrb	r3, [r7, #31]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	bf0c      	ite	eq
 80199f0:	2301      	moveq	r3, #1
 80199f2:	2300      	movne	r3, #0
 80199f4:	b2db      	uxtb	r3, r3
 80199f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80199f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199fc:	b299      	uxth	r1, r3
 80199fe:	6a3b      	ldr	r3, [r7, #32]
 8019a00:	68db      	ldr	r3, [r3, #12]
 8019a02:	685b      	ldr	r3, [r3, #4]
 8019a04:	8bba      	ldrh	r2, [r7, #28]
 8019a06:	6878      	ldr	r0, [r7, #4]
 8019a08:	f7ff fdfa 	bl	8019600 <tcp_output_alloc_header>
 8019a0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019a0e:	69bb      	ldr	r3, [r7, #24]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d102      	bne.n	8019a1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019a14:	f04f 33ff 	mov.w	r3, #4294967295
 8019a18:	e04c      	b.n	8019ab4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019a20:	7ffb      	ldrb	r3, [r7, #31]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d011      	beq.n	8019a4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	899b      	ldrh	r3, [r3, #12]
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	b21b      	sxth	r3, r3
 8019a2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019a32:	b21c      	sxth	r4, r3
 8019a34:	2011      	movs	r0, #17
 8019a36:	f7f9 f87b 	bl	8012b30 <lwip_htons>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	b21b      	sxth	r3, r3
 8019a3e:	4323      	orrs	r3, r4
 8019a40:	b21b      	sxth	r3, r3
 8019a42:	b29a      	uxth	r2, r3
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	819a      	strh	r2, [r3, #12]
 8019a48:	e010      	b.n	8019a6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019a4a:	69bb      	ldr	r3, [r7, #24]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	3314      	adds	r3, #20
 8019a50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019a52:	6a3b      	ldr	r3, [r7, #32]
 8019a54:	6858      	ldr	r0, [r3, #4]
 8019a56:	6a3b      	ldr	r3, [r7, #32]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	891a      	ldrh	r2, [r3, #8]
 8019a5c:	6a3b      	ldr	r3, [r7, #32]
 8019a5e:	891b      	ldrh	r3, [r3, #8]
 8019a60:	1ad3      	subs	r3, r2, r3
 8019a62:	b29b      	uxth	r3, r3
 8019a64:	2201      	movs	r2, #1
 8019a66:	6939      	ldr	r1, [r7, #16]
 8019a68:	f7fa fe56 	bl	8014718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019a6c:	6a3b      	ldr	r3, [r7, #32]
 8019a6e:	68db      	ldr	r3, [r3, #12]
 8019a70:	685b      	ldr	r3, [r3, #4]
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7f9 f872 	bl	8012b5c <lwip_htonl>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	3301      	adds	r3, #1
 8019a7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	1ad3      	subs	r3, r2, r3
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	da02      	bge.n	8019a90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	68fa      	ldr	r2, [r7, #12]
 8019a8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a94:	2200      	movs	r2, #0
 8019a96:	69b9      	ldr	r1, [r7, #24]
 8019a98:	6878      	ldr	r0, [r7, #4]
 8019a9a:	f7ff fdef 	bl	801967c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	3304      	adds	r3, #4
 8019aa4:	69b9      	ldr	r1, [r7, #24]
 8019aa6:	6878      	ldr	r0, [r7, #4]
 8019aa8:	f7ff fe26 	bl	80196f8 <tcp_output_control_segment>
 8019aac:	4603      	mov	r3, r0
 8019aae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019ab0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	372c      	adds	r7, #44	@ 0x2c
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd90      	pop	{r4, r7, pc}
 8019abc:	08020858 	.word	0x08020858
 8019ac0:	08021050 	.word	0x08021050
 8019ac4:	080208ac 	.word	0x080208ac

08019ac8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b082      	sub	sp, #8
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019ad0:	f7fa ff10 	bl	80148f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8019b00 <tcpip_tcp_timer+0x38>)
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d103      	bne.n	8019ae4 <tcpip_tcp_timer+0x1c>
 8019adc:	4b09      	ldr	r3, [pc, #36]	@ (8019b04 <tcpip_tcp_timer+0x3c>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d005      	beq.n	8019af0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	4908      	ldr	r1, [pc, #32]	@ (8019b08 <tcpip_tcp_timer+0x40>)
 8019ae8:	20fa      	movs	r0, #250	@ 0xfa
 8019aea:	f000 f8f3 	bl	8019cd4 <sys_timeout>
 8019aee:	e003      	b.n	8019af8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019af0:	4b06      	ldr	r3, [pc, #24]	@ (8019b0c <tcpip_tcp_timer+0x44>)
 8019af2:	2200      	movs	r2, #0
 8019af4:	601a      	str	r2, [r3, #0]
  }
}
 8019af6:	bf00      	nop
 8019af8:	bf00      	nop
 8019afa:	3708      	adds	r7, #8
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}
 8019b00:	2002763c 	.word	0x2002763c
 8019b04:	20027640 	.word	0x20027640
 8019b08:	08019ac9 	.word	0x08019ac9
 8019b0c:	20027688 	.word	0x20027688

08019b10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019b14:	4b0a      	ldr	r3, [pc, #40]	@ (8019b40 <tcp_timer_needed+0x30>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d10f      	bne.n	8019b3c <tcp_timer_needed+0x2c>
 8019b1c:	4b09      	ldr	r3, [pc, #36]	@ (8019b44 <tcp_timer_needed+0x34>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d103      	bne.n	8019b2c <tcp_timer_needed+0x1c>
 8019b24:	4b08      	ldr	r3, [pc, #32]	@ (8019b48 <tcp_timer_needed+0x38>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d007      	beq.n	8019b3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019b2c:	4b04      	ldr	r3, [pc, #16]	@ (8019b40 <tcp_timer_needed+0x30>)
 8019b2e:	2201      	movs	r2, #1
 8019b30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019b32:	2200      	movs	r2, #0
 8019b34:	4905      	ldr	r1, [pc, #20]	@ (8019b4c <tcp_timer_needed+0x3c>)
 8019b36:	20fa      	movs	r0, #250	@ 0xfa
 8019b38:	f000 f8cc 	bl	8019cd4 <sys_timeout>
  }
}
 8019b3c:	bf00      	nop
 8019b3e:	bd80      	pop	{r7, pc}
 8019b40:	20027688 	.word	0x20027688
 8019b44:	2002763c 	.word	0x2002763c
 8019b48:	20027640 	.word	0x20027640
 8019b4c:	08019ac9 	.word	0x08019ac9

08019b50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b086      	sub	sp, #24
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	60f8      	str	r0, [r7, #12]
 8019b58:	60b9      	str	r1, [r7, #8]
 8019b5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019b5c:	200a      	movs	r0, #10
 8019b5e:	f7f9 fcbb 	bl	80134d8 <memp_malloc>
 8019b62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d109      	bne.n	8019b7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019b6a:	693b      	ldr	r3, [r7, #16]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d151      	bne.n	8019c14 <sys_timeout_abs+0xc4>
 8019b70:	4b2a      	ldr	r3, [pc, #168]	@ (8019c1c <sys_timeout_abs+0xcc>)
 8019b72:	22be      	movs	r2, #190	@ 0xbe
 8019b74:	492a      	ldr	r1, [pc, #168]	@ (8019c20 <sys_timeout_abs+0xd0>)
 8019b76:	482b      	ldr	r0, [pc, #172]	@ (8019c24 <sys_timeout_abs+0xd4>)
 8019b78:	f004 f9e6 	bl	801df48 <iprintf>
    return;
 8019b7c:	e04a      	b.n	8019c14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019b7e:	693b      	ldr	r3, [r7, #16]
 8019b80:	2200      	movs	r2, #0
 8019b82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019b84:	693b      	ldr	r3, [r7, #16]
 8019b86:	68ba      	ldr	r2, [r7, #8]
 8019b88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019b8a:	693b      	ldr	r3, [r7, #16]
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019b90:	693b      	ldr	r3, [r7, #16]
 8019b92:	68fa      	ldr	r2, [r7, #12]
 8019b94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019b96:	4b24      	ldr	r3, [pc, #144]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d103      	bne.n	8019ba6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019b9e:	4a22      	ldr	r2, [pc, #136]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019ba0:	693b      	ldr	r3, [r7, #16]
 8019ba2:	6013      	str	r3, [r2, #0]
    return;
 8019ba4:	e037      	b.n	8019c16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	685a      	ldr	r2, [r3, #4]
 8019baa:	4b1f      	ldr	r3, [pc, #124]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	685b      	ldr	r3, [r3, #4]
 8019bb0:	1ad3      	subs	r3, r2, r3
 8019bb2:	0fdb      	lsrs	r3, r3, #31
 8019bb4:	f003 0301 	and.w	r3, r3, #1
 8019bb8:	b2db      	uxtb	r3, r3
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d007      	beq.n	8019bce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019bc0:	681a      	ldr	r2, [r3, #0]
 8019bc2:	693b      	ldr	r3, [r7, #16]
 8019bc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019bc6:	4a18      	ldr	r2, [pc, #96]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	6013      	str	r3, [r2, #0]
 8019bcc:	e023      	b.n	8019c16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019bce:	4b16      	ldr	r3, [pc, #88]	@ (8019c28 <sys_timeout_abs+0xd8>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	617b      	str	r3, [r7, #20]
 8019bd4:	e01a      	b.n	8019c0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d00b      	beq.n	8019bf6 <sys_timeout_abs+0xa6>
 8019bde:	693b      	ldr	r3, [r7, #16]
 8019be0:	685a      	ldr	r2, [r3, #4]
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	0fdb      	lsrs	r3, r3, #31
 8019bec:	f003 0301 	and.w	r3, r3, #1
 8019bf0:	b2db      	uxtb	r3, r3
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d007      	beq.n	8019c06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	681a      	ldr	r2, [r3, #0]
 8019bfa:	693b      	ldr	r3, [r7, #16]
 8019bfc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	693a      	ldr	r2, [r7, #16]
 8019c02:	601a      	str	r2, [r3, #0]
        break;
 8019c04:	e007      	b.n	8019c16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	617b      	str	r3, [r7, #20]
 8019c0c:	697b      	ldr	r3, [r7, #20]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d1e1      	bne.n	8019bd6 <sys_timeout_abs+0x86>
 8019c12:	e000      	b.n	8019c16 <sys_timeout_abs+0xc6>
    return;
 8019c14:	bf00      	nop
      }
    }
  }
}
 8019c16:	3718      	adds	r7, #24
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	bd80      	pop	{r7, pc}
 8019c1c:	08021074 	.word	0x08021074
 8019c20:	080210a8 	.word	0x080210a8
 8019c24:	080210e8 	.word	0x080210e8
 8019c28:	20027680 	.word	0x20027680

08019c2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b086      	sub	sp, #24
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	4798      	blx	r3

  now = sys_now();
 8019c3e:	f7f4 facf 	bl	800e1e0 <sys_now>
 8019c42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	681a      	ldr	r2, [r3, #0]
 8019c48:	4b0f      	ldr	r3, [pc, #60]	@ (8019c88 <lwip_cyclic_timer+0x5c>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4413      	add	r3, r2
 8019c4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019c50:	68fa      	ldr	r2, [r7, #12]
 8019c52:	693b      	ldr	r3, [r7, #16]
 8019c54:	1ad3      	subs	r3, r2, r3
 8019c56:	0fdb      	lsrs	r3, r3, #31
 8019c58:	f003 0301 	and.w	r3, r3, #1
 8019c5c:	b2db      	uxtb	r3, r3
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d009      	beq.n	8019c76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	681a      	ldr	r2, [r3, #0]
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	4413      	add	r3, r2
 8019c6a:	687a      	ldr	r2, [r7, #4]
 8019c6c:	4907      	ldr	r1, [pc, #28]	@ (8019c8c <lwip_cyclic_timer+0x60>)
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7ff ff6e 	bl	8019b50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019c74:	e004      	b.n	8019c80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019c76:	687a      	ldr	r2, [r7, #4]
 8019c78:	4904      	ldr	r1, [pc, #16]	@ (8019c8c <lwip_cyclic_timer+0x60>)
 8019c7a:	68f8      	ldr	r0, [r7, #12]
 8019c7c:	f7ff ff68 	bl	8019b50 <sys_timeout_abs>
}
 8019c80:	bf00      	nop
 8019c82:	3718      	adds	r7, #24
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	20027684 	.word	0x20027684
 8019c8c:	08019c2d 	.word	0x08019c2d

08019c90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019c96:	2301      	movs	r3, #1
 8019c98:	607b      	str	r3, [r7, #4]
 8019c9a:	e00e      	b.n	8019cba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8019ccc <sys_timeouts_init+0x3c>)
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	00db      	lsls	r3, r3, #3
 8019ca8:	4a08      	ldr	r2, [pc, #32]	@ (8019ccc <sys_timeouts_init+0x3c>)
 8019caa:	4413      	add	r3, r2
 8019cac:	461a      	mov	r2, r3
 8019cae:	4908      	ldr	r1, [pc, #32]	@ (8019cd0 <sys_timeouts_init+0x40>)
 8019cb0:	f000 f810 	bl	8019cd4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	607b      	str	r3, [r7, #4]
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2b02      	cmp	r3, #2
 8019cbe:	d9ed      	bls.n	8019c9c <sys_timeouts_init+0xc>
  }
}
 8019cc0:	bf00      	nop
 8019cc2:	bf00      	nop
 8019cc4:	3708      	adds	r7, #8
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}
 8019cca:	bf00      	nop
 8019ccc:	080222a8 	.word	0x080222a8
 8019cd0:	08019c2d 	.word	0x08019c2d

08019cd4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b086      	sub	sp, #24
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	60f8      	str	r0, [r7, #12]
 8019cdc:	60b9      	str	r1, [r7, #8]
 8019cde:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019ce6:	d306      	bcc.n	8019cf6 <sys_timeout+0x22>
 8019ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8019d14 <sys_timeout+0x40>)
 8019cea:	f240 1229 	movw	r2, #297	@ 0x129
 8019cee:	490a      	ldr	r1, [pc, #40]	@ (8019d18 <sys_timeout+0x44>)
 8019cf0:	480a      	ldr	r0, [pc, #40]	@ (8019d1c <sys_timeout+0x48>)
 8019cf2:	f004 f929 	bl	801df48 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019cf6:	f7f4 fa73 	bl	800e1e0 <sys_now>
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	4413      	add	r3, r2
 8019d00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019d02:	687a      	ldr	r2, [r7, #4]
 8019d04:	68b9      	ldr	r1, [r7, #8]
 8019d06:	6978      	ldr	r0, [r7, #20]
 8019d08:	f7ff ff22 	bl	8019b50 <sys_timeout_abs>
#endif
}
 8019d0c:	bf00      	nop
 8019d0e:	3718      	adds	r7, #24
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}
 8019d14:	08021074 	.word	0x08021074
 8019d18:	08021110 	.word	0x08021110
 8019d1c:	080210e8 	.word	0x080210e8

08019d20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b084      	sub	sp, #16
 8019d24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019d26:	f7f4 fa5b 	bl	800e1e0 <sys_now>
 8019d2a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019d2c:	4b17      	ldr	r3, [pc, #92]	@ (8019d8c <sys_check_timeouts+0x6c>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d022      	beq.n	8019d7e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	685b      	ldr	r3, [r3, #4]
 8019d3c:	68fa      	ldr	r2, [r7, #12]
 8019d3e:	1ad3      	subs	r3, r2, r3
 8019d40:	0fdb      	lsrs	r3, r3, #31
 8019d42:	f003 0301 	and.w	r3, r3, #1
 8019d46:	b2db      	uxtb	r3, r3
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d11a      	bne.n	8019d82 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4a0e      	ldr	r2, [pc, #56]	@ (8019d8c <sys_check_timeouts+0x6c>)
 8019d52:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	689b      	ldr	r3, [r3, #8]
 8019d58:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019d5a:	68bb      	ldr	r3, [r7, #8]
 8019d5c:	68db      	ldr	r3, [r3, #12]
 8019d5e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	4a0a      	ldr	r2, [pc, #40]	@ (8019d90 <sys_check_timeouts+0x70>)
 8019d66:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019d68:	68b9      	ldr	r1, [r7, #8]
 8019d6a:	200a      	movs	r0, #10
 8019d6c:	f7f9 fc2a 	bl	80135c4 <memp_free>
    if (handler != NULL) {
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d0da      	beq.n	8019d2c <sys_check_timeouts+0xc>
      handler(arg);
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6838      	ldr	r0, [r7, #0]
 8019d7a:	4798      	blx	r3
  do {
 8019d7c:	e7d6      	b.n	8019d2c <sys_check_timeouts+0xc>
      return;
 8019d7e:	bf00      	nop
 8019d80:	e000      	b.n	8019d84 <sys_check_timeouts+0x64>
      return;
 8019d82:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019d84:	3710      	adds	r7, #16
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20027680 	.word	0x20027680
 8019d90:	20027684 	.word	0x20027684

08019d94 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019d9a:	4b16      	ldr	r3, [pc, #88]	@ (8019df4 <sys_timeouts_sleeptime+0x60>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d102      	bne.n	8019da8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019da2:	f04f 33ff 	mov.w	r3, #4294967295
 8019da6:	e020      	b.n	8019dea <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019da8:	f7f4 fa1a 	bl	800e1e0 <sys_now>
 8019dac:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019dae:	4b11      	ldr	r3, [pc, #68]	@ (8019df4 <sys_timeouts_sleeptime+0x60>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	685a      	ldr	r2, [r3, #4]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	1ad3      	subs	r3, r2, r3
 8019db8:	0fdb      	lsrs	r3, r3, #31
 8019dba:	f003 0301 	and.w	r3, r3, #1
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d001      	beq.n	8019dc8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	e010      	b.n	8019dea <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8019df4 <sys_timeouts_sleeptime+0x60>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	685a      	ldr	r2, [r3, #4]
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	1ad3      	subs	r3, r2, r3
 8019dd2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	da06      	bge.n	8019de8 <sys_timeouts_sleeptime+0x54>
 8019dda:	4b07      	ldr	r3, [pc, #28]	@ (8019df8 <sys_timeouts_sleeptime+0x64>)
 8019ddc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019de0:	4906      	ldr	r1, [pc, #24]	@ (8019dfc <sys_timeouts_sleeptime+0x68>)
 8019de2:	4807      	ldr	r0, [pc, #28]	@ (8019e00 <sys_timeouts_sleeptime+0x6c>)
 8019de4:	f004 f8b0 	bl	801df48 <iprintf>
    return ret;
 8019de8:	683b      	ldr	r3, [r7, #0]
  }
}
 8019dea:	4618      	mov	r0, r3
 8019dec:	3708      	adds	r7, #8
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}
 8019df2:	bf00      	nop
 8019df4:	20027680 	.word	0x20027680
 8019df8:	08021074 	.word	0x08021074
 8019dfc:	08021148 	.word	0x08021148
 8019e00:	080210e8 	.word	0x080210e8

08019e04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019e08:	f003 ff9e 	bl	801dd48 <rand>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8019e1a:	b29a      	uxth	r2, r3
 8019e1c:	4b01      	ldr	r3, [pc, #4]	@ (8019e24 <udp_init+0x20>)
 8019e1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019e20:	bf00      	nop
 8019e22:	bd80      	pop	{r7, pc}
 8019e24:	2000002c 	.word	0x2000002c

08019e28 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019e28:	b480      	push	{r7}
 8019e2a:	b083      	sub	sp, #12
 8019e2c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019e32:	4b17      	ldr	r3, [pc, #92]	@ (8019e90 <udp_new_port+0x68>)
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	1c5a      	adds	r2, r3, #1
 8019e38:	b291      	uxth	r1, r2
 8019e3a:	4a15      	ldr	r2, [pc, #84]	@ (8019e90 <udp_new_port+0x68>)
 8019e3c:	8011      	strh	r1, [r2, #0]
 8019e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019e42:	4293      	cmp	r3, r2
 8019e44:	d103      	bne.n	8019e4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019e46:	4b12      	ldr	r3, [pc, #72]	@ (8019e90 <udp_new_port+0x68>)
 8019e48:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8019e4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019e4e:	4b11      	ldr	r3, [pc, #68]	@ (8019e94 <udp_new_port+0x6c>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	603b      	str	r3, [r7, #0]
 8019e54:	e011      	b.n	8019e7a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	8a5a      	ldrh	r2, [r3, #18]
 8019e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8019e90 <udp_new_port+0x68>)
 8019e5c:	881b      	ldrh	r3, [r3, #0]
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	d108      	bne.n	8019e74 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019e62:	88fb      	ldrh	r3, [r7, #6]
 8019e64:	3301      	adds	r3, #1
 8019e66:	80fb      	strh	r3, [r7, #6]
 8019e68:	88fb      	ldrh	r3, [r7, #6]
 8019e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019e6e:	d3e0      	bcc.n	8019e32 <udp_new_port+0xa>
        return 0;
 8019e70:	2300      	movs	r3, #0
 8019e72:	e007      	b.n	8019e84 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	68db      	ldr	r3, [r3, #12]
 8019e78:	603b      	str	r3, [r7, #0]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d1ea      	bne.n	8019e56 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019e80:	4b03      	ldr	r3, [pc, #12]	@ (8019e90 <udp_new_port+0x68>)
 8019e82:	881b      	ldrh	r3, [r3, #0]
}
 8019e84:	4618      	mov	r0, r3
 8019e86:	370c      	adds	r7, #12
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8e:	4770      	bx	lr
 8019e90:	2000002c 	.word	0x2000002c
 8019e94:	2002768c 	.word	0x2002768c

08019e98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b084      	sub	sp, #16
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	60f8      	str	r0, [r7, #12]
 8019ea0:	60b9      	str	r1, [r7, #8]
 8019ea2:	4613      	mov	r3, r2
 8019ea4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d105      	bne.n	8019eb8 <udp_input_local_match+0x20>
 8019eac:	4b27      	ldr	r3, [pc, #156]	@ (8019f4c <udp_input_local_match+0xb4>)
 8019eae:	2287      	movs	r2, #135	@ 0x87
 8019eb0:	4927      	ldr	r1, [pc, #156]	@ (8019f50 <udp_input_local_match+0xb8>)
 8019eb2:	4828      	ldr	r0, [pc, #160]	@ (8019f54 <udp_input_local_match+0xbc>)
 8019eb4:	f004 f848 	bl	801df48 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d105      	bne.n	8019eca <udp_input_local_match+0x32>
 8019ebe:	4b23      	ldr	r3, [pc, #140]	@ (8019f4c <udp_input_local_match+0xb4>)
 8019ec0:	2288      	movs	r2, #136	@ 0x88
 8019ec2:	4925      	ldr	r1, [pc, #148]	@ (8019f58 <udp_input_local_match+0xc0>)
 8019ec4:	4823      	ldr	r0, [pc, #140]	@ (8019f54 <udp_input_local_match+0xbc>)
 8019ec6:	f004 f83f 	bl	801df48 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	7a1b      	ldrb	r3, [r3, #8]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d00b      	beq.n	8019eea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	7a1a      	ldrb	r2, [r3, #8]
 8019ed6:	4b21      	ldr	r3, [pc, #132]	@ (8019f5c <udp_input_local_match+0xc4>)
 8019ed8:	685b      	ldr	r3, [r3, #4]
 8019eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019ede:	3301      	adds	r3, #1
 8019ee0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019ee2:	429a      	cmp	r2, r3
 8019ee4:	d001      	beq.n	8019eea <udp_input_local_match+0x52>
    return 0;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	e02b      	b.n	8019f42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019eea:	79fb      	ldrb	r3, [r7, #7]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d018      	beq.n	8019f22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d013      	beq.n	8019f1e <udp_input_local_match+0x86>
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d00f      	beq.n	8019f1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019efe:	4b17      	ldr	r3, [pc, #92]	@ (8019f5c <udp_input_local_match+0xc4>)
 8019f00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f06:	d00a      	beq.n	8019f1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	681a      	ldr	r2, [r3, #0]
 8019f0c:	4b13      	ldr	r3, [pc, #76]	@ (8019f5c <udp_input_local_match+0xc4>)
 8019f0e:	695b      	ldr	r3, [r3, #20]
 8019f10:	405a      	eors	r2, r3
 8019f12:	68bb      	ldr	r3, [r7, #8]
 8019f14:	3308      	adds	r3, #8
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d110      	bne.n	8019f40 <udp_input_local_match+0xa8>
          return 1;
 8019f1e:	2301      	movs	r3, #1
 8019f20:	e00f      	b.n	8019f42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d009      	beq.n	8019f3c <udp_input_local_match+0xa4>
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d005      	beq.n	8019f3c <udp_input_local_match+0xa4>
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	681a      	ldr	r2, [r3, #0]
 8019f34:	4b09      	ldr	r3, [pc, #36]	@ (8019f5c <udp_input_local_match+0xc4>)
 8019f36:	695b      	ldr	r3, [r3, #20]
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d101      	bne.n	8019f40 <udp_input_local_match+0xa8>
        return 1;
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	e000      	b.n	8019f42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019f40:	2300      	movs	r3, #0
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	3710      	adds	r7, #16
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}
 8019f4a:	bf00      	nop
 8019f4c:	0802115c 	.word	0x0802115c
 8019f50:	0802118c 	.word	0x0802118c
 8019f54:	080211b0 	.word	0x080211b0
 8019f58:	080211d8 	.word	0x080211d8
 8019f5c:	20024530 	.word	0x20024530

08019f60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019f60:	b590      	push	{r4, r7, lr}
 8019f62:	b08d      	sub	sp, #52	@ 0x34
 8019f64:	af02      	add	r7, sp, #8
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d105      	bne.n	8019f80 <udp_input+0x20>
 8019f74:	4b7c      	ldr	r3, [pc, #496]	@ (801a168 <udp_input+0x208>)
 8019f76:	22cf      	movs	r2, #207	@ 0xcf
 8019f78:	497c      	ldr	r1, [pc, #496]	@ (801a16c <udp_input+0x20c>)
 8019f7a:	487d      	ldr	r0, [pc, #500]	@ (801a170 <udp_input+0x210>)
 8019f7c:	f003 ffe4 	bl	801df48 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d105      	bne.n	8019f92 <udp_input+0x32>
 8019f86:	4b78      	ldr	r3, [pc, #480]	@ (801a168 <udp_input+0x208>)
 8019f88:	22d0      	movs	r2, #208	@ 0xd0
 8019f8a:	497a      	ldr	r1, [pc, #488]	@ (801a174 <udp_input+0x214>)
 8019f8c:	4878      	ldr	r0, [pc, #480]	@ (801a170 <udp_input+0x210>)
 8019f8e:	f003 ffdb 	bl	801df48 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	895b      	ldrh	r3, [r3, #10]
 8019f96:	2b07      	cmp	r3, #7
 8019f98:	d803      	bhi.n	8019fa2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019f9a:	6878      	ldr	r0, [r7, #4]
 8019f9c:	f7fa f9b6 	bl	801430c <pbuf_free>
    goto end;
 8019fa0:	e0de      	b.n	801a160 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019fa8:	4b73      	ldr	r3, [pc, #460]	@ (801a178 <udp_input+0x218>)
 8019faa:	695b      	ldr	r3, [r3, #20]
 8019fac:	4a72      	ldr	r2, [pc, #456]	@ (801a178 <udp_input+0x218>)
 8019fae:	6812      	ldr	r2, [r2, #0]
 8019fb0:	4611      	mov	r1, r2
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f001 fefe 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019fbc:	697b      	ldr	r3, [r7, #20]
 8019fbe:	881b      	ldrh	r3, [r3, #0]
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7f8 fdb4 	bl	8012b30 <lwip_htons>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	885b      	ldrh	r3, [r3, #2]
 8019fd0:	b29b      	uxth	r3, r3
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f7f8 fdac 	bl	8012b30 <lwip_htons>
 8019fd8:	4603      	mov	r3, r0
 8019fda:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019fe8:	4b64      	ldr	r3, [pc, #400]	@ (801a17c <udp_input+0x21c>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8019fee:	e054      	b.n	801a09a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ff2:	8a5b      	ldrh	r3, [r3, #18]
 8019ff4:	89fa      	ldrh	r2, [r7, #14]
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d14a      	bne.n	801a090 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019ffa:	7cfb      	ldrb	r3, [r7, #19]
 8019ffc:	461a      	mov	r2, r3
 8019ffe:	6839      	ldr	r1, [r7, #0]
 801a000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a002:	f7ff ff49 	bl	8019e98 <udp_input_local_match>
 801a006:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d041      	beq.n	801a090 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a00e:	7c1b      	ldrb	r3, [r3, #16]
 801a010:	f003 0304 	and.w	r3, r3, #4
 801a014:	2b00      	cmp	r3, #0
 801a016:	d11d      	bne.n	801a054 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d102      	bne.n	801a024 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a020:	61fb      	str	r3, [r7, #28]
 801a022:	e017      	b.n	801a054 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a024:	7cfb      	ldrb	r3, [r7, #19]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d014      	beq.n	801a054 <udp_input+0xf4>
 801a02a:	4b53      	ldr	r3, [pc, #332]	@ (801a178 <udp_input+0x218>)
 801a02c:	695b      	ldr	r3, [r3, #20]
 801a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a032:	d10f      	bne.n	801a054 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a034:	69fb      	ldr	r3, [r7, #28]
 801a036:	681a      	ldr	r2, [r3, #0]
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	3304      	adds	r3, #4
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	429a      	cmp	r2, r3
 801a040:	d008      	beq.n	801a054 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a044:	681a      	ldr	r2, [r3, #0]
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	3304      	adds	r3, #4
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d101      	bne.n	801a054 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a052:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a056:	8a9b      	ldrh	r3, [r3, #20]
 801a058:	8a3a      	ldrh	r2, [r7, #16]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d118      	bne.n	801a090 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a060:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a062:	2b00      	cmp	r3, #0
 801a064:	d005      	beq.n	801a072 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a068:	685a      	ldr	r2, [r3, #4]
 801a06a:	4b43      	ldr	r3, [pc, #268]	@ (801a178 <udp_input+0x218>)
 801a06c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a06e:	429a      	cmp	r2, r3
 801a070:	d10e      	bne.n	801a090 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a072:	6a3b      	ldr	r3, [r7, #32]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d014      	beq.n	801a0a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a07a:	68da      	ldr	r2, [r3, #12]
 801a07c:	6a3b      	ldr	r3, [r7, #32]
 801a07e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a080:	4b3e      	ldr	r3, [pc, #248]	@ (801a17c <udp_input+0x21c>)
 801a082:	681a      	ldr	r2, [r3, #0]
 801a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a086:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a088:	4a3c      	ldr	r2, [pc, #240]	@ (801a17c <udp_input+0x21c>)
 801a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a08c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a08e:	e008      	b.n	801a0a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a092:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a096:	68db      	ldr	r3, [r3, #12]
 801a098:	627b      	str	r3, [r7, #36]	@ 0x24
 801a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d1a7      	bne.n	8019ff0 <udp_input+0x90>
 801a0a0:	e000      	b.n	801a0a4 <udp_input+0x144>
        break;
 801a0a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d101      	bne.n	801a0ae <udp_input+0x14e>
    pcb = uncon_pcb;
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d002      	beq.n	801a0ba <udp_input+0x15a>
    for_us = 1;
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	76fb      	strb	r3, [r7, #27]
 801a0b8:	e00a      	b.n	801a0d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	3304      	adds	r3, #4
 801a0be:	681a      	ldr	r2, [r3, #0]
 801a0c0:	4b2d      	ldr	r3, [pc, #180]	@ (801a178 <udp_input+0x218>)
 801a0c2:	695b      	ldr	r3, [r3, #20]
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	bf0c      	ite	eq
 801a0c8:	2301      	moveq	r3, #1
 801a0ca:	2300      	movne	r3, #0
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a0d0:	7efb      	ldrb	r3, [r7, #27]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d041      	beq.n	801a15a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a0d6:	2108      	movs	r1, #8
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	f7fa f891 	bl	8014200 <pbuf_remove_header>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d00a      	beq.n	801a0fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a0e4:	4b20      	ldr	r3, [pc, #128]	@ (801a168 <udp_input+0x208>)
 801a0e6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a0ea:	4925      	ldr	r1, [pc, #148]	@ (801a180 <udp_input+0x220>)
 801a0ec:	4820      	ldr	r0, [pc, #128]	@ (801a170 <udp_input+0x210>)
 801a0ee:	f003 ff2b 	bl	801df48 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a0f2:	6878      	ldr	r0, [r7, #4]
 801a0f4:	f7fa f90a 	bl	801430c <pbuf_free>
      goto end;
 801a0f8:	e032      	b.n	801a160 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d012      	beq.n	801a126 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a102:	699b      	ldr	r3, [r3, #24]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d00a      	beq.n	801a11e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a10a:	699c      	ldr	r4, [r3, #24]
 801a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a10e:	69d8      	ldr	r0, [r3, #28]
 801a110:	8a3b      	ldrh	r3, [r7, #16]
 801a112:	9300      	str	r3, [sp, #0]
 801a114:	4b1b      	ldr	r3, [pc, #108]	@ (801a184 <udp_input+0x224>)
 801a116:	687a      	ldr	r2, [r7, #4]
 801a118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a11a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a11c:	e021      	b.n	801a162 <udp_input+0x202>
        pbuf_free(p);
 801a11e:	6878      	ldr	r0, [r7, #4]
 801a120:	f7fa f8f4 	bl	801430c <pbuf_free>
        goto end;
 801a124:	e01c      	b.n	801a160 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a126:	7cfb      	ldrb	r3, [r7, #19]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d112      	bne.n	801a152 <udp_input+0x1f2>
 801a12c:	4b12      	ldr	r3, [pc, #72]	@ (801a178 <udp_input+0x218>)
 801a12e:	695b      	ldr	r3, [r3, #20]
 801a130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a134:	2be0      	cmp	r3, #224	@ 0xe0
 801a136:	d00c      	beq.n	801a152 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a138:	4b0f      	ldr	r3, [pc, #60]	@ (801a178 <udp_input+0x218>)
 801a13a:	899b      	ldrh	r3, [r3, #12]
 801a13c:	3308      	adds	r3, #8
 801a13e:	b29b      	uxth	r3, r3
 801a140:	b21b      	sxth	r3, r3
 801a142:	4619      	mov	r1, r3
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	f7fa f8ce 	bl	80142e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a14a:	2103      	movs	r1, #3
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	f001 fb11 	bl	801b774 <icmp_dest_unreach>
      pbuf_free(p);
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f7fa f8da 	bl	801430c <pbuf_free>
  return;
 801a158:	e003      	b.n	801a162 <udp_input+0x202>
    pbuf_free(p);
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f7fa f8d6 	bl	801430c <pbuf_free>
  return;
 801a160:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a162:	372c      	adds	r7, #44	@ 0x2c
 801a164:	46bd      	mov	sp, r7
 801a166:	bd90      	pop	{r4, r7, pc}
 801a168:	0802115c 	.word	0x0802115c
 801a16c:	08021200 	.word	0x08021200
 801a170:	080211b0 	.word	0x080211b0
 801a174:	08021218 	.word	0x08021218
 801a178:	20024530 	.word	0x20024530
 801a17c:	2002768c 	.word	0x2002768c
 801a180:	08021234 	.word	0x08021234
 801a184:	20024540 	.word	0x20024540

0801a188 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b088      	sub	sp, #32
 801a18c:	af02      	add	r7, sp, #8
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
 801a194:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d109      	bne.n	801a1b0 <udp_sendto+0x28>
 801a19c:	4b23      	ldr	r3, [pc, #140]	@ (801a22c <udp_sendto+0xa4>)
 801a19e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a1a2:	4923      	ldr	r1, [pc, #140]	@ (801a230 <udp_sendto+0xa8>)
 801a1a4:	4823      	ldr	r0, [pc, #140]	@ (801a234 <udp_sendto+0xac>)
 801a1a6:	f003 fecf 	bl	801df48 <iprintf>
 801a1aa:	f06f 030f 	mvn.w	r3, #15
 801a1ae:	e038      	b.n	801a222 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a1b0:	68bb      	ldr	r3, [r7, #8]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d109      	bne.n	801a1ca <udp_sendto+0x42>
 801a1b6:	4b1d      	ldr	r3, [pc, #116]	@ (801a22c <udp_sendto+0xa4>)
 801a1b8:	f240 2219 	movw	r2, #537	@ 0x219
 801a1bc:	491e      	ldr	r1, [pc, #120]	@ (801a238 <udp_sendto+0xb0>)
 801a1be:	481d      	ldr	r0, [pc, #116]	@ (801a234 <udp_sendto+0xac>)
 801a1c0:	f003 fec2 	bl	801df48 <iprintf>
 801a1c4:	f06f 030f 	mvn.w	r3, #15
 801a1c8:	e02b      	b.n	801a222 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d109      	bne.n	801a1e4 <udp_sendto+0x5c>
 801a1d0:	4b16      	ldr	r3, [pc, #88]	@ (801a22c <udp_sendto+0xa4>)
 801a1d2:	f240 221a 	movw	r2, #538	@ 0x21a
 801a1d6:	4919      	ldr	r1, [pc, #100]	@ (801a23c <udp_sendto+0xb4>)
 801a1d8:	4816      	ldr	r0, [pc, #88]	@ (801a234 <udp_sendto+0xac>)
 801a1da:	f003 feb5 	bl	801df48 <iprintf>
 801a1de:	f06f 030f 	mvn.w	r3, #15
 801a1e2:	e01e      	b.n	801a222 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	7a1b      	ldrb	r3, [r3, #8]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d006      	beq.n	801a1fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	7a1b      	ldrb	r3, [r3, #8]
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7f9 fcfd 	bl	8013bf0 <netif_get_by_index>
 801a1f6:	6178      	str	r0, [r7, #20]
 801a1f8:	e003      	b.n	801a202 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f001 fb44 	bl	801b888 <ip4_route>
 801a200:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a202:	697b      	ldr	r3, [r7, #20]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d102      	bne.n	801a20e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a208:	f06f 0303 	mvn.w	r3, #3
 801a20c:	e009      	b.n	801a222 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a20e:	887a      	ldrh	r2, [r7, #2]
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	9300      	str	r3, [sp, #0]
 801a214:	4613      	mov	r3, r2
 801a216:	687a      	ldr	r2, [r7, #4]
 801a218:	68b9      	ldr	r1, [r7, #8]
 801a21a:	68f8      	ldr	r0, [r7, #12]
 801a21c:	f000 f810 	bl	801a240 <udp_sendto_if>
 801a220:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a222:	4618      	mov	r0, r3
 801a224:	3718      	adds	r7, #24
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	0802115c 	.word	0x0802115c
 801a230:	08021280 	.word	0x08021280
 801a234:	080211b0 	.word	0x080211b0
 801a238:	08021298 	.word	0x08021298
 801a23c:	080212b4 	.word	0x080212b4

0801a240 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b088      	sub	sp, #32
 801a244:	af02      	add	r7, sp, #8
 801a246:	60f8      	str	r0, [r7, #12]
 801a248:	60b9      	str	r1, [r7, #8]
 801a24a:	607a      	str	r2, [r7, #4]
 801a24c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d109      	bne.n	801a268 <udp_sendto_if+0x28>
 801a254:	4b2e      	ldr	r3, [pc, #184]	@ (801a310 <udp_sendto_if+0xd0>)
 801a256:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a25a:	492e      	ldr	r1, [pc, #184]	@ (801a314 <udp_sendto_if+0xd4>)
 801a25c:	482e      	ldr	r0, [pc, #184]	@ (801a318 <udp_sendto_if+0xd8>)
 801a25e:	f003 fe73 	bl	801df48 <iprintf>
 801a262:	f06f 030f 	mvn.w	r3, #15
 801a266:	e04f      	b.n	801a308 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d109      	bne.n	801a282 <udp_sendto_if+0x42>
 801a26e:	4b28      	ldr	r3, [pc, #160]	@ (801a310 <udp_sendto_if+0xd0>)
 801a270:	f240 2281 	movw	r2, #641	@ 0x281
 801a274:	4929      	ldr	r1, [pc, #164]	@ (801a31c <udp_sendto_if+0xdc>)
 801a276:	4828      	ldr	r0, [pc, #160]	@ (801a318 <udp_sendto_if+0xd8>)
 801a278:	f003 fe66 	bl	801df48 <iprintf>
 801a27c:	f06f 030f 	mvn.w	r3, #15
 801a280:	e042      	b.n	801a308 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d109      	bne.n	801a29c <udp_sendto_if+0x5c>
 801a288:	4b21      	ldr	r3, [pc, #132]	@ (801a310 <udp_sendto_if+0xd0>)
 801a28a:	f240 2282 	movw	r2, #642	@ 0x282
 801a28e:	4924      	ldr	r1, [pc, #144]	@ (801a320 <udp_sendto_if+0xe0>)
 801a290:	4821      	ldr	r0, [pc, #132]	@ (801a318 <udp_sendto_if+0xd8>)
 801a292:	f003 fe59 	bl	801df48 <iprintf>
 801a296:	f06f 030f 	mvn.w	r3, #15
 801a29a:	e035      	b.n	801a308 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a29c:	6a3b      	ldr	r3, [r7, #32]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d109      	bne.n	801a2b6 <udp_sendto_if+0x76>
 801a2a2:	4b1b      	ldr	r3, [pc, #108]	@ (801a310 <udp_sendto_if+0xd0>)
 801a2a4:	f240 2283 	movw	r2, #643	@ 0x283
 801a2a8:	491e      	ldr	r1, [pc, #120]	@ (801a324 <udp_sendto_if+0xe4>)
 801a2aa:	481b      	ldr	r0, [pc, #108]	@ (801a318 <udp_sendto_if+0xd8>)
 801a2ac:	f003 fe4c 	bl	801df48 <iprintf>
 801a2b0:	f06f 030f 	mvn.w	r3, #15
 801a2b4:	e028      	b.n	801a308 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d009      	beq.n	801a2d0 <udp_sendto_if+0x90>
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d005      	beq.n	801a2d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a2cc:	2be0      	cmp	r3, #224	@ 0xe0
 801a2ce:	d103      	bne.n	801a2d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a2d0:	6a3b      	ldr	r3, [r7, #32]
 801a2d2:	3304      	adds	r3, #4
 801a2d4:	617b      	str	r3, [r7, #20]
 801a2d6:	e00b      	b.n	801a2f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	681a      	ldr	r2, [r3, #0]
 801a2dc:	6a3b      	ldr	r3, [r7, #32]
 801a2de:	3304      	adds	r3, #4
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	d002      	beq.n	801a2ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a2e6:	f06f 0303 	mvn.w	r3, #3
 801a2ea:	e00d      	b.n	801a308 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a2f0:	887a      	ldrh	r2, [r7, #2]
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	9301      	str	r3, [sp, #4]
 801a2f6:	6a3b      	ldr	r3, [r7, #32]
 801a2f8:	9300      	str	r3, [sp, #0]
 801a2fa:	4613      	mov	r3, r2
 801a2fc:	687a      	ldr	r2, [r7, #4]
 801a2fe:	68b9      	ldr	r1, [r7, #8]
 801a300:	68f8      	ldr	r0, [r7, #12]
 801a302:	f000 f811 	bl	801a328 <udp_sendto_if_src>
 801a306:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3718      	adds	r7, #24
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	0802115c 	.word	0x0802115c
 801a314:	080212d0 	.word	0x080212d0
 801a318:	080211b0 	.word	0x080211b0
 801a31c:	080212ec 	.word	0x080212ec
 801a320:	08021308 	.word	0x08021308
 801a324:	08021328 	.word	0x08021328

0801a328 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b08c      	sub	sp, #48	@ 0x30
 801a32c:	af04      	add	r7, sp, #16
 801a32e:	60f8      	str	r0, [r7, #12]
 801a330:	60b9      	str	r1, [r7, #8]
 801a332:	607a      	str	r2, [r7, #4]
 801a334:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d109      	bne.n	801a350 <udp_sendto_if_src+0x28>
 801a33c:	4b65      	ldr	r3, [pc, #404]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a33e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801a342:	4965      	ldr	r1, [pc, #404]	@ (801a4d8 <udp_sendto_if_src+0x1b0>)
 801a344:	4865      	ldr	r0, [pc, #404]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a346:	f003 fdff 	bl	801df48 <iprintf>
 801a34a:	f06f 030f 	mvn.w	r3, #15
 801a34e:	e0bc      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d109      	bne.n	801a36a <udp_sendto_if_src+0x42>
 801a356:	4b5f      	ldr	r3, [pc, #380]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a358:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801a35c:	4960      	ldr	r1, [pc, #384]	@ (801a4e0 <udp_sendto_if_src+0x1b8>)
 801a35e:	485f      	ldr	r0, [pc, #380]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a360:	f003 fdf2 	bl	801df48 <iprintf>
 801a364:	f06f 030f 	mvn.w	r3, #15
 801a368:	e0af      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d109      	bne.n	801a384 <udp_sendto_if_src+0x5c>
 801a370:	4b58      	ldr	r3, [pc, #352]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a372:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a376:	495b      	ldr	r1, [pc, #364]	@ (801a4e4 <udp_sendto_if_src+0x1bc>)
 801a378:	4858      	ldr	r0, [pc, #352]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a37a:	f003 fde5 	bl	801df48 <iprintf>
 801a37e:	f06f 030f 	mvn.w	r3, #15
 801a382:	e0a2      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a386:	2b00      	cmp	r3, #0
 801a388:	d109      	bne.n	801a39e <udp_sendto_if_src+0x76>
 801a38a:	4b52      	ldr	r3, [pc, #328]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a38c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801a390:	4955      	ldr	r1, [pc, #340]	@ (801a4e8 <udp_sendto_if_src+0x1c0>)
 801a392:	4852      	ldr	r0, [pc, #328]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a394:	f003 fdd8 	bl	801df48 <iprintf>
 801a398:	f06f 030f 	mvn.w	r3, #15
 801a39c:	e095      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d109      	bne.n	801a3b8 <udp_sendto_if_src+0x90>
 801a3a4:	4b4b      	ldr	r3, [pc, #300]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a3a6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801a3aa:	4950      	ldr	r1, [pc, #320]	@ (801a4ec <udp_sendto_if_src+0x1c4>)
 801a3ac:	484b      	ldr	r0, [pc, #300]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a3ae:	f003 fdcb 	bl	801df48 <iprintf>
 801a3b2:	f06f 030f 	mvn.w	r3, #15
 801a3b6:	e088      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	8a5b      	ldrh	r3, [r3, #18]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d10f      	bne.n	801a3e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a3c0:	68f9      	ldr	r1, [r7, #12]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	8a5b      	ldrh	r3, [r3, #18]
 801a3c6:	461a      	mov	r2, r3
 801a3c8:	68f8      	ldr	r0, [r7, #12]
 801a3ca:	f000 f893 	bl	801a4f4 <udp_bind>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a3d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d002      	beq.n	801a3e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a3da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a3de:	e074      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	891b      	ldrh	r3, [r3, #8]
 801a3e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a3e8:	4293      	cmp	r3, r2
 801a3ea:	d902      	bls.n	801a3f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a3ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f0:	e06b      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a3f2:	2108      	movs	r1, #8
 801a3f4:	68b8      	ldr	r0, [r7, #8]
 801a3f6:	f7f9 fef3 	bl	80141e0 <pbuf_add_header>
 801a3fa:	4603      	mov	r3, r0
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d015      	beq.n	801a42c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a400:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a404:	2108      	movs	r1, #8
 801a406:	2022      	movs	r0, #34	@ 0x22
 801a408:	f7f9 fc9c 	bl	8013d44 <pbuf_alloc>
 801a40c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d102      	bne.n	801a41a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a414:	f04f 33ff 	mov.w	r3, #4294967295
 801a418:	e057      	b.n	801a4ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	891b      	ldrh	r3, [r3, #8]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d006      	beq.n	801a430 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a422:	68b9      	ldr	r1, [r7, #8]
 801a424:	69f8      	ldr	r0, [r7, #28]
 801a426:	f7fa f895 	bl	8014554 <pbuf_chain>
 801a42a:	e001      	b.n	801a430 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a430:	69fb      	ldr	r3, [r7, #28]
 801a432:	895b      	ldrh	r3, [r3, #10]
 801a434:	2b07      	cmp	r3, #7
 801a436:	d806      	bhi.n	801a446 <udp_sendto_if_src+0x11e>
 801a438:	4b26      	ldr	r3, [pc, #152]	@ (801a4d4 <udp_sendto_if_src+0x1ac>)
 801a43a:	f240 320d 	movw	r2, #781	@ 0x30d
 801a43e:	492c      	ldr	r1, [pc, #176]	@ (801a4f0 <udp_sendto_if_src+0x1c8>)
 801a440:	4826      	ldr	r0, [pc, #152]	@ (801a4dc <udp_sendto_if_src+0x1b4>)
 801a442:	f003 fd81 	bl	801df48 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a446:	69fb      	ldr	r3, [r7, #28]
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	8a5b      	ldrh	r3, [r3, #18]
 801a450:	4618      	mov	r0, r3
 801a452:	f7f8 fb6d 	bl	8012b30 <lwip_htons>
 801a456:	4603      	mov	r3, r0
 801a458:	461a      	mov	r2, r3
 801a45a:	697b      	ldr	r3, [r7, #20]
 801a45c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a45e:	887b      	ldrh	r3, [r7, #2]
 801a460:	4618      	mov	r0, r3
 801a462:	f7f8 fb65 	bl	8012b30 <lwip_htons>
 801a466:	4603      	mov	r3, r0
 801a468:	461a      	mov	r2, r3
 801a46a:	697b      	ldr	r3, [r7, #20]
 801a46c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a46e:	697b      	ldr	r3, [r7, #20]
 801a470:	2200      	movs	r2, #0
 801a472:	719a      	strb	r2, [r3, #6]
 801a474:	2200      	movs	r2, #0
 801a476:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a478:	69fb      	ldr	r3, [r7, #28]
 801a47a:	891b      	ldrh	r3, [r3, #8]
 801a47c:	4618      	mov	r0, r3
 801a47e:	f7f8 fb57 	bl	8012b30 <lwip_htons>
 801a482:	4603      	mov	r3, r0
 801a484:	461a      	mov	r2, r3
 801a486:	697b      	ldr	r3, [r7, #20]
 801a488:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a48a:	2311      	movs	r3, #17
 801a48c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	7adb      	ldrb	r3, [r3, #11]
 801a492:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	7a9b      	ldrb	r3, [r3, #10]
 801a498:	7cb9      	ldrb	r1, [r7, #18]
 801a49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a49c:	9202      	str	r2, [sp, #8]
 801a49e:	7cfa      	ldrb	r2, [r7, #19]
 801a4a0:	9201      	str	r2, [sp, #4]
 801a4a2:	9300      	str	r3, [sp, #0]
 801a4a4:	460b      	mov	r3, r1
 801a4a6:	687a      	ldr	r2, [r7, #4]
 801a4a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4aa:	69f8      	ldr	r0, [r7, #28]
 801a4ac:	f001 fbd4 	bl	801bc58 <ip4_output_if_src>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a4b4:	69fa      	ldr	r2, [r7, #28]
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d004      	beq.n	801a4c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a4bc:	69f8      	ldr	r0, [r7, #28]
 801a4be:	f7f9 ff25 	bl	801430c <pbuf_free>
    q = NULL;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a4c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3720      	adds	r7, #32
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
 801a4d2:	bf00      	nop
 801a4d4:	0802115c 	.word	0x0802115c
 801a4d8:	08021348 	.word	0x08021348
 801a4dc:	080211b0 	.word	0x080211b0
 801a4e0:	08021368 	.word	0x08021368
 801a4e4:	08021388 	.word	0x08021388
 801a4e8:	080213ac 	.word	0x080213ac
 801a4ec:	080213d0 	.word	0x080213d0
 801a4f0:	080213f4 	.word	0x080213f4

0801a4f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b086      	sub	sp, #24
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	60f8      	str	r0, [r7, #12]
 801a4fc:	60b9      	str	r1, [r7, #8]
 801a4fe:	4613      	mov	r3, r2
 801a500:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a502:	68bb      	ldr	r3, [r7, #8]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d101      	bne.n	801a50c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a508:	4b39      	ldr	r3, [pc, #228]	@ (801a5f0 <udp_bind+0xfc>)
 801a50a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d109      	bne.n	801a526 <udp_bind+0x32>
 801a512:	4b38      	ldr	r3, [pc, #224]	@ (801a5f4 <udp_bind+0x100>)
 801a514:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a518:	4937      	ldr	r1, [pc, #220]	@ (801a5f8 <udp_bind+0x104>)
 801a51a:	4838      	ldr	r0, [pc, #224]	@ (801a5fc <udp_bind+0x108>)
 801a51c:	f003 fd14 	bl	801df48 <iprintf>
 801a520:	f06f 030f 	mvn.w	r3, #15
 801a524:	e060      	b.n	801a5e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a526:	2300      	movs	r3, #0
 801a528:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a52a:	4b35      	ldr	r3, [pc, #212]	@ (801a600 <udp_bind+0x10c>)
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	617b      	str	r3, [r7, #20]
 801a530:	e009      	b.n	801a546 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a532:	68fa      	ldr	r2, [r7, #12]
 801a534:	697b      	ldr	r3, [r7, #20]
 801a536:	429a      	cmp	r2, r3
 801a538:	d102      	bne.n	801a540 <udp_bind+0x4c>
      rebind = 1;
 801a53a:	2301      	movs	r3, #1
 801a53c:	74fb      	strb	r3, [r7, #19]
      break;
 801a53e:	e005      	b.n	801a54c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	68db      	ldr	r3, [r3, #12]
 801a544:	617b      	str	r3, [r7, #20]
 801a546:	697b      	ldr	r3, [r7, #20]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d1f2      	bne.n	801a532 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a54c:	88fb      	ldrh	r3, [r7, #6]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d109      	bne.n	801a566 <udp_bind+0x72>
    port = udp_new_port();
 801a552:	f7ff fc69 	bl	8019e28 <udp_new_port>
 801a556:	4603      	mov	r3, r0
 801a558:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a55a:	88fb      	ldrh	r3, [r7, #6]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d12c      	bne.n	801a5ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a560:	f06f 0307 	mvn.w	r3, #7
 801a564:	e040      	b.n	801a5e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a566:	4b26      	ldr	r3, [pc, #152]	@ (801a600 <udp_bind+0x10c>)
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	617b      	str	r3, [r7, #20]
 801a56c:	e022      	b.n	801a5b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a56e:	68fa      	ldr	r2, [r7, #12]
 801a570:	697b      	ldr	r3, [r7, #20]
 801a572:	429a      	cmp	r2, r3
 801a574:	d01b      	beq.n	801a5ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	8a5b      	ldrh	r3, [r3, #18]
 801a57a:	88fa      	ldrh	r2, [r7, #6]
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d116      	bne.n	801a5ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	681a      	ldr	r2, [r3, #0]
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a588:	429a      	cmp	r2, r3
 801a58a:	d00d      	beq.n	801a5a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d00a      	beq.n	801a5a8 <udp_bind+0xb4>
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d006      	beq.n	801a5a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a59a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d003      	beq.n	801a5a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a5a0:	697b      	ldr	r3, [r7, #20]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d102      	bne.n	801a5ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a5a8:	f06f 0307 	mvn.w	r3, #7
 801a5ac:	e01c      	b.n	801a5e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a5ae:	697b      	ldr	r3, [r7, #20]
 801a5b0:	68db      	ldr	r3, [r3, #12]
 801a5b2:	617b      	str	r3, [r7, #20]
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d1d9      	bne.n	801a56e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a5ba:	68bb      	ldr	r3, [r7, #8]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d002      	beq.n	801a5c6 <udp_bind+0xd2>
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	e000      	b.n	801a5c8 <udp_bind+0xd4>
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	68fa      	ldr	r2, [r7, #12]
 801a5ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	88fa      	ldrh	r2, [r7, #6]
 801a5d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a5d2:	7cfb      	ldrb	r3, [r7, #19]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d106      	bne.n	801a5e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a5d8:	4b09      	ldr	r3, [pc, #36]	@ (801a600 <udp_bind+0x10c>)
 801a5da:	681a      	ldr	r2, [r3, #0]
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a5e0:	4a07      	ldr	r2, [pc, #28]	@ (801a600 <udp_bind+0x10c>)
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a5e6:	2300      	movs	r3, #0
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3718      	adds	r7, #24
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	080222c0 	.word	0x080222c0
 801a5f4:	0802115c 	.word	0x0802115c
 801a5f8:	08021424 	.word	0x08021424
 801a5fc:	080211b0 	.word	0x080211b0
 801a600:	2002768c 	.word	0x2002768c

0801a604 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b084      	sub	sp, #16
 801a608:	af00      	add	r7, sp, #0
 801a60a:	60f8      	str	r0, [r7, #12]
 801a60c:	60b9      	str	r1, [r7, #8]
 801a60e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d107      	bne.n	801a626 <udp_recv+0x22>
 801a616:	4b08      	ldr	r3, [pc, #32]	@ (801a638 <udp_recv+0x34>)
 801a618:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a61c:	4907      	ldr	r1, [pc, #28]	@ (801a63c <udp_recv+0x38>)
 801a61e:	4808      	ldr	r0, [pc, #32]	@ (801a640 <udp_recv+0x3c>)
 801a620:	f003 fc92 	bl	801df48 <iprintf>
 801a624:	e005      	b.n	801a632 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	68ba      	ldr	r2, [r7, #8]
 801a62a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	687a      	ldr	r2, [r7, #4]
 801a630:	61da      	str	r2, [r3, #28]
}
 801a632:	3710      	adds	r7, #16
 801a634:	46bd      	mov	sp, r7
 801a636:	bd80      	pop	{r7, pc}
 801a638:	0802115c 	.word	0x0802115c
 801a63c:	08021490 	.word	0x08021490
 801a640:	080211b0 	.word	0x080211b0

0801a644 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b082      	sub	sp, #8
 801a648:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a64a:	2000      	movs	r0, #0
 801a64c:	f7f8 ff44 	bl	80134d8 <memp_malloc>
 801a650:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d007      	beq.n	801a668 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a658:	2220      	movs	r2, #32
 801a65a:	2100      	movs	r1, #0
 801a65c:	6878      	ldr	r0, [r7, #4]
 801a65e:	f003 fdcb 	bl	801e1f8 <memset>
    pcb->ttl = UDP_TTL;
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	22ff      	movs	r2, #255	@ 0xff
 801a666:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a668:	687b      	ldr	r3, [r7, #4]
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	3708      	adds	r7, #8
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd80      	pop	{r7, pc}
	...

0801a674 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a674:	b480      	push	{r7}
 801a676:	b085      	sub	sp, #20
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
 801a67c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d01e      	beq.n	801a6c2 <udp_netif_ip_addr_changed+0x4e>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d01a      	beq.n	801a6c2 <udp_netif_ip_addr_changed+0x4e>
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d017      	beq.n	801a6c2 <udp_netif_ip_addr_changed+0x4e>
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d013      	beq.n	801a6c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a69a:	4b0d      	ldr	r3, [pc, #52]	@ (801a6d0 <udp_netif_ip_addr_changed+0x5c>)
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	60fb      	str	r3, [r7, #12]
 801a6a0:	e00c      	b.n	801a6bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	681a      	ldr	r2, [r3, #0]
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	429a      	cmp	r2, r3
 801a6ac:	d103      	bne.n	801a6b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a6ae:	683b      	ldr	r3, [r7, #0]
 801a6b0:	681a      	ldr	r2, [r3, #0]
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	68db      	ldr	r3, [r3, #12]
 801a6ba:	60fb      	str	r3, [r7, #12]
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d1ef      	bne.n	801a6a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a6c2:	bf00      	nop
 801a6c4:	3714      	adds	r7, #20
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	2002768c 	.word	0x2002768c

0801a6d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a6dc:	4915      	ldr	r1, [pc, #84]	@ (801a734 <etharp_free_entry+0x60>)
 801a6de:	687a      	ldr	r2, [r7, #4]
 801a6e0:	4613      	mov	r3, r2
 801a6e2:	005b      	lsls	r3, r3, #1
 801a6e4:	4413      	add	r3, r2
 801a6e6:	00db      	lsls	r3, r3, #3
 801a6e8:	440b      	add	r3, r1
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d013      	beq.n	801a718 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a6f0:	4910      	ldr	r1, [pc, #64]	@ (801a734 <etharp_free_entry+0x60>)
 801a6f2:	687a      	ldr	r2, [r7, #4]
 801a6f4:	4613      	mov	r3, r2
 801a6f6:	005b      	lsls	r3, r3, #1
 801a6f8:	4413      	add	r3, r2
 801a6fa:	00db      	lsls	r3, r3, #3
 801a6fc:	440b      	add	r3, r1
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	4618      	mov	r0, r3
 801a702:	f7f9 fe03 	bl	801430c <pbuf_free>
    arp_table[i].q = NULL;
 801a706:	490b      	ldr	r1, [pc, #44]	@ (801a734 <etharp_free_entry+0x60>)
 801a708:	687a      	ldr	r2, [r7, #4]
 801a70a:	4613      	mov	r3, r2
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	4413      	add	r3, r2
 801a710:	00db      	lsls	r3, r3, #3
 801a712:	440b      	add	r3, r1
 801a714:	2200      	movs	r2, #0
 801a716:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a718:	4906      	ldr	r1, [pc, #24]	@ (801a734 <etharp_free_entry+0x60>)
 801a71a:	687a      	ldr	r2, [r7, #4]
 801a71c:	4613      	mov	r3, r2
 801a71e:	005b      	lsls	r3, r3, #1
 801a720:	4413      	add	r3, r2
 801a722:	00db      	lsls	r3, r3, #3
 801a724:	440b      	add	r3, r1
 801a726:	3314      	adds	r3, #20
 801a728:	2200      	movs	r2, #0
 801a72a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a72c:	bf00      	nop
 801a72e:	3708      	adds	r7, #8
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}
 801a734:	20027690 	.word	0x20027690

0801a738 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b082      	sub	sp, #8
 801a73c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a73e:	2300      	movs	r3, #0
 801a740:	607b      	str	r3, [r7, #4]
 801a742:	e096      	b.n	801a872 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a744:	494f      	ldr	r1, [pc, #316]	@ (801a884 <etharp_tmr+0x14c>)
 801a746:	687a      	ldr	r2, [r7, #4]
 801a748:	4613      	mov	r3, r2
 801a74a:	005b      	lsls	r3, r3, #1
 801a74c:	4413      	add	r3, r2
 801a74e:	00db      	lsls	r3, r3, #3
 801a750:	440b      	add	r3, r1
 801a752:	3314      	adds	r3, #20
 801a754:	781b      	ldrb	r3, [r3, #0]
 801a756:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a758:	78fb      	ldrb	r3, [r7, #3]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f000 8086 	beq.w	801a86c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a760:	4948      	ldr	r1, [pc, #288]	@ (801a884 <etharp_tmr+0x14c>)
 801a762:	687a      	ldr	r2, [r7, #4]
 801a764:	4613      	mov	r3, r2
 801a766:	005b      	lsls	r3, r3, #1
 801a768:	4413      	add	r3, r2
 801a76a:	00db      	lsls	r3, r3, #3
 801a76c:	440b      	add	r3, r1
 801a76e:	3312      	adds	r3, #18
 801a770:	881b      	ldrh	r3, [r3, #0]
 801a772:	3301      	adds	r3, #1
 801a774:	b298      	uxth	r0, r3
 801a776:	4943      	ldr	r1, [pc, #268]	@ (801a884 <etharp_tmr+0x14c>)
 801a778:	687a      	ldr	r2, [r7, #4]
 801a77a:	4613      	mov	r3, r2
 801a77c:	005b      	lsls	r3, r3, #1
 801a77e:	4413      	add	r3, r2
 801a780:	00db      	lsls	r3, r3, #3
 801a782:	440b      	add	r3, r1
 801a784:	3312      	adds	r3, #18
 801a786:	4602      	mov	r2, r0
 801a788:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a78a:	493e      	ldr	r1, [pc, #248]	@ (801a884 <etharp_tmr+0x14c>)
 801a78c:	687a      	ldr	r2, [r7, #4]
 801a78e:	4613      	mov	r3, r2
 801a790:	005b      	lsls	r3, r3, #1
 801a792:	4413      	add	r3, r2
 801a794:	00db      	lsls	r3, r3, #3
 801a796:	440b      	add	r3, r1
 801a798:	3312      	adds	r3, #18
 801a79a:	881b      	ldrh	r3, [r3, #0]
 801a79c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a7a0:	d215      	bcs.n	801a7ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a7a2:	4938      	ldr	r1, [pc, #224]	@ (801a884 <etharp_tmr+0x14c>)
 801a7a4:	687a      	ldr	r2, [r7, #4]
 801a7a6:	4613      	mov	r3, r2
 801a7a8:	005b      	lsls	r3, r3, #1
 801a7aa:	4413      	add	r3, r2
 801a7ac:	00db      	lsls	r3, r3, #3
 801a7ae:	440b      	add	r3, r1
 801a7b0:	3314      	adds	r3, #20
 801a7b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a7b4:	2b01      	cmp	r3, #1
 801a7b6:	d10e      	bne.n	801a7d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a7b8:	4932      	ldr	r1, [pc, #200]	@ (801a884 <etharp_tmr+0x14c>)
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	4613      	mov	r3, r2
 801a7be:	005b      	lsls	r3, r3, #1
 801a7c0:	4413      	add	r3, r2
 801a7c2:	00db      	lsls	r3, r3, #3
 801a7c4:	440b      	add	r3, r1
 801a7c6:	3312      	adds	r3, #18
 801a7c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a7ca:	2b04      	cmp	r3, #4
 801a7cc:	d903      	bls.n	801a7d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a7ce:	6878      	ldr	r0, [r7, #4]
 801a7d0:	f7ff ff80 	bl	801a6d4 <etharp_free_entry>
 801a7d4:	e04a      	b.n	801a86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a7d6:	492b      	ldr	r1, [pc, #172]	@ (801a884 <etharp_tmr+0x14c>)
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	4613      	mov	r3, r2
 801a7dc:	005b      	lsls	r3, r3, #1
 801a7de:	4413      	add	r3, r2
 801a7e0:	00db      	lsls	r3, r3, #3
 801a7e2:	440b      	add	r3, r1
 801a7e4:	3314      	adds	r3, #20
 801a7e6:	781b      	ldrb	r3, [r3, #0]
 801a7e8:	2b03      	cmp	r3, #3
 801a7ea:	d10a      	bne.n	801a802 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a7ec:	4925      	ldr	r1, [pc, #148]	@ (801a884 <etharp_tmr+0x14c>)
 801a7ee:	687a      	ldr	r2, [r7, #4]
 801a7f0:	4613      	mov	r3, r2
 801a7f2:	005b      	lsls	r3, r3, #1
 801a7f4:	4413      	add	r3, r2
 801a7f6:	00db      	lsls	r3, r3, #3
 801a7f8:	440b      	add	r3, r1
 801a7fa:	3314      	adds	r3, #20
 801a7fc:	2204      	movs	r2, #4
 801a7fe:	701a      	strb	r2, [r3, #0]
 801a800:	e034      	b.n	801a86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a802:	4920      	ldr	r1, [pc, #128]	@ (801a884 <etharp_tmr+0x14c>)
 801a804:	687a      	ldr	r2, [r7, #4]
 801a806:	4613      	mov	r3, r2
 801a808:	005b      	lsls	r3, r3, #1
 801a80a:	4413      	add	r3, r2
 801a80c:	00db      	lsls	r3, r3, #3
 801a80e:	440b      	add	r3, r1
 801a810:	3314      	adds	r3, #20
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	2b04      	cmp	r3, #4
 801a816:	d10a      	bne.n	801a82e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a818:	491a      	ldr	r1, [pc, #104]	@ (801a884 <etharp_tmr+0x14c>)
 801a81a:	687a      	ldr	r2, [r7, #4]
 801a81c:	4613      	mov	r3, r2
 801a81e:	005b      	lsls	r3, r3, #1
 801a820:	4413      	add	r3, r2
 801a822:	00db      	lsls	r3, r3, #3
 801a824:	440b      	add	r3, r1
 801a826:	3314      	adds	r3, #20
 801a828:	2202      	movs	r2, #2
 801a82a:	701a      	strb	r2, [r3, #0]
 801a82c:	e01e      	b.n	801a86c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a82e:	4915      	ldr	r1, [pc, #84]	@ (801a884 <etharp_tmr+0x14c>)
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	4613      	mov	r3, r2
 801a834:	005b      	lsls	r3, r3, #1
 801a836:	4413      	add	r3, r2
 801a838:	00db      	lsls	r3, r3, #3
 801a83a:	440b      	add	r3, r1
 801a83c:	3314      	adds	r3, #20
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	2b01      	cmp	r3, #1
 801a842:	d113      	bne.n	801a86c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a844:	490f      	ldr	r1, [pc, #60]	@ (801a884 <etharp_tmr+0x14c>)
 801a846:	687a      	ldr	r2, [r7, #4]
 801a848:	4613      	mov	r3, r2
 801a84a:	005b      	lsls	r3, r3, #1
 801a84c:	4413      	add	r3, r2
 801a84e:	00db      	lsls	r3, r3, #3
 801a850:	440b      	add	r3, r1
 801a852:	3308      	adds	r3, #8
 801a854:	6818      	ldr	r0, [r3, #0]
 801a856:	687a      	ldr	r2, [r7, #4]
 801a858:	4613      	mov	r3, r2
 801a85a:	005b      	lsls	r3, r3, #1
 801a85c:	4413      	add	r3, r2
 801a85e:	00db      	lsls	r3, r3, #3
 801a860:	4a08      	ldr	r2, [pc, #32]	@ (801a884 <etharp_tmr+0x14c>)
 801a862:	4413      	add	r3, r2
 801a864:	3304      	adds	r3, #4
 801a866:	4619      	mov	r1, r3
 801a868:	f000 fe6e 	bl	801b548 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	3301      	adds	r3, #1
 801a870:	607b      	str	r3, [r7, #4]
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	2b09      	cmp	r3, #9
 801a876:	f77f af65 	ble.w	801a744 <etharp_tmr+0xc>
      }
    }
  }
}
 801a87a:	bf00      	nop
 801a87c:	bf00      	nop
 801a87e:	3708      	adds	r7, #8
 801a880:	46bd      	mov	sp, r7
 801a882:	bd80      	pop	{r7, pc}
 801a884:	20027690 	.word	0x20027690

0801a888 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b08a      	sub	sp, #40	@ 0x28
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	60f8      	str	r0, [r7, #12]
 801a890:	460b      	mov	r3, r1
 801a892:	607a      	str	r2, [r7, #4]
 801a894:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a896:	230a      	movs	r3, #10
 801a898:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a89a:	230a      	movs	r3, #10
 801a89c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a89e:	230a      	movs	r3, #10
 801a8a0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a8a6:	230a      	movs	r3, #10
 801a8a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	83bb      	strh	r3, [r7, #28]
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	837b      	strh	r3, [r7, #26]
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	843b      	strh	r3, [r7, #32]
 801a8ba:	e0ae      	b.n	801aa1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8c0:	49a6      	ldr	r1, [pc, #664]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	005b      	lsls	r3, r3, #1
 801a8c6:	4413      	add	r3, r2
 801a8c8:	00db      	lsls	r3, r3, #3
 801a8ca:	440b      	add	r3, r1
 801a8cc:	3314      	adds	r3, #20
 801a8ce:	781b      	ldrb	r3, [r3, #0]
 801a8d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a8d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a8d6:	2b0a      	cmp	r3, #10
 801a8d8:	d105      	bne.n	801a8e6 <etharp_find_entry+0x5e>
 801a8da:	7dfb      	ldrb	r3, [r7, #23]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d102      	bne.n	801a8e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a8e0:	8c3b      	ldrh	r3, [r7, #32]
 801a8e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a8e4:	e095      	b.n	801aa12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a8e6:	7dfb      	ldrb	r3, [r7, #23]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	f000 8092 	beq.w	801aa12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a8ee:	7dfb      	ldrb	r3, [r7, #23]
 801a8f0:	2b01      	cmp	r3, #1
 801a8f2:	d009      	beq.n	801a908 <etharp_find_entry+0x80>
 801a8f4:	7dfb      	ldrb	r3, [r7, #23]
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d806      	bhi.n	801a908 <etharp_find_entry+0x80>
 801a8fa:	4b99      	ldr	r3, [pc, #612]	@ (801ab60 <etharp_find_entry+0x2d8>)
 801a8fc:	f240 1223 	movw	r2, #291	@ 0x123
 801a900:	4998      	ldr	r1, [pc, #608]	@ (801ab64 <etharp_find_entry+0x2dc>)
 801a902:	4899      	ldr	r0, [pc, #612]	@ (801ab68 <etharp_find_entry+0x2e0>)
 801a904:	f003 fb20 	bl	801df48 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d020      	beq.n	801a950 <etharp_find_entry+0xc8>
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	6819      	ldr	r1, [r3, #0]
 801a912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a916:	4891      	ldr	r0, [pc, #580]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a918:	4613      	mov	r3, r2
 801a91a:	005b      	lsls	r3, r3, #1
 801a91c:	4413      	add	r3, r2
 801a91e:	00db      	lsls	r3, r3, #3
 801a920:	4403      	add	r3, r0
 801a922:	3304      	adds	r3, #4
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	4299      	cmp	r1, r3
 801a928:	d112      	bne.n	801a950 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d00c      	beq.n	801a94a <etharp_find_entry+0xc2>
 801a930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a934:	4989      	ldr	r1, [pc, #548]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a936:	4613      	mov	r3, r2
 801a938:	005b      	lsls	r3, r3, #1
 801a93a:	4413      	add	r3, r2
 801a93c:	00db      	lsls	r3, r3, #3
 801a93e:	440b      	add	r3, r1
 801a940:	3308      	adds	r3, #8
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	687a      	ldr	r2, [r7, #4]
 801a946:	429a      	cmp	r2, r3
 801a948:	d102      	bne.n	801a950 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a94a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a94e:	e100      	b.n	801ab52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a950:	7dfb      	ldrb	r3, [r7, #23]
 801a952:	2b01      	cmp	r3, #1
 801a954:	d140      	bne.n	801a9d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a95a:	4980      	ldr	r1, [pc, #512]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a95c:	4613      	mov	r3, r2
 801a95e:	005b      	lsls	r3, r3, #1
 801a960:	4413      	add	r3, r2
 801a962:	00db      	lsls	r3, r3, #3
 801a964:	440b      	add	r3, r1
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d01a      	beq.n	801a9a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a96c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a970:	497a      	ldr	r1, [pc, #488]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a972:	4613      	mov	r3, r2
 801a974:	005b      	lsls	r3, r3, #1
 801a976:	4413      	add	r3, r2
 801a978:	00db      	lsls	r3, r3, #3
 801a97a:	440b      	add	r3, r1
 801a97c:	3312      	adds	r3, #18
 801a97e:	881b      	ldrh	r3, [r3, #0]
 801a980:	8bba      	ldrh	r2, [r7, #28]
 801a982:	429a      	cmp	r2, r3
 801a984:	d845      	bhi.n	801aa12 <etharp_find_entry+0x18a>
            old_queue = i;
 801a986:	8c3b      	ldrh	r3, [r7, #32]
 801a988:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a98a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a98e:	4973      	ldr	r1, [pc, #460]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a990:	4613      	mov	r3, r2
 801a992:	005b      	lsls	r3, r3, #1
 801a994:	4413      	add	r3, r2
 801a996:	00db      	lsls	r3, r3, #3
 801a998:	440b      	add	r3, r1
 801a99a:	3312      	adds	r3, #18
 801a99c:	881b      	ldrh	r3, [r3, #0]
 801a99e:	83bb      	strh	r3, [r7, #28]
 801a9a0:	e037      	b.n	801aa12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a9a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9a6:	496d      	ldr	r1, [pc, #436]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	005b      	lsls	r3, r3, #1
 801a9ac:	4413      	add	r3, r2
 801a9ae:	00db      	lsls	r3, r3, #3
 801a9b0:	440b      	add	r3, r1
 801a9b2:	3312      	adds	r3, #18
 801a9b4:	881b      	ldrh	r3, [r3, #0]
 801a9b6:	8b7a      	ldrh	r2, [r7, #26]
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	d82a      	bhi.n	801aa12 <etharp_find_entry+0x18a>
            old_pending = i;
 801a9bc:	8c3b      	ldrh	r3, [r7, #32]
 801a9be:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a9c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9c4:	4965      	ldr	r1, [pc, #404]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a9c6:	4613      	mov	r3, r2
 801a9c8:	005b      	lsls	r3, r3, #1
 801a9ca:	4413      	add	r3, r2
 801a9cc:	00db      	lsls	r3, r3, #3
 801a9ce:	440b      	add	r3, r1
 801a9d0:	3312      	adds	r3, #18
 801a9d2:	881b      	ldrh	r3, [r3, #0]
 801a9d4:	837b      	strh	r3, [r7, #26]
 801a9d6:	e01c      	b.n	801aa12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a9d8:	7dfb      	ldrb	r3, [r7, #23]
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	d919      	bls.n	801aa12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a9de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9e2:	495e      	ldr	r1, [pc, #376]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	005b      	lsls	r3, r3, #1
 801a9e8:	4413      	add	r3, r2
 801a9ea:	00db      	lsls	r3, r3, #3
 801a9ec:	440b      	add	r3, r1
 801a9ee:	3312      	adds	r3, #18
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	8b3a      	ldrh	r2, [r7, #24]
 801a9f4:	429a      	cmp	r2, r3
 801a9f6:	d80c      	bhi.n	801aa12 <etharp_find_entry+0x18a>
            old_stable = i;
 801a9f8:	8c3b      	ldrh	r3, [r7, #32]
 801a9fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a9fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa00:	4956      	ldr	r1, [pc, #344]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801aa02:	4613      	mov	r3, r2
 801aa04:	005b      	lsls	r3, r3, #1
 801aa06:	4413      	add	r3, r2
 801aa08:	00db      	lsls	r3, r3, #3
 801aa0a:	440b      	add	r3, r1
 801aa0c:	3312      	adds	r3, #18
 801aa0e:	881b      	ldrh	r3, [r3, #0]
 801aa10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa12:	8c3b      	ldrh	r3, [r7, #32]
 801aa14:	3301      	adds	r3, #1
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	843b      	strh	r3, [r7, #32]
 801aa1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aa1e:	2b09      	cmp	r3, #9
 801aa20:	f77f af4c 	ble.w	801a8bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801aa24:	7afb      	ldrb	r3, [r7, #11]
 801aa26:	f003 0302 	and.w	r3, r3, #2
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d108      	bne.n	801aa40 <etharp_find_entry+0x1b8>
 801aa2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aa32:	2b0a      	cmp	r3, #10
 801aa34:	d107      	bne.n	801aa46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801aa36:	7afb      	ldrb	r3, [r7, #11]
 801aa38:	f003 0301 	and.w	r3, r3, #1
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d102      	bne.n	801aa46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801aa40:	f04f 33ff 	mov.w	r3, #4294967295
 801aa44:	e085      	b.n	801ab52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801aa46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aa4a:	2b09      	cmp	r3, #9
 801aa4c:	dc02      	bgt.n	801aa54 <etharp_find_entry+0x1cc>
    i = empty;
 801aa4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801aa50:	843b      	strh	r3, [r7, #32]
 801aa52:	e039      	b.n	801aac8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801aa54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801aa58:	2b09      	cmp	r3, #9
 801aa5a:	dc14      	bgt.n	801aa86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801aa5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aa5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801aa60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa64:	493d      	ldr	r1, [pc, #244]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801aa66:	4613      	mov	r3, r2
 801aa68:	005b      	lsls	r3, r3, #1
 801aa6a:	4413      	add	r3, r2
 801aa6c:	00db      	lsls	r3, r3, #3
 801aa6e:	440b      	add	r3, r1
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d018      	beq.n	801aaa8 <etharp_find_entry+0x220>
 801aa76:	4b3a      	ldr	r3, [pc, #232]	@ (801ab60 <etharp_find_entry+0x2d8>)
 801aa78:	f240 126d 	movw	r2, #365	@ 0x16d
 801aa7c:	493b      	ldr	r1, [pc, #236]	@ (801ab6c <etharp_find_entry+0x2e4>)
 801aa7e:	483a      	ldr	r0, [pc, #232]	@ (801ab68 <etharp_find_entry+0x2e0>)
 801aa80:	f003 fa62 	bl	801df48 <iprintf>
 801aa84:	e010      	b.n	801aaa8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801aa86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801aa8a:	2b09      	cmp	r3, #9
 801aa8c:	dc02      	bgt.n	801aa94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801aa8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801aa90:	843b      	strh	r3, [r7, #32]
 801aa92:	e009      	b.n	801aaa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801aa94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801aa98:	2b09      	cmp	r3, #9
 801aa9a:	dc02      	bgt.n	801aaa2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801aa9c:	8bfb      	ldrh	r3, [r7, #30]
 801aa9e:	843b      	strh	r3, [r7, #32]
 801aaa0:	e002      	b.n	801aaa8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801aaa2:	f04f 33ff 	mov.w	r3, #4294967295
 801aaa6:	e054      	b.n	801ab52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801aaa8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aaac:	2b09      	cmp	r3, #9
 801aaae:	dd06      	ble.n	801aabe <etharp_find_entry+0x236>
 801aab0:	4b2b      	ldr	r3, [pc, #172]	@ (801ab60 <etharp_find_entry+0x2d8>)
 801aab2:	f240 127f 	movw	r2, #383	@ 0x17f
 801aab6:	492e      	ldr	r1, [pc, #184]	@ (801ab70 <etharp_find_entry+0x2e8>)
 801aab8:	482b      	ldr	r0, [pc, #172]	@ (801ab68 <etharp_find_entry+0x2e0>)
 801aaba:	f003 fa45 	bl	801df48 <iprintf>
    etharp_free_entry(i);
 801aabe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aac2:	4618      	mov	r0, r3
 801aac4:	f7ff fe06 	bl	801a6d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801aac8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aacc:	2b09      	cmp	r3, #9
 801aace:	dd06      	ble.n	801aade <etharp_find_entry+0x256>
 801aad0:	4b23      	ldr	r3, [pc, #140]	@ (801ab60 <etharp_find_entry+0x2d8>)
 801aad2:	f240 1283 	movw	r2, #387	@ 0x183
 801aad6:	4926      	ldr	r1, [pc, #152]	@ (801ab70 <etharp_find_entry+0x2e8>)
 801aad8:	4823      	ldr	r0, [pc, #140]	@ (801ab68 <etharp_find_entry+0x2e0>)
 801aada:	f003 fa35 	bl	801df48 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801aade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aae2:	491e      	ldr	r1, [pc, #120]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801aae4:	4613      	mov	r3, r2
 801aae6:	005b      	lsls	r3, r3, #1
 801aae8:	4413      	add	r3, r2
 801aaea:	00db      	lsls	r3, r3, #3
 801aaec:	440b      	add	r3, r1
 801aaee:	3314      	adds	r3, #20
 801aaf0:	781b      	ldrb	r3, [r3, #0]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d006      	beq.n	801ab04 <etharp_find_entry+0x27c>
 801aaf6:	4b1a      	ldr	r3, [pc, #104]	@ (801ab60 <etharp_find_entry+0x2d8>)
 801aaf8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801aafc:	491d      	ldr	r1, [pc, #116]	@ (801ab74 <etharp_find_entry+0x2ec>)
 801aafe:	481a      	ldr	r0, [pc, #104]	@ (801ab68 <etharp_find_entry+0x2e0>)
 801ab00:	f003 fa22 	bl	801df48 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d00b      	beq.n	801ab22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801ab0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	6819      	ldr	r1, [r3, #0]
 801ab12:	4812      	ldr	r0, [pc, #72]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801ab14:	4613      	mov	r3, r2
 801ab16:	005b      	lsls	r3, r3, #1
 801ab18:	4413      	add	r3, r2
 801ab1a:	00db      	lsls	r3, r3, #3
 801ab1c:	4403      	add	r3, r0
 801ab1e:	3304      	adds	r3, #4
 801ab20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ab22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab26:	490d      	ldr	r1, [pc, #52]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801ab28:	4613      	mov	r3, r2
 801ab2a:	005b      	lsls	r3, r3, #1
 801ab2c:	4413      	add	r3, r2
 801ab2e:	00db      	lsls	r3, r3, #3
 801ab30:	440b      	add	r3, r1
 801ab32:	3312      	adds	r3, #18
 801ab34:	2200      	movs	r2, #0
 801ab36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801ab38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab3c:	4907      	ldr	r1, [pc, #28]	@ (801ab5c <etharp_find_entry+0x2d4>)
 801ab3e:	4613      	mov	r3, r2
 801ab40:	005b      	lsls	r3, r3, #1
 801ab42:	4413      	add	r3, r2
 801ab44:	00db      	lsls	r3, r3, #3
 801ab46:	440b      	add	r3, r1
 801ab48:	3308      	adds	r3, #8
 801ab4a:	687a      	ldr	r2, [r7, #4]
 801ab4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801ab4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801ab52:	4618      	mov	r0, r3
 801ab54:	3728      	adds	r7, #40	@ 0x28
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	20027690 	.word	0x20027690
 801ab60:	080214c0 	.word	0x080214c0
 801ab64:	080214f8 	.word	0x080214f8
 801ab68:	08021538 	.word	0x08021538
 801ab6c:	08021560 	.word	0x08021560
 801ab70:	08021578 	.word	0x08021578
 801ab74:	0802158c 	.word	0x0802158c

0801ab78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b088      	sub	sp, #32
 801ab7c:	af02      	add	r7, sp, #8
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	60b9      	str	r1, [r7, #8]
 801ab82:	607a      	str	r2, [r7, #4]
 801ab84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ab8c:	2b06      	cmp	r3, #6
 801ab8e:	d006      	beq.n	801ab9e <etharp_update_arp_entry+0x26>
 801ab90:	4b48      	ldr	r3, [pc, #288]	@ (801acb4 <etharp_update_arp_entry+0x13c>)
 801ab92:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ab96:	4948      	ldr	r1, [pc, #288]	@ (801acb8 <etharp_update_arp_entry+0x140>)
 801ab98:	4848      	ldr	r0, [pc, #288]	@ (801acbc <etharp_update_arp_entry+0x144>)
 801ab9a:	f003 f9d5 	bl	801df48 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ab9e:	68bb      	ldr	r3, [r7, #8]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d012      	beq.n	801abca <etharp_update_arp_entry+0x52>
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d00e      	beq.n	801abca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	68f9      	ldr	r1, [r7, #12]
 801abb2:	4618      	mov	r0, r3
 801abb4:	f001 f8fe 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801abb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d105      	bne.n	801abca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801abc6:	2be0      	cmp	r3, #224	@ 0xe0
 801abc8:	d102      	bne.n	801abd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801abca:	f06f 030f 	mvn.w	r3, #15
 801abce:	e06c      	b.n	801acaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801abd0:	78fb      	ldrb	r3, [r7, #3]
 801abd2:	68fa      	ldr	r2, [r7, #12]
 801abd4:	4619      	mov	r1, r3
 801abd6:	68b8      	ldr	r0, [r7, #8]
 801abd8:	f7ff fe56 	bl	801a888 <etharp_find_entry>
 801abdc:	4603      	mov	r3, r0
 801abde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801abe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	da02      	bge.n	801abee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801abe8:	8afb      	ldrh	r3, [r7, #22]
 801abea:	b25b      	sxtb	r3, r3
 801abec:	e05d      	b.n	801acaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801abee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801abf2:	4933      	ldr	r1, [pc, #204]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801abf4:	4613      	mov	r3, r2
 801abf6:	005b      	lsls	r3, r3, #1
 801abf8:	4413      	add	r3, r2
 801abfa:	00db      	lsls	r3, r3, #3
 801abfc:	440b      	add	r3, r1
 801abfe:	3314      	adds	r3, #20
 801ac00:	2202      	movs	r2, #2
 801ac02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ac04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac08:	492d      	ldr	r1, [pc, #180]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac0a:	4613      	mov	r3, r2
 801ac0c:	005b      	lsls	r3, r3, #1
 801ac0e:	4413      	add	r3, r2
 801ac10:	00db      	lsls	r3, r3, #3
 801ac12:	440b      	add	r3, r1
 801ac14:	3308      	adds	r3, #8
 801ac16:	68fa      	ldr	r2, [r7, #12]
 801ac18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ac1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac1e:	4613      	mov	r3, r2
 801ac20:	005b      	lsls	r3, r3, #1
 801ac22:	4413      	add	r3, r2
 801ac24:	00db      	lsls	r3, r3, #3
 801ac26:	3308      	adds	r3, #8
 801ac28:	4a25      	ldr	r2, [pc, #148]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac2a:	4413      	add	r3, r2
 801ac2c:	3304      	adds	r3, #4
 801ac2e:	2206      	movs	r2, #6
 801ac30:	6879      	ldr	r1, [r7, #4]
 801ac32:	4618      	mov	r0, r3
 801ac34:	f003 fbb3 	bl	801e39e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ac38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac3c:	4920      	ldr	r1, [pc, #128]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac3e:	4613      	mov	r3, r2
 801ac40:	005b      	lsls	r3, r3, #1
 801ac42:	4413      	add	r3, r2
 801ac44:	00db      	lsls	r3, r3, #3
 801ac46:	440b      	add	r3, r1
 801ac48:	3312      	adds	r3, #18
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ac4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac52:	491b      	ldr	r1, [pc, #108]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac54:	4613      	mov	r3, r2
 801ac56:	005b      	lsls	r3, r3, #1
 801ac58:	4413      	add	r3, r2
 801ac5a:	00db      	lsls	r3, r3, #3
 801ac5c:	440b      	add	r3, r1
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d021      	beq.n	801aca8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ac64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac68:	4915      	ldr	r1, [pc, #84]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac6a:	4613      	mov	r3, r2
 801ac6c:	005b      	lsls	r3, r3, #1
 801ac6e:	4413      	add	r3, r2
 801ac70:	00db      	lsls	r3, r3, #3
 801ac72:	440b      	add	r3, r1
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ac78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ac7c:	4910      	ldr	r1, [pc, #64]	@ (801acc0 <etharp_update_arp_entry+0x148>)
 801ac7e:	4613      	mov	r3, r2
 801ac80:	005b      	lsls	r3, r3, #1
 801ac82:	4413      	add	r3, r2
 801ac84:	00db      	lsls	r3, r3, #3
 801ac86:	440b      	add	r3, r1
 801ac88:	2200      	movs	r2, #0
 801ac8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ac92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6939      	ldr	r1, [r7, #16]
 801ac9c:	68f8      	ldr	r0, [r7, #12]
 801ac9e:	f001 ff97 	bl	801cbd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801aca2:	6938      	ldr	r0, [r7, #16]
 801aca4:	f7f9 fb32 	bl	801430c <pbuf_free>
  }
  return ERR_OK;
 801aca8:	2300      	movs	r3, #0
}
 801acaa:	4618      	mov	r0, r3
 801acac:	3718      	adds	r7, #24
 801acae:	46bd      	mov	sp, r7
 801acb0:	bd80      	pop	{r7, pc}
 801acb2:	bf00      	nop
 801acb4:	080214c0 	.word	0x080214c0
 801acb8:	080215b8 	.word	0x080215b8
 801acbc:	08021538 	.word	0x08021538
 801acc0:	20027690 	.word	0x20027690

0801acc4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b084      	sub	sp, #16
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801accc:	2300      	movs	r3, #0
 801acce:	60fb      	str	r3, [r7, #12]
 801acd0:	e01e      	b.n	801ad10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801acd2:	4913      	ldr	r1, [pc, #76]	@ (801ad20 <etharp_cleanup_netif+0x5c>)
 801acd4:	68fa      	ldr	r2, [r7, #12]
 801acd6:	4613      	mov	r3, r2
 801acd8:	005b      	lsls	r3, r3, #1
 801acda:	4413      	add	r3, r2
 801acdc:	00db      	lsls	r3, r3, #3
 801acde:	440b      	add	r3, r1
 801ace0:	3314      	adds	r3, #20
 801ace2:	781b      	ldrb	r3, [r3, #0]
 801ace4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ace6:	7afb      	ldrb	r3, [r7, #11]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00e      	beq.n	801ad0a <etharp_cleanup_netif+0x46>
 801acec:	490c      	ldr	r1, [pc, #48]	@ (801ad20 <etharp_cleanup_netif+0x5c>)
 801acee:	68fa      	ldr	r2, [r7, #12]
 801acf0:	4613      	mov	r3, r2
 801acf2:	005b      	lsls	r3, r3, #1
 801acf4:	4413      	add	r3, r2
 801acf6:	00db      	lsls	r3, r3, #3
 801acf8:	440b      	add	r3, r1
 801acfa:	3308      	adds	r3, #8
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	687a      	ldr	r2, [r7, #4]
 801ad00:	429a      	cmp	r2, r3
 801ad02:	d102      	bne.n	801ad0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ad04:	68f8      	ldr	r0, [r7, #12]
 801ad06:	f7ff fce5 	bl	801a6d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	3301      	adds	r3, #1
 801ad0e:	60fb      	str	r3, [r7, #12]
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	2b09      	cmp	r3, #9
 801ad14:	dddd      	ble.n	801acd2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801ad16:	bf00      	nop
 801ad18:	bf00      	nop
 801ad1a:	3710      	adds	r7, #16
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}
 801ad20:	20027690 	.word	0x20027690

0801ad24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ad24:	b5b0      	push	{r4, r5, r7, lr}
 801ad26:	b08a      	sub	sp, #40	@ 0x28
 801ad28:	af04      	add	r7, sp, #16
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d107      	bne.n	801ad44 <etharp_input+0x20>
 801ad34:	4b3d      	ldr	r3, [pc, #244]	@ (801ae2c <etharp_input+0x108>)
 801ad36:	f240 228a 	movw	r2, #650	@ 0x28a
 801ad3a:	493d      	ldr	r1, [pc, #244]	@ (801ae30 <etharp_input+0x10c>)
 801ad3c:	483d      	ldr	r0, [pc, #244]	@ (801ae34 <etharp_input+0x110>)
 801ad3e:	f003 f903 	bl	801df48 <iprintf>
 801ad42:	e06f      	b.n	801ae24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ad4a:	693b      	ldr	r3, [r7, #16]
 801ad4c:	881b      	ldrh	r3, [r3, #0]
 801ad4e:	b29b      	uxth	r3, r3
 801ad50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ad54:	d10c      	bne.n	801ad70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ad5a:	2b06      	cmp	r3, #6
 801ad5c:	d108      	bne.n	801ad70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ad5e:	693b      	ldr	r3, [r7, #16]
 801ad60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ad62:	2b04      	cmp	r3, #4
 801ad64:	d104      	bne.n	801ad70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	885b      	ldrh	r3, [r3, #2]
 801ad6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ad6c:	2b08      	cmp	r3, #8
 801ad6e:	d003      	beq.n	801ad78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f7f9 facb 	bl	801430c <pbuf_free>
    return;
 801ad76:	e055      	b.n	801ae24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	330e      	adds	r3, #14
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ad80:	693b      	ldr	r3, [r7, #16]
 801ad82:	3318      	adds	r3, #24
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	3304      	adds	r3, #4
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d102      	bne.n	801ad98 <etharp_input+0x74>
    for_us = 0;
 801ad92:	2300      	movs	r3, #0
 801ad94:	75fb      	strb	r3, [r7, #23]
 801ad96:	e009      	b.n	801adac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ad98:	68ba      	ldr	r2, [r7, #8]
 801ad9a:	683b      	ldr	r3, [r7, #0]
 801ad9c:	3304      	adds	r3, #4
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	429a      	cmp	r2, r3
 801ada2:	bf0c      	ite	eq
 801ada4:	2301      	moveq	r3, #1
 801ada6:	2300      	movne	r3, #0
 801ada8:	b2db      	uxtb	r3, r3
 801adaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801adac:	693b      	ldr	r3, [r7, #16]
 801adae:	f103 0208 	add.w	r2, r3, #8
 801adb2:	7dfb      	ldrb	r3, [r7, #23]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d001      	beq.n	801adbc <etharp_input+0x98>
 801adb8:	2301      	movs	r3, #1
 801adba:	e000      	b.n	801adbe <etharp_input+0x9a>
 801adbc:	2302      	movs	r3, #2
 801adbe:	f107 010c 	add.w	r1, r7, #12
 801adc2:	6838      	ldr	r0, [r7, #0]
 801adc4:	f7ff fed8 	bl	801ab78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801adc8:	693b      	ldr	r3, [r7, #16]
 801adca:	88db      	ldrh	r3, [r3, #6]
 801adcc:	b29b      	uxth	r3, r3
 801adce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801add2:	d003      	beq.n	801addc <etharp_input+0xb8>
 801add4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801add8:	d01e      	beq.n	801ae18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801adda:	e020      	b.n	801ae1e <etharp_input+0xfa>
      if (for_us) {
 801addc:	7dfb      	ldrb	r3, [r7, #23]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d01c      	beq.n	801ae1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ade2:	683b      	ldr	r3, [r7, #0]
 801ade4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ade8:	693b      	ldr	r3, [r7, #16]
 801adea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801adf4:	683b      	ldr	r3, [r7, #0]
 801adf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801adf8:	693a      	ldr	r2, [r7, #16]
 801adfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801adfc:	2102      	movs	r1, #2
 801adfe:	9103      	str	r1, [sp, #12]
 801ae00:	f107 010c 	add.w	r1, r7, #12
 801ae04:	9102      	str	r1, [sp, #8]
 801ae06:	9201      	str	r2, [sp, #4]
 801ae08:	9300      	str	r3, [sp, #0]
 801ae0a:	462b      	mov	r3, r5
 801ae0c:	4622      	mov	r2, r4
 801ae0e:	4601      	mov	r1, r0
 801ae10:	6838      	ldr	r0, [r7, #0]
 801ae12:	f000 faeb 	bl	801b3ec <etharp_raw>
      break;
 801ae16:	e001      	b.n	801ae1c <etharp_input+0xf8>
      break;
 801ae18:	bf00      	nop
 801ae1a:	e000      	b.n	801ae1e <etharp_input+0xfa>
      break;
 801ae1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ae1e:	6878      	ldr	r0, [r7, #4]
 801ae20:	f7f9 fa74 	bl	801430c <pbuf_free>
}
 801ae24:	3718      	adds	r7, #24
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bdb0      	pop	{r4, r5, r7, pc}
 801ae2a:	bf00      	nop
 801ae2c:	080214c0 	.word	0x080214c0
 801ae30:	08021610 	.word	0x08021610
 801ae34:	08021538 	.word	0x08021538

0801ae38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b086      	sub	sp, #24
 801ae3c:	af02      	add	r7, sp, #8
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	4613      	mov	r3, r2
 801ae44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ae46:	79fa      	ldrb	r2, [r7, #7]
 801ae48:	4944      	ldr	r1, [pc, #272]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801ae4a:	4613      	mov	r3, r2
 801ae4c:	005b      	lsls	r3, r3, #1
 801ae4e:	4413      	add	r3, r2
 801ae50:	00db      	lsls	r3, r3, #3
 801ae52:	440b      	add	r3, r1
 801ae54:	3314      	adds	r3, #20
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	d806      	bhi.n	801ae6a <etharp_output_to_arp_index+0x32>
 801ae5c:	4b40      	ldr	r3, [pc, #256]	@ (801af60 <etharp_output_to_arp_index+0x128>)
 801ae5e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801ae62:	4940      	ldr	r1, [pc, #256]	@ (801af64 <etharp_output_to_arp_index+0x12c>)
 801ae64:	4840      	ldr	r0, [pc, #256]	@ (801af68 <etharp_output_to_arp_index+0x130>)
 801ae66:	f003 f86f 	bl	801df48 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ae6a:	79fa      	ldrb	r2, [r7, #7]
 801ae6c:	493b      	ldr	r1, [pc, #236]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801ae6e:	4613      	mov	r3, r2
 801ae70:	005b      	lsls	r3, r3, #1
 801ae72:	4413      	add	r3, r2
 801ae74:	00db      	lsls	r3, r3, #3
 801ae76:	440b      	add	r3, r1
 801ae78:	3314      	adds	r3, #20
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	2b02      	cmp	r3, #2
 801ae7e:	d153      	bne.n	801af28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ae80:	79fa      	ldrb	r2, [r7, #7]
 801ae82:	4936      	ldr	r1, [pc, #216]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801ae84:	4613      	mov	r3, r2
 801ae86:	005b      	lsls	r3, r3, #1
 801ae88:	4413      	add	r3, r2
 801ae8a:	00db      	lsls	r3, r3, #3
 801ae8c:	440b      	add	r3, r1
 801ae8e:	3312      	adds	r3, #18
 801ae90:	881b      	ldrh	r3, [r3, #0]
 801ae92:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801ae96:	d919      	bls.n	801aecc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ae98:	79fa      	ldrb	r2, [r7, #7]
 801ae9a:	4613      	mov	r3, r2
 801ae9c:	005b      	lsls	r3, r3, #1
 801ae9e:	4413      	add	r3, r2
 801aea0:	00db      	lsls	r3, r3, #3
 801aea2:	4a2e      	ldr	r2, [pc, #184]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801aea4:	4413      	add	r3, r2
 801aea6:	3304      	adds	r3, #4
 801aea8:	4619      	mov	r1, r3
 801aeaa:	68f8      	ldr	r0, [r7, #12]
 801aeac:	f000 fb4c 	bl	801b548 <etharp_request>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d138      	bne.n	801af28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aeb6:	79fa      	ldrb	r2, [r7, #7]
 801aeb8:	4928      	ldr	r1, [pc, #160]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801aeba:	4613      	mov	r3, r2
 801aebc:	005b      	lsls	r3, r3, #1
 801aebe:	4413      	add	r3, r2
 801aec0:	00db      	lsls	r3, r3, #3
 801aec2:	440b      	add	r3, r1
 801aec4:	3314      	adds	r3, #20
 801aec6:	2203      	movs	r2, #3
 801aec8:	701a      	strb	r2, [r3, #0]
 801aeca:	e02d      	b.n	801af28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801aecc:	79fa      	ldrb	r2, [r7, #7]
 801aece:	4923      	ldr	r1, [pc, #140]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801aed0:	4613      	mov	r3, r2
 801aed2:	005b      	lsls	r3, r3, #1
 801aed4:	4413      	add	r3, r2
 801aed6:	00db      	lsls	r3, r3, #3
 801aed8:	440b      	add	r3, r1
 801aeda:	3312      	adds	r3, #18
 801aedc:	881b      	ldrh	r3, [r3, #0]
 801aede:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801aee2:	d321      	bcc.n	801af28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801aee4:	79fa      	ldrb	r2, [r7, #7]
 801aee6:	4613      	mov	r3, r2
 801aee8:	005b      	lsls	r3, r3, #1
 801aeea:	4413      	add	r3, r2
 801aeec:	00db      	lsls	r3, r3, #3
 801aeee:	4a1b      	ldr	r2, [pc, #108]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801aef0:	4413      	add	r3, r2
 801aef2:	1d19      	adds	r1, r3, #4
 801aef4:	79fa      	ldrb	r2, [r7, #7]
 801aef6:	4613      	mov	r3, r2
 801aef8:	005b      	lsls	r3, r3, #1
 801aefa:	4413      	add	r3, r2
 801aefc:	00db      	lsls	r3, r3, #3
 801aefe:	3308      	adds	r3, #8
 801af00:	4a16      	ldr	r2, [pc, #88]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801af02:	4413      	add	r3, r2
 801af04:	3304      	adds	r3, #4
 801af06:	461a      	mov	r2, r3
 801af08:	68f8      	ldr	r0, [r7, #12]
 801af0a:	f000 fafb 	bl	801b504 <etharp_request_dst>
 801af0e:	4603      	mov	r3, r0
 801af10:	2b00      	cmp	r3, #0
 801af12:	d109      	bne.n	801af28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801af14:	79fa      	ldrb	r2, [r7, #7]
 801af16:	4911      	ldr	r1, [pc, #68]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801af18:	4613      	mov	r3, r2
 801af1a:	005b      	lsls	r3, r3, #1
 801af1c:	4413      	add	r3, r2
 801af1e:	00db      	lsls	r3, r3, #3
 801af20:	440b      	add	r3, r1
 801af22:	3314      	adds	r3, #20
 801af24:	2203      	movs	r2, #3
 801af26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801af2e:	79fa      	ldrb	r2, [r7, #7]
 801af30:	4613      	mov	r3, r2
 801af32:	005b      	lsls	r3, r3, #1
 801af34:	4413      	add	r3, r2
 801af36:	00db      	lsls	r3, r3, #3
 801af38:	3308      	adds	r3, #8
 801af3a:	4a08      	ldr	r2, [pc, #32]	@ (801af5c <etharp_output_to_arp_index+0x124>)
 801af3c:	4413      	add	r3, r2
 801af3e:	3304      	adds	r3, #4
 801af40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801af44:	9200      	str	r2, [sp, #0]
 801af46:	460a      	mov	r2, r1
 801af48:	68b9      	ldr	r1, [r7, #8]
 801af4a:	68f8      	ldr	r0, [r7, #12]
 801af4c:	f001 fe40 	bl	801cbd0 <ethernet_output>
 801af50:	4603      	mov	r3, r0
}
 801af52:	4618      	mov	r0, r3
 801af54:	3710      	adds	r7, #16
 801af56:	46bd      	mov	sp, r7
 801af58:	bd80      	pop	{r7, pc}
 801af5a:	bf00      	nop
 801af5c:	20027690 	.word	0x20027690
 801af60:	080214c0 	.word	0x080214c0
 801af64:	08021630 	.word	0x08021630
 801af68:	08021538 	.word	0x08021538

0801af6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b08a      	sub	sp, #40	@ 0x28
 801af70:	af02      	add	r7, sp, #8
 801af72:	60f8      	str	r0, [r7, #12]
 801af74:	60b9      	str	r1, [r7, #8]
 801af76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d106      	bne.n	801af90 <etharp_output+0x24>
 801af82:	4b73      	ldr	r3, [pc, #460]	@ (801b150 <etharp_output+0x1e4>)
 801af84:	f240 321e 	movw	r2, #798	@ 0x31e
 801af88:	4972      	ldr	r1, [pc, #456]	@ (801b154 <etharp_output+0x1e8>)
 801af8a:	4873      	ldr	r0, [pc, #460]	@ (801b158 <etharp_output+0x1ec>)
 801af8c:	f002 ffdc 	bl	801df48 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801af90:	68bb      	ldr	r3, [r7, #8]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d106      	bne.n	801afa4 <etharp_output+0x38>
 801af96:	4b6e      	ldr	r3, [pc, #440]	@ (801b150 <etharp_output+0x1e4>)
 801af98:	f240 321f 	movw	r2, #799	@ 0x31f
 801af9c:	496f      	ldr	r1, [pc, #444]	@ (801b15c <etharp_output+0x1f0>)
 801af9e:	486e      	ldr	r0, [pc, #440]	@ (801b158 <etharp_output+0x1ec>)
 801afa0:	f002 ffd2 	bl	801df48 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d106      	bne.n	801afb8 <etharp_output+0x4c>
 801afaa:	4b69      	ldr	r3, [pc, #420]	@ (801b150 <etharp_output+0x1e4>)
 801afac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801afb0:	496b      	ldr	r1, [pc, #428]	@ (801b160 <etharp_output+0x1f4>)
 801afb2:	4869      	ldr	r0, [pc, #420]	@ (801b158 <etharp_output+0x1ec>)
 801afb4:	f002 ffc8 	bl	801df48 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	68f9      	ldr	r1, [r7, #12]
 801afbe:	4618      	mov	r0, r3
 801afc0:	f000 fef8 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801afc4:	4603      	mov	r3, r0
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d002      	beq.n	801afd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801afca:	4b66      	ldr	r3, [pc, #408]	@ (801b164 <etharp_output+0x1f8>)
 801afcc:	61fb      	str	r3, [r7, #28]
 801afce:	e0af      	b.n	801b130 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801afd8:	2be0      	cmp	r3, #224	@ 0xe0
 801afda:	d118      	bne.n	801b00e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801afdc:	2301      	movs	r3, #1
 801afde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801afe0:	2300      	movs	r3, #0
 801afe2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801afe4:	235e      	movs	r3, #94	@ 0x5e
 801afe6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	3301      	adds	r3, #1
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aff2:	b2db      	uxtb	r3, r3
 801aff4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	3302      	adds	r3, #2
 801affa:	781b      	ldrb	r3, [r3, #0]
 801affc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	3303      	adds	r3, #3
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b006:	f107 0310 	add.w	r3, r7, #16
 801b00a:	61fb      	str	r3, [r7, #28]
 801b00c:	e090      	b.n	801b130 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	681a      	ldr	r2, [r3, #0]
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	3304      	adds	r3, #4
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	405a      	eors	r2, r3
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	3308      	adds	r3, #8
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	4013      	ands	r3, r2
 801b022:	2b00      	cmp	r3, #0
 801b024:	d012      	beq.n	801b04c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b02c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b030:	4293      	cmp	r3, r2
 801b032:	d00b      	beq.n	801b04c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	330c      	adds	r3, #12
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d003      	beq.n	801b046 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	330c      	adds	r3, #12
 801b042:	61bb      	str	r3, [r7, #24]
 801b044:	e002      	b.n	801b04c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b046:	f06f 0303 	mvn.w	r3, #3
 801b04a:	e07d      	b.n	801b148 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b04c:	4b46      	ldr	r3, [pc, #280]	@ (801b168 <etharp_output+0x1fc>)
 801b04e:	781b      	ldrb	r3, [r3, #0]
 801b050:	4619      	mov	r1, r3
 801b052:	4a46      	ldr	r2, [pc, #280]	@ (801b16c <etharp_output+0x200>)
 801b054:	460b      	mov	r3, r1
 801b056:	005b      	lsls	r3, r3, #1
 801b058:	440b      	add	r3, r1
 801b05a:	00db      	lsls	r3, r3, #3
 801b05c:	4413      	add	r3, r2
 801b05e:	3314      	adds	r3, #20
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	2b01      	cmp	r3, #1
 801b064:	d925      	bls.n	801b0b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b066:	4b40      	ldr	r3, [pc, #256]	@ (801b168 <etharp_output+0x1fc>)
 801b068:	781b      	ldrb	r3, [r3, #0]
 801b06a:	4619      	mov	r1, r3
 801b06c:	4a3f      	ldr	r2, [pc, #252]	@ (801b16c <etharp_output+0x200>)
 801b06e:	460b      	mov	r3, r1
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	440b      	add	r3, r1
 801b074:	00db      	lsls	r3, r3, #3
 801b076:	4413      	add	r3, r2
 801b078:	3308      	adds	r3, #8
 801b07a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b07c:	68fa      	ldr	r2, [r7, #12]
 801b07e:	429a      	cmp	r2, r3
 801b080:	d117      	bne.n	801b0b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b082:	69bb      	ldr	r3, [r7, #24]
 801b084:	681a      	ldr	r2, [r3, #0]
 801b086:	4b38      	ldr	r3, [pc, #224]	@ (801b168 <etharp_output+0x1fc>)
 801b088:	781b      	ldrb	r3, [r3, #0]
 801b08a:	4618      	mov	r0, r3
 801b08c:	4937      	ldr	r1, [pc, #220]	@ (801b16c <etharp_output+0x200>)
 801b08e:	4603      	mov	r3, r0
 801b090:	005b      	lsls	r3, r3, #1
 801b092:	4403      	add	r3, r0
 801b094:	00db      	lsls	r3, r3, #3
 801b096:	440b      	add	r3, r1
 801b098:	3304      	adds	r3, #4
 801b09a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d108      	bne.n	801b0b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b0a0:	4b31      	ldr	r3, [pc, #196]	@ (801b168 <etharp_output+0x1fc>)
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	461a      	mov	r2, r3
 801b0a6:	68b9      	ldr	r1, [r7, #8]
 801b0a8:	68f8      	ldr	r0, [r7, #12]
 801b0aa:	f7ff fec5 	bl	801ae38 <etharp_output_to_arp_index>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	e04a      	b.n	801b148 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	75fb      	strb	r3, [r7, #23]
 801b0b6:	e031      	b.n	801b11c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b0b8:	7dfa      	ldrb	r2, [r7, #23]
 801b0ba:	492c      	ldr	r1, [pc, #176]	@ (801b16c <etharp_output+0x200>)
 801b0bc:	4613      	mov	r3, r2
 801b0be:	005b      	lsls	r3, r3, #1
 801b0c0:	4413      	add	r3, r2
 801b0c2:	00db      	lsls	r3, r3, #3
 801b0c4:	440b      	add	r3, r1
 801b0c6:	3314      	adds	r3, #20
 801b0c8:	781b      	ldrb	r3, [r3, #0]
 801b0ca:	2b01      	cmp	r3, #1
 801b0cc:	d923      	bls.n	801b116 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b0ce:	7dfa      	ldrb	r2, [r7, #23]
 801b0d0:	4926      	ldr	r1, [pc, #152]	@ (801b16c <etharp_output+0x200>)
 801b0d2:	4613      	mov	r3, r2
 801b0d4:	005b      	lsls	r3, r3, #1
 801b0d6:	4413      	add	r3, r2
 801b0d8:	00db      	lsls	r3, r3, #3
 801b0da:	440b      	add	r3, r1
 801b0dc:	3308      	adds	r3, #8
 801b0de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b0e0:	68fa      	ldr	r2, [r7, #12]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d117      	bne.n	801b116 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b0e6:	69bb      	ldr	r3, [r7, #24]
 801b0e8:	6819      	ldr	r1, [r3, #0]
 801b0ea:	7dfa      	ldrb	r2, [r7, #23]
 801b0ec:	481f      	ldr	r0, [pc, #124]	@ (801b16c <etharp_output+0x200>)
 801b0ee:	4613      	mov	r3, r2
 801b0f0:	005b      	lsls	r3, r3, #1
 801b0f2:	4413      	add	r3, r2
 801b0f4:	00db      	lsls	r3, r3, #3
 801b0f6:	4403      	add	r3, r0
 801b0f8:	3304      	adds	r3, #4
 801b0fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b0fc:	4299      	cmp	r1, r3
 801b0fe:	d10a      	bne.n	801b116 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b100:	4a19      	ldr	r2, [pc, #100]	@ (801b168 <etharp_output+0x1fc>)
 801b102:	7dfb      	ldrb	r3, [r7, #23]
 801b104:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b106:	7dfb      	ldrb	r3, [r7, #23]
 801b108:	461a      	mov	r2, r3
 801b10a:	68b9      	ldr	r1, [r7, #8]
 801b10c:	68f8      	ldr	r0, [r7, #12]
 801b10e:	f7ff fe93 	bl	801ae38 <etharp_output_to_arp_index>
 801b112:	4603      	mov	r3, r0
 801b114:	e018      	b.n	801b148 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b116:	7dfb      	ldrb	r3, [r7, #23]
 801b118:	3301      	adds	r3, #1
 801b11a:	75fb      	strb	r3, [r7, #23]
 801b11c:	7dfb      	ldrb	r3, [r7, #23]
 801b11e:	2b09      	cmp	r3, #9
 801b120:	d9ca      	bls.n	801b0b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b122:	68ba      	ldr	r2, [r7, #8]
 801b124:	69b9      	ldr	r1, [r7, #24]
 801b126:	68f8      	ldr	r0, [r7, #12]
 801b128:	f000 f822 	bl	801b170 <etharp_query>
 801b12c:	4603      	mov	r3, r0
 801b12e:	e00b      	b.n	801b148 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b13a:	9300      	str	r3, [sp, #0]
 801b13c:	69fb      	ldr	r3, [r7, #28]
 801b13e:	68b9      	ldr	r1, [r7, #8]
 801b140:	68f8      	ldr	r0, [r7, #12]
 801b142:	f001 fd45 	bl	801cbd0 <ethernet_output>
 801b146:	4603      	mov	r3, r0
}
 801b148:	4618      	mov	r0, r3
 801b14a:	3720      	adds	r7, #32
 801b14c:	46bd      	mov	sp, r7
 801b14e:	bd80      	pop	{r7, pc}
 801b150:	080214c0 	.word	0x080214c0
 801b154:	08021610 	.word	0x08021610
 801b158:	08021538 	.word	0x08021538
 801b15c:	08021660 	.word	0x08021660
 801b160:	08021600 	.word	0x08021600
 801b164:	080222c4 	.word	0x080222c4
 801b168:	20027780 	.word	0x20027780
 801b16c:	20027690 	.word	0x20027690

0801b170 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b08c      	sub	sp, #48	@ 0x30
 801b174:	af02      	add	r7, sp, #8
 801b176:	60f8      	str	r0, [r7, #12]
 801b178:	60b9      	str	r1, [r7, #8]
 801b17a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	3326      	adds	r3, #38	@ 0x26
 801b180:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b182:	23ff      	movs	r3, #255	@ 0xff
 801b184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b188:	2300      	movs	r3, #0
 801b18a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b18c:	68bb      	ldr	r3, [r7, #8]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	68f9      	ldr	r1, [r7, #12]
 801b192:	4618      	mov	r0, r3
 801b194:	f000 fe0e 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801b198:	4603      	mov	r3, r0
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d10c      	bne.n	801b1b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b1a6:	2be0      	cmp	r3, #224	@ 0xe0
 801b1a8:	d006      	beq.n	801b1b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b1aa:	68bb      	ldr	r3, [r7, #8]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d003      	beq.n	801b1b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d102      	bne.n	801b1be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b1b8:	f06f 030f 	mvn.w	r3, #15
 801b1bc:	e101      	b.n	801b3c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b1be:	68fa      	ldr	r2, [r7, #12]
 801b1c0:	2101      	movs	r1, #1
 801b1c2:	68b8      	ldr	r0, [r7, #8]
 801b1c4:	f7ff fb60 	bl	801a888 <etharp_find_entry>
 801b1c8:	4603      	mov	r3, r0
 801b1ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b1cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	da02      	bge.n	801b1da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b1d4:	8a7b      	ldrh	r3, [r7, #18]
 801b1d6:	b25b      	sxtb	r3, r3
 801b1d8:	e0f3      	b.n	801b3c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b1da:	8a7b      	ldrh	r3, [r7, #18]
 801b1dc:	2b7e      	cmp	r3, #126	@ 0x7e
 801b1de:	d906      	bls.n	801b1ee <etharp_query+0x7e>
 801b1e0:	4b7a      	ldr	r3, [pc, #488]	@ (801b3cc <etharp_query+0x25c>)
 801b1e2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b1e6:	497a      	ldr	r1, [pc, #488]	@ (801b3d0 <etharp_query+0x260>)
 801b1e8:	487a      	ldr	r0, [pc, #488]	@ (801b3d4 <etharp_query+0x264>)
 801b1ea:	f002 fead 	bl	801df48 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b1ee:	8a7b      	ldrh	r3, [r7, #18]
 801b1f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b1f2:	7c7a      	ldrb	r2, [r7, #17]
 801b1f4:	4978      	ldr	r1, [pc, #480]	@ (801b3d8 <etharp_query+0x268>)
 801b1f6:	4613      	mov	r3, r2
 801b1f8:	005b      	lsls	r3, r3, #1
 801b1fa:	4413      	add	r3, r2
 801b1fc:	00db      	lsls	r3, r3, #3
 801b1fe:	440b      	add	r3, r1
 801b200:	3314      	adds	r3, #20
 801b202:	781b      	ldrb	r3, [r3, #0]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d115      	bne.n	801b234 <etharp_query+0xc4>
    is_new_entry = 1;
 801b208:	2301      	movs	r3, #1
 801b20a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b20c:	7c7a      	ldrb	r2, [r7, #17]
 801b20e:	4972      	ldr	r1, [pc, #456]	@ (801b3d8 <etharp_query+0x268>)
 801b210:	4613      	mov	r3, r2
 801b212:	005b      	lsls	r3, r3, #1
 801b214:	4413      	add	r3, r2
 801b216:	00db      	lsls	r3, r3, #3
 801b218:	440b      	add	r3, r1
 801b21a:	3314      	adds	r3, #20
 801b21c:	2201      	movs	r2, #1
 801b21e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b220:	7c7a      	ldrb	r2, [r7, #17]
 801b222:	496d      	ldr	r1, [pc, #436]	@ (801b3d8 <etharp_query+0x268>)
 801b224:	4613      	mov	r3, r2
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	4413      	add	r3, r2
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	440b      	add	r3, r1
 801b22e:	3308      	adds	r3, #8
 801b230:	68fa      	ldr	r2, [r7, #12]
 801b232:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b234:	7c7a      	ldrb	r2, [r7, #17]
 801b236:	4968      	ldr	r1, [pc, #416]	@ (801b3d8 <etharp_query+0x268>)
 801b238:	4613      	mov	r3, r2
 801b23a:	005b      	lsls	r3, r3, #1
 801b23c:	4413      	add	r3, r2
 801b23e:	00db      	lsls	r3, r3, #3
 801b240:	440b      	add	r3, r1
 801b242:	3314      	adds	r3, #20
 801b244:	781b      	ldrb	r3, [r3, #0]
 801b246:	2b01      	cmp	r3, #1
 801b248:	d011      	beq.n	801b26e <etharp_query+0xfe>
 801b24a:	7c7a      	ldrb	r2, [r7, #17]
 801b24c:	4962      	ldr	r1, [pc, #392]	@ (801b3d8 <etharp_query+0x268>)
 801b24e:	4613      	mov	r3, r2
 801b250:	005b      	lsls	r3, r3, #1
 801b252:	4413      	add	r3, r2
 801b254:	00db      	lsls	r3, r3, #3
 801b256:	440b      	add	r3, r1
 801b258:	3314      	adds	r3, #20
 801b25a:	781b      	ldrb	r3, [r3, #0]
 801b25c:	2b01      	cmp	r3, #1
 801b25e:	d806      	bhi.n	801b26e <etharp_query+0xfe>
 801b260:	4b5a      	ldr	r3, [pc, #360]	@ (801b3cc <etharp_query+0x25c>)
 801b262:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b266:	495d      	ldr	r1, [pc, #372]	@ (801b3dc <etharp_query+0x26c>)
 801b268:	485a      	ldr	r0, [pc, #360]	@ (801b3d4 <etharp_query+0x264>)
 801b26a:	f002 fe6d 	bl	801df48 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b26e:	6a3b      	ldr	r3, [r7, #32]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d102      	bne.n	801b27a <etharp_query+0x10a>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d10c      	bne.n	801b294 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b27a:	68b9      	ldr	r1, [r7, #8]
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f000 f963 	bl	801b548 <etharp_request>
 801b282:	4603      	mov	r3, r0
 801b284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d102      	bne.n	801b294 <etharp_query+0x124>
      return result;
 801b28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b292:	e096      	b.n	801b3c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d106      	bne.n	801b2a8 <etharp_query+0x138>
 801b29a:	4b4c      	ldr	r3, [pc, #304]	@ (801b3cc <etharp_query+0x25c>)
 801b29c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b2a0:	494f      	ldr	r1, [pc, #316]	@ (801b3e0 <etharp_query+0x270>)
 801b2a2:	484c      	ldr	r0, [pc, #304]	@ (801b3d4 <etharp_query+0x264>)
 801b2a4:	f002 fe50 	bl	801df48 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b2a8:	7c7a      	ldrb	r2, [r7, #17]
 801b2aa:	494b      	ldr	r1, [pc, #300]	@ (801b3d8 <etharp_query+0x268>)
 801b2ac:	4613      	mov	r3, r2
 801b2ae:	005b      	lsls	r3, r3, #1
 801b2b0:	4413      	add	r3, r2
 801b2b2:	00db      	lsls	r3, r3, #3
 801b2b4:	440b      	add	r3, r1
 801b2b6:	3314      	adds	r3, #20
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	2b01      	cmp	r3, #1
 801b2bc:	d917      	bls.n	801b2ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b2be:	4a49      	ldr	r2, [pc, #292]	@ (801b3e4 <etharp_query+0x274>)
 801b2c0:	7c7b      	ldrb	r3, [r7, #17]
 801b2c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b2c4:	7c7a      	ldrb	r2, [r7, #17]
 801b2c6:	4613      	mov	r3, r2
 801b2c8:	005b      	lsls	r3, r3, #1
 801b2ca:	4413      	add	r3, r2
 801b2cc:	00db      	lsls	r3, r3, #3
 801b2ce:	3308      	adds	r3, #8
 801b2d0:	4a41      	ldr	r2, [pc, #260]	@ (801b3d8 <etharp_query+0x268>)
 801b2d2:	4413      	add	r3, r2
 801b2d4:	3304      	adds	r3, #4
 801b2d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b2da:	9200      	str	r2, [sp, #0]
 801b2dc:	697a      	ldr	r2, [r7, #20]
 801b2de:	6879      	ldr	r1, [r7, #4]
 801b2e0:	68f8      	ldr	r0, [r7, #12]
 801b2e2:	f001 fc75 	bl	801cbd0 <ethernet_output>
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b2ec:	e067      	b.n	801b3be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b2ee:	7c7a      	ldrb	r2, [r7, #17]
 801b2f0:	4939      	ldr	r1, [pc, #228]	@ (801b3d8 <etharp_query+0x268>)
 801b2f2:	4613      	mov	r3, r2
 801b2f4:	005b      	lsls	r3, r3, #1
 801b2f6:	4413      	add	r3, r2
 801b2f8:	00db      	lsls	r3, r3, #3
 801b2fa:	440b      	add	r3, r1
 801b2fc:	3314      	adds	r3, #20
 801b2fe:	781b      	ldrb	r3, [r3, #0]
 801b300:	2b01      	cmp	r3, #1
 801b302:	d15c      	bne.n	801b3be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b304:	2300      	movs	r3, #0
 801b306:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b30c:	e01c      	b.n	801b348 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b30e:	69fb      	ldr	r3, [r7, #28]
 801b310:	895a      	ldrh	r2, [r3, #10]
 801b312:	69fb      	ldr	r3, [r7, #28]
 801b314:	891b      	ldrh	r3, [r3, #8]
 801b316:	429a      	cmp	r2, r3
 801b318:	d10a      	bne.n	801b330 <etharp_query+0x1c0>
 801b31a:	69fb      	ldr	r3, [r7, #28]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d006      	beq.n	801b330 <etharp_query+0x1c0>
 801b322:	4b2a      	ldr	r3, [pc, #168]	@ (801b3cc <etharp_query+0x25c>)
 801b324:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b328:	492f      	ldr	r1, [pc, #188]	@ (801b3e8 <etharp_query+0x278>)
 801b32a:	482a      	ldr	r0, [pc, #168]	@ (801b3d4 <etharp_query+0x264>)
 801b32c:	f002 fe0c 	bl	801df48 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b330:	69fb      	ldr	r3, [r7, #28]
 801b332:	7b1b      	ldrb	r3, [r3, #12]
 801b334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d002      	beq.n	801b342 <etharp_query+0x1d2>
        copy_needed = 1;
 801b33c:	2301      	movs	r3, #1
 801b33e:	61bb      	str	r3, [r7, #24]
        break;
 801b340:	e005      	b.n	801b34e <etharp_query+0x1de>
      }
      p = p->next;
 801b342:	69fb      	ldr	r3, [r7, #28]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b348:	69fb      	ldr	r3, [r7, #28]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d1df      	bne.n	801b30e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b34e:	69bb      	ldr	r3, [r7, #24]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d007      	beq.n	801b364 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b354:	687a      	ldr	r2, [r7, #4]
 801b356:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b35a:	200e      	movs	r0, #14
 801b35c:	f7f9 fa4e 	bl	80147fc <pbuf_clone>
 801b360:	61f8      	str	r0, [r7, #28]
 801b362:	e004      	b.n	801b36e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b368:	69f8      	ldr	r0, [r7, #28]
 801b36a:	f7f9 f875 	bl	8014458 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b36e:	69fb      	ldr	r3, [r7, #28]
 801b370:	2b00      	cmp	r3, #0
 801b372:	d021      	beq.n	801b3b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b374:	7c7a      	ldrb	r2, [r7, #17]
 801b376:	4918      	ldr	r1, [pc, #96]	@ (801b3d8 <etharp_query+0x268>)
 801b378:	4613      	mov	r3, r2
 801b37a:	005b      	lsls	r3, r3, #1
 801b37c:	4413      	add	r3, r2
 801b37e:	00db      	lsls	r3, r3, #3
 801b380:	440b      	add	r3, r1
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d00a      	beq.n	801b39e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b388:	7c7a      	ldrb	r2, [r7, #17]
 801b38a:	4913      	ldr	r1, [pc, #76]	@ (801b3d8 <etharp_query+0x268>)
 801b38c:	4613      	mov	r3, r2
 801b38e:	005b      	lsls	r3, r3, #1
 801b390:	4413      	add	r3, r2
 801b392:	00db      	lsls	r3, r3, #3
 801b394:	440b      	add	r3, r1
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	4618      	mov	r0, r3
 801b39a:	f7f8 ffb7 	bl	801430c <pbuf_free>
      }
      arp_table[i].q = p;
 801b39e:	7c7a      	ldrb	r2, [r7, #17]
 801b3a0:	490d      	ldr	r1, [pc, #52]	@ (801b3d8 <etharp_query+0x268>)
 801b3a2:	4613      	mov	r3, r2
 801b3a4:	005b      	lsls	r3, r3, #1
 801b3a6:	4413      	add	r3, r2
 801b3a8:	00db      	lsls	r3, r3, #3
 801b3aa:	440b      	add	r3, r1
 801b3ac:	69fa      	ldr	r2, [r7, #28]
 801b3ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b3b6:	e002      	b.n	801b3be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b3b8:	23ff      	movs	r3, #255	@ 0xff
 801b3ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b3be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	3728      	adds	r7, #40	@ 0x28
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	080214c0 	.word	0x080214c0
 801b3d0:	0802166c 	.word	0x0802166c
 801b3d4:	08021538 	.word	0x08021538
 801b3d8:	20027690 	.word	0x20027690
 801b3dc:	0802167c 	.word	0x0802167c
 801b3e0:	08021660 	.word	0x08021660
 801b3e4:	20027780 	.word	0x20027780
 801b3e8:	080216a4 	.word	0x080216a4

0801b3ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b08a      	sub	sp, #40	@ 0x28
 801b3f0:	af02      	add	r7, sp, #8
 801b3f2:	60f8      	str	r0, [r7, #12]
 801b3f4:	60b9      	str	r1, [r7, #8]
 801b3f6:	607a      	str	r2, [r7, #4]
 801b3f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d106      	bne.n	801b412 <etharp_raw+0x26>
 801b404:	4b3a      	ldr	r3, [pc, #232]	@ (801b4f0 <etharp_raw+0x104>)
 801b406:	f240 4257 	movw	r2, #1111	@ 0x457
 801b40a:	493a      	ldr	r1, [pc, #232]	@ (801b4f4 <etharp_raw+0x108>)
 801b40c:	483a      	ldr	r0, [pc, #232]	@ (801b4f8 <etharp_raw+0x10c>)
 801b40e:	f002 fd9b 	bl	801df48 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b412:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b416:	211c      	movs	r1, #28
 801b418:	200e      	movs	r0, #14
 801b41a:	f7f8 fc93 	bl	8013d44 <pbuf_alloc>
 801b41e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b420:	69bb      	ldr	r3, [r7, #24]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d102      	bne.n	801b42c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b426:	f04f 33ff 	mov.w	r3, #4294967295
 801b42a:	e05d      	b.n	801b4e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b42c:	69bb      	ldr	r3, [r7, #24]
 801b42e:	895b      	ldrh	r3, [r3, #10]
 801b430:	2b1b      	cmp	r3, #27
 801b432:	d806      	bhi.n	801b442 <etharp_raw+0x56>
 801b434:	4b2e      	ldr	r3, [pc, #184]	@ (801b4f0 <etharp_raw+0x104>)
 801b436:	f240 4262 	movw	r2, #1122	@ 0x462
 801b43a:	4930      	ldr	r1, [pc, #192]	@ (801b4fc <etharp_raw+0x110>)
 801b43c:	482e      	ldr	r0, [pc, #184]	@ (801b4f8 <etharp_raw+0x10c>)
 801b43e:	f002 fd83 	bl	801df48 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b442:	69bb      	ldr	r3, [r7, #24]
 801b444:	685b      	ldr	r3, [r3, #4]
 801b446:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b448:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7f7 fb70 	bl	8012b30 <lwip_htons>
 801b450:	4603      	mov	r3, r0
 801b452:	461a      	mov	r2, r3
 801b454:	697b      	ldr	r3, [r7, #20]
 801b456:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b45e:	2b06      	cmp	r3, #6
 801b460:	d006      	beq.n	801b470 <etharp_raw+0x84>
 801b462:	4b23      	ldr	r3, [pc, #140]	@ (801b4f0 <etharp_raw+0x104>)
 801b464:	f240 4269 	movw	r2, #1129	@ 0x469
 801b468:	4925      	ldr	r1, [pc, #148]	@ (801b500 <etharp_raw+0x114>)
 801b46a:	4823      	ldr	r0, [pc, #140]	@ (801b4f8 <etharp_raw+0x10c>)
 801b46c:	f002 fd6c 	bl	801df48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b470:	697b      	ldr	r3, [r7, #20]
 801b472:	3308      	adds	r3, #8
 801b474:	2206      	movs	r2, #6
 801b476:	6839      	ldr	r1, [r7, #0]
 801b478:	4618      	mov	r0, r3
 801b47a:	f002 ff90 	bl	801e39e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	3312      	adds	r3, #18
 801b482:	2206      	movs	r2, #6
 801b484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b486:	4618      	mov	r0, r3
 801b488:	f002 ff89 	bl	801e39e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b48c:	697b      	ldr	r3, [r7, #20]
 801b48e:	330e      	adds	r3, #14
 801b490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b492:	6812      	ldr	r2, [r2, #0]
 801b494:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b496:	697b      	ldr	r3, [r7, #20]
 801b498:	3318      	adds	r3, #24
 801b49a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b49c:	6812      	ldr	r2, [r2, #0]
 801b49e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b4a0:	697b      	ldr	r3, [r7, #20]
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	701a      	strb	r2, [r3, #0]
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	f042 0201 	orr.w	r2, r2, #1
 801b4ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b4ae:	697b      	ldr	r3, [r7, #20]
 801b4b0:	2200      	movs	r2, #0
 801b4b2:	f042 0208 	orr.w	r2, r2, #8
 801b4b6:	709a      	strb	r2, [r3, #2]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	2206      	movs	r2, #6
 801b4c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b4c2:	697b      	ldr	r3, [r7, #20]
 801b4c4:	2204      	movs	r2, #4
 801b4c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b4c8:	f640 0306 	movw	r3, #2054	@ 0x806
 801b4cc:	9300      	str	r3, [sp, #0]
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	68ba      	ldr	r2, [r7, #8]
 801b4d2:	69b9      	ldr	r1, [r7, #24]
 801b4d4:	68f8      	ldr	r0, [r7, #12]
 801b4d6:	f001 fb7b 	bl	801cbd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b4da:	69b8      	ldr	r0, [r7, #24]
 801b4dc:	f7f8 ff16 	bl	801430c <pbuf_free>
  p = NULL;
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b4e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	3720      	adds	r7, #32
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	bd80      	pop	{r7, pc}
 801b4f0:	080214c0 	.word	0x080214c0
 801b4f4:	08021610 	.word	0x08021610
 801b4f8:	08021538 	.word	0x08021538
 801b4fc:	080216c0 	.word	0x080216c0
 801b500:	080216f4 	.word	0x080216f4

0801b504 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b088      	sub	sp, #32
 801b508:	af04      	add	r7, sp, #16
 801b50a:	60f8      	str	r0, [r7, #12]
 801b50c:	60b9      	str	r1, [r7, #8]
 801b50e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b520:	2201      	movs	r2, #1
 801b522:	9203      	str	r2, [sp, #12]
 801b524:	68ba      	ldr	r2, [r7, #8]
 801b526:	9202      	str	r2, [sp, #8]
 801b528:	4a06      	ldr	r2, [pc, #24]	@ (801b544 <etharp_request_dst+0x40>)
 801b52a:	9201      	str	r2, [sp, #4]
 801b52c:	9300      	str	r3, [sp, #0]
 801b52e:	4603      	mov	r3, r0
 801b530:	687a      	ldr	r2, [r7, #4]
 801b532:	68f8      	ldr	r0, [r7, #12]
 801b534:	f7ff ff5a 	bl	801b3ec <etharp_raw>
 801b538:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b53a:	4618      	mov	r0, r3
 801b53c:	3710      	adds	r7, #16
 801b53e:	46bd      	mov	sp, r7
 801b540:	bd80      	pop	{r7, pc}
 801b542:	bf00      	nop
 801b544:	080222cc 	.word	0x080222cc

0801b548 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b082      	sub	sp, #8
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	6078      	str	r0, [r7, #4]
 801b550:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b552:	4a05      	ldr	r2, [pc, #20]	@ (801b568 <etharp_request+0x20>)
 801b554:	6839      	ldr	r1, [r7, #0]
 801b556:	6878      	ldr	r0, [r7, #4]
 801b558:	f7ff ffd4 	bl	801b504 <etharp_request_dst>
 801b55c:	4603      	mov	r3, r0
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3708      	adds	r7, #8
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	080222c4 	.word	0x080222c4

0801b56c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b08e      	sub	sp, #56	@ 0x38
 801b570:	af04      	add	r7, sp, #16
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b576:	4b79      	ldr	r3, [pc, #484]	@ (801b75c <icmp_input+0x1f0>)
 801b578:	689b      	ldr	r3, [r3, #8]
 801b57a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	f003 030f 	and.w	r3, r3, #15
 801b584:	b2db      	uxtb	r3, r3
 801b586:	009b      	lsls	r3, r3, #2
 801b588:	b2db      	uxtb	r3, r3
 801b58a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b58c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b58e:	2b13      	cmp	r3, #19
 801b590:	f240 80cd 	bls.w	801b72e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	895b      	ldrh	r3, [r3, #10]
 801b598:	2b03      	cmp	r3, #3
 801b59a:	f240 80ca 	bls.w	801b732 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b5a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	f000 80b7 	beq.w	801b720 <icmp_input+0x1b4>
 801b5b2:	2b08      	cmp	r3, #8
 801b5b4:	f040 80b7 	bne.w	801b726 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b5b8:	4b69      	ldr	r3, [pc, #420]	@ (801b760 <icmp_input+0x1f4>)
 801b5ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5bc:	4b67      	ldr	r3, [pc, #412]	@ (801b75c <icmp_input+0x1f0>)
 801b5be:	695b      	ldr	r3, [r3, #20]
 801b5c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b5c4:	2be0      	cmp	r3, #224	@ 0xe0
 801b5c6:	f000 80bb 	beq.w	801b740 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b5ca:	4b64      	ldr	r3, [pc, #400]	@ (801b75c <icmp_input+0x1f0>)
 801b5cc:	695b      	ldr	r3, [r3, #20]
 801b5ce:	4a63      	ldr	r2, [pc, #396]	@ (801b75c <icmp_input+0x1f0>)
 801b5d0:	6812      	ldr	r2, [r2, #0]
 801b5d2:	4611      	mov	r1, r2
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f000 fbed 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801b5da:	4603      	mov	r3, r0
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	f040 80b1 	bne.w	801b744 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	891b      	ldrh	r3, [r3, #8]
 801b5e6:	2b07      	cmp	r3, #7
 801b5e8:	f240 80a5 	bls.w	801b736 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b5ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5ee:	330e      	adds	r3, #14
 801b5f0:	4619      	mov	r1, r3
 801b5f2:	6878      	ldr	r0, [r7, #4]
 801b5f4:	f7f8 fdf4 	bl	80141e0 <pbuf_add_header>
 801b5f8:	4603      	mov	r3, r0
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d04b      	beq.n	801b696 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	891a      	ldrh	r2, [r3, #8]
 801b602:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b604:	4413      	add	r3, r2
 801b606:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	891b      	ldrh	r3, [r3, #8]
 801b60c:	8b7a      	ldrh	r2, [r7, #26]
 801b60e:	429a      	cmp	r2, r3
 801b610:	f0c0 809a 	bcc.w	801b748 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b614:	8b7b      	ldrh	r3, [r7, #26]
 801b616:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b61a:	4619      	mov	r1, r3
 801b61c:	200e      	movs	r0, #14
 801b61e:	f7f8 fb91 	bl	8013d44 <pbuf_alloc>
 801b622:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	2b00      	cmp	r3, #0
 801b628:	f000 8090 	beq.w	801b74c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b62c:	697b      	ldr	r3, [r7, #20]
 801b62e:	895b      	ldrh	r3, [r3, #10]
 801b630:	461a      	mov	r2, r3
 801b632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b634:	3308      	adds	r3, #8
 801b636:	429a      	cmp	r2, r3
 801b638:	d203      	bcs.n	801b642 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b63a:	6978      	ldr	r0, [r7, #20]
 801b63c:	f7f8 fe66 	bl	801430c <pbuf_free>
          goto icmperr;
 801b640:	e085      	b.n	801b74e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b642:	697b      	ldr	r3, [r7, #20]
 801b644:	685b      	ldr	r3, [r3, #4]
 801b646:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b64a:	4618      	mov	r0, r3
 801b64c:	f002 fea7 	bl	801e39e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b650:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b652:	4619      	mov	r1, r3
 801b654:	6978      	ldr	r0, [r7, #20]
 801b656:	f7f8 fdd3 	bl	8014200 <pbuf_remove_header>
 801b65a:	4603      	mov	r3, r0
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d009      	beq.n	801b674 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b660:	4b40      	ldr	r3, [pc, #256]	@ (801b764 <icmp_input+0x1f8>)
 801b662:	22b6      	movs	r2, #182	@ 0xb6
 801b664:	4940      	ldr	r1, [pc, #256]	@ (801b768 <icmp_input+0x1fc>)
 801b666:	4841      	ldr	r0, [pc, #260]	@ (801b76c <icmp_input+0x200>)
 801b668:	f002 fc6e 	bl	801df48 <iprintf>
          pbuf_free(r);
 801b66c:	6978      	ldr	r0, [r7, #20]
 801b66e:	f7f8 fe4d 	bl	801430c <pbuf_free>
          goto icmperr;
 801b672:	e06c      	b.n	801b74e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b674:	6879      	ldr	r1, [r7, #4]
 801b676:	6978      	ldr	r0, [r7, #20]
 801b678:	f7f8 ff7c 	bl	8014574 <pbuf_copy>
 801b67c:	4603      	mov	r3, r0
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d003      	beq.n	801b68a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b682:	6978      	ldr	r0, [r7, #20]
 801b684:	f7f8 fe42 	bl	801430c <pbuf_free>
          goto icmperr;
 801b688:	e061      	b.n	801b74e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b68a:	6878      	ldr	r0, [r7, #4]
 801b68c:	f7f8 fe3e 	bl	801430c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	607b      	str	r3, [r7, #4]
 801b694:	e00f      	b.n	801b6b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b696:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b698:	330e      	adds	r3, #14
 801b69a:	4619      	mov	r1, r3
 801b69c:	6878      	ldr	r0, [r7, #4]
 801b69e:	f7f8 fdaf 	bl	8014200 <pbuf_remove_header>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d006      	beq.n	801b6b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b6a8:	4b2e      	ldr	r3, [pc, #184]	@ (801b764 <icmp_input+0x1f8>)
 801b6aa:	22c7      	movs	r2, #199	@ 0xc7
 801b6ac:	4930      	ldr	r1, [pc, #192]	@ (801b770 <icmp_input+0x204>)
 801b6ae:	482f      	ldr	r0, [pc, #188]	@ (801b76c <icmp_input+0x200>)
 801b6b0:	f002 fc4a 	bl	801df48 <iprintf>
          goto icmperr;
 801b6b4:	e04b      	b.n	801b74e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	685b      	ldr	r3, [r3, #4]
 801b6ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b6bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b6be:	4619      	mov	r1, r3
 801b6c0:	6878      	ldr	r0, [r7, #4]
 801b6c2:	f7f8 fd8d 	bl	80141e0 <pbuf_add_header>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d12b      	bne.n	801b724 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	685b      	ldr	r3, [r3, #4]
 801b6d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b6d2:	69fb      	ldr	r3, [r7, #28]
 801b6d4:	681a      	ldr	r2, [r3, #0]
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b6da:	4b20      	ldr	r3, [pc, #128]	@ (801b75c <icmp_input+0x1f0>)
 801b6dc:	691a      	ldr	r2, [r3, #16]
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b6e2:	693b      	ldr	r3, [r7, #16]
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b6e8:	693b      	ldr	r3, [r7, #16]
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	709a      	strb	r2, [r3, #2]
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	22ff      	movs	r2, #255	@ 0xff
 801b6f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	729a      	strb	r2, [r3, #10]
 801b6fe:	2200      	movs	r2, #0
 801b700:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b702:	683b      	ldr	r3, [r7, #0]
 801b704:	9302      	str	r3, [sp, #8]
 801b706:	2301      	movs	r3, #1
 801b708:	9301      	str	r3, [sp, #4]
 801b70a:	2300      	movs	r3, #0
 801b70c:	9300      	str	r3, [sp, #0]
 801b70e:	23ff      	movs	r3, #255	@ 0xff
 801b710:	2200      	movs	r2, #0
 801b712:	69f9      	ldr	r1, [r7, #28]
 801b714:	6878      	ldr	r0, [r7, #4]
 801b716:	f000 fa75 	bl	801bc04 <ip4_output_if>
 801b71a:	4603      	mov	r3, r0
 801b71c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b71e:	e001      	b.n	801b724 <icmp_input+0x1b8>
      break;
 801b720:	bf00      	nop
 801b722:	e000      	b.n	801b726 <icmp_input+0x1ba>
      break;
 801b724:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7f8 fdf0 	bl	801430c <pbuf_free>
  return;
 801b72c:	e013      	b.n	801b756 <icmp_input+0x1ea>
    goto lenerr;
 801b72e:	bf00      	nop
 801b730:	e002      	b.n	801b738 <icmp_input+0x1cc>
    goto lenerr;
 801b732:	bf00      	nop
 801b734:	e000      	b.n	801b738 <icmp_input+0x1cc>
        goto lenerr;
 801b736:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b738:	6878      	ldr	r0, [r7, #4]
 801b73a:	f7f8 fde7 	bl	801430c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b73e:	e00a      	b.n	801b756 <icmp_input+0x1ea>
        goto icmperr;
 801b740:	bf00      	nop
 801b742:	e004      	b.n	801b74e <icmp_input+0x1e2>
        goto icmperr;
 801b744:	bf00      	nop
 801b746:	e002      	b.n	801b74e <icmp_input+0x1e2>
          goto icmperr;
 801b748:	bf00      	nop
 801b74a:	e000      	b.n	801b74e <icmp_input+0x1e2>
          goto icmperr;
 801b74c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b74e:	6878      	ldr	r0, [r7, #4]
 801b750:	f7f8 fddc 	bl	801430c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b754:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b756:	3728      	adds	r7, #40	@ 0x28
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}
 801b75c:	20024530 	.word	0x20024530
 801b760:	20024544 	.word	0x20024544
 801b764:	08021738 	.word	0x08021738
 801b768:	08021770 	.word	0x08021770
 801b76c:	080217a8 	.word	0x080217a8
 801b770:	080217d0 	.word	0x080217d0

0801b774 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b082      	sub	sp, #8
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
 801b77c:	460b      	mov	r3, r1
 801b77e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b780:	78fb      	ldrb	r3, [r7, #3]
 801b782:	461a      	mov	r2, r3
 801b784:	2103      	movs	r1, #3
 801b786:	6878      	ldr	r0, [r7, #4]
 801b788:	f000 f814 	bl	801b7b4 <icmp_send_response>
}
 801b78c:	bf00      	nop
 801b78e:	3708      	adds	r7, #8
 801b790:	46bd      	mov	sp, r7
 801b792:	bd80      	pop	{r7, pc}

0801b794 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b082      	sub	sp, #8
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
 801b79c:	460b      	mov	r3, r1
 801b79e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b7a0:	78fb      	ldrb	r3, [r7, #3]
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	210b      	movs	r1, #11
 801b7a6:	6878      	ldr	r0, [r7, #4]
 801b7a8:	f000 f804 	bl	801b7b4 <icmp_send_response>
}
 801b7ac:	bf00      	nop
 801b7ae:	3708      	adds	r7, #8
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	bd80      	pop	{r7, pc}

0801b7b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b08c      	sub	sp, #48	@ 0x30
 801b7b8:	af04      	add	r7, sp, #16
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	460b      	mov	r3, r1
 801b7be:	70fb      	strb	r3, [r7, #3]
 801b7c0:	4613      	mov	r3, r2
 801b7c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b7c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7c8:	2124      	movs	r1, #36	@ 0x24
 801b7ca:	2022      	movs	r0, #34	@ 0x22
 801b7cc:	f7f8 faba 	bl	8013d44 <pbuf_alloc>
 801b7d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b7d2:	69fb      	ldr	r3, [r7, #28]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d04c      	beq.n	801b872 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b7d8:	69fb      	ldr	r3, [r7, #28]
 801b7da:	895b      	ldrh	r3, [r3, #10]
 801b7dc:	2b23      	cmp	r3, #35	@ 0x23
 801b7de:	d806      	bhi.n	801b7ee <icmp_send_response+0x3a>
 801b7e0:	4b26      	ldr	r3, [pc, #152]	@ (801b87c <icmp_send_response+0xc8>)
 801b7e2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b7e6:	4926      	ldr	r1, [pc, #152]	@ (801b880 <icmp_send_response+0xcc>)
 801b7e8:	4826      	ldr	r0, [pc, #152]	@ (801b884 <icmp_send_response+0xd0>)
 801b7ea:	f002 fbad 	bl	801df48 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	685b      	ldr	r3, [r3, #4]
 801b7f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b7f4:	69fb      	ldr	r3, [r7, #28]
 801b7f6:	685b      	ldr	r3, [r3, #4]
 801b7f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b7fa:	697b      	ldr	r3, [r7, #20]
 801b7fc:	78fa      	ldrb	r2, [r7, #3]
 801b7fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	78ba      	ldrb	r2, [r7, #2]
 801b804:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b806:	697b      	ldr	r3, [r7, #20]
 801b808:	2200      	movs	r2, #0
 801b80a:	711a      	strb	r2, [r3, #4]
 801b80c:	2200      	movs	r2, #0
 801b80e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	2200      	movs	r2, #0
 801b814:	719a      	strb	r2, [r3, #6]
 801b816:	2200      	movs	r2, #0
 801b818:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b81a:	69fb      	ldr	r3, [r7, #28]
 801b81c:	685b      	ldr	r3, [r3, #4]
 801b81e:	f103 0008 	add.w	r0, r3, #8
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	221c      	movs	r2, #28
 801b828:	4619      	mov	r1, r3
 801b82a:	f002 fdb8 	bl	801e39e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b82e:	69bb      	ldr	r3, [r7, #24]
 801b830:	68db      	ldr	r3, [r3, #12]
 801b832:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b834:	f107 030c 	add.w	r3, r7, #12
 801b838:	4618      	mov	r0, r3
 801b83a:	f000 f825 	bl	801b888 <ip4_route>
 801b83e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b840:	693b      	ldr	r3, [r7, #16]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d011      	beq.n	801b86a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	2200      	movs	r2, #0
 801b84a:	709a      	strb	r2, [r3, #2]
 801b84c:	2200      	movs	r2, #0
 801b84e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b850:	f107 020c 	add.w	r2, r7, #12
 801b854:	693b      	ldr	r3, [r7, #16]
 801b856:	9302      	str	r3, [sp, #8]
 801b858:	2301      	movs	r3, #1
 801b85a:	9301      	str	r3, [sp, #4]
 801b85c:	2300      	movs	r3, #0
 801b85e:	9300      	str	r3, [sp, #0]
 801b860:	23ff      	movs	r3, #255	@ 0xff
 801b862:	2100      	movs	r1, #0
 801b864:	69f8      	ldr	r0, [r7, #28]
 801b866:	f000 f9cd 	bl	801bc04 <ip4_output_if>
  }
  pbuf_free(q);
 801b86a:	69f8      	ldr	r0, [r7, #28]
 801b86c:	f7f8 fd4e 	bl	801430c <pbuf_free>
 801b870:	e000      	b.n	801b874 <icmp_send_response+0xc0>
    return;
 801b872:	bf00      	nop
}
 801b874:	3720      	adds	r7, #32
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	08021738 	.word	0x08021738
 801b880:	08021804 	.word	0x08021804
 801b884:	080217a8 	.word	0x080217a8

0801b888 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b888:	b480      	push	{r7}
 801b88a:	b085      	sub	sp, #20
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b890:	4b33      	ldr	r3, [pc, #204]	@ (801b960 <ip4_route+0xd8>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	60fb      	str	r3, [r7, #12]
 801b896:	e036      	b.n	801b906 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b89e:	f003 0301 	and.w	r3, r3, #1
 801b8a2:	b2db      	uxtb	r3, r3
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d02b      	beq.n	801b900 <ip4_route+0x78>
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b8ae:	089b      	lsrs	r3, r3, #2
 801b8b0:	f003 0301 	and.w	r3, r3, #1
 801b8b4:	b2db      	uxtb	r3, r3
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d022      	beq.n	801b900 <ip4_route+0x78>
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	3304      	adds	r3, #4
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d01d      	beq.n	801b900 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	681a      	ldr	r2, [r3, #0]
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	3304      	adds	r3, #4
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	405a      	eors	r2, r3
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	3308      	adds	r3, #8
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4013      	ands	r3, r2
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d101      	bne.n	801b8e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	e038      	b.n	801b952 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b8e6:	f003 0302 	and.w	r3, r3, #2
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d108      	bne.n	801b900 <ip4_route+0x78>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681a      	ldr	r2, [r3, #0]
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	330c      	adds	r3, #12
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	429a      	cmp	r2, r3
 801b8fa:	d101      	bne.n	801b900 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	e028      	b.n	801b952 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	60fb      	str	r3, [r7, #12]
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d1c5      	bne.n	801b898 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b90c:	4b15      	ldr	r3, [pc, #84]	@ (801b964 <ip4_route+0xdc>)
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d01a      	beq.n	801b94a <ip4_route+0xc2>
 801b914:	4b13      	ldr	r3, [pc, #76]	@ (801b964 <ip4_route+0xdc>)
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b91c:	f003 0301 	and.w	r3, r3, #1
 801b920:	2b00      	cmp	r3, #0
 801b922:	d012      	beq.n	801b94a <ip4_route+0xc2>
 801b924:	4b0f      	ldr	r3, [pc, #60]	@ (801b964 <ip4_route+0xdc>)
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b92c:	f003 0304 	and.w	r3, r3, #4
 801b930:	2b00      	cmp	r3, #0
 801b932:	d00a      	beq.n	801b94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b934:	4b0b      	ldr	r3, [pc, #44]	@ (801b964 <ip4_route+0xdc>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	3304      	adds	r3, #4
 801b93a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d004      	beq.n	801b94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	b2db      	uxtb	r3, r3
 801b946:	2b7f      	cmp	r3, #127	@ 0x7f
 801b948:	d101      	bne.n	801b94e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b94a:	2300      	movs	r3, #0
 801b94c:	e001      	b.n	801b952 <ip4_route+0xca>
  }

  return netif_default;
 801b94e:	4b05      	ldr	r3, [pc, #20]	@ (801b964 <ip4_route+0xdc>)
 801b950:	681b      	ldr	r3, [r3, #0]
}
 801b952:	4618      	mov	r0, r3
 801b954:	3714      	adds	r7, #20
 801b956:	46bd      	mov	sp, r7
 801b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b95c:	4770      	bx	lr
 801b95e:	bf00      	nop
 801b960:	20027624 	.word	0x20027624
 801b964:	20027628 	.word	0x20027628

0801b968 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b082      	sub	sp, #8
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b976:	f003 0301 	and.w	r3, r3, #1
 801b97a:	b2db      	uxtb	r3, r3
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d016      	beq.n	801b9ae <ip4_input_accept+0x46>
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	3304      	adds	r3, #4
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d011      	beq.n	801b9ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b98a:	4b0b      	ldr	r3, [pc, #44]	@ (801b9b8 <ip4_input_accept+0x50>)
 801b98c:	695a      	ldr	r2, [r3, #20]
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	3304      	adds	r3, #4
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	429a      	cmp	r2, r3
 801b996:	d008      	beq.n	801b9aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b998:	4b07      	ldr	r3, [pc, #28]	@ (801b9b8 <ip4_input_accept+0x50>)
 801b99a:	695b      	ldr	r3, [r3, #20]
 801b99c:	6879      	ldr	r1, [r7, #4]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f000 fa08 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801b9a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d001      	beq.n	801b9ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	e000      	b.n	801b9b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b9ae:	2300      	movs	r3, #0
}
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	3708      	adds	r7, #8
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	bd80      	pop	{r7, pc}
 801b9b8:	20024530 	.word	0x20024530

0801b9bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b086      	sub	sp, #24
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
 801b9c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	685b      	ldr	r3, [r3, #4]
 801b9ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	091b      	lsrs	r3, r3, #4
 801b9d2:	b2db      	uxtb	r3, r3
 801b9d4:	2b04      	cmp	r3, #4
 801b9d6:	d004      	beq.n	801b9e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b9d8:	6878      	ldr	r0, [r7, #4]
 801b9da:	f7f8 fc97 	bl	801430c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b9de:	2300      	movs	r3, #0
 801b9e0:	e107      	b.n	801bbf2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	781b      	ldrb	r3, [r3, #0]
 801b9e6:	f003 030f 	and.w	r3, r3, #15
 801b9ea:	b2db      	uxtb	r3, r3
 801b9ec:	009b      	lsls	r3, r3, #2
 801b9ee:	b2db      	uxtb	r3, r3
 801b9f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	885b      	ldrh	r3, [r3, #2]
 801b9f6:	b29b      	uxth	r3, r3
 801b9f8:	4618      	mov	r0, r3
 801b9fa:	f7f7 f899 	bl	8012b30 <lwip_htons>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	891b      	ldrh	r3, [r3, #8]
 801ba06:	89ba      	ldrh	r2, [r7, #12]
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d204      	bcs.n	801ba16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ba0c:	89bb      	ldrh	r3, [r7, #12]
 801ba0e:	4619      	mov	r1, r3
 801ba10:	6878      	ldr	r0, [r7, #4]
 801ba12:	f7f8 faf5 	bl	8014000 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	895b      	ldrh	r3, [r3, #10]
 801ba1a:	89fa      	ldrh	r2, [r7, #14]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	d807      	bhi.n	801ba30 <ip4_input+0x74>
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	891b      	ldrh	r3, [r3, #8]
 801ba24:	89ba      	ldrh	r2, [r7, #12]
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d802      	bhi.n	801ba30 <ip4_input+0x74>
 801ba2a:	89fb      	ldrh	r3, [r7, #14]
 801ba2c:	2b13      	cmp	r3, #19
 801ba2e:	d804      	bhi.n	801ba3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ba30:	6878      	ldr	r0, [r7, #4]
 801ba32:	f7f8 fc6b 	bl	801430c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ba36:	2300      	movs	r3, #0
 801ba38:	e0db      	b.n	801bbf2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	691b      	ldr	r3, [r3, #16]
 801ba3e:	4a6f      	ldr	r2, [pc, #444]	@ (801bbfc <ip4_input+0x240>)
 801ba40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ba42:	697b      	ldr	r3, [r7, #20]
 801ba44:	68db      	ldr	r3, [r3, #12]
 801ba46:	4a6d      	ldr	r2, [pc, #436]	@ (801bbfc <ip4_input+0x240>)
 801ba48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ba4a:	4b6c      	ldr	r3, [pc, #432]	@ (801bbfc <ip4_input+0x240>)
 801ba4c:	695b      	ldr	r3, [r3, #20]
 801ba4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba52:	2be0      	cmp	r3, #224	@ 0xe0
 801ba54:	d112      	bne.n	801ba7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ba56:	683b      	ldr	r3, [r7, #0]
 801ba58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba5c:	f003 0301 	and.w	r3, r3, #1
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d007      	beq.n	801ba76 <ip4_input+0xba>
 801ba66:	683b      	ldr	r3, [r7, #0]
 801ba68:	3304      	adds	r3, #4
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d002      	beq.n	801ba76 <ip4_input+0xba>
      netif = inp;
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	613b      	str	r3, [r7, #16]
 801ba74:	e02a      	b.n	801bacc <ip4_input+0x110>
    } else {
      netif = NULL;
 801ba76:	2300      	movs	r3, #0
 801ba78:	613b      	str	r3, [r7, #16]
 801ba7a:	e027      	b.n	801bacc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ba7c:	6838      	ldr	r0, [r7, #0]
 801ba7e:	f7ff ff73 	bl	801b968 <ip4_input_accept>
 801ba82:	4603      	mov	r3, r0
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d002      	beq.n	801ba8e <ip4_input+0xd2>
      netif = inp;
 801ba88:	683b      	ldr	r3, [r7, #0]
 801ba8a:	613b      	str	r3, [r7, #16]
 801ba8c:	e01e      	b.n	801bacc <ip4_input+0x110>
    } else {
      netif = NULL;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ba92:	4b5a      	ldr	r3, [pc, #360]	@ (801bbfc <ip4_input+0x240>)
 801ba94:	695b      	ldr	r3, [r3, #20]
 801ba96:	b2db      	uxtb	r3, r3
 801ba98:	2b7f      	cmp	r3, #127	@ 0x7f
 801ba9a:	d017      	beq.n	801bacc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ba9c:	4b58      	ldr	r3, [pc, #352]	@ (801bc00 <ip4_input+0x244>)
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	613b      	str	r3, [r7, #16]
 801baa2:	e00e      	b.n	801bac2 <ip4_input+0x106>
          if (netif == inp) {
 801baa4:	693a      	ldr	r2, [r7, #16]
 801baa6:	683b      	ldr	r3, [r7, #0]
 801baa8:	429a      	cmp	r2, r3
 801baaa:	d006      	beq.n	801baba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801baac:	6938      	ldr	r0, [r7, #16]
 801baae:	f7ff ff5b 	bl	801b968 <ip4_input_accept>
 801bab2:	4603      	mov	r3, r0
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d108      	bne.n	801baca <ip4_input+0x10e>
 801bab8:	e000      	b.n	801babc <ip4_input+0x100>
            continue;
 801baba:	bf00      	nop
        NETIF_FOREACH(netif) {
 801babc:	693b      	ldr	r3, [r7, #16]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	613b      	str	r3, [r7, #16]
 801bac2:	693b      	ldr	r3, [r7, #16]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d1ed      	bne.n	801baa4 <ip4_input+0xe8>
 801bac8:	e000      	b.n	801bacc <ip4_input+0x110>
            break;
 801baca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bacc:	4b4b      	ldr	r3, [pc, #300]	@ (801bbfc <ip4_input+0x240>)
 801bace:	691b      	ldr	r3, [r3, #16]
 801bad0:	6839      	ldr	r1, [r7, #0]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f000 f96e 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801bad8:	4603      	mov	r3, r0
 801bada:	2b00      	cmp	r3, #0
 801badc:	d105      	bne.n	801baea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bade:	4b47      	ldr	r3, [pc, #284]	@ (801bbfc <ip4_input+0x240>)
 801bae0:	691b      	ldr	r3, [r3, #16]
 801bae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bae6:	2be0      	cmp	r3, #224	@ 0xe0
 801bae8:	d104      	bne.n	801baf4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801baea:	6878      	ldr	r0, [r7, #4]
 801baec:	f7f8 fc0e 	bl	801430c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801baf0:	2300      	movs	r3, #0
 801baf2:	e07e      	b.n	801bbf2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d104      	bne.n	801bb04 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bafa:	6878      	ldr	r0, [r7, #4]
 801bafc:	f7f8 fc06 	bl	801430c <pbuf_free>
    return ERR_OK;
 801bb00:	2300      	movs	r3, #0
 801bb02:	e076      	b.n	801bbf2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	88db      	ldrh	r3, [r3, #6]
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	461a      	mov	r2, r3
 801bb0c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bb10:	4013      	ands	r3, r2
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d00b      	beq.n	801bb2e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bb16:	6878      	ldr	r0, [r7, #4]
 801bb18:	f000 fc92 	bl	801c440 <ip4_reass>
 801bb1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d101      	bne.n	801bb28 <ip4_input+0x16c>
      return ERR_OK;
 801bb24:	2300      	movs	r3, #0
 801bb26:	e064      	b.n	801bbf2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	685b      	ldr	r3, [r3, #4]
 801bb2c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bb2e:	4a33      	ldr	r2, [pc, #204]	@ (801bbfc <ip4_input+0x240>)
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bb34:	4a31      	ldr	r2, [pc, #196]	@ (801bbfc <ip4_input+0x240>)
 801bb36:	683b      	ldr	r3, [r7, #0]
 801bb38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bb3a:	4a30      	ldr	r2, [pc, #192]	@ (801bbfc <ip4_input+0x240>)
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bb40:	697b      	ldr	r3, [r7, #20]
 801bb42:	781b      	ldrb	r3, [r3, #0]
 801bb44:	f003 030f 	and.w	r3, r3, #15
 801bb48:	b2db      	uxtb	r3, r3
 801bb4a:	009b      	lsls	r3, r3, #2
 801bb4c:	b2db      	uxtb	r3, r3
 801bb4e:	461a      	mov	r2, r3
 801bb50:	4b2a      	ldr	r3, [pc, #168]	@ (801bbfc <ip4_input+0x240>)
 801bb52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bb54:	89fb      	ldrh	r3, [r7, #14]
 801bb56:	4619      	mov	r1, r3
 801bb58:	6878      	ldr	r0, [r7, #4]
 801bb5a:	f7f8 fb51 	bl	8014200 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bb5e:	697b      	ldr	r3, [r7, #20]
 801bb60:	7a5b      	ldrb	r3, [r3, #9]
 801bb62:	2b11      	cmp	r3, #17
 801bb64:	d006      	beq.n	801bb74 <ip4_input+0x1b8>
 801bb66:	2b11      	cmp	r3, #17
 801bb68:	dc13      	bgt.n	801bb92 <ip4_input+0x1d6>
 801bb6a:	2b01      	cmp	r3, #1
 801bb6c:	d00c      	beq.n	801bb88 <ip4_input+0x1cc>
 801bb6e:	2b06      	cmp	r3, #6
 801bb70:	d005      	beq.n	801bb7e <ip4_input+0x1c2>
 801bb72:	e00e      	b.n	801bb92 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bb74:	6839      	ldr	r1, [r7, #0]
 801bb76:	6878      	ldr	r0, [r7, #4]
 801bb78:	f7fe f9f2 	bl	8019f60 <udp_input>
        break;
 801bb7c:	e026      	b.n	801bbcc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bb7e:	6839      	ldr	r1, [r7, #0]
 801bb80:	6878      	ldr	r0, [r7, #4]
 801bb82:	f7fa fa09 	bl	8015f98 <tcp_input>
        break;
 801bb86:	e021      	b.n	801bbcc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bb88:	6839      	ldr	r1, [r7, #0]
 801bb8a:	6878      	ldr	r0, [r7, #4]
 801bb8c:	f7ff fcee 	bl	801b56c <icmp_input>
        break;
 801bb90:	e01c      	b.n	801bbcc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bb92:	4b1a      	ldr	r3, [pc, #104]	@ (801bbfc <ip4_input+0x240>)
 801bb94:	695b      	ldr	r3, [r3, #20]
 801bb96:	6939      	ldr	r1, [r7, #16]
 801bb98:	4618      	mov	r0, r3
 801bb9a:	f000 f90b 	bl	801bdb4 <ip4_addr_isbroadcast_u32>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d10f      	bne.n	801bbc4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bba4:	4b15      	ldr	r3, [pc, #84]	@ (801bbfc <ip4_input+0x240>)
 801bba6:	695b      	ldr	r3, [r3, #20]
 801bba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bbac:	2be0      	cmp	r3, #224	@ 0xe0
 801bbae:	d009      	beq.n	801bbc4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bbb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	f7f8 fb95 	bl	80142e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bbbc:	2102      	movs	r1, #2
 801bbbe:	6878      	ldr	r0, [r7, #4]
 801bbc0:	f7ff fdd8 	bl	801b774 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bbc4:	6878      	ldr	r0, [r7, #4]
 801bbc6:	f7f8 fba1 	bl	801430c <pbuf_free>
        break;
 801bbca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (801bbfc <ip4_input+0x240>)
 801bbce:	2200      	movs	r2, #0
 801bbd0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (801bbfc <ip4_input+0x240>)
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bbd8:	4b08      	ldr	r3, [pc, #32]	@ (801bbfc <ip4_input+0x240>)
 801bbda:	2200      	movs	r2, #0
 801bbdc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bbde:	4b07      	ldr	r3, [pc, #28]	@ (801bbfc <ip4_input+0x240>)
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bbe4:	4b05      	ldr	r3, [pc, #20]	@ (801bbfc <ip4_input+0x240>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bbea:	4b04      	ldr	r3, [pc, #16]	@ (801bbfc <ip4_input+0x240>)
 801bbec:	2200      	movs	r2, #0
 801bbee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bbf0:	2300      	movs	r3, #0
}
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	3718      	adds	r7, #24
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	bd80      	pop	{r7, pc}
 801bbfa:	bf00      	nop
 801bbfc:	20024530 	.word	0x20024530
 801bc00:	20027624 	.word	0x20027624

0801bc04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b08a      	sub	sp, #40	@ 0x28
 801bc08:	af04      	add	r7, sp, #16
 801bc0a:	60f8      	str	r0, [r7, #12]
 801bc0c:	60b9      	str	r1, [r7, #8]
 801bc0e:	607a      	str	r2, [r7, #4]
 801bc10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d009      	beq.n	801bc30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bc1c:	68bb      	ldr	r3, [r7, #8]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d003      	beq.n	801bc2a <ip4_output_if+0x26>
 801bc22:	68bb      	ldr	r3, [r7, #8]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d102      	bne.n	801bc30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc2c:	3304      	adds	r3, #4
 801bc2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bc30:	78fa      	ldrb	r2, [r7, #3]
 801bc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc34:	9302      	str	r3, [sp, #8]
 801bc36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bc3a:	9301      	str	r3, [sp, #4]
 801bc3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bc40:	9300      	str	r3, [sp, #0]
 801bc42:	4613      	mov	r3, r2
 801bc44:	687a      	ldr	r2, [r7, #4]
 801bc46:	6979      	ldr	r1, [r7, #20]
 801bc48:	68f8      	ldr	r0, [r7, #12]
 801bc4a:	f000 f805 	bl	801bc58 <ip4_output_if_src>
 801bc4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801bc50:	4618      	mov	r0, r3
 801bc52:	3718      	adds	r7, #24
 801bc54:	46bd      	mov	sp, r7
 801bc56:	bd80      	pop	{r7, pc}

0801bc58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b088      	sub	sp, #32
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	60f8      	str	r0, [r7, #12]
 801bc60:	60b9      	str	r1, [r7, #8]
 801bc62:	607a      	str	r2, [r7, #4]
 801bc64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	7b9b      	ldrb	r3, [r3, #14]
 801bc6a:	2b01      	cmp	r3, #1
 801bc6c:	d006      	beq.n	801bc7c <ip4_output_if_src+0x24>
 801bc6e:	4b4b      	ldr	r3, [pc, #300]	@ (801bd9c <ip4_output_if_src+0x144>)
 801bc70:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801bc74:	494a      	ldr	r1, [pc, #296]	@ (801bda0 <ip4_output_if_src+0x148>)
 801bc76:	484b      	ldr	r0, [pc, #300]	@ (801bda4 <ip4_output_if_src+0x14c>)
 801bc78:	f002 f966 	bl	801df48 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d060      	beq.n	801bd44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801bc82:	2314      	movs	r3, #20
 801bc84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801bc86:	2114      	movs	r1, #20
 801bc88:	68f8      	ldr	r0, [r7, #12]
 801bc8a:	f7f8 faa9 	bl	80141e0 <pbuf_add_header>
 801bc8e:	4603      	mov	r3, r0
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d002      	beq.n	801bc9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bc94:	f06f 0301 	mvn.w	r3, #1
 801bc98:	e07c      	b.n	801bd94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	685b      	ldr	r3, [r3, #4]
 801bc9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	895b      	ldrh	r3, [r3, #10]
 801bca4:	2b13      	cmp	r3, #19
 801bca6:	d806      	bhi.n	801bcb6 <ip4_output_if_src+0x5e>
 801bca8:	4b3c      	ldr	r3, [pc, #240]	@ (801bd9c <ip4_output_if_src+0x144>)
 801bcaa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bcae:	493e      	ldr	r1, [pc, #248]	@ (801bda8 <ip4_output_if_src+0x150>)
 801bcb0:	483c      	ldr	r0, [pc, #240]	@ (801bda4 <ip4_output_if_src+0x14c>)
 801bcb2:	f002 f949 	bl	801df48 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bcb6:	69fb      	ldr	r3, [r7, #28]
 801bcb8:	78fa      	ldrb	r2, [r7, #3]
 801bcba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801bcbc:	69fb      	ldr	r3, [r7, #28]
 801bcbe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bcc2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	681a      	ldr	r2, [r3, #0]
 801bcc8:	69fb      	ldr	r3, [r7, #28]
 801bcca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bccc:	8b7b      	ldrh	r3, [r7, #26]
 801bcce:	089b      	lsrs	r3, r3, #2
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	b2db      	uxtb	r3, r3
 801bcd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bcd8:	b2da      	uxtb	r2, r3
 801bcda:	69fb      	ldr	r3, [r7, #28]
 801bcdc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801bcde:	69fb      	ldr	r3, [r7, #28]
 801bce0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bce4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	891b      	ldrh	r3, [r3, #8]
 801bcea:	4618      	mov	r0, r3
 801bcec:	f7f6 ff20 	bl	8012b30 <lwip_htons>
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	461a      	mov	r2, r3
 801bcf4:	69fb      	ldr	r3, [r7, #28]
 801bcf6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bcf8:	69fb      	ldr	r3, [r7, #28]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	719a      	strb	r2, [r3, #6]
 801bcfe:	2200      	movs	r2, #0
 801bd00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bd02:	4b2a      	ldr	r3, [pc, #168]	@ (801bdac <ip4_output_if_src+0x154>)
 801bd04:	881b      	ldrh	r3, [r3, #0]
 801bd06:	4618      	mov	r0, r3
 801bd08:	f7f6 ff12 	bl	8012b30 <lwip_htons>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	461a      	mov	r2, r3
 801bd10:	69fb      	ldr	r3, [r7, #28]
 801bd12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bd14:	4b25      	ldr	r3, [pc, #148]	@ (801bdac <ip4_output_if_src+0x154>)
 801bd16:	881b      	ldrh	r3, [r3, #0]
 801bd18:	3301      	adds	r3, #1
 801bd1a:	b29a      	uxth	r2, r3
 801bd1c:	4b23      	ldr	r3, [pc, #140]	@ (801bdac <ip4_output_if_src+0x154>)
 801bd1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d104      	bne.n	801bd30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bd26:	4b22      	ldr	r3, [pc, #136]	@ (801bdb0 <ip4_output_if_src+0x158>)
 801bd28:	681a      	ldr	r2, [r3, #0]
 801bd2a:	69fb      	ldr	r3, [r7, #28]
 801bd2c:	60da      	str	r2, [r3, #12]
 801bd2e:	e003      	b.n	801bd38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bd30:	68bb      	ldr	r3, [r7, #8]
 801bd32:	681a      	ldr	r2, [r3, #0]
 801bd34:	69fb      	ldr	r3, [r7, #28]
 801bd36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bd38:	69fb      	ldr	r3, [r7, #28]
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	729a      	strb	r2, [r3, #10]
 801bd3e:	2200      	movs	r2, #0
 801bd40:	72da      	strb	r2, [r3, #11]
 801bd42:	e00f      	b.n	801bd64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	895b      	ldrh	r3, [r3, #10]
 801bd48:	2b13      	cmp	r3, #19
 801bd4a:	d802      	bhi.n	801bd52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bd4c:	f06f 0301 	mvn.w	r3, #1
 801bd50:	e020      	b.n	801bd94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	685b      	ldr	r3, [r3, #4]
 801bd56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bd58:	69fb      	ldr	r3, [r7, #28]
 801bd5a:	691b      	ldr	r3, [r3, #16]
 801bd5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bd5e:	f107 0314 	add.w	r3, r7, #20
 801bd62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d00c      	beq.n	801bd86 <ip4_output_if_src+0x12e>
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	891a      	ldrh	r2, [r3, #8]
 801bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bd74:	429a      	cmp	r2, r3
 801bd76:	d906      	bls.n	801bd86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bd78:	687a      	ldr	r2, [r7, #4]
 801bd7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bd7c:	68f8      	ldr	r0, [r7, #12]
 801bd7e:	f000 fd53 	bl	801c828 <ip4_frag>
 801bd82:	4603      	mov	r3, r0
 801bd84:	e006      	b.n	801bd94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd88:	695b      	ldr	r3, [r3, #20]
 801bd8a:	687a      	ldr	r2, [r7, #4]
 801bd8c:	68f9      	ldr	r1, [r7, #12]
 801bd8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bd90:	4798      	blx	r3
 801bd92:	4603      	mov	r3, r0
}
 801bd94:	4618      	mov	r0, r3
 801bd96:	3720      	adds	r7, #32
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	bd80      	pop	{r7, pc}
 801bd9c:	08021830 	.word	0x08021830
 801bda0:	08021864 	.word	0x08021864
 801bda4:	08021870 	.word	0x08021870
 801bda8:	08021898 	.word	0x08021898
 801bdac:	20027782 	.word	0x20027782
 801bdb0:	080222c0 	.word	0x080222c0

0801bdb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bdb4:	b480      	push	{r7}
 801bdb6:	b085      	sub	sp, #20
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdc8:	d002      	beq.n	801bdd0 <ip4_addr_isbroadcast_u32+0x1c>
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d101      	bne.n	801bdd4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bdd0:	2301      	movs	r3, #1
 801bdd2:	e02a      	b.n	801be2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bdd4:	683b      	ldr	r3, [r7, #0]
 801bdd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bdda:	f003 0302 	and.w	r3, r3, #2
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d101      	bne.n	801bde6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bde2:	2300      	movs	r3, #0
 801bde4:	e021      	b.n	801be2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bde6:	683b      	ldr	r3, [r7, #0]
 801bde8:	3304      	adds	r3, #4
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d101      	bne.n	801bdf6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	e019      	b.n	801be2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bdf6:	68fa      	ldr	r2, [r7, #12]
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	3304      	adds	r3, #4
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	405a      	eors	r2, r3
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	3308      	adds	r3, #8
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	4013      	ands	r3, r2
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d10d      	bne.n	801be28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801be0c:	683b      	ldr	r3, [r7, #0]
 801be0e:	3308      	adds	r3, #8
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	43da      	mvns	r2, r3
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	3308      	adds	r3, #8
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801be20:	429a      	cmp	r2, r3
 801be22:	d101      	bne.n	801be28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801be24:	2301      	movs	r3, #1
 801be26:	e000      	b.n	801be2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801be28:	2300      	movs	r3, #0
  }
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3714      	adds	r7, #20
 801be2e:	46bd      	mov	sp, r7
 801be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be34:	4770      	bx	lr
	...

0801be38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b084      	sub	sp, #16
 801be3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801be3e:	2300      	movs	r3, #0
 801be40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801be42:	4b12      	ldr	r3, [pc, #72]	@ (801be8c <ip_reass_tmr+0x54>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801be48:	e018      	b.n	801be7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	7fdb      	ldrb	r3, [r3, #31]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d00b      	beq.n	801be6a <ip_reass_tmr+0x32>
      r->timer--;
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	7fdb      	ldrb	r3, [r3, #31]
 801be56:	3b01      	subs	r3, #1
 801be58:	b2da      	uxtb	r2, r3
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	60fb      	str	r3, [r7, #12]
 801be68:	e008      	b.n	801be7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801be74:	68b9      	ldr	r1, [r7, #8]
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	f000 f80a 	bl	801be90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d1e3      	bne.n	801be4a <ip_reass_tmr+0x12>
    }
  }
}
 801be82:	bf00      	nop
 801be84:	bf00      	nop
 801be86:	3710      	adds	r7, #16
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	20027784 	.word	0x20027784

0801be90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b088      	sub	sp, #32
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
 801be98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801be9a:	2300      	movs	r3, #0
 801be9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801be9e:	683a      	ldr	r2, [r7, #0]
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d105      	bne.n	801beb2 <ip_reass_free_complete_datagram+0x22>
 801bea6:	4b45      	ldr	r3, [pc, #276]	@ (801bfbc <ip_reass_free_complete_datagram+0x12c>)
 801bea8:	22ab      	movs	r2, #171	@ 0xab
 801beaa:	4945      	ldr	r1, [pc, #276]	@ (801bfc0 <ip_reass_free_complete_datagram+0x130>)
 801beac:	4845      	ldr	r0, [pc, #276]	@ (801bfc4 <ip_reass_free_complete_datagram+0x134>)
 801beae:	f002 f84b 	bl	801df48 <iprintf>
  if (prev != NULL) {
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d00a      	beq.n	801bece <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801beb8:	683b      	ldr	r3, [r7, #0]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d005      	beq.n	801bece <ip_reass_free_complete_datagram+0x3e>
 801bec2:	4b3e      	ldr	r3, [pc, #248]	@ (801bfbc <ip_reass_free_complete_datagram+0x12c>)
 801bec4:	22ad      	movs	r2, #173	@ 0xad
 801bec6:	4940      	ldr	r1, [pc, #256]	@ (801bfc8 <ip_reass_free_complete_datagram+0x138>)
 801bec8:	483e      	ldr	r0, [pc, #248]	@ (801bfc4 <ip_reass_free_complete_datagram+0x134>)
 801beca:	f002 f83d 	bl	801df48 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	685b      	ldr	r3, [r3, #4]
 801bed4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	889b      	ldrh	r3, [r3, #4]
 801beda:	b29b      	uxth	r3, r3
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d12a      	bne.n	801bf36 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	685b      	ldr	r3, [r3, #4]
 801bee4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	681a      	ldr	r2, [r3, #0]
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801beee:	69bb      	ldr	r3, [r7, #24]
 801bef0:	6858      	ldr	r0, [r3, #4]
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	3308      	adds	r3, #8
 801bef6:	2214      	movs	r2, #20
 801bef8:	4619      	mov	r1, r3
 801befa:	f002 fa50 	bl	801e39e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801befe:	2101      	movs	r1, #1
 801bf00:	69b8      	ldr	r0, [r7, #24]
 801bf02:	f7ff fc47 	bl	801b794 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801bf06:	69b8      	ldr	r0, [r7, #24]
 801bf08:	f7f8 fa8e 	bl	8014428 <pbuf_clen>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bf10:	8bfa      	ldrh	r2, [r7, #30]
 801bf12:	8a7b      	ldrh	r3, [r7, #18]
 801bf14:	4413      	add	r3, r2
 801bf16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf1a:	db05      	blt.n	801bf28 <ip_reass_free_complete_datagram+0x98>
 801bf1c:	4b27      	ldr	r3, [pc, #156]	@ (801bfbc <ip_reass_free_complete_datagram+0x12c>)
 801bf1e:	22bc      	movs	r2, #188	@ 0xbc
 801bf20:	492a      	ldr	r1, [pc, #168]	@ (801bfcc <ip_reass_free_complete_datagram+0x13c>)
 801bf22:	4828      	ldr	r0, [pc, #160]	@ (801bfc4 <ip_reass_free_complete_datagram+0x134>)
 801bf24:	f002 f810 	bl	801df48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bf28:	8bfa      	ldrh	r2, [r7, #30]
 801bf2a:	8a7b      	ldrh	r3, [r7, #18]
 801bf2c:	4413      	add	r3, r2
 801bf2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801bf30:	69b8      	ldr	r0, [r7, #24]
 801bf32:	f7f8 f9eb 	bl	801430c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	685b      	ldr	r3, [r3, #4]
 801bf3a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801bf3c:	e01f      	b.n	801bf7e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801bf3e:	69bb      	ldr	r3, [r7, #24]
 801bf40:	685b      	ldr	r3, [r3, #4]
 801bf42:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bf44:	69bb      	ldr	r3, [r7, #24]
 801bf46:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801bf48:	697b      	ldr	r3, [r7, #20]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801bf4e:	68f8      	ldr	r0, [r7, #12]
 801bf50:	f7f8 fa6a 	bl	8014428 <pbuf_clen>
 801bf54:	4603      	mov	r3, r0
 801bf56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bf58:	8bfa      	ldrh	r2, [r7, #30]
 801bf5a:	8a7b      	ldrh	r3, [r7, #18]
 801bf5c:	4413      	add	r3, r2
 801bf5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf62:	db05      	blt.n	801bf70 <ip_reass_free_complete_datagram+0xe0>
 801bf64:	4b15      	ldr	r3, [pc, #84]	@ (801bfbc <ip_reass_free_complete_datagram+0x12c>)
 801bf66:	22cc      	movs	r2, #204	@ 0xcc
 801bf68:	4918      	ldr	r1, [pc, #96]	@ (801bfcc <ip_reass_free_complete_datagram+0x13c>)
 801bf6a:	4816      	ldr	r0, [pc, #88]	@ (801bfc4 <ip_reass_free_complete_datagram+0x134>)
 801bf6c:	f001 ffec 	bl	801df48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bf70:	8bfa      	ldrh	r2, [r7, #30]
 801bf72:	8a7b      	ldrh	r3, [r7, #18]
 801bf74:	4413      	add	r3, r2
 801bf76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bf78:	68f8      	ldr	r0, [r7, #12]
 801bf7a:	f7f8 f9c7 	bl	801430c <pbuf_free>
  while (p != NULL) {
 801bf7e:	69bb      	ldr	r3, [r7, #24]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d1dc      	bne.n	801bf3e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bf84:	6839      	ldr	r1, [r7, #0]
 801bf86:	6878      	ldr	r0, [r7, #4]
 801bf88:	f000 f8c2 	bl	801c110 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bf8c:	4b10      	ldr	r3, [pc, #64]	@ (801bfd0 <ip_reass_free_complete_datagram+0x140>)
 801bf8e:	881b      	ldrh	r3, [r3, #0]
 801bf90:	8bfa      	ldrh	r2, [r7, #30]
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d905      	bls.n	801bfa2 <ip_reass_free_complete_datagram+0x112>
 801bf96:	4b09      	ldr	r3, [pc, #36]	@ (801bfbc <ip_reass_free_complete_datagram+0x12c>)
 801bf98:	22d2      	movs	r2, #210	@ 0xd2
 801bf9a:	490e      	ldr	r1, [pc, #56]	@ (801bfd4 <ip_reass_free_complete_datagram+0x144>)
 801bf9c:	4809      	ldr	r0, [pc, #36]	@ (801bfc4 <ip_reass_free_complete_datagram+0x134>)
 801bf9e:	f001 ffd3 	bl	801df48 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bfa2:	4b0b      	ldr	r3, [pc, #44]	@ (801bfd0 <ip_reass_free_complete_datagram+0x140>)
 801bfa4:	881a      	ldrh	r2, [r3, #0]
 801bfa6:	8bfb      	ldrh	r3, [r7, #30]
 801bfa8:	1ad3      	subs	r3, r2, r3
 801bfaa:	b29a      	uxth	r2, r3
 801bfac:	4b08      	ldr	r3, [pc, #32]	@ (801bfd0 <ip_reass_free_complete_datagram+0x140>)
 801bfae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bfb0:	8bfb      	ldrh	r3, [r7, #30]
}
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	3720      	adds	r7, #32
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	bd80      	pop	{r7, pc}
 801bfba:	bf00      	nop
 801bfbc:	080218c8 	.word	0x080218c8
 801bfc0:	08021904 	.word	0x08021904
 801bfc4:	08021910 	.word	0x08021910
 801bfc8:	08021938 	.word	0x08021938
 801bfcc:	0802194c 	.word	0x0802194c
 801bfd0:	20027788 	.word	0x20027788
 801bfd4:	0802196c 	.word	0x0802196c

0801bfd8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b08a      	sub	sp, #40	@ 0x28
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
 801bfe0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bfea:	2300      	movs	r3, #0
 801bfec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bfee:	2300      	movs	r3, #0
 801bff0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bff2:	2300      	movs	r3, #0
 801bff4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bff6:	4b28      	ldr	r3, [pc, #160]	@ (801c098 <ip_reass_remove_oldest_datagram+0xc0>)
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bffc:	e030      	b.n	801c060 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c000:	695a      	ldr	r2, [r3, #20]
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	68db      	ldr	r3, [r3, #12]
 801c006:	429a      	cmp	r2, r3
 801c008:	d10c      	bne.n	801c024 <ip_reass_remove_oldest_datagram+0x4c>
 801c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c00c:	699a      	ldr	r2, [r3, #24]
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	691b      	ldr	r3, [r3, #16]
 801c012:	429a      	cmp	r2, r3
 801c014:	d106      	bne.n	801c024 <ip_reass_remove_oldest_datagram+0x4c>
 801c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c018:	899a      	ldrh	r2, [r3, #12]
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	889b      	ldrh	r3, [r3, #4]
 801c01e:	b29b      	uxth	r3, r3
 801c020:	429a      	cmp	r2, r3
 801c022:	d014      	beq.n	801c04e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	3301      	adds	r3, #1
 801c028:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c02a:	6a3b      	ldr	r3, [r7, #32]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d104      	bne.n	801c03a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c032:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c034:	69fb      	ldr	r3, [r7, #28]
 801c036:	61bb      	str	r3, [r7, #24]
 801c038:	e009      	b.n	801c04e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c03c:	7fda      	ldrb	r2, [r3, #31]
 801c03e:	6a3b      	ldr	r3, [r7, #32]
 801c040:	7fdb      	ldrb	r3, [r3, #31]
 801c042:	429a      	cmp	r2, r3
 801c044:	d803      	bhi.n	801c04e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c048:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c04a:	69fb      	ldr	r3, [r7, #28]
 801c04c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d001      	beq.n	801c05a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c058:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c062:	2b00      	cmp	r3, #0
 801c064:	d1cb      	bne.n	801bffe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c066:	6a3b      	ldr	r3, [r7, #32]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d008      	beq.n	801c07e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c06c:	69b9      	ldr	r1, [r7, #24]
 801c06e:	6a38      	ldr	r0, [r7, #32]
 801c070:	f7ff ff0e 	bl	801be90 <ip_reass_free_complete_datagram>
 801c074:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c076:	697a      	ldr	r2, [r7, #20]
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	4413      	add	r3, r2
 801c07c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c07e:	697a      	ldr	r2, [r7, #20]
 801c080:	683b      	ldr	r3, [r7, #0]
 801c082:	429a      	cmp	r2, r3
 801c084:	da02      	bge.n	801c08c <ip_reass_remove_oldest_datagram+0xb4>
 801c086:	693b      	ldr	r3, [r7, #16]
 801c088:	2b01      	cmp	r3, #1
 801c08a:	dcac      	bgt.n	801bfe6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c08c:	697b      	ldr	r3, [r7, #20]
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3728      	adds	r7, #40	@ 0x28
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}
 801c096:	bf00      	nop
 801c098:	20027784 	.word	0x20027784

0801c09c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b084      	sub	sp, #16
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
 801c0a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c0a6:	2004      	movs	r0, #4
 801c0a8:	f7f7 fa16 	bl	80134d8 <memp_malloc>
 801c0ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d110      	bne.n	801c0d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c0b4:	6839      	ldr	r1, [r7, #0]
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f7ff ff8e 	bl	801bfd8 <ip_reass_remove_oldest_datagram>
 801c0bc:	4602      	mov	r2, r0
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	4293      	cmp	r3, r2
 801c0c2:	dc03      	bgt.n	801c0cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c0c4:	2004      	movs	r0, #4
 801c0c6:	f7f7 fa07 	bl	80134d8 <memp_malloc>
 801c0ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d101      	bne.n	801c0d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	e016      	b.n	801c104 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c0d6:	2220      	movs	r2, #32
 801c0d8:	2100      	movs	r1, #0
 801c0da:	68f8      	ldr	r0, [r7, #12]
 801c0dc:	f002 f88c 	bl	801e1f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	220f      	movs	r2, #15
 801c0e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c0e6:	4b09      	ldr	r3, [pc, #36]	@ (801c10c <ip_reass_enqueue_new_datagram+0x70>)
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c0ee:	4a07      	ldr	r2, [pc, #28]	@ (801c10c <ip_reass_enqueue_new_datagram+0x70>)
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	3308      	adds	r3, #8
 801c0f8:	2214      	movs	r2, #20
 801c0fa:	6879      	ldr	r1, [r7, #4]
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f002 f94e 	bl	801e39e <memcpy>
  return ipr;
 801c102:	68fb      	ldr	r3, [r7, #12]
}
 801c104:	4618      	mov	r0, r3
 801c106:	3710      	adds	r7, #16
 801c108:	46bd      	mov	sp, r7
 801c10a:	bd80      	pop	{r7, pc}
 801c10c:	20027784 	.word	0x20027784

0801c110 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b082      	sub	sp, #8
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
 801c118:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c11a:	4b10      	ldr	r3, [pc, #64]	@ (801c15c <ip_reass_dequeue_datagram+0x4c>)
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	687a      	ldr	r2, [r7, #4]
 801c120:	429a      	cmp	r2, r3
 801c122:	d104      	bne.n	801c12e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	4a0c      	ldr	r2, [pc, #48]	@ (801c15c <ip_reass_dequeue_datagram+0x4c>)
 801c12a:	6013      	str	r3, [r2, #0]
 801c12c:	e00d      	b.n	801c14a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d106      	bne.n	801c142 <ip_reass_dequeue_datagram+0x32>
 801c134:	4b0a      	ldr	r3, [pc, #40]	@ (801c160 <ip_reass_dequeue_datagram+0x50>)
 801c136:	f240 1245 	movw	r2, #325	@ 0x145
 801c13a:	490a      	ldr	r1, [pc, #40]	@ (801c164 <ip_reass_dequeue_datagram+0x54>)
 801c13c:	480a      	ldr	r0, [pc, #40]	@ (801c168 <ip_reass_dequeue_datagram+0x58>)
 801c13e:	f001 ff03 	bl	801df48 <iprintf>
    prev->next = ipr->next;
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	681a      	ldr	r2, [r3, #0]
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c14a:	6879      	ldr	r1, [r7, #4]
 801c14c:	2004      	movs	r0, #4
 801c14e:	f7f7 fa39 	bl	80135c4 <memp_free>
}
 801c152:	bf00      	nop
 801c154:	3708      	adds	r7, #8
 801c156:	46bd      	mov	sp, r7
 801c158:	bd80      	pop	{r7, pc}
 801c15a:	bf00      	nop
 801c15c:	20027784 	.word	0x20027784
 801c160:	080218c8 	.word	0x080218c8
 801c164:	08021990 	.word	0x08021990
 801c168:	08021910 	.word	0x08021910

0801c16c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c16c:	b580      	push	{r7, lr}
 801c16e:	b08c      	sub	sp, #48	@ 0x30
 801c170:	af00      	add	r7, sp, #0
 801c172:	60f8      	str	r0, [r7, #12]
 801c174:	60b9      	str	r1, [r7, #8]
 801c176:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c178:	2300      	movs	r3, #0
 801c17a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c17c:	2301      	movs	r3, #1
 801c17e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c180:	68bb      	ldr	r3, [r7, #8]
 801c182:	685b      	ldr	r3, [r3, #4]
 801c184:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c186:	69fb      	ldr	r3, [r7, #28]
 801c188:	885b      	ldrh	r3, [r3, #2]
 801c18a:	b29b      	uxth	r3, r3
 801c18c:	4618      	mov	r0, r3
 801c18e:	f7f6 fccf 	bl	8012b30 <lwip_htons>
 801c192:	4603      	mov	r3, r0
 801c194:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c196:	69fb      	ldr	r3, [r7, #28]
 801c198:	781b      	ldrb	r3, [r3, #0]
 801c19a:	f003 030f 	and.w	r3, r3, #15
 801c19e:	b2db      	uxtb	r3, r3
 801c1a0:	009b      	lsls	r3, r3, #2
 801c1a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c1a4:	7e7b      	ldrb	r3, [r7, #25]
 801c1a6:	b29b      	uxth	r3, r3
 801c1a8:	8b7a      	ldrh	r2, [r7, #26]
 801c1aa:	429a      	cmp	r2, r3
 801c1ac:	d202      	bcs.n	801c1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c1ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c1b2:	e135      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c1b4:	7e7b      	ldrb	r3, [r7, #25]
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	8b7a      	ldrh	r2, [r7, #26]
 801c1ba:	1ad3      	subs	r3, r2, r3
 801c1bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c1be:	69fb      	ldr	r3, [r7, #28]
 801c1c0:	88db      	ldrh	r3, [r3, #6]
 801c1c2:	b29b      	uxth	r3, r3
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	f7f6 fcb3 	bl	8012b30 <lwip_htons>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c1d0:	b29b      	uxth	r3, r3
 801c1d2:	00db      	lsls	r3, r3, #3
 801c1d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c1d6:	68bb      	ldr	r3, [r7, #8]
 801c1d8:	685b      	ldr	r3, [r3, #4]
 801c1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1de:	2200      	movs	r2, #0
 801c1e0:	701a      	strb	r2, [r3, #0]
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	705a      	strb	r2, [r3, #1]
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	709a      	strb	r2, [r3, #2]
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f0:	8afa      	ldrh	r2, [r7, #22]
 801c1f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c1f4:	8afa      	ldrh	r2, [r7, #22]
 801c1f6:	8b7b      	ldrh	r3, [r7, #26]
 801c1f8:	4413      	add	r3, r2
 801c1fa:	b29a      	uxth	r2, r3
 801c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c202:	88db      	ldrh	r3, [r3, #6]
 801c204:	b29b      	uxth	r3, r3
 801c206:	8afa      	ldrh	r2, [r7, #22]
 801c208:	429a      	cmp	r2, r3
 801c20a:	d902      	bls.n	801c212 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c20c:	f04f 33ff 	mov.w	r3, #4294967295
 801c210:	e106      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	627b      	str	r3, [r7, #36]	@ 0x24
 801c218:	e068      	b.n	801c2ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c21c:	685b      	ldr	r3, [r3, #4]
 801c21e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c222:	889b      	ldrh	r3, [r3, #4]
 801c224:	b29a      	uxth	r2, r3
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	889b      	ldrh	r3, [r3, #4]
 801c22a:	b29b      	uxth	r3, r3
 801c22c:	429a      	cmp	r2, r3
 801c22e:	d235      	bcs.n	801c29c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c234:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d020      	beq.n	801c27e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c23e:	889b      	ldrh	r3, [r3, #4]
 801c240:	b29a      	uxth	r2, r3
 801c242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c244:	88db      	ldrh	r3, [r3, #6]
 801c246:	b29b      	uxth	r3, r3
 801c248:	429a      	cmp	r2, r3
 801c24a:	d307      	bcc.n	801c25c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c24e:	88db      	ldrh	r3, [r3, #6]
 801c250:	b29a      	uxth	r2, r3
 801c252:	693b      	ldr	r3, [r7, #16]
 801c254:	889b      	ldrh	r3, [r3, #4]
 801c256:	b29b      	uxth	r3, r3
 801c258:	429a      	cmp	r2, r3
 801c25a:	d902      	bls.n	801c262 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c25c:	f04f 33ff 	mov.w	r3, #4294967295
 801c260:	e0de      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c264:	68ba      	ldr	r2, [r7, #8]
 801c266:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c26a:	88db      	ldrh	r3, [r3, #6]
 801c26c:	b29a      	uxth	r2, r3
 801c26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c270:	889b      	ldrh	r3, [r3, #4]
 801c272:	b29b      	uxth	r3, r3
 801c274:	429a      	cmp	r2, r3
 801c276:	d03d      	beq.n	801c2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c278:	2300      	movs	r3, #0
 801c27a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c27c:	e03a      	b.n	801c2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c280:	88db      	ldrh	r3, [r3, #6]
 801c282:	b29a      	uxth	r2, r3
 801c284:	693b      	ldr	r3, [r7, #16]
 801c286:	889b      	ldrh	r3, [r3, #4]
 801c288:	b29b      	uxth	r3, r3
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d902      	bls.n	801c294 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c28e:	f04f 33ff 	mov.w	r3, #4294967295
 801c292:	e0c5      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	68ba      	ldr	r2, [r7, #8]
 801c298:	605a      	str	r2, [r3, #4]
      break;
 801c29a:	e02b      	b.n	801c2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c29e:	889b      	ldrh	r3, [r3, #4]
 801c2a0:	b29a      	uxth	r2, r3
 801c2a2:	693b      	ldr	r3, [r7, #16]
 801c2a4:	889b      	ldrh	r3, [r3, #4]
 801c2a6:	b29b      	uxth	r3, r3
 801c2a8:	429a      	cmp	r2, r3
 801c2aa:	d102      	bne.n	801c2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c2ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c2b0:	e0b6      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2b4:	889b      	ldrh	r3, [r3, #4]
 801c2b6:	b29a      	uxth	r2, r3
 801c2b8:	693b      	ldr	r3, [r7, #16]
 801c2ba:	88db      	ldrh	r3, [r3, #6]
 801c2bc:	b29b      	uxth	r3, r3
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d202      	bcs.n	801c2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c2c6:	e0ab      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d009      	beq.n	801c2e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2d0:	88db      	ldrh	r3, [r3, #6]
 801c2d2:	b29a      	uxth	r2, r3
 801c2d4:	693b      	ldr	r3, [r7, #16]
 801c2d6:	889b      	ldrh	r3, [r3, #4]
 801c2d8:	b29b      	uxth	r3, r3
 801c2da:	429a      	cmp	r2, r3
 801c2dc:	d001      	beq.n	801c2e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c2de:	2300      	movs	r3, #0
 801c2e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c2e2:	693b      	ldr	r3, [r7, #16]
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c2e8:	693b      	ldr	r3, [r7, #16]
 801c2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d193      	bne.n	801c21a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c2f2:	e000      	b.n	801c2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c2f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d12d      	bne.n	801c358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d01c      	beq.n	801c33c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c304:	88db      	ldrh	r3, [r3, #6]
 801c306:	b29a      	uxth	r2, r3
 801c308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c30a:	889b      	ldrh	r3, [r3, #4]
 801c30c:	b29b      	uxth	r3, r3
 801c30e:	429a      	cmp	r2, r3
 801c310:	d906      	bls.n	801c320 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c312:	4b45      	ldr	r3, [pc, #276]	@ (801c428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c314:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c318:	4944      	ldr	r1, [pc, #272]	@ (801c42c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c31a:	4845      	ldr	r0, [pc, #276]	@ (801c430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c31c:	f001 fe14 	bl	801df48 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c322:	68ba      	ldr	r2, [r7, #8]
 801c324:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c328:	88db      	ldrh	r3, [r3, #6]
 801c32a:	b29a      	uxth	r2, r3
 801c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c32e:	889b      	ldrh	r3, [r3, #4]
 801c330:	b29b      	uxth	r3, r3
 801c332:	429a      	cmp	r2, r3
 801c334:	d010      	beq.n	801c358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c336:	2300      	movs	r3, #0
 801c338:	623b      	str	r3, [r7, #32]
 801c33a:	e00d      	b.n	801c358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	685b      	ldr	r3, [r3, #4]
 801c340:	2b00      	cmp	r3, #0
 801c342:	d006      	beq.n	801c352 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c344:	4b38      	ldr	r3, [pc, #224]	@ (801c428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c346:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c34a:	493a      	ldr	r1, [pc, #232]	@ (801c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c34c:	4838      	ldr	r0, [pc, #224]	@ (801c430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c34e:	f001 fdfb 	bl	801df48 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	68ba      	ldr	r2, [r7, #8]
 801c356:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d105      	bne.n	801c36a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	7f9b      	ldrb	r3, [r3, #30]
 801c362:	f003 0301 	and.w	r3, r3, #1
 801c366:	2b00      	cmp	r3, #0
 801c368:	d059      	beq.n	801c41e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c36a:	6a3b      	ldr	r3, [r7, #32]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d04f      	beq.n	801c410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	685b      	ldr	r3, [r3, #4]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d006      	beq.n	801c386 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	685b      	ldr	r3, [r3, #4]
 801c37c:	685b      	ldr	r3, [r3, #4]
 801c37e:	889b      	ldrh	r3, [r3, #4]
 801c380:	b29b      	uxth	r3, r3
 801c382:	2b00      	cmp	r3, #0
 801c384:	d002      	beq.n	801c38c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c386:	2300      	movs	r3, #0
 801c388:	623b      	str	r3, [r7, #32]
 801c38a:	e041      	b.n	801c410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c38e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c396:	e012      	b.n	801c3be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c39a:	685b      	ldr	r3, [r3, #4]
 801c39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a0:	88db      	ldrh	r3, [r3, #6]
 801c3a2:	b29a      	uxth	r2, r3
 801c3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a6:	889b      	ldrh	r3, [r3, #4]
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d002      	beq.n	801c3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	623b      	str	r3, [r7, #32]
            break;
 801c3b2:	e007      	b.n	801c3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d1e9      	bne.n	801c398 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c3c4:	6a3b      	ldr	r3, [r7, #32]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d022      	beq.n	801c410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	685b      	ldr	r3, [r3, #4]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d106      	bne.n	801c3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c3d2:	4b15      	ldr	r3, [pc, #84]	@ (801c428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c3d4:	f240 12df 	movw	r2, #479	@ 0x1df
 801c3d8:	4917      	ldr	r1, [pc, #92]	@ (801c438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c3da:	4815      	ldr	r0, [pc, #84]	@ (801c430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c3dc:	f001 fdb4 	bl	801df48 <iprintf>
          LWIP_ASSERT("sanity check",
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c3e8:	429a      	cmp	r2, r3
 801c3ea:	d106      	bne.n	801c3fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c3ec:	4b0e      	ldr	r3, [pc, #56]	@ (801c428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c3ee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c3f2:	4911      	ldr	r1, [pc, #68]	@ (801c438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c3f4:	480e      	ldr	r0, [pc, #56]	@ (801c430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c3f6:	f001 fda7 	bl	801df48 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d006      	beq.n	801c410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c402:	4b09      	ldr	r3, [pc, #36]	@ (801c428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c404:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c408:	490c      	ldr	r1, [pc, #48]	@ (801c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c40a:	4809      	ldr	r0, [pc, #36]	@ (801c430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c40c:	f001 fd9c 	bl	801df48 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c410:	6a3b      	ldr	r3, [r7, #32]
 801c412:	2b00      	cmp	r3, #0
 801c414:	bf14      	ite	ne
 801c416:	2301      	movne	r3, #1
 801c418:	2300      	moveq	r3, #0
 801c41a:	b2db      	uxtb	r3, r3
 801c41c:	e000      	b.n	801c420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c41e:	2300      	movs	r3, #0
}
 801c420:	4618      	mov	r0, r3
 801c422:	3730      	adds	r7, #48	@ 0x30
 801c424:	46bd      	mov	sp, r7
 801c426:	bd80      	pop	{r7, pc}
 801c428:	080218c8 	.word	0x080218c8
 801c42c:	080219ac 	.word	0x080219ac
 801c430:	08021910 	.word	0x08021910
 801c434:	080219cc 	.word	0x080219cc
 801c438:	08021a04 	.word	0x08021a04
 801c43c:	08021a14 	.word	0x08021a14

0801c440 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b08e      	sub	sp, #56	@ 0x38
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c450:	781b      	ldrb	r3, [r3, #0]
 801c452:	f003 030f 	and.w	r3, r3, #15
 801c456:	b2db      	uxtb	r3, r3
 801c458:	009b      	lsls	r3, r3, #2
 801c45a:	b2db      	uxtb	r3, r3
 801c45c:	2b14      	cmp	r3, #20
 801c45e:	f040 8171 	bne.w	801c744 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c464:	88db      	ldrh	r3, [r3, #6]
 801c466:	b29b      	uxth	r3, r3
 801c468:	4618      	mov	r0, r3
 801c46a:	f7f6 fb61 	bl	8012b30 <lwip_htons>
 801c46e:	4603      	mov	r3, r0
 801c470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c474:	b29b      	uxth	r3, r3
 801c476:	00db      	lsls	r3, r3, #3
 801c478:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c47c:	885b      	ldrh	r3, [r3, #2]
 801c47e:	b29b      	uxth	r3, r3
 801c480:	4618      	mov	r0, r3
 801c482:	f7f6 fb55 	bl	8012b30 <lwip_htons>
 801c486:	4603      	mov	r3, r0
 801c488:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c48c:	781b      	ldrb	r3, [r3, #0]
 801c48e:	f003 030f 	and.w	r3, r3, #15
 801c492:	b2db      	uxtb	r3, r3
 801c494:	009b      	lsls	r3, r3, #2
 801c496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c49a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c49e:	b29b      	uxth	r3, r3
 801c4a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c4a2:	429a      	cmp	r2, r3
 801c4a4:	f0c0 8150 	bcc.w	801c748 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c4a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c4ac:	b29b      	uxth	r3, r3
 801c4ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c4b0:	1ad3      	subs	r3, r2, r3
 801c4b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c4b4:	6878      	ldr	r0, [r7, #4]
 801c4b6:	f7f7 ffb7 	bl	8014428 <pbuf_clen>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c4be:	4b8c      	ldr	r3, [pc, #560]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c4c0:	881b      	ldrh	r3, [r3, #0]
 801c4c2:	461a      	mov	r2, r3
 801c4c4:	8c3b      	ldrh	r3, [r7, #32]
 801c4c6:	4413      	add	r3, r2
 801c4c8:	2b0a      	cmp	r3, #10
 801c4ca:	dd10      	ble.n	801c4ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c4cc:	8c3b      	ldrh	r3, [r7, #32]
 801c4ce:	4619      	mov	r1, r3
 801c4d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c4d2:	f7ff fd81 	bl	801bfd8 <ip_reass_remove_oldest_datagram>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	f000 8137 	beq.w	801c74c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c4de:	4b84      	ldr	r3, [pc, #528]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c4e0:	881b      	ldrh	r3, [r3, #0]
 801c4e2:	461a      	mov	r2, r3
 801c4e4:	8c3b      	ldrh	r3, [r7, #32]
 801c4e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c4e8:	2b0a      	cmp	r3, #10
 801c4ea:	f300 812f 	bgt.w	801c74c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c4ee:	4b81      	ldr	r3, [pc, #516]	@ (801c6f4 <ip4_reass+0x2b4>)
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c4f4:	e015      	b.n	801c522 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4f8:	695a      	ldr	r2, [r3, #20]
 801c4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4fc:	68db      	ldr	r3, [r3, #12]
 801c4fe:	429a      	cmp	r2, r3
 801c500:	d10c      	bne.n	801c51c <ip4_reass+0xdc>
 801c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c504:	699a      	ldr	r2, [r3, #24]
 801c506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c508:	691b      	ldr	r3, [r3, #16]
 801c50a:	429a      	cmp	r2, r3
 801c50c:	d106      	bne.n	801c51c <ip4_reass+0xdc>
 801c50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c510:	899a      	ldrh	r2, [r3, #12]
 801c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c514:	889b      	ldrh	r3, [r3, #4]
 801c516:	b29b      	uxth	r3, r3
 801c518:	429a      	cmp	r2, r3
 801c51a:	d006      	beq.n	801c52a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	633b      	str	r3, [r7, #48]	@ 0x30
 801c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c524:	2b00      	cmp	r3, #0
 801c526:	d1e6      	bne.n	801c4f6 <ip4_reass+0xb6>
 801c528:	e000      	b.n	801c52c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c52a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d109      	bne.n	801c546 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c532:	8c3b      	ldrh	r3, [r7, #32]
 801c534:	4619      	mov	r1, r3
 801c536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c538:	f7ff fdb0 	bl	801c09c <ip_reass_enqueue_new_datagram>
 801c53c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c540:	2b00      	cmp	r3, #0
 801c542:	d11c      	bne.n	801c57e <ip4_reass+0x13e>
      goto nullreturn;
 801c544:	e105      	b.n	801c752 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c548:	88db      	ldrh	r3, [r3, #6]
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7f6 faef 	bl	8012b30 <lwip_htons>
 801c552:	4603      	mov	r3, r0
 801c554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d110      	bne.n	801c57e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c55e:	89db      	ldrh	r3, [r3, #14]
 801c560:	4618      	mov	r0, r3
 801c562:	f7f6 fae5 	bl	8012b30 <lwip_htons>
 801c566:	4603      	mov	r3, r0
 801c568:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d006      	beq.n	801c57e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c572:	3308      	adds	r3, #8
 801c574:	2214      	movs	r2, #20
 801c576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c578:	4618      	mov	r0, r3
 801c57a:	f001 ff10 	bl	801e39e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c580:	88db      	ldrh	r3, [r3, #6]
 801c582:	b29b      	uxth	r3, r3
 801c584:	f003 0320 	and.w	r3, r3, #32
 801c588:	2b00      	cmp	r3, #0
 801c58a:	bf0c      	ite	eq
 801c58c:	2301      	moveq	r3, #1
 801c58e:	2300      	movne	r3, #0
 801c590:	b2db      	uxtb	r3, r3
 801c592:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c594:	69fb      	ldr	r3, [r7, #28]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d00e      	beq.n	801c5b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c59a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c59c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c59e:	4413      	add	r3, r2
 801c5a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c5a2:	8b7a      	ldrh	r2, [r7, #26]
 801c5a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c5a6:	429a      	cmp	r2, r3
 801c5a8:	f0c0 80a0 	bcc.w	801c6ec <ip4_reass+0x2ac>
 801c5ac:	8b7b      	ldrh	r3, [r7, #26]
 801c5ae:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c5b2:	4293      	cmp	r3, r2
 801c5b4:	f200 809a 	bhi.w	801c6ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c5b8:	69fa      	ldr	r2, [r7, #28]
 801c5ba:	6879      	ldr	r1, [r7, #4]
 801c5bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c5be:	f7ff fdd5 	bl	801c16c <ip_reass_chain_frag_into_datagram_and_validate>
 801c5c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c5c4:	697b      	ldr	r3, [r7, #20]
 801c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5ca:	f000 809b 	beq.w	801c704 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c5ce:	4b48      	ldr	r3, [pc, #288]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c5d0:	881a      	ldrh	r2, [r3, #0]
 801c5d2:	8c3b      	ldrh	r3, [r7, #32]
 801c5d4:	4413      	add	r3, r2
 801c5d6:	b29a      	uxth	r2, r3
 801c5d8:	4b45      	ldr	r3, [pc, #276]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c5da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c5dc:	69fb      	ldr	r3, [r7, #28]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d00d      	beq.n	801c5fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c5e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c5e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5e6:	4413      	add	r3, r2
 801c5e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5ec:	8a7a      	ldrh	r2, [r7, #18]
 801c5ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5f2:	7f9b      	ldrb	r3, [r3, #30]
 801c5f4:	f043 0301 	orr.w	r3, r3, #1
 801c5f8:	b2da      	uxtb	r2, r3
 801c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c5fe:	697b      	ldr	r3, [r7, #20]
 801c600:	2b01      	cmp	r3, #1
 801c602:	d171      	bne.n	801c6e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c606:	8b9b      	ldrh	r3, [r3, #28]
 801c608:	3314      	adds	r3, #20
 801c60a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c60e:	685b      	ldr	r3, [r3, #4]
 801c610:	685b      	ldr	r3, [r3, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c618:	685b      	ldr	r3, [r3, #4]
 801c61a:	685b      	ldr	r3, [r3, #4]
 801c61c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c620:	3308      	adds	r3, #8
 801c622:	2214      	movs	r2, #20
 801c624:	4619      	mov	r1, r3
 801c626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c628:	f001 feb9 	bl	801e39e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c62c:	8a3b      	ldrh	r3, [r7, #16]
 801c62e:	4618      	mov	r0, r3
 801c630:	f7f6 fa7e 	bl	8012b30 <lwip_htons>
 801c634:	4603      	mov	r3, r0
 801c636:	461a      	mov	r2, r3
 801c638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c63a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c63e:	2200      	movs	r2, #0
 801c640:	719a      	strb	r2, [r3, #6]
 801c642:	2200      	movs	r2, #0
 801c644:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c648:	2200      	movs	r2, #0
 801c64a:	729a      	strb	r2, [r3, #10]
 801c64c:	2200      	movs	r2, #0
 801c64e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c652:	685b      	ldr	r3, [r3, #4]
 801c654:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c656:	e00d      	b.n	801c674 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c65e:	2114      	movs	r1, #20
 801c660:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c662:	f7f7 fdcd 	bl	8014200 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c666:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	f7f7 ff1d 	bl	80144a8 <pbuf_cat>
      r = iprh->next_pbuf;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c676:	2b00      	cmp	r3, #0
 801c678:	d1ee      	bne.n	801c658 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c67a:	4b1e      	ldr	r3, [pc, #120]	@ (801c6f4 <ip4_reass+0x2b4>)
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c680:	429a      	cmp	r2, r3
 801c682:	d102      	bne.n	801c68a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c684:	2300      	movs	r3, #0
 801c686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c688:	e010      	b.n	801c6ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c68a:	4b1a      	ldr	r3, [pc, #104]	@ (801c6f4 <ip4_reass+0x2b4>)
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c690:	e007      	b.n	801c6a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c698:	429a      	cmp	r2, r3
 801c69a:	d006      	beq.n	801c6aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d1f4      	bne.n	801c692 <ip4_reass+0x252>
 801c6a8:	e000      	b.n	801c6ac <ip4_reass+0x26c>
          break;
 801c6aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c6ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c6b0:	f7ff fd2e 	bl	801c110 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c6b4:	6878      	ldr	r0, [r7, #4]
 801c6b6:	f7f7 feb7 	bl	8014428 <pbuf_clen>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c6be:	4b0c      	ldr	r3, [pc, #48]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c6c0:	881b      	ldrh	r3, [r3, #0]
 801c6c2:	8c3a      	ldrh	r2, [r7, #32]
 801c6c4:	429a      	cmp	r2, r3
 801c6c6:	d906      	bls.n	801c6d6 <ip4_reass+0x296>
 801c6c8:	4b0b      	ldr	r3, [pc, #44]	@ (801c6f8 <ip4_reass+0x2b8>)
 801c6ca:	f240 229b 	movw	r2, #667	@ 0x29b
 801c6ce:	490b      	ldr	r1, [pc, #44]	@ (801c6fc <ip4_reass+0x2bc>)
 801c6d0:	480b      	ldr	r0, [pc, #44]	@ (801c700 <ip4_reass+0x2c0>)
 801c6d2:	f001 fc39 	bl	801df48 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c6d6:	4b06      	ldr	r3, [pc, #24]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c6d8:	881a      	ldrh	r2, [r3, #0]
 801c6da:	8c3b      	ldrh	r3, [r7, #32]
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	b29a      	uxth	r2, r3
 801c6e0:	4b03      	ldr	r3, [pc, #12]	@ (801c6f0 <ip4_reass+0x2b0>)
 801c6e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	e038      	b.n	801c75a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c6e8:	2300      	movs	r3, #0
 801c6ea:	e036      	b.n	801c75a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c6ec:	bf00      	nop
 801c6ee:	e00a      	b.n	801c706 <ip4_reass+0x2c6>
 801c6f0:	20027788 	.word	0x20027788
 801c6f4:	20027784 	.word	0x20027784
 801c6f8:	080218c8 	.word	0x080218c8
 801c6fc:	08021a38 	.word	0x08021a38
 801c700:	08021910 	.word	0x08021910
    goto nullreturn_ipr;
 801c704:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d106      	bne.n	801c71a <ip4_reass+0x2da>
 801c70c:	4b15      	ldr	r3, [pc, #84]	@ (801c764 <ip4_reass+0x324>)
 801c70e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c712:	4915      	ldr	r1, [pc, #84]	@ (801c768 <ip4_reass+0x328>)
 801c714:	4815      	ldr	r0, [pc, #84]	@ (801c76c <ip4_reass+0x32c>)
 801c716:	f001 fc17 	bl	801df48 <iprintf>
  if (ipr->p == NULL) {
 801c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c71c:	685b      	ldr	r3, [r3, #4]
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d116      	bne.n	801c750 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c722:	4b13      	ldr	r3, [pc, #76]	@ (801c770 <ip4_reass+0x330>)
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c728:	429a      	cmp	r2, r3
 801c72a:	d006      	beq.n	801c73a <ip4_reass+0x2fa>
 801c72c:	4b0d      	ldr	r3, [pc, #52]	@ (801c764 <ip4_reass+0x324>)
 801c72e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c732:	4910      	ldr	r1, [pc, #64]	@ (801c774 <ip4_reass+0x334>)
 801c734:	480d      	ldr	r0, [pc, #52]	@ (801c76c <ip4_reass+0x32c>)
 801c736:	f001 fc07 	bl	801df48 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c73a:	2100      	movs	r1, #0
 801c73c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c73e:	f7ff fce7 	bl	801c110 <ip_reass_dequeue_datagram>
 801c742:	e006      	b.n	801c752 <ip4_reass+0x312>
    goto nullreturn;
 801c744:	bf00      	nop
 801c746:	e004      	b.n	801c752 <ip4_reass+0x312>
    goto nullreturn;
 801c748:	bf00      	nop
 801c74a:	e002      	b.n	801c752 <ip4_reass+0x312>
      goto nullreturn;
 801c74c:	bf00      	nop
 801c74e:	e000      	b.n	801c752 <ip4_reass+0x312>
  }

nullreturn:
 801c750:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f7f7 fdda 	bl	801430c <pbuf_free>
  return NULL;
 801c758:	2300      	movs	r3, #0
}
 801c75a:	4618      	mov	r0, r3
 801c75c:	3738      	adds	r7, #56	@ 0x38
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}
 801c762:	bf00      	nop
 801c764:	080218c8 	.word	0x080218c8
 801c768:	08021a54 	.word	0x08021a54
 801c76c:	08021910 	.word	0x08021910
 801c770:	20027784 	.word	0x20027784
 801c774:	08021a60 	.word	0x08021a60

0801c778 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c77c:	2005      	movs	r0, #5
 801c77e:	f7f6 feab 	bl	80134d8 <memp_malloc>
 801c782:	4603      	mov	r3, r0
}
 801c784:	4618      	mov	r0, r3
 801c786:	bd80      	pop	{r7, pc}

0801c788 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b082      	sub	sp, #8
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d106      	bne.n	801c7a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c796:	4b07      	ldr	r3, [pc, #28]	@ (801c7b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c798:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c79c:	4906      	ldr	r1, [pc, #24]	@ (801c7b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c79e:	4807      	ldr	r0, [pc, #28]	@ (801c7bc <ip_frag_free_pbuf_custom_ref+0x34>)
 801c7a0:	f001 fbd2 	bl	801df48 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c7a4:	6879      	ldr	r1, [r7, #4]
 801c7a6:	2005      	movs	r0, #5
 801c7a8:	f7f6 ff0c 	bl	80135c4 <memp_free>
}
 801c7ac:	bf00      	nop
 801c7ae:	3708      	adds	r7, #8
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}
 801c7b4:	080218c8 	.word	0x080218c8
 801c7b8:	08021a80 	.word	0x08021a80
 801c7bc:	08021910 	.word	0x08021910

0801c7c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	b084      	sub	sp, #16
 801c7c4:	af00      	add	r7, sp, #0
 801c7c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d106      	bne.n	801c7e0 <ipfrag_free_pbuf_custom+0x20>
 801c7d2:	4b11      	ldr	r3, [pc, #68]	@ (801c818 <ipfrag_free_pbuf_custom+0x58>)
 801c7d4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c7d8:	4910      	ldr	r1, [pc, #64]	@ (801c81c <ipfrag_free_pbuf_custom+0x5c>)
 801c7da:	4811      	ldr	r0, [pc, #68]	@ (801c820 <ipfrag_free_pbuf_custom+0x60>)
 801c7dc:	f001 fbb4 	bl	801df48 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c7e0:	68fa      	ldr	r2, [r7, #12]
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d006      	beq.n	801c7f6 <ipfrag_free_pbuf_custom+0x36>
 801c7e8:	4b0b      	ldr	r3, [pc, #44]	@ (801c818 <ipfrag_free_pbuf_custom+0x58>)
 801c7ea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c7ee:	490d      	ldr	r1, [pc, #52]	@ (801c824 <ipfrag_free_pbuf_custom+0x64>)
 801c7f0:	480b      	ldr	r0, [pc, #44]	@ (801c820 <ipfrag_free_pbuf_custom+0x60>)
 801c7f2:	f001 fba9 	bl	801df48 <iprintf>
  if (pcr->original != NULL) {
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	695b      	ldr	r3, [r3, #20]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d004      	beq.n	801c808 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	695b      	ldr	r3, [r3, #20]
 801c802:	4618      	mov	r0, r3
 801c804:	f7f7 fd82 	bl	801430c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c808:	68f8      	ldr	r0, [r7, #12]
 801c80a:	f7ff ffbd 	bl	801c788 <ip_frag_free_pbuf_custom_ref>
}
 801c80e:	bf00      	nop
 801c810:	3710      	adds	r7, #16
 801c812:	46bd      	mov	sp, r7
 801c814:	bd80      	pop	{r7, pc}
 801c816:	bf00      	nop
 801c818:	080218c8 	.word	0x080218c8
 801c81c:	08021a8c 	.word	0x08021a8c
 801c820:	08021910 	.word	0x08021910
 801c824:	08021a98 	.word	0x08021a98

0801c828 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b094      	sub	sp, #80	@ 0x50
 801c82c:	af02      	add	r7, sp, #8
 801c82e:	60f8      	str	r0, [r7, #12]
 801c830:	60b9      	str	r1, [r7, #8]
 801c832:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c834:	2300      	movs	r3, #0
 801c836:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c83e:	3b14      	subs	r3, #20
 801c840:	2b00      	cmp	r3, #0
 801c842:	da00      	bge.n	801c846 <ip4_frag+0x1e>
 801c844:	3307      	adds	r3, #7
 801c846:	10db      	asrs	r3, r3, #3
 801c848:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c84a:	2314      	movs	r3, #20
 801c84c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	685b      	ldr	r3, [r3, #4]
 801c852:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c856:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	f003 030f 	and.w	r3, r3, #15
 801c860:	b2db      	uxtb	r3, r3
 801c862:	009b      	lsls	r3, r3, #2
 801c864:	b2db      	uxtb	r3, r3
 801c866:	2b14      	cmp	r3, #20
 801c868:	d002      	beq.n	801c870 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c86a:	f06f 0305 	mvn.w	r3, #5
 801c86e:	e110      	b.n	801ca92 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	895b      	ldrh	r3, [r3, #10]
 801c874:	2b13      	cmp	r3, #19
 801c876:	d809      	bhi.n	801c88c <ip4_frag+0x64>
 801c878:	4b88      	ldr	r3, [pc, #544]	@ (801ca9c <ip4_frag+0x274>)
 801c87a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c87e:	4988      	ldr	r1, [pc, #544]	@ (801caa0 <ip4_frag+0x278>)
 801c880:	4888      	ldr	r0, [pc, #544]	@ (801caa4 <ip4_frag+0x27c>)
 801c882:	f001 fb61 	bl	801df48 <iprintf>
 801c886:	f06f 0305 	mvn.w	r3, #5
 801c88a:	e102      	b.n	801ca92 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c88e:	88db      	ldrh	r3, [r3, #6]
 801c890:	b29b      	uxth	r3, r3
 801c892:	4618      	mov	r0, r3
 801c894:	f7f6 f94c 	bl	8012b30 <lwip_htons>
 801c898:	4603      	mov	r3, r0
 801c89a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c89c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c89e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c8a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c8a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c8a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	891b      	ldrh	r3, [r3, #8]
 801c8b2:	3b14      	subs	r3, #20
 801c8b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c8b8:	e0e1      	b.n	801ca7e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c8ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c8bc:	00db      	lsls	r3, r3, #3
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	bf28      	it	cs
 801c8c8:	4613      	movcs	r3, r2
 801c8ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c8cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c8d0:	2114      	movs	r1, #20
 801c8d2:	200e      	movs	r0, #14
 801c8d4:	f7f7 fa36 	bl	8013d44 <pbuf_alloc>
 801c8d8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	f000 80d5 	beq.w	801ca8c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8e4:	895b      	ldrh	r3, [r3, #10]
 801c8e6:	2b13      	cmp	r3, #19
 801c8e8:	d806      	bhi.n	801c8f8 <ip4_frag+0xd0>
 801c8ea:	4b6c      	ldr	r3, [pc, #432]	@ (801ca9c <ip4_frag+0x274>)
 801c8ec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c8f0:	496d      	ldr	r1, [pc, #436]	@ (801caa8 <ip4_frag+0x280>)
 801c8f2:	486c      	ldr	r0, [pc, #432]	@ (801caa4 <ip4_frag+0x27c>)
 801c8f4:	f001 fb28 	bl	801df48 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8fa:	685b      	ldr	r3, [r3, #4]
 801c8fc:	2214      	movs	r2, #20
 801c8fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c900:	4618      	mov	r0, r3
 801c902:	f001 fd4c 	bl	801e39e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c908:	685b      	ldr	r3, [r3, #4]
 801c90a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c90c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c90e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c912:	e064      	b.n	801c9de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	895a      	ldrh	r2, [r3, #10]
 801c918:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c91a:	1ad3      	subs	r3, r2, r3
 801c91c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	895b      	ldrh	r3, [r3, #10]
 801c922:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c924:	429a      	cmp	r2, r3
 801c926:	d906      	bls.n	801c936 <ip4_frag+0x10e>
 801c928:	4b5c      	ldr	r3, [pc, #368]	@ (801ca9c <ip4_frag+0x274>)
 801c92a:	f240 322d 	movw	r2, #813	@ 0x32d
 801c92e:	495f      	ldr	r1, [pc, #380]	@ (801caac <ip4_frag+0x284>)
 801c930:	485c      	ldr	r0, [pc, #368]	@ (801caa4 <ip4_frag+0x27c>)
 801c932:	f001 fb09 	bl	801df48 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c936:	8bfa      	ldrh	r2, [r7, #30]
 801c938:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c93c:	4293      	cmp	r3, r2
 801c93e:	bf28      	it	cs
 801c940:	4613      	movcs	r3, r2
 801c942:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c946:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d105      	bne.n	801c95a <ip4_frag+0x132>
        poff = 0;
 801c94e:	2300      	movs	r3, #0
 801c950:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	60fb      	str	r3, [r7, #12]
        continue;
 801c958:	e041      	b.n	801c9de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c95a:	f7ff ff0d 	bl	801c778 <ip_frag_alloc_pbuf_custom_ref>
 801c95e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c960:	69bb      	ldr	r3, [r7, #24]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d103      	bne.n	801c96e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c968:	f7f7 fcd0 	bl	801430c <pbuf_free>
        goto memerr;
 801c96c:	e08f      	b.n	801ca8e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c96e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c974:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c976:	4413      	add	r3, r2
 801c978:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c97c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c980:	9201      	str	r2, [sp, #4]
 801c982:	9300      	str	r3, [sp, #0]
 801c984:	4603      	mov	r3, r0
 801c986:	2241      	movs	r2, #65	@ 0x41
 801c988:	2000      	movs	r0, #0
 801c98a:	f7f7 fb05 	bl	8013f98 <pbuf_alloced_custom>
 801c98e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c990:	697b      	ldr	r3, [r7, #20]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d106      	bne.n	801c9a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c996:	69b8      	ldr	r0, [r7, #24]
 801c998:	f7ff fef6 	bl	801c788 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c99c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c99e:	f7f7 fcb5 	bl	801430c <pbuf_free>
        goto memerr;
 801c9a2:	e074      	b.n	801ca8e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c9a4:	68f8      	ldr	r0, [r7, #12]
 801c9a6:	f7f7 fd57 	bl	8014458 <pbuf_ref>
      pcr->original = p;
 801c9aa:	69bb      	ldr	r3, [r7, #24]
 801c9ac:	68fa      	ldr	r2, [r7, #12]
 801c9ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c9b0:	69bb      	ldr	r3, [r7, #24]
 801c9b2:	4a3f      	ldr	r2, [pc, #252]	@ (801cab0 <ip4_frag+0x288>)
 801c9b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c9b6:	6979      	ldr	r1, [r7, #20]
 801c9b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c9ba:	f7f7 fd75 	bl	80144a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c9be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c9c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c9c6:	1ad3      	subs	r3, r2, r3
 801c9c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c9cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d004      	beq.n	801c9de <ip4_frag+0x1b6>
        poff = 0;
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c9de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d196      	bne.n	801c914 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c9e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c9e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c9ec:	4413      	add	r3, r2
 801c9ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c9f0:	68bb      	ldr	r3, [r7, #8]
 801c9f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c9f4:	f1a3 0213 	sub.w	r2, r3, #19
 801c9f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c9fc:	429a      	cmp	r2, r3
 801c9fe:	bfcc      	ite	gt
 801ca00:	2301      	movgt	r3, #1
 801ca02:	2300      	movle	r3, #0
 801ca04:	b2db      	uxtb	r3, r3
 801ca06:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ca08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ca0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801ca12:	6a3b      	ldr	r3, [r7, #32]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d002      	beq.n	801ca1e <ip4_frag+0x1f6>
 801ca18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d003      	beq.n	801ca26 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ca1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ca24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ca26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f7f6 f881 	bl	8012b30 <lwip_htons>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	461a      	mov	r2, r3
 801ca32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca34:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ca36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ca38:	3314      	adds	r3, #20
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	f7f6 f877 	bl	8012b30 <lwip_htons>
 801ca42:	4603      	mov	r3, r0
 801ca44:	461a      	mov	r2, r3
 801ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca48:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ca4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	729a      	strb	r2, [r3, #10]
 801ca50:	2200      	movs	r2, #0
 801ca52:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ca54:	68bb      	ldr	r3, [r7, #8]
 801ca56:	695b      	ldr	r3, [r3, #20]
 801ca58:	687a      	ldr	r2, [r7, #4]
 801ca5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ca5c:	68b8      	ldr	r0, [r7, #8]
 801ca5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ca60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ca62:	f7f7 fc53 	bl	801430c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ca66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ca6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ca6c:	1ad3      	subs	r3, r2, r3
 801ca6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ca72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ca76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca78:	4413      	add	r3, r2
 801ca7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ca7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	f47f af19 	bne.w	801c8ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	e002      	b.n	801ca92 <ip4_frag+0x26a>
      goto memerr;
 801ca8c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ca8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ca92:	4618      	mov	r0, r3
 801ca94:	3748      	adds	r7, #72	@ 0x48
 801ca96:	46bd      	mov	sp, r7
 801ca98:	bd80      	pop	{r7, pc}
 801ca9a:	bf00      	nop
 801ca9c:	080218c8 	.word	0x080218c8
 801caa0:	08021aa4 	.word	0x08021aa4
 801caa4:	08021910 	.word	0x08021910
 801caa8:	08021ac0 	.word	0x08021ac0
 801caac:	08021ae0 	.word	0x08021ae0
 801cab0:	0801c7c1 	.word	0x0801c7c1

0801cab4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b086      	sub	sp, #24
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
 801cabc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cabe:	230e      	movs	r3, #14
 801cac0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	895b      	ldrh	r3, [r3, #10]
 801cac6:	2b0e      	cmp	r3, #14
 801cac8:	d96e      	bls.n	801cba8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	7bdb      	ldrb	r3, [r3, #15]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d106      	bne.n	801cae0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cad2:	683b      	ldr	r3, [r7, #0]
 801cad4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cad8:	3301      	adds	r3, #1
 801cada:	b2da      	uxtb	r2, r3
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	685b      	ldr	r3, [r3, #4]
 801cae4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801cae6:	693b      	ldr	r3, [r7, #16]
 801cae8:	7b1a      	ldrb	r2, [r3, #12]
 801caea:	7b5b      	ldrb	r3, [r3, #13]
 801caec:	021b      	lsls	r3, r3, #8
 801caee:	4313      	orrs	r3, r2
 801caf0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801caf2:	693b      	ldr	r3, [r7, #16]
 801caf4:	781b      	ldrb	r3, [r3, #0]
 801caf6:	f003 0301 	and.w	r3, r3, #1
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d023      	beq.n	801cb46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801cafe:	693b      	ldr	r3, [r7, #16]
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	2b01      	cmp	r3, #1
 801cb04:	d10f      	bne.n	801cb26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cb06:	693b      	ldr	r3, [r7, #16]
 801cb08:	785b      	ldrb	r3, [r3, #1]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d11b      	bne.n	801cb46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cb12:	2b5e      	cmp	r3, #94	@ 0x5e
 801cb14:	d117      	bne.n	801cb46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	7b5b      	ldrb	r3, [r3, #13]
 801cb1a:	f043 0310 	orr.w	r3, r3, #16
 801cb1e:	b2da      	uxtb	r2, r3
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	735a      	strb	r2, [r3, #13]
 801cb24:	e00f      	b.n	801cb46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cb26:	693b      	ldr	r3, [r7, #16]
 801cb28:	2206      	movs	r2, #6
 801cb2a:	4928      	ldr	r1, [pc, #160]	@ (801cbcc <ethernet_input+0x118>)
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f001 fb53 	bl	801e1d8 <memcmp>
 801cb32:	4603      	mov	r3, r0
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d106      	bne.n	801cb46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	7b5b      	ldrb	r3, [r3, #13]
 801cb3c:	f043 0308 	orr.w	r3, r3, #8
 801cb40:	b2da      	uxtb	r2, r3
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cb46:	89fb      	ldrh	r3, [r7, #14]
 801cb48:	2b08      	cmp	r3, #8
 801cb4a:	d003      	beq.n	801cb54 <ethernet_input+0xa0>
 801cb4c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cb50:	d014      	beq.n	801cb7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cb52:	e032      	b.n	801cbba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cb54:	683b      	ldr	r3, [r7, #0]
 801cb56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cb5a:	f003 0308 	and.w	r3, r3, #8
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d024      	beq.n	801cbac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cb62:	8afb      	ldrh	r3, [r7, #22]
 801cb64:	4619      	mov	r1, r3
 801cb66:	6878      	ldr	r0, [r7, #4]
 801cb68:	f7f7 fb4a 	bl	8014200 <pbuf_remove_header>
 801cb6c:	4603      	mov	r3, r0
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d11e      	bne.n	801cbb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cb72:	6839      	ldr	r1, [r7, #0]
 801cb74:	6878      	ldr	r0, [r7, #4]
 801cb76:	f7fe ff21 	bl	801b9bc <ip4_input>
      break;
 801cb7a:	e013      	b.n	801cba4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cb7c:	683b      	ldr	r3, [r7, #0]
 801cb7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cb82:	f003 0308 	and.w	r3, r3, #8
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d014      	beq.n	801cbb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cb8a:	8afb      	ldrh	r3, [r7, #22]
 801cb8c:	4619      	mov	r1, r3
 801cb8e:	6878      	ldr	r0, [r7, #4]
 801cb90:	f7f7 fb36 	bl	8014200 <pbuf_remove_header>
 801cb94:	4603      	mov	r3, r0
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d10e      	bne.n	801cbb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cb9a:	6839      	ldr	r1, [r7, #0]
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f7fe f8c1 	bl	801ad24 <etharp_input>
      break;
 801cba2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cba4:	2300      	movs	r3, #0
 801cba6:	e00c      	b.n	801cbc2 <ethernet_input+0x10e>
    goto free_and_return;
 801cba8:	bf00      	nop
 801cbaa:	e006      	b.n	801cbba <ethernet_input+0x106>
        goto free_and_return;
 801cbac:	bf00      	nop
 801cbae:	e004      	b.n	801cbba <ethernet_input+0x106>
        goto free_and_return;
 801cbb0:	bf00      	nop
 801cbb2:	e002      	b.n	801cbba <ethernet_input+0x106>
        goto free_and_return;
 801cbb4:	bf00      	nop
 801cbb6:	e000      	b.n	801cbba <ethernet_input+0x106>
        goto free_and_return;
 801cbb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cbba:	6878      	ldr	r0, [r7, #4]
 801cbbc:	f7f7 fba6 	bl	801430c <pbuf_free>
  return ERR_OK;
 801cbc0:	2300      	movs	r3, #0
}
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	3718      	adds	r7, #24
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bd80      	pop	{r7, pc}
 801cbca:	bf00      	nop
 801cbcc:	080222c4 	.word	0x080222c4

0801cbd0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b086      	sub	sp, #24
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	60f8      	str	r0, [r7, #12]
 801cbd8:	60b9      	str	r1, [r7, #8]
 801cbda:	607a      	str	r2, [r7, #4]
 801cbdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cbde:	8c3b      	ldrh	r3, [r7, #32]
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f7f5 ffa5 	bl	8012b30 <lwip_htons>
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cbea:	210e      	movs	r1, #14
 801cbec:	68b8      	ldr	r0, [r7, #8]
 801cbee:	f7f7 faf7 	bl	80141e0 <pbuf_add_header>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d125      	bne.n	801cc44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cbf8:	68bb      	ldr	r3, [r7, #8]
 801cbfa:	685b      	ldr	r3, [r3, #4]
 801cbfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cbfe:	693b      	ldr	r3, [r7, #16]
 801cc00:	8afa      	ldrh	r2, [r7, #22]
 801cc02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cc04:	693b      	ldr	r3, [r7, #16]
 801cc06:	2206      	movs	r2, #6
 801cc08:	6839      	ldr	r1, [r7, #0]
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f001 fbc7 	bl	801e39e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cc10:	693b      	ldr	r3, [r7, #16]
 801cc12:	3306      	adds	r3, #6
 801cc14:	2206      	movs	r2, #6
 801cc16:	6879      	ldr	r1, [r7, #4]
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f001 fbc0 	bl	801e39e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cc24:	2b06      	cmp	r3, #6
 801cc26:	d006      	beq.n	801cc36 <ethernet_output+0x66>
 801cc28:	4b0a      	ldr	r3, [pc, #40]	@ (801cc54 <ethernet_output+0x84>)
 801cc2a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cc2e:	490a      	ldr	r1, [pc, #40]	@ (801cc58 <ethernet_output+0x88>)
 801cc30:	480a      	ldr	r0, [pc, #40]	@ (801cc5c <ethernet_output+0x8c>)
 801cc32:	f001 f989 	bl	801df48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	699b      	ldr	r3, [r3, #24]
 801cc3a:	68b9      	ldr	r1, [r7, #8]
 801cc3c:	68f8      	ldr	r0, [r7, #12]
 801cc3e:	4798      	blx	r3
 801cc40:	4603      	mov	r3, r0
 801cc42:	e002      	b.n	801cc4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801cc44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801cc46:	f06f 0301 	mvn.w	r3, #1
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	3718      	adds	r7, #24
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd80      	pop	{r7, pc}
 801cc52:	bf00      	nop
 801cc54:	08021af0 	.word	0x08021af0
 801cc58:	08021b28 	.word	0x08021b28
 801cc5c:	08021b5c 	.word	0x08021b5c

0801cc60 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b082      	sub	sp, #8
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	6078      	str	r0, [r7, #4]
 801cc68:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	2104      	movs	r1, #4
 801cc70:	4618      	mov	r0, r3
 801cc72:	f7f2 f8ed 	bl	800ee50 <osMessageQueueNew>
 801cc76:	4602      	mov	r2, r0
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d102      	bne.n	801cc8a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801cc84:	f04f 33ff 	mov.w	r3, #4294967295
 801cc88:	e000      	b.n	801cc8c <sys_mbox_new+0x2c>

  return ERR_OK;
 801cc8a:	2300      	movs	r3, #0
}
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	3708      	adds	r7, #8
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}

0801cc94 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b084      	sub	sp, #16
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
 801cc9c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	6818      	ldr	r0, [r3, #0]
 801cca2:	4639      	mov	r1, r7
 801cca4:	2300      	movs	r3, #0
 801cca6:	2200      	movs	r2, #0
 801cca8:	f7f2 f958 	bl	800ef5c <osMessageQueuePut>
 801ccac:	4603      	mov	r3, r0
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d102      	bne.n	801ccb8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	73fb      	strb	r3, [r7, #15]
 801ccb6:	e001      	b.n	801ccbc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ccb8:	23ff      	movs	r3, #255	@ 0xff
 801ccba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ccbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	3710      	adds	r7, #16
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	bd80      	pop	{r7, pc}

0801ccc8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	b086      	sub	sp, #24
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	60f8      	str	r0, [r7, #12]
 801ccd0:	60b9      	str	r1, [r7, #8]
 801ccd2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ccd4:	f7f1 fd1e 	bl	800e714 <osKernelGetTickCount>
 801ccd8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d013      	beq.n	801cd08 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	6818      	ldr	r0, [r3, #0]
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	2200      	movs	r2, #0
 801cce8:	68b9      	ldr	r1, [r7, #8]
 801ccea:	f7f2 f9ab 	bl	800f044 <osMessageQueueGet>
 801ccee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ccf0:	693b      	ldr	r3, [r7, #16]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d105      	bne.n	801cd02 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ccf6:	f7f1 fd0d 	bl	800e714 <osKernelGetTickCount>
 801ccfa:	4602      	mov	r2, r0
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	1ad3      	subs	r3, r2, r3
 801cd00:	e00f      	b.n	801cd22 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cd02:	f04f 33ff 	mov.w	r3, #4294967295
 801cd06:	e00c      	b.n	801cd22 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	6818      	ldr	r0, [r3, #0]
 801cd0c:	f04f 33ff 	mov.w	r3, #4294967295
 801cd10:	2200      	movs	r2, #0
 801cd12:	68b9      	ldr	r1, [r7, #8]
 801cd14:	f7f2 f996 	bl	800f044 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cd18:	f7f1 fcfc 	bl	800e714 <osKernelGetTickCount>
 801cd1c:	4602      	mov	r2, r0
 801cd1e:	697b      	ldr	r3, [r7, #20]
 801cd20:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cd22:	4618      	mov	r0, r3
 801cd24:	3718      	adds	r7, #24
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}

0801cd2a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cd2a:	b480      	push	{r7}
 801cd2c:	b083      	sub	sp, #12
 801cd2e:	af00      	add	r7, sp, #0
 801cd30:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d101      	bne.n	801cd3e <sys_mbox_valid+0x14>
    return 0;
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	e000      	b.n	801cd40 <sys_mbox_valid+0x16>
  else
    return 1;
 801cd3e:	2301      	movs	r3, #1
}
 801cd40:	4618      	mov	r0, r3
 801cd42:	370c      	adds	r7, #12
 801cd44:	46bd      	mov	sp, r7
 801cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd4a:	4770      	bx	lr

0801cd4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801cd50:	2000      	movs	r0, #0
 801cd52:	f7f1 fddb 	bl	800e90c <osMutexNew>
 801cd56:	4603      	mov	r3, r0
 801cd58:	4a01      	ldr	r2, [pc, #4]	@ (801cd60 <sys_init+0x14>)
 801cd5a:	6013      	str	r3, [r2, #0]
#endif
}
 801cd5c:	bf00      	nop
 801cd5e:	bd80      	pop	{r7, pc}
 801cd60:	2002778c 	.word	0x2002778c

0801cd64 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b082      	sub	sp, #8
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cd6c:	2000      	movs	r0, #0
 801cd6e:	f7f1 fdcd 	bl	800e90c <osMutexNew>
 801cd72:	4602      	mov	r2, r0
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d102      	bne.n	801cd86 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cd80:	f04f 33ff 	mov.w	r3, #4294967295
 801cd84:	e000      	b.n	801cd88 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cd86:	2300      	movs	r3, #0
}
 801cd88:	4618      	mov	r0, r3
 801cd8a:	3708      	adds	r7, #8
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	bd80      	pop	{r7, pc}

0801cd90 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b082      	sub	sp, #8
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	f04f 31ff 	mov.w	r1, #4294967295
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7f1 fe4d 	bl	800ea40 <osMutexAcquire>
#endif
}
 801cda6:	bf00      	nop
 801cda8:	3708      	adds	r7, #8
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bd80      	pop	{r7, pc}

0801cdae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cdae:	b580      	push	{r7, lr}
 801cdb0:	b082      	sub	sp, #8
 801cdb2:	af00      	add	r7, sp, #0
 801cdb4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f7f1 fe9e 	bl	800eafc <osMutexRelease>
}
 801cdc0:	bf00      	nop
 801cdc2:	3708      	adds	r7, #8
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd80      	pop	{r7, pc}

0801cdc8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b08e      	sub	sp, #56	@ 0x38
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	60f8      	str	r0, [r7, #12]
 801cdd0:	60b9      	str	r1, [r7, #8]
 801cdd2:	607a      	str	r2, [r7, #4]
 801cdd4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cdd6:	f107 0314 	add.w	r3, r7, #20
 801cdda:	2224      	movs	r2, #36	@ 0x24
 801cddc:	2100      	movs	r1, #0
 801cdde:	4618      	mov	r0, r3
 801cde0:	f001 fa0a 	bl	801e1f8 <memset>
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	617b      	str	r3, [r7, #20]
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cdec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801cdf0:	f107 0314 	add.w	r3, r7, #20
 801cdf4:	461a      	mov	r2, r3
 801cdf6:	6879      	ldr	r1, [r7, #4]
 801cdf8:	68b8      	ldr	r0, [r7, #8]
 801cdfa:	f7f1 fcb3 	bl	800e764 <osThreadNew>
 801cdfe:	4603      	mov	r3, r0
#endif
}
 801ce00:	4618      	mov	r0, r3
 801ce02:	3738      	adds	r7, #56	@ 0x38
 801ce04:	46bd      	mov	sp, r7
 801ce06:	bd80      	pop	{r7, pc}

0801ce08 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ce0c:	4b04      	ldr	r3, [pc, #16]	@ (801ce20 <sys_arch_protect+0x18>)
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	f04f 31ff 	mov.w	r1, #4294967295
 801ce14:	4618      	mov	r0, r3
 801ce16:	f7f1 fe13 	bl	800ea40 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801ce1a:	2301      	movs	r3, #1
}
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	bd80      	pop	{r7, pc}
 801ce20:	2002778c 	.word	0x2002778c

0801ce24 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	b082      	sub	sp, #8
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ce2c:	4b04      	ldr	r3, [pc, #16]	@ (801ce40 <sys_arch_unprotect+0x1c>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7f1 fe63 	bl	800eafc <osMutexRelease>
}
 801ce36:	bf00      	nop
 801ce38:	3708      	adds	r7, #8
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	bd80      	pop	{r7, pc}
 801ce3e:	bf00      	nop
 801ce40:	2002778c 	.word	0x2002778c

0801ce44 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result adc_testing(test_command_t* command){
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b088      	sub	sp, #32
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d102      	bne.n	801ce58 <adc_testing+0x14>
//        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801ce52:	f04f 33ff 	mov.w	r3, #4294967295
 801ce56:	e099      	b.n	801cf8c <adc_testing+0x148>
	}
	uint32_t expected_adc_result = command->bit_pattern[0];
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	79db      	ldrb	r3, [r3, #7]
 801ce5c:	61fb      	str	r3, [r7, #28]
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801ce5e:	69fb      	ldr	r3, [r7, #28]
 801ce60:	ee07 3a90 	vmov	s15, r3
 801ce64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce68:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 801cf94 <adc_testing+0x150>
 801ce6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ce70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ce74:	ee17 3a90 	vmov	r3, s15
 801ce78:	61bb      	str	r3, [r7, #24]

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801ce7a:	2100      	movs	r1, #0
 801ce7c:	4846      	ldr	r0, [pc, #280]	@ (801cf98 <adc_testing+0x154>)
 801ce7e:	f7e6 fbfb 	bl	8003678 <HAL_DAC_Start>
 801ce82:	4603      	mov	r3, r0
 801ce84:	75bb      	strb	r3, [r7, #22]
    if (status != HAL_OK) {
 801ce86:	7dbb      	ldrb	r3, [r7, #22]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d004      	beq.n	801ce96 <adc_testing+0x52>
//        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status); // Debug printf
        vPortFree(command);
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f7f5 fb91 	bl	80125b4 <vPortFree>
        return TEST_FAIL;
 801ce92:	23ff      	movs	r3, #255	@ 0xff
 801ce94:	e07a      	b.n	801cf8c <adc_testing+0x148>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801ce96:	2300      	movs	r3, #0
 801ce98:	75fb      	strb	r3, [r7, #23]
 801ce9a:	e06e      	b.n	801cf7a <adc_testing+0x136>

		if(i < command->bit_pattern_length){
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	799b      	ldrb	r3, [r3, #6]
 801cea0:	7dfa      	ldrb	r2, [r7, #23]
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d214      	bcs.n	801ced0 <adc_testing+0x8c>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801cea6:	7dfb      	ldrb	r3, [r7, #23]
 801cea8:	687a      	ldr	r2, [r7, #4]
 801ceaa:	4413      	add	r3, r2
 801ceac:	79db      	ldrb	r3, [r3, #7]
 801ceae:	61fb      	str	r3, [r7, #28]
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801ceb0:	69fb      	ldr	r3, [r7, #28]
 801ceb2:	ee07 3a90 	vmov	s15, r3
 801ceb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ceba:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801cf94 <adc_testing+0x150>
 801cebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cec6:	edc7 7a00 	vstr	s15, [r7]
 801ceca:	783b      	ldrb	r3, [r7, #0]
 801cecc:	b2db      	uxtb	r3, r3
 801cece:	61bb      	str	r3, [r7, #24]
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801ced0:	69fb      	ldr	r3, [r7, #28]
 801ced2:	2208      	movs	r2, #8
 801ced4:	2100      	movs	r1, #0
 801ced6:	4830      	ldr	r0, [pc, #192]	@ (801cf98 <adc_testing+0x154>)
 801ced8:	f7e6 fc7b 	bl	80037d2 <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801cedc:	2001      	movs	r0, #1
 801cede:	f7e5 fb87 	bl	80025f0 <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801cee2:	482e      	ldr	r0, [pc, #184]	@ (801cf9c <adc_testing+0x158>)
 801cee4:	f7e5 fc20 	bl	8002728 <HAL_ADC_Start_IT>
 801cee8:	4603      	mov	r3, r0
 801ceea:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801ceec:	7dbb      	ldrb	r3, [r7, #22]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d007      	beq.n	801cf02 <adc_testing+0xbe>
//	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status); // Debug printf
	    	HAL_ADC_Stop(&hadc1);
 801cef2:	482a      	ldr	r0, [pc, #168]	@ (801cf9c <adc_testing+0x158>)
 801cef4:	f7e5 fbe4 	bl	80026c0 <HAL_ADC_Stop>
	        vPortFree(command);
 801cef8:	6878      	ldr	r0, [r7, #4]
 801cefa:	f7f5 fb5b 	bl	80125b4 <vPortFree>
	        return TEST_FAIL;
 801cefe:	23ff      	movs	r3, #255	@ 0xff
 801cf00:	e044      	b.n	801cf8c <adc_testing+0x148>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801cf02:	4b27      	ldr	r3, [pc, #156]	@ (801cfa0 <adc_testing+0x15c>)
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	f04f 31ff 	mov.w	r1, #4294967295
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7f2 ffae 	bl	800fe6c <xQueueSemaphoreTake>
 801cf10:	4603      	mov	r3, r0
 801cf12:	2b01      	cmp	r3, #1
 801cf14:	d111      	bne.n	801cf3a <adc_testing+0xf6>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801cf16:	4821      	ldr	r0, [pc, #132]	@ (801cf9c <adc_testing+0x158>)
 801cf18:	f7e5 fdee 	bl	8002af8 <HAL_ADC_GetValue>
 801cf1c:	6138      	str	r0, [r7, #16]
	         vPortFree(command);
	         return TEST_FAIL;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801cf1e:	693a      	ldr	r2, [r7, #16]
 801cf20:	69fb      	ldr	r3, [r7, #28]
 801cf22:	1ad3      	subs	r3, r2, r3
 801cf24:	60fb      	str	r3, [r7, #12]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	bfb8      	it	lt
 801cf2c:	425b      	neglt	r3, r3
 801cf2e:	60fb      	str	r3, [r7, #12]

		if (difference > adc_tolerance)
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	69ba      	ldr	r2, [r7, #24]
 801cf34:	429a      	cmp	r2, r3
 801cf36:	d210      	bcs.n	801cf5a <adc_testing+0x116>
 801cf38:	e007      	b.n	801cf4a <adc_testing+0x106>
	         HAL_ADC_Stop(&hadc1);
 801cf3a:	4818      	ldr	r0, [pc, #96]	@ (801cf9c <adc_testing+0x158>)
 801cf3c:	f7e5 fbc0 	bl	80026c0 <HAL_ADC_Stop>
	         vPortFree(command);
 801cf40:	6878      	ldr	r0, [r7, #4]
 801cf42:	f7f5 fb37 	bl	80125b4 <vPortFree>
	         return TEST_FAIL;
 801cf46:	23ff      	movs	r3, #255	@ 0xff
 801cf48:	e020      	b.n	801cf8c <adc_testing+0x148>
		{
//			  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value); // Debug printf
			  HAL_ADC_Stop(&hadc1);
 801cf4a:	4814      	ldr	r0, [pc, #80]	@ (801cf9c <adc_testing+0x158>)
 801cf4c:	f7e5 fbb8 	bl	80026c0 <HAL_ADC_Stop>
			  vPortFree(command);
 801cf50:	6878      	ldr	r0, [r7, #4]
 801cf52:	f7f5 fb2f 	bl	80125b4 <vPortFree>
			  return TEST_FAIL;
 801cf56:	23ff      	movs	r3, #255	@ 0xff
 801cf58:	e018      	b.n	801cf8c <adc_testing+0x148>
//				// Debug printf
//			  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
//			  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801cf5a:	4810      	ldr	r0, [pc, #64]	@ (801cf9c <adc_testing+0x158>)
 801cf5c:	f7e5 fbb0 	bl	80026c0 <HAL_ADC_Stop>
 801cf60:	4603      	mov	r3, r0
 801cf62:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801cf64:	7dbb      	ldrb	r3, [r7, #22]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d004      	beq.n	801cf74 <adc_testing+0x130>
//			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status); // Debug printf
	         vPortFree(command);
 801cf6a:	6878      	ldr	r0, [r7, #4]
 801cf6c:	f7f5 fb22 	bl	80125b4 <vPortFree>
	         return TEST_FAIL;
 801cf70:	23ff      	movs	r3, #255	@ 0xff
 801cf72:	e00b      	b.n	801cf8c <adc_testing+0x148>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801cf74:	7dfb      	ldrb	r3, [r7, #23]
 801cf76:	3301      	adds	r3, #1
 801cf78:	75fb      	strb	r3, [r7, #23]
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	795b      	ldrb	r3, [r3, #5]
 801cf7e:	7dfa      	ldrb	r2, [r7, #23]
 801cf80:	429a      	cmp	r2, r3
 801cf82:	d38b      	bcc.n	801ce9c <adc_testing+0x58>
		}
	} // end of iterations

	vPortFree(command);
 801cf84:	6878      	ldr	r0, [r7, #4]
 801cf86:	f7f5 fb15 	bl	80125b4 <vPortFree>
	return TEST_PASS;
 801cf8a:	2301      	movs	r3, #1
}
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	3720      	adds	r7, #32
 801cf90:	46bd      	mov	sp, r7
 801cf92:	bd80      	pop	{r7, pc}
 801cf94:	3dcccccd 	.word	0x3dcccccd
 801cf98:	20000254 	.word	0x20000254
 801cf9c:	200001e8 	.word	0x200001e8
 801cfa0:	20000c44 	.word	0x20000c44

0801cfa4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b084      	sub	sp, #16
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cfac:	2300      	movs	r3, #0
 801cfae:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801cfb0:	4b0b      	ldr	r3, [pc, #44]	@ (801cfe0 <HAL_ADC_ConvCpltCallback+0x3c>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	f107 020c 	add.w	r2, r7, #12
 801cfb8:	4611      	mov	r1, r2
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f7f2 fdd5 	bl	800fb6a <xQueueGiveFromISR>
//	printf("ADC complete callback fired and gave a semaphore\n\r"); // Debug printf
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d007      	beq.n	801cfd6 <HAL_ADC_ConvCpltCallback+0x32>
 801cfc6:	4b07      	ldr	r3, [pc, #28]	@ (801cfe4 <HAL_ADC_ConvCpltCallback+0x40>)
 801cfc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cfcc:	601a      	str	r2, [r3, #0]
 801cfce:	f3bf 8f4f 	dsb	sy
 801cfd2:	f3bf 8f6f 	isb	sy
}
 801cfd6:	bf00      	nop
 801cfd8:	3710      	adds	r7, #16
 801cfda:	46bd      	mov	sp, r7
 801cfdc:	bd80      	pop	{r7, pc}
 801cfde:	bf00      	nop
 801cfe0:	20000c44 	.word	0x20000c44
 801cfe4:	e000ed04 	.word	0xe000ed04

0801cfe8 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4)   // Master
#define I2C_RECEIVER 	(&hi2c1)   // Slave
#define I2C_SLAVE_ADDR  (120 << 1) // left-shifted 7-bit address


Result i2c_testing(test_command_t* command){
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801cfee:	af00      	add	r7, sp, #0
 801cff0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801cff4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801cff8:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801cffa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801cffe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d002:	4618      	mov	r0, r3
 801d004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d008:	461a      	mov	r2, r3
 801d00a:	2100      	movs	r1, #0
 801d00c:	f001 f8f4 	bl	801e1f8 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d010:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d014:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d018:	4618      	mov	r0, r3
 801d01a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d01e:	461a      	mov	r2, r3
 801d020:	2100      	movs	r1, #0
 801d022:	f001 f8e9 	bl	801e1f8 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d026:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d02a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801d02e:	4618      	mov	r0, r3
 801d030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d034:	461a      	mov	r2, r3
 801d036:	2100      	movs	r1, #0
 801d038:	f001 f8de 	bl	801e1f8 <memset>

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d03c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d040:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d102      	bne.n	801d050 <i2c_testing+0x68>
//        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d04a:	f04f 33ff 	mov.w	r3, #4294967295
 801d04e:	e17b      	b.n	801d348 <i2c_testing+0x360>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d050:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d054:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	1dd9      	adds	r1, r3, #7
 801d05c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d060:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	799b      	ldrb	r3, [r3, #6]
 801d068:	461a      	mov	r2, r3
 801d06a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d06e:	4618      	mov	r0, r3
 801d070:	f001 f995 	bl	801e39e <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d074:	2300      	movs	r3, #0
 801d076:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d07a:	e152      	b.n	801d322 <i2c_testing+0x33a>
	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
 801d07c:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d080:	1c59      	adds	r1, r3, #1
 801d082:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d086:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	795b      	ldrb	r3, [r3, #5]
 801d08e:	461a      	mov	r2, r3
 801d090:	48b0      	ldr	r0, [pc, #704]	@ (801d354 <i2c_testing+0x36c>)
 801d092:	f000 ff59 	bl	801df48 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d096:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d09a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	799b      	ldrb	r3, [r3, #6]
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d0a8:	2100      	movs	r1, #0
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f001 f8a4 	bl	801e1f8 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d0b0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d0b4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	799b      	ldrb	r3, [r3, #6]
 801d0bc:	461a      	mov	r2, r3
 801d0be:	f107 0308 	add.w	r3, r7, #8
 801d0c2:	4619      	mov	r1, r3
 801d0c4:	48a4      	ldr	r0, [pc, #656]	@ (801d358 <i2c_testing+0x370>)
 801d0c6:	f7e9 f8e1 	bl	800628c <HAL_I2C_Slave_Receive_DMA>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d0d0:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d00e      	beq.n	801d0f6 <i2c_testing+0x10e>
	        printf("Failed to start slave receive DMA: %d\n\r", status); // Debug printf
 801d0d8:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d0dc:	4619      	mov	r1, r3
 801d0de:	489f      	ldr	r0, [pc, #636]	@ (801d35c <i2c_testing+0x374>)
 801d0e0:	f000 ff32 	bl	801df48 <iprintf>
	        vPortFree(command);
 801d0e4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d0e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d0ec:	6818      	ldr	r0, [r3, #0]
 801d0ee:	f7f5 fa61 	bl	80125b4 <vPortFree>
	        return TEST_FAIL;
 801d0f2:	23ff      	movs	r3, #255	@ 0xff
 801d0f4:	e128      	b.n	801d348 <i2c_testing+0x360>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801d0f6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d0fa:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	799b      	ldrb	r3, [r3, #6]
 801d102:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801d106:	21f0      	movs	r1, #240	@ 0xf0
 801d108:	4895      	ldr	r0, [pc, #596]	@ (801d360 <i2c_testing+0x378>)
 801d10a:	f7e8 ffab 	bl	8006064 <HAL_I2C_Master_Transmit_DMA>
 801d10e:	4603      	mov	r3, r0
 801d110:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d114:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d014      	beq.n	801d146 <i2c_testing+0x15e>
	        printf("Failed to send DMA on I2C sender: %d\n\r", status); // Debug printf
 801d11c:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d120:	4619      	mov	r1, r3
 801d122:	4890      	ldr	r0, [pc, #576]	@ (801d364 <i2c_testing+0x37c>)
 801d124:	f000 ff10 	bl	801df48 <iprintf>
	        vPortFree(command);
 801d128:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d12c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d130:	6818      	ldr	r0, [r3, #0]
 801d132:	f7f5 fa3f 	bl	80125b4 <vPortFree>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801d136:	488a      	ldr	r0, [pc, #552]	@ (801d360 <i2c_testing+0x378>)
 801d138:	f000 f97a 	bl	801d430 <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d13c:	4886      	ldr	r0, [pc, #536]	@ (801d358 <i2c_testing+0x370>)
 801d13e:	f000 f977 	bl	801d430 <i2c_reset>
	        return TEST_FAIL;
 801d142:	23ff      	movs	r3, #255	@ 0xff
 801d144:	e100      	b.n	801d348 <i2c_testing+0x360>
	    }

	    // --- 3. WAIT FOR BOTH TX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801d146:	4b88      	ldr	r3, [pc, #544]	@ (801d368 <i2c_testing+0x380>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d14e:	4618      	mov	r0, r3
 801d150:	f7f2 fe8c 	bl	800fe6c <xQueueSemaphoreTake>
 801d154:	4603      	mov	r3, r0
 801d156:	2b01      	cmp	r3, #1
 801d158:	d011      	beq.n	801d17e <i2c_testing+0x196>
	         printf("Master TX timeout\n\r"); // Debug printf
 801d15a:	4884      	ldr	r0, [pc, #528]	@ (801d36c <i2c_testing+0x384>)
 801d15c:	f000 fef4 	bl	801df48 <iprintf>
	         vPortFree(command);
 801d160:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d164:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d168:	6818      	ldr	r0, [r3, #0]
 801d16a:	f7f5 fa23 	bl	80125b4 <vPortFree>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d16e:	487c      	ldr	r0, [pc, #496]	@ (801d360 <i2c_testing+0x378>)
 801d170:	f000 f95e 	bl	801d430 <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d174:	4878      	ldr	r0, [pc, #480]	@ (801d358 <i2c_testing+0x370>)
 801d176:	f000 f95b 	bl	801d430 <i2c_reset>
	         return TEST_FAIL;
 801d17a:	23ff      	movs	r3, #255	@ 0xff
 801d17c:	e0e4      	b.n	801d348 <i2c_testing+0x360>
	    }
        else
        {
        	HAL_Delay(1);
 801d17e:	2001      	movs	r0, #1
 801d180:	f7e5 fa36 	bl	80025f0 <HAL_Delay>

        	status = HAL_I2C_Slave_Transmit_IT(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d184:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d188:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	799b      	ldrb	r3, [r3, #6]
 801d190:	461a      	mov	r2, r3
 801d192:	f107 0308 	add.w	r3, r7, #8
 801d196:	4619      	mov	r1, r3
 801d198:	486f      	ldr	r0, [pc, #444]	@ (801d358 <i2c_testing+0x370>)
 801d19a:	f7e8 fef5 	bl	8005f88 <HAL_I2C_Slave_Transmit_IT>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			 if (status != HAL_OK){
 801d1a4:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d014      	beq.n	801d1d6 <i2c_testing+0x1ee>
				 printf("Failed to echo send on I2C receiver: %d\n\r", status);
 801d1ac:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d1b0:	4619      	mov	r1, r3
 801d1b2:	486f      	ldr	r0, [pc, #444]	@ (801d370 <i2c_testing+0x388>)
 801d1b4:	f000 fec8 	bl	801df48 <iprintf>
				 vPortFree(command);
 801d1b8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1bc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1c0:	6818      	ldr	r0, [r3, #0]
 801d1c2:	f7f5 f9f7 	bl	80125b4 <vPortFree>
				 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d1c6:	4866      	ldr	r0, [pc, #408]	@ (801d360 <i2c_testing+0x378>)
 801d1c8:	f000 f932 	bl	801d430 <i2c_reset>
				 i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d1cc:	4862      	ldr	r0, [pc, #392]	@ (801d358 <i2c_testing+0x370>)
 801d1ce:	f000 f92f 	bl	801d430 <i2c_reset>
				 return TEST_FAIL;
 801d1d2:	23ff      	movs	r3, #255	@ 0xff
 801d1d4:	e0b8      	b.n	801d348 <i2c_testing+0x360>
			 }
        	// Arm sender receive before receiver transmits back
			 status = HAL_I2C_Master_Receive_IT(I2C_SENDER, I2C_SLAVE_ADDR, rx_buffer, command->bit_pattern_length);
 801d1d6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1da:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	799b      	ldrb	r3, [r3, #6]
 801d1e2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801d1e6:	21f0      	movs	r1, #240	@ 0xf0
 801d1e8:	485d      	ldr	r0, [pc, #372]	@ (801d360 <i2c_testing+0x378>)
 801d1ea:	f7e8 fe5d 	bl	8005ea8 <HAL_I2C_Master_Receive_IT>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			if (status != HAL_OK) {
 801d1f4:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d00e      	beq.n	801d21a <i2c_testing+0x232>
				printf("Sender Failed to start receive back: %d\n\r", status);
 801d1fc:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d200:	4619      	mov	r1, r3
 801d202:	485c      	ldr	r0, [pc, #368]	@ (801d374 <i2c_testing+0x38c>)
 801d204:	f000 fea0 	bl	801df48 <iprintf>
				vPortFree(command);
 801d208:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d20c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d210:	6818      	ldr	r0, [r3, #0]
 801d212:	f7f5 f9cf 	bl	80125b4 <vPortFree>
				return TEST_FAIL;
 801d216:	23ff      	movs	r3, #255	@ 0xff
 801d218:	e096      	b.n	801d348 <i2c_testing+0x360>
			}

        }
	    //  WAIT FOR BOTH RX DMA COMPLETION
	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801d21a:	4b57      	ldr	r3, [pc, #348]	@ (801d378 <i2c_testing+0x390>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d222:	4618      	mov	r0, r3
 801d224:	f7f2 fe22 	bl	800fe6c <xQueueSemaphoreTake>
 801d228:	4603      	mov	r3, r0
 801d22a:	2b01      	cmp	r3, #1
 801d22c:	d011      	beq.n	801d252 <i2c_testing+0x26a>
	         printf("Slave RX timeout\n\r"); // Debug printf
 801d22e:	4853      	ldr	r0, [pc, #332]	@ (801d37c <i2c_testing+0x394>)
 801d230:	f000 fe8a 	bl	801df48 <iprintf>
	         vPortFree(command);
 801d234:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d238:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d23c:	6818      	ldr	r0, [r3, #0]
 801d23e:	f7f5 f9b9 	bl	80125b4 <vPortFree>
			 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d242:	4847      	ldr	r0, [pc, #284]	@ (801d360 <i2c_testing+0x378>)
 801d244:	f000 f8f4 	bl	801d430 <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d248:	4843      	ldr	r0, [pc, #268]	@ (801d358 <i2c_testing+0x370>)
 801d24a:	f000 f8f1 	bl	801d430 <i2c_reset>
	         return TEST_FAIL;
 801d24e:	23ff      	movs	r3, #255	@ 0xff
 801d250:	e07a      	b.n	801d348 <i2c_testing+0x360>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801d252:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d256:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	799b      	ldrb	r3, [r3, #6]
 801d25e:	2b64      	cmp	r3, #100	@ 0x64
 801d260:	d92c      	bls.n	801d2bc <i2c_testing+0x2d4>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d262:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d266:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	799b      	ldrb	r3, [r3, #6]
 801d26e:	461a      	mov	r2, r3
 801d270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d274:	4611      	mov	r1, r2
 801d276:	4618      	mov	r0, r3
 801d278:	f7e3 ff90 	bl	800119c <calculate_crc>
 801d27c:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d280:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d284:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	799b      	ldrb	r3, [r3, #6]
 801d28c:	461a      	mov	r2, r3
 801d28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d292:	4611      	mov	r1, r2
 801d294:	4618      	mov	r0, r3
 801d296:	f7e3 ff81 	bl	800119c <calculate_crc>
 801d29a:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
	        if (sent_crc != received_crc) {
 801d29e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801d2a2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801d2a6:	429a      	cmp	r2, r3
 801d2a8:	d02c      	beq.n	801d304 <i2c_testing+0x31c>
//	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            vPortFree(command);
 801d2aa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2ae:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2b2:	6818      	ldr	r0, [r3, #0]
 801d2b4:	f7f5 f97e 	bl	80125b4 <vPortFree>
	            return TEST_FAIL;
 801d2b8:	23ff      	movs	r3, #255	@ 0xff
 801d2ba:	e045      	b.n	801d348 <i2c_testing+0x360>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d2bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2c0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	799b      	ldrb	r3, [r3, #6]
 801d2c8:	461a      	mov	r2, r3
 801d2ca:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801d2ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f000 ff80 	bl	801e1d8 <memcmp>
 801d2d8:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
	        if (comp != 0) {
 801d2dc:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d00f      	beq.n	801d304 <i2c_testing+0x31c>
	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
 801d2e4:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d2e8:	3301      	adds	r3, #1
 801d2ea:	4619      	mov	r1, r3
 801d2ec:	4824      	ldr	r0, [pc, #144]	@ (801d380 <i2c_testing+0x398>)
 801d2ee:	f000 fe2b 	bl	801df48 <iprintf>
	            vPortFree(command);
 801d2f2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2f6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2fa:	6818      	ldr	r0, [r3, #0]
 801d2fc:	f7f5 f95a 	bl	80125b4 <vPortFree>
	            return TEST_FAIL;
 801d300:	23ff      	movs	r3, #255	@ 0xff
 801d302:	e021      	b.n	801d348 <i2c_testing+0x360>
	        }
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf
 801d304:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d308:	3301      	adds	r3, #1
 801d30a:	4619      	mov	r1, r3
 801d30c:	481d      	ldr	r0, [pc, #116]	@ (801d384 <i2c_testing+0x39c>)
 801d30e:	f000 fe1b 	bl	801df48 <iprintf>

        osDelay(10);
 801d312:	200a      	movs	r0, #10
 801d314:	f7f1 facc 	bl	800e8b0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d318:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d31c:	3301      	adds	r3, #1
 801d31e:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d322:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d326:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	795b      	ldrb	r3, [r3, #5]
 801d32e:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801d332:	429a      	cmp	r2, r3
 801d334:	f4ff aea2 	bcc.w	801d07c <i2c_testing+0x94>
	}
    vPortFree(command);
 801d338:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d33c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d340:	6818      	ldr	r0, [r3, #0]
 801d342:	f7f5 f937 	bl	80125b4 <vPortFree>
    return TEST_PASS;
 801d346:	2301      	movs	r3, #1
}
 801d348:	4618      	mov	r0, r3
 801d34a:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}
 801d352:	bf00      	nop
 801d354:	08021b84 	.word	0x08021b84
 801d358:	20000268 	.word	0x20000268
 801d35c:	08021ba4 	.word	0x08021ba4
 801d360:	200002bc 	.word	0x200002bc
 801d364:	08021bcc 	.word	0x08021bcc
 801d368:	20000c3c 	.word	0x20000c3c
 801d36c:	08021bf4 	.word	0x08021bf4
 801d370:	08021c08 	.word	0x08021c08
 801d374:	08021c34 	.word	0x08021c34
 801d378:	20000c38 	.word	0x20000c38
 801d37c:	08021c60 	.word	0x08021c60
 801d380:	08021c74 	.word	0x08021c74
 801d384:	08021c98 	.word	0x08021c98

0801d388 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b084      	sub	sp, #16
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d390:	2300      	movs	r3, #0
 801d392:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681a      	ldr	r2, [r3, #0]
 801d398:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d0 <HAL_I2C_MasterTxCpltCallback+0x48>)
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	429a      	cmp	r2, r3
 801d39e:	d107      	bne.n	801d3b0 <HAL_I2C_MasterTxCpltCallback+0x28>
    {
//        printf("Master TX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801d3a0:	4b0c      	ldr	r3, [pc, #48]	@ (801d3d4 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	f107 020c 	add.w	r2, r7, #12
 801d3a8:	4611      	mov	r1, r2
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	f7f2 fbdd 	bl	800fb6a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d007      	beq.n	801d3c6 <HAL_I2C_MasterTxCpltCallback+0x3e>
 801d3b6:	4b08      	ldr	r3, [pc, #32]	@ (801d3d8 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801d3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d3bc:	601a      	str	r2, [r3, #0]
 801d3be:	f3bf 8f4f 	dsb	sy
 801d3c2:	f3bf 8f6f 	isb	sy
}
 801d3c6:	bf00      	nop
 801d3c8:	3710      	adds	r7, #16
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	bd80      	pop	{r7, pc}
 801d3ce:	bf00      	nop
 801d3d0:	200002bc 	.word	0x200002bc
 801d3d4:	20000c3c 	.word	0x20000c3c
 801d3d8:	e000ed04 	.word	0xe000ed04

0801d3dc <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b084      	sub	sp, #16
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681a      	ldr	r2, [r3, #0]
 801d3ec:	4b0d      	ldr	r3, [pc, #52]	@ (801d424 <HAL_I2C_MasterRxCpltCallback+0x48>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	429a      	cmp	r2, r3
 801d3f2:	d107      	bne.n	801d404 <HAL_I2C_MasterRxCpltCallback+0x28>
    {
//        printf("Master RX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801d3f4:	4b0c      	ldr	r3, [pc, #48]	@ (801d428 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	f107 020c 	add.w	r2, r7, #12
 801d3fc:	4611      	mov	r1, r2
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7f2 fbb3 	bl	800fb6a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d007      	beq.n	801d41a <HAL_I2C_MasterRxCpltCallback+0x3e>
 801d40a:	4b08      	ldr	r3, [pc, #32]	@ (801d42c <HAL_I2C_MasterRxCpltCallback+0x50>)
 801d40c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d410:	601a      	str	r2, [r3, #0]
 801d412:	f3bf 8f4f 	dsb	sy
 801d416:	f3bf 8f6f 	isb	sy
}
 801d41a:	bf00      	nop
 801d41c:	3710      	adds	r7, #16
 801d41e:	46bd      	mov	sp, r7
 801d420:	bd80      	pop	{r7, pc}
 801d422:	bf00      	nop
 801d424:	200002bc 	.word	0x200002bc
 801d428:	20000c38 	.word	0x20000c38
 801d42c:	e000ed04 	.word	0xe000ed04

0801d430 <i2c_reset>:
// reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801d430:	b580      	push	{r7, lr}
 801d432:	b082      	sub	sp, #8
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801d438:	6878      	ldr	r0, [r7, #4]
 801d43a:	f7e8 fd05 	bl	8005e48 <HAL_I2C_DeInit>
 801d43e:	4603      	mov	r3, r0
 801d440:	2b00      	cmp	r3, #0
 801d442:	d001      	beq.n	801d448 <i2c_reset+0x18>
        // Log a fatal error, the peripheral is in an unrecoverable state
        Error_Handler();
 801d444:	f7e3 ffb6 	bl	80013b4 <Error_Handler>
//        printf("Failed to de-initialize I2C peripheral!\n\r"); // Debug printf
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801d448:	6878      	ldr	r0, [r7, #4]
 801d44a:	f7e8 fc61 	bl	8005d10 <HAL_I2C_Init>
 801d44e:	4603      	mov	r3, r0
 801d450:	2b00      	cmp	r3, #0
 801d452:	d001      	beq.n	801d458 <i2c_reset+0x28>
        // Log a fatal error
        Error_Handler();
 801d454:	f7e3 ffae 	bl	80013b4 <Error_Handler>
//        printf("Failed to re-initialize I2C peripheral!\n\r"); // Debug printf
    }
}
 801d458:	bf00      	nop
 801d45a:	3708      	adds	r7, #8
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd80      	pop	{r7, pc}

0801d460 <spi_testing>:
#define SPI_RECEIVER	(&hspi2) // Slave

uint8_t echo_rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
uint8_t echo_tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

Result spi_testing(test_command_t* command){
 801d460:	b580      	push	{r7, lr}
 801d462:	b086      	sub	sp, #24
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
	static uint8_t echo_rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
	static uint8_t echo_tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d105      	bne.n	801d47a <spi_testing+0x1a>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n");
 801d46e:	489a      	ldr	r0, [pc, #616]	@ (801d6d8 <spi_testing+0x278>)
 801d470:	f000 fdd2 	bl	801e018 <puts>
        return TEST_ERR;
 801d474:	f04f 33ff 	mov.w	r3, #4294967295
 801d478:	e129      	b.n	801d6ce <spi_testing+0x26e>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	1dd9      	adds	r1, r3, #7
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	799b      	ldrb	r3, [r3, #6]
 801d482:	461a      	mov	r2, r3
 801d484:	4895      	ldr	r0, [pc, #596]	@ (801d6dc <spi_testing+0x27c>)
 801d486:	f000 ff8a 	bl	801e39e <memcpy>

	for(uint8_t i = 0; i < command->iterations; i++)
 801d48a:	2300      	movs	r3, #0
 801d48c:	75fb      	strb	r3, [r7, #23]
 801d48e:	e114      	b.n	801d6ba <spi_testing+0x25a>
	{
	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801d490:	7dfb      	ldrb	r3, [r7, #23]
 801d492:	1c59      	adds	r1, r3, #1
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	795b      	ldrb	r3, [r3, #5]
 801d498:	461a      	mov	r2, r3
 801d49a:	4891      	ldr	r0, [pc, #580]	@ (801d6e0 <spi_testing+0x280>)
 801d49c:	f000 fd54 	bl	801df48 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	799b      	ldrb	r3, [r3, #6]
 801d4a4:	461a      	mov	r2, r3
 801d4a6:	2100      	movs	r1, #0
 801d4a8:	488e      	ldr	r0, [pc, #568]	@ (801d6e4 <spi_testing+0x284>)
 801d4aa:	f000 fea5 	bl	801e1f8 <memset>

	    HAL_SPI_Abort_IT(SPI_SENDER);
 801d4ae:	488e      	ldr	r0, [pc, #568]	@ (801d6e8 <spi_testing+0x288>)
 801d4b0:	f7ec fa8a 	bl	80099c8 <HAL_SPI_Abort_IT>
	    HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d4b4:	488d      	ldr	r0, [pc, #564]	@ (801d6ec <spi_testing+0x28c>)
 801d4b6:	f7ec fa87 	bl	80099c8 <HAL_SPI_Abort_IT>

	    // 1. Prepare Slave for a Receive Operation
	    status = HAL_SPI_TransmitReceive_IT(SPI_RECEIVER, echo_tx_buffer,echo_rx_buffer, command->bit_pattern_length);
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	799b      	ldrb	r3, [r3, #6]
 801d4be:	4a8c      	ldr	r2, [pc, #560]	@ (801d6f0 <spi_testing+0x290>)
 801d4c0:	498c      	ldr	r1, [pc, #560]	@ (801d6f4 <spi_testing+0x294>)
 801d4c2:	488a      	ldr	r0, [pc, #552]	@ (801d6ec <spi_testing+0x28c>)
 801d4c4:	f7ec f9ae 	bl	8009824 <HAL_SPI_TransmitReceive_IT>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d4cc:	7dbb      	ldrb	r3, [r7, #22]
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d009      	beq.n	801d4e6 <spi_testing+0x86>
	        printf("Failed to start slave receive: %d\n\r", status);
 801d4d2:	7dbb      	ldrb	r3, [r7, #22]
 801d4d4:	4619      	mov	r1, r3
 801d4d6:	4888      	ldr	r0, [pc, #544]	@ (801d6f8 <spi_testing+0x298>)
 801d4d8:	f000 fd36 	bl	801df48 <iprintf>
	        vPortFree(command);
 801d4dc:	6878      	ldr	r0, [r7, #4]
 801d4de:	f7f5 f869 	bl	80125b4 <vPortFree>
	        return TEST_FAIL;
 801d4e2:	23ff      	movs	r3, #255	@ 0xff
 801d4e4:	e0f3      	b.n	801d6ce <spi_testing+0x26e>
	    }

	    // 2. Master Transmits data
	    status = HAL_SPI_TransmitReceive_IT(SPI_SENDER, tx_buffer,rx_buffer, command->bit_pattern_length);
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	799b      	ldrb	r3, [r3, #6]
 801d4ea:	4a7e      	ldr	r2, [pc, #504]	@ (801d6e4 <spi_testing+0x284>)
 801d4ec:	497b      	ldr	r1, [pc, #492]	@ (801d6dc <spi_testing+0x27c>)
 801d4ee:	487e      	ldr	r0, [pc, #504]	@ (801d6e8 <spi_testing+0x288>)
 801d4f0:	f7ec f998 	bl	8009824 <HAL_SPI_TransmitReceive_IT>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d4f8:	7dbb      	ldrb	r3, [r7, #22]
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d00c      	beq.n	801d518 <spi_testing+0xb8>
	        printf("Failed to start master transmit: %d\n\r", status);
 801d4fe:	7dbb      	ldrb	r3, [r7, #22]
 801d500:	4619      	mov	r1, r3
 801d502:	487e      	ldr	r0, [pc, #504]	@ (801d6fc <spi_testing+0x29c>)
 801d504:	f000 fd20 	bl	801df48 <iprintf>
	        vPortFree(command);
 801d508:	6878      	ldr	r0, [r7, #4]
 801d50a:	f7f5 f853 	bl	80125b4 <vPortFree>
	        HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d50e:	4877      	ldr	r0, [pc, #476]	@ (801d6ec <spi_testing+0x28c>)
 801d510:	f7ec fa5a 	bl	80099c8 <HAL_SPI_Abort_IT>
	        return TEST_FAIL;
 801d514:	23ff      	movs	r3, #255	@ 0xff
 801d516:	e0da      	b.n	801d6ce <spi_testing+0x26e>
	    }

	    // 3. Wait for the Master's Transmit to complete
	    if (xSemaphoreTake(SpiTxHandle, TIMEOUT) != pdPASS) {
 801d518:	4b79      	ldr	r3, [pc, #484]	@ (801d700 <spi_testing+0x2a0>)
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d520:	4618      	mov	r0, r3
 801d522:	f7f2 fca3 	bl	800fe6c <xQueueSemaphoreTake>
 801d526:	4603      	mov	r3, r0
 801d528:	2b01      	cmp	r3, #1
 801d52a:	d00d      	beq.n	801d548 <spi_testing+0xe8>
	         printf("Master TX timeout\n\r");
 801d52c:	4875      	ldr	r0, [pc, #468]	@ (801d704 <spi_testing+0x2a4>)
 801d52e:	f000 fd0b 	bl	801df48 <iprintf>
	         vPortFree(command);
 801d532:	6878      	ldr	r0, [r7, #4]
 801d534:	f7f5 f83e 	bl	80125b4 <vPortFree>
	         HAL_SPI_Abort_IT(SPI_SENDER);
 801d538:	486b      	ldr	r0, [pc, #428]	@ (801d6e8 <spi_testing+0x288>)
 801d53a:	f7ec fa45 	bl	80099c8 <HAL_SPI_Abort_IT>
		     HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d53e:	486b      	ldr	r0, [pc, #428]	@ (801d6ec <spi_testing+0x28c>)
 801d540:	f7ec fa42 	bl	80099c8 <HAL_SPI_Abort_IT>
		     return TEST_FAIL;
 801d544:	23ff      	movs	r3, #255	@ 0xff
 801d546:	e0c2      	b.n	801d6ce <spi_testing+0x26e>
	    else
	    {

	    }
	    // 4. Wait for the Slave's Receive to complete, which triggers its echo back
	    if (xSemaphoreTake(SpiSlaveRxHandle, TIMEOUT) != pdPASS) {
 801d548:	4b6f      	ldr	r3, [pc, #444]	@ (801d708 <spi_testing+0x2a8>)
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d550:	4618      	mov	r0, r3
 801d552:	f7f2 fc8b 	bl	800fe6c <xQueueSemaphoreTake>
 801d556:	4603      	mov	r3, r0
 801d558:	2b01      	cmp	r3, #1
 801d55a:	d00d      	beq.n	801d578 <spi_testing+0x118>
	         printf("Slave RX timeout\n\r");
 801d55c:	486b      	ldr	r0, [pc, #428]	@ (801d70c <spi_testing+0x2ac>)
 801d55e:	f000 fcf3 	bl	801df48 <iprintf>
	         vPortFree(command);
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	f7f5 f826 	bl	80125b4 <vPortFree>
	         HAL_SPI_Abort_IT(SPI_SENDER);
 801d568:	485f      	ldr	r0, [pc, #380]	@ (801d6e8 <spi_testing+0x288>)
 801d56a:	f7ec fa2d 	bl	80099c8 <HAL_SPI_Abort_IT>
		     HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d56e:	485f      	ldr	r0, [pc, #380]	@ (801d6ec <spi_testing+0x28c>)
 801d570:	f7ec fa2a 	bl	80099c8 <HAL_SPI_Abort_IT>
	         return TEST_FAIL;
 801d574:	23ff      	movs	r3, #255	@ 0xff
 801d576:	e0aa      	b.n	801d6ce <spi_testing+0x26e>
	    }
	    else
	    {
	    	// 5. Now, prepare Master to Receive the Echoed data
		    status = HAL_SPI_Receive_IT(SPI_SENDER, rx_buffer, command->bit_pattern_length);
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	799b      	ldrb	r3, [r3, #6]
 801d57c:	461a      	mov	r2, r3
 801d57e:	4959      	ldr	r1, [pc, #356]	@ (801d6e4 <spi_testing+0x284>)
 801d580:	4859      	ldr	r0, [pc, #356]	@ (801d6e8 <spi_testing+0x288>)
 801d582:	f7ec f87d 	bl	8009680 <HAL_SPI_Receive_IT>
 801d586:	4603      	mov	r3, r0
 801d588:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) {
 801d58a:	7dbb      	ldrb	r3, [r7, #22]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d00f      	beq.n	801d5b0 <spi_testing+0x150>
		        printf("Failed to start master Rx: %d\n\r", status);
 801d590:	7dbb      	ldrb	r3, [r7, #22]
 801d592:	4619      	mov	r1, r3
 801d594:	485e      	ldr	r0, [pc, #376]	@ (801d710 <spi_testing+0x2b0>)
 801d596:	f000 fcd7 	bl	801df48 <iprintf>
		        vPortFree(command);
 801d59a:	6878      	ldr	r0, [r7, #4]
 801d59c:	f7f5 f80a 	bl	80125b4 <vPortFree>
		        HAL_SPI_Abort_IT(SPI_SENDER);
 801d5a0:	4851      	ldr	r0, [pc, #324]	@ (801d6e8 <spi_testing+0x288>)
 801d5a2:	f7ec fa11 	bl	80099c8 <HAL_SPI_Abort_IT>
			    HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d5a6:	4851      	ldr	r0, [pc, #324]	@ (801d6ec <spi_testing+0x28c>)
 801d5a8:	f7ec fa0e 	bl	80099c8 <HAL_SPI_Abort_IT>
		        return TEST_FAIL;
 801d5ac:	23ff      	movs	r3, #255	@ 0xff
 801d5ae:	e08e      	b.n	801d6ce <spi_testing+0x26e>
		    }
		    status = HAL_SPI_Transmit_IT(SPI_RECEIVER, echo_rx_buffer, command->bit_pattern_length);
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	799b      	ldrb	r3, [r3, #6]
 801d5b4:	461a      	mov	r2, r3
 801d5b6:	494e      	ldr	r1, [pc, #312]	@ (801d6f0 <spi_testing+0x290>)
 801d5b8:	484c      	ldr	r0, [pc, #304]	@ (801d6ec <spi_testing+0x28c>)
 801d5ba:	f7eb ffc5 	bl	8009548 <HAL_SPI_Transmit_IT>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	75bb      	strb	r3, [r7, #22]
		    if (status != HAL_OK) {
 801d5c2:	7dbb      	ldrb	r3, [r7, #22]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d00f      	beq.n	801d5e8 <spi_testing+0x188>
		        printf("Failed to start slave transmit: %d\n\r", status);
 801d5c8:	7dbb      	ldrb	r3, [r7, #22]
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	4851      	ldr	r0, [pc, #324]	@ (801d714 <spi_testing+0x2b4>)
 801d5ce:	f000 fcbb 	bl	801df48 <iprintf>
		        vPortFree(command);
 801d5d2:	6878      	ldr	r0, [r7, #4]
 801d5d4:	f7f4 ffee 	bl	80125b4 <vPortFree>
		        HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d5d8:	4844      	ldr	r0, [pc, #272]	@ (801d6ec <spi_testing+0x28c>)
 801d5da:	f7ec f9f5 	bl	80099c8 <HAL_SPI_Abort_IT>
		        HAL_SPI_Abort_IT(SPI_SENDER);
 801d5de:	4842      	ldr	r0, [pc, #264]	@ (801d6e8 <spi_testing+0x288>)
 801d5e0:	f7ec f9f2 	bl	80099c8 <HAL_SPI_Abort_IT>
		        return TEST_FAIL;
 801d5e4:	23ff      	movs	r3, #255	@ 0xff
 801d5e6:	e072      	b.n	801d6ce <spi_testing+0x26e>
		    }
	    }

	    // 6. Wait for Master's final Receive to complete
	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801d5e8:	4b4b      	ldr	r3, [pc, #300]	@ (801d718 <spi_testing+0x2b8>)
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7f2 fc3b 	bl	800fe6c <xQueueSemaphoreTake>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	2b01      	cmp	r3, #1
 801d5fa:	d00d      	beq.n	801d618 <spi_testing+0x1b8>
	         printf("Master RX timeout\n\r");
 801d5fc:	4847      	ldr	r0, [pc, #284]	@ (801d71c <spi_testing+0x2bc>)
 801d5fe:	f000 fca3 	bl	801df48 <iprintf>
	         vPortFree(command);
 801d602:	6878      	ldr	r0, [r7, #4]
 801d604:	f7f4 ffd6 	bl	80125b4 <vPortFree>
		     HAL_SPI_Abort_IT(SPI_SENDER);
 801d608:	4837      	ldr	r0, [pc, #220]	@ (801d6e8 <spi_testing+0x288>)
 801d60a:	f7ec f9dd 	bl	80099c8 <HAL_SPI_Abort_IT>
	         HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d60e:	4837      	ldr	r0, [pc, #220]	@ (801d6ec <spi_testing+0x28c>)
 801d610:	f7ec f9da 	bl	80099c8 <HAL_SPI_Abort_IT>
	         return TEST_FAIL;
 801d614:	23ff      	movs	r3, #255	@ 0xff
 801d616:	e05a      	b.n	801d6ce <spi_testing+0x26e>
	    }

	    // 7. Compare Sent vs. Received data
	    if (command->bit_pattern_length > 100) {
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	799b      	ldrb	r3, [r3, #6]
 801d61c:	2b64      	cmp	r3, #100	@ 0x64
 801d61e:	d91c      	bls.n	801d65a <spi_testing+0x1fa>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	799b      	ldrb	r3, [r3, #6]
 801d624:	4619      	mov	r1, r3
 801d626:	482d      	ldr	r0, [pc, #180]	@ (801d6dc <spi_testing+0x27c>)
 801d628:	f7e3 fdb8 	bl	800119c <calculate_crc>
 801d62c:	60f8      	str	r0, [r7, #12]
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	799b      	ldrb	r3, [r3, #6]
 801d632:	4619      	mov	r1, r3
 801d634:	482b      	ldr	r0, [pc, #172]	@ (801d6e4 <spi_testing+0x284>)
 801d636:	f7e3 fdb1 	bl	800119c <calculate_crc>
 801d63a:	60b8      	str	r0, [r7, #8]
	        if (sent_crc != received_crc) {
 801d63c:	68fa      	ldr	r2, [r7, #12]
 801d63e:	68bb      	ldr	r3, [r7, #8]
 801d640:	429a      	cmp	r2, r3
 801d642:	d02e      	beq.n	801d6a2 <spi_testing+0x242>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801d644:	7dfb      	ldrb	r3, [r7, #23]
 801d646:	3301      	adds	r3, #1
 801d648:	4619      	mov	r1, r3
 801d64a:	4835      	ldr	r0, [pc, #212]	@ (801d720 <spi_testing+0x2c0>)
 801d64c:	f000 fc7c 	bl	801df48 <iprintf>
	            vPortFree(command);
 801d650:	6878      	ldr	r0, [r7, #4]
 801d652:	f7f4 ffaf 	bl	80125b4 <vPortFree>
	            return TEST_FAIL;
 801d656:	23ff      	movs	r3, #255	@ 0xff
 801d658:	e039      	b.n	801d6ce <spi_testing+0x26e>
	        }
	    }
	    else
	    {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	799b      	ldrb	r3, [r3, #6]
 801d65e:	461a      	mov	r2, r3
 801d660:	4920      	ldr	r1, [pc, #128]	@ (801d6e4 <spi_testing+0x284>)
 801d662:	481e      	ldr	r0, [pc, #120]	@ (801d6dc <spi_testing+0x27c>)
 801d664:	f000 fdb8 	bl	801e1d8 <memcmp>
 801d668:	6138      	str	r0, [r7, #16]
	        if (comp != 0) {
 801d66a:	693b      	ldr	r3, [r7, #16]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d018      	beq.n	801d6a2 <spi_testing+0x242>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801d670:	7dfb      	ldrb	r3, [r7, #23]
 801d672:	3301      	adds	r3, #1
 801d674:	4619      	mov	r1, r3
 801d676:	482b      	ldr	r0, [pc, #172]	@ (801d724 <spi_testing+0x2c4>)
 801d678:	f000 fc66 	bl	801df48 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	799b      	ldrb	r3, [r3, #6]
 801d680:	4a16      	ldr	r2, [pc, #88]	@ (801d6dc <spi_testing+0x27c>)
 801d682:	4619      	mov	r1, r3
 801d684:	4828      	ldr	r0, [pc, #160]	@ (801d728 <spi_testing+0x2c8>)
 801d686:	f000 fc5f 	bl	801df48 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	799b      	ldrb	r3, [r3, #6]
 801d68e:	4a15      	ldr	r2, [pc, #84]	@ (801d6e4 <spi_testing+0x284>)
 801d690:	4619      	mov	r1, r3
 801d692:	4826      	ldr	r0, [pc, #152]	@ (801d72c <spi_testing+0x2cc>)
 801d694:	f000 fc58 	bl	801df48 <iprintf>
	            vPortFree(command);
 801d698:	6878      	ldr	r0, [r7, #4]
 801d69a:	f7f4 ff8b 	bl	80125b4 <vPortFree>
	            return TEST_FAIL;
 801d69e:	23ff      	movs	r3, #255	@ 0xff
 801d6a0:	e015      	b.n	801d6ce <spi_testing+0x26e>
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801d6a2:	7dfb      	ldrb	r3, [r7, #23]
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	4619      	mov	r1, r3
 801d6a8:	4821      	ldr	r0, [pc, #132]	@ (801d730 <spi_testing+0x2d0>)
 801d6aa:	f000 fc4d 	bl	801df48 <iprintf>

        osDelay(10);
 801d6ae:	200a      	movs	r0, #10
 801d6b0:	f7f1 f8fe 	bl	800e8b0 <osDelay>
	for(uint8_t i = 0; i < command->iterations; i++)
 801d6b4:	7dfb      	ldrb	r3, [r7, #23]
 801d6b6:	3301      	adds	r3, #1
 801d6b8:	75fb      	strb	r3, [r7, #23]
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	795b      	ldrb	r3, [r3, #5]
 801d6be:	7dfa      	ldrb	r2, [r7, #23]
 801d6c0:	429a      	cmp	r2, r3
 801d6c2:	f4ff aee5 	bcc.w	801d490 <spi_testing+0x30>
	}
    vPortFree(command);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f7f4 ff74 	bl	80125b4 <vPortFree>
    return TEST_PASS;
 801d6cc:	2301      	movs	r3, #1
}
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	3718      	adds	r7, #24
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	bd80      	pop	{r7, pc}
 801d6d6:	bf00      	nop
 801d6d8:	08021cb8 	.word	0x08021cb8
 801d6dc:	20027790 	.word	0x20027790
 801d6e0:	08021cec 	.word	0x08021cec
 801d6e4:	20027890 	.word	0x20027890
 801d6e8:	200003d0 	.word	0x200003d0
 801d6ec:	20000434 	.word	0x20000434
 801d6f0:	20027a90 	.word	0x20027a90
 801d6f4:	20027990 	.word	0x20027990
 801d6f8:	08021d0c 	.word	0x08021d0c
 801d6fc:	08021d30 	.word	0x08021d30
 801d700:	20000c4c 	.word	0x20000c4c
 801d704:	08021d58 	.word	0x08021d58
 801d708:	20000c50 	.word	0x20000c50
 801d70c:	08021d6c 	.word	0x08021d6c
 801d710:	08021d80 	.word	0x08021d80
 801d714:	08021da0 	.word	0x08021da0
 801d718:	20000c40 	.word	0x20000c40
 801d71c:	08021dc8 	.word	0x08021dc8
 801d720:	08021ddc 	.word	0x08021ddc
 801d724:	08021e08 	.word	0x08021e08
 801d728:	08021e28 	.word	0x08021e28
 801d72c:	08021e34 	.word	0x08021e34
 801d730:	08021e40 	.word	0x08021e40

0801d734 <HAL_SPI_TxCpltCallback>:

// Tx Complete Callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d734:	b580      	push	{r7, lr}
 801d736:	b084      	sub	sp, #16
 801d738:	af00      	add	r7, sp, #0
 801d73a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d73c:	2300      	movs	r3, #0
 801d73e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_SENDER->Instance)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	681a      	ldr	r2, [r3, #0]
 801d744:	4b13      	ldr	r3, [pc, #76]	@ (801d794 <HAL_SPI_TxCpltCallback+0x60>)
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	429a      	cmp	r2, r3
 801d74a:	d10b      	bne.n	801d764 <HAL_SPI_TxCpltCallback+0x30>
    {
        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d74c:	4b12      	ldr	r3, [pc, #72]	@ (801d798 <HAL_SPI_TxCpltCallback+0x64>)
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f107 020c 	add.w	r2, r7, #12
 801d754:	4611      	mov	r1, r2
 801d756:	4618      	mov	r0, r3
 801d758:	f7f2 fa07 	bl	800fb6a <xQueueGiveFromISR>
        printf("Master Tx callback fired\n\r");
 801d75c:	480f      	ldr	r0, [pc, #60]	@ (801d79c <HAL_SPI_TxCpltCallback+0x68>)
 801d75e:	f000 fbf3 	bl	801df48 <iprintf>
 801d762:	e008      	b.n	801d776 <HAL_SPI_TxCpltCallback+0x42>
    }
    else if(hspi->Instance == SPI_RECEIVER->Instance)
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	681a      	ldr	r2, [r3, #0]
 801d768:	4b0d      	ldr	r3, [pc, #52]	@ (801d7a0 <HAL_SPI_TxCpltCallback+0x6c>)
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	429a      	cmp	r2, r3
 801d76e:	d102      	bne.n	801d776 <HAL_SPI_TxCpltCallback+0x42>
    {
        printf("Slave Tx callback fired\n\r");
 801d770:	480c      	ldr	r0, [pc, #48]	@ (801d7a4 <HAL_SPI_TxCpltCallback+0x70>)
 801d772:	f000 fbe9 	bl	801df48 <iprintf>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d007      	beq.n	801d78c <HAL_SPI_TxCpltCallback+0x58>
 801d77c:	4b0a      	ldr	r3, [pc, #40]	@ (801d7a8 <HAL_SPI_TxCpltCallback+0x74>)
 801d77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d782:	601a      	str	r2, [r3, #0]
 801d784:	f3bf 8f4f 	dsb	sy
 801d788:	f3bf 8f6f 	isb	sy
}
 801d78c:	bf00      	nop
 801d78e:	3710      	adds	r7, #16
 801d790:	46bd      	mov	sp, r7
 801d792:	bd80      	pop	{r7, pc}
 801d794:	200003d0 	.word	0x200003d0
 801d798:	20000c4c 	.word	0x20000c4c
 801d79c:	08021e60 	.word	0x08021e60
 801d7a0:	20000434 	.word	0x20000434
 801d7a4:	08021e7c 	.word	0x08021e7c
 801d7a8:	e000ed04 	.word	0xe000ed04

0801d7ac <HAL_SPI_RxCpltCallback>:

// Rx Complete Callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b084      	sub	sp, #16
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	681a      	ldr	r2, [r3, #0]
 801d7bc:	4b17      	ldr	r3, [pc, #92]	@ (801d81c <HAL_SPI_RxCpltCallback+0x70>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	429a      	cmp	r2, r3
 801d7c2:	d10b      	bne.n	801d7dc <HAL_SPI_RxCpltCallback+0x30>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d7c4:	4b16      	ldr	r3, [pc, #88]	@ (801d820 <HAL_SPI_RxCpltCallback+0x74>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	f107 020c 	add.w	r2, r7, #12
 801d7cc:	4611      	mov	r1, r2
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	f7f2 f9cb 	bl	800fb6a <xQueueGiveFromISR>
        printf("Slave Rx callback fired, starting echo\n\r");
 801d7d4:	4813      	ldr	r0, [pc, #76]	@ (801d824 <HAL_SPI_RxCpltCallback+0x78>)
 801d7d6:	f000 fbb7 	bl	801df48 <iprintf>
 801d7da:	e010      	b.n	801d7fe <HAL_SPI_RxCpltCallback+0x52>
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	681a      	ldr	r2, [r3, #0]
 801d7e0:	4b11      	ldr	r3, [pc, #68]	@ (801d828 <HAL_SPI_RxCpltCallback+0x7c>)
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	429a      	cmp	r2, r3
 801d7e6:	d10a      	bne.n	801d7fe <HAL_SPI_RxCpltCallback+0x52>
    {
        printf("Master Rx callback fired\n\r");
 801d7e8:	4810      	ldr	r0, [pc, #64]	@ (801d82c <HAL_SPI_RxCpltCallback+0x80>)
 801d7ea:	f000 fbad 	bl	801df48 <iprintf>
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801d7ee:	4b10      	ldr	r3, [pc, #64]	@ (801d830 <HAL_SPI_RxCpltCallback+0x84>)
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	f107 020c 	add.w	r2, r7, #12
 801d7f6:	4611      	mov	r1, r2
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7f2 f9b6 	bl	800fb6a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d007      	beq.n	801d814 <HAL_SPI_RxCpltCallback+0x68>
 801d804:	4b0b      	ldr	r3, [pc, #44]	@ (801d834 <HAL_SPI_RxCpltCallback+0x88>)
 801d806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d80a:	601a      	str	r2, [r3, #0]
 801d80c:	f3bf 8f4f 	dsb	sy
 801d810:	f3bf 8f6f 	isb	sy
}
 801d814:	bf00      	nop
 801d816:	3710      	adds	r7, #16
 801d818:	46bd      	mov	sp, r7
 801d81a:	bd80      	pop	{r7, pc}
 801d81c:	20000434 	.word	0x20000434
 801d820:	20000c50 	.word	0x20000c50
 801d824:	08021e98 	.word	0x08021e98
 801d828:	200003d0 	.word	0x200003d0
 801d82c:	08021ec4 	.word	0x08021ec4
 801d830:	20000c40 	.word	0x20000c40
 801d834:	e000ed04 	.word	0xe000ed04

0801d838 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b084      	sub	sp, #16
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d840:	2300      	movs	r3, #0
 801d842:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681a      	ldr	r2, [r3, #0]
 801d848:	4b17      	ldr	r3, [pc, #92]	@ (801d8a8 <HAL_SPI_TxRxCpltCallback+0x70>)
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	429a      	cmp	r2, r3
 801d84e:	d10b      	bne.n	801d868 <HAL_SPI_TxRxCpltCallback+0x30>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d850:	4b16      	ldr	r3, [pc, #88]	@ (801d8ac <HAL_SPI_TxRxCpltCallback+0x74>)
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	f107 020c 	add.w	r2, r7, #12
 801d858:	4611      	mov	r1, r2
 801d85a:	4618      	mov	r0, r3
 801d85c:	f7f2 f985 	bl	800fb6a <xQueueGiveFromISR>
        printf("Slave TxRx callback fired\n\r");
 801d860:	4813      	ldr	r0, [pc, #76]	@ (801d8b0 <HAL_SPI_TxRxCpltCallback+0x78>)
 801d862:	f000 fb71 	bl	801df48 <iprintf>
 801d866:	e010      	b.n	801d88a <HAL_SPI_TxRxCpltCallback+0x52>
//        memcpy(echo_tx_buffer,echo_rx_buffer, SPI_RECEIVER->RxXferSize);
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	681a      	ldr	r2, [r3, #0]
 801d86c:	4b11      	ldr	r3, [pc, #68]	@ (801d8b4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	429a      	cmp	r2, r3
 801d872:	d10a      	bne.n	801d88a <HAL_SPI_TxRxCpltCallback+0x52>
    {
        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d874:	4b10      	ldr	r3, [pc, #64]	@ (801d8b8 <HAL_SPI_TxRxCpltCallback+0x80>)
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	f107 020c 	add.w	r2, r7, #12
 801d87c:	4611      	mov	r1, r2
 801d87e:	4618      	mov	r0, r3
 801d880:	f7f2 f973 	bl	800fb6a <xQueueGiveFromISR>
        printf("Master TxRx callback fired\n\r");
 801d884:	480d      	ldr	r0, [pc, #52]	@ (801d8bc <HAL_SPI_TxRxCpltCallback+0x84>)
 801d886:	f000 fb5f 	bl	801df48 <iprintf>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d007      	beq.n	801d8a0 <HAL_SPI_TxRxCpltCallback+0x68>
 801d890:	4b0b      	ldr	r3, [pc, #44]	@ (801d8c0 <HAL_SPI_TxRxCpltCallback+0x88>)
 801d892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d896:	601a      	str	r2, [r3, #0]
 801d898:	f3bf 8f4f 	dsb	sy
 801d89c:	f3bf 8f6f 	isb	sy
}
 801d8a0:	bf00      	nop
 801d8a2:	3710      	adds	r7, #16
 801d8a4:	46bd      	mov	sp, r7
 801d8a6:	bd80      	pop	{r7, pc}
 801d8a8:	20000434 	.word	0x20000434
 801d8ac:	20000c50 	.word	0x20000c50
 801d8b0:	08021ee0 	.word	0x08021ee0
 801d8b4:	200003d0 	.word	0x200003d0
 801d8b8:	20000c4c 	.word	0x20000c4c
 801d8bc:	08021efc 	.word	0x08021efc
 801d8c0:	e000ed04 	.word	0xe000ed04

0801d8c4 <timer_testing>:
#include "timer_test.h"

uint16_t tick_count = 0;

Result timer_testing(test_command_t* command){
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b084      	sub	sp, #16
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]

	uint16_t start_val ,end_val;

	if (command == NULL) {
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d102      	bne.n	801d8d8 <timer_testing+0x14>
//        printf("Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d8d2:	f04f 33ff 	mov.w	r3, #4294967295
 801d8d6:	e025      	b.n	801d924 <timer_testing+0x60>
	}

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim7);
 801d8d8:	4814      	ldr	r0, [pc, #80]	@ (801d92c <timer_testing+0x68>)
 801d8da:	f7ed fa75 	bl	800adc8 <HAL_TIM_Base_Start_IT>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d8de:	2300      	movs	r3, #0
 801d8e0:	73fb      	strb	r3, [r7, #15]
 801d8e2:	e013      	b.n	801d90c <timer_testing+0x48>

	    if (xSemaphoreTake(TimSemHandle, pdMS_TO_TICKS(200)) != pdPASS) {
 801d8e4:	4b12      	ldr	r3, [pc, #72]	@ (801d930 <timer_testing+0x6c>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	21c8      	movs	r1, #200	@ 0xc8
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	f7f2 fabe 	bl	800fe6c <xQueueSemaphoreTake>
 801d8f0:	4603      	mov	r3, r0
 801d8f2:	2b01      	cmp	r3, #1
 801d8f4:	d004      	beq.n	801d900 <timer_testing+0x3c>
//			printf("Fail on iteration %u.\n\r",i+1); // Debug printf
	         vPortFree(command);
 801d8f6:	6878      	ldr	r0, [r7, #4]
 801d8f8:	f7f4 fe5c 	bl	80125b4 <vPortFree>
	         return TEST_FAIL;
 801d8fc:	23ff      	movs	r3, #255	@ 0xff
 801d8fe:	e011      	b.n	801d924 <timer_testing+0x60>
	    }

//		printf("success on iteration %u.\n\r", i + 1); // Debug printf
        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801d900:	200a      	movs	r0, #10
 801d902:	f7f0 ffd5 	bl	800e8b0 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d906:	7bfb      	ldrb	r3, [r7, #15]
 801d908:	3301      	adds	r3, #1
 801d90a:	73fb      	strb	r3, [r7, #15]
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	795b      	ldrb	r3, [r3, #5]
 801d910:	7bfa      	ldrb	r2, [r7, #15]
 801d912:	429a      	cmp	r2, r3
 801d914:	d3e6      	bcc.n	801d8e4 <timer_testing+0x20>
	}// end of iterations

    // Stop Timer after the test is complete
	HAL_TIM_Base_Stop_IT(&htim7);
 801d916:	4805      	ldr	r0, [pc, #20]	@ (801d92c <timer_testing+0x68>)
 801d918:	f7ed face 	bl	800aeb8 <HAL_TIM_Base_Stop_IT>

    vPortFree(command);
 801d91c:	6878      	ldr	r0, [r7, #4]
 801d91e:	f7f4 fe49 	bl	80125b4 <vPortFree>
    return TEST_PASS;
 801d922:	2301      	movs	r3, #1
}
 801d924:	4618      	mov	r0, r3
 801d926:	3710      	adds	r7, #16
 801d928:	46bd      	mov	sp, r7
 801d92a:	bd80      	pop	{r7, pc}
 801d92c:	20000498 	.word	0x20000498
 801d930:	20000c48 	.word	0x20000c48

0801d934 <uart_testing>:
 */

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)

Result uart_testing(test_command_t* command){
 801d934:	b580      	push	{r7, lr}
 801d936:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801d93a:	af00      	add	r7, sp, #0
 801d93c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d940:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d944:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d946:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d94a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d94e:	4618      	mov	r0, r3
 801d950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d954:	461a      	mov	r2, r3
 801d956:	2100      	movs	r1, #0
 801d958:	f000 fc4e 	bl	801e1f8 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d95c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d960:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d964:	4618      	mov	r0, r3
 801d966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d96a:	461a      	mov	r2, r3
 801d96c:	2100      	movs	r1, #0
 801d96e:	f000 fc43 	bl	801e1f8 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d972:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d976:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801d97a:	4618      	mov	r0, r3
 801d97c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d980:	461a      	mov	r2, r3
 801d982:	2100      	movs	r1, #0
 801d984:	f000 fc38 	bl	801e1f8 <memset>

	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801d988:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d98c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d105      	bne.n	801d9a2 <uart_testing+0x6e>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
 801d996:	48b2      	ldr	r0, [pc, #712]	@ (801dc60 <uart_testing+0x32c>)
 801d998:	f000 fad6 	bl	801df48 <iprintf>
        return TEST_ERR;
 801d99c:	f04f 33ff 	mov.w	r3, #4294967295
 801d9a0:	e158      	b.n	801dc54 <uart_testing+0x320>
	}

	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d9a2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d9a6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	1dd9      	adds	r1, r3, #7
 801d9ae:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d9b2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	799b      	ldrb	r3, [r3, #6]
 801d9ba:	461a      	mov	r2, r3
 801d9bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f000 fcec 	bl	801e39e <memcpy>

    for(uint8_t i=0 ; i< command->iterations ; i++){
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d9cc:	e12f      	b.n	801dc2e <uart_testing+0x2fa>
//        printf("UART_TEST: Iteration %u/%u:\n\r", i + 1, command->iterations); // Debug printf
        memset(rx_buffer, 0, command->bit_pattern_length);
 801d9ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d9d2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	799b      	ldrb	r3, [r3, #6]
 801d9da:	461a      	mov	r2, r3
 801d9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d9e0:	2100      	movs	r1, #0
 801d9e2:	4618      	mov	r0, r3
 801d9e4:	f000 fc08 	bl	801e1f8 <memset>

        // RECEIVER start to RECEIVE DMA
        rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d9e8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d9ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	799b      	ldrb	r3, [r3, #6]
 801d9f4:	461a      	mov	r2, r3
 801d9f6:	f107 0308 	add.w	r3, r7, #8
 801d9fa:	4619      	mov	r1, r3
 801d9fc:	4899      	ldr	r0, [pc, #612]	@ (801dc64 <uart_testing+0x330>)
 801d9fe:	f7ed ff03 	bl	800b808 <HAL_UART_Receive_DMA>
 801da02:	4603      	mov	r3, r0
 801da04:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
        if (rx_status != HAL_OK) {
 801da08:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d00e      	beq.n	801da2e <uart_testing+0xfa>
            printf("Receiver Failed to start receive: %d\n\r", rx_status);
 801da10:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801da14:	4619      	mov	r1, r3
 801da16:	4894      	ldr	r0, [pc, #592]	@ (801dc68 <uart_testing+0x334>)
 801da18:	f000 fa96 	bl	801df48 <iprintf>
            vPortFree(command);
 801da1c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da20:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801da24:	6818      	ldr	r0, [r3, #0]
 801da26:	f7f4 fdc5 	bl	80125b4 <vPortFree>
            return TEST_FAIL;
 801da2a:	23ff      	movs	r3, #255	@ 0xff
 801da2c:	e112      	b.n	801dc54 <uart_testing+0x320>
        }
        // Arm sender receive before receiver transmits back
        if (HAL_UART_Receive_IT(UART_SENDER, rx_buffer, command->bit_pattern_length) != HAL_OK) {
 801da2e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da32:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	799b      	ldrb	r3, [r3, #6]
 801da3a:	461a      	mov	r2, r3
 801da3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801da40:	4619      	mov	r1, r3
 801da42:	488a      	ldr	r0, [pc, #552]	@ (801dc6c <uart_testing+0x338>)
 801da44:	f7ed fe20 	bl	800b688 <HAL_UART_Receive_IT>
 801da48:	4603      	mov	r3, r0
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d00b      	beq.n	801da66 <uart_testing+0x132>
            printf("Sender Failed to start receive back\n\r");
 801da4e:	4888      	ldr	r0, [pc, #544]	@ (801dc70 <uart_testing+0x33c>)
 801da50:	f000 fa7a 	bl	801df48 <iprintf>
            vPortFree(command);
 801da54:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da58:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801da5c:	6818      	ldr	r0, [r3, #0]
 801da5e:	f7f4 fda9 	bl	80125b4 <vPortFree>
            return TEST_FAIL;
 801da62:	23ff      	movs	r3, #255	@ 0xff
 801da64:	e0f6      	b.n	801dc54 <uart_testing+0x320>
        }

        // SENDER TRANSMIT a block of data via DMA
        tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801da66:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da6a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	799b      	ldrb	r3, [r3, #6]
 801da72:	461a      	mov	r2, r3
 801da74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801da78:	4619      	mov	r1, r3
 801da7a:	487c      	ldr	r0, [pc, #496]	@ (801dc6c <uart_testing+0x338>)
 801da7c:	f7ed fe48 	bl	800b710 <HAL_UART_Transmit_DMA>
 801da80:	4603      	mov	r3, r0
 801da82:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
        if (tx_status != HAL_OK) {
 801da86:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d011      	beq.n	801dab2 <uart_testing+0x17e>
            printf("Failed to send on UART sender: %d\n\r", tx_status);
 801da8e:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801da92:	4619      	mov	r1, r3
 801da94:	4877      	ldr	r0, [pc, #476]	@ (801dc74 <uart_testing+0x340>)
 801da96:	f000 fa57 	bl	801df48 <iprintf>
            vPortFree(command);
 801da9a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801da9e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801daa2:	6818      	ldr	r0, [r3, #0]
 801daa4:	f7f4 fd86 	bl	80125b4 <vPortFree>
            HAL_UART_DMAStop(UART_RECEIVER);
 801daa8:	486e      	ldr	r0, [pc, #440]	@ (801dc64 <uart_testing+0x330>)
 801daaa:	f7ed fef1 	bl	800b890 <HAL_UART_DMAStop>
            return TEST_FAIL;
 801daae:	23ff      	movs	r3, #255	@ 0xff
 801dab0:	e0d0      	b.n	801dc54 <uart_testing+0x320>
        }
        // WAIT FOR TX COMPLETION
        if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801dab2:	4b71      	ldr	r3, [pc, #452]	@ (801dc78 <uart_testing+0x344>)
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801daba:	4618      	mov	r0, r3
 801dabc:	f7f2 f9d6 	bl	800fe6c <xQueueSemaphoreTake>
 801dac0:	4603      	mov	r3, r0
 801dac2:	2b01      	cmp	r3, #1
 801dac4:	d011      	beq.n	801daea <uart_testing+0x1b6>
             printf("fail to get TxSemaphore\n\r");
 801dac6:	486d      	ldr	r0, [pc, #436]	@ (801dc7c <uart_testing+0x348>)
 801dac8:	f000 fa3e 	bl	801df48 <iprintf>
             vPortFree(command);
 801dacc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dad0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dad4:	6818      	ldr	r0, [r3, #0]
 801dad6:	f7f4 fd6d 	bl	80125b4 <vPortFree>
             HAL_UART_DMAStop(UART_RECEIVER);
 801dada:	4862      	ldr	r0, [pc, #392]	@ (801dc64 <uart_testing+0x330>)
 801dadc:	f7ed fed8 	bl	800b890 <HAL_UART_DMAStop>
             HAL_UART_DMAStop(UART_SENDER);
 801dae0:	4862      	ldr	r0, [pc, #392]	@ (801dc6c <uart_testing+0x338>)
 801dae2:	f7ed fed5 	bl	800b890 <HAL_UART_DMAStop>
             return TEST_FAIL;
 801dae6:	23ff      	movs	r3, #255	@ 0xff
 801dae8:	e0b4      	b.n	801dc54 <uart_testing+0x320>
        }
        else
        {
			 if (HAL_UART_Transmit_IT(UART_RECEIVER, echo_buffer, command->bit_pattern_length) != HAL_OK){
 801daea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801daee:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	799b      	ldrb	r3, [r3, #6]
 801daf6:	461a      	mov	r2, r3
 801daf8:	f107 0308 	add.w	r3, r7, #8
 801dafc:	4619      	mov	r1, r3
 801dafe:	4859      	ldr	r0, [pc, #356]	@ (801dc64 <uart_testing+0x330>)
 801db00:	f7ed fd64 	bl	800b5cc <HAL_UART_Transmit_IT>
 801db04:	4603      	mov	r3, r0
 801db06:	2b00      	cmp	r3, #0
 801db08:	d014      	beq.n	801db34 <uart_testing+0x200>
				 printf("Failed to echo send on UART receiver: %d\n\r", tx_status);
 801db0a:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801db0e:	4619      	mov	r1, r3
 801db10:	485b      	ldr	r0, [pc, #364]	@ (801dc80 <uart_testing+0x34c>)
 801db12:	f000 fa19 	bl	801df48 <iprintf>
				 vPortFree(command);
 801db16:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db1a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db1e:	6818      	ldr	r0, [r3, #0]
 801db20:	f7f4 fd48 	bl	80125b4 <vPortFree>
				 HAL_UART_DMAStop(UART_RECEIVER);
 801db24:	484f      	ldr	r0, [pc, #316]	@ (801dc64 <uart_testing+0x330>)
 801db26:	f7ed feb3 	bl	800b890 <HAL_UART_DMAStop>
	             HAL_UART_DMAStop(UART_SENDER);
 801db2a:	4850      	ldr	r0, [pc, #320]	@ (801dc6c <uart_testing+0x338>)
 801db2c:	f7ed feb0 	bl	800b890 <HAL_UART_DMAStop>
				 return TEST_FAIL;
 801db30:	23ff      	movs	r3, #255	@ 0xff
 801db32:	e08f      	b.n	801dc54 <uart_testing+0x320>
			 }
        }

        // WAIT FOR RECEIVER RX COMPLETION
        if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801db34:	4b53      	ldr	r3, [pc, #332]	@ (801dc84 <uart_testing+0x350>)
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7f2 f995 	bl	800fe6c <xQueueSemaphoreTake>
 801db42:	4603      	mov	r3, r0
 801db44:	2b01      	cmp	r3, #1
 801db46:	d011      	beq.n	801db6c <uart_testing+0x238>
            printf("fail to get RxSemaphore\n\r");
 801db48:	484f      	ldr	r0, [pc, #316]	@ (801dc88 <uart_testing+0x354>)
 801db4a:	f000 f9fd 	bl	801df48 <iprintf>
            vPortFree(command);
 801db4e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db52:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db56:	6818      	ldr	r0, [r3, #0]
 801db58:	f7f4 fd2c 	bl	80125b4 <vPortFree>
            HAL_UART_DMAStop(UART_SENDER);
 801db5c:	4843      	ldr	r0, [pc, #268]	@ (801dc6c <uart_testing+0x338>)
 801db5e:	f7ed fe97 	bl	800b890 <HAL_UART_DMAStop>
            HAL_UART_DMAStop(UART_RECEIVER);
 801db62:	4840      	ldr	r0, [pc, #256]	@ (801dc64 <uart_testing+0x330>)
 801db64:	f7ed fe94 	bl	800b890 <HAL_UART_DMAStop>
            return TEST_FAIL;
 801db68:	23ff      	movs	r3, #255	@ 0xff
 801db6a:	e073      	b.n	801dc54 <uart_testing+0x320>
        }


	    // COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801db6c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db70:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	799b      	ldrb	r3, [r3, #6]
 801db78:	2b64      	cmp	r3, #100	@ 0x64
 801db7a:	d92c      	bls.n	801dbd6 <uart_testing+0x2a2>
//			printf("bit_pattern_length more than 100\n\r"); // Debug printf

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801db7c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db80:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	799b      	ldrb	r3, [r3, #6]
 801db88:	461a      	mov	r2, r3
 801db8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801db8e:	4611      	mov	r1, r2
 801db90:	4618      	mov	r0, r3
 801db92:	f7e3 fb03 	bl	800119c <calculate_crc>
 801db96:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801db9a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db9e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	799b      	ldrb	r3, [r3, #6]
 801dba6:	461a      	mov	r2, r3
 801dba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dbac:	4611      	mov	r1, r2
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7e3 faf4 	bl	800119c <calculate_crc>
 801dbb4:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
			if (sent_crc != received_crc) {
 801dbb8:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801dbbc:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	d025      	beq.n	801dc10 <uart_testing+0x2dc>
				// Debug printf
//				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
//					   i + 1, sent_crc, received_crc);
				vPortFree(command);
 801dbc4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbc8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbcc:	6818      	ldr	r0, [r3, #0]
 801dbce:	f7f4 fcf1 	bl	80125b4 <vPortFree>
				return TEST_FAIL;
 801dbd2:	23ff      	movs	r3, #255	@ 0xff
 801dbd4:	e03e      	b.n	801dc54 <uart_testing+0x320>
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801dbd6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbda:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	799b      	ldrb	r3, [r3, #6]
 801dbe2:	461a      	mov	r2, r3
 801dbe4:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801dbe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dbec:	4618      	mov	r0, r3
 801dbee:	f000 faf3 	bl	801e1d8 <memcmp>
 801dbf2:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
			if (comp != 0) {
 801dbf6:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d008      	beq.n	801dc10 <uart_testing+0x2dc>
//				// Debug printf
//				printf("Data mismatch on iteration %u.\n\r", i + 1);
//				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
//				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
				vPortFree(command);
 801dbfe:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc02:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc06:	6818      	ldr	r0, [r3, #0]
 801dc08:	f7f4 fcd4 	bl	80125b4 <vPortFree>
				return TEST_FAIL;
 801dc0c:	23ff      	movs	r3, #255	@ 0xff
 801dc0e:	e021      	b.n	801dc54 <uart_testing+0x320>
			}
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf
 801dc10:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801dc14:	3301      	adds	r3, #1
 801dc16:	4619      	mov	r1, r3
 801dc18:	481c      	ldr	r0, [pc, #112]	@ (801dc8c <uart_testing+0x358>)
 801dc1a:	f000 f995 	bl	801df48 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801dc1e:	200a      	movs	r0, #10
 801dc20:	f7f0 fe46 	bl	800e8b0 <osDelay>
    for(uint8_t i=0 ; i< command->iterations ; i++){
 801dc24:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801dc28:	3301      	adds	r3, #1
 801dc2a:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dc2e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc32:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	795b      	ldrb	r3, [r3, #5]
 801dc3a:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801dc3e:	429a      	cmp	r2, r3
 801dc40:	f4ff aec5 	bcc.w	801d9ce <uart_testing+0x9a>
	}
    vPortFree(command);
 801dc44:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc48:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc4c:	6818      	ldr	r0, [r3, #0]
 801dc4e:	f7f4 fcb1 	bl	80125b4 <vPortFree>
    return TEST_PASS;
 801dc52:	2301      	movs	r3, #1
}
 801dc54:	4618      	mov	r0, r3
 801dc56:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801dc5a:	46bd      	mov	sp, r7
 801dc5c:	bd80      	pop	{r7, pc}
 801dc5e:	bf00      	nop
 801dc60:	08021f1c 	.word	0x08021f1c
 801dc64:	200004e4 	.word	0x200004e4
 801dc68:	08021f54 	.word	0x08021f54
 801dc6c:	2000056c 	.word	0x2000056c
 801dc70:	08021f7c 	.word	0x08021f7c
 801dc74:	08021fa4 	.word	0x08021fa4
 801dc78:	20000c34 	.word	0x20000c34
 801dc7c:	08021fc8 	.word	0x08021fc8
 801dc80:	08021fe4 	.word	0x08021fe4
 801dc84:	20000c30 	.word	0x20000c30
 801dc88:	08022010 	.word	0x08022010
 801dc8c:	0802202c 	.word	0x0802202c

0801dc90 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dc90:	b480      	push	{r7}
 801dc92:	b085      	sub	sp, #20
 801dc94:	af00      	add	r7, sp, #0
 801dc96:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801dc98:	2300      	movs	r3, #0
 801dc9a:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	681a      	ldr	r2, [r3, #0]
 801dca0:	4b09      	ldr	r3, [pc, #36]	@ (801dcc8 <HAL_UART_TxCpltCallback+0x38>)
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	429a      	cmp	r2, r3
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d007      	beq.n	801dcbc <HAL_UART_TxCpltCallback+0x2c>
 801dcac:	4b07      	ldr	r3, [pc, #28]	@ (801dccc <HAL_UART_TxCpltCallback+0x3c>)
 801dcae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801dcb2:	601a      	str	r2, [r3, #0]
 801dcb4:	f3bf 8f4f 	dsb	sy
 801dcb8:	f3bf 8f6f 	isb	sy
}
 801dcbc:	bf00      	nop
 801dcbe:	3714      	adds	r7, #20
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc6:	4770      	bx	lr
 801dcc8:	200004e4 	.word	0x200004e4
 801dccc:	e000ed04 	.word	0xe000ed04

0801dcd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b084      	sub	sp, #16
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801dcd8:	2300      	movs	r3, #0
 801dcda:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	681a      	ldr	r2, [r3, #0]
 801dce0:	4b14      	ldr	r3, [pc, #80]	@ (801dd34 <HAL_UART_RxCpltCallback+0x64>)
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	429a      	cmp	r2, r3
 801dce6:	d108      	bne.n	801dcfa <HAL_UART_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801dce8:	4b13      	ldr	r3, [pc, #76]	@ (801dd38 <HAL_UART_RxCpltCallback+0x68>)
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	f107 020c 	add.w	r2, r7, #12
 801dcf0:	4611      	mov	r1, r2
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	f7f1 ff39 	bl	800fb6a <xQueueGiveFromISR>
 801dcf8:	e00d      	b.n	801dd16 <HAL_UART_RxCpltCallback+0x46>
//        printf("Receiver Rx callback fired \n\r"); // Debug printf
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	681a      	ldr	r2, [r3, #0]
 801dcfe:	4b0f      	ldr	r3, [pc, #60]	@ (801dd3c <HAL_UART_RxCpltCallback+0x6c>)
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	429a      	cmp	r2, r3
 801dd04:	d107      	bne.n	801dd16 <HAL_UART_RxCpltCallback+0x46>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801dd06:	4b0e      	ldr	r3, [pc, #56]	@ (801dd40 <HAL_UART_RxCpltCallback+0x70>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	f107 020c 	add.w	r2, r7, #12
 801dd0e:	4611      	mov	r1, r2
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7f1 ff2a 	bl	800fb6a <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d007      	beq.n	801dd2c <HAL_UART_RxCpltCallback+0x5c>
 801dd1c:	4b09      	ldr	r3, [pc, #36]	@ (801dd44 <HAL_UART_RxCpltCallback+0x74>)
 801dd1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801dd22:	601a      	str	r2, [r3, #0]
 801dd24:	f3bf 8f4f 	dsb	sy
 801dd28:	f3bf 8f6f 	isb	sy
}
 801dd2c:	bf00      	nop
 801dd2e:	3710      	adds	r7, #16
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}
 801dd34:	200004e4 	.word	0x200004e4
 801dd38:	20000c34 	.word	0x20000c34
 801dd3c:	2000056c 	.word	0x2000056c
 801dd40:	20000c30 	.word	0x20000c30
 801dd44:	e000ed04 	.word	0xe000ed04

0801dd48 <rand>:
 801dd48:	4b16      	ldr	r3, [pc, #88]	@ (801dda4 <rand+0x5c>)
 801dd4a:	b510      	push	{r4, lr}
 801dd4c:	681c      	ldr	r4, [r3, #0]
 801dd4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dd50:	b9b3      	cbnz	r3, 801dd80 <rand+0x38>
 801dd52:	2018      	movs	r0, #24
 801dd54:	f000 fb9a 	bl	801e48c <malloc>
 801dd58:	4602      	mov	r2, r0
 801dd5a:	6320      	str	r0, [r4, #48]	@ 0x30
 801dd5c:	b920      	cbnz	r0, 801dd68 <rand+0x20>
 801dd5e:	4b12      	ldr	r3, [pc, #72]	@ (801dda8 <rand+0x60>)
 801dd60:	4812      	ldr	r0, [pc, #72]	@ (801ddac <rand+0x64>)
 801dd62:	2152      	movs	r1, #82	@ 0x52
 801dd64:	f000 fb2a 	bl	801e3bc <__assert_func>
 801dd68:	4911      	ldr	r1, [pc, #68]	@ (801ddb0 <rand+0x68>)
 801dd6a:	4b12      	ldr	r3, [pc, #72]	@ (801ddb4 <rand+0x6c>)
 801dd6c:	e9c0 1300 	strd	r1, r3, [r0]
 801dd70:	4b11      	ldr	r3, [pc, #68]	@ (801ddb8 <rand+0x70>)
 801dd72:	6083      	str	r3, [r0, #8]
 801dd74:	230b      	movs	r3, #11
 801dd76:	8183      	strh	r3, [r0, #12]
 801dd78:	2100      	movs	r1, #0
 801dd7a:	2001      	movs	r0, #1
 801dd7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dd80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dd82:	480e      	ldr	r0, [pc, #56]	@ (801ddbc <rand+0x74>)
 801dd84:	690b      	ldr	r3, [r1, #16]
 801dd86:	694c      	ldr	r4, [r1, #20]
 801dd88:	4a0d      	ldr	r2, [pc, #52]	@ (801ddc0 <rand+0x78>)
 801dd8a:	4358      	muls	r0, r3
 801dd8c:	fb02 0004 	mla	r0, r2, r4, r0
 801dd90:	fba3 3202 	umull	r3, r2, r3, r2
 801dd94:	3301      	adds	r3, #1
 801dd96:	eb40 0002 	adc.w	r0, r0, r2
 801dd9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dd9e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801dda2:	bd10      	pop	{r4, pc}
 801dda4:	2000003c 	.word	0x2000003c
 801dda8:	080222d2 	.word	0x080222d2
 801ddac:	080222e9 	.word	0x080222e9
 801ddb0:	abcd330e 	.word	0xabcd330e
 801ddb4:	e66d1234 	.word	0xe66d1234
 801ddb8:	0005deec 	.word	0x0005deec
 801ddbc:	5851f42d 	.word	0x5851f42d
 801ddc0:	4c957f2d 	.word	0x4c957f2d

0801ddc4 <std>:
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	b510      	push	{r4, lr}
 801ddc8:	4604      	mov	r4, r0
 801ddca:	e9c0 3300 	strd	r3, r3, [r0]
 801ddce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ddd2:	6083      	str	r3, [r0, #8]
 801ddd4:	8181      	strh	r1, [r0, #12]
 801ddd6:	6643      	str	r3, [r0, #100]	@ 0x64
 801ddd8:	81c2      	strh	r2, [r0, #14]
 801ddda:	6183      	str	r3, [r0, #24]
 801dddc:	4619      	mov	r1, r3
 801ddde:	2208      	movs	r2, #8
 801dde0:	305c      	adds	r0, #92	@ 0x5c
 801dde2:	f000 fa09 	bl	801e1f8 <memset>
 801dde6:	4b0d      	ldr	r3, [pc, #52]	@ (801de1c <std+0x58>)
 801dde8:	6263      	str	r3, [r4, #36]	@ 0x24
 801ddea:	4b0d      	ldr	r3, [pc, #52]	@ (801de20 <std+0x5c>)
 801ddec:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ddee:	4b0d      	ldr	r3, [pc, #52]	@ (801de24 <std+0x60>)
 801ddf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ddf2:	4b0d      	ldr	r3, [pc, #52]	@ (801de28 <std+0x64>)
 801ddf4:	6323      	str	r3, [r4, #48]	@ 0x30
 801ddf6:	4b0d      	ldr	r3, [pc, #52]	@ (801de2c <std+0x68>)
 801ddf8:	6224      	str	r4, [r4, #32]
 801ddfa:	429c      	cmp	r4, r3
 801ddfc:	d006      	beq.n	801de0c <std+0x48>
 801ddfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801de02:	4294      	cmp	r4, r2
 801de04:	d002      	beq.n	801de0c <std+0x48>
 801de06:	33d0      	adds	r3, #208	@ 0xd0
 801de08:	429c      	cmp	r4, r3
 801de0a:	d105      	bne.n	801de18 <std+0x54>
 801de0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801de10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de14:	f000 bac0 	b.w	801e398 <__retarget_lock_init_recursive>
 801de18:	bd10      	pop	{r4, pc}
 801de1a:	bf00      	nop
 801de1c:	0801e029 	.word	0x0801e029
 801de20:	0801e04b 	.word	0x0801e04b
 801de24:	0801e083 	.word	0x0801e083
 801de28:	0801e0a7 	.word	0x0801e0a7
 801de2c:	20027b90 	.word	0x20027b90

0801de30 <stdio_exit_handler>:
 801de30:	4a02      	ldr	r2, [pc, #8]	@ (801de3c <stdio_exit_handler+0xc>)
 801de32:	4903      	ldr	r1, [pc, #12]	@ (801de40 <stdio_exit_handler+0x10>)
 801de34:	4803      	ldr	r0, [pc, #12]	@ (801de44 <stdio_exit_handler+0x14>)
 801de36:	f000 b869 	b.w	801df0c <_fwalk_sglue>
 801de3a:	bf00      	nop
 801de3c:	20000030 	.word	0x20000030
 801de40:	0801ec9d 	.word	0x0801ec9d
 801de44:	20000040 	.word	0x20000040

0801de48 <cleanup_stdio>:
 801de48:	6841      	ldr	r1, [r0, #4]
 801de4a:	4b0c      	ldr	r3, [pc, #48]	@ (801de7c <cleanup_stdio+0x34>)
 801de4c:	4299      	cmp	r1, r3
 801de4e:	b510      	push	{r4, lr}
 801de50:	4604      	mov	r4, r0
 801de52:	d001      	beq.n	801de58 <cleanup_stdio+0x10>
 801de54:	f000 ff22 	bl	801ec9c <_fflush_r>
 801de58:	68a1      	ldr	r1, [r4, #8]
 801de5a:	4b09      	ldr	r3, [pc, #36]	@ (801de80 <cleanup_stdio+0x38>)
 801de5c:	4299      	cmp	r1, r3
 801de5e:	d002      	beq.n	801de66 <cleanup_stdio+0x1e>
 801de60:	4620      	mov	r0, r4
 801de62:	f000 ff1b 	bl	801ec9c <_fflush_r>
 801de66:	68e1      	ldr	r1, [r4, #12]
 801de68:	4b06      	ldr	r3, [pc, #24]	@ (801de84 <cleanup_stdio+0x3c>)
 801de6a:	4299      	cmp	r1, r3
 801de6c:	d004      	beq.n	801de78 <cleanup_stdio+0x30>
 801de6e:	4620      	mov	r0, r4
 801de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de74:	f000 bf12 	b.w	801ec9c <_fflush_r>
 801de78:	bd10      	pop	{r4, pc}
 801de7a:	bf00      	nop
 801de7c:	20027b90 	.word	0x20027b90
 801de80:	20027bf8 	.word	0x20027bf8
 801de84:	20027c60 	.word	0x20027c60

0801de88 <global_stdio_init.part.0>:
 801de88:	b510      	push	{r4, lr}
 801de8a:	4b0b      	ldr	r3, [pc, #44]	@ (801deb8 <global_stdio_init.part.0+0x30>)
 801de8c:	4c0b      	ldr	r4, [pc, #44]	@ (801debc <global_stdio_init.part.0+0x34>)
 801de8e:	4a0c      	ldr	r2, [pc, #48]	@ (801dec0 <global_stdio_init.part.0+0x38>)
 801de90:	601a      	str	r2, [r3, #0]
 801de92:	4620      	mov	r0, r4
 801de94:	2200      	movs	r2, #0
 801de96:	2104      	movs	r1, #4
 801de98:	f7ff ff94 	bl	801ddc4 <std>
 801de9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dea0:	2201      	movs	r2, #1
 801dea2:	2109      	movs	r1, #9
 801dea4:	f7ff ff8e 	bl	801ddc4 <std>
 801dea8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801deac:	2202      	movs	r2, #2
 801deae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deb2:	2112      	movs	r1, #18
 801deb4:	f7ff bf86 	b.w	801ddc4 <std>
 801deb8:	20027cc8 	.word	0x20027cc8
 801debc:	20027b90 	.word	0x20027b90
 801dec0:	0801de31 	.word	0x0801de31

0801dec4 <__sfp_lock_acquire>:
 801dec4:	4801      	ldr	r0, [pc, #4]	@ (801decc <__sfp_lock_acquire+0x8>)
 801dec6:	f000 ba68 	b.w	801e39a <__retarget_lock_acquire_recursive>
 801deca:	bf00      	nop
 801decc:	20027cd1 	.word	0x20027cd1

0801ded0 <__sfp_lock_release>:
 801ded0:	4801      	ldr	r0, [pc, #4]	@ (801ded8 <__sfp_lock_release+0x8>)
 801ded2:	f000 ba63 	b.w	801e39c <__retarget_lock_release_recursive>
 801ded6:	bf00      	nop
 801ded8:	20027cd1 	.word	0x20027cd1

0801dedc <__sinit>:
 801dedc:	b510      	push	{r4, lr}
 801dede:	4604      	mov	r4, r0
 801dee0:	f7ff fff0 	bl	801dec4 <__sfp_lock_acquire>
 801dee4:	6a23      	ldr	r3, [r4, #32]
 801dee6:	b11b      	cbz	r3, 801def0 <__sinit+0x14>
 801dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deec:	f7ff bff0 	b.w	801ded0 <__sfp_lock_release>
 801def0:	4b04      	ldr	r3, [pc, #16]	@ (801df04 <__sinit+0x28>)
 801def2:	6223      	str	r3, [r4, #32]
 801def4:	4b04      	ldr	r3, [pc, #16]	@ (801df08 <__sinit+0x2c>)
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d1f5      	bne.n	801dee8 <__sinit+0xc>
 801defc:	f7ff ffc4 	bl	801de88 <global_stdio_init.part.0>
 801df00:	e7f2      	b.n	801dee8 <__sinit+0xc>
 801df02:	bf00      	nop
 801df04:	0801de49 	.word	0x0801de49
 801df08:	20027cc8 	.word	0x20027cc8

0801df0c <_fwalk_sglue>:
 801df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df10:	4607      	mov	r7, r0
 801df12:	4688      	mov	r8, r1
 801df14:	4614      	mov	r4, r2
 801df16:	2600      	movs	r6, #0
 801df18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df1c:	f1b9 0901 	subs.w	r9, r9, #1
 801df20:	d505      	bpl.n	801df2e <_fwalk_sglue+0x22>
 801df22:	6824      	ldr	r4, [r4, #0]
 801df24:	2c00      	cmp	r4, #0
 801df26:	d1f7      	bne.n	801df18 <_fwalk_sglue+0xc>
 801df28:	4630      	mov	r0, r6
 801df2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df2e:	89ab      	ldrh	r3, [r5, #12]
 801df30:	2b01      	cmp	r3, #1
 801df32:	d907      	bls.n	801df44 <_fwalk_sglue+0x38>
 801df34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df38:	3301      	adds	r3, #1
 801df3a:	d003      	beq.n	801df44 <_fwalk_sglue+0x38>
 801df3c:	4629      	mov	r1, r5
 801df3e:	4638      	mov	r0, r7
 801df40:	47c0      	blx	r8
 801df42:	4306      	orrs	r6, r0
 801df44:	3568      	adds	r5, #104	@ 0x68
 801df46:	e7e9      	b.n	801df1c <_fwalk_sglue+0x10>

0801df48 <iprintf>:
 801df48:	b40f      	push	{r0, r1, r2, r3}
 801df4a:	b507      	push	{r0, r1, r2, lr}
 801df4c:	4906      	ldr	r1, [pc, #24]	@ (801df68 <iprintf+0x20>)
 801df4e:	ab04      	add	r3, sp, #16
 801df50:	6808      	ldr	r0, [r1, #0]
 801df52:	f853 2b04 	ldr.w	r2, [r3], #4
 801df56:	6881      	ldr	r1, [r0, #8]
 801df58:	9301      	str	r3, [sp, #4]
 801df5a:	f000 fb77 	bl	801e64c <_vfiprintf_r>
 801df5e:	b003      	add	sp, #12
 801df60:	f85d eb04 	ldr.w	lr, [sp], #4
 801df64:	b004      	add	sp, #16
 801df66:	4770      	bx	lr
 801df68:	2000003c 	.word	0x2000003c

0801df6c <_puts_r>:
 801df6c:	6a03      	ldr	r3, [r0, #32]
 801df6e:	b570      	push	{r4, r5, r6, lr}
 801df70:	6884      	ldr	r4, [r0, #8]
 801df72:	4605      	mov	r5, r0
 801df74:	460e      	mov	r6, r1
 801df76:	b90b      	cbnz	r3, 801df7c <_puts_r+0x10>
 801df78:	f7ff ffb0 	bl	801dedc <__sinit>
 801df7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801df7e:	07db      	lsls	r3, r3, #31
 801df80:	d405      	bmi.n	801df8e <_puts_r+0x22>
 801df82:	89a3      	ldrh	r3, [r4, #12]
 801df84:	0598      	lsls	r0, r3, #22
 801df86:	d402      	bmi.n	801df8e <_puts_r+0x22>
 801df88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df8a:	f000 fa06 	bl	801e39a <__retarget_lock_acquire_recursive>
 801df8e:	89a3      	ldrh	r3, [r4, #12]
 801df90:	0719      	lsls	r1, r3, #28
 801df92:	d502      	bpl.n	801df9a <_puts_r+0x2e>
 801df94:	6923      	ldr	r3, [r4, #16]
 801df96:	2b00      	cmp	r3, #0
 801df98:	d135      	bne.n	801e006 <_puts_r+0x9a>
 801df9a:	4621      	mov	r1, r4
 801df9c:	4628      	mov	r0, r5
 801df9e:	f000 f8c5 	bl	801e12c <__swsetup_r>
 801dfa2:	b380      	cbz	r0, 801e006 <_puts_r+0x9a>
 801dfa4:	f04f 35ff 	mov.w	r5, #4294967295
 801dfa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dfaa:	07da      	lsls	r2, r3, #31
 801dfac:	d405      	bmi.n	801dfba <_puts_r+0x4e>
 801dfae:	89a3      	ldrh	r3, [r4, #12]
 801dfb0:	059b      	lsls	r3, r3, #22
 801dfb2:	d402      	bmi.n	801dfba <_puts_r+0x4e>
 801dfb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dfb6:	f000 f9f1 	bl	801e39c <__retarget_lock_release_recursive>
 801dfba:	4628      	mov	r0, r5
 801dfbc:	bd70      	pop	{r4, r5, r6, pc}
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	da04      	bge.n	801dfcc <_puts_r+0x60>
 801dfc2:	69a2      	ldr	r2, [r4, #24]
 801dfc4:	429a      	cmp	r2, r3
 801dfc6:	dc17      	bgt.n	801dff8 <_puts_r+0x8c>
 801dfc8:	290a      	cmp	r1, #10
 801dfca:	d015      	beq.n	801dff8 <_puts_r+0x8c>
 801dfcc:	6823      	ldr	r3, [r4, #0]
 801dfce:	1c5a      	adds	r2, r3, #1
 801dfd0:	6022      	str	r2, [r4, #0]
 801dfd2:	7019      	strb	r1, [r3, #0]
 801dfd4:	68a3      	ldr	r3, [r4, #8]
 801dfd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dfda:	3b01      	subs	r3, #1
 801dfdc:	60a3      	str	r3, [r4, #8]
 801dfde:	2900      	cmp	r1, #0
 801dfe0:	d1ed      	bne.n	801dfbe <_puts_r+0x52>
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	da11      	bge.n	801e00a <_puts_r+0x9e>
 801dfe6:	4622      	mov	r2, r4
 801dfe8:	210a      	movs	r1, #10
 801dfea:	4628      	mov	r0, r5
 801dfec:	f000 f85f 	bl	801e0ae <__swbuf_r>
 801dff0:	3001      	adds	r0, #1
 801dff2:	d0d7      	beq.n	801dfa4 <_puts_r+0x38>
 801dff4:	250a      	movs	r5, #10
 801dff6:	e7d7      	b.n	801dfa8 <_puts_r+0x3c>
 801dff8:	4622      	mov	r2, r4
 801dffa:	4628      	mov	r0, r5
 801dffc:	f000 f857 	bl	801e0ae <__swbuf_r>
 801e000:	3001      	adds	r0, #1
 801e002:	d1e7      	bne.n	801dfd4 <_puts_r+0x68>
 801e004:	e7ce      	b.n	801dfa4 <_puts_r+0x38>
 801e006:	3e01      	subs	r6, #1
 801e008:	e7e4      	b.n	801dfd4 <_puts_r+0x68>
 801e00a:	6823      	ldr	r3, [r4, #0]
 801e00c:	1c5a      	adds	r2, r3, #1
 801e00e:	6022      	str	r2, [r4, #0]
 801e010:	220a      	movs	r2, #10
 801e012:	701a      	strb	r2, [r3, #0]
 801e014:	e7ee      	b.n	801dff4 <_puts_r+0x88>
	...

0801e018 <puts>:
 801e018:	4b02      	ldr	r3, [pc, #8]	@ (801e024 <puts+0xc>)
 801e01a:	4601      	mov	r1, r0
 801e01c:	6818      	ldr	r0, [r3, #0]
 801e01e:	f7ff bfa5 	b.w	801df6c <_puts_r>
 801e022:	bf00      	nop
 801e024:	2000003c 	.word	0x2000003c

0801e028 <__sread>:
 801e028:	b510      	push	{r4, lr}
 801e02a:	460c      	mov	r4, r1
 801e02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e030:	f000 f96a 	bl	801e308 <_read_r>
 801e034:	2800      	cmp	r0, #0
 801e036:	bfab      	itete	ge
 801e038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e03a:	89a3      	ldrhlt	r3, [r4, #12]
 801e03c:	181b      	addge	r3, r3, r0
 801e03e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e042:	bfac      	ite	ge
 801e044:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e046:	81a3      	strhlt	r3, [r4, #12]
 801e048:	bd10      	pop	{r4, pc}

0801e04a <__swrite>:
 801e04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e04e:	461f      	mov	r7, r3
 801e050:	898b      	ldrh	r3, [r1, #12]
 801e052:	05db      	lsls	r3, r3, #23
 801e054:	4605      	mov	r5, r0
 801e056:	460c      	mov	r4, r1
 801e058:	4616      	mov	r6, r2
 801e05a:	d505      	bpl.n	801e068 <__swrite+0x1e>
 801e05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e060:	2302      	movs	r3, #2
 801e062:	2200      	movs	r2, #0
 801e064:	f000 f93e 	bl	801e2e4 <_lseek_r>
 801e068:	89a3      	ldrh	r3, [r4, #12]
 801e06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e06e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e072:	81a3      	strh	r3, [r4, #12]
 801e074:	4632      	mov	r2, r6
 801e076:	463b      	mov	r3, r7
 801e078:	4628      	mov	r0, r5
 801e07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e07e:	f000 b955 	b.w	801e32c <_write_r>

0801e082 <__sseek>:
 801e082:	b510      	push	{r4, lr}
 801e084:	460c      	mov	r4, r1
 801e086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e08a:	f000 f92b 	bl	801e2e4 <_lseek_r>
 801e08e:	1c43      	adds	r3, r0, #1
 801e090:	89a3      	ldrh	r3, [r4, #12]
 801e092:	bf15      	itete	ne
 801e094:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e09a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e09e:	81a3      	strheq	r3, [r4, #12]
 801e0a0:	bf18      	it	ne
 801e0a2:	81a3      	strhne	r3, [r4, #12]
 801e0a4:	bd10      	pop	{r4, pc}

0801e0a6 <__sclose>:
 801e0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0aa:	f000 b8ad 	b.w	801e208 <_close_r>

0801e0ae <__swbuf_r>:
 801e0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0b0:	460e      	mov	r6, r1
 801e0b2:	4614      	mov	r4, r2
 801e0b4:	4605      	mov	r5, r0
 801e0b6:	b118      	cbz	r0, 801e0c0 <__swbuf_r+0x12>
 801e0b8:	6a03      	ldr	r3, [r0, #32]
 801e0ba:	b90b      	cbnz	r3, 801e0c0 <__swbuf_r+0x12>
 801e0bc:	f7ff ff0e 	bl	801dedc <__sinit>
 801e0c0:	69a3      	ldr	r3, [r4, #24]
 801e0c2:	60a3      	str	r3, [r4, #8]
 801e0c4:	89a3      	ldrh	r3, [r4, #12]
 801e0c6:	071a      	lsls	r2, r3, #28
 801e0c8:	d501      	bpl.n	801e0ce <__swbuf_r+0x20>
 801e0ca:	6923      	ldr	r3, [r4, #16]
 801e0cc:	b943      	cbnz	r3, 801e0e0 <__swbuf_r+0x32>
 801e0ce:	4621      	mov	r1, r4
 801e0d0:	4628      	mov	r0, r5
 801e0d2:	f000 f82b 	bl	801e12c <__swsetup_r>
 801e0d6:	b118      	cbz	r0, 801e0e0 <__swbuf_r+0x32>
 801e0d8:	f04f 37ff 	mov.w	r7, #4294967295
 801e0dc:	4638      	mov	r0, r7
 801e0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0e0:	6823      	ldr	r3, [r4, #0]
 801e0e2:	6922      	ldr	r2, [r4, #16]
 801e0e4:	1a98      	subs	r0, r3, r2
 801e0e6:	6963      	ldr	r3, [r4, #20]
 801e0e8:	b2f6      	uxtb	r6, r6
 801e0ea:	4283      	cmp	r3, r0
 801e0ec:	4637      	mov	r7, r6
 801e0ee:	dc05      	bgt.n	801e0fc <__swbuf_r+0x4e>
 801e0f0:	4621      	mov	r1, r4
 801e0f2:	4628      	mov	r0, r5
 801e0f4:	f000 fdd2 	bl	801ec9c <_fflush_r>
 801e0f8:	2800      	cmp	r0, #0
 801e0fa:	d1ed      	bne.n	801e0d8 <__swbuf_r+0x2a>
 801e0fc:	68a3      	ldr	r3, [r4, #8]
 801e0fe:	3b01      	subs	r3, #1
 801e100:	60a3      	str	r3, [r4, #8]
 801e102:	6823      	ldr	r3, [r4, #0]
 801e104:	1c5a      	adds	r2, r3, #1
 801e106:	6022      	str	r2, [r4, #0]
 801e108:	701e      	strb	r6, [r3, #0]
 801e10a:	6962      	ldr	r2, [r4, #20]
 801e10c:	1c43      	adds	r3, r0, #1
 801e10e:	429a      	cmp	r2, r3
 801e110:	d004      	beq.n	801e11c <__swbuf_r+0x6e>
 801e112:	89a3      	ldrh	r3, [r4, #12]
 801e114:	07db      	lsls	r3, r3, #31
 801e116:	d5e1      	bpl.n	801e0dc <__swbuf_r+0x2e>
 801e118:	2e0a      	cmp	r6, #10
 801e11a:	d1df      	bne.n	801e0dc <__swbuf_r+0x2e>
 801e11c:	4621      	mov	r1, r4
 801e11e:	4628      	mov	r0, r5
 801e120:	f000 fdbc 	bl	801ec9c <_fflush_r>
 801e124:	2800      	cmp	r0, #0
 801e126:	d0d9      	beq.n	801e0dc <__swbuf_r+0x2e>
 801e128:	e7d6      	b.n	801e0d8 <__swbuf_r+0x2a>
	...

0801e12c <__swsetup_r>:
 801e12c:	b538      	push	{r3, r4, r5, lr}
 801e12e:	4b29      	ldr	r3, [pc, #164]	@ (801e1d4 <__swsetup_r+0xa8>)
 801e130:	4605      	mov	r5, r0
 801e132:	6818      	ldr	r0, [r3, #0]
 801e134:	460c      	mov	r4, r1
 801e136:	b118      	cbz	r0, 801e140 <__swsetup_r+0x14>
 801e138:	6a03      	ldr	r3, [r0, #32]
 801e13a:	b90b      	cbnz	r3, 801e140 <__swsetup_r+0x14>
 801e13c:	f7ff fece 	bl	801dedc <__sinit>
 801e140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e144:	0719      	lsls	r1, r3, #28
 801e146:	d422      	bmi.n	801e18e <__swsetup_r+0x62>
 801e148:	06da      	lsls	r2, r3, #27
 801e14a:	d407      	bmi.n	801e15c <__swsetup_r+0x30>
 801e14c:	2209      	movs	r2, #9
 801e14e:	602a      	str	r2, [r5, #0]
 801e150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e154:	81a3      	strh	r3, [r4, #12]
 801e156:	f04f 30ff 	mov.w	r0, #4294967295
 801e15a:	e033      	b.n	801e1c4 <__swsetup_r+0x98>
 801e15c:	0758      	lsls	r0, r3, #29
 801e15e:	d512      	bpl.n	801e186 <__swsetup_r+0x5a>
 801e160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e162:	b141      	cbz	r1, 801e176 <__swsetup_r+0x4a>
 801e164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e168:	4299      	cmp	r1, r3
 801e16a:	d002      	beq.n	801e172 <__swsetup_r+0x46>
 801e16c:	4628      	mov	r0, r5
 801e16e:	f000 f943 	bl	801e3f8 <_free_r>
 801e172:	2300      	movs	r3, #0
 801e174:	6363      	str	r3, [r4, #52]	@ 0x34
 801e176:	89a3      	ldrh	r3, [r4, #12]
 801e178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e17c:	81a3      	strh	r3, [r4, #12]
 801e17e:	2300      	movs	r3, #0
 801e180:	6063      	str	r3, [r4, #4]
 801e182:	6923      	ldr	r3, [r4, #16]
 801e184:	6023      	str	r3, [r4, #0]
 801e186:	89a3      	ldrh	r3, [r4, #12]
 801e188:	f043 0308 	orr.w	r3, r3, #8
 801e18c:	81a3      	strh	r3, [r4, #12]
 801e18e:	6923      	ldr	r3, [r4, #16]
 801e190:	b94b      	cbnz	r3, 801e1a6 <__swsetup_r+0x7a>
 801e192:	89a3      	ldrh	r3, [r4, #12]
 801e194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e19c:	d003      	beq.n	801e1a6 <__swsetup_r+0x7a>
 801e19e:	4621      	mov	r1, r4
 801e1a0:	4628      	mov	r0, r5
 801e1a2:	f000 fddb 	bl	801ed5c <__smakebuf_r>
 801e1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1aa:	f013 0201 	ands.w	r2, r3, #1
 801e1ae:	d00a      	beq.n	801e1c6 <__swsetup_r+0x9a>
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	60a2      	str	r2, [r4, #8]
 801e1b4:	6962      	ldr	r2, [r4, #20]
 801e1b6:	4252      	negs	r2, r2
 801e1b8:	61a2      	str	r2, [r4, #24]
 801e1ba:	6922      	ldr	r2, [r4, #16]
 801e1bc:	b942      	cbnz	r2, 801e1d0 <__swsetup_r+0xa4>
 801e1be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e1c2:	d1c5      	bne.n	801e150 <__swsetup_r+0x24>
 801e1c4:	bd38      	pop	{r3, r4, r5, pc}
 801e1c6:	0799      	lsls	r1, r3, #30
 801e1c8:	bf58      	it	pl
 801e1ca:	6962      	ldrpl	r2, [r4, #20]
 801e1cc:	60a2      	str	r2, [r4, #8]
 801e1ce:	e7f4      	b.n	801e1ba <__swsetup_r+0x8e>
 801e1d0:	2000      	movs	r0, #0
 801e1d2:	e7f7      	b.n	801e1c4 <__swsetup_r+0x98>
 801e1d4:	2000003c 	.word	0x2000003c

0801e1d8 <memcmp>:
 801e1d8:	b510      	push	{r4, lr}
 801e1da:	3901      	subs	r1, #1
 801e1dc:	4402      	add	r2, r0
 801e1de:	4290      	cmp	r0, r2
 801e1e0:	d101      	bne.n	801e1e6 <memcmp+0xe>
 801e1e2:	2000      	movs	r0, #0
 801e1e4:	e005      	b.n	801e1f2 <memcmp+0x1a>
 801e1e6:	7803      	ldrb	r3, [r0, #0]
 801e1e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e1ec:	42a3      	cmp	r3, r4
 801e1ee:	d001      	beq.n	801e1f4 <memcmp+0x1c>
 801e1f0:	1b18      	subs	r0, r3, r4
 801e1f2:	bd10      	pop	{r4, pc}
 801e1f4:	3001      	adds	r0, #1
 801e1f6:	e7f2      	b.n	801e1de <memcmp+0x6>

0801e1f8 <memset>:
 801e1f8:	4402      	add	r2, r0
 801e1fa:	4603      	mov	r3, r0
 801e1fc:	4293      	cmp	r3, r2
 801e1fe:	d100      	bne.n	801e202 <memset+0xa>
 801e200:	4770      	bx	lr
 801e202:	f803 1b01 	strb.w	r1, [r3], #1
 801e206:	e7f9      	b.n	801e1fc <memset+0x4>

0801e208 <_close_r>:
 801e208:	b538      	push	{r3, r4, r5, lr}
 801e20a:	4d06      	ldr	r5, [pc, #24]	@ (801e224 <_close_r+0x1c>)
 801e20c:	2300      	movs	r3, #0
 801e20e:	4604      	mov	r4, r0
 801e210:	4608      	mov	r0, r1
 801e212:	602b      	str	r3, [r5, #0]
 801e214:	f7e4 f812 	bl	800223c <_close>
 801e218:	1c43      	adds	r3, r0, #1
 801e21a:	d102      	bne.n	801e222 <_close_r+0x1a>
 801e21c:	682b      	ldr	r3, [r5, #0]
 801e21e:	b103      	cbz	r3, 801e222 <_close_r+0x1a>
 801e220:	6023      	str	r3, [r4, #0]
 801e222:	bd38      	pop	{r3, r4, r5, pc}
 801e224:	20027ccc 	.word	0x20027ccc

0801e228 <_reclaim_reent>:
 801e228:	4b2d      	ldr	r3, [pc, #180]	@ (801e2e0 <_reclaim_reent+0xb8>)
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	4283      	cmp	r3, r0
 801e22e:	b570      	push	{r4, r5, r6, lr}
 801e230:	4604      	mov	r4, r0
 801e232:	d053      	beq.n	801e2dc <_reclaim_reent+0xb4>
 801e234:	69c3      	ldr	r3, [r0, #28]
 801e236:	b31b      	cbz	r3, 801e280 <_reclaim_reent+0x58>
 801e238:	68db      	ldr	r3, [r3, #12]
 801e23a:	b163      	cbz	r3, 801e256 <_reclaim_reent+0x2e>
 801e23c:	2500      	movs	r5, #0
 801e23e:	69e3      	ldr	r3, [r4, #28]
 801e240:	68db      	ldr	r3, [r3, #12]
 801e242:	5959      	ldr	r1, [r3, r5]
 801e244:	b9b1      	cbnz	r1, 801e274 <_reclaim_reent+0x4c>
 801e246:	3504      	adds	r5, #4
 801e248:	2d80      	cmp	r5, #128	@ 0x80
 801e24a:	d1f8      	bne.n	801e23e <_reclaim_reent+0x16>
 801e24c:	69e3      	ldr	r3, [r4, #28]
 801e24e:	4620      	mov	r0, r4
 801e250:	68d9      	ldr	r1, [r3, #12]
 801e252:	f000 f8d1 	bl	801e3f8 <_free_r>
 801e256:	69e3      	ldr	r3, [r4, #28]
 801e258:	6819      	ldr	r1, [r3, #0]
 801e25a:	b111      	cbz	r1, 801e262 <_reclaim_reent+0x3a>
 801e25c:	4620      	mov	r0, r4
 801e25e:	f000 f8cb 	bl	801e3f8 <_free_r>
 801e262:	69e3      	ldr	r3, [r4, #28]
 801e264:	689d      	ldr	r5, [r3, #8]
 801e266:	b15d      	cbz	r5, 801e280 <_reclaim_reent+0x58>
 801e268:	4629      	mov	r1, r5
 801e26a:	4620      	mov	r0, r4
 801e26c:	682d      	ldr	r5, [r5, #0]
 801e26e:	f000 f8c3 	bl	801e3f8 <_free_r>
 801e272:	e7f8      	b.n	801e266 <_reclaim_reent+0x3e>
 801e274:	680e      	ldr	r6, [r1, #0]
 801e276:	4620      	mov	r0, r4
 801e278:	f000 f8be 	bl	801e3f8 <_free_r>
 801e27c:	4631      	mov	r1, r6
 801e27e:	e7e1      	b.n	801e244 <_reclaim_reent+0x1c>
 801e280:	6961      	ldr	r1, [r4, #20]
 801e282:	b111      	cbz	r1, 801e28a <_reclaim_reent+0x62>
 801e284:	4620      	mov	r0, r4
 801e286:	f000 f8b7 	bl	801e3f8 <_free_r>
 801e28a:	69e1      	ldr	r1, [r4, #28]
 801e28c:	b111      	cbz	r1, 801e294 <_reclaim_reent+0x6c>
 801e28e:	4620      	mov	r0, r4
 801e290:	f000 f8b2 	bl	801e3f8 <_free_r>
 801e294:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e296:	b111      	cbz	r1, 801e29e <_reclaim_reent+0x76>
 801e298:	4620      	mov	r0, r4
 801e29a:	f000 f8ad 	bl	801e3f8 <_free_r>
 801e29e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e2a0:	b111      	cbz	r1, 801e2a8 <_reclaim_reent+0x80>
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f000 f8a8 	bl	801e3f8 <_free_r>
 801e2a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e2aa:	b111      	cbz	r1, 801e2b2 <_reclaim_reent+0x8a>
 801e2ac:	4620      	mov	r0, r4
 801e2ae:	f000 f8a3 	bl	801e3f8 <_free_r>
 801e2b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e2b4:	b111      	cbz	r1, 801e2bc <_reclaim_reent+0x94>
 801e2b6:	4620      	mov	r0, r4
 801e2b8:	f000 f89e 	bl	801e3f8 <_free_r>
 801e2bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e2be:	b111      	cbz	r1, 801e2c6 <_reclaim_reent+0x9e>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f000 f899 	bl	801e3f8 <_free_r>
 801e2c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e2c8:	b111      	cbz	r1, 801e2d0 <_reclaim_reent+0xa8>
 801e2ca:	4620      	mov	r0, r4
 801e2cc:	f000 f894 	bl	801e3f8 <_free_r>
 801e2d0:	6a23      	ldr	r3, [r4, #32]
 801e2d2:	b11b      	cbz	r3, 801e2dc <_reclaim_reent+0xb4>
 801e2d4:	4620      	mov	r0, r4
 801e2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e2da:	4718      	bx	r3
 801e2dc:	bd70      	pop	{r4, r5, r6, pc}
 801e2de:	bf00      	nop
 801e2e0:	2000003c 	.word	0x2000003c

0801e2e4 <_lseek_r>:
 801e2e4:	b538      	push	{r3, r4, r5, lr}
 801e2e6:	4d07      	ldr	r5, [pc, #28]	@ (801e304 <_lseek_r+0x20>)
 801e2e8:	4604      	mov	r4, r0
 801e2ea:	4608      	mov	r0, r1
 801e2ec:	4611      	mov	r1, r2
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	602a      	str	r2, [r5, #0]
 801e2f2:	461a      	mov	r2, r3
 801e2f4:	f7e3 ffc9 	bl	800228a <_lseek>
 801e2f8:	1c43      	adds	r3, r0, #1
 801e2fa:	d102      	bne.n	801e302 <_lseek_r+0x1e>
 801e2fc:	682b      	ldr	r3, [r5, #0]
 801e2fe:	b103      	cbz	r3, 801e302 <_lseek_r+0x1e>
 801e300:	6023      	str	r3, [r4, #0]
 801e302:	bd38      	pop	{r3, r4, r5, pc}
 801e304:	20027ccc 	.word	0x20027ccc

0801e308 <_read_r>:
 801e308:	b538      	push	{r3, r4, r5, lr}
 801e30a:	4d07      	ldr	r5, [pc, #28]	@ (801e328 <_read_r+0x20>)
 801e30c:	4604      	mov	r4, r0
 801e30e:	4608      	mov	r0, r1
 801e310:	4611      	mov	r1, r2
 801e312:	2200      	movs	r2, #0
 801e314:	602a      	str	r2, [r5, #0]
 801e316:	461a      	mov	r2, r3
 801e318:	f7e3 ff57 	bl	80021ca <_read>
 801e31c:	1c43      	adds	r3, r0, #1
 801e31e:	d102      	bne.n	801e326 <_read_r+0x1e>
 801e320:	682b      	ldr	r3, [r5, #0]
 801e322:	b103      	cbz	r3, 801e326 <_read_r+0x1e>
 801e324:	6023      	str	r3, [r4, #0]
 801e326:	bd38      	pop	{r3, r4, r5, pc}
 801e328:	20027ccc 	.word	0x20027ccc

0801e32c <_write_r>:
 801e32c:	b538      	push	{r3, r4, r5, lr}
 801e32e:	4d07      	ldr	r5, [pc, #28]	@ (801e34c <_write_r+0x20>)
 801e330:	4604      	mov	r4, r0
 801e332:	4608      	mov	r0, r1
 801e334:	4611      	mov	r1, r2
 801e336:	2200      	movs	r2, #0
 801e338:	602a      	str	r2, [r5, #0]
 801e33a:	461a      	mov	r2, r3
 801e33c:	f7e3 ff62 	bl	8002204 <_write>
 801e340:	1c43      	adds	r3, r0, #1
 801e342:	d102      	bne.n	801e34a <_write_r+0x1e>
 801e344:	682b      	ldr	r3, [r5, #0]
 801e346:	b103      	cbz	r3, 801e34a <_write_r+0x1e>
 801e348:	6023      	str	r3, [r4, #0]
 801e34a:	bd38      	pop	{r3, r4, r5, pc}
 801e34c:	20027ccc 	.word	0x20027ccc

0801e350 <__libc_init_array>:
 801e350:	b570      	push	{r4, r5, r6, lr}
 801e352:	4d0d      	ldr	r5, [pc, #52]	@ (801e388 <__libc_init_array+0x38>)
 801e354:	4c0d      	ldr	r4, [pc, #52]	@ (801e38c <__libc_init_array+0x3c>)
 801e356:	1b64      	subs	r4, r4, r5
 801e358:	10a4      	asrs	r4, r4, #2
 801e35a:	2600      	movs	r6, #0
 801e35c:	42a6      	cmp	r6, r4
 801e35e:	d109      	bne.n	801e374 <__libc_init_array+0x24>
 801e360:	4d0b      	ldr	r5, [pc, #44]	@ (801e390 <__libc_init_array+0x40>)
 801e362:	4c0c      	ldr	r4, [pc, #48]	@ (801e394 <__libc_init_array+0x44>)
 801e364:	f000 fdb4 	bl	801eed0 <_init>
 801e368:	1b64      	subs	r4, r4, r5
 801e36a:	10a4      	asrs	r4, r4, #2
 801e36c:	2600      	movs	r6, #0
 801e36e:	42a6      	cmp	r6, r4
 801e370:	d105      	bne.n	801e37e <__libc_init_array+0x2e>
 801e372:	bd70      	pop	{r4, r5, r6, pc}
 801e374:	f855 3b04 	ldr.w	r3, [r5], #4
 801e378:	4798      	blx	r3
 801e37a:	3601      	adds	r6, #1
 801e37c:	e7ee      	b.n	801e35c <__libc_init_array+0xc>
 801e37e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e382:	4798      	blx	r3
 801e384:	3601      	adds	r6, #1
 801e386:	e7f2      	b.n	801e36e <__libc_init_array+0x1e>
 801e388:	080223b8 	.word	0x080223b8
 801e38c:	080223b8 	.word	0x080223b8
 801e390:	080223b8 	.word	0x080223b8
 801e394:	080223bc 	.word	0x080223bc

0801e398 <__retarget_lock_init_recursive>:
 801e398:	4770      	bx	lr

0801e39a <__retarget_lock_acquire_recursive>:
 801e39a:	4770      	bx	lr

0801e39c <__retarget_lock_release_recursive>:
 801e39c:	4770      	bx	lr

0801e39e <memcpy>:
 801e39e:	440a      	add	r2, r1
 801e3a0:	4291      	cmp	r1, r2
 801e3a2:	f100 33ff 	add.w	r3, r0, #4294967295
 801e3a6:	d100      	bne.n	801e3aa <memcpy+0xc>
 801e3a8:	4770      	bx	lr
 801e3aa:	b510      	push	{r4, lr}
 801e3ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e3b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e3b4:	4291      	cmp	r1, r2
 801e3b6:	d1f9      	bne.n	801e3ac <memcpy+0xe>
 801e3b8:	bd10      	pop	{r4, pc}
	...

0801e3bc <__assert_func>:
 801e3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e3be:	4614      	mov	r4, r2
 801e3c0:	461a      	mov	r2, r3
 801e3c2:	4b09      	ldr	r3, [pc, #36]	@ (801e3e8 <__assert_func+0x2c>)
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	4605      	mov	r5, r0
 801e3c8:	68d8      	ldr	r0, [r3, #12]
 801e3ca:	b14c      	cbz	r4, 801e3e0 <__assert_func+0x24>
 801e3cc:	4b07      	ldr	r3, [pc, #28]	@ (801e3ec <__assert_func+0x30>)
 801e3ce:	9100      	str	r1, [sp, #0]
 801e3d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e3d4:	4906      	ldr	r1, [pc, #24]	@ (801e3f0 <__assert_func+0x34>)
 801e3d6:	462b      	mov	r3, r5
 801e3d8:	f000 fc88 	bl	801ecec <fiprintf>
 801e3dc:	f000 fd2c 	bl	801ee38 <abort>
 801e3e0:	4b04      	ldr	r3, [pc, #16]	@ (801e3f4 <__assert_func+0x38>)
 801e3e2:	461c      	mov	r4, r3
 801e3e4:	e7f3      	b.n	801e3ce <__assert_func+0x12>
 801e3e6:	bf00      	nop
 801e3e8:	2000003c 	.word	0x2000003c
 801e3ec:	08022341 	.word	0x08022341
 801e3f0:	0802234e 	.word	0x0802234e
 801e3f4:	0802237c 	.word	0x0802237c

0801e3f8 <_free_r>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4605      	mov	r5, r0
 801e3fc:	2900      	cmp	r1, #0
 801e3fe:	d041      	beq.n	801e484 <_free_r+0x8c>
 801e400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e404:	1f0c      	subs	r4, r1, #4
 801e406:	2b00      	cmp	r3, #0
 801e408:	bfb8      	it	lt
 801e40a:	18e4      	addlt	r4, r4, r3
 801e40c:	f000 f8e8 	bl	801e5e0 <__malloc_lock>
 801e410:	4a1d      	ldr	r2, [pc, #116]	@ (801e488 <_free_r+0x90>)
 801e412:	6813      	ldr	r3, [r2, #0]
 801e414:	b933      	cbnz	r3, 801e424 <_free_r+0x2c>
 801e416:	6063      	str	r3, [r4, #4]
 801e418:	6014      	str	r4, [r2, #0]
 801e41a:	4628      	mov	r0, r5
 801e41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e420:	f000 b8e4 	b.w	801e5ec <__malloc_unlock>
 801e424:	42a3      	cmp	r3, r4
 801e426:	d908      	bls.n	801e43a <_free_r+0x42>
 801e428:	6820      	ldr	r0, [r4, #0]
 801e42a:	1821      	adds	r1, r4, r0
 801e42c:	428b      	cmp	r3, r1
 801e42e:	bf01      	itttt	eq
 801e430:	6819      	ldreq	r1, [r3, #0]
 801e432:	685b      	ldreq	r3, [r3, #4]
 801e434:	1809      	addeq	r1, r1, r0
 801e436:	6021      	streq	r1, [r4, #0]
 801e438:	e7ed      	b.n	801e416 <_free_r+0x1e>
 801e43a:	461a      	mov	r2, r3
 801e43c:	685b      	ldr	r3, [r3, #4]
 801e43e:	b10b      	cbz	r3, 801e444 <_free_r+0x4c>
 801e440:	42a3      	cmp	r3, r4
 801e442:	d9fa      	bls.n	801e43a <_free_r+0x42>
 801e444:	6811      	ldr	r1, [r2, #0]
 801e446:	1850      	adds	r0, r2, r1
 801e448:	42a0      	cmp	r0, r4
 801e44a:	d10b      	bne.n	801e464 <_free_r+0x6c>
 801e44c:	6820      	ldr	r0, [r4, #0]
 801e44e:	4401      	add	r1, r0
 801e450:	1850      	adds	r0, r2, r1
 801e452:	4283      	cmp	r3, r0
 801e454:	6011      	str	r1, [r2, #0]
 801e456:	d1e0      	bne.n	801e41a <_free_r+0x22>
 801e458:	6818      	ldr	r0, [r3, #0]
 801e45a:	685b      	ldr	r3, [r3, #4]
 801e45c:	6053      	str	r3, [r2, #4]
 801e45e:	4408      	add	r0, r1
 801e460:	6010      	str	r0, [r2, #0]
 801e462:	e7da      	b.n	801e41a <_free_r+0x22>
 801e464:	d902      	bls.n	801e46c <_free_r+0x74>
 801e466:	230c      	movs	r3, #12
 801e468:	602b      	str	r3, [r5, #0]
 801e46a:	e7d6      	b.n	801e41a <_free_r+0x22>
 801e46c:	6820      	ldr	r0, [r4, #0]
 801e46e:	1821      	adds	r1, r4, r0
 801e470:	428b      	cmp	r3, r1
 801e472:	bf04      	itt	eq
 801e474:	6819      	ldreq	r1, [r3, #0]
 801e476:	685b      	ldreq	r3, [r3, #4]
 801e478:	6063      	str	r3, [r4, #4]
 801e47a:	bf04      	itt	eq
 801e47c:	1809      	addeq	r1, r1, r0
 801e47e:	6021      	streq	r1, [r4, #0]
 801e480:	6054      	str	r4, [r2, #4]
 801e482:	e7ca      	b.n	801e41a <_free_r+0x22>
 801e484:	bd38      	pop	{r3, r4, r5, pc}
 801e486:	bf00      	nop
 801e488:	20027cd8 	.word	0x20027cd8

0801e48c <malloc>:
 801e48c:	4b02      	ldr	r3, [pc, #8]	@ (801e498 <malloc+0xc>)
 801e48e:	4601      	mov	r1, r0
 801e490:	6818      	ldr	r0, [r3, #0]
 801e492:	f000 b825 	b.w	801e4e0 <_malloc_r>
 801e496:	bf00      	nop
 801e498:	2000003c 	.word	0x2000003c

0801e49c <sbrk_aligned>:
 801e49c:	b570      	push	{r4, r5, r6, lr}
 801e49e:	4e0f      	ldr	r6, [pc, #60]	@ (801e4dc <sbrk_aligned+0x40>)
 801e4a0:	460c      	mov	r4, r1
 801e4a2:	6831      	ldr	r1, [r6, #0]
 801e4a4:	4605      	mov	r5, r0
 801e4a6:	b911      	cbnz	r1, 801e4ae <sbrk_aligned+0x12>
 801e4a8:	f000 fcb6 	bl	801ee18 <_sbrk_r>
 801e4ac:	6030      	str	r0, [r6, #0]
 801e4ae:	4621      	mov	r1, r4
 801e4b0:	4628      	mov	r0, r5
 801e4b2:	f000 fcb1 	bl	801ee18 <_sbrk_r>
 801e4b6:	1c43      	adds	r3, r0, #1
 801e4b8:	d103      	bne.n	801e4c2 <sbrk_aligned+0x26>
 801e4ba:	f04f 34ff 	mov.w	r4, #4294967295
 801e4be:	4620      	mov	r0, r4
 801e4c0:	bd70      	pop	{r4, r5, r6, pc}
 801e4c2:	1cc4      	adds	r4, r0, #3
 801e4c4:	f024 0403 	bic.w	r4, r4, #3
 801e4c8:	42a0      	cmp	r0, r4
 801e4ca:	d0f8      	beq.n	801e4be <sbrk_aligned+0x22>
 801e4cc:	1a21      	subs	r1, r4, r0
 801e4ce:	4628      	mov	r0, r5
 801e4d0:	f000 fca2 	bl	801ee18 <_sbrk_r>
 801e4d4:	3001      	adds	r0, #1
 801e4d6:	d1f2      	bne.n	801e4be <sbrk_aligned+0x22>
 801e4d8:	e7ef      	b.n	801e4ba <sbrk_aligned+0x1e>
 801e4da:	bf00      	nop
 801e4dc:	20027cd4 	.word	0x20027cd4

0801e4e0 <_malloc_r>:
 801e4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4e4:	1ccd      	adds	r5, r1, #3
 801e4e6:	f025 0503 	bic.w	r5, r5, #3
 801e4ea:	3508      	adds	r5, #8
 801e4ec:	2d0c      	cmp	r5, #12
 801e4ee:	bf38      	it	cc
 801e4f0:	250c      	movcc	r5, #12
 801e4f2:	2d00      	cmp	r5, #0
 801e4f4:	4606      	mov	r6, r0
 801e4f6:	db01      	blt.n	801e4fc <_malloc_r+0x1c>
 801e4f8:	42a9      	cmp	r1, r5
 801e4fa:	d904      	bls.n	801e506 <_malloc_r+0x26>
 801e4fc:	230c      	movs	r3, #12
 801e4fe:	6033      	str	r3, [r6, #0]
 801e500:	2000      	movs	r0, #0
 801e502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e5dc <_malloc_r+0xfc>
 801e50a:	f000 f869 	bl	801e5e0 <__malloc_lock>
 801e50e:	f8d8 3000 	ldr.w	r3, [r8]
 801e512:	461c      	mov	r4, r3
 801e514:	bb44      	cbnz	r4, 801e568 <_malloc_r+0x88>
 801e516:	4629      	mov	r1, r5
 801e518:	4630      	mov	r0, r6
 801e51a:	f7ff ffbf 	bl	801e49c <sbrk_aligned>
 801e51e:	1c43      	adds	r3, r0, #1
 801e520:	4604      	mov	r4, r0
 801e522:	d158      	bne.n	801e5d6 <_malloc_r+0xf6>
 801e524:	f8d8 4000 	ldr.w	r4, [r8]
 801e528:	4627      	mov	r7, r4
 801e52a:	2f00      	cmp	r7, #0
 801e52c:	d143      	bne.n	801e5b6 <_malloc_r+0xd6>
 801e52e:	2c00      	cmp	r4, #0
 801e530:	d04b      	beq.n	801e5ca <_malloc_r+0xea>
 801e532:	6823      	ldr	r3, [r4, #0]
 801e534:	4639      	mov	r1, r7
 801e536:	4630      	mov	r0, r6
 801e538:	eb04 0903 	add.w	r9, r4, r3
 801e53c:	f000 fc6c 	bl	801ee18 <_sbrk_r>
 801e540:	4581      	cmp	r9, r0
 801e542:	d142      	bne.n	801e5ca <_malloc_r+0xea>
 801e544:	6821      	ldr	r1, [r4, #0]
 801e546:	1a6d      	subs	r5, r5, r1
 801e548:	4629      	mov	r1, r5
 801e54a:	4630      	mov	r0, r6
 801e54c:	f7ff ffa6 	bl	801e49c <sbrk_aligned>
 801e550:	3001      	adds	r0, #1
 801e552:	d03a      	beq.n	801e5ca <_malloc_r+0xea>
 801e554:	6823      	ldr	r3, [r4, #0]
 801e556:	442b      	add	r3, r5
 801e558:	6023      	str	r3, [r4, #0]
 801e55a:	f8d8 3000 	ldr.w	r3, [r8]
 801e55e:	685a      	ldr	r2, [r3, #4]
 801e560:	bb62      	cbnz	r2, 801e5bc <_malloc_r+0xdc>
 801e562:	f8c8 7000 	str.w	r7, [r8]
 801e566:	e00f      	b.n	801e588 <_malloc_r+0xa8>
 801e568:	6822      	ldr	r2, [r4, #0]
 801e56a:	1b52      	subs	r2, r2, r5
 801e56c:	d420      	bmi.n	801e5b0 <_malloc_r+0xd0>
 801e56e:	2a0b      	cmp	r2, #11
 801e570:	d917      	bls.n	801e5a2 <_malloc_r+0xc2>
 801e572:	1961      	adds	r1, r4, r5
 801e574:	42a3      	cmp	r3, r4
 801e576:	6025      	str	r5, [r4, #0]
 801e578:	bf18      	it	ne
 801e57a:	6059      	strne	r1, [r3, #4]
 801e57c:	6863      	ldr	r3, [r4, #4]
 801e57e:	bf08      	it	eq
 801e580:	f8c8 1000 	streq.w	r1, [r8]
 801e584:	5162      	str	r2, [r4, r5]
 801e586:	604b      	str	r3, [r1, #4]
 801e588:	4630      	mov	r0, r6
 801e58a:	f000 f82f 	bl	801e5ec <__malloc_unlock>
 801e58e:	f104 000b 	add.w	r0, r4, #11
 801e592:	1d23      	adds	r3, r4, #4
 801e594:	f020 0007 	bic.w	r0, r0, #7
 801e598:	1ac2      	subs	r2, r0, r3
 801e59a:	bf1c      	itt	ne
 801e59c:	1a1b      	subne	r3, r3, r0
 801e59e:	50a3      	strne	r3, [r4, r2]
 801e5a0:	e7af      	b.n	801e502 <_malloc_r+0x22>
 801e5a2:	6862      	ldr	r2, [r4, #4]
 801e5a4:	42a3      	cmp	r3, r4
 801e5a6:	bf0c      	ite	eq
 801e5a8:	f8c8 2000 	streq.w	r2, [r8]
 801e5ac:	605a      	strne	r2, [r3, #4]
 801e5ae:	e7eb      	b.n	801e588 <_malloc_r+0xa8>
 801e5b0:	4623      	mov	r3, r4
 801e5b2:	6864      	ldr	r4, [r4, #4]
 801e5b4:	e7ae      	b.n	801e514 <_malloc_r+0x34>
 801e5b6:	463c      	mov	r4, r7
 801e5b8:	687f      	ldr	r7, [r7, #4]
 801e5ba:	e7b6      	b.n	801e52a <_malloc_r+0x4a>
 801e5bc:	461a      	mov	r2, r3
 801e5be:	685b      	ldr	r3, [r3, #4]
 801e5c0:	42a3      	cmp	r3, r4
 801e5c2:	d1fb      	bne.n	801e5bc <_malloc_r+0xdc>
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	6053      	str	r3, [r2, #4]
 801e5c8:	e7de      	b.n	801e588 <_malloc_r+0xa8>
 801e5ca:	230c      	movs	r3, #12
 801e5cc:	6033      	str	r3, [r6, #0]
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	f000 f80c 	bl	801e5ec <__malloc_unlock>
 801e5d4:	e794      	b.n	801e500 <_malloc_r+0x20>
 801e5d6:	6005      	str	r5, [r0, #0]
 801e5d8:	e7d6      	b.n	801e588 <_malloc_r+0xa8>
 801e5da:	bf00      	nop
 801e5dc:	20027cd8 	.word	0x20027cd8

0801e5e0 <__malloc_lock>:
 801e5e0:	4801      	ldr	r0, [pc, #4]	@ (801e5e8 <__malloc_lock+0x8>)
 801e5e2:	f7ff beda 	b.w	801e39a <__retarget_lock_acquire_recursive>
 801e5e6:	bf00      	nop
 801e5e8:	20027cd0 	.word	0x20027cd0

0801e5ec <__malloc_unlock>:
 801e5ec:	4801      	ldr	r0, [pc, #4]	@ (801e5f4 <__malloc_unlock+0x8>)
 801e5ee:	f7ff bed5 	b.w	801e39c <__retarget_lock_release_recursive>
 801e5f2:	bf00      	nop
 801e5f4:	20027cd0 	.word	0x20027cd0

0801e5f8 <__sfputc_r>:
 801e5f8:	6893      	ldr	r3, [r2, #8]
 801e5fa:	3b01      	subs	r3, #1
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	b410      	push	{r4}
 801e600:	6093      	str	r3, [r2, #8]
 801e602:	da08      	bge.n	801e616 <__sfputc_r+0x1e>
 801e604:	6994      	ldr	r4, [r2, #24]
 801e606:	42a3      	cmp	r3, r4
 801e608:	db01      	blt.n	801e60e <__sfputc_r+0x16>
 801e60a:	290a      	cmp	r1, #10
 801e60c:	d103      	bne.n	801e616 <__sfputc_r+0x1e>
 801e60e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e612:	f7ff bd4c 	b.w	801e0ae <__swbuf_r>
 801e616:	6813      	ldr	r3, [r2, #0]
 801e618:	1c58      	adds	r0, r3, #1
 801e61a:	6010      	str	r0, [r2, #0]
 801e61c:	7019      	strb	r1, [r3, #0]
 801e61e:	4608      	mov	r0, r1
 801e620:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e624:	4770      	bx	lr

0801e626 <__sfputs_r>:
 801e626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e628:	4606      	mov	r6, r0
 801e62a:	460f      	mov	r7, r1
 801e62c:	4614      	mov	r4, r2
 801e62e:	18d5      	adds	r5, r2, r3
 801e630:	42ac      	cmp	r4, r5
 801e632:	d101      	bne.n	801e638 <__sfputs_r+0x12>
 801e634:	2000      	movs	r0, #0
 801e636:	e007      	b.n	801e648 <__sfputs_r+0x22>
 801e638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e63c:	463a      	mov	r2, r7
 801e63e:	4630      	mov	r0, r6
 801e640:	f7ff ffda 	bl	801e5f8 <__sfputc_r>
 801e644:	1c43      	adds	r3, r0, #1
 801e646:	d1f3      	bne.n	801e630 <__sfputs_r+0xa>
 801e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e64c <_vfiprintf_r>:
 801e64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e650:	460d      	mov	r5, r1
 801e652:	b09d      	sub	sp, #116	@ 0x74
 801e654:	4614      	mov	r4, r2
 801e656:	4698      	mov	r8, r3
 801e658:	4606      	mov	r6, r0
 801e65a:	b118      	cbz	r0, 801e664 <_vfiprintf_r+0x18>
 801e65c:	6a03      	ldr	r3, [r0, #32]
 801e65e:	b90b      	cbnz	r3, 801e664 <_vfiprintf_r+0x18>
 801e660:	f7ff fc3c 	bl	801dedc <__sinit>
 801e664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e666:	07d9      	lsls	r1, r3, #31
 801e668:	d405      	bmi.n	801e676 <_vfiprintf_r+0x2a>
 801e66a:	89ab      	ldrh	r3, [r5, #12]
 801e66c:	059a      	lsls	r2, r3, #22
 801e66e:	d402      	bmi.n	801e676 <_vfiprintf_r+0x2a>
 801e670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e672:	f7ff fe92 	bl	801e39a <__retarget_lock_acquire_recursive>
 801e676:	89ab      	ldrh	r3, [r5, #12]
 801e678:	071b      	lsls	r3, r3, #28
 801e67a:	d501      	bpl.n	801e680 <_vfiprintf_r+0x34>
 801e67c:	692b      	ldr	r3, [r5, #16]
 801e67e:	b99b      	cbnz	r3, 801e6a8 <_vfiprintf_r+0x5c>
 801e680:	4629      	mov	r1, r5
 801e682:	4630      	mov	r0, r6
 801e684:	f7ff fd52 	bl	801e12c <__swsetup_r>
 801e688:	b170      	cbz	r0, 801e6a8 <_vfiprintf_r+0x5c>
 801e68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e68c:	07dc      	lsls	r4, r3, #31
 801e68e:	d504      	bpl.n	801e69a <_vfiprintf_r+0x4e>
 801e690:	f04f 30ff 	mov.w	r0, #4294967295
 801e694:	b01d      	add	sp, #116	@ 0x74
 801e696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e69a:	89ab      	ldrh	r3, [r5, #12]
 801e69c:	0598      	lsls	r0, r3, #22
 801e69e:	d4f7      	bmi.n	801e690 <_vfiprintf_r+0x44>
 801e6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e6a2:	f7ff fe7b 	bl	801e39c <__retarget_lock_release_recursive>
 801e6a6:	e7f3      	b.n	801e690 <_vfiprintf_r+0x44>
 801e6a8:	2300      	movs	r3, #0
 801e6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801e6ac:	2320      	movs	r3, #32
 801e6ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e6b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e6b6:	2330      	movs	r3, #48	@ 0x30
 801e6b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e868 <_vfiprintf_r+0x21c>
 801e6bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e6c0:	f04f 0901 	mov.w	r9, #1
 801e6c4:	4623      	mov	r3, r4
 801e6c6:	469a      	mov	sl, r3
 801e6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6cc:	b10a      	cbz	r2, 801e6d2 <_vfiprintf_r+0x86>
 801e6ce:	2a25      	cmp	r2, #37	@ 0x25
 801e6d0:	d1f9      	bne.n	801e6c6 <_vfiprintf_r+0x7a>
 801e6d2:	ebba 0b04 	subs.w	fp, sl, r4
 801e6d6:	d00b      	beq.n	801e6f0 <_vfiprintf_r+0xa4>
 801e6d8:	465b      	mov	r3, fp
 801e6da:	4622      	mov	r2, r4
 801e6dc:	4629      	mov	r1, r5
 801e6de:	4630      	mov	r0, r6
 801e6e0:	f7ff ffa1 	bl	801e626 <__sfputs_r>
 801e6e4:	3001      	adds	r0, #1
 801e6e6:	f000 80a7 	beq.w	801e838 <_vfiprintf_r+0x1ec>
 801e6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e6ec:	445a      	add	r2, fp
 801e6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 801e6f0:	f89a 3000 	ldrb.w	r3, [sl]
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	f000 809f 	beq.w	801e838 <_vfiprintf_r+0x1ec>
 801e6fa:	2300      	movs	r3, #0
 801e6fc:	f04f 32ff 	mov.w	r2, #4294967295
 801e700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e704:	f10a 0a01 	add.w	sl, sl, #1
 801e708:	9304      	str	r3, [sp, #16]
 801e70a:	9307      	str	r3, [sp, #28]
 801e70c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e710:	931a      	str	r3, [sp, #104]	@ 0x68
 801e712:	4654      	mov	r4, sl
 801e714:	2205      	movs	r2, #5
 801e716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e71a:	4853      	ldr	r0, [pc, #332]	@ (801e868 <_vfiprintf_r+0x21c>)
 801e71c:	f7e1 fd78 	bl	8000210 <memchr>
 801e720:	9a04      	ldr	r2, [sp, #16]
 801e722:	b9d8      	cbnz	r0, 801e75c <_vfiprintf_r+0x110>
 801e724:	06d1      	lsls	r1, r2, #27
 801e726:	bf44      	itt	mi
 801e728:	2320      	movmi	r3, #32
 801e72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e72e:	0713      	lsls	r3, r2, #28
 801e730:	bf44      	itt	mi
 801e732:	232b      	movmi	r3, #43	@ 0x2b
 801e734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e738:	f89a 3000 	ldrb.w	r3, [sl]
 801e73c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e73e:	d015      	beq.n	801e76c <_vfiprintf_r+0x120>
 801e740:	9a07      	ldr	r2, [sp, #28]
 801e742:	4654      	mov	r4, sl
 801e744:	2000      	movs	r0, #0
 801e746:	f04f 0c0a 	mov.w	ip, #10
 801e74a:	4621      	mov	r1, r4
 801e74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e750:	3b30      	subs	r3, #48	@ 0x30
 801e752:	2b09      	cmp	r3, #9
 801e754:	d94b      	bls.n	801e7ee <_vfiprintf_r+0x1a2>
 801e756:	b1b0      	cbz	r0, 801e786 <_vfiprintf_r+0x13a>
 801e758:	9207      	str	r2, [sp, #28]
 801e75a:	e014      	b.n	801e786 <_vfiprintf_r+0x13a>
 801e75c:	eba0 0308 	sub.w	r3, r0, r8
 801e760:	fa09 f303 	lsl.w	r3, r9, r3
 801e764:	4313      	orrs	r3, r2
 801e766:	9304      	str	r3, [sp, #16]
 801e768:	46a2      	mov	sl, r4
 801e76a:	e7d2      	b.n	801e712 <_vfiprintf_r+0xc6>
 801e76c:	9b03      	ldr	r3, [sp, #12]
 801e76e:	1d19      	adds	r1, r3, #4
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	9103      	str	r1, [sp, #12]
 801e774:	2b00      	cmp	r3, #0
 801e776:	bfbb      	ittet	lt
 801e778:	425b      	neglt	r3, r3
 801e77a:	f042 0202 	orrlt.w	r2, r2, #2
 801e77e:	9307      	strge	r3, [sp, #28]
 801e780:	9307      	strlt	r3, [sp, #28]
 801e782:	bfb8      	it	lt
 801e784:	9204      	strlt	r2, [sp, #16]
 801e786:	7823      	ldrb	r3, [r4, #0]
 801e788:	2b2e      	cmp	r3, #46	@ 0x2e
 801e78a:	d10a      	bne.n	801e7a2 <_vfiprintf_r+0x156>
 801e78c:	7863      	ldrb	r3, [r4, #1]
 801e78e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e790:	d132      	bne.n	801e7f8 <_vfiprintf_r+0x1ac>
 801e792:	9b03      	ldr	r3, [sp, #12]
 801e794:	1d1a      	adds	r2, r3, #4
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	9203      	str	r2, [sp, #12]
 801e79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e79e:	3402      	adds	r4, #2
 801e7a0:	9305      	str	r3, [sp, #20]
 801e7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e878 <_vfiprintf_r+0x22c>
 801e7a6:	7821      	ldrb	r1, [r4, #0]
 801e7a8:	2203      	movs	r2, #3
 801e7aa:	4650      	mov	r0, sl
 801e7ac:	f7e1 fd30 	bl	8000210 <memchr>
 801e7b0:	b138      	cbz	r0, 801e7c2 <_vfiprintf_r+0x176>
 801e7b2:	9b04      	ldr	r3, [sp, #16]
 801e7b4:	eba0 000a 	sub.w	r0, r0, sl
 801e7b8:	2240      	movs	r2, #64	@ 0x40
 801e7ba:	4082      	lsls	r2, r0
 801e7bc:	4313      	orrs	r3, r2
 801e7be:	3401      	adds	r4, #1
 801e7c0:	9304      	str	r3, [sp, #16]
 801e7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7c6:	4829      	ldr	r0, [pc, #164]	@ (801e86c <_vfiprintf_r+0x220>)
 801e7c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e7cc:	2206      	movs	r2, #6
 801e7ce:	f7e1 fd1f 	bl	8000210 <memchr>
 801e7d2:	2800      	cmp	r0, #0
 801e7d4:	d03f      	beq.n	801e856 <_vfiprintf_r+0x20a>
 801e7d6:	4b26      	ldr	r3, [pc, #152]	@ (801e870 <_vfiprintf_r+0x224>)
 801e7d8:	bb1b      	cbnz	r3, 801e822 <_vfiprintf_r+0x1d6>
 801e7da:	9b03      	ldr	r3, [sp, #12]
 801e7dc:	3307      	adds	r3, #7
 801e7de:	f023 0307 	bic.w	r3, r3, #7
 801e7e2:	3308      	adds	r3, #8
 801e7e4:	9303      	str	r3, [sp, #12]
 801e7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7e8:	443b      	add	r3, r7
 801e7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801e7ec:	e76a      	b.n	801e6c4 <_vfiprintf_r+0x78>
 801e7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7f2:	460c      	mov	r4, r1
 801e7f4:	2001      	movs	r0, #1
 801e7f6:	e7a8      	b.n	801e74a <_vfiprintf_r+0xfe>
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	3401      	adds	r4, #1
 801e7fc:	9305      	str	r3, [sp, #20]
 801e7fe:	4619      	mov	r1, r3
 801e800:	f04f 0c0a 	mov.w	ip, #10
 801e804:	4620      	mov	r0, r4
 801e806:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e80a:	3a30      	subs	r2, #48	@ 0x30
 801e80c:	2a09      	cmp	r2, #9
 801e80e:	d903      	bls.n	801e818 <_vfiprintf_r+0x1cc>
 801e810:	2b00      	cmp	r3, #0
 801e812:	d0c6      	beq.n	801e7a2 <_vfiprintf_r+0x156>
 801e814:	9105      	str	r1, [sp, #20]
 801e816:	e7c4      	b.n	801e7a2 <_vfiprintf_r+0x156>
 801e818:	fb0c 2101 	mla	r1, ip, r1, r2
 801e81c:	4604      	mov	r4, r0
 801e81e:	2301      	movs	r3, #1
 801e820:	e7f0      	b.n	801e804 <_vfiprintf_r+0x1b8>
 801e822:	ab03      	add	r3, sp, #12
 801e824:	9300      	str	r3, [sp, #0]
 801e826:	462a      	mov	r2, r5
 801e828:	4b12      	ldr	r3, [pc, #72]	@ (801e874 <_vfiprintf_r+0x228>)
 801e82a:	a904      	add	r1, sp, #16
 801e82c:	4630      	mov	r0, r6
 801e82e:	f3af 8000 	nop.w
 801e832:	4607      	mov	r7, r0
 801e834:	1c78      	adds	r0, r7, #1
 801e836:	d1d6      	bne.n	801e7e6 <_vfiprintf_r+0x19a>
 801e838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e83a:	07d9      	lsls	r1, r3, #31
 801e83c:	d405      	bmi.n	801e84a <_vfiprintf_r+0x1fe>
 801e83e:	89ab      	ldrh	r3, [r5, #12]
 801e840:	059a      	lsls	r2, r3, #22
 801e842:	d402      	bmi.n	801e84a <_vfiprintf_r+0x1fe>
 801e844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e846:	f7ff fda9 	bl	801e39c <__retarget_lock_release_recursive>
 801e84a:	89ab      	ldrh	r3, [r5, #12]
 801e84c:	065b      	lsls	r3, r3, #25
 801e84e:	f53f af1f 	bmi.w	801e690 <_vfiprintf_r+0x44>
 801e852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e854:	e71e      	b.n	801e694 <_vfiprintf_r+0x48>
 801e856:	ab03      	add	r3, sp, #12
 801e858:	9300      	str	r3, [sp, #0]
 801e85a:	462a      	mov	r2, r5
 801e85c:	4b05      	ldr	r3, [pc, #20]	@ (801e874 <_vfiprintf_r+0x228>)
 801e85e:	a904      	add	r1, sp, #16
 801e860:	4630      	mov	r0, r6
 801e862:	f000 f879 	bl	801e958 <_printf_i>
 801e866:	e7e4      	b.n	801e832 <_vfiprintf_r+0x1e6>
 801e868:	0802237d 	.word	0x0802237d
 801e86c:	08022387 	.word	0x08022387
 801e870:	00000000 	.word	0x00000000
 801e874:	0801e627 	.word	0x0801e627
 801e878:	08022383 	.word	0x08022383

0801e87c <_printf_common>:
 801e87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e880:	4616      	mov	r6, r2
 801e882:	4698      	mov	r8, r3
 801e884:	688a      	ldr	r2, [r1, #8]
 801e886:	690b      	ldr	r3, [r1, #16]
 801e888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e88c:	4293      	cmp	r3, r2
 801e88e:	bfb8      	it	lt
 801e890:	4613      	movlt	r3, r2
 801e892:	6033      	str	r3, [r6, #0]
 801e894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e898:	4607      	mov	r7, r0
 801e89a:	460c      	mov	r4, r1
 801e89c:	b10a      	cbz	r2, 801e8a2 <_printf_common+0x26>
 801e89e:	3301      	adds	r3, #1
 801e8a0:	6033      	str	r3, [r6, #0]
 801e8a2:	6823      	ldr	r3, [r4, #0]
 801e8a4:	0699      	lsls	r1, r3, #26
 801e8a6:	bf42      	ittt	mi
 801e8a8:	6833      	ldrmi	r3, [r6, #0]
 801e8aa:	3302      	addmi	r3, #2
 801e8ac:	6033      	strmi	r3, [r6, #0]
 801e8ae:	6825      	ldr	r5, [r4, #0]
 801e8b0:	f015 0506 	ands.w	r5, r5, #6
 801e8b4:	d106      	bne.n	801e8c4 <_printf_common+0x48>
 801e8b6:	f104 0a19 	add.w	sl, r4, #25
 801e8ba:	68e3      	ldr	r3, [r4, #12]
 801e8bc:	6832      	ldr	r2, [r6, #0]
 801e8be:	1a9b      	subs	r3, r3, r2
 801e8c0:	42ab      	cmp	r3, r5
 801e8c2:	dc26      	bgt.n	801e912 <_printf_common+0x96>
 801e8c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e8c8:	6822      	ldr	r2, [r4, #0]
 801e8ca:	3b00      	subs	r3, #0
 801e8cc:	bf18      	it	ne
 801e8ce:	2301      	movne	r3, #1
 801e8d0:	0692      	lsls	r2, r2, #26
 801e8d2:	d42b      	bmi.n	801e92c <_printf_common+0xb0>
 801e8d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e8d8:	4641      	mov	r1, r8
 801e8da:	4638      	mov	r0, r7
 801e8dc:	47c8      	blx	r9
 801e8de:	3001      	adds	r0, #1
 801e8e0:	d01e      	beq.n	801e920 <_printf_common+0xa4>
 801e8e2:	6823      	ldr	r3, [r4, #0]
 801e8e4:	6922      	ldr	r2, [r4, #16]
 801e8e6:	f003 0306 	and.w	r3, r3, #6
 801e8ea:	2b04      	cmp	r3, #4
 801e8ec:	bf02      	ittt	eq
 801e8ee:	68e5      	ldreq	r5, [r4, #12]
 801e8f0:	6833      	ldreq	r3, [r6, #0]
 801e8f2:	1aed      	subeq	r5, r5, r3
 801e8f4:	68a3      	ldr	r3, [r4, #8]
 801e8f6:	bf0c      	ite	eq
 801e8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e8fc:	2500      	movne	r5, #0
 801e8fe:	4293      	cmp	r3, r2
 801e900:	bfc4      	itt	gt
 801e902:	1a9b      	subgt	r3, r3, r2
 801e904:	18ed      	addgt	r5, r5, r3
 801e906:	2600      	movs	r6, #0
 801e908:	341a      	adds	r4, #26
 801e90a:	42b5      	cmp	r5, r6
 801e90c:	d11a      	bne.n	801e944 <_printf_common+0xc8>
 801e90e:	2000      	movs	r0, #0
 801e910:	e008      	b.n	801e924 <_printf_common+0xa8>
 801e912:	2301      	movs	r3, #1
 801e914:	4652      	mov	r2, sl
 801e916:	4641      	mov	r1, r8
 801e918:	4638      	mov	r0, r7
 801e91a:	47c8      	blx	r9
 801e91c:	3001      	adds	r0, #1
 801e91e:	d103      	bne.n	801e928 <_printf_common+0xac>
 801e920:	f04f 30ff 	mov.w	r0, #4294967295
 801e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e928:	3501      	adds	r5, #1
 801e92a:	e7c6      	b.n	801e8ba <_printf_common+0x3e>
 801e92c:	18e1      	adds	r1, r4, r3
 801e92e:	1c5a      	adds	r2, r3, #1
 801e930:	2030      	movs	r0, #48	@ 0x30
 801e932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e936:	4422      	add	r2, r4
 801e938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e93c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e940:	3302      	adds	r3, #2
 801e942:	e7c7      	b.n	801e8d4 <_printf_common+0x58>
 801e944:	2301      	movs	r3, #1
 801e946:	4622      	mov	r2, r4
 801e948:	4641      	mov	r1, r8
 801e94a:	4638      	mov	r0, r7
 801e94c:	47c8      	blx	r9
 801e94e:	3001      	adds	r0, #1
 801e950:	d0e6      	beq.n	801e920 <_printf_common+0xa4>
 801e952:	3601      	adds	r6, #1
 801e954:	e7d9      	b.n	801e90a <_printf_common+0x8e>
	...

0801e958 <_printf_i>:
 801e958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e95c:	7e0f      	ldrb	r7, [r1, #24]
 801e95e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e960:	2f78      	cmp	r7, #120	@ 0x78
 801e962:	4691      	mov	r9, r2
 801e964:	4680      	mov	r8, r0
 801e966:	460c      	mov	r4, r1
 801e968:	469a      	mov	sl, r3
 801e96a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e96e:	d807      	bhi.n	801e980 <_printf_i+0x28>
 801e970:	2f62      	cmp	r7, #98	@ 0x62
 801e972:	d80a      	bhi.n	801e98a <_printf_i+0x32>
 801e974:	2f00      	cmp	r7, #0
 801e976:	f000 80d1 	beq.w	801eb1c <_printf_i+0x1c4>
 801e97a:	2f58      	cmp	r7, #88	@ 0x58
 801e97c:	f000 80b8 	beq.w	801eaf0 <_printf_i+0x198>
 801e980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e988:	e03a      	b.n	801ea00 <_printf_i+0xa8>
 801e98a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e98e:	2b15      	cmp	r3, #21
 801e990:	d8f6      	bhi.n	801e980 <_printf_i+0x28>
 801e992:	a101      	add	r1, pc, #4	@ (adr r1, 801e998 <_printf_i+0x40>)
 801e994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e998:	0801e9f1 	.word	0x0801e9f1
 801e99c:	0801ea05 	.word	0x0801ea05
 801e9a0:	0801e981 	.word	0x0801e981
 801e9a4:	0801e981 	.word	0x0801e981
 801e9a8:	0801e981 	.word	0x0801e981
 801e9ac:	0801e981 	.word	0x0801e981
 801e9b0:	0801ea05 	.word	0x0801ea05
 801e9b4:	0801e981 	.word	0x0801e981
 801e9b8:	0801e981 	.word	0x0801e981
 801e9bc:	0801e981 	.word	0x0801e981
 801e9c0:	0801e981 	.word	0x0801e981
 801e9c4:	0801eb03 	.word	0x0801eb03
 801e9c8:	0801ea2f 	.word	0x0801ea2f
 801e9cc:	0801eabd 	.word	0x0801eabd
 801e9d0:	0801e981 	.word	0x0801e981
 801e9d4:	0801e981 	.word	0x0801e981
 801e9d8:	0801eb25 	.word	0x0801eb25
 801e9dc:	0801e981 	.word	0x0801e981
 801e9e0:	0801ea2f 	.word	0x0801ea2f
 801e9e4:	0801e981 	.word	0x0801e981
 801e9e8:	0801e981 	.word	0x0801e981
 801e9ec:	0801eac5 	.word	0x0801eac5
 801e9f0:	6833      	ldr	r3, [r6, #0]
 801e9f2:	1d1a      	adds	r2, r3, #4
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	6032      	str	r2, [r6, #0]
 801e9f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e9fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ea00:	2301      	movs	r3, #1
 801ea02:	e09c      	b.n	801eb3e <_printf_i+0x1e6>
 801ea04:	6833      	ldr	r3, [r6, #0]
 801ea06:	6820      	ldr	r0, [r4, #0]
 801ea08:	1d19      	adds	r1, r3, #4
 801ea0a:	6031      	str	r1, [r6, #0]
 801ea0c:	0606      	lsls	r6, r0, #24
 801ea0e:	d501      	bpl.n	801ea14 <_printf_i+0xbc>
 801ea10:	681d      	ldr	r5, [r3, #0]
 801ea12:	e003      	b.n	801ea1c <_printf_i+0xc4>
 801ea14:	0645      	lsls	r5, r0, #25
 801ea16:	d5fb      	bpl.n	801ea10 <_printf_i+0xb8>
 801ea18:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ea1c:	2d00      	cmp	r5, #0
 801ea1e:	da03      	bge.n	801ea28 <_printf_i+0xd0>
 801ea20:	232d      	movs	r3, #45	@ 0x2d
 801ea22:	426d      	negs	r5, r5
 801ea24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ea28:	4858      	ldr	r0, [pc, #352]	@ (801eb8c <_printf_i+0x234>)
 801ea2a:	230a      	movs	r3, #10
 801ea2c:	e011      	b.n	801ea52 <_printf_i+0xfa>
 801ea2e:	6821      	ldr	r1, [r4, #0]
 801ea30:	6833      	ldr	r3, [r6, #0]
 801ea32:	0608      	lsls	r0, r1, #24
 801ea34:	f853 5b04 	ldr.w	r5, [r3], #4
 801ea38:	d402      	bmi.n	801ea40 <_printf_i+0xe8>
 801ea3a:	0649      	lsls	r1, r1, #25
 801ea3c:	bf48      	it	mi
 801ea3e:	b2ad      	uxthmi	r5, r5
 801ea40:	2f6f      	cmp	r7, #111	@ 0x6f
 801ea42:	4852      	ldr	r0, [pc, #328]	@ (801eb8c <_printf_i+0x234>)
 801ea44:	6033      	str	r3, [r6, #0]
 801ea46:	bf14      	ite	ne
 801ea48:	230a      	movne	r3, #10
 801ea4a:	2308      	moveq	r3, #8
 801ea4c:	2100      	movs	r1, #0
 801ea4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ea52:	6866      	ldr	r6, [r4, #4]
 801ea54:	60a6      	str	r6, [r4, #8]
 801ea56:	2e00      	cmp	r6, #0
 801ea58:	db05      	blt.n	801ea66 <_printf_i+0x10e>
 801ea5a:	6821      	ldr	r1, [r4, #0]
 801ea5c:	432e      	orrs	r6, r5
 801ea5e:	f021 0104 	bic.w	r1, r1, #4
 801ea62:	6021      	str	r1, [r4, #0]
 801ea64:	d04b      	beq.n	801eafe <_printf_i+0x1a6>
 801ea66:	4616      	mov	r6, r2
 801ea68:	fbb5 f1f3 	udiv	r1, r5, r3
 801ea6c:	fb03 5711 	mls	r7, r3, r1, r5
 801ea70:	5dc7      	ldrb	r7, [r0, r7]
 801ea72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ea76:	462f      	mov	r7, r5
 801ea78:	42bb      	cmp	r3, r7
 801ea7a:	460d      	mov	r5, r1
 801ea7c:	d9f4      	bls.n	801ea68 <_printf_i+0x110>
 801ea7e:	2b08      	cmp	r3, #8
 801ea80:	d10b      	bne.n	801ea9a <_printf_i+0x142>
 801ea82:	6823      	ldr	r3, [r4, #0]
 801ea84:	07df      	lsls	r7, r3, #31
 801ea86:	d508      	bpl.n	801ea9a <_printf_i+0x142>
 801ea88:	6923      	ldr	r3, [r4, #16]
 801ea8a:	6861      	ldr	r1, [r4, #4]
 801ea8c:	4299      	cmp	r1, r3
 801ea8e:	bfde      	ittt	le
 801ea90:	2330      	movle	r3, #48	@ 0x30
 801ea92:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ea96:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ea9a:	1b92      	subs	r2, r2, r6
 801ea9c:	6122      	str	r2, [r4, #16]
 801ea9e:	f8cd a000 	str.w	sl, [sp]
 801eaa2:	464b      	mov	r3, r9
 801eaa4:	aa03      	add	r2, sp, #12
 801eaa6:	4621      	mov	r1, r4
 801eaa8:	4640      	mov	r0, r8
 801eaaa:	f7ff fee7 	bl	801e87c <_printf_common>
 801eaae:	3001      	adds	r0, #1
 801eab0:	d14a      	bne.n	801eb48 <_printf_i+0x1f0>
 801eab2:	f04f 30ff 	mov.w	r0, #4294967295
 801eab6:	b004      	add	sp, #16
 801eab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eabc:	6823      	ldr	r3, [r4, #0]
 801eabe:	f043 0320 	orr.w	r3, r3, #32
 801eac2:	6023      	str	r3, [r4, #0]
 801eac4:	4832      	ldr	r0, [pc, #200]	@ (801eb90 <_printf_i+0x238>)
 801eac6:	2778      	movs	r7, #120	@ 0x78
 801eac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801eacc:	6823      	ldr	r3, [r4, #0]
 801eace:	6831      	ldr	r1, [r6, #0]
 801ead0:	061f      	lsls	r7, r3, #24
 801ead2:	f851 5b04 	ldr.w	r5, [r1], #4
 801ead6:	d402      	bmi.n	801eade <_printf_i+0x186>
 801ead8:	065f      	lsls	r7, r3, #25
 801eada:	bf48      	it	mi
 801eadc:	b2ad      	uxthmi	r5, r5
 801eade:	6031      	str	r1, [r6, #0]
 801eae0:	07d9      	lsls	r1, r3, #31
 801eae2:	bf44      	itt	mi
 801eae4:	f043 0320 	orrmi.w	r3, r3, #32
 801eae8:	6023      	strmi	r3, [r4, #0]
 801eaea:	b11d      	cbz	r5, 801eaf4 <_printf_i+0x19c>
 801eaec:	2310      	movs	r3, #16
 801eaee:	e7ad      	b.n	801ea4c <_printf_i+0xf4>
 801eaf0:	4826      	ldr	r0, [pc, #152]	@ (801eb8c <_printf_i+0x234>)
 801eaf2:	e7e9      	b.n	801eac8 <_printf_i+0x170>
 801eaf4:	6823      	ldr	r3, [r4, #0]
 801eaf6:	f023 0320 	bic.w	r3, r3, #32
 801eafa:	6023      	str	r3, [r4, #0]
 801eafc:	e7f6      	b.n	801eaec <_printf_i+0x194>
 801eafe:	4616      	mov	r6, r2
 801eb00:	e7bd      	b.n	801ea7e <_printf_i+0x126>
 801eb02:	6833      	ldr	r3, [r6, #0]
 801eb04:	6825      	ldr	r5, [r4, #0]
 801eb06:	6961      	ldr	r1, [r4, #20]
 801eb08:	1d18      	adds	r0, r3, #4
 801eb0a:	6030      	str	r0, [r6, #0]
 801eb0c:	062e      	lsls	r6, r5, #24
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	d501      	bpl.n	801eb16 <_printf_i+0x1be>
 801eb12:	6019      	str	r1, [r3, #0]
 801eb14:	e002      	b.n	801eb1c <_printf_i+0x1c4>
 801eb16:	0668      	lsls	r0, r5, #25
 801eb18:	d5fb      	bpl.n	801eb12 <_printf_i+0x1ba>
 801eb1a:	8019      	strh	r1, [r3, #0]
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	6123      	str	r3, [r4, #16]
 801eb20:	4616      	mov	r6, r2
 801eb22:	e7bc      	b.n	801ea9e <_printf_i+0x146>
 801eb24:	6833      	ldr	r3, [r6, #0]
 801eb26:	1d1a      	adds	r2, r3, #4
 801eb28:	6032      	str	r2, [r6, #0]
 801eb2a:	681e      	ldr	r6, [r3, #0]
 801eb2c:	6862      	ldr	r2, [r4, #4]
 801eb2e:	2100      	movs	r1, #0
 801eb30:	4630      	mov	r0, r6
 801eb32:	f7e1 fb6d 	bl	8000210 <memchr>
 801eb36:	b108      	cbz	r0, 801eb3c <_printf_i+0x1e4>
 801eb38:	1b80      	subs	r0, r0, r6
 801eb3a:	6060      	str	r0, [r4, #4]
 801eb3c:	6863      	ldr	r3, [r4, #4]
 801eb3e:	6123      	str	r3, [r4, #16]
 801eb40:	2300      	movs	r3, #0
 801eb42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eb46:	e7aa      	b.n	801ea9e <_printf_i+0x146>
 801eb48:	6923      	ldr	r3, [r4, #16]
 801eb4a:	4632      	mov	r2, r6
 801eb4c:	4649      	mov	r1, r9
 801eb4e:	4640      	mov	r0, r8
 801eb50:	47d0      	blx	sl
 801eb52:	3001      	adds	r0, #1
 801eb54:	d0ad      	beq.n	801eab2 <_printf_i+0x15a>
 801eb56:	6823      	ldr	r3, [r4, #0]
 801eb58:	079b      	lsls	r3, r3, #30
 801eb5a:	d413      	bmi.n	801eb84 <_printf_i+0x22c>
 801eb5c:	68e0      	ldr	r0, [r4, #12]
 801eb5e:	9b03      	ldr	r3, [sp, #12]
 801eb60:	4298      	cmp	r0, r3
 801eb62:	bfb8      	it	lt
 801eb64:	4618      	movlt	r0, r3
 801eb66:	e7a6      	b.n	801eab6 <_printf_i+0x15e>
 801eb68:	2301      	movs	r3, #1
 801eb6a:	4632      	mov	r2, r6
 801eb6c:	4649      	mov	r1, r9
 801eb6e:	4640      	mov	r0, r8
 801eb70:	47d0      	blx	sl
 801eb72:	3001      	adds	r0, #1
 801eb74:	d09d      	beq.n	801eab2 <_printf_i+0x15a>
 801eb76:	3501      	adds	r5, #1
 801eb78:	68e3      	ldr	r3, [r4, #12]
 801eb7a:	9903      	ldr	r1, [sp, #12]
 801eb7c:	1a5b      	subs	r3, r3, r1
 801eb7e:	42ab      	cmp	r3, r5
 801eb80:	dcf2      	bgt.n	801eb68 <_printf_i+0x210>
 801eb82:	e7eb      	b.n	801eb5c <_printf_i+0x204>
 801eb84:	2500      	movs	r5, #0
 801eb86:	f104 0619 	add.w	r6, r4, #25
 801eb8a:	e7f5      	b.n	801eb78 <_printf_i+0x220>
 801eb8c:	0802238e 	.word	0x0802238e
 801eb90:	0802239f 	.word	0x0802239f

0801eb94 <__sflush_r>:
 801eb94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb9c:	0716      	lsls	r6, r2, #28
 801eb9e:	4605      	mov	r5, r0
 801eba0:	460c      	mov	r4, r1
 801eba2:	d454      	bmi.n	801ec4e <__sflush_r+0xba>
 801eba4:	684b      	ldr	r3, [r1, #4]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	dc02      	bgt.n	801ebb0 <__sflush_r+0x1c>
 801ebaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	dd48      	ble.n	801ec42 <__sflush_r+0xae>
 801ebb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ebb2:	2e00      	cmp	r6, #0
 801ebb4:	d045      	beq.n	801ec42 <__sflush_r+0xae>
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ebbc:	682f      	ldr	r7, [r5, #0]
 801ebbe:	6a21      	ldr	r1, [r4, #32]
 801ebc0:	602b      	str	r3, [r5, #0]
 801ebc2:	d030      	beq.n	801ec26 <__sflush_r+0x92>
 801ebc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ebc6:	89a3      	ldrh	r3, [r4, #12]
 801ebc8:	0759      	lsls	r1, r3, #29
 801ebca:	d505      	bpl.n	801ebd8 <__sflush_r+0x44>
 801ebcc:	6863      	ldr	r3, [r4, #4]
 801ebce:	1ad2      	subs	r2, r2, r3
 801ebd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ebd2:	b10b      	cbz	r3, 801ebd8 <__sflush_r+0x44>
 801ebd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ebd6:	1ad2      	subs	r2, r2, r3
 801ebd8:	2300      	movs	r3, #0
 801ebda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ebdc:	6a21      	ldr	r1, [r4, #32]
 801ebde:	4628      	mov	r0, r5
 801ebe0:	47b0      	blx	r6
 801ebe2:	1c43      	adds	r3, r0, #1
 801ebe4:	89a3      	ldrh	r3, [r4, #12]
 801ebe6:	d106      	bne.n	801ebf6 <__sflush_r+0x62>
 801ebe8:	6829      	ldr	r1, [r5, #0]
 801ebea:	291d      	cmp	r1, #29
 801ebec:	d82b      	bhi.n	801ec46 <__sflush_r+0xb2>
 801ebee:	4a2a      	ldr	r2, [pc, #168]	@ (801ec98 <__sflush_r+0x104>)
 801ebf0:	40ca      	lsrs	r2, r1
 801ebf2:	07d6      	lsls	r6, r2, #31
 801ebf4:	d527      	bpl.n	801ec46 <__sflush_r+0xb2>
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	6062      	str	r2, [r4, #4]
 801ebfa:	04d9      	lsls	r1, r3, #19
 801ebfc:	6922      	ldr	r2, [r4, #16]
 801ebfe:	6022      	str	r2, [r4, #0]
 801ec00:	d504      	bpl.n	801ec0c <__sflush_r+0x78>
 801ec02:	1c42      	adds	r2, r0, #1
 801ec04:	d101      	bne.n	801ec0a <__sflush_r+0x76>
 801ec06:	682b      	ldr	r3, [r5, #0]
 801ec08:	b903      	cbnz	r3, 801ec0c <__sflush_r+0x78>
 801ec0a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ec0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec0e:	602f      	str	r7, [r5, #0]
 801ec10:	b1b9      	cbz	r1, 801ec42 <__sflush_r+0xae>
 801ec12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec16:	4299      	cmp	r1, r3
 801ec18:	d002      	beq.n	801ec20 <__sflush_r+0x8c>
 801ec1a:	4628      	mov	r0, r5
 801ec1c:	f7ff fbec 	bl	801e3f8 <_free_r>
 801ec20:	2300      	movs	r3, #0
 801ec22:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec24:	e00d      	b.n	801ec42 <__sflush_r+0xae>
 801ec26:	2301      	movs	r3, #1
 801ec28:	4628      	mov	r0, r5
 801ec2a:	47b0      	blx	r6
 801ec2c:	4602      	mov	r2, r0
 801ec2e:	1c50      	adds	r0, r2, #1
 801ec30:	d1c9      	bne.n	801ebc6 <__sflush_r+0x32>
 801ec32:	682b      	ldr	r3, [r5, #0]
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d0c6      	beq.n	801ebc6 <__sflush_r+0x32>
 801ec38:	2b1d      	cmp	r3, #29
 801ec3a:	d001      	beq.n	801ec40 <__sflush_r+0xac>
 801ec3c:	2b16      	cmp	r3, #22
 801ec3e:	d11e      	bne.n	801ec7e <__sflush_r+0xea>
 801ec40:	602f      	str	r7, [r5, #0]
 801ec42:	2000      	movs	r0, #0
 801ec44:	e022      	b.n	801ec8c <__sflush_r+0xf8>
 801ec46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec4a:	b21b      	sxth	r3, r3
 801ec4c:	e01b      	b.n	801ec86 <__sflush_r+0xf2>
 801ec4e:	690f      	ldr	r7, [r1, #16]
 801ec50:	2f00      	cmp	r7, #0
 801ec52:	d0f6      	beq.n	801ec42 <__sflush_r+0xae>
 801ec54:	0793      	lsls	r3, r2, #30
 801ec56:	680e      	ldr	r6, [r1, #0]
 801ec58:	bf08      	it	eq
 801ec5a:	694b      	ldreq	r3, [r1, #20]
 801ec5c:	600f      	str	r7, [r1, #0]
 801ec5e:	bf18      	it	ne
 801ec60:	2300      	movne	r3, #0
 801ec62:	eba6 0807 	sub.w	r8, r6, r7
 801ec66:	608b      	str	r3, [r1, #8]
 801ec68:	f1b8 0f00 	cmp.w	r8, #0
 801ec6c:	dde9      	ble.n	801ec42 <__sflush_r+0xae>
 801ec6e:	6a21      	ldr	r1, [r4, #32]
 801ec70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ec72:	4643      	mov	r3, r8
 801ec74:	463a      	mov	r2, r7
 801ec76:	4628      	mov	r0, r5
 801ec78:	47b0      	blx	r6
 801ec7a:	2800      	cmp	r0, #0
 801ec7c:	dc08      	bgt.n	801ec90 <__sflush_r+0xfc>
 801ec7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec86:	81a3      	strh	r3, [r4, #12]
 801ec88:	f04f 30ff 	mov.w	r0, #4294967295
 801ec8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec90:	4407      	add	r7, r0
 801ec92:	eba8 0800 	sub.w	r8, r8, r0
 801ec96:	e7e7      	b.n	801ec68 <__sflush_r+0xd4>
 801ec98:	20400001 	.word	0x20400001

0801ec9c <_fflush_r>:
 801ec9c:	b538      	push	{r3, r4, r5, lr}
 801ec9e:	690b      	ldr	r3, [r1, #16]
 801eca0:	4605      	mov	r5, r0
 801eca2:	460c      	mov	r4, r1
 801eca4:	b913      	cbnz	r3, 801ecac <_fflush_r+0x10>
 801eca6:	2500      	movs	r5, #0
 801eca8:	4628      	mov	r0, r5
 801ecaa:	bd38      	pop	{r3, r4, r5, pc}
 801ecac:	b118      	cbz	r0, 801ecb6 <_fflush_r+0x1a>
 801ecae:	6a03      	ldr	r3, [r0, #32]
 801ecb0:	b90b      	cbnz	r3, 801ecb6 <_fflush_r+0x1a>
 801ecb2:	f7ff f913 	bl	801dedc <__sinit>
 801ecb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d0f3      	beq.n	801eca6 <_fflush_r+0xa>
 801ecbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ecc0:	07d0      	lsls	r0, r2, #31
 801ecc2:	d404      	bmi.n	801ecce <_fflush_r+0x32>
 801ecc4:	0599      	lsls	r1, r3, #22
 801ecc6:	d402      	bmi.n	801ecce <_fflush_r+0x32>
 801ecc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecca:	f7ff fb66 	bl	801e39a <__retarget_lock_acquire_recursive>
 801ecce:	4628      	mov	r0, r5
 801ecd0:	4621      	mov	r1, r4
 801ecd2:	f7ff ff5f 	bl	801eb94 <__sflush_r>
 801ecd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ecd8:	07da      	lsls	r2, r3, #31
 801ecda:	4605      	mov	r5, r0
 801ecdc:	d4e4      	bmi.n	801eca8 <_fflush_r+0xc>
 801ecde:	89a3      	ldrh	r3, [r4, #12]
 801ece0:	059b      	lsls	r3, r3, #22
 801ece2:	d4e1      	bmi.n	801eca8 <_fflush_r+0xc>
 801ece4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ece6:	f7ff fb59 	bl	801e39c <__retarget_lock_release_recursive>
 801ecea:	e7dd      	b.n	801eca8 <_fflush_r+0xc>

0801ecec <fiprintf>:
 801ecec:	b40e      	push	{r1, r2, r3}
 801ecee:	b503      	push	{r0, r1, lr}
 801ecf0:	4601      	mov	r1, r0
 801ecf2:	ab03      	add	r3, sp, #12
 801ecf4:	4805      	ldr	r0, [pc, #20]	@ (801ed0c <fiprintf+0x20>)
 801ecf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecfa:	6800      	ldr	r0, [r0, #0]
 801ecfc:	9301      	str	r3, [sp, #4]
 801ecfe:	f7ff fca5 	bl	801e64c <_vfiprintf_r>
 801ed02:	b002      	add	sp, #8
 801ed04:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed08:	b003      	add	sp, #12
 801ed0a:	4770      	bx	lr
 801ed0c:	2000003c 	.word	0x2000003c

0801ed10 <__swhatbuf_r>:
 801ed10:	b570      	push	{r4, r5, r6, lr}
 801ed12:	460c      	mov	r4, r1
 801ed14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed18:	2900      	cmp	r1, #0
 801ed1a:	b096      	sub	sp, #88	@ 0x58
 801ed1c:	4615      	mov	r5, r2
 801ed1e:	461e      	mov	r6, r3
 801ed20:	da0d      	bge.n	801ed3e <__swhatbuf_r+0x2e>
 801ed22:	89a3      	ldrh	r3, [r4, #12]
 801ed24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ed28:	f04f 0100 	mov.w	r1, #0
 801ed2c:	bf14      	ite	ne
 801ed2e:	2340      	movne	r3, #64	@ 0x40
 801ed30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ed34:	2000      	movs	r0, #0
 801ed36:	6031      	str	r1, [r6, #0]
 801ed38:	602b      	str	r3, [r5, #0]
 801ed3a:	b016      	add	sp, #88	@ 0x58
 801ed3c:	bd70      	pop	{r4, r5, r6, pc}
 801ed3e:	466a      	mov	r2, sp
 801ed40:	f000 f848 	bl	801edd4 <_fstat_r>
 801ed44:	2800      	cmp	r0, #0
 801ed46:	dbec      	blt.n	801ed22 <__swhatbuf_r+0x12>
 801ed48:	9901      	ldr	r1, [sp, #4]
 801ed4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ed4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ed52:	4259      	negs	r1, r3
 801ed54:	4159      	adcs	r1, r3
 801ed56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ed5a:	e7eb      	b.n	801ed34 <__swhatbuf_r+0x24>

0801ed5c <__smakebuf_r>:
 801ed5c:	898b      	ldrh	r3, [r1, #12]
 801ed5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed60:	079d      	lsls	r5, r3, #30
 801ed62:	4606      	mov	r6, r0
 801ed64:	460c      	mov	r4, r1
 801ed66:	d507      	bpl.n	801ed78 <__smakebuf_r+0x1c>
 801ed68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ed6c:	6023      	str	r3, [r4, #0]
 801ed6e:	6123      	str	r3, [r4, #16]
 801ed70:	2301      	movs	r3, #1
 801ed72:	6163      	str	r3, [r4, #20]
 801ed74:	b003      	add	sp, #12
 801ed76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed78:	ab01      	add	r3, sp, #4
 801ed7a:	466a      	mov	r2, sp
 801ed7c:	f7ff ffc8 	bl	801ed10 <__swhatbuf_r>
 801ed80:	9f00      	ldr	r7, [sp, #0]
 801ed82:	4605      	mov	r5, r0
 801ed84:	4639      	mov	r1, r7
 801ed86:	4630      	mov	r0, r6
 801ed88:	f7ff fbaa 	bl	801e4e0 <_malloc_r>
 801ed8c:	b948      	cbnz	r0, 801eda2 <__smakebuf_r+0x46>
 801ed8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed92:	059a      	lsls	r2, r3, #22
 801ed94:	d4ee      	bmi.n	801ed74 <__smakebuf_r+0x18>
 801ed96:	f023 0303 	bic.w	r3, r3, #3
 801ed9a:	f043 0302 	orr.w	r3, r3, #2
 801ed9e:	81a3      	strh	r3, [r4, #12]
 801eda0:	e7e2      	b.n	801ed68 <__smakebuf_r+0xc>
 801eda2:	89a3      	ldrh	r3, [r4, #12]
 801eda4:	6020      	str	r0, [r4, #0]
 801eda6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801edaa:	81a3      	strh	r3, [r4, #12]
 801edac:	9b01      	ldr	r3, [sp, #4]
 801edae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801edb2:	b15b      	cbz	r3, 801edcc <__smakebuf_r+0x70>
 801edb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801edb8:	4630      	mov	r0, r6
 801edba:	f000 f81d 	bl	801edf8 <_isatty_r>
 801edbe:	b128      	cbz	r0, 801edcc <__smakebuf_r+0x70>
 801edc0:	89a3      	ldrh	r3, [r4, #12]
 801edc2:	f023 0303 	bic.w	r3, r3, #3
 801edc6:	f043 0301 	orr.w	r3, r3, #1
 801edca:	81a3      	strh	r3, [r4, #12]
 801edcc:	89a3      	ldrh	r3, [r4, #12]
 801edce:	431d      	orrs	r5, r3
 801edd0:	81a5      	strh	r5, [r4, #12]
 801edd2:	e7cf      	b.n	801ed74 <__smakebuf_r+0x18>

0801edd4 <_fstat_r>:
 801edd4:	b538      	push	{r3, r4, r5, lr}
 801edd6:	4d07      	ldr	r5, [pc, #28]	@ (801edf4 <_fstat_r+0x20>)
 801edd8:	2300      	movs	r3, #0
 801edda:	4604      	mov	r4, r0
 801eddc:	4608      	mov	r0, r1
 801edde:	4611      	mov	r1, r2
 801ede0:	602b      	str	r3, [r5, #0]
 801ede2:	f7e3 fa37 	bl	8002254 <_fstat>
 801ede6:	1c43      	adds	r3, r0, #1
 801ede8:	d102      	bne.n	801edf0 <_fstat_r+0x1c>
 801edea:	682b      	ldr	r3, [r5, #0]
 801edec:	b103      	cbz	r3, 801edf0 <_fstat_r+0x1c>
 801edee:	6023      	str	r3, [r4, #0]
 801edf0:	bd38      	pop	{r3, r4, r5, pc}
 801edf2:	bf00      	nop
 801edf4:	20027ccc 	.word	0x20027ccc

0801edf8 <_isatty_r>:
 801edf8:	b538      	push	{r3, r4, r5, lr}
 801edfa:	4d06      	ldr	r5, [pc, #24]	@ (801ee14 <_isatty_r+0x1c>)
 801edfc:	2300      	movs	r3, #0
 801edfe:	4604      	mov	r4, r0
 801ee00:	4608      	mov	r0, r1
 801ee02:	602b      	str	r3, [r5, #0]
 801ee04:	f7e3 fa36 	bl	8002274 <_isatty>
 801ee08:	1c43      	adds	r3, r0, #1
 801ee0a:	d102      	bne.n	801ee12 <_isatty_r+0x1a>
 801ee0c:	682b      	ldr	r3, [r5, #0]
 801ee0e:	b103      	cbz	r3, 801ee12 <_isatty_r+0x1a>
 801ee10:	6023      	str	r3, [r4, #0]
 801ee12:	bd38      	pop	{r3, r4, r5, pc}
 801ee14:	20027ccc 	.word	0x20027ccc

0801ee18 <_sbrk_r>:
 801ee18:	b538      	push	{r3, r4, r5, lr}
 801ee1a:	4d06      	ldr	r5, [pc, #24]	@ (801ee34 <_sbrk_r+0x1c>)
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	4604      	mov	r4, r0
 801ee20:	4608      	mov	r0, r1
 801ee22:	602b      	str	r3, [r5, #0]
 801ee24:	f7e3 fa3e 	bl	80022a4 <_sbrk>
 801ee28:	1c43      	adds	r3, r0, #1
 801ee2a:	d102      	bne.n	801ee32 <_sbrk_r+0x1a>
 801ee2c:	682b      	ldr	r3, [r5, #0]
 801ee2e:	b103      	cbz	r3, 801ee32 <_sbrk_r+0x1a>
 801ee30:	6023      	str	r3, [r4, #0]
 801ee32:	bd38      	pop	{r3, r4, r5, pc}
 801ee34:	20027ccc 	.word	0x20027ccc

0801ee38 <abort>:
 801ee38:	b508      	push	{r3, lr}
 801ee3a:	2006      	movs	r0, #6
 801ee3c:	f000 f82c 	bl	801ee98 <raise>
 801ee40:	2001      	movs	r0, #1
 801ee42:	f7e3 f9b7 	bl	80021b4 <_exit>

0801ee46 <_raise_r>:
 801ee46:	291f      	cmp	r1, #31
 801ee48:	b538      	push	{r3, r4, r5, lr}
 801ee4a:	4605      	mov	r5, r0
 801ee4c:	460c      	mov	r4, r1
 801ee4e:	d904      	bls.n	801ee5a <_raise_r+0x14>
 801ee50:	2316      	movs	r3, #22
 801ee52:	6003      	str	r3, [r0, #0]
 801ee54:	f04f 30ff 	mov.w	r0, #4294967295
 801ee58:	bd38      	pop	{r3, r4, r5, pc}
 801ee5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ee5c:	b112      	cbz	r2, 801ee64 <_raise_r+0x1e>
 801ee5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ee62:	b94b      	cbnz	r3, 801ee78 <_raise_r+0x32>
 801ee64:	4628      	mov	r0, r5
 801ee66:	f000 f831 	bl	801eecc <_getpid_r>
 801ee6a:	4622      	mov	r2, r4
 801ee6c:	4601      	mov	r1, r0
 801ee6e:	4628      	mov	r0, r5
 801ee70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee74:	f000 b818 	b.w	801eea8 <_kill_r>
 801ee78:	2b01      	cmp	r3, #1
 801ee7a:	d00a      	beq.n	801ee92 <_raise_r+0x4c>
 801ee7c:	1c59      	adds	r1, r3, #1
 801ee7e:	d103      	bne.n	801ee88 <_raise_r+0x42>
 801ee80:	2316      	movs	r3, #22
 801ee82:	6003      	str	r3, [r0, #0]
 801ee84:	2001      	movs	r0, #1
 801ee86:	e7e7      	b.n	801ee58 <_raise_r+0x12>
 801ee88:	2100      	movs	r1, #0
 801ee8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ee8e:	4620      	mov	r0, r4
 801ee90:	4798      	blx	r3
 801ee92:	2000      	movs	r0, #0
 801ee94:	e7e0      	b.n	801ee58 <_raise_r+0x12>
	...

0801ee98 <raise>:
 801ee98:	4b02      	ldr	r3, [pc, #8]	@ (801eea4 <raise+0xc>)
 801ee9a:	4601      	mov	r1, r0
 801ee9c:	6818      	ldr	r0, [r3, #0]
 801ee9e:	f7ff bfd2 	b.w	801ee46 <_raise_r>
 801eea2:	bf00      	nop
 801eea4:	2000003c 	.word	0x2000003c

0801eea8 <_kill_r>:
 801eea8:	b538      	push	{r3, r4, r5, lr}
 801eeaa:	4d07      	ldr	r5, [pc, #28]	@ (801eec8 <_kill_r+0x20>)
 801eeac:	2300      	movs	r3, #0
 801eeae:	4604      	mov	r4, r0
 801eeb0:	4608      	mov	r0, r1
 801eeb2:	4611      	mov	r1, r2
 801eeb4:	602b      	str	r3, [r5, #0]
 801eeb6:	f7e3 f96b 	bl	8002190 <_kill>
 801eeba:	1c43      	adds	r3, r0, #1
 801eebc:	d102      	bne.n	801eec4 <_kill_r+0x1c>
 801eebe:	682b      	ldr	r3, [r5, #0]
 801eec0:	b103      	cbz	r3, 801eec4 <_kill_r+0x1c>
 801eec2:	6023      	str	r3, [r4, #0]
 801eec4:	bd38      	pop	{r3, r4, r5, pc}
 801eec6:	bf00      	nop
 801eec8:	20027ccc 	.word	0x20027ccc

0801eecc <_getpid_r>:
 801eecc:	f7e3 b958 	b.w	8002180 <_getpid>

0801eed0 <_init>:
 801eed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eed2:	bf00      	nop
 801eed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eed6:	bc08      	pop	{r3}
 801eed8:	469e      	mov	lr, r3
 801eeda:	4770      	bx	lr

0801eedc <_fini>:
 801eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eede:	bf00      	nop
 801eee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eee2:	bc08      	pop	{r3}
 801eee4:	469e      	mov	lr, r3
 801eee6:	4770      	bx	lr
